// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent)
    {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object) ((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error)
    {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default)
    {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error)
    {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs)
    {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).CloneAsArray()) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length)
    {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys)
    {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator)
    {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START: ;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7247)");
      after__ASSIGN_SUCH_THAT_0: ;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a)
    {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq)
    {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y)
    {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y)
    {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d)
    {
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d)
    {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d)
    {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m)
    {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e)
    {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START: ;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow)
    {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit,_148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.HexConversion.__default.HEX__DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit,_165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.DecimalConversion.__default.DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape)
    {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape)
    {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineNotInner { get; }
    _IUnOpFormat DowncastClone();
  }
  public abstract class UnOpFormat : _IUnOpFormat {
    public UnOpFormat() {
    }
    private static readonly DAST.Format._IUnOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnOpFormat>(DAST.Format.UnOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnOpFormat create_NoFormat() {
      return new UnOpFormat_NoFormat();
    }
    public static _IUnOpFormat create_CombineNotInner() {
      return new UnOpFormat_CombineNotInner();
    }
    public bool is_NoFormat { get { return this is UnOpFormat_NoFormat; } }
    public bool is_CombineNotInner { get { return this is UnOpFormat_CombineNotInner; } }
    public static System.Collections.Generic.IEnumerable<_IUnOpFormat> AllSingletonConstructors {
      get {
        yield return UnOpFormat.create_NoFormat();
        yield return UnOpFormat.create_CombineNotInner();
      }
    }
    public abstract _IUnOpFormat DowncastClone();
  }
  public class UnOpFormat_NoFormat : UnOpFormat {
    public UnOpFormat_NoFormat() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.NoFormat";
      return s;
    }
  }
  public class UnOpFormat_CombineNotInner : UnOpFormat {
    public UnOpFormat_CombineNotInner() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_CombineNotInner();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_CombineNotInner;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.CombineNotInner";
      return s;
    }
  }

  public interface _IBinOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_Equivalence { get; }
    bool is_ReverseOperands { get; }
    _IBinOpFormat DowncastClone();
  }
  public abstract class BinOpFormat : _IBinOpFormat {
    public BinOpFormat() {
    }
    private static readonly DAST.Format._IBinOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinOpFormat>(DAST.Format.BinOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOpFormat create_NoFormat() {
      return new BinOpFormat_NoFormat();
    }
    public static _IBinOpFormat create_ImpliesFormat() {
      return new BinOpFormat_ImpliesFormat();
    }
    public static _IBinOpFormat create_Equivalence() {
      return new BinOpFormat_Equivalence();
    }
    public static _IBinOpFormat create_ReverseOperands() {
      return new BinOpFormat_ReverseOperands();
    }
    public bool is_NoFormat { get { return this is BinOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinOpFormat_ImpliesFormat; } }
    public bool is_Equivalence { get { return this is BinOpFormat_Equivalence; } }
    public bool is_ReverseOperands { get { return this is BinOpFormat_ReverseOperands; } }
    public static System.Collections.Generic.IEnumerable<_IBinOpFormat> AllSingletonConstructors {
      get {
        yield return BinOpFormat.create_NoFormat();
        yield return BinOpFormat.create_ImpliesFormat();
        yield return BinOpFormat.create_Equivalence();
        yield return BinOpFormat.create_ReverseOperands();
      }
    }
    public abstract _IBinOpFormat DowncastClone();
  }
  public class BinOpFormat_NoFormat : BinOpFormat {
    public BinOpFormat_NoFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.NoFormat";
      return s;
    }
  }
  public class BinOpFormat_ImpliesFormat : BinOpFormat {
    public BinOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinOpFormat_Equivalence : BinOpFormat {
    public BinOpFormat_Equivalence() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_Equivalence();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_Equivalence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.Equivalence";
      return s;
    }
  }
  public class BinOpFormat_ReverseOperands : BinOpFormat {
    public BinOpFormat_ReverseOperands() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ReverseOperands();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ReverseOperands;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ReverseOperands";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_SetBuilder { get; }
    bool is_MapBuilder { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_SetBuilder(DAST._IType element) {
      return new Type_SetBuilder(element);
    }
    public static _IType create_MapBuilder(DAST._IType key, DAST._IType @value) {
      return new Type_MapBuilder(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_SetBuilder { get { return this is Type_SetBuilder; } }
    public bool is_MapBuilder { get { return this is Type_MapBuilder; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        if (d is Type_Multiset) { return ((Type_Multiset)d)._element; }
        return ((Type_SetBuilder)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._key; }
        return ((Type_MapBuilder)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._value; }
        return ((Type_MapBuilder)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_SetBuilder : Type {
    public readonly DAST._IType _element;
    public Type_SetBuilder(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SetBuilder(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_SetBuilder;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_MapBuilder : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_MapBuilder(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_MapBuilder(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_MapBuilder;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_Attribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_args { get; }
    _IAttribute DowncastClone();
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _args;
    public Attribute(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      this._name = name;
      this._args = args;
    }
    public _IAttribute DowncastClone() {
      if (this is _IAttribute dt) { return dt; }
      return new Attribute(_name, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Attribute;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Attribute.Attribute";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
    private static readonly DAST._IAttribute theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IAttribute Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAttribute> _TYPE = new Dafny.TypeDescriptor<DAST._IAttribute>(DAST.Attribute.Default());
    public static Dafny.TypeDescriptor<DAST._IAttribute> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      return new Attribute(name, args);
    }
    public static _IAttribute create_Attribute(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      return create(name, args);
    }
    public bool is_Attribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_args {
      get {
        return this._args;
      }
    }
  }

  public interface _IDatatypeType {
    bool is_DatatypeType { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IDatatypeType DowncastClone();
  }
  public class DatatypeType : _IDatatypeType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public DatatypeType(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._path = path;
      this._attributes = attributes;
    }
    public _IDatatypeType DowncastClone() {
      if (this is _IDatatypeType dt) { return dt; }
      return new DatatypeType(_path, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeType;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeType.DatatypeType";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeType theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IDatatypeType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeType> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeType>(DAST.DatatypeType.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeType create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new DatatypeType(path, attributes);
    }
    public static _IDatatypeType create_DatatypeType(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(path, attributes);
    }
    public bool is_DatatypeType { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        return this._path;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    DAST._IDatatypeType dtor_datatypeType { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(DAST.DatatypeType.Default());
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(DAST._IDatatypeType datatypeType) {
      return new ResolvedType_Datatype(datatypeType);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new ResolvedType_Trait(path, attributes);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new ResolvedType_Newtype(baseType, range, erase, attributes);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public DAST._IDatatypeType dtor_datatypeType {
      get {
        var d = this;
        return ((ResolvedType_Datatype)d)._datatypeType;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        var d = this;
        if (d is ResolvedType_Trait) { return ((ResolvedType_Trait)d)._attributes; }
        return ((ResolvedType_Newtype)d)._attributes;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly DAST._IDatatypeType _datatypeType;
    public ResolvedType_Datatype(DAST._IDatatypeType datatypeType) : base() {
      this._datatypeType = datatypeType;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_datatypeType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._datatypeType, oth._datatypeType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._datatypeType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._datatypeType);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) : base() {
      this._path = path;
      this._attributes = attributes;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase, Dafny.ISequence<DAST._IAttribute> attributes) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
      this._attributes = attributes;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
      this._attributes = attributes;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body, attributes);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body, attributes);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
      this._attributes = attributes;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Trait(name, typeParams, body, attributes);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, typeParams, body, attributes);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
      this._attributes = attributes;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo, attributes);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo, attributes);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
      this._attributes = attributes;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default(), Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr, attributes);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr, attributes);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _ICallName {
    bool is_Name { get; }
    bool is_MapBuilderAdd { get; }
    bool is_MapBuilderBuild { get; }
    bool is_SetBuilderAdd { get; }
    bool is_SetBuilderBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    _ICallName DowncastClone();
  }
  public abstract class CallName : _ICallName {
    public CallName() {
    }
    private static readonly DAST._ICallName theDefault = create_Name(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._ICallName Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICallName> _TYPE = new Dafny.TypeDescriptor<DAST._ICallName>(DAST.CallName.Default());
    public static Dafny.TypeDescriptor<DAST._ICallName> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICallName create_Name(Dafny.ISequence<Dafny.Rune> name) {
      return new CallName_Name(name);
    }
    public static _ICallName create_MapBuilderAdd() {
      return new CallName_MapBuilderAdd();
    }
    public static _ICallName create_MapBuilderBuild() {
      return new CallName_MapBuilderBuild();
    }
    public static _ICallName create_SetBuilderAdd() {
      return new CallName_SetBuilderAdd();
    }
    public static _ICallName create_SetBuilderBuild() {
      return new CallName_SetBuilderBuild();
    }
    public bool is_Name { get { return this is CallName_Name; } }
    public bool is_MapBuilderAdd { get { return this is CallName_MapBuilderAdd; } }
    public bool is_MapBuilderBuild { get { return this is CallName_MapBuilderBuild; } }
    public bool is_SetBuilderAdd { get { return this is CallName_SetBuilderAdd; } }
    public bool is_SetBuilderBuild { get { return this is CallName_SetBuilderBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((CallName_Name)d)._name;
      }
    }
    public abstract _ICallName DowncastClone();
  }
  public class CallName_Name : CallName {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public CallName_Name(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_Name(_name);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_Name;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.Name";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class CallName_MapBuilderAdd : CallName {
    public CallName_MapBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderAdd";
      return s;
    }
  }
  public class CallName_MapBuilderBuild : CallName {
    public CallName_MapBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderBuild";
      return s;
    }
  }
  public class CallName_SetBuilderAdd : CallName {
    public CallName_SetBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderAdd";
      return s;
    }
  }
  public class CallName_SetBuilderBuild : CallName {
    public CallName_SetBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderBuild";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, callName, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Statement_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _callName, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_LtChar { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SeqProperPrefix { get; }
    bool is_SeqPrefix { get; }
    bool is_SetMerge { get; }
    bool is_SetSubtraction { get; }
    bool is_SetIntersection { get; }
    bool is_Subset { get; }
    bool is_ProperSubset { get; }
    bool is_SetDisjoint { get; }
    bool is_MapMerge { get; }
    bool is_MapSubtraction { get; }
    bool is_MultisetMerge { get; }
    bool is_MultisetSubtraction { get; }
    bool is_MultisetIntersection { get; }
    bool is_Submultiset { get; }
    bool is_ProperSubmultiset { get; }
    bool is_MultisetDisjoint { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_LtChar() {
      return new BinOp_LtChar();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SeqProperPrefix() {
      return new BinOp_SeqProperPrefix();
    }
    public static _IBinOp create_SeqPrefix() {
      return new BinOp_SeqPrefix();
    }
    public static _IBinOp create_SetMerge() {
      return new BinOp_SetMerge();
    }
    public static _IBinOp create_SetSubtraction() {
      return new BinOp_SetSubtraction();
    }
    public static _IBinOp create_SetIntersection() {
      return new BinOp_SetIntersection();
    }
    public static _IBinOp create_Subset() {
      return new BinOp_Subset();
    }
    public static _IBinOp create_ProperSubset() {
      return new BinOp_ProperSubset();
    }
    public static _IBinOp create_SetDisjoint() {
      return new BinOp_SetDisjoint();
    }
    public static _IBinOp create_MapMerge() {
      return new BinOp_MapMerge();
    }
    public static _IBinOp create_MapSubtraction() {
      return new BinOp_MapSubtraction();
    }
    public static _IBinOp create_MultisetMerge() {
      return new BinOp_MultisetMerge();
    }
    public static _IBinOp create_MultisetSubtraction() {
      return new BinOp_MultisetSubtraction();
    }
    public static _IBinOp create_MultisetIntersection() {
      return new BinOp_MultisetIntersection();
    }
    public static _IBinOp create_Submultiset() {
      return new BinOp_Submultiset();
    }
    public static _IBinOp create_ProperSubmultiset() {
      return new BinOp_ProperSubmultiset();
    }
    public static _IBinOp create_MultisetDisjoint() {
      return new BinOp_MultisetDisjoint();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_LtChar { get { return this is BinOp_LtChar; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SeqProperPrefix { get { return this is BinOp_SeqProperPrefix; } }
    public bool is_SeqPrefix { get { return this is BinOp_SeqPrefix; } }
    public bool is_SetMerge { get { return this is BinOp_SetMerge; } }
    public bool is_SetSubtraction { get { return this is BinOp_SetSubtraction; } }
    public bool is_SetIntersection { get { return this is BinOp_SetIntersection; } }
    public bool is_Subset { get { return this is BinOp_Subset; } }
    public bool is_ProperSubset { get { return this is BinOp_ProperSubset; } }
    public bool is_SetDisjoint { get { return this is BinOp_SetDisjoint; } }
    public bool is_MapMerge { get { return this is BinOp_MapMerge; } }
    public bool is_MapSubtraction { get { return this is BinOp_MapSubtraction; } }
    public bool is_MultisetMerge { get { return this is BinOp_MultisetMerge; } }
    public bool is_MultisetSubtraction { get { return this is BinOp_MultisetSubtraction; } }
    public bool is_MultisetIntersection { get { return this is BinOp_MultisetIntersection; } }
    public bool is_Submultiset { get { return this is BinOp_Submultiset; } }
    public bool is_ProperSubmultiset { get { return this is BinOp_ProperSubmultiset; } }
    public bool is_MultisetDisjoint { get { return this is BinOp_MultisetDisjoint; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_LtChar : BinOp {
    public BinOp_LtChar() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_LtChar();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_LtChar;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.LtChar";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SeqProperPrefix : BinOp {
    public BinOp_SeqProperPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqProperPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqProperPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqProperPrefix";
      return s;
    }
  }
  public class BinOp_SeqPrefix : BinOp {
    public BinOp_SeqPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqPrefix";
      return s;
    }
  }
  public class BinOp_SetMerge : BinOp {
    public BinOp_SetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetMerge";
      return s;
    }
  }
  public class BinOp_SetSubtraction : BinOp {
    public BinOp_SetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetSubtraction";
      return s;
    }
  }
  public class BinOp_SetIntersection : BinOp {
    public BinOp_SetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetIntersection";
      return s;
    }
  }
  public class BinOp_Subset : BinOp {
    public BinOp_Subset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Subset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Subset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Subset";
      return s;
    }
  }
  public class BinOp_ProperSubset : BinOp {
    public BinOp_ProperSubset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubset";
      return s;
    }
  }
  public class BinOp_SetDisjoint : BinOp {
    public BinOp_SetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDisjoint";
      return s;
    }
  }
  public class BinOp_MapMerge : BinOp {
    public BinOp_MapMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapMerge";
      return s;
    }
  }
  public class BinOp_MapSubtraction : BinOp {
    public BinOp_MapSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetMerge : BinOp {
    public BinOp_MultisetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetMerge";
      return s;
    }
  }
  public class BinOp_MultisetSubtraction : BinOp {
    public BinOp_MultisetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetIntersection : BinOp {
    public BinOp_MultisetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetIntersection";
      return s;
    }
  }
  public class BinOp_Submultiset : BinOp {
    public BinOp_Submultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Submultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Submultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Submultiset";
      return s;
    }
  }
  public class BinOp_ProperSubmultiset : BinOp {
    public BinOp_ProperSubmultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubmultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubmultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubmultiset";
      return s;
    }
  }
  public class BinOp_MultisetDisjoint : BinOp {
    public BinOp_MultisetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetDisjoint";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MultisetValue { get; }
    bool is_MapValue { get; }
    bool is_MapBuilder { get; }
    bool is_SeqUpdate { get; }
    bool is_MapUpdate { get; }
    bool is_SetBuilder { get; }
    bool is_ToMultiset { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_MapKeys { get; }
    bool is_MapValues { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    DAST._IDatatypeType dtor_datatypeType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IType dtor_keyType { get; }
    DAST._IType dtor_valueType { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IExpression dtor_indexExpr { get; }
    DAST._IType dtor_elemType { get; }
    DAST._IExpression dtor_ToMultiset_a0 { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST.Format._IUnOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(DAST._IDatatypeType datatypeType, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(datatypeType, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_MultisetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_MapBuilder(DAST._IType keyType, DAST._IType valueType) {
      return new Expression_MapBuilder(keyType, valueType);
    }
    public static _IExpression create_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_SeqUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_MapUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_SetBuilder(DAST._IType elemType) {
      return new Expression_SetBuilder(elemType);
    }
    public static _IExpression create_ToMultiset(DAST._IExpression _a0) {
      return new Expression_ToMultiset(_a0);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_MapKeys(DAST._IExpression expr) {
      return new Expression_MapKeys(expr);
    }
    public static _IExpression create_MapValues(DAST._IExpression expr) {
      return new Expression_MapValues(expr);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, callName, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MultisetValue { get { return this is Expression_MultisetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_MapBuilder { get { return this is Expression_MapBuilder; } }
    public bool is_SeqUpdate { get { return this is Expression_SeqUpdate; } }
    public bool is_MapUpdate { get { return this is Expression_MapUpdate; } }
    public bool is_SetBuilder { get { return this is Expression_SetBuilder; } }
    public bool is_ToMultiset { get { return this is Expression_ToMultiset; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_MapKeys { get { return this is Expression_MapKeys; } }
    public bool is_MapValues { get { return this is Expression_MapValues; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        return ((Expression_New)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public DAST._IDatatypeType dtor_datatypeType {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._datatypeType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._value; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        if (d is Expression_SetValue) { return ((Expression_SetValue)d)._elements; }
        return ((Expression_MultisetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IType dtor_keyType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._keyType;
      }
    }
    public DAST._IType dtor_valueType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._valueType;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._expr; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._expr; }
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_MapKeys) { return ((Expression_MapKeys)d)._expr; }
        if (d is Expression_MapValues) { return ((Expression_MapValues)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IExpression dtor_indexExpr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._indexExpr; }
        return ((Expression_MapUpdate)d)._indexExpr;
      }
    }
    public DAST._IType dtor_elemType {
      get {
        var d = this;
        return ((Expression_SetBuilder)d)._elemType;
      }
    }
    public DAST._IExpression dtor_ToMultiset_a0 {
      get {
        var d = this;
        return ((Expression_ToMultiset)d)._a0;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Expression_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expression_IIFE)d)._name;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly DAST._IDatatypeType _datatypeType;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(DAST._IDatatypeType datatypeType, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._datatypeType = datatypeType;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_datatypeType, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._datatypeType, oth._datatypeType) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._datatypeType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._datatypeType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MultisetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MultisetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MultisetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MultisetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_MapBuilder : Expression {
    public readonly DAST._IType _keyType;
    public readonly DAST._IType _valueType;
    public Expression_MapBuilder(DAST._IType keyType, DAST._IType valueType) : base() {
      this._keyType = keyType;
      this._valueType = valueType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapBuilder(_keyType, _valueType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapBuilder;
      return oth != null && object.Equals(this._keyType, oth._keyType) && object.Equals(this._valueType, oth._valueType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._keyType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._valueType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._keyType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._valueType);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_MapUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_SetBuilder : Expression {
    public readonly DAST._IType _elemType;
    public Expression_SetBuilder(DAST._IType elemType) : base() {
      this._elemType = elemType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBuilder(_elemType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBuilder;
      return oth != null && object.Equals(this._elemType, oth._elemType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elemType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._elemType);
      s += ")";
      return s;
    }
  }
  public class Expression_ToMultiset : Expression {
    public readonly DAST._IExpression _a0;
    public Expression_ToMultiset(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ToMultiset(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ToMultiset;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ToMultiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_MapKeys : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapKeys(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapKeys(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapKeys;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapKeys";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValues : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapValues(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValues(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValues;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValues";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _callName, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 36;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 37;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 38;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 39;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 40;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _801_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _802_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_801_i) < (_802_j)) {
          return _802_j;
        } else {
          return _801_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IExpr NewVec(Dafny.ISequence<RAST._IExpr> elements) {
      return (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec!"))).Apply(elements);
    }
    public static RAST._IExpr Clone(RAST._IExpr underlying) {
      return (RAST.Expr.create_Select(underlying, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
    }
    public static RAST._IExpr Borrow(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IExpr BorrowMut(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TIdentifier(content);
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind)
    {
      Dafny.ISequence<Dafny.Rune> _803___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j)
    {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.__default.std__rc__Rc__new, Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType SelfBorrowed { get {
      return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType SelfBorrowedMut { get {
      return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType global__type { get {
      return RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IType std__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IType CloneTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
    } }
    public static RAST._IType DafnyPrintTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
    } }
    public static RAST._IType DefaultTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
    } }
    public static RAST._IType StaticTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
    } }
    public static RAST._IType cell__type { get {
      return (RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"));
    } }
    public static RAST._IType refcell__type { get {
      return (RAST.__default.cell__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"));
    } }
    public static RAST._IType dafny__runtime__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
    } }
    public static RAST._IExpr self { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"));
    } }
    public static RAST._IExpr @global { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IExpr dafny__runtime { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static RAST._IExpr dafny__runtime__Set { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set"));
    } }
    public static RAST._IExpr dafny__runtime__Set__from__array { get {
      return (RAST.__default.dafny__runtime__Set).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Sequence { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"));
    } }
    public static RAST._IExpr Sequence__from__array__owned { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array_owned"));
    } }
    public static RAST._IExpr Sequence__from__array { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset__from__array { get {
      return (RAST.__default.dafny__runtime__Multiset).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr std { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IExpr std__rc { get {
      return (RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"));
    } }
    public static RAST._IExpr std__rc__Rc { get {
      return (RAST.__default.std__rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc"));
    } }
    public static RAST._IExpr std__rc__Rc__new { get {
      return (RAST.__default.std__rc__Rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
    } }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _805___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _806_body = _805___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _807_name = _804___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _807_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_806_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_808_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_809_modDecl) => {
          return (_809_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_808_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _810___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _811_name = _810___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _811_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind)
    {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_812_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_813_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_813_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _812_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    RAST._IVisibility dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly RAST._IVisibility _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && object.Equals(this._visibility, oth._visibility) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(RAST.Visibility.Default(), RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(RAST._IVisibility visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public RAST._IVisibility dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_visibility, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _814_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _815_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _816_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _815_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_817_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_818_field) => {
          return (_818_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_817_ind, RAST.__default.IND));
        })))(ind), _814_separator)), _816_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _819_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_821_t) => {
          return (_821_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND));
        })))(ind), _819_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_823_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _822_ind), RAST.__default.IND), (_823_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind)
    {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_825_t) => {
          return (_825_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints)
    {
      Dafny.ISequence<RAST._ITypeParam> _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _827_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _828_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_827_dt__update__tmp_h0).dtor_content, _828_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_829_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_830_t) => {
        return (_830_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_829_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TIdentifier { get; }
    bool is_TMemberSelect { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_base { get; }
    RAST._IType dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IType Apply1(RAST._IType arg);
    RAST._IType Apply(Dafny.ISequence<RAST._IType> args);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TIdentifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TIdentifier(name);
    }
    public static _IType create_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TMemberSelect(@base, name);
    }
    public static _IType create_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TIdentifier { get { return this is Type_TIdentifier; } }
    public bool is_TMemberSelect { get { return this is Type_TMemberSelect; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Type_TIdentifier) { return ((Type_TIdentifier)d)._name; }
        return ((Type_TMemberSelect)d)._name;
      }
    }
    public RAST._IType dtor_base {
      get {
        var d = this;
        return ((Type_TMemberSelect)d)._base;
      }
    }
    public RAST._IType dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TIdentifier) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _832_underlying = _831___mcc_h0;
        return _832_underlying;
      } else if (_source26.is_TMemberSelect) {
        RAST._IType _833___mcc_h1 = _source26.dtor_base;
        Dafny.ISequence<Dafny.Rune> _834___mcc_h2 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _835_name = _834___mcc_h2;
        RAST._IType _836_underlying = _833___mcc_h1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_836_underlying)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _835_name);
      } else if (_source26.is_TypeApp) {
        RAST._IType _837___mcc_h3 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _838___mcc_h4 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _839_args = _838___mcc_h4;
        RAST._IType _840_base = _837___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat((_840_base)._ToString(ind), (((_839_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_839_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_841_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_842_arg) => {
          return (_842_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_841_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _843___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _844_underlying = _843___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_844_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _845___mcc_h6 = _source26.dtor_underlying;
        RAST._IType _846_underlying = _845___mcc_h6;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_846_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _847___mcc_h7 = _source26.dtor_underlying;
        RAST._IType _848_underlying = _847___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_848_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _849___mcc_h8 = _source26.dtor_underlying;
        RAST._IType _850_underlying = _849___mcc_h8;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_850_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _851___mcc_h9 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _852_args = _851___mcc_h9;
        if ((_852_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_852_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_853_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_854_arg) => {
            return (_854_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_853_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _855___mcc_h10 = _source26.dtor_arguments;
        RAST._IType _856___mcc_h11 = _source26.dtor_returnType;
        RAST._IType _857_returnType = _856___mcc_h11;
        Dafny.ISequence<RAST._IType> _858_arguments = _855___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_858_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_859_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_860_arg) => {
          return (_860_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_859_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_857_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _861___mcc_h12 = _source26.dtor_left;
        RAST._IType _862___mcc_h13 = _source26.dtor_right;
        RAST._IType _863_right = _862___mcc_h13;
        RAST._IType _864_left = _861___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_864_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_863_right)._ToString(ind));
      }
    }
    public RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Type.create_TMemberSelect(this, name);
    }
    public RAST._IType Apply1(RAST._IType arg) {
      return RAST.Type.create_TypeApp(this, Dafny.Sequence<RAST._IType>.FromElements(arg));
    }
    public RAST._IType Apply(Dafny.ISequence<RAST._IType> args) {
      return RAST.Type.create_TypeApp(this, args);
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TIdentifier : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TIdentifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TIdentifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TIdentifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TIdentifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TMemberSelect : Type {
    public readonly RAST._IType _base;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._base = @base;
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TMemberSelect(_base, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TMemberSelect;
      return oth != null && object.Equals(this._base, oth._base) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TMemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly RAST._IType _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_865_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_866_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _865_ind), RAST.__default.IND), (_866_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_865_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_867_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_868_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _867_ind), RAST.__default.IND), (_868_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_867_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IVisibility dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(RAST._IVisibility pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public RAST._IVisibility dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_pub, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly RAST._IVisibility _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(RAST._IVisibility pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && object.Equals(this._pub, oth._pub) && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public interface _IVisibility {
    bool is_PUB { get; }
    bool is_PRIV { get; }
    _IVisibility DowncastClone();
  }
  public abstract class Visibility : _IVisibility {
    public Visibility() {
    }
    private static readonly RAST._IVisibility theDefault = create_PUB();
    public static RAST._IVisibility Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IVisibility> _TYPE = new Dafny.TypeDescriptor<RAST._IVisibility>(RAST.Visibility.Default());
    public static Dafny.TypeDescriptor<RAST._IVisibility> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVisibility create_PUB() {
      return new Visibility_PUB();
    }
    public static _IVisibility create_PRIV() {
      return new Visibility_PRIV();
    }
    public bool is_PUB { get { return this is Visibility_PUB; } }
    public bool is_PRIV { get { return this is Visibility_PRIV; } }
    public static System.Collections.Generic.IEnumerable<_IVisibility> AllSingletonConstructors {
      get {
        yield return Visibility.create_PUB();
        yield return Visibility.create_PRIV();
      }
    }
    public abstract _IVisibility DowncastClone();
  }
  public class Visibility_PUB : Visibility {
    public Visibility_PUB() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PUB();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PUB;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PUB";
      return s;
    }
  }
  public class Visibility_PRIV : Visibility {
    public Visibility_PRIV() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PRIV();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PRIV;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PRIV";
      return s;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfBorrowedMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal selfBorrowed { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.SelfBorrowed);
    } }
    public static RAST._IFormal selfOwned { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
    } }
    public static RAST._IFormal selfMut { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfBorrowedMut);
    } }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _869_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _870_rhsString = ((this).dtor_rhs)._ToString(_869_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_870_rhsString).Contains(new Dafny.Rune('\n'))) && (((_870_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _870_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _870_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IAssociativity {
    bool is_LeftToRight { get; }
    bool is_RightToLeft { get; }
    bool is_RequiresParentheses { get; }
    _IAssociativity DowncastClone();
  }
  public abstract class Associativity : _IAssociativity {
    public Associativity() {
    }
    private static readonly RAST._IAssociativity theDefault = create_LeftToRight();
    public static RAST._IAssociativity Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssociativity> _TYPE = new Dafny.TypeDescriptor<RAST._IAssociativity>(RAST.Associativity.Default());
    public static Dafny.TypeDescriptor<RAST._IAssociativity> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssociativity create_LeftToRight() {
      return new Associativity_LeftToRight();
    }
    public static _IAssociativity create_RightToLeft() {
      return new Associativity_RightToLeft();
    }
    public static _IAssociativity create_RequiresParentheses() {
      return new Associativity_RequiresParentheses();
    }
    public bool is_LeftToRight { get { return this is Associativity_LeftToRight; } }
    public bool is_RightToLeft { get { return this is Associativity_RightToLeft; } }
    public bool is_RequiresParentheses { get { return this is Associativity_RequiresParentheses; } }
    public static System.Collections.Generic.IEnumerable<_IAssociativity> AllSingletonConstructors {
      get {
        yield return Associativity.create_LeftToRight();
        yield return Associativity.create_RightToLeft();
        yield return Associativity.create_RequiresParentheses();
      }
    }
    public abstract _IAssociativity DowncastClone();
  }
  public class Associativity_LeftToRight : Associativity {
    public Associativity_LeftToRight() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_LeftToRight();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_LeftToRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.LeftToRight";
      return s;
    }
  }
  public class Associativity_RightToLeft : Associativity {
    public Associativity_RightToLeft() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RightToLeft();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RightToLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RightToLeft";
      return s;
    }
  }
  public class Associativity_RequiresParentheses : Associativity {
    public Associativity_RequiresParentheses() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RequiresParentheses();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RequiresParentheses;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RequiresParentheses";
      return s;
    }
  }

  public interface _IPrintingInfo {
    bool is_UnknownPrecedence { get; }
    bool is_Precedence { get; }
    bool is_SuffixPrecedence { get; }
    bool is_PrecedenceAssociativity { get; }
    BigInteger dtor_precedence { get; }
    RAST._IAssociativity dtor_associativity { get; }
    _IPrintingInfo DowncastClone();
    bool NeedParenthesesFor(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForRight(RAST._IPrintingInfo underlying);
  }
  public abstract class PrintingInfo : _IPrintingInfo {
    public PrintingInfo() {
    }
    private static readonly RAST._IPrintingInfo theDefault = create_UnknownPrecedence();
    public static RAST._IPrintingInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IPrintingInfo> _TYPE = new Dafny.TypeDescriptor<RAST._IPrintingInfo>(RAST.PrintingInfo.Default());
    public static Dafny.TypeDescriptor<RAST._IPrintingInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrintingInfo create_UnknownPrecedence() {
      return new PrintingInfo_UnknownPrecedence();
    }
    public static _IPrintingInfo create_Precedence(BigInteger precedence) {
      return new PrintingInfo_Precedence(precedence);
    }
    public static _IPrintingInfo create_SuffixPrecedence(BigInteger precedence) {
      return new PrintingInfo_SuffixPrecedence(precedence);
    }
    public static _IPrintingInfo create_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) {
      return new PrintingInfo_PrecedenceAssociativity(precedence, associativity);
    }
    public bool is_UnknownPrecedence { get { return this is PrintingInfo_UnknownPrecedence; } }
    public bool is_Precedence { get { return this is PrintingInfo_Precedence; } }
    public bool is_SuffixPrecedence { get { return this is PrintingInfo_SuffixPrecedence; } }
    public bool is_PrecedenceAssociativity { get { return this is PrintingInfo_PrecedenceAssociativity; } }
    public BigInteger dtor_precedence {
      get {
        var d = this;
        if (d is PrintingInfo_Precedence) { return ((PrintingInfo_Precedence)d)._precedence; }
        if (d is PrintingInfo_SuffixPrecedence) { return ((PrintingInfo_SuffixPrecedence)d)._precedence; }
        return ((PrintingInfo_PrecedenceAssociativity)d)._precedence;
      }
    }
    public RAST._IAssociativity dtor_associativity {
      get {
        var d = this;
        return ((PrintingInfo_PrecedenceAssociativity)d)._associativity;
      }
    }
    public abstract _IPrintingInfo DowncastClone();
    public bool NeedParenthesesFor(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return true;
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_LeftToRight));
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForRight(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_RightToLeft));
      } else {
        return false;
      }
    }
  }
  public class PrintingInfo_UnknownPrecedence : PrintingInfo {
    public PrintingInfo_UnknownPrecedence() : base() {
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_UnknownPrecedence();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_UnknownPrecedence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.UnknownPrecedence";
      return s;
    }
  }
  public class PrintingInfo_Precedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_Precedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_Precedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_Precedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.Precedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_SuffixPrecedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_SuffixPrecedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_SuffixPrecedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_SuffixPrecedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.SuffixPrecedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_PrecedenceAssociativity : PrintingInfo {
    public readonly BigInteger _precedence;
    public readonly RAST._IAssociativity _associativity;
    public PrintingInfo_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) : base() {
      this._precedence = precedence;
      this._associativity = associativity;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_PrecedenceAssociativity(_precedence, _associativity);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_PrecedenceAssociativity;
      return oth != null && this._precedence == oth._precedence && object.Equals(this._associativity, oth._associativity);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._associativity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.PrecedenceAssociativity";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ", ";
      s += Dafny.Helpers.ToString(this._associativity);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_ExprFromType { get; }
    bool is_Identifier { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_TypeAscription { get; }
    bool is_LiteralInt { get; }
    bool is_LiteralString { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_CallType { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    bool is_MemberSelect { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    bool dtor_binary { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    RAST._IPrintingInfo printingInfo { get; }
    BigInteger Height();
    RAST._IExpr Optimize();
    bool LeftRequiresParentheses(RAST._IExpr left);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left);
    bool RightRequiresParentheses(RAST._IExpr right);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right);
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
    RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr ApplyType(Dafny.ISequence<RAST._IType> typeParameters);
    RAST._IExpr ApplyType1(RAST._IType typeParameter);
    RAST._IExpr Apply(Dafny.ISequence<RAST._IExpr> arguments);
    RAST._IExpr Apply1(RAST._IExpr argument);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_ExprFromType(RAST._IType tpe) {
      return new Expr_ExprFromType(tpe);
    }
    public static _IExpr create_Identifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Identifier(name);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(RAST._IExpr underlying, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(underlying, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_TypeAscription(RAST._IExpr left, RAST._IType tpe) {
      return new Expr_TypeAscription(left, tpe);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) {
      return new Expr_LiteralString(@value, binary);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_CallType(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters) {
      return new Expr_CallType(obj, typeParameters);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, arguments);
    }
    public static _IExpr create_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Select(obj, name);
    }
    public static _IExpr create_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_MemberSelect(obj, name);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_ExprFromType { get { return this is Expr_ExprFromType; } }
    public bool is_Identifier { get { return this is Expr_Identifier; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_TypeAscription { get { return this is Expr_TypeAscription; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_LiteralString { get { return this is Expr_LiteralString; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_CallType { get { return this is Expr_CallType; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Select { get { return this is Expr_Select; } }
    public bool is_MemberSelect { get { return this is Expr_MemberSelect; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Expr_ExprFromType) { return ((Expr_ExprFromType)d)._tpe; }
        return ((Expr_TypeAscription)d)._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_Identifier) { return ((Expr_Identifier)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        if (d is Expr_For) { return ((Expr_For)d)._name; }
        if (d is Expr_Select) { return ((Expr_Select)d)._name; }
        return ((Expr_MemberSelect)d)._name;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        return ((Expr_Labelled)d)._underlying;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        if (d is Expr_BinaryOp) { return ((Expr_BinaryOp)d)._left; }
        return ((Expr_TypeAscription)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        if (d is Expr_LiteralInt) { return ((Expr_LiteralInt)d)._value; }
        return ((Expr_LiteralString)d)._value;
      }
    }
    public bool dtor_binary {
      get {
        var d = this;
        return ((Expr_LiteralString)d)._binary;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        if (d is Expr_CallType) { return ((Expr_CallType)d)._obj; }
        if (d is Expr_Call) { return ((Expr_Call)d)._obj; }
        if (d is Expr_Select) { return ((Expr_Select)d)._obj; }
        return ((Expr_MemberSelect)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_CallType)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _871___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_ExprFromType) {
        RAST._IType _872___mcc_h2 = _source27.dtor_tpe;
        return BigInteger.One;
      } else if (_source27.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _873___mcc_h4 = _source27.dtor_name;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _874___mcc_h6 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _875___mcc_h7 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _876_cases = _875___mcc_h7;
        RAST._IExpr _877_matchee = _874___mcc_h6;
        return (BigInteger.One) + (RAST.__default.max((_877_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_876_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_878_oneCase) => {
          return (_878_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _879___mcc_h10 = _source27.dtor_stmt;
        RAST._IExpr _880___mcc_h11 = _source27.dtor_rhs;
        RAST._IExpr _881_rhs = _880___mcc_h11;
        RAST._IExpr _882_stmt = _879___mcc_h10;
        BigInteger _883_default = (BigInteger.One) + (RAST.__default.max((_882_stmt).Height(), (_881_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _884___mcc_h100 = _source28.dtor_content;
          return _883_default;
        } else if (_source28.is_ExprFromType) {
          RAST._IType _885___mcc_h102 = _source28.dtor_tpe;
          return _883_default;
        } else if (_source28.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _886___mcc_h104 = _source28.dtor_name;
          return _883_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _887___mcc_h106 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _888___mcc_h107 = _source28.dtor_cases;
          return _883_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _889___mcc_h110 = _source28.dtor_stmt;
          RAST._IExpr _890___mcc_h111 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _889___mcc_h110;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _891___mcc_h114 = _source29.dtor_content;
            return _883_default;
          } else if (_source29.is_ExprFromType) {
            RAST._IType _892___mcc_h116 = _source29.dtor_tpe;
            return _883_default;
          } else if (_source29.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _893___mcc_h118 = _source29.dtor_name;
            return _883_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _894___mcc_h120 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _895___mcc_h121 = _source29.dtor_cases;
            return _883_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _896___mcc_h124 = _source29.dtor_stmt;
            RAST._IExpr _897___mcc_h125 = _source29.dtor_rhs;
            return _883_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _898___mcc_h128 = _source29.dtor_underlying;
            return _883_default;
          } else if (_source29.is_StructBuild) {
            RAST._IExpr _899___mcc_h130 = _source29.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _900___mcc_h131 = _source29.dtor_assignments;
            return _883_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _901___mcc_h134 = _source29.dtor_arguments;
            return _883_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _902___mcc_h136 = _source29.dtor_op1;
            RAST._IExpr _903___mcc_h137 = _source29.dtor_underlying;
            DAST.Format._IUnOpFormat _904___mcc_h138 = _source29.dtor_format;
            return _883_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _905___mcc_h142 = _source29.dtor_op2;
            RAST._IExpr _906___mcc_h143 = _source29.dtor_left;
            RAST._IExpr _907___mcc_h144 = _source29.dtor_right;
            DAST.Format._IBinOpFormat _908___mcc_h145 = _source29.dtor_format2;
            return _883_default;
          } else if (_source29.is_TypeAscription) {
            RAST._IExpr _909___mcc_h150 = _source29.dtor_left;
            RAST._IType _910___mcc_h151 = _source29.dtor_tpe;
            return _883_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _911___mcc_h154 = _source29.dtor_value;
            return _883_default;
          } else if (_source29.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _912___mcc_h156 = _source29.dtor_value;
            bool _913___mcc_h157 = _source29.dtor_binary;
            return _883_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _914___mcc_h160 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _915___mcc_h161 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _916___mcc_h162 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _917___mcc_h163 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _916___mcc_h162;
            if (_source30.is_None) {
              return _883_default;
            } else {
              RAST._IType _918___mcc_h168 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _917___mcc_h163;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _890___mcc_h111;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _919___mcc_h170 = _source32.dtor_content;
                  return _883_default;
                } else if (_source32.is_ExprFromType) {
                  RAST._IType _920___mcc_h172 = _source32.dtor_tpe;
                  return _883_default;
                } else if (_source32.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _921___mcc_h174 = _source32.dtor_name;
                  return _883_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _922___mcc_h176 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _923___mcc_h177 = _source32.dtor_cases;
                  return _883_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _924___mcc_h180 = _source32.dtor_stmt;
                  RAST._IExpr _925___mcc_h181 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _924___mcc_h180;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _926___mcc_h184 = _source33.dtor_content;
                    return _883_default;
                  } else if (_source33.is_ExprFromType) {
                    RAST._IType _927___mcc_h186 = _source33.dtor_tpe;
                    return _883_default;
                  } else if (_source33.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _928___mcc_h188 = _source33.dtor_name;
                    return _883_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _929___mcc_h190 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _930___mcc_h191 = _source33.dtor_cases;
                    return _883_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _931___mcc_h194 = _source33.dtor_stmt;
                    RAST._IExpr _932___mcc_h195 = _source33.dtor_rhs;
                    return _883_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _933___mcc_h198 = _source33.dtor_underlying;
                    return _883_default;
                  } else if (_source33.is_StructBuild) {
                    RAST._IExpr _934___mcc_h200 = _source33.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _935___mcc_h201 = _source33.dtor_assignments;
                    return _883_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _936___mcc_h204 = _source33.dtor_arguments;
                    return _883_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _937___mcc_h206 = _source33.dtor_op1;
                    RAST._IExpr _938___mcc_h207 = _source33.dtor_underlying;
                    DAST.Format._IUnOpFormat _939___mcc_h208 = _source33.dtor_format;
                    return _883_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _940___mcc_h212 = _source33.dtor_op2;
                    RAST._IExpr _941___mcc_h213 = _source33.dtor_left;
                    RAST._IExpr _942___mcc_h214 = _source33.dtor_right;
                    DAST.Format._IBinOpFormat _943___mcc_h215 = _source33.dtor_format2;
                    return _883_default;
                  } else if (_source33.is_TypeAscription) {
                    RAST._IExpr _944___mcc_h220 = _source33.dtor_left;
                    RAST._IType _945___mcc_h221 = _source33.dtor_tpe;
                    return _883_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _946___mcc_h224 = _source33.dtor_value;
                    return _883_default;
                  } else if (_source33.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _947___mcc_h226 = _source33.dtor_value;
                    bool _948___mcc_h227 = _source33.dtor_binary;
                    return _883_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _949___mcc_h230 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _950___mcc_h231 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _951___mcc_h232 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _952___mcc_h233 = _source33.dtor_optRhs;
                    return _883_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _953___mcc_h238 = _source33.dtor_name;
                    RAST._IExpr _954___mcc_h239 = _source33.dtor_rhs;
                    RAST._IExpr _955_last = _925___mcc_h181;
                    RAST._IExpr _956_rhs = _954___mcc_h239;
                    Dafny.ISequence<Dafny.Rune> _957_name2 = _953___mcc_h238;
                    RAST._IType _958_tpe = _918___mcc_h168;
                    Dafny.ISequence<Dafny.Rune> _959_name = _915___mcc_h161;
                    RAST._IDeclareType _960_mod = _914___mcc_h160;
                    if ((_959_name).Equals(_957_name2)) {
                      return (BigInteger.One) + (_883_default);
                    } else {
                      return _883_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _961___mcc_h242 = _source33.dtor_cond;
                    RAST._IExpr _962___mcc_h243 = _source33.dtor_thn;
                    RAST._IExpr _963___mcc_h244 = _source33.dtor_els;
                    return _883_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _964___mcc_h248 = _source33.dtor_optCond;
                    RAST._IExpr _965___mcc_h249 = _source33.dtor_underlying;
                    return _883_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _966___mcc_h252 = _source33.dtor_name;
                    RAST._IExpr _967___mcc_h253 = _source33.dtor_range;
                    RAST._IExpr _968___mcc_h254 = _source33.dtor_body;
                    return _883_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _969___mcc_h258 = _source33.dtor_lbl;
                    RAST._IExpr _970___mcc_h259 = _source33.dtor_underlying;
                    return _883_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _971___mcc_h262 = _source33.dtor_optLbl;
                    return _883_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _972___mcc_h264 = _source33.dtor_optLbl;
                    return _883_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _973___mcc_h266 = _source33.dtor_optExpr;
                    return _883_default;
                  } else if (_source33.is_CallType) {
                    RAST._IExpr _974___mcc_h268 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _975___mcc_h269 = _source33.dtor_typeParameters;
                    return _883_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _976___mcc_h272 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _977___mcc_h273 = _source33.dtor_arguments;
                    return _883_default;
                  } else if (_source33.is_Select) {
                    RAST._IExpr _978___mcc_h276 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _979___mcc_h277 = _source33.dtor_name;
                    return _883_default;
                  } else {
                    RAST._IExpr _980___mcc_h280 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _981___mcc_h281 = _source33.dtor_name;
                    return _883_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _982___mcc_h284 = _source32.dtor_underlying;
                  return _883_default;
                } else if (_source32.is_StructBuild) {
                  RAST._IExpr _983___mcc_h286 = _source32.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _984___mcc_h287 = _source32.dtor_assignments;
                  return _883_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _985___mcc_h290 = _source32.dtor_arguments;
                  return _883_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _986___mcc_h292 = _source32.dtor_op1;
                  RAST._IExpr _987___mcc_h293 = _source32.dtor_underlying;
                  DAST.Format._IUnOpFormat _988___mcc_h294 = _source32.dtor_format;
                  return _883_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _989___mcc_h298 = _source32.dtor_op2;
                  RAST._IExpr _990___mcc_h299 = _source32.dtor_left;
                  RAST._IExpr _991___mcc_h300 = _source32.dtor_right;
                  DAST.Format._IBinOpFormat _992___mcc_h301 = _source32.dtor_format2;
                  return _883_default;
                } else if (_source32.is_TypeAscription) {
                  RAST._IExpr _993___mcc_h306 = _source32.dtor_left;
                  RAST._IType _994___mcc_h307 = _source32.dtor_tpe;
                  return _883_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _995___mcc_h310 = _source32.dtor_value;
                  return _883_default;
                } else if (_source32.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _996___mcc_h312 = _source32.dtor_value;
                  bool _997___mcc_h313 = _source32.dtor_binary;
                  return _883_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _998___mcc_h316 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _999___mcc_h317 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1000___mcc_h318 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1001___mcc_h319 = _source32.dtor_optRhs;
                  return _883_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1002___mcc_h324 = _source32.dtor_name;
                  RAST._IExpr _1003___mcc_h325 = _source32.dtor_rhs;
                  return _883_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _1004___mcc_h328 = _source32.dtor_cond;
                  RAST._IExpr _1005___mcc_h329 = _source32.dtor_thn;
                  RAST._IExpr _1006___mcc_h330 = _source32.dtor_els;
                  return _883_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1007___mcc_h334 = _source32.dtor_optCond;
                  RAST._IExpr _1008___mcc_h335 = _source32.dtor_underlying;
                  return _883_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1009___mcc_h338 = _source32.dtor_name;
                  RAST._IExpr _1010___mcc_h339 = _source32.dtor_range;
                  RAST._IExpr _1011___mcc_h340 = _source32.dtor_body;
                  return _883_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1012___mcc_h344 = _source32.dtor_lbl;
                  RAST._IExpr _1013___mcc_h345 = _source32.dtor_underlying;
                  return _883_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1014___mcc_h348 = _source32.dtor_optLbl;
                  return _883_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1015___mcc_h350 = _source32.dtor_optLbl;
                  return _883_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1016___mcc_h352 = _source32.dtor_optExpr;
                  return _883_default;
                } else if (_source32.is_CallType) {
                  RAST._IExpr _1017___mcc_h354 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1018___mcc_h355 = _source32.dtor_typeParameters;
                  return _883_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _1019___mcc_h358 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1020___mcc_h359 = _source32.dtor_arguments;
                  return _883_default;
                } else if (_source32.is_Select) {
                  RAST._IExpr _1021___mcc_h362 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1022___mcc_h363 = _source32.dtor_name;
                  return _883_default;
                } else {
                  RAST._IExpr _1023___mcc_h366 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1024___mcc_h367 = _source32.dtor_name;
                  return _883_default;
                }
              } else {
                RAST._IExpr _1025___mcc_h370 = _source31.dtor_value;
                return _883_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1026___mcc_h372 = _source29.dtor_name;
            RAST._IExpr _1027___mcc_h373 = _source29.dtor_rhs;
            return _883_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _1028___mcc_h376 = _source29.dtor_cond;
            RAST._IExpr _1029___mcc_h377 = _source29.dtor_thn;
            RAST._IExpr _1030___mcc_h378 = _source29.dtor_els;
            RAST._IExpr _source34 = _1028___mcc_h376;
            if (_source34.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1031___mcc_h382 = _source34.dtor_content;
              return _883_default;
            } else if (_source34.is_ExprFromType) {
              RAST._IType _1032___mcc_h384 = _source34.dtor_tpe;
              return _883_default;
            } else if (_source34.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1033___mcc_h386 = _source34.dtor_name;
              return _883_default;
            } else if (_source34.is_Match) {
              RAST._IExpr _1034___mcc_h388 = _source34.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1035___mcc_h389 = _source34.dtor_cases;
              return _883_default;
            } else if (_source34.is_StmtExpr) {
              RAST._IExpr _1036___mcc_h392 = _source34.dtor_stmt;
              RAST._IExpr _1037___mcc_h393 = _source34.dtor_rhs;
              return _883_default;
            } else if (_source34.is_Block) {
              RAST._IExpr _1038___mcc_h396 = _source34.dtor_underlying;
              return _883_default;
            } else if (_source34.is_StructBuild) {
              RAST._IExpr _1039___mcc_h398 = _source34.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _1040___mcc_h399 = _source34.dtor_assignments;
              return _883_default;
            } else if (_source34.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1041___mcc_h402 = _source34.dtor_arguments;
              return _883_default;
            } else if (_source34.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1042___mcc_h404 = _source34.dtor_op1;
              RAST._IExpr _1043___mcc_h405 = _source34.dtor_underlying;
              DAST.Format._IUnOpFormat _1044___mcc_h406 = _source34.dtor_format;
              if (object.Equals(_1042___mcc_h404, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
                RAST._IExpr _source35 = _1043___mcc_h405;
                if (_source35.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1045___mcc_h410 = _source35.dtor_content;
                  return _883_default;
                } else if (_source35.is_ExprFromType) {
                  RAST._IType _1046___mcc_h412 = _source35.dtor_tpe;
                  return _883_default;
                } else if (_source35.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1047___mcc_h414 = _source35.dtor_name;
                  return _883_default;
                } else if (_source35.is_Match) {
                  RAST._IExpr _1048___mcc_h416 = _source35.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1049___mcc_h417 = _source35.dtor_cases;
                  return _883_default;
                } else if (_source35.is_StmtExpr) {
                  RAST._IExpr _1050___mcc_h420 = _source35.dtor_stmt;
                  RAST._IExpr _1051___mcc_h421 = _source35.dtor_rhs;
                  return _883_default;
                } else if (_source35.is_Block) {
                  RAST._IExpr _1052___mcc_h424 = _source35.dtor_underlying;
                  return _883_default;
                } else if (_source35.is_StructBuild) {
                  RAST._IExpr _1053___mcc_h426 = _source35.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1054___mcc_h427 = _source35.dtor_assignments;
                  return _883_default;
                } else if (_source35.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1055___mcc_h430 = _source35.dtor_arguments;
                  return _883_default;
                } else if (_source35.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1056___mcc_h432 = _source35.dtor_op1;
                  RAST._IExpr _1057___mcc_h433 = _source35.dtor_underlying;
                  DAST.Format._IUnOpFormat _1058___mcc_h434 = _source35.dtor_format;
                  return _883_default;
                } else if (_source35.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1059___mcc_h438 = _source35.dtor_op2;
                  RAST._IExpr _1060___mcc_h439 = _source35.dtor_left;
                  RAST._IExpr _1061___mcc_h440 = _source35.dtor_right;
                  DAST.Format._IBinOpFormat _1062___mcc_h441 = _source35.dtor_format2;
                  if (object.Equals(_1059___mcc_h438, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
                    RAST._IExpr _source36 = _1029___mcc_h377;
                    if (_source36.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _1063___mcc_h446 = _source36.dtor_content;
                      if (object.Equals(_1063___mcc_h446, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"))) {
                        RAST._IExpr _source37 = _1030___mcc_h378;
                        if (_source37.is_RawExpr) {
                          Dafny.ISequence<Dafny.Rune> _1064___mcc_h448 = _source37.dtor_content;
                          if (object.Equals(_1064___mcc_h448, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                            RAST._IExpr _1065_last = _890___mcc_h111;
                            DAST.Format._IUnOpFormat _1066_of = _1044___mcc_h406;
                            DAST.Format._IBinOpFormat _1067_f = _1062___mcc_h441;
                            RAST._IExpr _1068_b = _1061___mcc_h440;
                            RAST._IExpr _1069_a = _1060___mcc_h439;
                            return (BigInteger.One) + (_883_default);
                          } else {
                            return _883_default;
                          }
                        } else if (_source37.is_ExprFromType) {
                          RAST._IType _1070___mcc_h450 = _source37.dtor_tpe;
                          return _883_default;
                        } else if (_source37.is_Identifier) {
                          Dafny.ISequence<Dafny.Rune> _1071___mcc_h452 = _source37.dtor_name;
                          return _883_default;
                        } else if (_source37.is_Match) {
                          RAST._IExpr _1072___mcc_h454 = _source37.dtor_matchee;
                          Dafny.ISequence<RAST._IMatchCase> _1073___mcc_h455 = _source37.dtor_cases;
                          return _883_default;
                        } else if (_source37.is_StmtExpr) {
                          RAST._IExpr _1074___mcc_h458 = _source37.dtor_stmt;
                          RAST._IExpr _1075___mcc_h459 = _source37.dtor_rhs;
                          return _883_default;
                        } else if (_source37.is_Block) {
                          RAST._IExpr _1076___mcc_h462 = _source37.dtor_underlying;
                          return _883_default;
                        } else if (_source37.is_StructBuild) {
                          RAST._IExpr _1077___mcc_h464 = _source37.dtor_underlying;
                          Dafny.ISequence<RAST._IAssignIdentifier> _1078___mcc_h465 = _source37.dtor_assignments;
                          return _883_default;
                        } else if (_source37.is_Tuple) {
                          Dafny.ISequence<RAST._IExpr> _1079___mcc_h468 = _source37.dtor_arguments;
                          return _883_default;
                        } else if (_source37.is_UnaryOp) {
                          Dafny.ISequence<Dafny.Rune> _1080___mcc_h470 = _source37.dtor_op1;
                          RAST._IExpr _1081___mcc_h471 = _source37.dtor_underlying;
                          DAST.Format._IUnOpFormat _1082___mcc_h472 = _source37.dtor_format;
                          return _883_default;
                        } else if (_source37.is_BinaryOp) {
                          Dafny.ISequence<Dafny.Rune> _1083___mcc_h476 = _source37.dtor_op2;
                          RAST._IExpr _1084___mcc_h477 = _source37.dtor_left;
                          RAST._IExpr _1085___mcc_h478 = _source37.dtor_right;
                          DAST.Format._IBinOpFormat _1086___mcc_h479 = _source37.dtor_format2;
                          return _883_default;
                        } else if (_source37.is_TypeAscription) {
                          RAST._IExpr _1087___mcc_h484 = _source37.dtor_left;
                          RAST._IType _1088___mcc_h485 = _source37.dtor_tpe;
                          return _883_default;
                        } else if (_source37.is_LiteralInt) {
                          Dafny.ISequence<Dafny.Rune> _1089___mcc_h488 = _source37.dtor_value;
                          return _883_default;
                        } else if (_source37.is_LiteralString) {
                          Dafny.ISequence<Dafny.Rune> _1090___mcc_h490 = _source37.dtor_value;
                          bool _1091___mcc_h491 = _source37.dtor_binary;
                          return _883_default;
                        } else if (_source37.is_DeclareVar) {
                          RAST._IDeclareType _1092___mcc_h494 = _source37.dtor_declareType;
                          Dafny.ISequence<Dafny.Rune> _1093___mcc_h495 = _source37.dtor_name;
                          Std.Wrappers._IOption<RAST._IType> _1094___mcc_h496 = _source37.dtor_optType;
                          Std.Wrappers._IOption<RAST._IExpr> _1095___mcc_h497 = _source37.dtor_optRhs;
                          return _883_default;
                        } else if (_source37.is_AssignVar) {
                          Dafny.ISequence<Dafny.Rune> _1096___mcc_h502 = _source37.dtor_name;
                          RAST._IExpr _1097___mcc_h503 = _source37.dtor_rhs;
                          return _883_default;
                        } else if (_source37.is_IfExpr) {
                          RAST._IExpr _1098___mcc_h506 = _source37.dtor_cond;
                          RAST._IExpr _1099___mcc_h507 = _source37.dtor_thn;
                          RAST._IExpr _1100___mcc_h508 = _source37.dtor_els;
                          return _883_default;
                        } else if (_source37.is_Loop) {
                          Std.Wrappers._IOption<RAST._IExpr> _1101___mcc_h512 = _source37.dtor_optCond;
                          RAST._IExpr _1102___mcc_h513 = _source37.dtor_underlying;
                          return _883_default;
                        } else if (_source37.is_For) {
                          Dafny.ISequence<Dafny.Rune> _1103___mcc_h516 = _source37.dtor_name;
                          RAST._IExpr _1104___mcc_h517 = _source37.dtor_range;
                          RAST._IExpr _1105___mcc_h518 = _source37.dtor_body;
                          return _883_default;
                        } else if (_source37.is_Labelled) {
                          Dafny.ISequence<Dafny.Rune> _1106___mcc_h522 = _source37.dtor_lbl;
                          RAST._IExpr _1107___mcc_h523 = _source37.dtor_underlying;
                          return _883_default;
                        } else if (_source37.is_Break) {
                          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1108___mcc_h526 = _source37.dtor_optLbl;
                          return _883_default;
                        } else if (_source37.is_Continue) {
                          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1109___mcc_h528 = _source37.dtor_optLbl;
                          return _883_default;
                        } else if (_source37.is_Return) {
                          Std.Wrappers._IOption<RAST._IExpr> _1110___mcc_h530 = _source37.dtor_optExpr;
                          return _883_default;
                        } else if (_source37.is_CallType) {
                          RAST._IExpr _1111___mcc_h532 = _source37.dtor_obj;
                          Dafny.ISequence<RAST._IType> _1112___mcc_h533 = _source37.dtor_typeParameters;
                          return _883_default;
                        } else if (_source37.is_Call) {
                          RAST._IExpr _1113___mcc_h536 = _source37.dtor_obj;
                          Dafny.ISequence<RAST._IExpr> _1114___mcc_h537 = _source37.dtor_arguments;
                          return _883_default;
                        } else if (_source37.is_Select) {
                          RAST._IExpr _1115___mcc_h540 = _source37.dtor_obj;
                          Dafny.ISequence<Dafny.Rune> _1116___mcc_h541 = _source37.dtor_name;
                          return _883_default;
                        } else {
                          RAST._IExpr _1117___mcc_h544 = _source37.dtor_obj;
                          Dafny.ISequence<Dafny.Rune> _1118___mcc_h545 = _source37.dtor_name;
                          return _883_default;
                        }
                      } else {
                        return _883_default;
                      }
                    } else if (_source36.is_ExprFromType) {
                      RAST._IType _1119___mcc_h548 = _source36.dtor_tpe;
                      return _883_default;
                    } else if (_source36.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _1120___mcc_h550 = _source36.dtor_name;
                      return _883_default;
                    } else if (_source36.is_Match) {
                      RAST._IExpr _1121___mcc_h552 = _source36.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _1122___mcc_h553 = _source36.dtor_cases;
                      return _883_default;
                    } else if (_source36.is_StmtExpr) {
                      RAST._IExpr _1123___mcc_h556 = _source36.dtor_stmt;
                      RAST._IExpr _1124___mcc_h557 = _source36.dtor_rhs;
                      return _883_default;
                    } else if (_source36.is_Block) {
                      RAST._IExpr _1125___mcc_h560 = _source36.dtor_underlying;
                      return _883_default;
                    } else if (_source36.is_StructBuild) {
                      RAST._IExpr _1126___mcc_h562 = _source36.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _1127___mcc_h563 = _source36.dtor_assignments;
                      return _883_default;
                    } else if (_source36.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _1128___mcc_h566 = _source36.dtor_arguments;
                      return _883_default;
                    } else if (_source36.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _1129___mcc_h568 = _source36.dtor_op1;
                      RAST._IExpr _1130___mcc_h569 = _source36.dtor_underlying;
                      DAST.Format._IUnOpFormat _1131___mcc_h570 = _source36.dtor_format;
                      return _883_default;
                    } else if (_source36.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _1132___mcc_h574 = _source36.dtor_op2;
                      RAST._IExpr _1133___mcc_h575 = _source36.dtor_left;
                      RAST._IExpr _1134___mcc_h576 = _source36.dtor_right;
                      DAST.Format._IBinOpFormat _1135___mcc_h577 = _source36.dtor_format2;
                      return _883_default;
                    } else if (_source36.is_TypeAscription) {
                      RAST._IExpr _1136___mcc_h582 = _source36.dtor_left;
                      RAST._IType _1137___mcc_h583 = _source36.dtor_tpe;
                      return _883_default;
                    } else if (_source36.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _1138___mcc_h586 = _source36.dtor_value;
                      return _883_default;
                    } else if (_source36.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _1139___mcc_h588 = _source36.dtor_value;
                      bool _1140___mcc_h589 = _source36.dtor_binary;
                      return _883_default;
                    } else if (_source36.is_DeclareVar) {
                      RAST._IDeclareType _1141___mcc_h592 = _source36.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _1142___mcc_h593 = _source36.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _1143___mcc_h594 = _source36.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _1144___mcc_h595 = _source36.dtor_optRhs;
                      return _883_default;
                    } else if (_source36.is_AssignVar) {
                      Dafny.ISequence<Dafny.Rune> _1145___mcc_h600 = _source36.dtor_name;
                      RAST._IExpr _1146___mcc_h601 = _source36.dtor_rhs;
                      return _883_default;
                    } else if (_source36.is_IfExpr) {
                      RAST._IExpr _1147___mcc_h604 = _source36.dtor_cond;
                      RAST._IExpr _1148___mcc_h605 = _source36.dtor_thn;
                      RAST._IExpr _1149___mcc_h606 = _source36.dtor_els;
                      return _883_default;
                    } else if (_source36.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _1150___mcc_h610 = _source36.dtor_optCond;
                      RAST._IExpr _1151___mcc_h611 = _source36.dtor_underlying;
                      return _883_default;
                    } else if (_source36.is_For) {
                      Dafny.ISequence<Dafny.Rune> _1152___mcc_h614 = _source36.dtor_name;
                      RAST._IExpr _1153___mcc_h615 = _source36.dtor_range;
                      RAST._IExpr _1154___mcc_h616 = _source36.dtor_body;
                      return _883_default;
                    } else if (_source36.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _1155___mcc_h620 = _source36.dtor_lbl;
                      RAST._IExpr _1156___mcc_h621 = _source36.dtor_underlying;
                      return _883_default;
                    } else if (_source36.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1157___mcc_h624 = _source36.dtor_optLbl;
                      return _883_default;
                    } else if (_source36.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1158___mcc_h626 = _source36.dtor_optLbl;
                      return _883_default;
                    } else if (_source36.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _1159___mcc_h628 = _source36.dtor_optExpr;
                      return _883_default;
                    } else if (_source36.is_CallType) {
                      RAST._IExpr _1160___mcc_h630 = _source36.dtor_obj;
                      Dafny.ISequence<RAST._IType> _1161___mcc_h631 = _source36.dtor_typeParameters;
                      return _883_default;
                    } else if (_source36.is_Call) {
                      RAST._IExpr _1162___mcc_h634 = _source36.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _1163___mcc_h635 = _source36.dtor_arguments;
                      return _883_default;
                    } else if (_source36.is_Select) {
                      RAST._IExpr _1164___mcc_h638 = _source36.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _1165___mcc_h639 = _source36.dtor_name;
                      return _883_default;
                    } else {
                      RAST._IExpr _1166___mcc_h642 = _source36.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _1167___mcc_h643 = _source36.dtor_name;
                      return _883_default;
                    }
                  } else {
                    return _883_default;
                  }
                } else if (_source35.is_TypeAscription) {
                  RAST._IExpr _1168___mcc_h646 = _source35.dtor_left;
                  RAST._IType _1169___mcc_h647 = _source35.dtor_tpe;
                  return _883_default;
                } else if (_source35.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1170___mcc_h650 = _source35.dtor_value;
                  return _883_default;
                } else if (_source35.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1171___mcc_h652 = _source35.dtor_value;
                  bool _1172___mcc_h653 = _source35.dtor_binary;
                  return _883_default;
                } else if (_source35.is_DeclareVar) {
                  RAST._IDeclareType _1173___mcc_h656 = _source35.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1174___mcc_h657 = _source35.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1175___mcc_h658 = _source35.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1176___mcc_h659 = _source35.dtor_optRhs;
                  return _883_default;
                } else if (_source35.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1177___mcc_h664 = _source35.dtor_name;
                  RAST._IExpr _1178___mcc_h665 = _source35.dtor_rhs;
                  return _883_default;
                } else if (_source35.is_IfExpr) {
                  RAST._IExpr _1179___mcc_h668 = _source35.dtor_cond;
                  RAST._IExpr _1180___mcc_h669 = _source35.dtor_thn;
                  RAST._IExpr _1181___mcc_h670 = _source35.dtor_els;
                  return _883_default;
                } else if (_source35.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1182___mcc_h674 = _source35.dtor_optCond;
                  RAST._IExpr _1183___mcc_h675 = _source35.dtor_underlying;
                  return _883_default;
                } else if (_source35.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1184___mcc_h678 = _source35.dtor_name;
                  RAST._IExpr _1185___mcc_h679 = _source35.dtor_range;
                  RAST._IExpr _1186___mcc_h680 = _source35.dtor_body;
                  return _883_default;
                } else if (_source35.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1187___mcc_h684 = _source35.dtor_lbl;
                  RAST._IExpr _1188___mcc_h685 = _source35.dtor_underlying;
                  return _883_default;
                } else if (_source35.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1189___mcc_h688 = _source35.dtor_optLbl;
                  return _883_default;
                } else if (_source35.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1190___mcc_h690 = _source35.dtor_optLbl;
                  return _883_default;
                } else if (_source35.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1191___mcc_h692 = _source35.dtor_optExpr;
                  return _883_default;
                } else if (_source35.is_CallType) {
                  RAST._IExpr _1192___mcc_h694 = _source35.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1193___mcc_h695 = _source35.dtor_typeParameters;
                  return _883_default;
                } else if (_source35.is_Call) {
                  RAST._IExpr _1194___mcc_h698 = _source35.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1195___mcc_h699 = _source35.dtor_arguments;
                  return _883_default;
                } else if (_source35.is_Select) {
                  RAST._IExpr _1196___mcc_h702 = _source35.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1197___mcc_h703 = _source35.dtor_name;
                  return _883_default;
                } else {
                  RAST._IExpr _1198___mcc_h706 = _source35.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1199___mcc_h707 = _source35.dtor_name;
                  return _883_default;
                }
              } else {
                return _883_default;
              }
            } else if (_source34.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1200___mcc_h710 = _source34.dtor_op2;
              RAST._IExpr _1201___mcc_h711 = _source34.dtor_left;
              RAST._IExpr _1202___mcc_h712 = _source34.dtor_right;
              DAST.Format._IBinOpFormat _1203___mcc_h713 = _source34.dtor_format2;
              return _883_default;
            } else if (_source34.is_TypeAscription) {
              RAST._IExpr _1204___mcc_h718 = _source34.dtor_left;
              RAST._IType _1205___mcc_h719 = _source34.dtor_tpe;
              return _883_default;
            } else if (_source34.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1206___mcc_h722 = _source34.dtor_value;
              return _883_default;
            } else if (_source34.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1207___mcc_h724 = _source34.dtor_value;
              bool _1208___mcc_h725 = _source34.dtor_binary;
              return _883_default;
            } else if (_source34.is_DeclareVar) {
              RAST._IDeclareType _1209___mcc_h728 = _source34.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1210___mcc_h729 = _source34.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1211___mcc_h730 = _source34.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1212___mcc_h731 = _source34.dtor_optRhs;
              return _883_default;
            } else if (_source34.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1213___mcc_h736 = _source34.dtor_name;
              RAST._IExpr _1214___mcc_h737 = _source34.dtor_rhs;
              return _883_default;
            } else if (_source34.is_IfExpr) {
              RAST._IExpr _1215___mcc_h740 = _source34.dtor_cond;
              RAST._IExpr _1216___mcc_h741 = _source34.dtor_thn;
              RAST._IExpr _1217___mcc_h742 = _source34.dtor_els;
              return _883_default;
            } else if (_source34.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1218___mcc_h746 = _source34.dtor_optCond;
              RAST._IExpr _1219___mcc_h747 = _source34.dtor_underlying;
              return _883_default;
            } else if (_source34.is_For) {
              Dafny.ISequence<Dafny.Rune> _1220___mcc_h750 = _source34.dtor_name;
              RAST._IExpr _1221___mcc_h751 = _source34.dtor_range;
              RAST._IExpr _1222___mcc_h752 = _source34.dtor_body;
              return _883_default;
            } else if (_source34.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1223___mcc_h756 = _source34.dtor_lbl;
              RAST._IExpr _1224___mcc_h757 = _source34.dtor_underlying;
              return _883_default;
            } else if (_source34.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1225___mcc_h760 = _source34.dtor_optLbl;
              return _883_default;
            } else if (_source34.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1226___mcc_h762 = _source34.dtor_optLbl;
              return _883_default;
            } else if (_source34.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1227___mcc_h764 = _source34.dtor_optExpr;
              return _883_default;
            } else if (_source34.is_CallType) {
              RAST._IExpr _1228___mcc_h766 = _source34.dtor_obj;
              Dafny.ISequence<RAST._IType> _1229___mcc_h767 = _source34.dtor_typeParameters;
              return _883_default;
            } else if (_source34.is_Call) {
              RAST._IExpr _1230___mcc_h770 = _source34.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _1231___mcc_h771 = _source34.dtor_arguments;
              return _883_default;
            } else if (_source34.is_Select) {
              RAST._IExpr _1232___mcc_h774 = _source34.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1233___mcc_h775 = _source34.dtor_name;
              return _883_default;
            } else {
              RAST._IExpr _1234___mcc_h778 = _source34.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1235___mcc_h779 = _source34.dtor_name;
              return _883_default;
            }
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1236___mcc_h782 = _source29.dtor_optCond;
            RAST._IExpr _1237___mcc_h783 = _source29.dtor_underlying;
            return _883_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1238___mcc_h786 = _source29.dtor_name;
            RAST._IExpr _1239___mcc_h787 = _source29.dtor_range;
            RAST._IExpr _1240___mcc_h788 = _source29.dtor_body;
            return _883_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1241___mcc_h792 = _source29.dtor_lbl;
            RAST._IExpr _1242___mcc_h793 = _source29.dtor_underlying;
            return _883_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1243___mcc_h796 = _source29.dtor_optLbl;
            return _883_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1244___mcc_h798 = _source29.dtor_optLbl;
            return _883_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1245___mcc_h800 = _source29.dtor_optExpr;
            return _883_default;
          } else if (_source29.is_CallType) {
            RAST._IExpr _1246___mcc_h802 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1247___mcc_h803 = _source29.dtor_typeParameters;
            return _883_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1248___mcc_h806 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1249___mcc_h807 = _source29.dtor_arguments;
            return _883_default;
          } else if (_source29.is_Select) {
            RAST._IExpr _1250___mcc_h810 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1251___mcc_h811 = _source29.dtor_name;
            return _883_default;
          } else {
            RAST._IExpr _1252___mcc_h814 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1253___mcc_h815 = _source29.dtor_name;
            return _883_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1254___mcc_h818 = _source28.dtor_underlying;
          return _883_default;
        } else if (_source28.is_StructBuild) {
          RAST._IExpr _1255___mcc_h820 = _source28.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1256___mcc_h821 = _source28.dtor_assignments;
          return _883_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1257___mcc_h824 = _source28.dtor_arguments;
          return _883_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1258___mcc_h826 = _source28.dtor_op1;
          RAST._IExpr _1259___mcc_h827 = _source28.dtor_underlying;
          DAST.Format._IUnOpFormat _1260___mcc_h828 = _source28.dtor_format;
          return _883_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1261___mcc_h832 = _source28.dtor_op2;
          RAST._IExpr _1262___mcc_h833 = _source28.dtor_left;
          RAST._IExpr _1263___mcc_h834 = _source28.dtor_right;
          DAST.Format._IBinOpFormat _1264___mcc_h835 = _source28.dtor_format2;
          return _883_default;
        } else if (_source28.is_TypeAscription) {
          RAST._IExpr _1265___mcc_h840 = _source28.dtor_left;
          RAST._IType _1266___mcc_h841 = _source28.dtor_tpe;
          return _883_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1267___mcc_h844 = _source28.dtor_value;
          return _883_default;
        } else if (_source28.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1268___mcc_h846 = _source28.dtor_value;
          bool _1269___mcc_h847 = _source28.dtor_binary;
          return _883_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1270___mcc_h850 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1271___mcc_h851 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1272___mcc_h852 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1273___mcc_h853 = _source28.dtor_optRhs;
          return _883_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1274___mcc_h858 = _source28.dtor_name;
          RAST._IExpr _1275___mcc_h859 = _source28.dtor_rhs;
          return _883_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1276___mcc_h862 = _source28.dtor_cond;
          RAST._IExpr _1277___mcc_h863 = _source28.dtor_thn;
          RAST._IExpr _1278___mcc_h864 = _source28.dtor_els;
          return _883_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1279___mcc_h868 = _source28.dtor_optCond;
          RAST._IExpr _1280___mcc_h869 = _source28.dtor_underlying;
          return _883_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1281___mcc_h872 = _source28.dtor_name;
          RAST._IExpr _1282___mcc_h873 = _source28.dtor_range;
          RAST._IExpr _1283___mcc_h874 = _source28.dtor_body;
          return _883_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1284___mcc_h878 = _source28.dtor_lbl;
          RAST._IExpr _1285___mcc_h879 = _source28.dtor_underlying;
          return _883_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1286___mcc_h882 = _source28.dtor_optLbl;
          return _883_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1287___mcc_h884 = _source28.dtor_optLbl;
          return _883_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1288___mcc_h886 = _source28.dtor_optExpr;
          return _883_default;
        } else if (_source28.is_CallType) {
          RAST._IExpr _1289___mcc_h888 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1290___mcc_h889 = _source28.dtor_typeParameters;
          return _883_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1291___mcc_h892 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1292___mcc_h893 = _source28.dtor_arguments;
          return _883_default;
        } else if (_source28.is_Select) {
          RAST._IExpr _1293___mcc_h896 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1294___mcc_h897 = _source28.dtor_name;
          return _883_default;
        } else {
          RAST._IExpr _1295___mcc_h900 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1296___mcc_h901 = _source28.dtor_name;
          return _883_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1297___mcc_h14 = _source27.dtor_underlying;
        RAST._IExpr _1298_underlying = _1297___mcc_h14;
        return (BigInteger.One) + ((_1298_underlying).Height());
      } else if (_source27.is_StructBuild) {
        RAST._IExpr _1299___mcc_h16 = _source27.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1300___mcc_h17 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1301_assignments = _1300___mcc_h17;
        RAST._IExpr _1302_name = _1299___mcc_h16;
        return (BigInteger.One) + (RAST.__default.max((_1302_name).Height(), RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1301_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1303_assignment) => {
          return (_1303_assignment).Height();
        })))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1304___mcc_h20 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1305_arguments = _1304___mcc_h20;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1305_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1306_argument) => {
          return (_1306_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1307___mcc_h22 = _source27.dtor_op1;
        RAST._IExpr _1308___mcc_h23 = _source27.dtor_underlying;
        DAST.Format._IUnOpFormat _1309___mcc_h24 = _source27.dtor_format;
        RAST._IExpr _1310_underlying = _1308___mcc_h23;
        return (BigInteger.One) + ((_1310_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1311___mcc_h28 = _source27.dtor_op2;
        RAST._IExpr _1312___mcc_h29 = _source27.dtor_left;
        RAST._IExpr _1313___mcc_h30 = _source27.dtor_right;
        DAST.Format._IBinOpFormat _1314___mcc_h31 = _source27.dtor_format2;
        DAST.Format._IBinOpFormat _1315_format = _1314___mcc_h31;
        RAST._IExpr _1316_right = _1313___mcc_h30;
        RAST._IExpr _1317_left = _1312___mcc_h29;
        Dafny.ISequence<Dafny.Rune> _1318_op = _1311___mcc_h28;
        return (BigInteger.One) + (RAST.__default.max((_1317_left).Height(), (_1316_right).Height()));
      } else if (_source27.is_TypeAscription) {
        RAST._IExpr _1319___mcc_h36 = _source27.dtor_left;
        RAST._IType _1320___mcc_h37 = _source27.dtor_tpe;
        RAST._IType _1321_tpe = _1320___mcc_h37;
        RAST._IExpr _1322_left = _1319___mcc_h36;
        return (BigInteger.One) + ((_1322_left).Height());
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1323___mcc_h40 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1324___mcc_h42 = _source27.dtor_value;
        bool _1325___mcc_h43 = _source27.dtor_binary;
        return BigInteger.One;
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1326___mcc_h46 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1327___mcc_h47 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1328___mcc_h48 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1329___mcc_h49 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1330_expr = _1329___mcc_h49;
        Std.Wrappers._IOption<RAST._IType> _1331_tpe = _1328___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _1332_name = _1327___mcc_h47;
        RAST._IDeclareType _1333_declareType = _1326___mcc_h46;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source38) => {
          if (_source38.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1334___mcc_h904 = _source38.dtor_value;
            RAST._IExpr _1335_e = _1334___mcc_h904;
            return (_1335_e).Height();
          }
        }))(_1330_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1336___mcc_h54 = _source27.dtor_name;
        RAST._IExpr _1337___mcc_h55 = _source27.dtor_rhs;
        RAST._IExpr _1338_expr = _1337___mcc_h55;
        Dafny.ISequence<Dafny.Rune> _1339_name = _1336___mcc_h54;
        return (BigInteger.One) + ((_1338_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1340___mcc_h58 = _source27.dtor_cond;
        RAST._IExpr _1341___mcc_h59 = _source27.dtor_thn;
        RAST._IExpr _1342___mcc_h60 = _source27.dtor_els;
        RAST._IExpr _1343_els = _1342___mcc_h60;
        RAST._IExpr _1344_thn = _1341___mcc_h59;
        RAST._IExpr _1345_cond = _1340___mcc_h58;
        return (BigInteger.One) + (RAST.__default.max((_1345_cond).Height(), RAST.__default.max((_1344_thn).Height(), (_1343_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1346___mcc_h64 = _source27.dtor_optCond;
        RAST._IExpr _1347___mcc_h65 = _source27.dtor_underlying;
        RAST._IExpr _1348_underlying = _1347___mcc_h65;
        Std.Wrappers._IOption<RAST._IExpr> _1349_optCond = _1346___mcc_h64;
        return (BigInteger.One) + ((((_1349_optCond).is_Some) ? (RAST.__default.max(((_1349_optCond).dtor_value).Height(), (_1348_underlying).Height())) : ((_1348_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1350___mcc_h68 = _source27.dtor_name;
        RAST._IExpr _1351___mcc_h69 = _source27.dtor_range;
        RAST._IExpr _1352___mcc_h70 = _source27.dtor_body;
        RAST._IExpr _1353_body = _1352___mcc_h70;
        RAST._IExpr _1354_range = _1351___mcc_h69;
        Dafny.ISequence<Dafny.Rune> _1355_name = _1350___mcc_h68;
        return (BigInteger.One) + (RAST.__default.max((_1354_range).Height(), (_1353_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1356___mcc_h74 = _source27.dtor_lbl;
        RAST._IExpr _1357___mcc_h75 = _source27.dtor_underlying;
        RAST._IExpr _1358_underlying = _1357___mcc_h75;
        Dafny.ISequence<Dafny.Rune> _1359_lbl = _1356___mcc_h74;
        return (BigInteger.One) + ((_1358_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1360___mcc_h78 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1361___mcc_h80 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1362___mcc_h82 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1363_optExpr = _1362___mcc_h82;
        if ((_1363_optExpr).is_Some) {
          return (BigInteger.One) + (((_1363_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_CallType) {
        RAST._IExpr _1364___mcc_h84 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1365___mcc_h85 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IType> _1366_tpes = _1365___mcc_h85;
        RAST._IExpr _1367_obj = _1364___mcc_h84;
        return (BigInteger.One) + (RAST.__default.max((_1367_obj).Height(), RAST.__default.SeqToHeight<RAST._IType>(_1366_tpes, ((System.Func<RAST._IType, BigInteger>)((_1368_tpe) => {
          return BigInteger.One;
        })))));
      } else if (_source27.is_Call) {
        RAST._IExpr _1369___mcc_h88 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _1370___mcc_h89 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1371_args = _1370___mcc_h89;
        RAST._IExpr _1372_obj = _1369___mcc_h88;
        return (BigInteger.One) + (RAST.__default.max((_1372_obj).Height(), RAST.__default.SeqToHeight<RAST._IExpr>(_1371_args, ((System.Func<RAST._IExpr, BigInteger>)((_1373_arg) => {
          return (_1373_arg).Height();
        })))));
      } else if (_source27.is_Select) {
        RAST._IExpr _1374___mcc_h92 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1375___mcc_h93 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1376_name = _1375___mcc_h93;
        RAST._IExpr _1377_expression = _1374___mcc_h92;
        return (BigInteger.One) + ((_1377_expression).Height());
      } else {
        RAST._IExpr _1378___mcc_h96 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1379___mcc_h97 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1380_name = _1379___mcc_h97;
        RAST._IExpr _1381_expression = _1378___mcc_h96;
        return (BigInteger.One) + ((_1381_expression).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source39 = this;
      if (_source39.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1382___mcc_h0 = _source39.dtor_content;
        return this;
      } else if (_source39.is_ExprFromType) {
        RAST._IType _1383___mcc_h2 = _source39.dtor_tpe;
        return this;
      } else if (_source39.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1384___mcc_h4 = _source39.dtor_name;
        return this;
      } else if (_source39.is_Match) {
        RAST._IExpr _1385___mcc_h6 = _source39.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1386___mcc_h7 = _source39.dtor_cases;
        return this;
      } else if (_source39.is_StmtExpr) {
        RAST._IExpr _1387___mcc_h10 = _source39.dtor_stmt;
        RAST._IExpr _1388___mcc_h11 = _source39.dtor_rhs;
        RAST._IExpr _source40 = _1387___mcc_h10;
        if (_source40.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1389___mcc_h14 = _source40.dtor_content;
          return this;
        } else if (_source40.is_ExprFromType) {
          RAST._IType _1390___mcc_h16 = _source40.dtor_tpe;
          return this;
        } else if (_source40.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1391___mcc_h18 = _source40.dtor_name;
          return this;
        } else if (_source40.is_Match) {
          RAST._IExpr _1392___mcc_h20 = _source40.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1393___mcc_h21 = _source40.dtor_cases;
          return this;
        } else if (_source40.is_StmtExpr) {
          RAST._IExpr _1394___mcc_h24 = _source40.dtor_stmt;
          RAST._IExpr _1395___mcc_h25 = _source40.dtor_rhs;
          return this;
        } else if (_source40.is_Block) {
          RAST._IExpr _1396___mcc_h28 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_StructBuild) {
          RAST._IExpr _1397___mcc_h30 = _source40.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1398___mcc_h31 = _source40.dtor_assignments;
          return this;
        } else if (_source40.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1399___mcc_h34 = _source40.dtor_arguments;
          return this;
        } else if (_source40.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1400___mcc_h36 = _source40.dtor_op1;
          RAST._IExpr _1401___mcc_h37 = _source40.dtor_underlying;
          DAST.Format._IUnOpFormat _1402___mcc_h38 = _source40.dtor_format;
          return this;
        } else if (_source40.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1403___mcc_h42 = _source40.dtor_op2;
          RAST._IExpr _1404___mcc_h43 = _source40.dtor_left;
          RAST._IExpr _1405___mcc_h44 = _source40.dtor_right;
          DAST.Format._IBinOpFormat _1406___mcc_h45 = _source40.dtor_format2;
          return this;
        } else if (_source40.is_TypeAscription) {
          RAST._IExpr _1407___mcc_h50 = _source40.dtor_left;
          RAST._IType _1408___mcc_h51 = _source40.dtor_tpe;
          return this;
        } else if (_source40.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1409___mcc_h54 = _source40.dtor_value;
          return this;
        } else if (_source40.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1410___mcc_h56 = _source40.dtor_value;
          bool _1411___mcc_h57 = _source40.dtor_binary;
          return this;
        } else if (_source40.is_DeclareVar) {
          RAST._IDeclareType _1412___mcc_h60 = _source40.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1413___mcc_h61 = _source40.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1414___mcc_h62 = _source40.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1415___mcc_h63 = _source40.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source41 = _1414___mcc_h62;
          if (_source41.is_None) {
            return this;
          } else {
            RAST._IType _1416___mcc_h68 = _source41.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source42 = _1415___mcc_h63;
            if (_source42.is_None) {
              RAST._IExpr _source43 = _1388___mcc_h11;
              if (_source43.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1417___mcc_h70 = _source43.dtor_content;
                return this;
              } else if (_source43.is_ExprFromType) {
                RAST._IType _1418___mcc_h72 = _source43.dtor_tpe;
                return this;
              } else if (_source43.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1419___mcc_h74 = _source43.dtor_name;
                return this;
              } else if (_source43.is_Match) {
                RAST._IExpr _1420___mcc_h76 = _source43.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1421___mcc_h77 = _source43.dtor_cases;
                return this;
              } else if (_source43.is_StmtExpr) {
                RAST._IExpr _1422___mcc_h80 = _source43.dtor_stmt;
                RAST._IExpr _1423___mcc_h81 = _source43.dtor_rhs;
                RAST._IExpr _source44 = _1422___mcc_h80;
                if (_source44.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1424___mcc_h84 = _source44.dtor_content;
                  return this;
                } else if (_source44.is_ExprFromType) {
                  RAST._IType _1425___mcc_h86 = _source44.dtor_tpe;
                  return this;
                } else if (_source44.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1426___mcc_h88 = _source44.dtor_name;
                  return this;
                } else if (_source44.is_Match) {
                  RAST._IExpr _1427___mcc_h90 = _source44.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1428___mcc_h91 = _source44.dtor_cases;
                  return this;
                } else if (_source44.is_StmtExpr) {
                  RAST._IExpr _1429___mcc_h94 = _source44.dtor_stmt;
                  RAST._IExpr _1430___mcc_h95 = _source44.dtor_rhs;
                  return this;
                } else if (_source44.is_Block) {
                  RAST._IExpr _1431___mcc_h98 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_StructBuild) {
                  RAST._IExpr _1432___mcc_h100 = _source44.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1433___mcc_h101 = _source44.dtor_assignments;
                  return this;
                } else if (_source44.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1434___mcc_h104 = _source44.dtor_arguments;
                  return this;
                } else if (_source44.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1435___mcc_h106 = _source44.dtor_op1;
                  RAST._IExpr _1436___mcc_h107 = _source44.dtor_underlying;
                  DAST.Format._IUnOpFormat _1437___mcc_h108 = _source44.dtor_format;
                  return this;
                } else if (_source44.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1438___mcc_h112 = _source44.dtor_op2;
                  RAST._IExpr _1439___mcc_h113 = _source44.dtor_left;
                  RAST._IExpr _1440___mcc_h114 = _source44.dtor_right;
                  DAST.Format._IBinOpFormat _1441___mcc_h115 = _source44.dtor_format2;
                  return this;
                } else if (_source44.is_TypeAscription) {
                  RAST._IExpr _1442___mcc_h120 = _source44.dtor_left;
                  RAST._IType _1443___mcc_h121 = _source44.dtor_tpe;
                  return this;
                } else if (_source44.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1444___mcc_h124 = _source44.dtor_value;
                  return this;
                } else if (_source44.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1445___mcc_h126 = _source44.dtor_value;
                  bool _1446___mcc_h127 = _source44.dtor_binary;
                  return this;
                } else if (_source44.is_DeclareVar) {
                  RAST._IDeclareType _1447___mcc_h130 = _source44.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1448___mcc_h131 = _source44.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1449___mcc_h132 = _source44.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1450___mcc_h133 = _source44.dtor_optRhs;
                  return this;
                } else if (_source44.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1451___mcc_h138 = _source44.dtor_name;
                  RAST._IExpr _1452___mcc_h139 = _source44.dtor_rhs;
                  RAST._IExpr _1453_last = _1423___mcc_h81;
                  RAST._IExpr _1454_rhs = _1452___mcc_h139;
                  Dafny.ISequence<Dafny.Rune> _1455_name2 = _1451___mcc_h138;
                  RAST._IType _1456_tpe = _1416___mcc_h68;
                  Dafny.ISequence<Dafny.Rune> _1457_name = _1413___mcc_h61;
                  RAST._IDeclareType _1458_mod = _1412___mcc_h60;
                  if ((_1457_name).Equals(_1455_name2)) {
                    RAST._IExpr _1459_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1458_mod, _1457_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1456_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1454_rhs)), _1453_last);
                    return _1459_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source44.is_IfExpr) {
                  RAST._IExpr _1460___mcc_h142 = _source44.dtor_cond;
                  RAST._IExpr _1461___mcc_h143 = _source44.dtor_thn;
                  RAST._IExpr _1462___mcc_h144 = _source44.dtor_els;
                  return this;
                } else if (_source44.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1463___mcc_h148 = _source44.dtor_optCond;
                  RAST._IExpr _1464___mcc_h149 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1465___mcc_h152 = _source44.dtor_name;
                  RAST._IExpr _1466___mcc_h153 = _source44.dtor_range;
                  RAST._IExpr _1467___mcc_h154 = _source44.dtor_body;
                  return this;
                } else if (_source44.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1468___mcc_h158 = _source44.dtor_lbl;
                  RAST._IExpr _1469___mcc_h159 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1470___mcc_h162 = _source44.dtor_optLbl;
                  return this;
                } else if (_source44.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1471___mcc_h164 = _source44.dtor_optLbl;
                  return this;
                } else if (_source44.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1472___mcc_h166 = _source44.dtor_optExpr;
                  return this;
                } else if (_source44.is_CallType) {
                  RAST._IExpr _1473___mcc_h168 = _source44.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1474___mcc_h169 = _source44.dtor_typeParameters;
                  return this;
                } else if (_source44.is_Call) {
                  RAST._IExpr _1475___mcc_h172 = _source44.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1476___mcc_h173 = _source44.dtor_arguments;
                  return this;
                } else if (_source44.is_Select) {
                  RAST._IExpr _1477___mcc_h176 = _source44.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1478___mcc_h177 = _source44.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1479___mcc_h180 = _source44.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1480___mcc_h181 = _source44.dtor_name;
                  return this;
                }
              } else if (_source43.is_Block) {
                RAST._IExpr _1481___mcc_h184 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_StructBuild) {
                RAST._IExpr _1482___mcc_h186 = _source43.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _1483___mcc_h187 = _source43.dtor_assignments;
                return this;
              } else if (_source43.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1484___mcc_h190 = _source43.dtor_arguments;
                return this;
              } else if (_source43.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1485___mcc_h192 = _source43.dtor_op1;
                RAST._IExpr _1486___mcc_h193 = _source43.dtor_underlying;
                DAST.Format._IUnOpFormat _1487___mcc_h194 = _source43.dtor_format;
                return this;
              } else if (_source43.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1488___mcc_h198 = _source43.dtor_op2;
                RAST._IExpr _1489___mcc_h199 = _source43.dtor_left;
                RAST._IExpr _1490___mcc_h200 = _source43.dtor_right;
                DAST.Format._IBinOpFormat _1491___mcc_h201 = _source43.dtor_format2;
                return this;
              } else if (_source43.is_TypeAscription) {
                RAST._IExpr _1492___mcc_h206 = _source43.dtor_left;
                RAST._IType _1493___mcc_h207 = _source43.dtor_tpe;
                return this;
              } else if (_source43.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1494___mcc_h210 = _source43.dtor_value;
                return this;
              } else if (_source43.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1495___mcc_h212 = _source43.dtor_value;
                bool _1496___mcc_h213 = _source43.dtor_binary;
                return this;
              } else if (_source43.is_DeclareVar) {
                RAST._IDeclareType _1497___mcc_h216 = _source43.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1498___mcc_h217 = _source43.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1499___mcc_h218 = _source43.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1500___mcc_h219 = _source43.dtor_optRhs;
                return this;
              } else if (_source43.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1501___mcc_h224 = _source43.dtor_name;
                RAST._IExpr _1502___mcc_h225 = _source43.dtor_rhs;
                return this;
              } else if (_source43.is_IfExpr) {
                RAST._IExpr _1503___mcc_h228 = _source43.dtor_cond;
                RAST._IExpr _1504___mcc_h229 = _source43.dtor_thn;
                RAST._IExpr _1505___mcc_h230 = _source43.dtor_els;
                return this;
              } else if (_source43.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1506___mcc_h234 = _source43.dtor_optCond;
                RAST._IExpr _1507___mcc_h235 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_For) {
                Dafny.ISequence<Dafny.Rune> _1508___mcc_h238 = _source43.dtor_name;
                RAST._IExpr _1509___mcc_h239 = _source43.dtor_range;
                RAST._IExpr _1510___mcc_h240 = _source43.dtor_body;
                return this;
              } else if (_source43.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1511___mcc_h244 = _source43.dtor_lbl;
                RAST._IExpr _1512___mcc_h245 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1513___mcc_h248 = _source43.dtor_optLbl;
                return this;
              } else if (_source43.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1514___mcc_h250 = _source43.dtor_optLbl;
                return this;
              } else if (_source43.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1515___mcc_h252 = _source43.dtor_optExpr;
                return this;
              } else if (_source43.is_CallType) {
                RAST._IExpr _1516___mcc_h254 = _source43.dtor_obj;
                Dafny.ISequence<RAST._IType> _1517___mcc_h255 = _source43.dtor_typeParameters;
                return this;
              } else if (_source43.is_Call) {
                RAST._IExpr _1518___mcc_h258 = _source43.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _1519___mcc_h259 = _source43.dtor_arguments;
                return this;
              } else if (_source43.is_Select) {
                RAST._IExpr _1520___mcc_h262 = _source43.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1521___mcc_h263 = _source43.dtor_name;
                return this;
              } else {
                RAST._IExpr _1522___mcc_h266 = _source43.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1523___mcc_h267 = _source43.dtor_name;
                return this;
              }
            } else {
              RAST._IExpr _1524___mcc_h270 = _source42.dtor_value;
              return this;
            }
          }
        } else if (_source40.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1525___mcc_h272 = _source40.dtor_name;
          RAST._IExpr _1526___mcc_h273 = _source40.dtor_rhs;
          return this;
        } else if (_source40.is_IfExpr) {
          RAST._IExpr _1527___mcc_h276 = _source40.dtor_cond;
          RAST._IExpr _1528___mcc_h277 = _source40.dtor_thn;
          RAST._IExpr _1529___mcc_h278 = _source40.dtor_els;
          RAST._IExpr _source45 = _1527___mcc_h276;
          if (_source45.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1530___mcc_h282 = _source45.dtor_content;
            return this;
          } else if (_source45.is_ExprFromType) {
            RAST._IType _1531___mcc_h284 = _source45.dtor_tpe;
            return this;
          } else if (_source45.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1532___mcc_h286 = _source45.dtor_name;
            return this;
          } else if (_source45.is_Match) {
            RAST._IExpr _1533___mcc_h288 = _source45.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1534___mcc_h289 = _source45.dtor_cases;
            return this;
          } else if (_source45.is_StmtExpr) {
            RAST._IExpr _1535___mcc_h292 = _source45.dtor_stmt;
            RAST._IExpr _1536___mcc_h293 = _source45.dtor_rhs;
            return this;
          } else if (_source45.is_Block) {
            RAST._IExpr _1537___mcc_h296 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_StructBuild) {
            RAST._IExpr _1538___mcc_h298 = _source45.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1539___mcc_h299 = _source45.dtor_assignments;
            return this;
          } else if (_source45.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1540___mcc_h302 = _source45.dtor_arguments;
            return this;
          } else if (_source45.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1541___mcc_h304 = _source45.dtor_op1;
            RAST._IExpr _1542___mcc_h305 = _source45.dtor_underlying;
            DAST.Format._IUnOpFormat _1543___mcc_h306 = _source45.dtor_format;
            if (object.Equals(_1541___mcc_h304, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
              RAST._IExpr _source46 = _1542___mcc_h305;
              if (_source46.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1544___mcc_h310 = _source46.dtor_content;
                return this;
              } else if (_source46.is_ExprFromType) {
                RAST._IType _1545___mcc_h312 = _source46.dtor_tpe;
                return this;
              } else if (_source46.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1546___mcc_h314 = _source46.dtor_name;
                return this;
              } else if (_source46.is_Match) {
                RAST._IExpr _1547___mcc_h316 = _source46.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1548___mcc_h317 = _source46.dtor_cases;
                return this;
              } else if (_source46.is_StmtExpr) {
                RAST._IExpr _1549___mcc_h320 = _source46.dtor_stmt;
                RAST._IExpr _1550___mcc_h321 = _source46.dtor_rhs;
                return this;
              } else if (_source46.is_Block) {
                RAST._IExpr _1551___mcc_h324 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_StructBuild) {
                RAST._IExpr _1552___mcc_h326 = _source46.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _1553___mcc_h327 = _source46.dtor_assignments;
                return this;
              } else if (_source46.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1554___mcc_h330 = _source46.dtor_arguments;
                return this;
              } else if (_source46.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1555___mcc_h332 = _source46.dtor_op1;
                RAST._IExpr _1556___mcc_h333 = _source46.dtor_underlying;
                DAST.Format._IUnOpFormat _1557___mcc_h334 = _source46.dtor_format;
                return this;
              } else if (_source46.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1558___mcc_h338 = _source46.dtor_op2;
                RAST._IExpr _1559___mcc_h339 = _source46.dtor_left;
                RAST._IExpr _1560___mcc_h340 = _source46.dtor_right;
                DAST.Format._IBinOpFormat _1561___mcc_h341 = _source46.dtor_format2;
                if (object.Equals(_1558___mcc_h338, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
                  RAST._IExpr _source47 = _1528___mcc_h277;
                  if (_source47.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _1562___mcc_h346 = _source47.dtor_content;
                    if (object.Equals(_1562___mcc_h346, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"))) {
                      RAST._IExpr _source48 = _1529___mcc_h278;
                      if (_source48.is_RawExpr) {
                        Dafny.ISequence<Dafny.Rune> _1563___mcc_h348 = _source48.dtor_content;
                        if (object.Equals(_1563___mcc_h348, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                          RAST._IExpr _1564_last = _1388___mcc_h11;
                          DAST.Format._IUnOpFormat _1565_of = _1543___mcc_h306;
                          DAST.Format._IBinOpFormat _1566_f = _1561___mcc_h341;
                          RAST._IExpr _1567_b = _1560___mcc_h340;
                          RAST._IExpr _1568_a = _1559___mcc_h339;
                          RAST._IExpr _1569_rewriting = RAST.Expr.create_StmtExpr((RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("assert_eq!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_1568_a, _1567_b)), _1564_last);
                          return _1569_rewriting;
                        } else {
                          return this;
                        }
                      } else if (_source48.is_ExprFromType) {
                        RAST._IType _1570___mcc_h350 = _source48.dtor_tpe;
                        return this;
                      } else if (_source48.is_Identifier) {
                        Dafny.ISequence<Dafny.Rune> _1571___mcc_h352 = _source48.dtor_name;
                        return this;
                      } else if (_source48.is_Match) {
                        RAST._IExpr _1572___mcc_h354 = _source48.dtor_matchee;
                        Dafny.ISequence<RAST._IMatchCase> _1573___mcc_h355 = _source48.dtor_cases;
                        return this;
                      } else if (_source48.is_StmtExpr) {
                        RAST._IExpr _1574___mcc_h358 = _source48.dtor_stmt;
                        RAST._IExpr _1575___mcc_h359 = _source48.dtor_rhs;
                        return this;
                      } else if (_source48.is_Block) {
                        RAST._IExpr _1576___mcc_h362 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_StructBuild) {
                        RAST._IExpr _1577___mcc_h364 = _source48.dtor_underlying;
                        Dafny.ISequence<RAST._IAssignIdentifier> _1578___mcc_h365 = _source48.dtor_assignments;
                        return this;
                      } else if (_source48.is_Tuple) {
                        Dafny.ISequence<RAST._IExpr> _1579___mcc_h368 = _source48.dtor_arguments;
                        return this;
                      } else if (_source48.is_UnaryOp) {
                        Dafny.ISequence<Dafny.Rune> _1580___mcc_h370 = _source48.dtor_op1;
                        RAST._IExpr _1581___mcc_h371 = _source48.dtor_underlying;
                        DAST.Format._IUnOpFormat _1582___mcc_h372 = _source48.dtor_format;
                        return this;
                      } else if (_source48.is_BinaryOp) {
                        Dafny.ISequence<Dafny.Rune> _1583___mcc_h376 = _source48.dtor_op2;
                        RAST._IExpr _1584___mcc_h377 = _source48.dtor_left;
                        RAST._IExpr _1585___mcc_h378 = _source48.dtor_right;
                        DAST.Format._IBinOpFormat _1586___mcc_h379 = _source48.dtor_format2;
                        return this;
                      } else if (_source48.is_TypeAscription) {
                        RAST._IExpr _1587___mcc_h384 = _source48.dtor_left;
                        RAST._IType _1588___mcc_h385 = _source48.dtor_tpe;
                        return this;
                      } else if (_source48.is_LiteralInt) {
                        Dafny.ISequence<Dafny.Rune> _1589___mcc_h388 = _source48.dtor_value;
                        return this;
                      } else if (_source48.is_LiteralString) {
                        Dafny.ISequence<Dafny.Rune> _1590___mcc_h390 = _source48.dtor_value;
                        bool _1591___mcc_h391 = _source48.dtor_binary;
                        return this;
                      } else if (_source48.is_DeclareVar) {
                        RAST._IDeclareType _1592___mcc_h394 = _source48.dtor_declareType;
                        Dafny.ISequence<Dafny.Rune> _1593___mcc_h395 = _source48.dtor_name;
                        Std.Wrappers._IOption<RAST._IType> _1594___mcc_h396 = _source48.dtor_optType;
                        Std.Wrappers._IOption<RAST._IExpr> _1595___mcc_h397 = _source48.dtor_optRhs;
                        return this;
                      } else if (_source48.is_AssignVar) {
                        Dafny.ISequence<Dafny.Rune> _1596___mcc_h402 = _source48.dtor_name;
                        RAST._IExpr _1597___mcc_h403 = _source48.dtor_rhs;
                        return this;
                      } else if (_source48.is_IfExpr) {
                        RAST._IExpr _1598___mcc_h406 = _source48.dtor_cond;
                        RAST._IExpr _1599___mcc_h407 = _source48.dtor_thn;
                        RAST._IExpr _1600___mcc_h408 = _source48.dtor_els;
                        return this;
                      } else if (_source48.is_Loop) {
                        Std.Wrappers._IOption<RAST._IExpr> _1601___mcc_h412 = _source48.dtor_optCond;
                        RAST._IExpr _1602___mcc_h413 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_For) {
                        Dafny.ISequence<Dafny.Rune> _1603___mcc_h416 = _source48.dtor_name;
                        RAST._IExpr _1604___mcc_h417 = _source48.dtor_range;
                        RAST._IExpr _1605___mcc_h418 = _source48.dtor_body;
                        return this;
                      } else if (_source48.is_Labelled) {
                        Dafny.ISequence<Dafny.Rune> _1606___mcc_h422 = _source48.dtor_lbl;
                        RAST._IExpr _1607___mcc_h423 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_Break) {
                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1608___mcc_h426 = _source48.dtor_optLbl;
                        return this;
                      } else if (_source48.is_Continue) {
                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1609___mcc_h428 = _source48.dtor_optLbl;
                        return this;
                      } else if (_source48.is_Return) {
                        Std.Wrappers._IOption<RAST._IExpr> _1610___mcc_h430 = _source48.dtor_optExpr;
                        return this;
                      } else if (_source48.is_CallType) {
                        RAST._IExpr _1611___mcc_h432 = _source48.dtor_obj;
                        Dafny.ISequence<RAST._IType> _1612___mcc_h433 = _source48.dtor_typeParameters;
                        return this;
                      } else if (_source48.is_Call) {
                        RAST._IExpr _1613___mcc_h436 = _source48.dtor_obj;
                        Dafny.ISequence<RAST._IExpr> _1614___mcc_h437 = _source48.dtor_arguments;
                        return this;
                      } else if (_source48.is_Select) {
                        RAST._IExpr _1615___mcc_h440 = _source48.dtor_obj;
                        Dafny.ISequence<Dafny.Rune> _1616___mcc_h441 = _source48.dtor_name;
                        return this;
                      } else {
                        RAST._IExpr _1617___mcc_h444 = _source48.dtor_obj;
                        Dafny.ISequence<Dafny.Rune> _1618___mcc_h445 = _source48.dtor_name;
                        return this;
                      }
                    } else {
                      return this;
                    }
                  } else if (_source47.is_ExprFromType) {
                    RAST._IType _1619___mcc_h448 = _source47.dtor_tpe;
                    return this;
                  } else if (_source47.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _1620___mcc_h450 = _source47.dtor_name;
                    return this;
                  } else if (_source47.is_Match) {
                    RAST._IExpr _1621___mcc_h452 = _source47.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _1622___mcc_h453 = _source47.dtor_cases;
                    return this;
                  } else if (_source47.is_StmtExpr) {
                    RAST._IExpr _1623___mcc_h456 = _source47.dtor_stmt;
                    RAST._IExpr _1624___mcc_h457 = _source47.dtor_rhs;
                    return this;
                  } else if (_source47.is_Block) {
                    RAST._IExpr _1625___mcc_h460 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_StructBuild) {
                    RAST._IExpr _1626___mcc_h462 = _source47.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _1627___mcc_h463 = _source47.dtor_assignments;
                    return this;
                  } else if (_source47.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _1628___mcc_h466 = _source47.dtor_arguments;
                    return this;
                  } else if (_source47.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1629___mcc_h468 = _source47.dtor_op1;
                    RAST._IExpr _1630___mcc_h469 = _source47.dtor_underlying;
                    DAST.Format._IUnOpFormat _1631___mcc_h470 = _source47.dtor_format;
                    return this;
                  } else if (_source47.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1632___mcc_h474 = _source47.dtor_op2;
                    RAST._IExpr _1633___mcc_h475 = _source47.dtor_left;
                    RAST._IExpr _1634___mcc_h476 = _source47.dtor_right;
                    DAST.Format._IBinOpFormat _1635___mcc_h477 = _source47.dtor_format2;
                    return this;
                  } else if (_source47.is_TypeAscription) {
                    RAST._IExpr _1636___mcc_h482 = _source47.dtor_left;
                    RAST._IType _1637___mcc_h483 = _source47.dtor_tpe;
                    return this;
                  } else if (_source47.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _1638___mcc_h486 = _source47.dtor_value;
                    return this;
                  } else if (_source47.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _1639___mcc_h488 = _source47.dtor_value;
                    bool _1640___mcc_h489 = _source47.dtor_binary;
                    return this;
                  } else if (_source47.is_DeclareVar) {
                    RAST._IDeclareType _1641___mcc_h492 = _source47.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _1642___mcc_h493 = _source47.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _1643___mcc_h494 = _source47.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _1644___mcc_h495 = _source47.dtor_optRhs;
                    return this;
                  } else if (_source47.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _1645___mcc_h500 = _source47.dtor_name;
                    RAST._IExpr _1646___mcc_h501 = _source47.dtor_rhs;
                    return this;
                  } else if (_source47.is_IfExpr) {
                    RAST._IExpr _1647___mcc_h504 = _source47.dtor_cond;
                    RAST._IExpr _1648___mcc_h505 = _source47.dtor_thn;
                    RAST._IExpr _1649___mcc_h506 = _source47.dtor_els;
                    return this;
                  } else if (_source47.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _1650___mcc_h510 = _source47.dtor_optCond;
                    RAST._IExpr _1651___mcc_h511 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_For) {
                    Dafny.ISequence<Dafny.Rune> _1652___mcc_h514 = _source47.dtor_name;
                    RAST._IExpr _1653___mcc_h515 = _source47.dtor_range;
                    RAST._IExpr _1654___mcc_h516 = _source47.dtor_body;
                    return this;
                  } else if (_source47.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _1655___mcc_h520 = _source47.dtor_lbl;
                    RAST._IExpr _1656___mcc_h521 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1657___mcc_h524 = _source47.dtor_optLbl;
                    return this;
                  } else if (_source47.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1658___mcc_h526 = _source47.dtor_optLbl;
                    return this;
                  } else if (_source47.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _1659___mcc_h528 = _source47.dtor_optExpr;
                    return this;
                  } else if (_source47.is_CallType) {
                    RAST._IExpr _1660___mcc_h530 = _source47.dtor_obj;
                    Dafny.ISequence<RAST._IType> _1661___mcc_h531 = _source47.dtor_typeParameters;
                    return this;
                  } else if (_source47.is_Call) {
                    RAST._IExpr _1662___mcc_h534 = _source47.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _1663___mcc_h535 = _source47.dtor_arguments;
                    return this;
                  } else if (_source47.is_Select) {
                    RAST._IExpr _1664___mcc_h538 = _source47.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1665___mcc_h539 = _source47.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _1666___mcc_h542 = _source47.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1667___mcc_h543 = _source47.dtor_name;
                    return this;
                  }
                } else {
                  return this;
                }
              } else if (_source46.is_TypeAscription) {
                RAST._IExpr _1668___mcc_h546 = _source46.dtor_left;
                RAST._IType _1669___mcc_h547 = _source46.dtor_tpe;
                return this;
              } else if (_source46.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1670___mcc_h550 = _source46.dtor_value;
                return this;
              } else if (_source46.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1671___mcc_h552 = _source46.dtor_value;
                bool _1672___mcc_h553 = _source46.dtor_binary;
                return this;
              } else if (_source46.is_DeclareVar) {
                RAST._IDeclareType _1673___mcc_h556 = _source46.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1674___mcc_h557 = _source46.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1675___mcc_h558 = _source46.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1676___mcc_h559 = _source46.dtor_optRhs;
                return this;
              } else if (_source46.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1677___mcc_h564 = _source46.dtor_name;
                RAST._IExpr _1678___mcc_h565 = _source46.dtor_rhs;
                return this;
              } else if (_source46.is_IfExpr) {
                RAST._IExpr _1679___mcc_h568 = _source46.dtor_cond;
                RAST._IExpr _1680___mcc_h569 = _source46.dtor_thn;
                RAST._IExpr _1681___mcc_h570 = _source46.dtor_els;
                return this;
              } else if (_source46.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1682___mcc_h574 = _source46.dtor_optCond;
                RAST._IExpr _1683___mcc_h575 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_For) {
                Dafny.ISequence<Dafny.Rune> _1684___mcc_h578 = _source46.dtor_name;
                RAST._IExpr _1685___mcc_h579 = _source46.dtor_range;
                RAST._IExpr _1686___mcc_h580 = _source46.dtor_body;
                return this;
              } else if (_source46.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1687___mcc_h584 = _source46.dtor_lbl;
                RAST._IExpr _1688___mcc_h585 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1689___mcc_h588 = _source46.dtor_optLbl;
                return this;
              } else if (_source46.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1690___mcc_h590 = _source46.dtor_optLbl;
                return this;
              } else if (_source46.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1691___mcc_h592 = _source46.dtor_optExpr;
                return this;
              } else if (_source46.is_CallType) {
                RAST._IExpr _1692___mcc_h594 = _source46.dtor_obj;
                Dafny.ISequence<RAST._IType> _1693___mcc_h595 = _source46.dtor_typeParameters;
                return this;
              } else if (_source46.is_Call) {
                RAST._IExpr _1694___mcc_h598 = _source46.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _1695___mcc_h599 = _source46.dtor_arguments;
                return this;
              } else if (_source46.is_Select) {
                RAST._IExpr _1696___mcc_h602 = _source46.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1697___mcc_h603 = _source46.dtor_name;
                return this;
              } else {
                RAST._IExpr _1698___mcc_h606 = _source46.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1699___mcc_h607 = _source46.dtor_name;
                return this;
              }
            } else {
              return this;
            }
          } else if (_source45.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1700___mcc_h610 = _source45.dtor_op2;
            RAST._IExpr _1701___mcc_h611 = _source45.dtor_left;
            RAST._IExpr _1702___mcc_h612 = _source45.dtor_right;
            DAST.Format._IBinOpFormat _1703___mcc_h613 = _source45.dtor_format2;
            return this;
          } else if (_source45.is_TypeAscription) {
            RAST._IExpr _1704___mcc_h618 = _source45.dtor_left;
            RAST._IType _1705___mcc_h619 = _source45.dtor_tpe;
            return this;
          } else if (_source45.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1706___mcc_h622 = _source45.dtor_value;
            return this;
          } else if (_source45.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1707___mcc_h624 = _source45.dtor_value;
            bool _1708___mcc_h625 = _source45.dtor_binary;
            return this;
          } else if (_source45.is_DeclareVar) {
            RAST._IDeclareType _1709___mcc_h628 = _source45.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1710___mcc_h629 = _source45.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1711___mcc_h630 = _source45.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1712___mcc_h631 = _source45.dtor_optRhs;
            return this;
          } else if (_source45.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1713___mcc_h636 = _source45.dtor_name;
            RAST._IExpr _1714___mcc_h637 = _source45.dtor_rhs;
            return this;
          } else if (_source45.is_IfExpr) {
            RAST._IExpr _1715___mcc_h640 = _source45.dtor_cond;
            RAST._IExpr _1716___mcc_h641 = _source45.dtor_thn;
            RAST._IExpr _1717___mcc_h642 = _source45.dtor_els;
            return this;
          } else if (_source45.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1718___mcc_h646 = _source45.dtor_optCond;
            RAST._IExpr _1719___mcc_h647 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_For) {
            Dafny.ISequence<Dafny.Rune> _1720___mcc_h650 = _source45.dtor_name;
            RAST._IExpr _1721___mcc_h651 = _source45.dtor_range;
            RAST._IExpr _1722___mcc_h652 = _source45.dtor_body;
            return this;
          } else if (_source45.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1723___mcc_h656 = _source45.dtor_lbl;
            RAST._IExpr _1724___mcc_h657 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1725___mcc_h660 = _source45.dtor_optLbl;
            return this;
          } else if (_source45.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1726___mcc_h662 = _source45.dtor_optLbl;
            return this;
          } else if (_source45.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1727___mcc_h664 = _source45.dtor_optExpr;
            return this;
          } else if (_source45.is_CallType) {
            RAST._IExpr _1728___mcc_h666 = _source45.dtor_obj;
            Dafny.ISequence<RAST._IType> _1729___mcc_h667 = _source45.dtor_typeParameters;
            return this;
          } else if (_source45.is_Call) {
            RAST._IExpr _1730___mcc_h670 = _source45.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1731___mcc_h671 = _source45.dtor_arguments;
            return this;
          } else if (_source45.is_Select) {
            RAST._IExpr _1732___mcc_h674 = _source45.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1733___mcc_h675 = _source45.dtor_name;
            return this;
          } else {
            RAST._IExpr _1734___mcc_h678 = _source45.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1735___mcc_h679 = _source45.dtor_name;
            return this;
          }
        } else if (_source40.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1736___mcc_h682 = _source40.dtor_optCond;
          RAST._IExpr _1737___mcc_h683 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_For) {
          Dafny.ISequence<Dafny.Rune> _1738___mcc_h686 = _source40.dtor_name;
          RAST._IExpr _1739___mcc_h687 = _source40.dtor_range;
          RAST._IExpr _1740___mcc_h688 = _source40.dtor_body;
          return this;
        } else if (_source40.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1741___mcc_h692 = _source40.dtor_lbl;
          RAST._IExpr _1742___mcc_h693 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1743___mcc_h696 = _source40.dtor_optLbl;
          return this;
        } else if (_source40.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1744___mcc_h698 = _source40.dtor_optLbl;
          return this;
        } else if (_source40.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1745___mcc_h700 = _source40.dtor_optExpr;
          return this;
        } else if (_source40.is_CallType) {
          RAST._IExpr _1746___mcc_h702 = _source40.dtor_obj;
          Dafny.ISequence<RAST._IType> _1747___mcc_h703 = _source40.dtor_typeParameters;
          return this;
        } else if (_source40.is_Call) {
          RAST._IExpr _1748___mcc_h706 = _source40.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1749___mcc_h707 = _source40.dtor_arguments;
          return this;
        } else if (_source40.is_Select) {
          RAST._IExpr _1750___mcc_h710 = _source40.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1751___mcc_h711 = _source40.dtor_name;
          return this;
        } else {
          RAST._IExpr _1752___mcc_h714 = _source40.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1753___mcc_h715 = _source40.dtor_name;
          return this;
        }
      } else if (_source39.is_Block) {
        RAST._IExpr _1754___mcc_h718 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_StructBuild) {
        RAST._IExpr _1755___mcc_h720 = _source39.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1756___mcc_h721 = _source39.dtor_assignments;
        return this;
      } else if (_source39.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1757___mcc_h724 = _source39.dtor_arguments;
        return this;
      } else if (_source39.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1758___mcc_h726 = _source39.dtor_op1;
        RAST._IExpr _1759___mcc_h727 = _source39.dtor_underlying;
        DAST.Format._IUnOpFormat _1760___mcc_h728 = _source39.dtor_format;
        if (object.Equals(_1758___mcc_h726, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          RAST._IExpr _source49 = _1759___mcc_h727;
          if (_source49.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1761___mcc_h732 = _source49.dtor_content;
            return this;
          } else if (_source49.is_ExprFromType) {
            RAST._IType _1762___mcc_h734 = _source49.dtor_tpe;
            return this;
          } else if (_source49.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1763___mcc_h736 = _source49.dtor_name;
            return this;
          } else if (_source49.is_Match) {
            RAST._IExpr _1764___mcc_h738 = _source49.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1765___mcc_h739 = _source49.dtor_cases;
            return this;
          } else if (_source49.is_StmtExpr) {
            RAST._IExpr _1766___mcc_h742 = _source49.dtor_stmt;
            RAST._IExpr _1767___mcc_h743 = _source49.dtor_rhs;
            return this;
          } else if (_source49.is_Block) {
            RAST._IExpr _1768___mcc_h746 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_StructBuild) {
            RAST._IExpr _1769___mcc_h748 = _source49.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1770___mcc_h749 = _source49.dtor_assignments;
            return this;
          } else if (_source49.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1771___mcc_h752 = _source49.dtor_arguments;
            return this;
          } else if (_source49.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1772___mcc_h754 = _source49.dtor_op1;
            RAST._IExpr _1773___mcc_h755 = _source49.dtor_underlying;
            DAST.Format._IUnOpFormat _1774___mcc_h756 = _source49.dtor_format;
            return this;
          } else if (_source49.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1775___mcc_h760 = _source49.dtor_op2;
            RAST._IExpr _1776___mcc_h761 = _source49.dtor_left;
            RAST._IExpr _1777___mcc_h762 = _source49.dtor_right;
            DAST.Format._IBinOpFormat _1778___mcc_h763 = _source49.dtor_format2;
            return this;
          } else if (_source49.is_TypeAscription) {
            RAST._IExpr _1779___mcc_h768 = _source49.dtor_left;
            RAST._IType _1780___mcc_h769 = _source49.dtor_tpe;
            return this;
          } else if (_source49.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1781___mcc_h772 = _source49.dtor_value;
            return this;
          } else if (_source49.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1782___mcc_h774 = _source49.dtor_value;
            bool _1783___mcc_h775 = _source49.dtor_binary;
            return this;
          } else if (_source49.is_DeclareVar) {
            RAST._IDeclareType _1784___mcc_h778 = _source49.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1785___mcc_h779 = _source49.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1786___mcc_h780 = _source49.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1787___mcc_h781 = _source49.dtor_optRhs;
            return this;
          } else if (_source49.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1788___mcc_h786 = _source49.dtor_name;
            RAST._IExpr _1789___mcc_h787 = _source49.dtor_rhs;
            return this;
          } else if (_source49.is_IfExpr) {
            RAST._IExpr _1790___mcc_h790 = _source49.dtor_cond;
            RAST._IExpr _1791___mcc_h791 = _source49.dtor_thn;
            RAST._IExpr _1792___mcc_h792 = _source49.dtor_els;
            return this;
          } else if (_source49.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1793___mcc_h796 = _source49.dtor_optCond;
            RAST._IExpr _1794___mcc_h797 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_For) {
            Dafny.ISequence<Dafny.Rune> _1795___mcc_h800 = _source49.dtor_name;
            RAST._IExpr _1796___mcc_h801 = _source49.dtor_range;
            RAST._IExpr _1797___mcc_h802 = _source49.dtor_body;
            return this;
          } else if (_source49.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1798___mcc_h806 = _source49.dtor_lbl;
            RAST._IExpr _1799___mcc_h807 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1800___mcc_h810 = _source49.dtor_optLbl;
            return this;
          } else if (_source49.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1801___mcc_h812 = _source49.dtor_optLbl;
            return this;
          } else if (_source49.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1802___mcc_h814 = _source49.dtor_optExpr;
            return this;
          } else if (_source49.is_CallType) {
            RAST._IExpr _1803___mcc_h816 = _source49.dtor_obj;
            Dafny.ISequence<RAST._IType> _1804___mcc_h817 = _source49.dtor_typeParameters;
            return this;
          } else if (_source49.is_Call) {
            RAST._IExpr _1805___mcc_h820 = _source49.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1806___mcc_h821 = _source49.dtor_arguments;
            RAST._IExpr _source50 = _1805___mcc_h820;
            if (_source50.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1807___mcc_h824 = _source50.dtor_content;
              return this;
            } else if (_source50.is_ExprFromType) {
              RAST._IType _1808___mcc_h826 = _source50.dtor_tpe;
              return this;
            } else if (_source50.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1809___mcc_h828 = _source50.dtor_name;
              return this;
            } else if (_source50.is_Match) {
              RAST._IExpr _1810___mcc_h830 = _source50.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1811___mcc_h831 = _source50.dtor_cases;
              return this;
            } else if (_source50.is_StmtExpr) {
              RAST._IExpr _1812___mcc_h834 = _source50.dtor_stmt;
              RAST._IExpr _1813___mcc_h835 = _source50.dtor_rhs;
              return this;
            } else if (_source50.is_Block) {
              RAST._IExpr _1814___mcc_h838 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_StructBuild) {
              RAST._IExpr _1815___mcc_h840 = _source50.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _1816___mcc_h841 = _source50.dtor_assignments;
              return this;
            } else if (_source50.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1817___mcc_h844 = _source50.dtor_arguments;
              return this;
            } else if (_source50.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1818___mcc_h846 = _source50.dtor_op1;
              RAST._IExpr _1819___mcc_h847 = _source50.dtor_underlying;
              DAST.Format._IUnOpFormat _1820___mcc_h848 = _source50.dtor_format;
              return this;
            } else if (_source50.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1821___mcc_h852 = _source50.dtor_op2;
              RAST._IExpr _1822___mcc_h853 = _source50.dtor_left;
              RAST._IExpr _1823___mcc_h854 = _source50.dtor_right;
              DAST.Format._IBinOpFormat _1824___mcc_h855 = _source50.dtor_format2;
              return this;
            } else if (_source50.is_TypeAscription) {
              RAST._IExpr _1825___mcc_h860 = _source50.dtor_left;
              RAST._IType _1826___mcc_h861 = _source50.dtor_tpe;
              return this;
            } else if (_source50.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1827___mcc_h864 = _source50.dtor_value;
              return this;
            } else if (_source50.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1828___mcc_h866 = _source50.dtor_value;
              bool _1829___mcc_h867 = _source50.dtor_binary;
              return this;
            } else if (_source50.is_DeclareVar) {
              RAST._IDeclareType _1830___mcc_h870 = _source50.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1831___mcc_h871 = _source50.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1832___mcc_h872 = _source50.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1833___mcc_h873 = _source50.dtor_optRhs;
              return this;
            } else if (_source50.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1834___mcc_h878 = _source50.dtor_name;
              RAST._IExpr _1835___mcc_h879 = _source50.dtor_rhs;
              return this;
            } else if (_source50.is_IfExpr) {
              RAST._IExpr _1836___mcc_h882 = _source50.dtor_cond;
              RAST._IExpr _1837___mcc_h883 = _source50.dtor_thn;
              RAST._IExpr _1838___mcc_h884 = _source50.dtor_els;
              return this;
            } else if (_source50.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1839___mcc_h888 = _source50.dtor_optCond;
              RAST._IExpr _1840___mcc_h889 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_For) {
              Dafny.ISequence<Dafny.Rune> _1841___mcc_h892 = _source50.dtor_name;
              RAST._IExpr _1842___mcc_h893 = _source50.dtor_range;
              RAST._IExpr _1843___mcc_h894 = _source50.dtor_body;
              return this;
            } else if (_source50.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1844___mcc_h898 = _source50.dtor_lbl;
              RAST._IExpr _1845___mcc_h899 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1846___mcc_h902 = _source50.dtor_optLbl;
              return this;
            } else if (_source50.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1847___mcc_h904 = _source50.dtor_optLbl;
              return this;
            } else if (_source50.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1848___mcc_h906 = _source50.dtor_optExpr;
              return this;
            } else if (_source50.is_CallType) {
              RAST._IExpr _1849___mcc_h908 = _source50.dtor_obj;
              Dafny.ISequence<RAST._IType> _1850___mcc_h909 = _source50.dtor_typeParameters;
              return this;
            } else if (_source50.is_Call) {
              RAST._IExpr _1851___mcc_h912 = _source50.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _1852___mcc_h913 = _source50.dtor_arguments;
              return this;
            } else if (_source50.is_Select) {
              RAST._IExpr _1853___mcc_h916 = _source50.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1854___mcc_h917 = _source50.dtor_name;
              if (object.Equals(_1854___mcc_h917, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))) {
                DAST.Format._IUnOpFormat _1855_format = _1760___mcc_h728;
                Dafny.ISequence<RAST._IExpr> _1856_args = _1806___mcc_h821;
                RAST._IExpr _1857_underlying = _1853___mcc_h916;
                if ((_1856_args).Equals(Dafny.Sequence<RAST._IExpr>.FromElements())) {
                  return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1857_underlying, _1855_format);
                } else {
                  return this;
                }
              } else {
                return this;
              }
            } else {
              RAST._IExpr _1858___mcc_h920 = _source50.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1859___mcc_h921 = _source50.dtor_name;
              return this;
            }
          } else if (_source49.is_Select) {
            RAST._IExpr _1860___mcc_h924 = _source49.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1861___mcc_h925 = _source49.dtor_name;
            return this;
          } else {
            RAST._IExpr _1862___mcc_h928 = _source49.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1863___mcc_h929 = _source49.dtor_name;
            return this;
          }
        } else if (object.Equals(_1758___mcc_h726, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source51 = _1759___mcc_h727;
          if (_source51.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1864___mcc_h932 = _source51.dtor_content;
            return this;
          } else if (_source51.is_ExprFromType) {
            RAST._IType _1865___mcc_h934 = _source51.dtor_tpe;
            return this;
          } else if (_source51.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1866___mcc_h936 = _source51.dtor_name;
            return this;
          } else if (_source51.is_Match) {
            RAST._IExpr _1867___mcc_h938 = _source51.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1868___mcc_h939 = _source51.dtor_cases;
            return this;
          } else if (_source51.is_StmtExpr) {
            RAST._IExpr _1869___mcc_h942 = _source51.dtor_stmt;
            RAST._IExpr _1870___mcc_h943 = _source51.dtor_rhs;
            return this;
          } else if (_source51.is_Block) {
            RAST._IExpr _1871___mcc_h946 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_StructBuild) {
            RAST._IExpr _1872___mcc_h948 = _source51.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1873___mcc_h949 = _source51.dtor_assignments;
            return this;
          } else if (_source51.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1874___mcc_h952 = _source51.dtor_arguments;
            return this;
          } else if (_source51.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1875___mcc_h954 = _source51.dtor_op1;
            RAST._IExpr _1876___mcc_h955 = _source51.dtor_underlying;
            DAST.Format._IUnOpFormat _1877___mcc_h956 = _source51.dtor_format;
            return this;
          } else if (_source51.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1878___mcc_h960 = _source51.dtor_op2;
            RAST._IExpr _1879___mcc_h961 = _source51.dtor_left;
            RAST._IExpr _1880___mcc_h962 = _source51.dtor_right;
            DAST.Format._IBinOpFormat _1881___mcc_h963 = _source51.dtor_format2;
            if (object.Equals(_1878___mcc_h960, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnOpFormat _source52 = _1760___mcc_h728;
              if (_source52.is_NoFormat) {
                return this;
              } else {
                DAST.Format._IBinOpFormat _1882_format = _1881___mcc_h963;
                RAST._IExpr _1883_right = _1880___mcc_h962;
                RAST._IExpr _1884_left = _1879___mcc_h961;
                return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1884_left, _1883_right, DAST.Format.BinOpFormat.create_NoFormat());
              }
            } else if (object.Equals(_1878___mcc_h960, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinOpFormat _source53 = _1881___mcc_h963;
              if (_source53.is_NoFormat) {
                DAST.Format._IUnOpFormat _source54 = _1760___mcc_h728;
                if (_source54.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1885_right = _1880___mcc_h962;
                  RAST._IExpr _1886_left = _1879___mcc_h961;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1886_left, _1885_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              } else if (_source53.is_ImpliesFormat) {
                return this;
              } else if (_source53.is_Equivalence) {
                return this;
              } else {
                DAST.Format._IUnOpFormat _source55 = _1760___mcc_h728;
                if (_source55.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1887_right = _1880___mcc_h962;
                  RAST._IExpr _1888_left = _1879___mcc_h961;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1887_right, _1888_left, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else {
              return this;
            }
          } else if (_source51.is_TypeAscription) {
            RAST._IExpr _1889___mcc_h968 = _source51.dtor_left;
            RAST._IType _1890___mcc_h969 = _source51.dtor_tpe;
            return this;
          } else if (_source51.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1891___mcc_h972 = _source51.dtor_value;
            return this;
          } else if (_source51.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1892___mcc_h974 = _source51.dtor_value;
            bool _1893___mcc_h975 = _source51.dtor_binary;
            return this;
          } else if (_source51.is_DeclareVar) {
            RAST._IDeclareType _1894___mcc_h978 = _source51.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1895___mcc_h979 = _source51.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1896___mcc_h980 = _source51.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1897___mcc_h981 = _source51.dtor_optRhs;
            return this;
          } else if (_source51.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1898___mcc_h986 = _source51.dtor_name;
            RAST._IExpr _1899___mcc_h987 = _source51.dtor_rhs;
            return this;
          } else if (_source51.is_IfExpr) {
            RAST._IExpr _1900___mcc_h990 = _source51.dtor_cond;
            RAST._IExpr _1901___mcc_h991 = _source51.dtor_thn;
            RAST._IExpr _1902___mcc_h992 = _source51.dtor_els;
            return this;
          } else if (_source51.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1903___mcc_h996 = _source51.dtor_optCond;
            RAST._IExpr _1904___mcc_h997 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_For) {
            Dafny.ISequence<Dafny.Rune> _1905___mcc_h1000 = _source51.dtor_name;
            RAST._IExpr _1906___mcc_h1001 = _source51.dtor_range;
            RAST._IExpr _1907___mcc_h1002 = _source51.dtor_body;
            return this;
          } else if (_source51.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1908___mcc_h1006 = _source51.dtor_lbl;
            RAST._IExpr _1909___mcc_h1007 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1910___mcc_h1010 = _source51.dtor_optLbl;
            return this;
          } else if (_source51.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1911___mcc_h1012 = _source51.dtor_optLbl;
            return this;
          } else if (_source51.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1912___mcc_h1014 = _source51.dtor_optExpr;
            return this;
          } else if (_source51.is_CallType) {
            RAST._IExpr _1913___mcc_h1016 = _source51.dtor_obj;
            Dafny.ISequence<RAST._IType> _1914___mcc_h1017 = _source51.dtor_typeParameters;
            return this;
          } else if (_source51.is_Call) {
            RAST._IExpr _1915___mcc_h1020 = _source51.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1916___mcc_h1021 = _source51.dtor_arguments;
            return this;
          } else if (_source51.is_Select) {
            RAST._IExpr _1917___mcc_h1024 = _source51.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1918___mcc_h1025 = _source51.dtor_name;
            return this;
          } else {
            RAST._IExpr _1919___mcc_h1028 = _source51.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1920___mcc_h1029 = _source51.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source39.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1921___mcc_h1032 = _source39.dtor_op2;
        RAST._IExpr _1922___mcc_h1033 = _source39.dtor_left;
        RAST._IExpr _1923___mcc_h1034 = _source39.dtor_right;
        DAST.Format._IBinOpFormat _1924___mcc_h1035 = _source39.dtor_format2;
        return this;
      } else if (_source39.is_TypeAscription) {
        RAST._IExpr _1925___mcc_h1040 = _source39.dtor_left;
        RAST._IType _1926___mcc_h1041 = _source39.dtor_tpe;
        return this;
      } else if (_source39.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1927___mcc_h1044 = _source39.dtor_value;
        return this;
      } else if (_source39.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1928___mcc_h1046 = _source39.dtor_value;
        bool _1929___mcc_h1047 = _source39.dtor_binary;
        return this;
      } else if (_source39.is_DeclareVar) {
        RAST._IDeclareType _1930___mcc_h1050 = _source39.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1931___mcc_h1051 = _source39.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1932___mcc_h1052 = _source39.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1933___mcc_h1053 = _source39.dtor_optRhs;
        return this;
      } else if (_source39.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1934___mcc_h1058 = _source39.dtor_name;
        RAST._IExpr _1935___mcc_h1059 = _source39.dtor_rhs;
        return this;
      } else if (_source39.is_IfExpr) {
        RAST._IExpr _1936___mcc_h1062 = _source39.dtor_cond;
        RAST._IExpr _1937___mcc_h1063 = _source39.dtor_thn;
        RAST._IExpr _1938___mcc_h1064 = _source39.dtor_els;
        return this;
      } else if (_source39.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1939___mcc_h1068 = _source39.dtor_optCond;
        RAST._IExpr _1940___mcc_h1069 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_For) {
        Dafny.ISequence<Dafny.Rune> _1941___mcc_h1072 = _source39.dtor_name;
        RAST._IExpr _1942___mcc_h1073 = _source39.dtor_range;
        RAST._IExpr _1943___mcc_h1074 = _source39.dtor_body;
        return this;
      } else if (_source39.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1944___mcc_h1078 = _source39.dtor_lbl;
        RAST._IExpr _1945___mcc_h1079 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1946___mcc_h1082 = _source39.dtor_optLbl;
        return this;
      } else if (_source39.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1947___mcc_h1084 = _source39.dtor_optLbl;
        return this;
      } else if (_source39.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1948___mcc_h1086 = _source39.dtor_optExpr;
        return this;
      } else if (_source39.is_CallType) {
        RAST._IExpr _1949___mcc_h1088 = _source39.dtor_obj;
        Dafny.ISequence<RAST._IType> _1950___mcc_h1089 = _source39.dtor_typeParameters;
        return this;
      } else if (_source39.is_Call) {
        RAST._IExpr _1951___mcc_h1092 = _source39.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _1952___mcc_h1093 = _source39.dtor_arguments;
        RAST._IExpr _source56 = _1951___mcc_h1092;
        if (_source56.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1953___mcc_h1096 = _source56.dtor_content;
          return this;
        } else if (_source56.is_ExprFromType) {
          RAST._IType _1954___mcc_h1098 = _source56.dtor_tpe;
          return this;
        } else if (_source56.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1955___mcc_h1100 = _source56.dtor_name;
          return this;
        } else if (_source56.is_Match) {
          RAST._IExpr _1956___mcc_h1102 = _source56.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1957___mcc_h1103 = _source56.dtor_cases;
          return this;
        } else if (_source56.is_StmtExpr) {
          RAST._IExpr _1958___mcc_h1106 = _source56.dtor_stmt;
          RAST._IExpr _1959___mcc_h1107 = _source56.dtor_rhs;
          return this;
        } else if (_source56.is_Block) {
          RAST._IExpr _1960___mcc_h1110 = _source56.dtor_underlying;
          return this;
        } else if (_source56.is_StructBuild) {
          RAST._IExpr _1961___mcc_h1112 = _source56.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1962___mcc_h1113 = _source56.dtor_assignments;
          return this;
        } else if (_source56.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1963___mcc_h1116 = _source56.dtor_arguments;
          return this;
        } else if (_source56.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1964___mcc_h1118 = _source56.dtor_op1;
          RAST._IExpr _1965___mcc_h1119 = _source56.dtor_underlying;
          DAST.Format._IUnOpFormat _1966___mcc_h1120 = _source56.dtor_format;
          return this;
        } else if (_source56.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1967___mcc_h1124 = _source56.dtor_op2;
          RAST._IExpr _1968___mcc_h1125 = _source56.dtor_left;
          RAST._IExpr _1969___mcc_h1126 = _source56.dtor_right;
          DAST.Format._IBinOpFormat _1970___mcc_h1127 = _source56.dtor_format2;
          return this;
        } else if (_source56.is_TypeAscription) {
          RAST._IExpr _1971___mcc_h1132 = _source56.dtor_left;
          RAST._IType _1972___mcc_h1133 = _source56.dtor_tpe;
          return this;
        } else if (_source56.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1973___mcc_h1136 = _source56.dtor_value;
          return this;
        } else if (_source56.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1974___mcc_h1138 = _source56.dtor_value;
          bool _1975___mcc_h1139 = _source56.dtor_binary;
          return this;
        } else if (_source56.is_DeclareVar) {
          RAST._IDeclareType _1976___mcc_h1142 = _source56.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1977___mcc_h1143 = _source56.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1978___mcc_h1144 = _source56.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1979___mcc_h1145 = _source56.dtor_optRhs;
          return this;
        } else if (_source56.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1980___mcc_h1150 = _source56.dtor_name;
          RAST._IExpr _1981___mcc_h1151 = _source56.dtor_rhs;
          return this;
        } else if (_source56.is_IfExpr) {
          RAST._IExpr _1982___mcc_h1154 = _source56.dtor_cond;
          RAST._IExpr _1983___mcc_h1155 = _source56.dtor_thn;
          RAST._IExpr _1984___mcc_h1156 = _source56.dtor_els;
          return this;
        } else if (_source56.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1985___mcc_h1160 = _source56.dtor_optCond;
          RAST._IExpr _1986___mcc_h1161 = _source56.dtor_underlying;
          return this;
        } else if (_source56.is_For) {
          Dafny.ISequence<Dafny.Rune> _1987___mcc_h1164 = _source56.dtor_name;
          RAST._IExpr _1988___mcc_h1165 = _source56.dtor_range;
          RAST._IExpr _1989___mcc_h1166 = _source56.dtor_body;
          return this;
        } else if (_source56.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1990___mcc_h1170 = _source56.dtor_lbl;
          RAST._IExpr _1991___mcc_h1171 = _source56.dtor_underlying;
          return this;
        } else if (_source56.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1992___mcc_h1174 = _source56.dtor_optLbl;
          return this;
        } else if (_source56.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1993___mcc_h1176 = _source56.dtor_optLbl;
          return this;
        } else if (_source56.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1994___mcc_h1178 = _source56.dtor_optExpr;
          return this;
        } else if (_source56.is_CallType) {
          RAST._IExpr _1995___mcc_h1180 = _source56.dtor_obj;
          Dafny.ISequence<RAST._IType> _1996___mcc_h1181 = _source56.dtor_typeParameters;
          return this;
        } else if (_source56.is_Call) {
          RAST._IExpr _1997___mcc_h1184 = _source56.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1998___mcc_h1185 = _source56.dtor_arguments;
          return this;
        } else if (_source56.is_Select) {
          RAST._IExpr _1999___mcc_h1188 = _source56.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _2000___mcc_h1189 = _source56.dtor_name;
          return this;
        } else {
          RAST._IExpr _2001___mcc_h1192 = _source56.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _2002___mcc_h1193 = _source56.dtor_name;
          if (object.Equals(_2002___mcc_h1193, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))) {
            Dafny.ISequence<RAST._IExpr> _2003_args = _1952___mcc_h1093;
            RAST._IExpr _2004_r = _2001___mcc_h1192;
            if (((!object.Equals(_2004_r, RAST.__default.dafny__runtime)) && (!object.Equals(_2004_r, RAST.__default.@global))) || ((new BigInteger((_2003_args).Count)) != (new BigInteger(2)))) {
              return this;
            } else {
              RAST._IExpr _2005_expr = (_2003_args).Select(BigInteger.Zero);
              RAST._IExpr _2006_tpeExpr = (_2003_args).Select(BigInteger.One);
              if (!((_2006_tpeExpr).is_ExprFromType)) {
                return this;
              } else {
                RAST._IType _2007_tpe = (_2006_tpeExpr).dtor_tpe;
                if (((((((((((_2007_tpe).is_U8) || ((_2007_tpe).is_U16)) || ((_2007_tpe).is_U32)) || ((_2007_tpe).is_U64)) || ((_2007_tpe).is_U128)) || ((_2007_tpe).is_I8)) || ((_2007_tpe).is_I16)) || ((_2007_tpe).is_I32)) || ((_2007_tpe).is_I64)) || ((_2007_tpe).is_I128)) {
                  RAST._IExpr _source57 = _2005_expr;
                  if (_source57.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _2008___mcc_h1204 = _source57.dtor_content;
                    return this;
                  } else if (_source57.is_ExprFromType) {
                    RAST._IType _2009___mcc_h1206 = _source57.dtor_tpe;
                    return this;
                  } else if (_source57.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _2010___mcc_h1208 = _source57.dtor_name;
                    return this;
                  } else if (_source57.is_Match) {
                    RAST._IExpr _2011___mcc_h1210 = _source57.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _2012___mcc_h1211 = _source57.dtor_cases;
                    return this;
                  } else if (_source57.is_StmtExpr) {
                    RAST._IExpr _2013___mcc_h1214 = _source57.dtor_stmt;
                    RAST._IExpr _2014___mcc_h1215 = _source57.dtor_rhs;
                    return this;
                  } else if (_source57.is_Block) {
                    RAST._IExpr _2015___mcc_h1218 = _source57.dtor_underlying;
                    return this;
                  } else if (_source57.is_StructBuild) {
                    RAST._IExpr _2016___mcc_h1220 = _source57.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _2017___mcc_h1221 = _source57.dtor_assignments;
                    return this;
                  } else if (_source57.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _2018___mcc_h1224 = _source57.dtor_arguments;
                    return this;
                  } else if (_source57.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _2019___mcc_h1226 = _source57.dtor_op1;
                    RAST._IExpr _2020___mcc_h1227 = _source57.dtor_underlying;
                    DAST.Format._IUnOpFormat _2021___mcc_h1228 = _source57.dtor_format;
                    return this;
                  } else if (_source57.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _2022___mcc_h1232 = _source57.dtor_op2;
                    RAST._IExpr _2023___mcc_h1233 = _source57.dtor_left;
                    RAST._IExpr _2024___mcc_h1234 = _source57.dtor_right;
                    DAST.Format._IBinOpFormat _2025___mcc_h1235 = _source57.dtor_format2;
                    return this;
                  } else if (_source57.is_TypeAscription) {
                    RAST._IExpr _2026___mcc_h1240 = _source57.dtor_left;
                    RAST._IType _2027___mcc_h1241 = _source57.dtor_tpe;
                    return this;
                  } else if (_source57.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _2028___mcc_h1244 = _source57.dtor_value;
                    return this;
                  } else if (_source57.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _2029___mcc_h1246 = _source57.dtor_value;
                    bool _2030___mcc_h1247 = _source57.dtor_binary;
                    return this;
                  } else if (_source57.is_DeclareVar) {
                    RAST._IDeclareType _2031___mcc_h1250 = _source57.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _2032___mcc_h1251 = _source57.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _2033___mcc_h1252 = _source57.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _2034___mcc_h1253 = _source57.dtor_optRhs;
                    return this;
                  } else if (_source57.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _2035___mcc_h1258 = _source57.dtor_name;
                    RAST._IExpr _2036___mcc_h1259 = _source57.dtor_rhs;
                    return this;
                  } else if (_source57.is_IfExpr) {
                    RAST._IExpr _2037___mcc_h1262 = _source57.dtor_cond;
                    RAST._IExpr _2038___mcc_h1263 = _source57.dtor_thn;
                    RAST._IExpr _2039___mcc_h1264 = _source57.dtor_els;
                    return this;
                  } else if (_source57.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _2040___mcc_h1268 = _source57.dtor_optCond;
                    RAST._IExpr _2041___mcc_h1269 = _source57.dtor_underlying;
                    return this;
                  } else if (_source57.is_For) {
                    Dafny.ISequence<Dafny.Rune> _2042___mcc_h1272 = _source57.dtor_name;
                    RAST._IExpr _2043___mcc_h1273 = _source57.dtor_range;
                    RAST._IExpr _2044___mcc_h1274 = _source57.dtor_body;
                    return this;
                  } else if (_source57.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _2045___mcc_h1278 = _source57.dtor_lbl;
                    RAST._IExpr _2046___mcc_h1279 = _source57.dtor_underlying;
                    return this;
                  } else if (_source57.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2047___mcc_h1282 = _source57.dtor_optLbl;
                    return this;
                  } else if (_source57.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2048___mcc_h1284 = _source57.dtor_optLbl;
                    return this;
                  } else if (_source57.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _2049___mcc_h1286 = _source57.dtor_optExpr;
                    return this;
                  } else if (_source57.is_CallType) {
                    RAST._IExpr _2050___mcc_h1288 = _source57.dtor_obj;
                    Dafny.ISequence<RAST._IType> _2051___mcc_h1289 = _source57.dtor_typeParameters;
                    return this;
                  } else if (_source57.is_Call) {
                    RAST._IExpr _2052___mcc_h1292 = _source57.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _2053___mcc_h1293 = _source57.dtor_arguments;
                    RAST._IExpr _source58 = _2052___mcc_h1292;
                    if (_source58.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _2054___mcc_h1296 = _source58.dtor_content;
                      return this;
                    } else if (_source58.is_ExprFromType) {
                      RAST._IType _2055___mcc_h1298 = _source58.dtor_tpe;
                      return this;
                    } else if (_source58.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _2056___mcc_h1300 = _source58.dtor_name;
                      return this;
                    } else if (_source58.is_Match) {
                      RAST._IExpr _2057___mcc_h1302 = _source58.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _2058___mcc_h1303 = _source58.dtor_cases;
                      return this;
                    } else if (_source58.is_StmtExpr) {
                      RAST._IExpr _2059___mcc_h1306 = _source58.dtor_stmt;
                      RAST._IExpr _2060___mcc_h1307 = _source58.dtor_rhs;
                      return this;
                    } else if (_source58.is_Block) {
                      RAST._IExpr _2061___mcc_h1310 = _source58.dtor_underlying;
                      return this;
                    } else if (_source58.is_StructBuild) {
                      RAST._IExpr _2062___mcc_h1312 = _source58.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _2063___mcc_h1313 = _source58.dtor_assignments;
                      return this;
                    } else if (_source58.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _2064___mcc_h1316 = _source58.dtor_arguments;
                      return this;
                    } else if (_source58.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _2065___mcc_h1318 = _source58.dtor_op1;
                      RAST._IExpr _2066___mcc_h1319 = _source58.dtor_underlying;
                      DAST.Format._IUnOpFormat _2067___mcc_h1320 = _source58.dtor_format;
                      return this;
                    } else if (_source58.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _2068___mcc_h1324 = _source58.dtor_op2;
                      RAST._IExpr _2069___mcc_h1325 = _source58.dtor_left;
                      RAST._IExpr _2070___mcc_h1326 = _source58.dtor_right;
                      DAST.Format._IBinOpFormat _2071___mcc_h1327 = _source58.dtor_format2;
                      return this;
                    } else if (_source58.is_TypeAscription) {
                      RAST._IExpr _2072___mcc_h1332 = _source58.dtor_left;
                      RAST._IType _2073___mcc_h1333 = _source58.dtor_tpe;
                      return this;
                    } else if (_source58.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _2074___mcc_h1336 = _source58.dtor_value;
                      return this;
                    } else if (_source58.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _2075___mcc_h1338 = _source58.dtor_value;
                      bool _2076___mcc_h1339 = _source58.dtor_binary;
                      return this;
                    } else if (_source58.is_DeclareVar) {
                      RAST._IDeclareType _2077___mcc_h1342 = _source58.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _2078___mcc_h1343 = _source58.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _2079___mcc_h1344 = _source58.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _2080___mcc_h1345 = _source58.dtor_optRhs;
                      return this;
                    } else if (_source58.is_AssignVar) {
                      Dafny.ISequence<Dafny.Rune> _2081___mcc_h1350 = _source58.dtor_name;
                      RAST._IExpr _2082___mcc_h1351 = _source58.dtor_rhs;
                      return this;
                    } else if (_source58.is_IfExpr) {
                      RAST._IExpr _2083___mcc_h1354 = _source58.dtor_cond;
                      RAST._IExpr _2084___mcc_h1355 = _source58.dtor_thn;
                      RAST._IExpr _2085___mcc_h1356 = _source58.dtor_els;
                      return this;
                    } else if (_source58.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _2086___mcc_h1360 = _source58.dtor_optCond;
                      RAST._IExpr _2087___mcc_h1361 = _source58.dtor_underlying;
                      return this;
                    } else if (_source58.is_For) {
                      Dafny.ISequence<Dafny.Rune> _2088___mcc_h1364 = _source58.dtor_name;
                      RAST._IExpr _2089___mcc_h1365 = _source58.dtor_range;
                      RAST._IExpr _2090___mcc_h1366 = _source58.dtor_body;
                      return this;
                    } else if (_source58.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _2091___mcc_h1370 = _source58.dtor_lbl;
                      RAST._IExpr _2092___mcc_h1371 = _source58.dtor_underlying;
                      return this;
                    } else if (_source58.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2093___mcc_h1374 = _source58.dtor_optLbl;
                      return this;
                    } else if (_source58.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2094___mcc_h1376 = _source58.dtor_optLbl;
                      return this;
                    } else if (_source58.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _2095___mcc_h1378 = _source58.dtor_optExpr;
                      return this;
                    } else if (_source58.is_CallType) {
                      RAST._IExpr _2096___mcc_h1380 = _source58.dtor_obj;
                      Dafny.ISequence<RAST._IType> _2097___mcc_h1381 = _source58.dtor_typeParameters;
                      return this;
                    } else if (_source58.is_Call) {
                      RAST._IExpr _2098___mcc_h1384 = _source58.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _2099___mcc_h1385 = _source58.dtor_arguments;
                      return this;
                    } else if (_source58.is_Select) {
                      RAST._IExpr _2100___mcc_h1388 = _source58.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _2101___mcc_h1389 = _source58.dtor_name;
                      return this;
                    } else {
                      RAST._IExpr _2102___mcc_h1392 = _source58.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _2103___mcc_h1393 = _source58.dtor_name;
                      if (object.Equals(_2103___mcc_h1393, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))) {
                        Dafny.ISequence<RAST._IExpr> _2104_args = _2053___mcc_h1293;
                        RAST._IExpr _2105_base = _2102___mcc_h1392;
                        if (((new BigInteger((_2104_args).Count)) == (BigInteger.One)) && ((object.Equals(_2105_base, RAST.__default.dafny__runtime)) || (object.Equals(_2105_base, RAST.__default.@global)))) {
                          RAST._IExpr _source59 = (_2104_args).Select(BigInteger.Zero);
                          if (_source59.is_RawExpr) {
                            Dafny.ISequence<Dafny.Rune> _2106___mcc_h1404 = _source59.dtor_content;
                            return this;
                          } else if (_source59.is_ExprFromType) {
                            RAST._IType _2107___mcc_h1406 = _source59.dtor_tpe;
                            return this;
                          } else if (_source59.is_Identifier) {
                            Dafny.ISequence<Dafny.Rune> _2108___mcc_h1408 = _source59.dtor_name;
                            return this;
                          } else if (_source59.is_Match) {
                            RAST._IExpr _2109___mcc_h1410 = _source59.dtor_matchee;
                            Dafny.ISequence<RAST._IMatchCase> _2110___mcc_h1411 = _source59.dtor_cases;
                            return this;
                          } else if (_source59.is_StmtExpr) {
                            RAST._IExpr _2111___mcc_h1414 = _source59.dtor_stmt;
                            RAST._IExpr _2112___mcc_h1415 = _source59.dtor_rhs;
                            return this;
                          } else if (_source59.is_Block) {
                            RAST._IExpr _2113___mcc_h1418 = _source59.dtor_underlying;
                            return this;
                          } else if (_source59.is_StructBuild) {
                            RAST._IExpr _2114___mcc_h1420 = _source59.dtor_underlying;
                            Dafny.ISequence<RAST._IAssignIdentifier> _2115___mcc_h1421 = _source59.dtor_assignments;
                            return this;
                          } else if (_source59.is_Tuple) {
                            Dafny.ISequence<RAST._IExpr> _2116___mcc_h1424 = _source59.dtor_arguments;
                            return this;
                          } else if (_source59.is_UnaryOp) {
                            Dafny.ISequence<Dafny.Rune> _2117___mcc_h1426 = _source59.dtor_op1;
                            RAST._IExpr _2118___mcc_h1427 = _source59.dtor_underlying;
                            DAST.Format._IUnOpFormat _2119___mcc_h1428 = _source59.dtor_format;
                            return this;
                          } else if (_source59.is_BinaryOp) {
                            Dafny.ISequence<Dafny.Rune> _2120___mcc_h1432 = _source59.dtor_op2;
                            RAST._IExpr _2121___mcc_h1433 = _source59.dtor_left;
                            RAST._IExpr _2122___mcc_h1434 = _source59.dtor_right;
                            DAST.Format._IBinOpFormat _2123___mcc_h1435 = _source59.dtor_format2;
                            return this;
                          } else if (_source59.is_TypeAscription) {
                            RAST._IExpr _2124___mcc_h1440 = _source59.dtor_left;
                            RAST._IType _2125___mcc_h1441 = _source59.dtor_tpe;
                            return this;
                          } else if (_source59.is_LiteralInt) {
                            Dafny.ISequence<Dafny.Rune> _2126___mcc_h1444 = _source59.dtor_value;
                            Dafny.ISequence<Dafny.Rune> _2127_number = _2126___mcc_h1444;
                            return RAST.Expr.create_LiteralInt(_2127_number);
                          } else if (_source59.is_LiteralString) {
                            Dafny.ISequence<Dafny.Rune> _2128___mcc_h1446 = _source59.dtor_value;
                            bool _2129___mcc_h1447 = _source59.dtor_binary;
                            Dafny.ISequence<Dafny.Rune> _2130_number = _2128___mcc_h1446;
                            return RAST.Expr.create_LiteralInt(_2130_number);
                          } else if (_source59.is_DeclareVar) {
                            RAST._IDeclareType _2131___mcc_h1450 = _source59.dtor_declareType;
                            Dafny.ISequence<Dafny.Rune> _2132___mcc_h1451 = _source59.dtor_name;
                            Std.Wrappers._IOption<RAST._IType> _2133___mcc_h1452 = _source59.dtor_optType;
                            Std.Wrappers._IOption<RAST._IExpr> _2134___mcc_h1453 = _source59.dtor_optRhs;
                            return this;
                          } else if (_source59.is_AssignVar) {
                            Dafny.ISequence<Dafny.Rune> _2135___mcc_h1458 = _source59.dtor_name;
                            RAST._IExpr _2136___mcc_h1459 = _source59.dtor_rhs;
                            return this;
                          } else if (_source59.is_IfExpr) {
                            RAST._IExpr _2137___mcc_h1462 = _source59.dtor_cond;
                            RAST._IExpr _2138___mcc_h1463 = _source59.dtor_thn;
                            RAST._IExpr _2139___mcc_h1464 = _source59.dtor_els;
                            return this;
                          } else if (_source59.is_Loop) {
                            Std.Wrappers._IOption<RAST._IExpr> _2140___mcc_h1468 = _source59.dtor_optCond;
                            RAST._IExpr _2141___mcc_h1469 = _source59.dtor_underlying;
                            return this;
                          } else if (_source59.is_For) {
                            Dafny.ISequence<Dafny.Rune> _2142___mcc_h1472 = _source59.dtor_name;
                            RAST._IExpr _2143___mcc_h1473 = _source59.dtor_range;
                            RAST._IExpr _2144___mcc_h1474 = _source59.dtor_body;
                            return this;
                          } else if (_source59.is_Labelled) {
                            Dafny.ISequence<Dafny.Rune> _2145___mcc_h1478 = _source59.dtor_lbl;
                            RAST._IExpr _2146___mcc_h1479 = _source59.dtor_underlying;
                            return this;
                          } else if (_source59.is_Break) {
                            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2147___mcc_h1482 = _source59.dtor_optLbl;
                            return this;
                          } else if (_source59.is_Continue) {
                            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2148___mcc_h1484 = _source59.dtor_optLbl;
                            return this;
                          } else if (_source59.is_Return) {
                            Std.Wrappers._IOption<RAST._IExpr> _2149___mcc_h1486 = _source59.dtor_optExpr;
                            return this;
                          } else if (_source59.is_CallType) {
                            RAST._IExpr _2150___mcc_h1488 = _source59.dtor_obj;
                            Dafny.ISequence<RAST._IType> _2151___mcc_h1489 = _source59.dtor_typeParameters;
                            return this;
                          } else if (_source59.is_Call) {
                            RAST._IExpr _2152___mcc_h1492 = _source59.dtor_obj;
                            Dafny.ISequence<RAST._IExpr> _2153___mcc_h1493 = _source59.dtor_arguments;
                            return this;
                          } else if (_source59.is_Select) {
                            RAST._IExpr _2154___mcc_h1496 = _source59.dtor_obj;
                            Dafny.ISequence<Dafny.Rune> _2155___mcc_h1497 = _source59.dtor_name;
                            return this;
                          } else {
                            RAST._IExpr _2156___mcc_h1500 = _source59.dtor_obj;
                            Dafny.ISequence<Dafny.Rune> _2157___mcc_h1501 = _source59.dtor_name;
                            return this;
                          }
                        } else {
                          return this;
                        }
                      } else {
                        return this;
                      }
                    }
                  } else if (_source57.is_Select) {
                    RAST._IExpr _2158___mcc_h1396 = _source57.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _2159___mcc_h1397 = _source57.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _2160___mcc_h1400 = _source57.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _2161___mcc_h1401 = _source57.dtor_name;
                    return this;
                  }
                } else {
                  return this;
                }
              }
            }
          } else {
            return this;
          }
        }
      } else if (_source39.is_Select) {
        RAST._IExpr _2162___mcc_h1196 = _source39.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2163___mcc_h1197 = _source39.dtor_name;
        return this;
      } else {
        RAST._IExpr _2164___mcc_h1200 = _source39.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2165___mcc_h1201 = _source39.dtor_name;
        return this;
      }
    }
    public bool LeftRequiresParentheses(RAST._IExpr left) {
      return ((this).printingInfo).NeedParenthesesForLeft((left).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left) {
      if ((this).LeftRequiresParentheses(left)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public bool RightRequiresParentheses(RAST._IExpr right) {
      return ((this).printingInfo).NeedParenthesesForRight((right).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right) {
      if ((this).RightRequiresParentheses(right)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier() {
      RAST._IExpr _source60 = this;
      if (_source60.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2166___mcc_h0 = _source60.dtor_content;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_ExprFromType) {
        RAST._IType _2167___mcc_h2 = _source60.dtor_tpe;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2168___mcc_h4 = _source60.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Match) {
        RAST._IExpr _2169___mcc_h6 = _source60.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2170___mcc_h7 = _source60.dtor_cases;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_StmtExpr) {
        RAST._IExpr _2171___mcc_h10 = _source60.dtor_stmt;
        RAST._IExpr _2172___mcc_h11 = _source60.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Block) {
        RAST._IExpr _2173___mcc_h14 = _source60.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_StructBuild) {
        RAST._IExpr _2174___mcc_h16 = _source60.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2175___mcc_h17 = _source60.dtor_assignments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2176___mcc_h20 = _source60.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2177___mcc_h22 = _source60.dtor_op1;
        RAST._IExpr _2178___mcc_h23 = _source60.dtor_underlying;
        DAST.Format._IUnOpFormat _2179___mcc_h24 = _source60.dtor_format;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2180___mcc_h28 = _source60.dtor_op2;
        RAST._IExpr _2181___mcc_h29 = _source60.dtor_left;
        RAST._IExpr _2182___mcc_h30 = _source60.dtor_right;
        DAST.Format._IBinOpFormat _2183___mcc_h31 = _source60.dtor_format2;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_TypeAscription) {
        RAST._IExpr _2184___mcc_h36 = _source60.dtor_left;
        RAST._IType _2185___mcc_h37 = _source60.dtor_tpe;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2186___mcc_h40 = _source60.dtor_value;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2187___mcc_h42 = _source60.dtor_value;
        bool _2188___mcc_h43 = _source60.dtor_binary;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_DeclareVar) {
        RAST._IDeclareType _2189___mcc_h46 = _source60.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2190___mcc_h47 = _source60.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2191___mcc_h48 = _source60.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2192___mcc_h49 = _source60.dtor_optRhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2193___mcc_h54 = _source60.dtor_name;
        RAST._IExpr _2194___mcc_h55 = _source60.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_IfExpr) {
        RAST._IExpr _2195___mcc_h58 = _source60.dtor_cond;
        RAST._IExpr _2196___mcc_h59 = _source60.dtor_thn;
        RAST._IExpr _2197___mcc_h60 = _source60.dtor_els;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2198___mcc_h64 = _source60.dtor_optCond;
        RAST._IExpr _2199___mcc_h65 = _source60.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_For) {
        Dafny.ISequence<Dafny.Rune> _2200___mcc_h68 = _source60.dtor_name;
        RAST._IExpr _2201___mcc_h69 = _source60.dtor_range;
        RAST._IExpr _2202___mcc_h70 = _source60.dtor_body;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2203___mcc_h74 = _source60.dtor_lbl;
        RAST._IExpr _2204___mcc_h75 = _source60.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2205___mcc_h78 = _source60.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2206___mcc_h80 = _source60.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2207___mcc_h82 = _source60.dtor_optExpr;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_CallType) {
        RAST._IExpr _2208___mcc_h84 = _source60.dtor_obj;
        Dafny.ISequence<RAST._IType> _2209___mcc_h85 = _source60.dtor_typeParameters;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Call) {
        RAST._IExpr _2210___mcc_h88 = _source60.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2211___mcc_h89 = _source60.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source60.is_Select) {
        RAST._IExpr _2212___mcc_h92 = _source60.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2213___mcc_h93 = _source60.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else {
        RAST._IExpr _2214___mcc_h96 = _source60.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2215___mcc_h97 = _source60.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2216_id = _2215___mcc_h97;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_2216_id);
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source61 = (this).Optimize();
      if (_source61.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2217___mcc_h0 = _source61.dtor_content;
        RAST._IExpr _2218_r = (this).Optimize();
        return RAST.__default.AddIndent((_2218_r).dtor_content, ind);
      } else if (_source61.is_ExprFromType) {
        RAST._IType _2219___mcc_h2 = _source61.dtor_tpe;
        RAST._IType _2220_t = _2219___mcc_h2;
        return (_2220_t)._ToString(ind);
      } else if (_source61.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2221___mcc_h4 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2222_name = _2221___mcc_h4;
        return _2222_name;
      } else if (_source61.is_Match) {
        RAST._IExpr _2223___mcc_h6 = _source61.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2224___mcc_h7 = _source61.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _2225_cases = _2224___mcc_h7;
        RAST._IExpr _2226_matchee = _2223___mcc_h6;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_2226_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_2225_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_2227_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_2228_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2227_ind), RAST.__default.IND), (_2228_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2227_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source61.is_StmtExpr) {
        RAST._IExpr _2229___mcc_h10 = _source61.dtor_stmt;
        RAST._IExpr _2230___mcc_h11 = _source61.dtor_rhs;
        RAST._IExpr _2231_rhs = _2230___mcc_h11;
        RAST._IExpr _2232_stmt = _2229___mcc_h10;
        if (((_2232_stmt).is_RawExpr) && (((_2232_stmt).dtor_content).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_2231_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2232_stmt)._ToString(ind), (((_2232_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_2231_rhs)._ToString(ind));
        }
      } else if (_source61.is_Block) {
        RAST._IExpr _2233___mcc_h14 = _source61.dtor_underlying;
        RAST._IExpr _2234_underlying = _2233___mcc_h14;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_2234_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source61.is_StructBuild) {
        RAST._IExpr _2235___mcc_h16 = _source61.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2236___mcc_h17 = _source61.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _2237_assignments = _2236___mcc_h17;
        RAST._IExpr _2238_name = _2235___mcc_h16;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2238_name)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_2237_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_2239_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_2240_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2239_ind), RAST.__default.IND), (_2240_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2239_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_2237_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source61.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2241___mcc_h20 = _source61.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2242_arguments = _2241___mcc_h20;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_2242_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2243_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2244_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2243_ind), RAST.__default.IND), (_2244_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2243_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_2242_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source61.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2245___mcc_h22 = _source61.dtor_op1;
        RAST._IExpr _2246___mcc_h23 = _source61.dtor_underlying;
        DAST.Format._IUnOpFormat _2247___mcc_h24 = _source61.dtor_format;
        DAST.Format._IUnOpFormat _2248_format = _2247___mcc_h24;
        RAST._IExpr _2249_underlying = _2246___mcc_h23;
        Dafny.ISequence<Dafny.Rune> _2250_op = _2245___mcc_h22;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs41 = ((((this).printingInfo).NeedParenthesesFor((_2249_underlying).printingInfo)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _2251_leftP = _let_tmp_rhs41.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2252_rightP = _let_tmp_rhs41.dtor__1;
        Dafny.ISequence<Dafny.Rune> _2253_leftOp = ((((_2250_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) && (!(_2251_leftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2250_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : ((((_2250_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (_2250_op))));
        Dafny.ISequence<Dafny.Rune> _2254_rightOp = (((_2250_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (_2250_op) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2253_leftOp, _2251_leftP), (_2249_underlying)._ToString(ind)), _2252_rightP), _2254_rightOp);
      } else if (_source61.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2255___mcc_h28 = _source61.dtor_op2;
        RAST._IExpr _2256___mcc_h29 = _source61.dtor_left;
        RAST._IExpr _2257___mcc_h30 = _source61.dtor_right;
        DAST.Format._IBinOpFormat _2258___mcc_h31 = _source61.dtor_format2;
        DAST.Format._IBinOpFormat _2259_format = _2258___mcc_h31;
        RAST._IExpr _2260_right = _2257___mcc_h30;
        RAST._IExpr _2261_left = _2256___mcc_h29;
        Dafny.ISequence<Dafny.Rune> _2262_op2 = _2255___mcc_h28;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs42 = (this).LeftParentheses(_2261_left);
        Dafny.ISequence<Dafny.Rune> _2263_leftLeftP = _let_tmp_rhs42.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2264_leftRighP = _let_tmp_rhs42.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs43 = (this).RightParentheses(_2260_right);
        Dafny.ISequence<Dafny.Rune> _2265_rightLeftP = _let_tmp_rhs43.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2266_rightRightP = _let_tmp_rhs43.dtor__1;
        Dafny.ISequence<Dafny.Rune> _2267_opRendered = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _2262_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
        Dafny.ISequence<Dafny.Rune> _2268_indLeft = (((_2263_leftLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        Dafny.ISequence<Dafny.Rune> _2269_indRight = (((_2265_rightLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2263_leftLeftP, (_2261_left)._ToString(_2268_indLeft)), _2264_leftRighP), _2267_opRendered), _2265_rightLeftP), (_2260_right)._ToString(_2269_indRight)), _2266_rightRightP);
      } else if (_source61.is_TypeAscription) {
        RAST._IExpr _2270___mcc_h36 = _source61.dtor_left;
        RAST._IType _2271___mcc_h37 = _source61.dtor_tpe;
        RAST._IType _2272_tpe = _2271___mcc_h37;
        RAST._IExpr _2273_left = _2270___mcc_h36;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs44 = (this).LeftParentheses(_2273_left);
        Dafny.ISequence<Dafny.Rune> _2274_leftLeftP = _let_tmp_rhs44.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2275_leftRightP = _let_tmp_rhs44.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2274_leftLeftP, (_2273_left)._ToString(RAST.__default.IND)), _2275_leftRightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2272_tpe)._ToString(RAST.__default.IND));
      } else if (_source61.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2276___mcc_h40 = _source61.dtor_value;
        Dafny.ISequence<Dafny.Rune> _2277_number = _2276___mcc_h40;
        return _2277_number;
      } else if (_source61.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2278___mcc_h42 = _source61.dtor_value;
        bool _2279___mcc_h43 = _source61.dtor_binary;
        bool _2280_binary = _2279___mcc_h43;
        Dafny.ISequence<Dafny.Rune> _2281_characters = _2278___mcc_h42;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((_2280_binary) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("b")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), _2281_characters), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source61.is_DeclareVar) {
        RAST._IDeclareType _2282___mcc_h46 = _source61.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2283___mcc_h47 = _source61.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2284___mcc_h48 = _source61.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2285___mcc_h49 = _source61.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _2286_optExpr = _2285___mcc_h49;
        Std.Wrappers._IOption<RAST._IType> _2287_optType = _2284___mcc_h48;
        Dafny.ISequence<Dafny.Rune> _2288_name = _2283___mcc_h47;
        RAST._IDeclareType _2289_declareType = _2282___mcc_h46;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_2289_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2288_name), (((_2287_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_2287_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_2286_optExpr).is_Some) ? (Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(((_2286_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)), _pat_let6_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_pat_let6_0, _2290_optExprString => (((_2290_optExprString).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("= /*issue with empty RHS*/"), ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_source62) => {
          if (_source62.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _2291___mcc_h100 = _source62.dtor_content;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty Raw expr");
          } else if (_source62.is_ExprFromType) {
            RAST._IType _2292___mcc_h102 = _source62.dtor_tpe;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _2293___mcc_h104 = _source62.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Match) {
            RAST._IExpr _2294___mcc_h106 = _source62.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _2295___mcc_h107 = _source62.dtor_cases;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_StmtExpr) {
            RAST._IExpr _2296___mcc_h110 = _source62.dtor_stmt;
            RAST._IExpr _2297___mcc_h111 = _source62.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Block) {
            RAST._IExpr _2298___mcc_h114 = _source62.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_StructBuild) {
            RAST._IExpr _2299___mcc_h116 = _source62.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _2300___mcc_h117 = _source62.dtor_assignments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _2301___mcc_h120 = _source62.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _2302___mcc_h122 = _source62.dtor_op1;
            RAST._IExpr _2303___mcc_h123 = _source62.dtor_underlying;
            DAST.Format._IUnOpFormat _2304___mcc_h124 = _source62.dtor_format;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _2305___mcc_h128 = _source62.dtor_op2;
            RAST._IExpr _2306___mcc_h129 = _source62.dtor_left;
            RAST._IExpr _2307___mcc_h130 = _source62.dtor_right;
            DAST.Format._IBinOpFormat _2308___mcc_h131 = _source62.dtor_format2;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_TypeAscription) {
            RAST._IExpr _2309___mcc_h136 = _source62.dtor_left;
            RAST._IType _2310___mcc_h137 = _source62.dtor_tpe;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _2311___mcc_h140 = _source62.dtor_value;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty int literal");
          } else if (_source62.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _2312___mcc_h142 = _source62.dtor_value;
            bool _2313___mcc_h143 = _source62.dtor_binary;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty string literal");
          } else if (_source62.is_DeclareVar) {
            RAST._IDeclareType _2314___mcc_h146 = _source62.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _2315___mcc_h147 = _source62.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _2316___mcc_h148 = _source62.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _2317___mcc_h149 = _source62.dtor_optRhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _2318___mcc_h154 = _source62.dtor_name;
            RAST._IExpr _2319___mcc_h155 = _source62.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_IfExpr) {
            RAST._IExpr _2320___mcc_h158 = _source62.dtor_cond;
            RAST._IExpr _2321___mcc_h159 = _source62.dtor_thn;
            RAST._IExpr _2322___mcc_h160 = _source62.dtor_els;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _2323___mcc_h164 = _source62.dtor_optCond;
            RAST._IExpr _2324___mcc_h165 = _source62.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_For) {
            Dafny.ISequence<Dafny.Rune> _2325___mcc_h168 = _source62.dtor_name;
            RAST._IExpr _2326___mcc_h169 = _source62.dtor_range;
            RAST._IExpr _2327___mcc_h170 = _source62.dtor_body;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _2328___mcc_h174 = _source62.dtor_lbl;
            RAST._IExpr _2329___mcc_h175 = _source62.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2330___mcc_h178 = _source62.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2331___mcc_h180 = _source62.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _2332___mcc_h182 = _source62.dtor_optExpr;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_CallType) {
            RAST._IExpr _2333___mcc_h184 = _source62.dtor_obj;
            Dafny.ISequence<RAST._IType> _2334___mcc_h185 = _source62.dtor_typeParameters;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Call) {
            RAST._IExpr _2335___mcc_h188 = _source62.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _2336___mcc_h189 = _source62.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source62.is_Select) {
            RAST._IExpr _2337___mcc_h192 = _source62.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2338___mcc_h193 = _source62.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else {
            RAST._IExpr _2339___mcc_h196 = _source62.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2340___mcc_h197 = _source62.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          }
        }))((_2286_optExpr).dtor_value))) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), _2290_optExprString)))))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source61.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2341___mcc_h54 = _source61.dtor_name;
        RAST._IExpr _2342___mcc_h55 = _source61.dtor_rhs;
        RAST._IExpr _2343_expr = _2342___mcc_h55;
        Dafny.ISequence<Dafny.Rune> _2344_name = _2341___mcc_h54;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2344_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_2343_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source61.is_IfExpr) {
        RAST._IExpr _2345___mcc_h58 = _source61.dtor_cond;
        RAST._IExpr _2346___mcc_h59 = _source61.dtor_thn;
        RAST._IExpr _2347___mcc_h60 = _source61.dtor_els;
        RAST._IExpr _2348_els = _2347___mcc_h60;
        RAST._IExpr _2349_thn = _2346___mcc_h59;
        RAST._IExpr _2350_cond = _2345___mcc_h58;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_2350_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2349_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")), ((object.Equals(_2348_els, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" else {\n"), ind), RAST.__default.IND), (_2348_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")))));
      } else if (_source61.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2351___mcc_h64 = _source61.dtor_optCond;
        RAST._IExpr _2352___mcc_h65 = _source61.dtor_underlying;
        RAST._IExpr _2353_underlying = _2352___mcc_h65;
        Std.Wrappers._IOption<RAST._IExpr> _2354_optCond = _2351___mcc_h64;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source63) => {
          if (_source63.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _2355___mcc_h200 = _source63.dtor_value;
            RAST._IExpr _2356_c = _2355___mcc_h200;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_2356_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_2354_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2353_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source61.is_For) {
        Dafny.ISequence<Dafny.Rune> _2357___mcc_h68 = _source61.dtor_name;
        RAST._IExpr _2358___mcc_h69 = _source61.dtor_range;
        RAST._IExpr _2359___mcc_h70 = _source61.dtor_body;
        RAST._IExpr _2360_body = _2359___mcc_h70;
        RAST._IExpr _2361_range = _2358___mcc_h69;
        Dafny.ISequence<Dafny.Rune> _2362_name = _2357___mcc_h68;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _2362_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_2361_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2360_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source61.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2363___mcc_h74 = _source61.dtor_lbl;
        RAST._IExpr _2364___mcc_h75 = _source61.dtor_underlying;
        RAST._IExpr _2365_underlying = _2364___mcc_h75;
        Dafny.ISequence<Dafny.Rune> _2366_name = _2363___mcc_h74;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _2366_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_2365_underlying)._ToString(ind));
      } else if (_source61.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2367___mcc_h78 = _source61.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2368_optLbl = _2367___mcc_h78;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source64 = _2368_optLbl;
        if (_source64.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2369___mcc_h201 = _source64.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2370_lbl = _2369___mcc_h201;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _2370_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source61.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2371___mcc_h80 = _source61.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2372_optLbl = _2371___mcc_h80;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source65 = _2372_optLbl;
        if (_source65.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2373___mcc_h202 = _source65.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2374_lbl = _2373___mcc_h202;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _2374_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source61.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2375___mcc_h82 = _source61.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _2376_optExpr = _2375___mcc_h82;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_2376_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_2376_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source61.is_CallType) {
        RAST._IExpr _2377___mcc_h84 = _source61.dtor_obj;
        Dafny.ISequence<RAST._IType> _2378___mcc_h85 = _source61.dtor_typeParameters;
        Dafny.ISequence<RAST._IType> _2379_tpes = _2378___mcc_h85;
        RAST._IExpr _2380_expr = _2377___mcc_h84;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs45 = (this).LeftParentheses(_2380_expr);
        Dafny.ISequence<Dafny.Rune> _2381_leftP = _let_tmp_rhs45.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2382_rightP = _let_tmp_rhs45.dtor__1;
        if ((_2379_tpes).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return (_2380_expr)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2381_leftP, (_2380_expr)._ToString(ind)), _2382_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<")), RAST.__default.SeqToString<RAST._IType>(_2379_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_2383_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_2384_tpe) => {
            return (_2384_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2383_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source61.is_Call) {
        RAST._IExpr _2385___mcc_h88 = _source61.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2386___mcc_h89 = _source61.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2387_args = _2386___mcc_h89;
        RAST._IExpr _2388_expr = _2385___mcc_h88;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs46 = (this).LeftParentheses(_2388_expr);
        Dafny.ISequence<Dafny.Rune> _2389_leftP = _let_tmp_rhs46.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2390_rightP = _let_tmp_rhs46.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs47 = ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>)((_source66) => {
          if (_source66.is_None) {
            return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else {
            Dafny.ISequence<Dafny.Rune> _2391___mcc_h203 = _source66.dtor_value;
            if (object.Equals(_2391___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2391___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2391___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else if (object.Equals(_2391___mcc_h203, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
        }))((_2388_expr).RightMostIdentifier());
        Dafny.ISequence<Dafny.Rune> _2392_leftCallP = _let_tmp_rhs47.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2393_rightCallP = _let_tmp_rhs47.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2389_leftP, (_2388_expr)._ToString(ind)), _2390_rightP), _2392_leftCallP), RAST.__default.SeqToString<RAST._IExpr>(_2387_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2394_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2395_arg) => {
          return (_2395_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2394_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), _2393_rightCallP);
      } else if (_source61.is_Select) {
        RAST._IExpr _2396___mcc_h92 = _source61.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2397___mcc_h93 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2398_name = _2397___mcc_h93;
        RAST._IExpr _2399_expression = _2396___mcc_h92;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs48 = (this).LeftParentheses(_2399_expression);
        Dafny.ISequence<Dafny.Rune> _2400_leftP = _let_tmp_rhs48.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2401_rightP = _let_tmp_rhs48.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2400_leftP, (_2399_expression)._ToString(ind)), _2401_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2398_name);
      } else {
        RAST._IExpr _2402___mcc_h96 = _source61.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2403___mcc_h97 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2404_name = _2403___mcc_h97;
        RAST._IExpr _2405_expression = _2402___mcc_h96;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs49 = (this).LeftParentheses(_2405_expression);
        Dafny.ISequence<Dafny.Rune> _2406_leftP = _let_tmp_rhs49.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2407_rightP = _let_tmp_rhs49.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2406_leftP, (_2405_expression)._ToString(ind)), _2407_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2404_name);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
    public RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_Select(this, name);
    }
    public RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_MemberSelect(this, name);
    }
    public RAST._IExpr ApplyType(Dafny.ISequence<RAST._IType> typeParameters) {
      return RAST.Expr.create_CallType(this, typeParameters);
    }
    public RAST._IExpr ApplyType1(RAST._IType typeParameter) {
      return RAST.Expr.create_CallType(this, Dafny.Sequence<RAST._IType>.FromElements(typeParameter));
    }
    public RAST._IExpr Apply(Dafny.ISequence<RAST._IExpr> arguments) {
      return RAST.Expr.create_Call(this, arguments);
    }
    public RAST._IExpr Apply1(RAST._IExpr argument) {
      return RAST.Expr.create_Call(this, Dafny.Sequence<RAST._IExpr>.FromElements(argument));
    }
    public RAST._IPrintingInfo printingInfo { get {
      RAST._IExpr _source67 = this;
      if (_source67.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2408___mcc_h0 = _source67.dtor_content;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_ExprFromType) {
        RAST._IType _2409___mcc_h2 = _source67.dtor_tpe;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source67.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2410___mcc_h4 = _source67.dtor_name;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source67.is_Match) {
        RAST._IExpr _2411___mcc_h6 = _source67.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2412___mcc_h7 = _source67.dtor_cases;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_StmtExpr) {
        RAST._IExpr _2413___mcc_h10 = _source67.dtor_stmt;
        RAST._IExpr _2414___mcc_h11 = _source67.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_Block) {
        RAST._IExpr _2415___mcc_h14 = _source67.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_StructBuild) {
        RAST._IExpr _2416___mcc_h16 = _source67.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2417___mcc_h17 = _source67.dtor_assignments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2418___mcc_h20 = _source67.dtor_arguments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2419___mcc_h22 = _source67.dtor_op1;
        RAST._IExpr _2420___mcc_h23 = _source67.dtor_underlying;
        DAST.Format._IUnOpFormat _2421___mcc_h24 = _source67.dtor_format;
        DAST.Format._IUnOpFormat _2422_format = _2421___mcc_h24;
        RAST._IExpr _2423_underlying = _2420___mcc_h23;
        Dafny.ISequence<Dafny.Rune> _2424_op = _2419___mcc_h22;
        if (object.Equals(_2424_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) {
          return RAST.PrintingInfo.create_SuffixPrecedence(new BigInteger(5));
        } else if (object.Equals(_2424_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2424_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2424_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2424_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2424_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else {
          return RAST.PrintingInfo.create_UnknownPrecedence();
        }
      } else if (_source67.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2425___mcc_h28 = _source67.dtor_op2;
        RAST._IExpr _2426___mcc_h29 = _source67.dtor_left;
        RAST._IExpr _2427___mcc_h30 = _source67.dtor_right;
        DAST.Format._IBinOpFormat _2428___mcc_h31 = _source67.dtor_format2;
        DAST.Format._IBinOpFormat _2429_format = _2428___mcc_h31;
        RAST._IExpr _2430_right = _2427___mcc_h30;
        RAST._IExpr _2431_left = _2426___mcc_h29;
        Dafny.ISequence<Dafny.Rune> _2432_op2 = _2425___mcc_h28;
        if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(50), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(60), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(70), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(90), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(100), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".."))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2432_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(BigInteger.Zero, RAST.Associativity.create_RequiresParentheses());
        }
      } else if (_source67.is_TypeAscription) {
        RAST._IExpr _2433___mcc_h36 = _source67.dtor_left;
        RAST._IType _2434___mcc_h37 = _source67.dtor_tpe;
        RAST._IType _2435_tpe = _2434___mcc_h37;
        RAST._IExpr _2436_left = _2433___mcc_h36;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(10), RAST.Associativity.create_LeftToRight());
      } else if (_source67.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2437___mcc_h40 = _source67.dtor_value;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source67.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2438___mcc_h42 = _source67.dtor_value;
        bool _2439___mcc_h43 = _source67.dtor_binary;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source67.is_DeclareVar) {
        RAST._IDeclareType _2440___mcc_h46 = _source67.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2441___mcc_h47 = _source67.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2442___mcc_h48 = _source67.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2443___mcc_h49 = _source67.dtor_optRhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2444___mcc_h54 = _source67.dtor_name;
        RAST._IExpr _2445___mcc_h55 = _source67.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_IfExpr) {
        RAST._IExpr _2446___mcc_h58 = _source67.dtor_cond;
        RAST._IExpr _2447___mcc_h59 = _source67.dtor_thn;
        RAST._IExpr _2448___mcc_h60 = _source67.dtor_els;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2449___mcc_h64 = _source67.dtor_optCond;
        RAST._IExpr _2450___mcc_h65 = _source67.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_For) {
        Dafny.ISequence<Dafny.Rune> _2451___mcc_h68 = _source67.dtor_name;
        RAST._IExpr _2452___mcc_h69 = _source67.dtor_range;
        RAST._IExpr _2453___mcc_h70 = _source67.dtor_body;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2454___mcc_h74 = _source67.dtor_lbl;
        RAST._IExpr _2455___mcc_h75 = _source67.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2456___mcc_h78 = _source67.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2457___mcc_h80 = _source67.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2458___mcc_h82 = _source67.dtor_optExpr;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source67.is_CallType) {
        RAST._IExpr _2459___mcc_h84 = _source67.dtor_obj;
        Dafny.ISequence<RAST._IType> _2460___mcc_h85 = _source67.dtor_typeParameters;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source67.is_Call) {
        RAST._IExpr _2461___mcc_h88 = _source67.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2462___mcc_h89 = _source67.dtor_arguments;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source67.is_Select) {
        RAST._IExpr _2463___mcc_h92 = _source67.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2464___mcc_h93 = _source67.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2465_name = _2464___mcc_h93;
        RAST._IExpr _2466_underlying = _2463___mcc_h92;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else {
        RAST._IExpr _2467___mcc_h96 = _source67.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2468___mcc_h97 = _source67.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2469_name = _2468___mcc_h97;
        RAST._IExpr _2470_underlying = _2467___mcc_h96;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      }
    } }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_ExprFromType : Expr {
    public readonly RAST._IType _tpe;
    public Expr_ExprFromType(RAST._IType tpe) : base() {
      this._tpe = tpe;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_ExprFromType(_tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_ExprFromType;
      return oth != null && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.ExprFromType";
      s += "(";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
  }
  public class Expr_Identifier : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Identifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Identifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Identifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Identifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly RAST._IExpr _underlying;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(RAST._IExpr underlying, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._underlying = underlying;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_underlying, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._underlying, oth._underlying) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_TypeAscription : Expr {
    public readonly RAST._IExpr _left;
    public readonly RAST._IType _tpe;
    public Expr_TypeAscription(RAST._IExpr left, RAST._IType tpe) : base() {
      this._left = left;
      this._tpe = tpe;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_TypeAscription(_left, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_TypeAscription;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.TypeAscription";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralString : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public readonly bool _binary;
    public Expr_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) : base() {
      this._value = @value;
      this._binary = binary;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralString(_value, _binary);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralString;
      return oth != null && object.Equals(this._value, oth._value) && this._binary == oth._binary;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._binary));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralString";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._binary);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_CallType : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public Expr_CallType(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_CallType(_obj, _typeParameters);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_CallType;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.CallType";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Select : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Select(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Select;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_MemberSelect : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_MemberSelect(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_MemberSelect;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.MemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_2471_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_2472_formal) => {
        return (_2472_formal)._ToString(_2471_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source68) => {
        if (_source68.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _2473___mcc_h0 = _source68.dtor_value;
          RAST._IType _2474_t = _2473___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_2474_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source69) => {
        if (_source69.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _2475___mcc_h2 = _source69.dtor_value;
          RAST._IExpr _2476_body = _2475___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_2476_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2477___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2477___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _2477___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2477___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _2477___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2477___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2478___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2478___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _2478___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2478___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _2478___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2478___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i))) && (!(DCOMP.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _2479_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _2479_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static bool UnicodeChars { get {
      return true;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMP.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static RAST._IType DafnyCharUnderlying { get {
      if (DCOMP.__default.UnicodeChars) {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
      } else {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"));
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> dtor_ownerships { get; }
    _IEnvironment DowncastClone();
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMP._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMP._IOwnership ownership);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _ownerships;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      this._names = names;
      this._ownerships = ownerships;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_names, _ownerships);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Environment;
      return oth != null && object.Equals(this._names, oth._names) && object.Equals(this._ownerships, oth._ownerships);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ownerships));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ownerships);
      s += ")";
      return s;
    }
    private static readonly DCOMP._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Empty);
    public static DCOMP._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMP._IEnvironment>(DCOMP.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMP._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      return new Environment(names, ownerships);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      return create(names, ownerships);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> dtor_ownerships {
      get {
        return this._ownerships;
      }
    }
    public static DCOMP._IEnvironment Empty() {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements());
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Select((this).dtor_ownerships,name), DCOMP.Ownership.create_OwnershipBorrowed()));
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Select((this).dtor_ownerships,name), DCOMP.Ownership.create_OwnershipBorrowedMut()));
    }
    public DCOMP._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMP._IOwnership ownership)
    {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update((this).dtor_ownerships, name, ownership));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _2480_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _2480_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _2480_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _2481_i;
      _2481_i = BigInteger.Zero;
      while ((_2481_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _2482_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source70 = (body).Select(_2481_i);
        if (_source70.is_Module) {
          DAST._IModule _2483___mcc_h0 = _source70.dtor_Module_a0;
          DAST._IModule _2484_m = _2483___mcc_h0;
          RAST._IMod _2485_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_2484_m, containingPath);
          _2485_mm = _out16;
          _2482_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_2485_mm));
        } else if (_source70.is_Class) {
          DAST._IClass _2486___mcc_h1 = _source70.dtor_Class_a0;
          DAST._IClass _2487_c = _2486___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_2487_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_2487_c).dtor_name)));
          _2482_generated = _out17;
        } else if (_source70.is_Trait) {
          DAST._ITrait _2488___mcc_h2 = _source70.dtor_Trait_a0;
          DAST._ITrait _2489_t = _2488___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _2490_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_2489_t, containingPath);
          _2490_tt = _out18;
          _2482_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_2490_tt));
        } else if (_source70.is_Newtype) {
          DAST._INewtype _2491___mcc_h3 = _source70.dtor_Newtype_a0;
          DAST._INewtype _2492_n = _2491___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_2492_n);
          _2482_generated = _out19;
        } else {
          DAST._IDatatype _2493___mcc_h4 = _source70.dtor_Datatype_a0;
          DAST._IDatatype _2494_d = _2493___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_2494_d);
          _2482_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _2482_generated);
        _2481_i = (_2481_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _2495_tpI;
      _2495_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_2495_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _2496_tp;
          _2496_tp = (@params).Select(_2495_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2496_tp));
          RAST._IType _2497_genTp;
          RAST._IType _out21;
          _out21 = DCOMP.COMP.GenType(_2496_tp, false, false);
          _2497_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2497_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _2495_tpI = (_2495_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _2498_baseConstraints;
      _2498_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _2498_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2499_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2500_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2501_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2502_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _2499_typeParamsSet = _out22;
      _2500_sTypeParams = _out23;
      _2501_sConstrainedTypeParams = _out24;
      _2502_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _2503_constrainedTypeParams;
      _2503_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2501_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _2504_fields;
      _2504_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _2505_fieldInits;
      _2505_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _2506_fieldI;
      _2506_fieldI = BigInteger.Zero;
      while ((_2506_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _2507_field;
        _2507_field = ((c).dtor_fields).Select(_2506_fieldI);
        RAST._IType _2508_fieldType;
        RAST._IType _out26;
        _out26 = DCOMP.COMP.GenType(((_2507_field).dtor_formal).dtor_typ, false, false);
        _2508_fieldType = _out26;
        _2504_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2504_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_2507_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_2508_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source71 = (_2507_field).dtor_defaultValue;
        if (_source71.is_None) {
          {
            RAST._IExpr _2509_RefCellNew;
            _2509_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            RAST._IExpr _2510_default;
            _2510_default = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"));
            _2505_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2505_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2507_field).dtor_formal).dtor_name), (_2509_RefCellNew).Apply1((_2510_default).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())))));
          }
        } else {
          DAST._IExpression _2511___mcc_h0 = _source71.dtor_value;
          DAST._IExpression _2512_e = _2511___mcc_h0;
          {
            RAST._IExpr _2513_expr;
            DCOMP._IOwnership _2514___v37;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2515___v38;
            RAST._IExpr _out27;
            DCOMP._IOwnership _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_2512_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out27, out _out28, out _out29);
            _2513_expr = _out27;
            _2514___v37 = _out28;
            _2515___v38 = _out29;
            RAST._IExpr _2516_RefCellNew;
            _2516_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            _2505_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2505_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2507_field).dtor_formal).dtor_name), (_2516_RefCellNew).Apply1(_2513_expr))));
          }
        }
        _2506_fieldI = (_2506_fieldI) + (BigInteger.One);
      }
      BigInteger _2517_typeParamI;
      _2517_typeParamI = BigInteger.Zero;
      while ((_2517_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _2518_tpeGen;
        RAST._IType _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2517_typeParamI), false, false);
        _2518_tpeGen = _out30;
        _2504_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2504_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2517_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2518_tpeGen)))));
        _2505_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2505_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2517_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _2517_typeParamI = (_2517_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2519_datatypeName;
      _2519_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      RAST._IStruct _2520_struct;
      _2520_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _2519_datatypeName, _2500_sTypeParams, RAST.Formals.create_NamedFormals(_2504_fields));
      Dafny.ISequence<RAST._IType> _2521_typeParamsAsTypes;
      _2521_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2522_typeParam) => {
        return RAST.__default.RawType((_2522_typeParam).dtor_content);
      })), _2500_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_2520_struct));
      Dafny.ISequence<RAST._IImplMember> _2523_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2524_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _2499_typeParamsSet, out _out31, out _out32);
      _2523_implBodyRaw = _out31;
      _2524_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _2525_implBody;
      _2525_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(RAST.Expr.create_Identifier(_2519_datatypeName), _2505_fieldInits))))), _2523_implBodyRaw);
      RAST._IImpl _2526_i;
      _2526_i = RAST.Impl.create_Impl(_2501_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2519_datatypeName), _2521_typeParamsAsTypes), _2502_whereConstraints, _2525_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2526_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _2527_i;
        _2527_i = BigInteger.Zero;
        while ((_2527_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _2528_superClass;
          _2528_superClass = ((c).dtor_superClasses).Select(_2527_i);
          DAST._IType _source72 = _2528_superClass;
          if (_source72.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2529___mcc_h1 = _source72.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2530___mcc_h2 = _source72.dtor_typeArgs;
            DAST._IResolvedType _2531___mcc_h3 = _source72.dtor_resolved;
            DAST._IResolvedType _source73 = _2531___mcc_h3;
            if (_source73.is_Datatype) {
              DAST._IDatatypeType _2532___mcc_h7 = _source73.dtor_datatypeType;
            } else if (_source73.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2533___mcc_h9 = _source73.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _2534___mcc_h10 = _source73.dtor_attributes;
              Dafny.ISequence<DAST._IType> _2535_typeArgs = _2530___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2536_traitPath = _2529___mcc_h1;
              {
                RAST._IType _2537_pathStr;
                RAST._IType _out33;
                _out33 = DCOMP.COMP.GenPath(_2536_traitPath);
                _2537_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _2538_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_2535_typeArgs, false, false);
                _2538_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _2539_body;
                _2539_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_2524_traitBodies).Contains(_2536_traitPath)) {
                  _2539_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_2524_traitBodies,_2536_traitPath);
                }
                RAST._IType _2540_genSelfPath;
                RAST._IType _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _2540_genSelfPath = _out35;
                RAST._IModDecl _2541_x;
                _2541_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2501_sConstrainedTypeParams, RAST.Type.create_TypeApp(_2537_pathStr, _2538_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_2540_genSelfPath, _2521_typeParamsAsTypes)), _2502_whereConstraints, _2539_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_2541_x));
              }
            } else {
              DAST._IType _2542___mcc_h13 = _source73.dtor_baseType;
              DAST._INewtypeRange _2543___mcc_h14 = _source73.dtor_range;
              bool _2544___mcc_h15 = _source73.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _2545___mcc_h16 = _source73.dtor_attributes;
            }
          } else if (_source72.is_Nullable) {
            DAST._IType _2546___mcc_h21 = _source72.dtor_Nullable_a0;
          } else if (_source72.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2547___mcc_h23 = _source72.dtor_Tuple_a0;
          } else if (_source72.is_Array) {
            DAST._IType _2548___mcc_h25 = _source72.dtor_element;
            BigInteger _2549___mcc_h26 = _source72.dtor_dims;
          } else if (_source72.is_Seq) {
            DAST._IType _2550___mcc_h29 = _source72.dtor_element;
          } else if (_source72.is_Set) {
            DAST._IType _2551___mcc_h31 = _source72.dtor_element;
          } else if (_source72.is_Multiset) {
            DAST._IType _2552___mcc_h33 = _source72.dtor_element;
          } else if (_source72.is_Map) {
            DAST._IType _2553___mcc_h35 = _source72.dtor_key;
            DAST._IType _2554___mcc_h36 = _source72.dtor_value;
          } else if (_source72.is_SetBuilder) {
            DAST._IType _2555___mcc_h39 = _source72.dtor_element;
          } else if (_source72.is_MapBuilder) {
            DAST._IType _2556___mcc_h41 = _source72.dtor_key;
            DAST._IType _2557___mcc_h42 = _source72.dtor_value;
          } else if (_source72.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2558___mcc_h45 = _source72.dtor_args;
            DAST._IType _2559___mcc_h46 = _source72.dtor_result;
          } else if (_source72.is_Primitive) {
            DAST._IPrimitive _2560___mcc_h49 = _source72.dtor_Primitive_a0;
          } else if (_source72.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2561___mcc_h51 = _source72.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _2562___mcc_h53 = _source72.dtor_TypeArg_a0;
          }
          _2527_i = (_2527_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _2563_d;
      _2563_d = RAST.Impl.create_ImplFor(_2501_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2519_datatypeName), _2521_typeParamsAsTypes), _2502_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(_2519_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _2564_defaultImpl;
      _2564_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2563_d));
      RAST._IImpl _2565_p;
      _2565_p = RAST.Impl.create_ImplFor(_2501_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2519_datatypeName), _2521_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _2566_printImpl;
      _2566_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2565_p));
      RAST._IImpl _2567_pp;
      _2567_pp = RAST.Impl.create_ImplFor(_2500_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2519_datatypeName), _2521_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.SelfBorrowed)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _2568_ptrPartialEqImpl;
      _2568_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2567_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _2564_defaultImpl), _2566_printImpl), _2568_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _2569_typeParamsSet;
      _2569_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _2570_typeParams;
      _2570_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2571_tpI;
      _2571_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_2571_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _2572_tp;
          _2572_tp = ((t).dtor_typeParams).Select(_2571_tpI);
          _2569_typeParamsSet = Dafny.Set<DAST._IType>.Union(_2569_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2572_tp));
          RAST._IType _2573_genTp;
          RAST._IType _out36;
          _out36 = DCOMP.COMP.GenType(_2572_tp, false, false);
          _2573_genTp = _out36;
          _2570_typeParams = Dafny.Sequence<RAST._IType>.Concat(_2570_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2573_genTp));
          _2571_tpI = (_2571_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2574_fullPath;
      _2574_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _2575_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2576___v42;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_2574_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_2574_fullPath, (t).dtor_attributes)), _2569_typeParamsSet, out _out37, out _out38);
      _2575_implBody = _out37;
      _2576___v42 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((t).dtor_name)), _2570_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2575_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2577_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2578_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2579_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2580_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _2577_typeParamsSet = _out39;
      _2578_sTypeParams = _out40;
      _2579_sConstrainedTypeParams = _out41;
      _2580_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _2581_typeParamsAsTypes;
      _2581_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2582_t) => {
        return RAST.__default.RawType((_2582_t).dtor_content);
      })), _2578_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2583_constrainedTypeParams;
      _2583_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2579_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _2584_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source74 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source74.is_None) {
        RAST._IType _out43;
        _out43 = DCOMP.COMP.GenType((c).dtor_base, false, false);
        _2584_underlyingType = _out43;
      } else {
        RAST._IType _2585___mcc_h0 = _source74.dtor_value;
        RAST._IType _2586_v = _2585___mcc_h0;
        _2584_underlyingType = _2586_v;
      }
      Dafny.ISequence<Dafny.Rune> _2587_datatypeName;
      _2587_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), _2587_datatypeName, _2578_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _2584_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _2588_fnBody;
      _2588_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source75 = (c).dtor_witnessExpr;
      if (_source75.is_None) {
        {
          _2588_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2588_fnBody, _2587_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _2589___mcc_h1 = _source75.dtor_value;
        DAST._IExpression _2590_e = _2589___mcc_h1;
        {
          RAST._IExpr _2591_eStr;
          DCOMP._IOwnership _2592___v43;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2593___v44;
          RAST._IExpr _out44;
          DCOMP._IOwnership _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          DCOMP.COMP.GenExpr(_2590_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out44, out _out45, out _out46);
          _2591_eStr = _out44;
          _2592___v43 = _out45;
          _2593___v44 = _out46;
          _2588_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2588_fnBody, _2587_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2591_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _2594_body;
      _2594_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_2588_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2579_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2587_datatypeName), _2581_typeParamsAsTypes), _2580_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_2594_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2579_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2587_datatypeName), _2581_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2579_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2587_datatypeName), _2581_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_2584_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some((RAST.__default.SelfBorrowed).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2595_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2596_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2597_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2598_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _2595_typeParamsSet = _out47;
      _2596_sTypeParams = _out48;
      _2597_sConstrainedTypeParams = _out49;
      _2598_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _2599_typeParamsAsTypes;
      _2599_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2600_t) => {
        return RAST.__default.RawType((_2600_t).dtor_content);
      })), _2596_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2601_constrainedTypeParams;
      _2601_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2597_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _2602_datatypeName;
      _2602_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      Dafny.ISequence<RAST._IEnumCase> _2603_ctors;
      _2603_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _2604_i;
      _2604_i = BigInteger.Zero;
      while ((_2604_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2605_ctor;
        _2605_ctor = ((c).dtor_ctors).Select(_2604_i);
        Dafny.ISequence<RAST._IFormal> _2606_ctorArgs;
        _2606_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _2607_j;
        _2607_j = BigInteger.Zero;
        while ((_2607_j) < (new BigInteger(((_2605_ctor).dtor_args).Count))) {
          DAST._IFormal _2608_formal;
          _2608_formal = ((_2605_ctor).dtor_args).Select(_2607_j);
          RAST._IType _2609_formalType;
          RAST._IType _out51;
          _out51 = DCOMP.COMP.GenType((_2608_formal).dtor_typ, false, false);
          _2609_formalType = _out51;
          if ((c).dtor_isCo) {
            _2606_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2606_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2608_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_2609_formalType)))));
          } else {
            _2606_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2606_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2608_formal).dtor_name), _2609_formalType)));
          }
          _2607_j = (_2607_j) + (BigInteger.One);
        }
        _2603_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2603_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_2605_ctor).dtor_name), RAST.Formals.create_NamedFormals(_2606_ctorArgs))));
        _2604_i = (_2604_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2610_selfPath;
      _2610_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _2611_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2612_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out53;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_2610_selfPath, (c).dtor_attributes))), _2595_typeParamsSet, out _out52, out _out53);
      _2611_implBodyRaw = _out52;
      _2612_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _2613_implBody;
      _2613_implBody = _2611_implBodyRaw;
      _2604_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2614_emittedFields;
      _2614_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_2604_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2615_ctor;
        _2615_ctor = ((c).dtor_ctors).Select(_2604_i);
        BigInteger _2616_j;
        _2616_j = BigInteger.Zero;
        while ((_2616_j) < (new BigInteger(((_2615_ctor).dtor_args).Count))) {
          DAST._IFormal _2617_formal;
          _2617_formal = ((_2615_ctor).dtor_args).Select(_2616_j);
          if (!((_2614_emittedFields).Contains((_2617_formal).dtor_name))) {
            _2614_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2614_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2617_formal).dtor_name));
            RAST._IType _2618_formalType;
            RAST._IType _out54;
            _out54 = DCOMP.COMP.GenType((_2617_formal).dtor_typ, false, false);
            _2618_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _2619_cases;
            _2619_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _2620_k;
            _2620_k = BigInteger.Zero;
            while ((_2620_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _2621_ctor2;
              _2621_ctor2 = ((c).dtor_ctors).Select(_2620_k);
              Dafny.ISequence<Dafny.Rune> _2622_pattern;
              _2622_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2602_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2621_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _2623_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _2624_l;
              _2624_l = BigInteger.Zero;
              bool _2625_hasMatchingField;
              _2625_hasMatchingField = false;
              while ((_2624_l) < (new BigInteger(((_2621_ctor2).dtor_args).Count))) {
                DAST._IFormal _2626_formal2;
                _2626_formal2 = ((_2621_ctor2).dtor_args).Select(_2624_l);
                if (((_2617_formal).dtor_name).Equals((_2626_formal2).dtor_name)) {
                  _2625_hasMatchingField = true;
                }
                _2622_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2622_pattern, DCOMP.__default.escapeIdent((_2626_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _2624_l = (_2624_l) + (BigInteger.One);
              }
              _2622_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_2622_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_2625_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _2623_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_2617_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _2623_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2617_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _2623_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _2627_ctorMatch;
              _2627_ctorMatch = RAST.MatchCase.create(_2622_pattern, RAST.Expr.create_RawExpr(_2623_rhs));
              _2619_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2619_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_2627_ctorMatch));
              _2620_k = (_2620_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _2619_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2619_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2602_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _2628_methodBody;
            _2628_methodBody = RAST.Expr.create_Match(RAST.__default.self, _2619_cases);
            _2613_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_2613_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeIdent((_2617_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_2618_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2628_methodBody)))));
          }
          _2616_j = (_2616_j) + (BigInteger.One);
        }
        _2604_i = (_2604_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _2629_typeI;
        _2629_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _2630_types;
        _2630_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_2629_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _2631_genTp;
          RAST._IType _out55;
          _out55 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2629_typeI), false, false);
          _2631_genTp = _out55;
          _2630_types = Dafny.Sequence<RAST._IType>.Concat(_2630_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_2631_genTp))));
          _2629_typeI = (_2629_typeI) + (BigInteger.One);
        }
        _2603_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2603_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_2632_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _2632_tpe);
})), _2630_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _2633_enumBody;
      _2633_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq, Clone)]")), _2602_datatypeName, _2596_sTypeParams, _2603_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2597_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2602_datatypeName), _2599_typeParamsAsTypes), _2598_whereConstraints, _2613_implBody)));
      _2604_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _2634_printImplBodyCases;
      _2634_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_2604_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2635_ctor;
        _2635_ctor = ((c).dtor_ctors).Select(_2604_i);
        Dafny.ISequence<Dafny.Rune> _2636_ctorMatch;
        _2636_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2635_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _2637_modulePrefix;
        _2637_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _2638_printRhs;
        _2638_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _2637_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_2635_ctor).dtor_name)), (((_2635_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _2639_j;
        _2639_j = BigInteger.Zero;
        while ((_2639_j) < (new BigInteger(((_2635_ctor).dtor_args).Count))) {
          DAST._IFormal _2640_formal;
          _2640_formal = ((_2635_ctor).dtor_args).Select(_2639_j);
          _2636_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2636_ctorMatch, DCOMP.__default.escapeIdent((_2640_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_2639_j).Sign == 1) {
            _2638_printRhs = (_2638_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _2638_printRhs = (_2638_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_2640_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _2639_j = (_2639_j) + (BigInteger.One);
        }
        _2636_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_2636_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_2635_ctor).dtor_hasAnyArgs) {
          _2638_printRhs = (_2638_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _2638_printRhs = (_2638_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _2634_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2634_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2602_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2636_ctorMatch), RAST.Expr.create_Block(_2638_printRhs))));
        _2604_i = (_2604_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _2634_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2634_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2602_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _2641_printImplBody;
      _2641_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _2634_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _2642_printImpl;
      _2642_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2597_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2602_datatypeName), _2599_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2641_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _2643_defaultImpl;
      _2643_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      Dafny.ISequence<RAST._IModDecl> _2644_asRefImpl;
      _2644_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _2604_i = BigInteger.Zero;
        RAST._IExpr _2645_structName;
        _2645_structName = (RAST.Expr.create_Identifier(_2602_datatypeName)).MSel(DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _2646_structAssignments;
        _2646_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_2604_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _2647_formal;
          _2647_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_2604_i);
          _2646_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2646_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_2647_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _2604_i = (_2604_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _2648_defaultConstrainedTypeParams;
        _2648_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_2596_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        RAST._IType _2649_fullType;
        _2649_fullType = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2602_datatypeName), _2599_typeParamsAsTypes);
        _2643_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2648_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, _2649_fullType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_2649_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_2645_structName, _2646_structAssignments))))))));
        _2644_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2648_defaultConstrainedTypeParams, (((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("convert"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AsRef"))).Apply1(_2649_fullType), RAST.Type.create_Borrowed(_2649_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.self)))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_2633_enumBody, _2642_printImpl), _2643_defaultImpl), _2644_asRefImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi4 = new BigInteger((p).Count);
        for (BigInteger _2650_i = BigInteger.Zero; _2650_i < _hi4; _2650_i++) {
          r = (r).MSel(DCOMP.__default.escapeIdent(((p).Select(_2650_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi5 = new BigInteger((p).Count);
        for (BigInteger _2651_i = BigInteger.Zero; _2651_i < _hi5; _2651_i++) {
          r = (r).MSel(DCOMP.__default.escapeIdent(((p).Select(_2651_i))));
        }
      }
      return r;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _2652_i;
        _2652_i = BigInteger.Zero;
        while ((_2652_i) < (new BigInteger((args).Count))) {
          RAST._IType _2653_genTp;
          RAST._IType _out56;
          _out56 = DCOMP.COMP.GenType((args).Select(_2652_i), inBinding, inFn);
          _2653_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_2653_genTp));
          _2652_i = (_2652_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source76 = c;
      if (_source76.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2654___mcc_h0 = _source76.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _2655___mcc_h1 = _source76.dtor_typeArgs;
        DAST._IResolvedType _2656___mcc_h2 = _source76.dtor_resolved;
        DAST._IResolvedType _2657_resolved = _2656___mcc_h2;
        Dafny.ISequence<DAST._IType> _2658_args = _2655___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2659_p = _2654___mcc_h0;
        {
          RAST._IType _2660_t;
          RAST._IType _out57;
          _out57 = DCOMP.COMP.GenPath(_2659_p);
          _2660_t = _out57;
          Dafny.ISequence<RAST._IType> _2661_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = DCOMP.COMP.GenTypeArgs(_2658_args, inBinding, inFn);
          _2661_typeArgs = _out58;
          s = RAST.Type.create_TypeApp(_2660_t, _2661_typeArgs);
          DAST._IResolvedType _source77 = _2657_resolved;
          if (_source77.is_Datatype) {
            DAST._IDatatypeType _2662___mcc_h21 = _source77.dtor_datatypeType;
            DAST._IDatatypeType _source78 = _2662___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2663___mcc_h22 = _source78.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2664___mcc_h23 = _source78.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2665_attributes = _2664___mcc_h23;
            {
              if (DCOMP.COMP.IsRcWrapped(_2665_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source77.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2666___mcc_h24 = _source77.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2667___mcc_h25 = _source77.dtor_attributes;
            {
              if ((_2659_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::any::Any")));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _2668___mcc_h26 = _source77.dtor_baseType;
            DAST._INewtypeRange _2669___mcc_h27 = _source77.dtor_range;
            bool _2670___mcc_h28 = _source77.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _2671___mcc_h29 = _source77.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2672_attributes = _2671___mcc_h29;
            bool _2673_erased = _2670___mcc_h28;
            DAST._INewtypeRange _2674_range = _2669___mcc_h27;
            DAST._IType _2675_t = _2668___mcc_h26;
            {
              if (_2673_erased) {
                Std.Wrappers._IOption<RAST._IType> _source79 = DCOMP.COMP.NewtypeToRustType(_2675_t, _2674_range);
                if (_source79.is_None) {
                } else {
                  RAST._IType _2676___mcc_h30 = _source79.dtor_value;
                  RAST._IType _2677_v = _2676___mcc_h30;
                  s = _2677_v;
                }
              }
            }
          }
        }
      } else if (_source76.is_Nullable) {
        DAST._IType _2678___mcc_h3 = _source76.dtor_Nullable_a0;
        DAST._IType _2679_inner = _2678___mcc_h3;
        {
          RAST._IType _2680_innerExpr;
          RAST._IType _out59;
          _out59 = DCOMP.COMP.GenType(_2679_inner, inBinding, inFn);
          _2680_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_2680_innerExpr));
        }
      } else if (_source76.is_Tuple) {
        Dafny.ISequence<DAST._IType> _2681___mcc_h4 = _source76.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _2682_types = _2681___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _2683_args;
          _2683_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2684_i;
          _2684_i = BigInteger.Zero;
          while ((_2684_i) < (new BigInteger((_2682_types).Count))) {
            RAST._IType _2685_generated;
            RAST._IType _out60;
            _out60 = DCOMP.COMP.GenType((_2682_types).Select(_2684_i), inBinding, inFn);
            _2685_generated = _out60;
            _2683_args = Dafny.Sequence<RAST._IType>.Concat(_2683_args, Dafny.Sequence<RAST._IType>.FromElements(_2685_generated));
            _2684_i = (_2684_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_2683_args);
        }
      } else if (_source76.is_Array) {
        DAST._IType _2686___mcc_h5 = _source76.dtor_element;
        BigInteger _2687___mcc_h6 = _source76.dtor_dims;
        BigInteger _2688_dims = _2687___mcc_h6;
        DAST._IType _2689_element = _2686___mcc_h5;
        {
          RAST._IType _2690_elem;
          RAST._IType _out61;
          _out61 = DCOMP.COMP.GenType(_2689_element, inBinding, inFn);
          _2690_elem = _out61;
          s = _2690_elem;
          BigInteger _2691_i;
          _2691_i = BigInteger.Zero;
          while ((_2691_i) < (_2688_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _2691_i = (_2691_i) + (BigInteger.One);
          }
        }
      } else if (_source76.is_Seq) {
        DAST._IType _2692___mcc_h7 = _source76.dtor_element;
        DAST._IType _2693_element = _2692___mcc_h7;
        {
          RAST._IType _2694_elem;
          RAST._IType _out62;
          _out62 = DCOMP.COMP.GenType(_2693_element, inBinding, inFn);
          _2694_elem = _out62;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_2694_elem));
        }
      } else if (_source76.is_Set) {
        DAST._IType _2695___mcc_h8 = _source76.dtor_element;
        DAST._IType _2696_element = _2695___mcc_h8;
        {
          RAST._IType _2697_elem;
          RAST._IType _out63;
          _out63 = DCOMP.COMP.GenType(_2696_element, inBinding, inFn);
          _2697_elem = _out63;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_2697_elem));
        }
      } else if (_source76.is_Multiset) {
        DAST._IType _2698___mcc_h9 = _source76.dtor_element;
        DAST._IType _2699_element = _2698___mcc_h9;
        {
          RAST._IType _2700_elem;
          RAST._IType _out64;
          _out64 = DCOMP.COMP.GenType(_2699_element, inBinding, inFn);
          _2700_elem = _out64;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_2700_elem));
        }
      } else if (_source76.is_Map) {
        DAST._IType _2701___mcc_h10 = _source76.dtor_key;
        DAST._IType _2702___mcc_h11 = _source76.dtor_value;
        DAST._IType _2703_value = _2702___mcc_h11;
        DAST._IType _2704_key = _2701___mcc_h10;
        {
          RAST._IType _2705_keyType;
          RAST._IType _out65;
          _out65 = DCOMP.COMP.GenType(_2704_key, inBinding, inFn);
          _2705_keyType = _out65;
          RAST._IType _2706_valueType;
          RAST._IType _out66;
          _out66 = DCOMP.COMP.GenType(_2703_value, inBinding, inFn);
          _2706_valueType = _out66;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_2705_keyType, _2706_valueType));
        }
      } else if (_source76.is_SetBuilder) {
        DAST._IType _2707___mcc_h12 = _source76.dtor_element;
        DAST._IType _2708_elem = _2707___mcc_h12;
        {
          RAST._IType _2709_elemType;
          RAST._IType _out67;
          _out67 = DCOMP.COMP.GenType(_2708_elem, inBinding, inFn);
          _2709_elemType = _out67;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2709_elemType));
        }
      } else if (_source76.is_MapBuilder) {
        DAST._IType _2710___mcc_h13 = _source76.dtor_key;
        DAST._IType _2711___mcc_h14 = _source76.dtor_value;
        DAST._IType _2712_value = _2711___mcc_h14;
        DAST._IType _2713_key = _2710___mcc_h13;
        {
          RAST._IType _2714_keyType;
          RAST._IType _out68;
          _out68 = DCOMP.COMP.GenType(_2713_key, inBinding, inFn);
          _2714_keyType = _out68;
          RAST._IType _2715_valueType;
          RAST._IType _out69;
          _out69 = DCOMP.COMP.GenType(_2712_value, inBinding, inFn);
          _2715_valueType = _out69;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2714_keyType, _2715_valueType));
        }
      } else if (_source76.is_Arrow) {
        Dafny.ISequence<DAST._IType> _2716___mcc_h15 = _source76.dtor_args;
        DAST._IType _2717___mcc_h16 = _source76.dtor_result;
        DAST._IType _2718_result = _2717___mcc_h16;
        Dafny.ISequence<DAST._IType> _2719_args = _2716___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _2720_argTypes;
          _2720_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2721_i;
          _2721_i = BigInteger.Zero;
          while ((_2721_i) < (new BigInteger((_2719_args).Count))) {
            RAST._IType _2722_generated;
            RAST._IType _out70;
            _out70 = DCOMP.COMP.GenType((_2719_args).Select(_2721_i), inBinding, true);
            _2722_generated = _out70;
            _2720_argTypes = Dafny.Sequence<RAST._IType>.Concat(_2720_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_2722_generated)));
            _2721_i = (_2721_i) + (BigInteger.One);
          }
          RAST._IType _2723_resultType;
          RAST._IType _out71;
          _out71 = DCOMP.COMP.GenType(_2718_result, inBinding, (inFn) || (inBinding));
          _2723_resultType = _out71;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_2720_argTypes, RAST.Type.create_IntersectionType(_2723_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source76.is_Primitive) {
        DAST._IPrimitive _2724___mcc_h17 = _source76.dtor_Primitive_a0;
        DAST._IPrimitive _2725_p = _2724___mcc_h17;
        {
          DAST._IPrimitive _source80 = _2725_p;
          if (_source80.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source80.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source80.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar)));
          } else if (_source80.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar);
          }
        }
      } else if (_source76.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _2726___mcc_h18 = _source76.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _2727_v = _2726___mcc_h18;
        s = RAST.__default.RawType(_2727_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _2728___mcc_h19 = _source76.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source81 = _2728___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _2729___mcc_h20 = _source81;
        Dafny.ISequence<Dafny.Rune> _2730_name = _2729___mcc_h20;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_2730_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _2731_i;
      _2731_i = BigInteger.Zero;
      while ((_2731_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source82 = (body).Select(_2731_i);
        DAST._IMethod _2732___mcc_h0 = _source82;
        DAST._IMethod _2733_m = _2732___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source83 = (_2733_m).dtor_overridingPath;
          if (_source83.is_None) {
            {
              RAST._IImplMember _2734_generated;
              RAST._IImplMember _out72;
              _out72 = DCOMP.COMP.GenMethod(_2733_m, forTrait, enclosingType, enclosingTypeParams);
              _2734_generated = _out72;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_2734_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2735___mcc_h1 = _source83.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2736_p = _2735___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _2737_existing;
              _2737_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_2736_p)) {
                _2737_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_2736_p);
              }
              RAST._IImplMember _2738_genMethod;
              RAST._IImplMember _out73;
              _out73 = DCOMP.COMP.GenMethod(_2733_m, true, enclosingType, enclosingTypeParams);
              _2738_genMethod = _out73;
              _2737_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_2737_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_2738_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_2736_p, _2737_existing)));
            }
          }
        }
        _2731_i = (_2731_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _2739_i;
      _2739_i = BigInteger.Zero;
      while ((_2739_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _2740_param;
        _2740_param = (@params).Select(_2739_i);
        RAST._IType _2741_paramType;
        RAST._IType _out74;
        _out74 = DCOMP.COMP.GenType((_2740_param).dtor_typ, false, false);
        _2741_paramType = _out74;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2740_param).dtor_name), RAST.Type.create_Borrowed(_2741_paramType))));
        _2739_i = (_2739_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _2742_params;
      Dafny.ISequence<RAST._IFormal> _out75;
      _out75 = DCOMP.COMP.GenParams((m).dtor_params);
      _2742_params = _out75;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2743_paramNames;
      _2743_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _2744_paramOwnerships;
      _2744_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
      BigInteger _2745_paramI;
      _2745_paramI = BigInteger.Zero;
      while ((_2745_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        Dafny.ISequence<Dafny.Rune> _2746_name;
        _2746_name = (((m).dtor_params).Select(_2745_paramI)).dtor_name;
        _2743_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2743_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2746_name));
        _2744_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_2744_paramOwnerships, _2746_name, DCOMP.Ownership.create_OwnershipBorrowed());
        _2745_paramI = (_2745_paramI) + (BigInteger.One);
      }
      DCOMP._IEnvironment _2747_env;
      _2747_env = DCOMP.Environment.create(_2743_paramNames, _2744_paramOwnerships);
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _2742_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), _2742_params);
        } else {
          RAST._IType _2748_tpe;
          RAST._IType _out76;
          _out76 = DCOMP.COMP.GenType(enclosingType, false, false);
          _2748_tpe = _out76;
          _2742_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_2748_tpe))), _2742_params);
        }
      }
      Dafny.ISequence<RAST._IType> _2749_retTypeArgs;
      _2749_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2750_typeI;
      _2750_typeI = BigInteger.Zero;
      while ((_2750_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _2751_typeExpr;
        RAST._IType _out77;
        _out77 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_2750_typeI), false, false);
        _2751_typeExpr = _out77;
        _2749_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_2749_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_2751_typeExpr));
        _2750_typeI = (_2750_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _2752_visibility;
      _2752_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _2753_fnName;
      _2753_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _2754_typeParamsFiltered;
      _2754_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _2755_typeParamI;
      _2755_typeParamI = BigInteger.Zero;
      while ((_2755_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _2756_typeParam;
        _2756_typeParam = ((m).dtor_typeParams).Select(_2755_typeParamI);
        if (!((enclosingTypeParams).Contains(_2756_typeParam))) {
          _2754_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_2754_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_2756_typeParam));
        }
        _2755_typeParamI = (_2755_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2757_whereClauses;
      _2757_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _2758_typeParams;
      _2758_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_2754_typeParamsFiltered).Count)).Sign == 1) {
        _2757_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_2757_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _2759_i;
        _2759_i = BigInteger.Zero;
        while ((_2759_i) < (new BigInteger((_2754_typeParamsFiltered).Count))) {
          RAST._IType _2760_typeExpr;
          RAST._IType _out78;
          _out78 = DCOMP.COMP.GenType((_2754_typeParamsFiltered).Select(_2759_i), false, false);
          _2760_typeExpr = _out78;
          _2758_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_2758_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2760_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _2759_i = (_2759_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _2761_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _2762_earlyReturn;
        _2762_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source84 = (m).dtor_outVars;
        if (_source84.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2763___mcc_h0 = _source84.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2764_outVars = _2763___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _2765_tupleArgs;
            _2765_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _2766_outI;
            _2766_outI = BigInteger.Zero;
            while ((_2766_outI) < (new BigInteger((_2764_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _2767_outVar;
              _2767_outVar = (_2764_outVars).Select(_2766_outI);
              _2765_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_2765_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((_2767_outVar)))));
              _2766_outI = (_2766_outI) + (BigInteger.One);
            }
            _2762_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_2765_tupleArgs)));
          }
        }
        RAST._IExpr _2768_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2769___v48;
        RAST._IExpr _out79;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out80;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _2747_env, true, _2762_earlyReturn, out _out79, out _out80);
        _2768_body = _out79;
        _2769___v48 = _out80;
        _2761_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_2768_body);
      } else {
        _2761_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_2752_visibility, RAST.Fn.create(_2753_fnName, _2758_typeParams, _2742_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_2749_retTypeArgs).Count)) == (BigInteger.One)) ? ((_2749_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_2749_retTypeArgs)))), _2757_whereClauses, _2761_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2770_declarations;
      _2770_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2771_i;
      _2771_i = BigInteger.Zero;
      while ((_2771_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _2772_stmt;
        _2772_stmt = (stmts).Select(_2771_i);
        RAST._IExpr _2773_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2774_recIdents;
        RAST._IExpr _out81;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
        DCOMP.COMP.GenStmt(_2772_stmt, selfIdent, env, (isLast) && ((_2771_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out81, out _out82);
        _2773_stmtExpr = _out81;
        _2774_recIdents = _out82;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2774_recIdents, _2770_declarations));
        DAST._IStatement _source85 = _2772_stmt;
        if (_source85.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2775___mcc_h0 = _source85.dtor_name;
          DAST._IType _2776___mcc_h1 = _source85.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2777___mcc_h2 = _source85.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2778_name = _2775___mcc_h0;
          {
            _2770_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2770_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2778_name));
          }
        } else if (_source85.is_Assign) {
          DAST._IAssignLhs _2779___mcc_h6 = _source85.dtor_lhs;
          DAST._IExpression _2780___mcc_h7 = _source85.dtor_value;
        } else if (_source85.is_If) {
          DAST._IExpression _2781___mcc_h10 = _source85.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2782___mcc_h11 = _source85.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2783___mcc_h12 = _source85.dtor_els;
        } else if (_source85.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2784___mcc_h16 = _source85.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2785___mcc_h17 = _source85.dtor_body;
        } else if (_source85.is_While) {
          DAST._IExpression _2786___mcc_h20 = _source85.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2787___mcc_h21 = _source85.dtor_body;
        } else if (_source85.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2788___mcc_h24 = _source85.dtor_boundName;
          DAST._IType _2789___mcc_h25 = _source85.dtor_boundType;
          DAST._IExpression _2790___mcc_h26 = _source85.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2791___mcc_h27 = _source85.dtor_body;
        } else if (_source85.is_Call) {
          DAST._IExpression _2792___mcc_h32 = _source85.dtor_on;
          DAST._ICallName _2793___mcc_h33 = _source85.dtor_callName;
          Dafny.ISequence<DAST._IType> _2794___mcc_h34 = _source85.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2795___mcc_h35 = _source85.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2796___mcc_h36 = _source85.dtor_outs;
        } else if (_source85.is_Return) {
          DAST._IExpression _2797___mcc_h42 = _source85.dtor_expr;
        } else if (_source85.is_EarlyReturn) {
        } else if (_source85.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2798___mcc_h44 = _source85.dtor_toLabel;
        } else if (_source85.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2799___mcc_h46 = _source85.dtor_body;
        } else if (_source85.is_JumpTailCallStart) {
        } else if (_source85.is_Halt) {
        } else {
          DAST._IExpression _2800___mcc_h48 = _source85.dtor_Print_a0;
        }
        generated = (generated).Then(_2773_stmtExpr);
        _2771_i = (_2771_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source86 = lhs;
      if (_source86.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2801___mcc_h0 = _source86.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source87 = _2801___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2802___mcc_h1 = _source87;
        Dafny.ISequence<Dafny.Rune> _2803_id = _2802___mcc_h1;
        {
          if (((env).IsBorrowed(_2803_id)) || ((env).IsBorrowedMut(_2803_id))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_2803_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_2803_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2803_id);
          needsIIFE = false;
        }
      } else if (_source86.is_Select) {
        DAST._IExpression _2804___mcc_h2 = _source86.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2805___mcc_h3 = _source86.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2806_field = _2805___mcc_h3;
        DAST._IExpression _2807_on = _2804___mcc_h2;
        {
          RAST._IExpr _2808_onExpr;
          DCOMP._IOwnership _2809_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2810_recIdents;
          RAST._IExpr _out83;
          DCOMP._IOwnership _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_2807_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out83, out _out84, out _out85);
          _2808_onExpr = _out83;
          _2809_onOwned = _out84;
          _2810_recIdents = _out85;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_2808_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2806_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _2810_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _2811___mcc_h4 = _source86.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2812___mcc_h5 = _source86.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2813_indices = _2812___mcc_h5;
        DAST._IExpression _2814_on = _2811___mcc_h4;
        {
          RAST._IExpr _2815_onExpr;
          DCOMP._IOwnership _2816_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2817_recIdents;
          RAST._IExpr _out86;
          DCOMP._IOwnership _out87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
          DCOMP.COMP.GenExpr(_2814_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out86, out _out87, out _out88);
          _2815_onExpr = _out86;
          _2816_onOwned = _out87;
          _2817_recIdents = _out88;
          readIdents = _2817_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _2818_i;
          _2818_i = BigInteger.Zero;
          while ((_2818_i) < (new BigInteger((_2813_indices).Count))) {
            RAST._IExpr _2819_idx;
            DCOMP._IOwnership _2820___v52;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2821_recIdentsIdx;
            RAST._IExpr _out89;
            DCOMP._IOwnership _out90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out91;
            DCOMP.COMP.GenExpr((_2813_indices).Select(_2818_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out89, out _out90, out _out91);
            _2819_idx = _out89;
            _2820___v52 = _out90;
            _2821_recIdentsIdx = _out91;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_2818_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_2819_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2821_recIdentsIdx);
            _2818_i = (_2818_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_2815_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _2818_i = BigInteger.Zero;
          while ((_2818_i) < (new BigInteger((_2813_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_2818_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _2818_i = (_2818_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source88 = stmt;
      if (_source88.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _2822___mcc_h0 = _source88.dtor_name;
        DAST._IType _2823___mcc_h1 = _source88.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _2824___mcc_h2 = _source88.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source89 = _2824___mcc_h2;
        if (_source89.is_None) {
          DAST._IType _2825_typ = _2823___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2826_name = _2822___mcc_h0;
          {
            RAST._IType _2827_typeString;
            RAST._IType _out92;
            _out92 = DCOMP.COMP.GenType(_2825_typ, true, false);
            _2827_typeString = _out92;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2826_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2827_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _2828___mcc_h3 = _source89.dtor_value;
          DAST._IExpression _2829_expression = _2828___mcc_h3;
          DAST._IType _2830_typ = _2823___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2831_name = _2822___mcc_h0;
          {
            RAST._IType _2832_typeString;
            RAST._IType _out93;
            _out93 = DCOMP.COMP.GenType(_2830_typ, true, false);
            _2832_typeString = _out93;
            RAST._IExpr _2833_expr;
            DCOMP._IOwnership _2834___v53;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2835_recIdents;
            RAST._IExpr _out94;
            DCOMP._IOwnership _out95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
            DCOMP.COMP.GenExpr(_2829_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out94, out _out95, out _out96);
            _2833_expr = _out94;
            _2834___v53 = _out95;
            _2835_recIdents = _out96;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2831_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2832_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2833_expr));
            readIdents = _2835_recIdents;
          }
        }
      } else if (_source88.is_Assign) {
        DAST._IAssignLhs _2836___mcc_h4 = _source88.dtor_lhs;
        DAST._IExpression _2837___mcc_h5 = _source88.dtor_value;
        DAST._IExpression _2838_expression = _2837___mcc_h5;
        DAST._IAssignLhs _2839_lhs = _2836___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _2840_lhsGen;
          bool _2841_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2842_recIdents;
          Dafny.ISequence<Dafny.Rune> _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          DCOMP.COMP.GenAssignLhs(_2839_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, env, out _out97, out _out98, out _out99);
          _2840_lhsGen = _out97;
          _2841_needsIIFE = _out98;
          _2842_recIdents = _out99;
          RAST._IExpr _2843_exprGen;
          DCOMP._IOwnership _2844___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2845_exprIdents;
          RAST._IExpr _out100;
          DCOMP._IOwnership _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_2838_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out100, out _out101, out _out102);
          _2843_exprGen = _out100;
          _2844___v54 = _out101;
          _2845_exprIdents = _out102;
          if (_2841_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2843_exprGen)), RAST.Expr.create_RawExpr(_2840_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_2840_lhsGen, _2843_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2842_recIdents, _2845_exprIdents);
        }
      } else if (_source88.is_If) {
        DAST._IExpression _2846___mcc_h6 = _source88.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2847___mcc_h7 = _source88.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _2848___mcc_h8 = _source88.dtor_els;
        Dafny.ISequence<DAST._IStatement> _2849_els = _2848___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _2850_thn = _2847___mcc_h7;
        DAST._IExpression _2851_cond = _2846___mcc_h6;
        {
          RAST._IExpr _2852_cond;
          DCOMP._IOwnership _2853___v55;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2854_recIdents;
          RAST._IExpr _out103;
          DCOMP._IOwnership _out104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out105;
          DCOMP.COMP.GenExpr(_2851_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out103, out _out104, out _out105);
          _2852_cond = _out103;
          _2853___v55 = _out104;
          _2854_recIdents = _out105;
          Dafny.ISequence<Dafny.Rune> _2855_condString;
          _2855_condString = (_2852_cond)._ToString(DCOMP.__default.IND);
          readIdents = _2854_recIdents;
          RAST._IExpr _2856_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2857_thnIdents;
          RAST._IExpr _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          DCOMP.COMP.GenStmts(_2850_thn, selfIdent, env, isLast, earlyReturn, out _out106, out _out107);
          _2856_thn = _out106;
          _2857_thnIdents = _out107;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2857_thnIdents);
          RAST._IExpr _2858_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2859_elsIdents;
          RAST._IExpr _out108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
          DCOMP.COMP.GenStmts(_2849_els, selfIdent, env, isLast, earlyReturn, out _out108, out _out109);
          _2858_els = _out108;
          _2859_elsIdents = _out109;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2859_elsIdents);
          generated = RAST.Expr.create_IfExpr(_2852_cond, _2856_thn, _2858_els);
        }
      } else if (_source88.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _2860___mcc_h9 = _source88.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _2861___mcc_h10 = _source88.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2862_body = _2861___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _2863_lbl = _2860___mcc_h9;
        {
          RAST._IExpr _2864_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2865_bodyIdents;
          RAST._IExpr _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenStmts(_2862_body, selfIdent, env, isLast, earlyReturn, out _out110, out _out111);
          _2864_body = _out110;
          _2865_bodyIdents = _out111;
          readIdents = _2865_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2863_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_2864_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source88.is_While) {
        DAST._IExpression _2866___mcc_h11 = _source88.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2867___mcc_h12 = _source88.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2868_body = _2867___mcc_h12;
        DAST._IExpression _2869_cond = _2866___mcc_h11;
        {
          RAST._IExpr _2870_cond;
          DCOMP._IOwnership _2871___v56;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2872_recIdents;
          RAST._IExpr _out112;
          DCOMP._IOwnership _out113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
          DCOMP.COMP.GenExpr(_2869_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out112, out _out113, out _out114);
          _2870_cond = _out112;
          _2871___v56 = _out113;
          _2872_recIdents = _out114;
          readIdents = _2872_recIdents;
          RAST._IExpr _2873_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2874_bodyIdents;
          RAST._IExpr _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenStmts(_2868_body, selfIdent, env, false, earlyReturn, out _out115, out _out116);
          _2873_body = _out115;
          _2874_bodyIdents = _out116;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2874_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2870_cond), _2873_body);
        }
      } else if (_source88.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _2875___mcc_h13 = _source88.dtor_boundName;
        DAST._IType _2876___mcc_h14 = _source88.dtor_boundType;
        DAST._IExpression _2877___mcc_h15 = _source88.dtor_over;
        Dafny.ISequence<DAST._IStatement> _2878___mcc_h16 = _source88.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2879_body = _2878___mcc_h16;
        DAST._IExpression _2880_over = _2877___mcc_h15;
        DAST._IType _2881_boundType = _2876___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _2882_boundName = _2875___mcc_h13;
        {
          RAST._IExpr _2883_over;
          DCOMP._IOwnership _2884___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2885_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_2880_over, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out117, out _out118, out _out119);
          _2883_over = _out117;
          _2884___v57 = _out118;
          _2885_recIdents = _out119;
          RAST._IType _2886_boundTypeStr;
          RAST._IType _out120;
          _out120 = DCOMP.COMP.GenType(_2881_boundType, false, false);
          _2886_boundTypeStr = _out120;
          readIdents = _2885_recIdents;
          RAST._IExpr _2887_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2888_bodyIdents;
          RAST._IExpr _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenStmts(_2879_body, selfIdent, (env).Add(_2882_boundName, DCOMP.Ownership.create_OwnershipBorrowed()), false, earlyReturn, out _out121, out _out122);
          _2887_body = _out121;
          _2888_bodyIdents = _out122;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2888_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2882_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_2882_boundName), _2883_over, _2887_body);
        }
      } else if (_source88.is_Call) {
        DAST._IExpression _2889___mcc_h17 = _source88.dtor_on;
        DAST._ICallName _2890___mcc_h18 = _source88.dtor_callName;
        Dafny.ISequence<DAST._IType> _2891___mcc_h19 = _source88.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2892___mcc_h20 = _source88.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2893___mcc_h21 = _source88.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2894_maybeOutVars = _2893___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _2895_args = _2892___mcc_h20;
        Dafny.ISequence<DAST._IType> _2896_typeArgs = _2891___mcc_h19;
        DAST._ICallName _2897_name = _2890___mcc_h18;
        DAST._IExpression _2898_on = _2889___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2899_typeArgString;
          _2899_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2896_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2900_typeI;
            _2900_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _2901_typeArgsR;
            _2901_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_2900_typeI) < (new BigInteger((_2896_typeArgs).Count))) {
              RAST._IType _2902_tpe;
              RAST._IType _out123;
              _out123 = DCOMP.COMP.GenType((_2896_typeArgs).Select(_2900_typeI), false, false);
              _2902_tpe = _out123;
              _2901_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_2901_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_2902_tpe));
              _2900_typeI = (_2900_typeI) + (BigInteger.One);
            }
            _2899_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2901_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _2903_argString;
          _2903_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2904_i;
          _2904_i = BigInteger.Zero;
          while ((_2904_i) < (new BigInteger((_2895_args).Count))) {
            if ((_2904_i).Sign == 1) {
              _2903_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2903_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _2905_argExpr;
            DCOMP._IOwnership _2906_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2907_argIdents;
            RAST._IExpr _out124;
            DCOMP._IOwnership _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            DCOMP.COMP.GenExpr((_2895_args).Select(_2904_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out124, out _out125, out _out126);
            _2905_argExpr = _out124;
            _2906_ownership = _out125;
            _2907_argIdents = _out126;
            Dafny.ISequence<Dafny.Rune> _2908_argExprString;
            _2908_argExprString = (_2905_argExpr)._ToString(DCOMP.__default.IND);
            _2903_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2903_argString, _2908_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2907_argIdents);
            _2904_i = (_2904_i) + (BigInteger.One);
          }
          RAST._IExpr _2909_onExpr;
          DCOMP._IOwnership _2910___v58;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2911_enclosingIdents;
          RAST._IExpr _out127;
          DCOMP._IOwnership _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_2898_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out127, out _out128, out _out129);
          _2909_onExpr = _out127;
          _2910___v58 = _out128;
          _2911_enclosingIdents = _out129;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2911_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _2912_enclosingString;
          _2912_enclosingString = (_2909_onExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source90 = _2898_on;
          if (_source90.is_Literal) {
            DAST._ILiteral _2913___mcc_h26 = _source90.dtor_Literal_a0;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2914___mcc_h28 = _source90.dtor_Ident_a0;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2915___mcc_h30 = _source90.dtor_Companion_a0;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_2912_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source90.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2916___mcc_h32 = _source90.dtor_Tuple_a0;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2917___mcc_h34 = _source90.dtor_path;
            Dafny.ISequence<DAST._IType> _2918___mcc_h35 = _source90.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2919___mcc_h36 = _source90.dtor_args;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2920___mcc_h40 = _source90.dtor_dims;
            DAST._IType _2921___mcc_h41 = _source90.dtor_typ;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_DatatypeValue) {
            DAST._IDatatypeType _2922___mcc_h44 = _source90.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _2923___mcc_h45 = _source90.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2924___mcc_h46 = _source90.dtor_variant;
            bool _2925___mcc_h47 = _source90.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2926___mcc_h48 = _source90.dtor_contents;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Convert) {
            DAST._IExpression _2927___mcc_h54 = _source90.dtor_value;
            DAST._IType _2928___mcc_h55 = _source90.dtor_from;
            DAST._IType _2929___mcc_h56 = _source90.dtor_typ;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_SeqConstruct) {
            DAST._IExpression _2930___mcc_h60 = _source90.dtor_length;
            DAST._IExpression _2931___mcc_h61 = _source90.dtor_elem;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2932___mcc_h64 = _source90.dtor_elements;
            DAST._IType _2933___mcc_h65 = _source90.dtor_typ;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2934___mcc_h68 = _source90.dtor_elements;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _2935___mcc_h70 = _source90.dtor_elements;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2936___mcc_h72 = _source90.dtor_mapElems;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_MapBuilder) {
            DAST._IType _2937___mcc_h74 = _source90.dtor_keyType;
            DAST._IType _2938___mcc_h75 = _source90.dtor_valueType;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_SeqUpdate) {
            DAST._IExpression _2939___mcc_h78 = _source90.dtor_expr;
            DAST._IExpression _2940___mcc_h79 = _source90.dtor_indexExpr;
            DAST._IExpression _2941___mcc_h80 = _source90.dtor_value;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_MapUpdate) {
            DAST._IExpression _2942___mcc_h84 = _source90.dtor_expr;
            DAST._IExpression _2943___mcc_h85 = _source90.dtor_indexExpr;
            DAST._IExpression _2944___mcc_h86 = _source90.dtor_value;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_SetBuilder) {
            DAST._IType _2945___mcc_h90 = _source90.dtor_elemType;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_ToMultiset) {
            DAST._IExpression _2946___mcc_h92 = _source90.dtor_ToMultiset_a0;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_This) {
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Ite) {
            DAST._IExpression _2947___mcc_h94 = _source90.dtor_cond;
            DAST._IExpression _2948___mcc_h95 = _source90.dtor_thn;
            DAST._IExpression _2949___mcc_h96 = _source90.dtor_els;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_UnOp) {
            DAST._IUnaryOp _2950___mcc_h100 = _source90.dtor_unOp;
            DAST._IExpression _2951___mcc_h101 = _source90.dtor_expr;
            DAST.Format._IUnOpFormat _2952___mcc_h102 = _source90.dtor_format1;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_BinOp) {
            DAST._IBinOp _2953___mcc_h106 = _source90.dtor_op;
            DAST._IExpression _2954___mcc_h107 = _source90.dtor_left;
            DAST._IExpression _2955___mcc_h108 = _source90.dtor_right;
            DAST.Format._IBinOpFormat _2956___mcc_h109 = _source90.dtor_format2;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_ArrayLen) {
            DAST._IExpression _2957___mcc_h114 = _source90.dtor_expr;
            BigInteger _2958___mcc_h115 = _source90.dtor_dim;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_MapKeys) {
            DAST._IExpression _2959___mcc_h118 = _source90.dtor_expr;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_MapValues) {
            DAST._IExpression _2960___mcc_h120 = _source90.dtor_expr;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Select) {
            DAST._IExpression _2961___mcc_h122 = _source90.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2962___mcc_h123 = _source90.dtor_field;
            bool _2963___mcc_h124 = _source90.dtor_isConstant;
            bool _2964___mcc_h125 = _source90.dtor_onDatatype;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_SelectFn) {
            DAST._IExpression _2965___mcc_h130 = _source90.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2966___mcc_h131 = _source90.dtor_field;
            bool _2967___mcc_h132 = _source90.dtor_onDatatype;
            bool _2968___mcc_h133 = _source90.dtor_isStatic;
            BigInteger _2969___mcc_h134 = _source90.dtor_arity;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Index) {
            DAST._IExpression _2970___mcc_h140 = _source90.dtor_expr;
            DAST._ICollKind _2971___mcc_h141 = _source90.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2972___mcc_h142 = _source90.dtor_indices;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_IndexRange) {
            DAST._IExpression _2973___mcc_h146 = _source90.dtor_expr;
            bool _2974___mcc_h147 = _source90.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _2975___mcc_h148 = _source90.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _2976___mcc_h149 = _source90.dtor_high;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_TupleSelect) {
            DAST._IExpression _2977___mcc_h154 = _source90.dtor_expr;
            BigInteger _2978___mcc_h155 = _source90.dtor_index;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Call) {
            DAST._IExpression _2979___mcc_h158 = _source90.dtor_on;
            DAST._ICallName _2980___mcc_h159 = _source90.dtor_callName;
            Dafny.ISequence<DAST._IType> _2981___mcc_h160 = _source90.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2982___mcc_h161 = _source90.dtor_args;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2983___mcc_h166 = _source90.dtor_params;
            DAST._IType _2984___mcc_h167 = _source90.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2985___mcc_h168 = _source90.dtor_body;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2986___mcc_h172 = _source90.dtor_values;
            DAST._IType _2987___mcc_h173 = _source90.dtor_retType;
            DAST._IExpression _2988___mcc_h174 = _source90.dtor_expr;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2989___mcc_h178 = _source90.dtor_name;
            DAST._IType _2990___mcc_h179 = _source90.dtor_typ;
            DAST._IExpression _2991___mcc_h180 = _source90.dtor_value;
            DAST._IExpression _2992___mcc_h181 = _source90.dtor_iifeBody;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_Apply) {
            DAST._IExpression _2993___mcc_h186 = _source90.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2994___mcc_h187 = _source90.dtor_args;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_TypeTest) {
            DAST._IExpression _2995___mcc_h190 = _source90.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2996___mcc_h191 = _source90.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2997___mcc_h192 = _source90.dtor_variant;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_InitializationValue) {
            DAST._IType _2998___mcc_h196 = _source90.dtor_typ;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_BoolBoundedPool) {
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_SetBoundedPool) {
            DAST._IExpression _2999___mcc_h198 = _source90.dtor_of;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source90.is_SeqBoundedPool) {
            DAST._IExpression _3000___mcc_h200 = _source90.dtor_of;
            bool _3001___mcc_h201 = _source90.dtor_includeDuplicates;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _3002___mcc_h204 = _source90.dtor_lo;
            DAST._IExpression _3003___mcc_h205 = _source90.dtor_hi;
            {
              _2912_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2912_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _3004_receiver;
          _3004_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source91 = _2894_maybeOutVars;
          if (_source91.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3005___mcc_h208 = _source91.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3006_outVars = _3005___mcc_h208;
            {
              if ((new BigInteger((_3006_outVars).Count)) > (BigInteger.One)) {
                _3004_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _3007_outI;
              _3007_outI = BigInteger.Zero;
              while ((_3007_outI) < (new BigInteger((_3006_outVars).Count))) {
                if ((_3007_outI).Sign == 1) {
                  _3004_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3004_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _3008_outVar;
                _3008_outVar = (_3006_outVars).Select(_3007_outI);
                _3004_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3004_receiver, (_3008_outVar));
                _3007_outI = (_3007_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_3006_outVars).Count)) > (BigInteger.One)) {
                _3004_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3004_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _3009_renderedName;
          _3009_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source92) => {
            if (_source92.is_Name) {
              Dafny.ISequence<Dafny.Rune> _3010___mcc_h209 = _source92.dtor_name;
              Dafny.ISequence<Dafny.Rune> _3011_name = _3010___mcc_h209;
              return DCOMP.__default.escapeIdent(_3011_name);
            } else if (_source92.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source92.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source92.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_2897_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_3004_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_3004_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _2912_enclosingString), _3009_renderedName), _2899_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2903_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source88.is_Return) {
        DAST._IExpression _3012___mcc_h22 = _source88.dtor_expr;
        DAST._IExpression _3013_expr = _3012___mcc_h22;
        {
          RAST._IExpr _3014_expr;
          DCOMP._IOwnership _3015___v61;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3016_recIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          DCOMP.COMP.GenExpr(_3013_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _3014_expr = _out130;
          _3015___v61 = _out131;
          _3016_recIdents = _out132;
          readIdents = _3016_recIdents;
          if (isLast) {
            generated = _3014_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_3014_expr));
          }
        }
      } else if (_source88.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source88.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3017___mcc_h23 = _source88.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3018_toLabel = _3017___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source93 = _3018_toLabel;
          if (_source93.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3019___mcc_h210 = _source93.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3020_lbl = _3019___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _3020_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source88.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _3021___mcc_h24 = _source88.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3022_body = _3021___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _3023_paramI;
          _3023_paramI = BigInteger.Zero;
          while ((_3023_paramI) < (new BigInteger(((env).dtor_names).Count))) {
            Dafny.ISequence<Dafny.Rune> _3024_param;
            _3024_param = ((env).dtor_names).Select(_3023_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_3024_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_3024_param))))));
            _3023_paramI = (_3023_paramI) + (BigInteger.One);
          }
          RAST._IExpr _3025_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3026_bodyIdents;
          RAST._IExpr _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenStmts(_3022_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), DCOMP.Environment.Empty(), false, earlyReturn, out _out133, out _out134);
          _3025_body = _out133;
          _3026_bodyIdents = _out134;
          readIdents = _3026_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _3025_body)));
        }
      } else if (_source88.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source88.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _3027___mcc_h25 = _source88.dtor_Print_a0;
        DAST._IExpression _3028_e = _3027___mcc_h25;
        {
          RAST._IExpr _3029_printedExpr;
          DCOMP._IOwnership _3030_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3031_recIdents;
          RAST._IExpr _out135;
          DCOMP._IOwnership _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_3028_e, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out135, out _out136, out _out137);
          _3029_printedExpr = _out135;
          _3030_recOwnership = _out136;
          _3031_recIdents = _out137;
          Dafny.ISequence<Dafny.Rune> _3032_printedExprString;
          _3032_printedExprString = (_3029_printedExpr)._ToString(DCOMP.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _3032_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _3031_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source94 = range;
      if (_source94.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source94.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source94.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source94.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source94.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source94.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source94.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source94.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source94.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source94.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source94.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMP._IOwnership ownership, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out138;
        DCOMP._IOwnership _out139;
        DCOMP.COMP.FromOwned(r, expectedOwnership, out _out138, out _out139);
        @out = _out138;
        resultingOwnership = _out139;
        return ;
      } else if ((object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source95 = e;
      DAST._ILiteral _3033___mcc_h0 = _source95.dtor_Literal_a0;
      DAST._ILiteral _source96 = _3033___mcc_h0;
      if (_source96.is_BoolLiteral) {
        bool _3034___mcc_h1 = _source96.dtor_BoolLiteral_a0;
        if ((_3034___mcc_h1) == (false)) {
          {
            RAST._IExpr _out140;
            DCOMP._IOwnership _out141;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out140, out _out141);
            r = _out140;
            resultingOwnership = _out141;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out142;
            DCOMP._IOwnership _out143;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out142, out _out143);
            r = _out142;
            resultingOwnership = _out143;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source96.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _3035___mcc_h2 = _source96.dtor_IntLiteral_a0;
        DAST._IType _3036___mcc_h3 = _source96.dtor_IntLiteral_a1;
        DAST._IType _3037_t = _3036___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _3038_i = _3035___mcc_h2;
        {
          DAST._IType _source97 = _3037_t;
          if (_source97.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3039___mcc_h100 = _source97.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3040___mcc_h101 = _source97.dtor_typeArgs;
            DAST._IResolvedType _3041___mcc_h102 = _source97.dtor_resolved;
            DAST._IType _3042_o = _3037_t;
            {
              RAST._IType _3043_genType;
              RAST._IType _out144;
              _out144 = DCOMP.COMP.GenType(_3042_o, false, false);
              _3043_genType = _out144;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3043_genType);
            }
          } else if (_source97.is_Nullable) {
            DAST._IType _3044___mcc_h106 = _source97.dtor_Nullable_a0;
            DAST._IType _3045_o = _3037_t;
            {
              RAST._IType _3046_genType;
              RAST._IType _out145;
              _out145 = DCOMP.COMP.GenType(_3045_o, false, false);
              _3046_genType = _out145;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3046_genType);
            }
          } else if (_source97.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3047___mcc_h108 = _source97.dtor_Tuple_a0;
            DAST._IType _3048_o = _3037_t;
            {
              RAST._IType _3049_genType;
              RAST._IType _out146;
              _out146 = DCOMP.COMP.GenType(_3048_o, false, false);
              _3049_genType = _out146;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3049_genType);
            }
          } else if (_source97.is_Array) {
            DAST._IType _3050___mcc_h110 = _source97.dtor_element;
            BigInteger _3051___mcc_h111 = _source97.dtor_dims;
            DAST._IType _3052_o = _3037_t;
            {
              RAST._IType _3053_genType;
              RAST._IType _out147;
              _out147 = DCOMP.COMP.GenType(_3052_o, false, false);
              _3053_genType = _out147;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3053_genType);
            }
          } else if (_source97.is_Seq) {
            DAST._IType _3054___mcc_h114 = _source97.dtor_element;
            DAST._IType _3055_o = _3037_t;
            {
              RAST._IType _3056_genType;
              RAST._IType _out148;
              _out148 = DCOMP.COMP.GenType(_3055_o, false, false);
              _3056_genType = _out148;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3056_genType);
            }
          } else if (_source97.is_Set) {
            DAST._IType _3057___mcc_h116 = _source97.dtor_element;
            DAST._IType _3058_o = _3037_t;
            {
              RAST._IType _3059_genType;
              RAST._IType _out149;
              _out149 = DCOMP.COMP.GenType(_3058_o, false, false);
              _3059_genType = _out149;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3059_genType);
            }
          } else if (_source97.is_Multiset) {
            DAST._IType _3060___mcc_h118 = _source97.dtor_element;
            DAST._IType _3061_o = _3037_t;
            {
              RAST._IType _3062_genType;
              RAST._IType _out150;
              _out150 = DCOMP.COMP.GenType(_3061_o, false, false);
              _3062_genType = _out150;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3062_genType);
            }
          } else if (_source97.is_Map) {
            DAST._IType _3063___mcc_h120 = _source97.dtor_key;
            DAST._IType _3064___mcc_h121 = _source97.dtor_value;
            DAST._IType _3065_o = _3037_t;
            {
              RAST._IType _3066_genType;
              RAST._IType _out151;
              _out151 = DCOMP.COMP.GenType(_3065_o, false, false);
              _3066_genType = _out151;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3066_genType);
            }
          } else if (_source97.is_SetBuilder) {
            DAST._IType _3067___mcc_h124 = _source97.dtor_element;
            DAST._IType _3068_o = _3037_t;
            {
              RAST._IType _3069_genType;
              RAST._IType _out152;
              _out152 = DCOMP.COMP.GenType(_3068_o, false, false);
              _3069_genType = _out152;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3069_genType);
            }
          } else if (_source97.is_MapBuilder) {
            DAST._IType _3070___mcc_h126 = _source97.dtor_key;
            DAST._IType _3071___mcc_h127 = _source97.dtor_value;
            DAST._IType _3072_o = _3037_t;
            {
              RAST._IType _3073_genType;
              RAST._IType _out153;
              _out153 = DCOMP.COMP.GenType(_3072_o, false, false);
              _3073_genType = _out153;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3073_genType);
            }
          } else if (_source97.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3074___mcc_h130 = _source97.dtor_args;
            DAST._IType _3075___mcc_h131 = _source97.dtor_result;
            DAST._IType _3076_o = _3037_t;
            {
              RAST._IType _3077_genType;
              RAST._IType _out154;
              _out154 = DCOMP.COMP.GenType(_3076_o, false, false);
              _3077_genType = _out154;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3077_genType);
            }
          } else if (_source97.is_Primitive) {
            DAST._IPrimitive _3078___mcc_h134 = _source97.dtor_Primitive_a0;
            DAST._IPrimitive _source98 = _3078___mcc_h134;
            if (_source98.is_Int) {
              {
                if ((new BigInteger((_3038_i).Count)) <= (new BigInteger(4))) {
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(RAST.Expr.create_LiteralInt(_3038_i));
                } else {
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(RAST.Expr.create_LiteralString(_3038_i, true));
                }
              }
            } else if (_source98.is_Real) {
              DAST._IType _3079_o = _3037_t;
              {
                RAST._IType _3080_genType;
                RAST._IType _out155;
                _out155 = DCOMP.COMP.GenType(_3079_o, false, false);
                _3080_genType = _out155;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3080_genType);
              }
            } else if (_source98.is_String) {
              DAST._IType _3081_o = _3037_t;
              {
                RAST._IType _3082_genType;
                RAST._IType _out156;
                _out156 = DCOMP.COMP.GenType(_3081_o, false, false);
                _3082_genType = _out156;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3082_genType);
              }
            } else if (_source98.is_Bool) {
              DAST._IType _3083_o = _3037_t;
              {
                RAST._IType _3084_genType;
                RAST._IType _out157;
                _out157 = DCOMP.COMP.GenType(_3083_o, false, false);
                _3084_genType = _out157;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3084_genType);
              }
            } else {
              DAST._IType _3085_o = _3037_t;
              {
                RAST._IType _3086_genType;
                RAST._IType _out158;
                _out158 = DCOMP.COMP.GenType(_3085_o, false, false);
                _3086_genType = _out158;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3086_genType);
              }
            }
          } else if (_source97.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3087___mcc_h136 = _source97.dtor_Passthrough_a0;
            DAST._IType _3088_o = _3037_t;
            {
              RAST._IType _3089_genType;
              RAST._IType _out159;
              _out159 = DCOMP.COMP.GenType(_3088_o, false, false);
              _3089_genType = _out159;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3089_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3090___mcc_h138 = _source97.dtor_TypeArg_a0;
            DAST._IType _3091_o = _3037_t;
            {
              RAST._IType _3092_genType;
              RAST._IType _out160;
              _out160 = DCOMP.COMP.GenType(_3091_o, false, false);
              _3092_genType = _out160;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3038_i), _3092_genType);
            }
          }
          RAST._IExpr _out161;
          DCOMP._IOwnership _out162;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out161, out _out162);
          r = _out161;
          resultingOwnership = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source96.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _3093___mcc_h4 = _source96.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _3094___mcc_h5 = _source96.dtor_DecLiteral_a1;
        DAST._IType _3095___mcc_h6 = _source96.dtor_DecLiteral_a2;
        DAST._IType _3096_t = _3095___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _3097_d = _3094___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _3098_n = _3093___mcc_h4;
        {
          DAST._IType _source99 = _3096_t;
          if (_source99.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3099___mcc_h140 = _source99.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3100___mcc_h141 = _source99.dtor_typeArgs;
            DAST._IResolvedType _3101___mcc_h142 = _source99.dtor_resolved;
            DAST._IType _3102_o = _3096_t;
            {
              RAST._IType _3103_genType;
              RAST._IType _out163;
              _out163 = DCOMP.COMP.GenType(_3102_o, false, false);
              _3103_genType = _out163;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3103_genType);
            }
          } else if (_source99.is_Nullable) {
            DAST._IType _3104___mcc_h146 = _source99.dtor_Nullable_a0;
            DAST._IType _3105_o = _3096_t;
            {
              RAST._IType _3106_genType;
              RAST._IType _out164;
              _out164 = DCOMP.COMP.GenType(_3105_o, false, false);
              _3106_genType = _out164;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3106_genType);
            }
          } else if (_source99.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3107___mcc_h148 = _source99.dtor_Tuple_a0;
            DAST._IType _3108_o = _3096_t;
            {
              RAST._IType _3109_genType;
              RAST._IType _out165;
              _out165 = DCOMP.COMP.GenType(_3108_o, false, false);
              _3109_genType = _out165;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3109_genType);
            }
          } else if (_source99.is_Array) {
            DAST._IType _3110___mcc_h150 = _source99.dtor_element;
            BigInteger _3111___mcc_h151 = _source99.dtor_dims;
            DAST._IType _3112_o = _3096_t;
            {
              RAST._IType _3113_genType;
              RAST._IType _out166;
              _out166 = DCOMP.COMP.GenType(_3112_o, false, false);
              _3113_genType = _out166;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3113_genType);
            }
          } else if (_source99.is_Seq) {
            DAST._IType _3114___mcc_h154 = _source99.dtor_element;
            DAST._IType _3115_o = _3096_t;
            {
              RAST._IType _3116_genType;
              RAST._IType _out167;
              _out167 = DCOMP.COMP.GenType(_3115_o, false, false);
              _3116_genType = _out167;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3116_genType);
            }
          } else if (_source99.is_Set) {
            DAST._IType _3117___mcc_h156 = _source99.dtor_element;
            DAST._IType _3118_o = _3096_t;
            {
              RAST._IType _3119_genType;
              RAST._IType _out168;
              _out168 = DCOMP.COMP.GenType(_3118_o, false, false);
              _3119_genType = _out168;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3119_genType);
            }
          } else if (_source99.is_Multiset) {
            DAST._IType _3120___mcc_h158 = _source99.dtor_element;
            DAST._IType _3121_o = _3096_t;
            {
              RAST._IType _3122_genType;
              RAST._IType _out169;
              _out169 = DCOMP.COMP.GenType(_3121_o, false, false);
              _3122_genType = _out169;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3122_genType);
            }
          } else if (_source99.is_Map) {
            DAST._IType _3123___mcc_h160 = _source99.dtor_key;
            DAST._IType _3124___mcc_h161 = _source99.dtor_value;
            DAST._IType _3125_o = _3096_t;
            {
              RAST._IType _3126_genType;
              RAST._IType _out170;
              _out170 = DCOMP.COMP.GenType(_3125_o, false, false);
              _3126_genType = _out170;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3126_genType);
            }
          } else if (_source99.is_SetBuilder) {
            DAST._IType _3127___mcc_h164 = _source99.dtor_element;
            DAST._IType _3128_o = _3096_t;
            {
              RAST._IType _3129_genType;
              RAST._IType _out171;
              _out171 = DCOMP.COMP.GenType(_3128_o, false, false);
              _3129_genType = _out171;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3129_genType);
            }
          } else if (_source99.is_MapBuilder) {
            DAST._IType _3130___mcc_h166 = _source99.dtor_key;
            DAST._IType _3131___mcc_h167 = _source99.dtor_value;
            DAST._IType _3132_o = _3096_t;
            {
              RAST._IType _3133_genType;
              RAST._IType _out172;
              _out172 = DCOMP.COMP.GenType(_3132_o, false, false);
              _3133_genType = _out172;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3133_genType);
            }
          } else if (_source99.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3134___mcc_h170 = _source99.dtor_args;
            DAST._IType _3135___mcc_h171 = _source99.dtor_result;
            DAST._IType _3136_o = _3096_t;
            {
              RAST._IType _3137_genType;
              RAST._IType _out173;
              _out173 = DCOMP.COMP.GenType(_3136_o, false, false);
              _3137_genType = _out173;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3137_genType);
            }
          } else if (_source99.is_Primitive) {
            DAST._IPrimitive _3138___mcc_h174 = _source99.dtor_Primitive_a0;
            DAST._IPrimitive _source100 = _3138___mcc_h174;
            if (_source100.is_Int) {
              DAST._IType _3139_o = _3096_t;
              {
                RAST._IType _3140_genType;
                RAST._IType _out174;
                _out174 = DCOMP.COMP.GenType(_3139_o, false, false);
                _3140_genType = _out174;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3140_genType);
              }
            } else if (_source100.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source100.is_String) {
              DAST._IType _3141_o = _3096_t;
              {
                RAST._IType _3142_genType;
                RAST._IType _out175;
                _out175 = DCOMP.COMP.GenType(_3141_o, false, false);
                _3142_genType = _out175;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3142_genType);
              }
            } else if (_source100.is_Bool) {
              DAST._IType _3143_o = _3096_t;
              {
                RAST._IType _3144_genType;
                RAST._IType _out176;
                _out176 = DCOMP.COMP.GenType(_3143_o, false, false);
                _3144_genType = _out176;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3144_genType);
              }
            } else {
              DAST._IType _3145_o = _3096_t;
              {
                RAST._IType _3146_genType;
                RAST._IType _out177;
                _out177 = DCOMP.COMP.GenType(_3145_o, false, false);
                _3146_genType = _out177;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3146_genType);
              }
            }
          } else if (_source99.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3147___mcc_h176 = _source99.dtor_Passthrough_a0;
            DAST._IType _3148_o = _3096_t;
            {
              RAST._IType _3149_genType;
              RAST._IType _out178;
              _out178 = DCOMP.COMP.GenType(_3148_o, false, false);
              _3149_genType = _out178;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3149_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3150___mcc_h178 = _source99.dtor_TypeArg_a0;
            DAST._IType _3151_o = _3096_t;
            {
              RAST._IType _3152_genType;
              RAST._IType _out179;
              _out179 = DCOMP.COMP.GenType(_3151_o, false, false);
              _3152_genType = _out179;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3098_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3097_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3152_genType);
            }
          }
          RAST._IExpr _out180;
          DCOMP._IOwnership _out181;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out180, out _out181);
          r = _out180;
          resultingOwnership = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source96.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _3153___mcc_h7 = _source96.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _3154_l = _3153___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_3154_l, false));
          RAST._IExpr _out182;
          DCOMP._IOwnership _out183;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out182, out _out183);
          r = _out182;
          resultingOwnership = _out183;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source96.is_CharLiteral) {
        Dafny.Rune _3155___mcc_h8 = _source96.dtor_CharLiteral_a0;
        Dafny.Rune _3156_c = _3155___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_3156_c).Value)));
          r = RAST.Expr.create_TypeAscription(r, DCOMP.__default.DafnyCharUnderlying);
          r = ((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out184;
          DCOMP._IOwnership _out185;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out184, out _out185);
          r = _out184;
          resultingOwnership = _out185;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _3157___mcc_h9 = _source96.dtor_Null_a0;
        DAST._IType _3158_tpe = _3157___mcc_h9;
        {
          RAST._IType _3159_tpeGen;
          RAST._IType _out186;
          _out186 = DCOMP.COMP.GenType(_3158_tpe, false, false);
          _3159_tpeGen = _out186;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _3159_tpeGen);
          RAST._IExpr _out187;
          DCOMP._IOwnership _out188;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out187, out _out188);
          r = _out187;
          resultingOwnership = _out188;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs50 = e;
      DAST._IBinOp _3160_op = _let_tmp_rhs50.dtor_op;
      DAST._IExpression _3161_lExpr = _let_tmp_rhs50.dtor_left;
      DAST._IExpression _3162_rExpr = _let_tmp_rhs50.dtor_right;
      DAST.Format._IBinOpFormat _3163_format = _let_tmp_rhs50.dtor_format2;
      bool _3164_becomesLeftCallsRight;
      _3164_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source101) => {
        if (_source101.is_Eq) {
          bool _3165___mcc_h0 = _source101.dtor_referential;
          bool _3166___mcc_h1 = _source101.dtor_nullable;
          return false;
        } else if (_source101.is_Div) {
          return false;
        } else if (_source101.is_EuclidianDiv) {
          return false;
        } else if (_source101.is_Mod) {
          return false;
        } else if (_source101.is_EuclidianMod) {
          return false;
        } else if (_source101.is_Lt) {
          return false;
        } else if (_source101.is_LtChar) {
          return false;
        } else if (_source101.is_Plus) {
          return false;
        } else if (_source101.is_Minus) {
          return false;
        } else if (_source101.is_Times) {
          return false;
        } else if (_source101.is_BitwiseAnd) {
          return false;
        } else if (_source101.is_BitwiseOr) {
          return false;
        } else if (_source101.is_BitwiseXor) {
          return false;
        } else if (_source101.is_BitwiseShiftRight) {
          return false;
        } else if (_source101.is_BitwiseShiftLeft) {
          return false;
        } else if (_source101.is_And) {
          return false;
        } else if (_source101.is_Or) {
          return false;
        } else if (_source101.is_In) {
          return false;
        } else if (_source101.is_SeqProperPrefix) {
          return false;
        } else if (_source101.is_SeqPrefix) {
          return false;
        } else if (_source101.is_SetMerge) {
          return true;
        } else if (_source101.is_SetSubtraction) {
          return true;
        } else if (_source101.is_SetIntersection) {
          return true;
        } else if (_source101.is_Subset) {
          return false;
        } else if (_source101.is_ProperSubset) {
          return false;
        } else if (_source101.is_SetDisjoint) {
          return true;
        } else if (_source101.is_MapMerge) {
          return true;
        } else if (_source101.is_MapSubtraction) {
          return true;
        } else if (_source101.is_MultisetMerge) {
          return true;
        } else if (_source101.is_MultisetSubtraction) {
          return true;
        } else if (_source101.is_MultisetIntersection) {
          return true;
        } else if (_source101.is_Submultiset) {
          return false;
        } else if (_source101.is_ProperSubmultiset) {
          return false;
        } else if (_source101.is_MultisetDisjoint) {
          return true;
        } else if (_source101.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _3167___mcc_h4 = _source101.dtor_Passthrough_a0;
          return false;
        }
      }))(_3160_op);
      bool _3168_becomesRightCallsLeft;
      _3168_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source102) => {
        if (_source102.is_Eq) {
          bool _3169___mcc_h6 = _source102.dtor_referential;
          bool _3170___mcc_h7 = _source102.dtor_nullable;
          return false;
        } else if (_source102.is_Div) {
          return false;
        } else if (_source102.is_EuclidianDiv) {
          return false;
        } else if (_source102.is_Mod) {
          return false;
        } else if (_source102.is_EuclidianMod) {
          return false;
        } else if (_source102.is_Lt) {
          return false;
        } else if (_source102.is_LtChar) {
          return false;
        } else if (_source102.is_Plus) {
          return false;
        } else if (_source102.is_Minus) {
          return false;
        } else if (_source102.is_Times) {
          return false;
        } else if (_source102.is_BitwiseAnd) {
          return false;
        } else if (_source102.is_BitwiseOr) {
          return false;
        } else if (_source102.is_BitwiseXor) {
          return false;
        } else if (_source102.is_BitwiseShiftRight) {
          return false;
        } else if (_source102.is_BitwiseShiftLeft) {
          return false;
        } else if (_source102.is_And) {
          return false;
        } else if (_source102.is_Or) {
          return false;
        } else if (_source102.is_In) {
          return true;
        } else if (_source102.is_SeqProperPrefix) {
          return false;
        } else if (_source102.is_SeqPrefix) {
          return false;
        } else if (_source102.is_SetMerge) {
          return false;
        } else if (_source102.is_SetSubtraction) {
          return false;
        } else if (_source102.is_SetIntersection) {
          return false;
        } else if (_source102.is_Subset) {
          return false;
        } else if (_source102.is_ProperSubset) {
          return false;
        } else if (_source102.is_SetDisjoint) {
          return false;
        } else if (_source102.is_MapMerge) {
          return false;
        } else if (_source102.is_MapSubtraction) {
          return false;
        } else if (_source102.is_MultisetMerge) {
          return false;
        } else if (_source102.is_MultisetSubtraction) {
          return false;
        } else if (_source102.is_MultisetIntersection) {
          return false;
        } else if (_source102.is_Submultiset) {
          return false;
        } else if (_source102.is_ProperSubmultiset) {
          return false;
        } else if (_source102.is_MultisetDisjoint) {
          return false;
        } else if (_source102.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _3171___mcc_h10 = _source102.dtor_Passthrough_a0;
          return false;
        }
      }))(_3160_op);
      bool _3172_becomesCallLeftRight;
      _3172_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source103) => {
        if (_source103.is_Eq) {
          bool _3173___mcc_h12 = _source103.dtor_referential;
          bool _3174___mcc_h13 = _source103.dtor_nullable;
          if ((_3173___mcc_h12) == (true)) {
            if ((_3174___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source103.is_Div) {
          return false;
        } else if (_source103.is_EuclidianDiv) {
          return false;
        } else if (_source103.is_Mod) {
          return false;
        } else if (_source103.is_EuclidianMod) {
          return false;
        } else if (_source103.is_Lt) {
          return false;
        } else if (_source103.is_LtChar) {
          return false;
        } else if (_source103.is_Plus) {
          return false;
        } else if (_source103.is_Minus) {
          return false;
        } else if (_source103.is_Times) {
          return false;
        } else if (_source103.is_BitwiseAnd) {
          return false;
        } else if (_source103.is_BitwiseOr) {
          return false;
        } else if (_source103.is_BitwiseXor) {
          return false;
        } else if (_source103.is_BitwiseShiftRight) {
          return false;
        } else if (_source103.is_BitwiseShiftLeft) {
          return false;
        } else if (_source103.is_And) {
          return false;
        } else if (_source103.is_Or) {
          return false;
        } else if (_source103.is_In) {
          return false;
        } else if (_source103.is_SeqProperPrefix) {
          return false;
        } else if (_source103.is_SeqPrefix) {
          return false;
        } else if (_source103.is_SetMerge) {
          return false;
        } else if (_source103.is_SetSubtraction) {
          return false;
        } else if (_source103.is_SetIntersection) {
          return false;
        } else if (_source103.is_Subset) {
          return false;
        } else if (_source103.is_ProperSubset) {
          return false;
        } else if (_source103.is_SetDisjoint) {
          return false;
        } else if (_source103.is_MapMerge) {
          return false;
        } else if (_source103.is_MapSubtraction) {
          return false;
        } else if (_source103.is_MultisetMerge) {
          return false;
        } else if (_source103.is_MultisetSubtraction) {
          return false;
        } else if (_source103.is_MultisetIntersection) {
          return false;
        } else if (_source103.is_Submultiset) {
          return false;
        } else if (_source103.is_ProperSubmultiset) {
          return false;
        } else if (_source103.is_MultisetDisjoint) {
          return false;
        } else if (_source103.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _3175___mcc_h16 = _source103.dtor_Passthrough_a0;
          return false;
        }
      }))(_3160_op);
      DCOMP._IOwnership _3176_expectedLeftOwnership;
      _3176_expectedLeftOwnership = ((_3164_becomesLeftCallsRight) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : ((((_3168_becomesRightCallsLeft) || (_3172_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      DCOMP._IOwnership _3177_expectedRightOwnership;
      _3177_expectedRightOwnership = (((_3164_becomesLeftCallsRight) || (_3172_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (((_3168_becomesRightCallsLeft) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _3178_left;
      DCOMP._IOwnership _3179___v66;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3180_recIdentsL;
      RAST._IExpr _out189;
      DCOMP._IOwnership _out190;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
      DCOMP.COMP.GenExpr(_3161_lExpr, selfIdent, env, _3176_expectedLeftOwnership, out _out189, out _out190, out _out191);
      _3178_left = _out189;
      _3179___v66 = _out190;
      _3180_recIdentsL = _out191;
      RAST._IExpr _3181_right;
      DCOMP._IOwnership _3182___v67;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3183_recIdentsR;
      RAST._IExpr _out192;
      DCOMP._IOwnership _out193;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
      DCOMP.COMP.GenExpr(_3162_rExpr, selfIdent, env, _3177_expectedRightOwnership, out _out192, out _out193, out _out194);
      _3181_right = _out192;
      _3182___v67 = _out193;
      _3183_recIdentsR = _out194;
      DAST._IBinOp _source104 = _3160_op;
      if (_source104.is_Eq) {
        bool _3184___mcc_h18 = _source104.dtor_referential;
        bool _3185___mcc_h19 = _source104.dtor_nullable;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source105 = _3160_op;
            if (_source105.is_Eq) {
              bool _3186___mcc_h24 = _source105.dtor_referential;
              bool _3187___mcc_h25 = _source105.dtor_nullable;
              bool _3188_nullable = _3187___mcc_h25;
              bool _3189_referential = _3186___mcc_h24;
              {
                if (_3189_referential) {
                  if (_3188_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source105.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source105.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3190___mcc_h26 = _source105.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3191_op = _3190___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_3191_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_Div) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source106 = _3160_op;
            if (_source106.is_Eq) {
              bool _3192___mcc_h27 = _source106.dtor_referential;
              bool _3193___mcc_h28 = _source106.dtor_nullable;
              bool _3194_nullable = _3193___mcc_h28;
              bool _3195_referential = _3192___mcc_h27;
              {
                if (_3195_referential) {
                  if (_3194_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source106.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source106.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3196___mcc_h29 = _source106.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3197_op = _3196___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_3197_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_EuclidianDiv) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source107 = _3160_op;
            if (_source107.is_Eq) {
              bool _3198___mcc_h30 = _source107.dtor_referential;
              bool _3199___mcc_h31 = _source107.dtor_nullable;
              bool _3200_nullable = _3199___mcc_h31;
              bool _3201_referential = _3198___mcc_h30;
              {
                if (_3201_referential) {
                  if (_3200_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source107.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source107.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3202___mcc_h32 = _source107.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3203_op = _3202___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_3203_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_Mod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source108 = _3160_op;
            if (_source108.is_Eq) {
              bool _3204___mcc_h33 = _source108.dtor_referential;
              bool _3205___mcc_h34 = _source108.dtor_nullable;
              bool _3206_nullable = _3205___mcc_h34;
              bool _3207_referential = _3204___mcc_h33;
              {
                if (_3207_referential) {
                  if (_3206_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source108.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source108.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3208___mcc_h35 = _source108.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3209_op = _3208___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_3209_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_EuclidianMod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source109 = _3160_op;
            if (_source109.is_Eq) {
              bool _3210___mcc_h36 = _source109.dtor_referential;
              bool _3211___mcc_h37 = _source109.dtor_nullable;
              bool _3212_nullable = _3211___mcc_h37;
              bool _3213_referential = _3210___mcc_h36;
              {
                if (_3213_referential) {
                  if (_3212_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source109.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source109.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3214___mcc_h38 = _source109.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3215_op = _3214___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_3215_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_Lt) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source110 = _3160_op;
            if (_source110.is_Eq) {
              bool _3216___mcc_h39 = _source110.dtor_referential;
              bool _3217___mcc_h40 = _source110.dtor_nullable;
              bool _3218_nullable = _3217___mcc_h40;
              bool _3219_referential = _3216___mcc_h39;
              {
                if (_3219_referential) {
                  if (_3218_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source110.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source110.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3220___mcc_h41 = _source110.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3221_op = _3220___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_3221_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_LtChar) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source111 = _3160_op;
            if (_source111.is_Eq) {
              bool _3222___mcc_h42 = _source111.dtor_referential;
              bool _3223___mcc_h43 = _source111.dtor_nullable;
              bool _3224_nullable = _3223___mcc_h43;
              bool _3225_referential = _3222___mcc_h42;
              {
                if (_3225_referential) {
                  if (_3224_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source111.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source111.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3226___mcc_h44 = _source111.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3227_op = _3226___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_3227_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_Plus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source112 = _3160_op;
            if (_source112.is_Eq) {
              bool _3228___mcc_h45 = _source112.dtor_referential;
              bool _3229___mcc_h46 = _source112.dtor_nullable;
              bool _3230_nullable = _3229___mcc_h46;
              bool _3231_referential = _3228___mcc_h45;
              {
                if (_3231_referential) {
                  if (_3230_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source112.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source112.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3232___mcc_h47 = _source112.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3233_op = _3232___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_3233_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_Minus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source113 = _3160_op;
            if (_source113.is_Eq) {
              bool _3234___mcc_h48 = _source113.dtor_referential;
              bool _3235___mcc_h49 = _source113.dtor_nullable;
              bool _3236_nullable = _3235___mcc_h49;
              bool _3237_referential = _3234___mcc_h48;
              {
                if (_3237_referential) {
                  if (_3236_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source113.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source113.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3238___mcc_h50 = _source113.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3239_op = _3238___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_3239_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_Times) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source114 = _3160_op;
            if (_source114.is_Eq) {
              bool _3240___mcc_h51 = _source114.dtor_referential;
              bool _3241___mcc_h52 = _source114.dtor_nullable;
              bool _3242_nullable = _3241___mcc_h52;
              bool _3243_referential = _3240___mcc_h51;
              {
                if (_3243_referential) {
                  if (_3242_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source114.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source114.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3244___mcc_h53 = _source114.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3245_op = _3244___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_3245_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_BitwiseAnd) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source115 = _3160_op;
            if (_source115.is_Eq) {
              bool _3246___mcc_h54 = _source115.dtor_referential;
              bool _3247___mcc_h55 = _source115.dtor_nullable;
              bool _3248_nullable = _3247___mcc_h55;
              bool _3249_referential = _3246___mcc_h54;
              {
                if (_3249_referential) {
                  if (_3248_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source115.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source115.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3250___mcc_h56 = _source115.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3251_op = _3250___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_3251_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_BitwiseOr) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source116 = _3160_op;
            if (_source116.is_Eq) {
              bool _3252___mcc_h57 = _source116.dtor_referential;
              bool _3253___mcc_h58 = _source116.dtor_nullable;
              bool _3254_nullable = _3253___mcc_h58;
              bool _3255_referential = _3252___mcc_h57;
              {
                if (_3255_referential) {
                  if (_3254_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source116.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source116.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3256___mcc_h59 = _source116.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3257_op = _3256___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_3257_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_BitwiseXor) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source117 = _3160_op;
            if (_source117.is_Eq) {
              bool _3258___mcc_h60 = _source117.dtor_referential;
              bool _3259___mcc_h61 = _source117.dtor_nullable;
              bool _3260_nullable = _3259___mcc_h61;
              bool _3261_referential = _3258___mcc_h60;
              {
                if (_3261_referential) {
                  if (_3260_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source117.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source117.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3262___mcc_h62 = _source117.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3263_op = _3262___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_3263_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_BitwiseShiftRight) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source118 = _3160_op;
            if (_source118.is_Eq) {
              bool _3264___mcc_h63 = _source118.dtor_referential;
              bool _3265___mcc_h64 = _source118.dtor_nullable;
              bool _3266_nullable = _3265___mcc_h64;
              bool _3267_referential = _3264___mcc_h63;
              {
                if (_3267_referential) {
                  if (_3266_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source118.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source118.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3268___mcc_h65 = _source118.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3269_op = _3268___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_3269_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_BitwiseShiftLeft) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source119 = _3160_op;
            if (_source119.is_Eq) {
              bool _3270___mcc_h66 = _source119.dtor_referential;
              bool _3271___mcc_h67 = _source119.dtor_nullable;
              bool _3272_nullable = _3271___mcc_h67;
              bool _3273_referential = _3270___mcc_h66;
              {
                if (_3273_referential) {
                  if (_3272_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source119.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source119.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3274___mcc_h68 = _source119.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3275_op = _3274___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_3275_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_And) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source120 = _3160_op;
            if (_source120.is_Eq) {
              bool _3276___mcc_h69 = _source120.dtor_referential;
              bool _3277___mcc_h70 = _source120.dtor_nullable;
              bool _3278_nullable = _3277___mcc_h70;
              bool _3279_referential = _3276___mcc_h69;
              {
                if (_3279_referential) {
                  if (_3278_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source120.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source120.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3280___mcc_h71 = _source120.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3281_op = _3280___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_3281_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_Or) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source121 = _3160_op;
            if (_source121.is_Eq) {
              bool _3282___mcc_h72 = _source121.dtor_referential;
              bool _3283___mcc_h73 = _source121.dtor_nullable;
              bool _3284_nullable = _3283___mcc_h73;
              bool _3285_referential = _3282___mcc_h72;
              {
                if (_3285_referential) {
                  if (_3284_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source121.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source121.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3286___mcc_h74 = _source121.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3287_op = _3286___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_3287_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      } else if (_source104.is_In) {
        {
          r = ((_3181_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_3178_left);
        }
      } else if (_source104.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3178_left, _3181_right, _3163_format);
      } else if (_source104.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3178_left, _3181_right, _3163_format);
      } else if (_source104.is_SetMerge) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3181_right);
        }
      } else if (_source104.is_SetSubtraction) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3181_right);
        }
      } else if (_source104.is_SetIntersection) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3181_right);
        }
      } else if (_source104.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3178_left, _3181_right, _3163_format);
        }
      } else if (_source104.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3178_left, _3181_right, _3163_format);
        }
      } else if (_source104.is_SetDisjoint) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3181_right);
        }
      } else if (_source104.is_MapMerge) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3181_right);
        }
      } else if (_source104.is_MapSubtraction) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3181_right);
        }
      } else if (_source104.is_MultisetMerge) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3181_right);
        }
      } else if (_source104.is_MultisetSubtraction) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3181_right);
        }
      } else if (_source104.is_MultisetIntersection) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3181_right);
        }
      } else if (_source104.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3178_left, _3181_right, _3163_format);
        }
      } else if (_source104.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3178_left, _3181_right, _3163_format);
        }
      } else if (_source104.is_MultisetDisjoint) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3181_right);
        }
      } else if (_source104.is_Concat) {
        {
          r = ((_3178_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_3181_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _3288___mcc_h22 = _source104.dtor_Passthrough_a0;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3160_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3160_op), _3178_left, _3181_right, _3163_format);
          } else {
            DAST._IBinOp _source122 = _3160_op;
            if (_source122.is_Eq) {
              bool _3289___mcc_h75 = _source122.dtor_referential;
              bool _3290___mcc_h76 = _source122.dtor_nullable;
              bool _3291_nullable = _3290___mcc_h76;
              bool _3292_referential = _3289___mcc_h75;
              {
                if (_3292_referential) {
                  if (_3291_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3178_left, _3181_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source122.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else if (_source122.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3178_left, _3181_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3293___mcc_h77 = _source122.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3294_op = _3293___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_3294_op, _3178_left, _3181_right, _3163_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out195;
      DCOMP._IOwnership _out196;
      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out195, out _out196);
      r = _out195;
      resultingOwnership = _out196;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3180_recIdentsL, _3183_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs51 = e;
      DAST._IExpression _3295_expr = _let_tmp_rhs51.dtor_value;
      DAST._IType _3296_fromTpe = _let_tmp_rhs51.dtor_from;
      DAST._IType _3297_toTpe = _let_tmp_rhs51.dtor_typ;
      if (object.Equals(_3296_fromTpe, _3297_toTpe)) {
        RAST._IExpr _3298_recursiveGen;
        DCOMP._IOwnership _3299_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3300_recIdents;
        RAST._IExpr _out197;
        DCOMP._IOwnership _out198;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out197, out _out198, out _out199);
        _3298_recursiveGen = _out197;
        _3299_recOwned = _out198;
        _3300_recIdents = _out199;
        r = _3298_recursiveGen;
        RAST._IExpr _out200;
        DCOMP._IOwnership _out201;
        DCOMP.COMP.FromOwnership(r, _3299_recOwned, expectedOwnership, out _out200, out _out201);
        r = _out200;
        resultingOwnership = _out201;
        readIdents = _3300_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source123 = _System.Tuple2<DAST._IType, DAST._IType>.create(_3296_fromTpe, _3297_toTpe);
        DAST._IType _3301___mcc_h0 = _source123.dtor__0;
        DAST._IType _3302___mcc_h1 = _source123.dtor__1;
        DAST._IType _source124 = _3301___mcc_h0;
        if (_source124.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3303___mcc_h4 = _source124.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _3304___mcc_h5 = _source124.dtor_typeArgs;
          DAST._IResolvedType _3305___mcc_h6 = _source124.dtor_resolved;
          DAST._IResolvedType _source125 = _3305___mcc_h6;
          if (_source125.is_Datatype) {
            DAST._IDatatypeType _3306___mcc_h16 = _source125.dtor_datatypeType;
            DAST._IType _source126 = _3302___mcc_h1;
            if (_source126.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3307___mcc_h20 = _source126.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3308___mcc_h21 = _source126.dtor_typeArgs;
              DAST._IResolvedType _3309___mcc_h22 = _source126.dtor_resolved;
              DAST._IResolvedType _source127 = _3309___mcc_h22;
              if (_source127.is_Datatype) {
                DAST._IDatatypeType _3310___mcc_h26 = _source127.dtor_datatypeType;
                {
                  RAST._IExpr _3311_recursiveGen;
                  DCOMP._IOwnership _3312_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3313_recIdents;
                  RAST._IExpr _out202;
                  DCOMP._IOwnership _out203;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out202, out _out203, out _out204);
                  _3311_recursiveGen = _out202;
                  _3312_recOwned = _out203;
                  _3313_recIdents = _out204;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3311_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out205;
                  DCOMP._IOwnership _out206;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out205, out _out206);
                  r = _out205;
                  resultingOwnership = _out206;
                  readIdents = _3313_recIdents;
                }
              } else if (_source127.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3314___mcc_h28 = _source127.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3315___mcc_h29 = _source127.dtor_attributes;
                {
                  RAST._IExpr _3316_recursiveGen;
                  DCOMP._IOwnership _3317_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3318_recIdents;
                  RAST._IExpr _out207;
                  DCOMP._IOwnership _out208;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out207, out _out208, out _out209);
                  _3316_recursiveGen = _out207;
                  _3317_recOwned = _out208;
                  _3318_recIdents = _out209;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3316_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out210;
                  DCOMP._IOwnership _out211;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out210, out _out211);
                  r = _out210;
                  resultingOwnership = _out211;
                  readIdents = _3318_recIdents;
                }
              } else {
                DAST._IType _3319___mcc_h32 = _source127.dtor_baseType;
                DAST._INewtypeRange _3320___mcc_h33 = _source127.dtor_range;
                bool _3321___mcc_h34 = _source127.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3322___mcc_h35 = _source127.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3323_attributes = _3322___mcc_h35;
                bool _3324_erase = _3321___mcc_h34;
                DAST._INewtypeRange _3325_range = _3320___mcc_h33;
                DAST._IType _3326_b = _3319___mcc_h32;
                {
                  Std.Wrappers._IOption<RAST._IType> _3327_nativeToType;
                  _3327_nativeToType = DCOMP.COMP.NewtypeToRustType(_3326_b, _3325_range);
                  if (object.Equals(_3296_fromTpe, _3326_b)) {
                    RAST._IExpr _3328_recursiveGen;
                    DCOMP._IOwnership _3329_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3330_recIdents;
                    RAST._IExpr _out212;
                    DCOMP._IOwnership _out213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out212, out _out213, out _out214);
                    _3328_recursiveGen = _out212;
                    _3329_recOwned = _out213;
                    _3330_recIdents = _out214;
                    readIdents = _3330_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source128 = _3327_nativeToType;
                    if (_source128.is_None) {
                      if (_3324_erase) {
                        r = _3328_recursiveGen;
                      } else {
                        RAST._IType _3331_rhsType;
                        RAST._IType _out215;
                        _out215 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                        _3331_rhsType = _out215;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3331_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3328_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out216;
                      DCOMP._IOwnership _out217;
                      DCOMP.COMP.FromOwnership(r, _3329_recOwned, expectedOwnership, out _out216, out _out217);
                      r = _out216;
                      resultingOwnership = _out217;
                    } else {
                      RAST._IType _3332___mcc_h1246 = _source128.dtor_value;
                      RAST._IType _3333_v = _3332___mcc_h1246;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3328_recursiveGen, RAST.Expr.create_ExprFromType(_3333_v)));
                      RAST._IExpr _out218;
                      DCOMP._IOwnership _out219;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out218, out _out219);
                      r = _out218;
                      resultingOwnership = _out219;
                    }
                  } else {
                    if ((_3327_nativeToType).is_Some) {
                      DAST._IType _source129 = _3296_fromTpe;
                      if (_source129.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3334___mcc_h1247 = _source129.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _3335___mcc_h1248 = _source129.dtor_typeArgs;
                        DAST._IResolvedType _3336___mcc_h1249 = _source129.dtor_resolved;
                        DAST._IResolvedType _source130 = _3336___mcc_h1249;
                        if (_source130.is_Datatype) {
                          DAST._IDatatypeType _3337___mcc_h1253 = _source130.dtor_datatypeType;
                        } else if (_source130.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3338___mcc_h1255 = _source130.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _3339___mcc_h1256 = _source130.dtor_attributes;
                        } else {
                          DAST._IType _3340___mcc_h1259 = _source130.dtor_baseType;
                          DAST._INewtypeRange _3341___mcc_h1260 = _source130.dtor_range;
                          bool _3342___mcc_h1261 = _source130.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _3343___mcc_h1262 = _source130.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _3344_attributes0 = _3343___mcc_h1262;
                          bool _3345_erase0 = _3342___mcc_h1261;
                          DAST._INewtypeRange _3346_range0 = _3341___mcc_h1260;
                          DAST._IType _3347_b0 = _3340___mcc_h1259;
                          {
                            Std.Wrappers._IOption<RAST._IType> _3348_nativeFromType;
                            _3348_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3347_b0, _3346_range0);
                            if ((_3348_nativeFromType).is_Some) {
                              RAST._IExpr _3349_recursiveGen;
                              DCOMP._IOwnership _3350_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3351_recIdents;
                              RAST._IExpr _out220;
                              DCOMP._IOwnership _out221;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out220, out _out221, out _out222);
                              _3349_recursiveGen = _out220;
                              _3350_recOwned = _out221;
                              _3351_recIdents = _out222;
                              RAST._IExpr _out223;
                              DCOMP._IOwnership _out224;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_3349_recursiveGen, (_3327_nativeToType).dtor_value), _3350_recOwned, expectedOwnership, out _out223, out _out224);
                              r = _out223;
                              resultingOwnership = _out224;
                              readIdents = _3351_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source129.is_Nullable) {
                        DAST._IType _3352___mcc_h1267 = _source129.dtor_Nullable_a0;
                      } else if (_source129.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _3353___mcc_h1269 = _source129.dtor_Tuple_a0;
                      } else if (_source129.is_Array) {
                        DAST._IType _3354___mcc_h1271 = _source129.dtor_element;
                        BigInteger _3355___mcc_h1272 = _source129.dtor_dims;
                      } else if (_source129.is_Seq) {
                        DAST._IType _3356___mcc_h1275 = _source129.dtor_element;
                      } else if (_source129.is_Set) {
                        DAST._IType _3357___mcc_h1277 = _source129.dtor_element;
                      } else if (_source129.is_Multiset) {
                        DAST._IType _3358___mcc_h1279 = _source129.dtor_element;
                      } else if (_source129.is_Map) {
                        DAST._IType _3359___mcc_h1281 = _source129.dtor_key;
                        DAST._IType _3360___mcc_h1282 = _source129.dtor_value;
                      } else if (_source129.is_SetBuilder) {
                        DAST._IType _3361___mcc_h1285 = _source129.dtor_element;
                      } else if (_source129.is_MapBuilder) {
                        DAST._IType _3362___mcc_h1287 = _source129.dtor_key;
                        DAST._IType _3363___mcc_h1288 = _source129.dtor_value;
                      } else if (_source129.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _3364___mcc_h1291 = _source129.dtor_args;
                        DAST._IType _3365___mcc_h1292 = _source129.dtor_result;
                      } else if (_source129.is_Primitive) {
                        DAST._IPrimitive _3366___mcc_h1295 = _source129.dtor_Primitive_a0;
                      } else if (_source129.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _3367___mcc_h1297 = _source129.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _3368___mcc_h1299 = _source129.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3369_recursiveGen;
                        DCOMP._IOwnership _3370_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3371_recIdents;
                        RAST._IExpr _out225;
                        DCOMP._IOwnership _out226;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out227;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out225, out _out226, out _out227);
                        _3369_recursiveGen = _out225;
                        _3370_recOwned = _out226;
                        _3371_recIdents = _out227;
                        RAST._IExpr _out228;
                        DCOMP._IOwnership _out229;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_3369_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3327_nativeToType).dtor_value), _3370_recOwned, expectedOwnership, out _out228, out _out229);
                        r = _out228;
                        resultingOwnership = _out229;
                        readIdents = _3371_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out230;
                    DCOMP._IOwnership _out231;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out232;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3326_b), _3326_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out230, out _out231, out _out232);
                    r = _out230;
                    resultingOwnership = _out231;
                    readIdents = _out232;
                  }
                }
              }
            } else if (_source126.is_Nullable) {
              DAST._IType _3372___mcc_h40 = _source126.dtor_Nullable_a0;
              {
                RAST._IExpr _3373_recursiveGen;
                DCOMP._IOwnership _3374_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3375_recIdents;
                RAST._IExpr _out233;
                DCOMP._IOwnership _out234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out233, out _out234, out _out235);
                _3373_recursiveGen = _out233;
                _3374_recOwned = _out234;
                _3375_recIdents = _out235;
                r = _3373_recursiveGen;
                if (object.Equals(_3374_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out236;
                DCOMP._IOwnership _out237;
                DCOMP.COMP.FromOwnership(r, _3374_recOwned, expectedOwnership, out _out236, out _out237);
                r = _out236;
                resultingOwnership = _out237;
                readIdents = _3375_recIdents;
              }
            } else if (_source126.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3376___mcc_h42 = _source126.dtor_Tuple_a0;
              {
                RAST._IExpr _3377_recursiveGen;
                DCOMP._IOwnership _3378_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3379_recIdents;
                RAST._IExpr _out238;
                DCOMP._IOwnership _out239;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out240;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out238, out _out239, out _out240);
                _3377_recursiveGen = _out238;
                _3378_recOwned = _out239;
                _3379_recIdents = _out240;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3377_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out241;
                DCOMP._IOwnership _out242;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out241, out _out242);
                r = _out241;
                resultingOwnership = _out242;
                readIdents = _3379_recIdents;
              }
            } else if (_source126.is_Array) {
              DAST._IType _3380___mcc_h44 = _source126.dtor_element;
              BigInteger _3381___mcc_h45 = _source126.dtor_dims;
              {
                RAST._IExpr _3382_recursiveGen;
                DCOMP._IOwnership _3383_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3384_recIdents;
                RAST._IExpr _out243;
                DCOMP._IOwnership _out244;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out245;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out243, out _out244, out _out245);
                _3382_recursiveGen = _out243;
                _3383_recOwned = _out244;
                _3384_recIdents = _out245;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3382_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out246;
                DCOMP._IOwnership _out247;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out246, out _out247);
                r = _out246;
                resultingOwnership = _out247;
                readIdents = _3384_recIdents;
              }
            } else if (_source126.is_Seq) {
              DAST._IType _3385___mcc_h48 = _source126.dtor_element;
              {
                RAST._IExpr _3386_recursiveGen;
                DCOMP._IOwnership _3387_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3388_recIdents;
                RAST._IExpr _out248;
                DCOMP._IOwnership _out249;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out248, out _out249, out _out250);
                _3386_recursiveGen = _out248;
                _3387_recOwned = _out249;
                _3388_recIdents = _out250;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3386_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out251;
                DCOMP._IOwnership _out252;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out251, out _out252);
                r = _out251;
                resultingOwnership = _out252;
                readIdents = _3388_recIdents;
              }
            } else if (_source126.is_Set) {
              DAST._IType _3389___mcc_h50 = _source126.dtor_element;
              {
                RAST._IExpr _3390_recursiveGen;
                DCOMP._IOwnership _3391_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3392_recIdents;
                RAST._IExpr _out253;
                DCOMP._IOwnership _out254;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out253, out _out254, out _out255);
                _3390_recursiveGen = _out253;
                _3391_recOwned = _out254;
                _3392_recIdents = _out255;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3390_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out256;
                DCOMP._IOwnership _out257;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out256, out _out257);
                r = _out256;
                resultingOwnership = _out257;
                readIdents = _3392_recIdents;
              }
            } else if (_source126.is_Multiset) {
              DAST._IType _3393___mcc_h52 = _source126.dtor_element;
              {
                RAST._IExpr _3394_recursiveGen;
                DCOMP._IOwnership _3395_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3396_recIdents;
                RAST._IExpr _out258;
                DCOMP._IOwnership _out259;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out258, out _out259, out _out260);
                _3394_recursiveGen = _out258;
                _3395_recOwned = _out259;
                _3396_recIdents = _out260;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3394_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out261;
                DCOMP._IOwnership _out262;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out261, out _out262);
                r = _out261;
                resultingOwnership = _out262;
                readIdents = _3396_recIdents;
              }
            } else if (_source126.is_Map) {
              DAST._IType _3397___mcc_h54 = _source126.dtor_key;
              DAST._IType _3398___mcc_h55 = _source126.dtor_value;
              {
                RAST._IExpr _3399_recursiveGen;
                DCOMP._IOwnership _3400_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3401_recIdents;
                RAST._IExpr _out263;
                DCOMP._IOwnership _out264;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out263, out _out264, out _out265);
                _3399_recursiveGen = _out263;
                _3400_recOwned = _out264;
                _3401_recIdents = _out265;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3399_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out266;
                DCOMP._IOwnership _out267;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out266, out _out267);
                r = _out266;
                resultingOwnership = _out267;
                readIdents = _3401_recIdents;
              }
            } else if (_source126.is_SetBuilder) {
              DAST._IType _3402___mcc_h58 = _source126.dtor_element;
              {
                RAST._IExpr _3403_recursiveGen;
                DCOMP._IOwnership _3404_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3405_recIdents;
                RAST._IExpr _out268;
                DCOMP._IOwnership _out269;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out268, out _out269, out _out270);
                _3403_recursiveGen = _out268;
                _3404_recOwned = _out269;
                _3405_recIdents = _out270;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3403_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out271;
                DCOMP._IOwnership _out272;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out271, out _out272);
                r = _out271;
                resultingOwnership = _out272;
                readIdents = _3405_recIdents;
              }
            } else if (_source126.is_MapBuilder) {
              DAST._IType _3406___mcc_h60 = _source126.dtor_key;
              DAST._IType _3407___mcc_h61 = _source126.dtor_value;
              {
                RAST._IExpr _3408_recursiveGen;
                DCOMP._IOwnership _3409_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3410_recIdents;
                RAST._IExpr _out273;
                DCOMP._IOwnership _out274;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out273, out _out274, out _out275);
                _3408_recursiveGen = _out273;
                _3409_recOwned = _out274;
                _3410_recIdents = _out275;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3408_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out276;
                DCOMP._IOwnership _out277;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out276, out _out277);
                r = _out276;
                resultingOwnership = _out277;
                readIdents = _3410_recIdents;
              }
            } else if (_source126.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3411___mcc_h64 = _source126.dtor_args;
              DAST._IType _3412___mcc_h65 = _source126.dtor_result;
              {
                RAST._IExpr _3413_recursiveGen;
                DCOMP._IOwnership _3414_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3415_recIdents;
                RAST._IExpr _out278;
                DCOMP._IOwnership _out279;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out280;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out278, out _out279, out _out280);
                _3413_recursiveGen = _out278;
                _3414_recOwned = _out279;
                _3415_recIdents = _out280;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3413_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out281;
                DCOMP._IOwnership _out282;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out281, out _out282);
                r = _out281;
                resultingOwnership = _out282;
                readIdents = _3415_recIdents;
              }
            } else if (_source126.is_Primitive) {
              DAST._IPrimitive _3416___mcc_h68 = _source126.dtor_Primitive_a0;
              {
                RAST._IExpr _3417_recursiveGen;
                DCOMP._IOwnership _3418_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3419_recIdents;
                RAST._IExpr _out283;
                DCOMP._IOwnership _out284;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out285;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out283, out _out284, out _out285);
                _3417_recursiveGen = _out283;
                _3418_recOwned = _out284;
                _3419_recIdents = _out285;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3417_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out286;
                DCOMP._IOwnership _out287;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out286, out _out287);
                r = _out286;
                resultingOwnership = _out287;
                readIdents = _3419_recIdents;
              }
            } else if (_source126.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3420___mcc_h70 = _source126.dtor_Passthrough_a0;
              {
                RAST._IExpr _3421_recursiveGen;
                DCOMP._IOwnership _3422_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3423_recIdents;
                RAST._IExpr _out288;
                DCOMP._IOwnership _out289;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out288, out _out289, out _out290);
                _3421_recursiveGen = _out288;
                _3422_recOwned = _out289;
                _3423_recIdents = _out290;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3421_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out291;
                DCOMP._IOwnership _out292;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out291, out _out292);
                r = _out291;
                resultingOwnership = _out292;
                readIdents = _3423_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3424___mcc_h72 = _source126.dtor_TypeArg_a0;
              {
                RAST._IExpr _3425_recursiveGen;
                DCOMP._IOwnership _3426_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3427_recIdents;
                RAST._IExpr _out293;
                DCOMP._IOwnership _out294;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out293, out _out294, out _out295);
                _3425_recursiveGen = _out293;
                _3426_recOwned = _out294;
                _3427_recIdents = _out295;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3425_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out296;
                DCOMP._IOwnership _out297;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out296, out _out297);
                r = _out296;
                resultingOwnership = _out297;
                readIdents = _3427_recIdents;
              }
            }
          } else if (_source125.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3428___mcc_h74 = _source125.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _3429___mcc_h75 = _source125.dtor_attributes;
            DAST._IType _source131 = _3302___mcc_h1;
            if (_source131.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3430___mcc_h82 = _source131.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3431___mcc_h83 = _source131.dtor_typeArgs;
              DAST._IResolvedType _3432___mcc_h84 = _source131.dtor_resolved;
              DAST._IResolvedType _source132 = _3432___mcc_h84;
              if (_source132.is_Datatype) {
                DAST._IDatatypeType _3433___mcc_h88 = _source132.dtor_datatypeType;
                {
                  RAST._IExpr _3434_recursiveGen;
                  DCOMP._IOwnership _3435_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3436_recIdents;
                  RAST._IExpr _out298;
                  DCOMP._IOwnership _out299;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out298, out _out299, out _out300);
                  _3434_recursiveGen = _out298;
                  _3435_recOwned = _out299;
                  _3436_recIdents = _out300;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3434_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out301;
                  DCOMP._IOwnership _out302;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out301, out _out302);
                  r = _out301;
                  resultingOwnership = _out302;
                  readIdents = _3436_recIdents;
                }
              } else if (_source132.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3437___mcc_h90 = _source132.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3438___mcc_h91 = _source132.dtor_attributes;
                {
                  RAST._IExpr _3439_recursiveGen;
                  DCOMP._IOwnership _3440_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3441_recIdents;
                  RAST._IExpr _out303;
                  DCOMP._IOwnership _out304;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out305;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out303, out _out304, out _out305);
                  _3439_recursiveGen = _out303;
                  _3440_recOwned = _out304;
                  _3441_recIdents = _out305;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3439_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out306;
                  DCOMP._IOwnership _out307;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out306, out _out307);
                  r = _out306;
                  resultingOwnership = _out307;
                  readIdents = _3441_recIdents;
                }
              } else {
                DAST._IType _3442___mcc_h94 = _source132.dtor_baseType;
                DAST._INewtypeRange _3443___mcc_h95 = _source132.dtor_range;
                bool _3444___mcc_h96 = _source132.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3445___mcc_h97 = _source132.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3446_attributes = _3445___mcc_h97;
                bool _3447_erase = _3444___mcc_h96;
                DAST._INewtypeRange _3448_range = _3443___mcc_h95;
                DAST._IType _3449_b = _3442___mcc_h94;
                {
                  Std.Wrappers._IOption<RAST._IType> _3450_nativeToType;
                  _3450_nativeToType = DCOMP.COMP.NewtypeToRustType(_3449_b, _3448_range);
                  if (object.Equals(_3296_fromTpe, _3449_b)) {
                    RAST._IExpr _3451_recursiveGen;
                    DCOMP._IOwnership _3452_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3453_recIdents;
                    RAST._IExpr _out308;
                    DCOMP._IOwnership _out309;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out310;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out308, out _out309, out _out310);
                    _3451_recursiveGen = _out308;
                    _3452_recOwned = _out309;
                    _3453_recIdents = _out310;
                    readIdents = _3453_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source133 = _3450_nativeToType;
                    if (_source133.is_None) {
                      if (_3447_erase) {
                        r = _3451_recursiveGen;
                      } else {
                        RAST._IType _3454_rhsType;
                        RAST._IType _out311;
                        _out311 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                        _3454_rhsType = _out311;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3454_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3451_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out312;
                      DCOMP._IOwnership _out313;
                      DCOMP.COMP.FromOwnership(r, _3452_recOwned, expectedOwnership, out _out312, out _out313);
                      r = _out312;
                      resultingOwnership = _out313;
                    } else {
                      RAST._IType _3455___mcc_h1301 = _source133.dtor_value;
                      RAST._IType _3456_v = _3455___mcc_h1301;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3451_recursiveGen, RAST.Expr.create_ExprFromType(_3456_v)));
                      RAST._IExpr _out314;
                      DCOMP._IOwnership _out315;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out314, out _out315);
                      r = _out314;
                      resultingOwnership = _out315;
                    }
                  } else {
                    if ((_3450_nativeToType).is_Some) {
                      DAST._IType _source134 = _3296_fromTpe;
                      if (_source134.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3457___mcc_h1302 = _source134.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _3458___mcc_h1303 = _source134.dtor_typeArgs;
                        DAST._IResolvedType _3459___mcc_h1304 = _source134.dtor_resolved;
                        DAST._IResolvedType _source135 = _3459___mcc_h1304;
                        if (_source135.is_Datatype) {
                          DAST._IDatatypeType _3460___mcc_h1308 = _source135.dtor_datatypeType;
                        } else if (_source135.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3461___mcc_h1310 = _source135.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _3462___mcc_h1311 = _source135.dtor_attributes;
                        } else {
                          DAST._IType _3463___mcc_h1314 = _source135.dtor_baseType;
                          DAST._INewtypeRange _3464___mcc_h1315 = _source135.dtor_range;
                          bool _3465___mcc_h1316 = _source135.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _3466___mcc_h1317 = _source135.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _3467_attributes0 = _3466___mcc_h1317;
                          bool _3468_erase0 = _3465___mcc_h1316;
                          DAST._INewtypeRange _3469_range0 = _3464___mcc_h1315;
                          DAST._IType _3470_b0 = _3463___mcc_h1314;
                          {
                            Std.Wrappers._IOption<RAST._IType> _3471_nativeFromType;
                            _3471_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3470_b0, _3469_range0);
                            if ((_3471_nativeFromType).is_Some) {
                              RAST._IExpr _3472_recursiveGen;
                              DCOMP._IOwnership _3473_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3474_recIdents;
                              RAST._IExpr _out316;
                              DCOMP._IOwnership _out317;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out318;
                              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out316, out _out317, out _out318);
                              _3472_recursiveGen = _out316;
                              _3473_recOwned = _out317;
                              _3474_recIdents = _out318;
                              RAST._IExpr _out319;
                              DCOMP._IOwnership _out320;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_3472_recursiveGen, (_3450_nativeToType).dtor_value), _3473_recOwned, expectedOwnership, out _out319, out _out320);
                              r = _out319;
                              resultingOwnership = _out320;
                              readIdents = _3474_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source134.is_Nullable) {
                        DAST._IType _3475___mcc_h1322 = _source134.dtor_Nullable_a0;
                      } else if (_source134.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _3476___mcc_h1324 = _source134.dtor_Tuple_a0;
                      } else if (_source134.is_Array) {
                        DAST._IType _3477___mcc_h1326 = _source134.dtor_element;
                        BigInteger _3478___mcc_h1327 = _source134.dtor_dims;
                      } else if (_source134.is_Seq) {
                        DAST._IType _3479___mcc_h1330 = _source134.dtor_element;
                      } else if (_source134.is_Set) {
                        DAST._IType _3480___mcc_h1332 = _source134.dtor_element;
                      } else if (_source134.is_Multiset) {
                        DAST._IType _3481___mcc_h1334 = _source134.dtor_element;
                      } else if (_source134.is_Map) {
                        DAST._IType _3482___mcc_h1336 = _source134.dtor_key;
                        DAST._IType _3483___mcc_h1337 = _source134.dtor_value;
                      } else if (_source134.is_SetBuilder) {
                        DAST._IType _3484___mcc_h1340 = _source134.dtor_element;
                      } else if (_source134.is_MapBuilder) {
                        DAST._IType _3485___mcc_h1342 = _source134.dtor_key;
                        DAST._IType _3486___mcc_h1343 = _source134.dtor_value;
                      } else if (_source134.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _3487___mcc_h1346 = _source134.dtor_args;
                        DAST._IType _3488___mcc_h1347 = _source134.dtor_result;
                      } else if (_source134.is_Primitive) {
                        DAST._IPrimitive _3489___mcc_h1350 = _source134.dtor_Primitive_a0;
                      } else if (_source134.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _3490___mcc_h1352 = _source134.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _3491___mcc_h1354 = _source134.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3492_recursiveGen;
                        DCOMP._IOwnership _3493_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3494_recIdents;
                        RAST._IExpr _out321;
                        DCOMP._IOwnership _out322;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out323;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out321, out _out322, out _out323);
                        _3492_recursiveGen = _out321;
                        _3493_recOwned = _out322;
                        _3494_recIdents = _out323;
                        RAST._IExpr _out324;
                        DCOMP._IOwnership _out325;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_3492_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3450_nativeToType).dtor_value), _3493_recOwned, expectedOwnership, out _out324, out _out325);
                        r = _out324;
                        resultingOwnership = _out325;
                        readIdents = _3494_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out326;
                    DCOMP._IOwnership _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3449_b), _3449_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out326, out _out327, out _out328);
                    r = _out326;
                    resultingOwnership = _out327;
                    readIdents = _out328;
                  }
                }
              }
            } else if (_source131.is_Nullable) {
              DAST._IType _3495___mcc_h102 = _source131.dtor_Nullable_a0;
              {
                RAST._IExpr _3496_recursiveGen;
                DCOMP._IOwnership _3497_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3498_recIdents;
                RAST._IExpr _out329;
                DCOMP._IOwnership _out330;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out329, out _out330, out _out331);
                _3496_recursiveGen = _out329;
                _3497_recOwned = _out330;
                _3498_recIdents = _out331;
                r = _3496_recursiveGen;
                if (object.Equals(_3497_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out332;
                DCOMP._IOwnership _out333;
                DCOMP.COMP.FromOwnership(r, _3497_recOwned, expectedOwnership, out _out332, out _out333);
                r = _out332;
                resultingOwnership = _out333;
                readIdents = _3498_recIdents;
              }
            } else if (_source131.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3499___mcc_h104 = _source131.dtor_Tuple_a0;
              {
                RAST._IExpr _3500_recursiveGen;
                DCOMP._IOwnership _3501_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3502_recIdents;
                RAST._IExpr _out334;
                DCOMP._IOwnership _out335;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out334, out _out335, out _out336);
                _3500_recursiveGen = _out334;
                _3501_recOwned = _out335;
                _3502_recIdents = _out336;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3500_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out337;
                DCOMP._IOwnership _out338;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out337, out _out338);
                r = _out337;
                resultingOwnership = _out338;
                readIdents = _3502_recIdents;
              }
            } else if (_source131.is_Array) {
              DAST._IType _3503___mcc_h106 = _source131.dtor_element;
              BigInteger _3504___mcc_h107 = _source131.dtor_dims;
              {
                RAST._IExpr _3505_recursiveGen;
                DCOMP._IOwnership _3506_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3507_recIdents;
                RAST._IExpr _out339;
                DCOMP._IOwnership _out340;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out339, out _out340, out _out341);
                _3505_recursiveGen = _out339;
                _3506_recOwned = _out340;
                _3507_recIdents = _out341;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3505_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out342;
                DCOMP._IOwnership _out343;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out342, out _out343);
                r = _out342;
                resultingOwnership = _out343;
                readIdents = _3507_recIdents;
              }
            } else if (_source131.is_Seq) {
              DAST._IType _3508___mcc_h110 = _source131.dtor_element;
              {
                RAST._IExpr _3509_recursiveGen;
                DCOMP._IOwnership _3510_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3511_recIdents;
                RAST._IExpr _out344;
                DCOMP._IOwnership _out345;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out346;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out344, out _out345, out _out346);
                _3509_recursiveGen = _out344;
                _3510_recOwned = _out345;
                _3511_recIdents = _out346;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3509_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out347;
                DCOMP._IOwnership _out348;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out347, out _out348);
                r = _out347;
                resultingOwnership = _out348;
                readIdents = _3511_recIdents;
              }
            } else if (_source131.is_Set) {
              DAST._IType _3512___mcc_h112 = _source131.dtor_element;
              {
                RAST._IExpr _3513_recursiveGen;
                DCOMP._IOwnership _3514_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3515_recIdents;
                RAST._IExpr _out349;
                DCOMP._IOwnership _out350;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out349, out _out350, out _out351);
                _3513_recursiveGen = _out349;
                _3514_recOwned = _out350;
                _3515_recIdents = _out351;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3513_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out352;
                DCOMP._IOwnership _out353;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out352, out _out353);
                r = _out352;
                resultingOwnership = _out353;
                readIdents = _3515_recIdents;
              }
            } else if (_source131.is_Multiset) {
              DAST._IType _3516___mcc_h114 = _source131.dtor_element;
              {
                RAST._IExpr _3517_recursiveGen;
                DCOMP._IOwnership _3518_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3519_recIdents;
                RAST._IExpr _out354;
                DCOMP._IOwnership _out355;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out354, out _out355, out _out356);
                _3517_recursiveGen = _out354;
                _3518_recOwned = _out355;
                _3519_recIdents = _out356;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3517_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out357;
                DCOMP._IOwnership _out358;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out357, out _out358);
                r = _out357;
                resultingOwnership = _out358;
                readIdents = _3519_recIdents;
              }
            } else if (_source131.is_Map) {
              DAST._IType _3520___mcc_h116 = _source131.dtor_key;
              DAST._IType _3521___mcc_h117 = _source131.dtor_value;
              {
                RAST._IExpr _3522_recursiveGen;
                DCOMP._IOwnership _3523_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3524_recIdents;
                RAST._IExpr _out359;
                DCOMP._IOwnership _out360;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out359, out _out360, out _out361);
                _3522_recursiveGen = _out359;
                _3523_recOwned = _out360;
                _3524_recIdents = _out361;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3522_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out362;
                DCOMP._IOwnership _out363;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out362, out _out363);
                r = _out362;
                resultingOwnership = _out363;
                readIdents = _3524_recIdents;
              }
            } else if (_source131.is_SetBuilder) {
              DAST._IType _3525___mcc_h120 = _source131.dtor_element;
              {
                RAST._IExpr _3526_recursiveGen;
                DCOMP._IOwnership _3527_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3528_recIdents;
                RAST._IExpr _out364;
                DCOMP._IOwnership _out365;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out366;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out364, out _out365, out _out366);
                _3526_recursiveGen = _out364;
                _3527_recOwned = _out365;
                _3528_recIdents = _out366;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3526_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out367;
                DCOMP._IOwnership _out368;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out367, out _out368);
                r = _out367;
                resultingOwnership = _out368;
                readIdents = _3528_recIdents;
              }
            } else if (_source131.is_MapBuilder) {
              DAST._IType _3529___mcc_h122 = _source131.dtor_key;
              DAST._IType _3530___mcc_h123 = _source131.dtor_value;
              {
                RAST._IExpr _3531_recursiveGen;
                DCOMP._IOwnership _3532_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3533_recIdents;
                RAST._IExpr _out369;
                DCOMP._IOwnership _out370;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out369, out _out370, out _out371);
                _3531_recursiveGen = _out369;
                _3532_recOwned = _out370;
                _3533_recIdents = _out371;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3531_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out372;
                DCOMP._IOwnership _out373;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out372, out _out373);
                r = _out372;
                resultingOwnership = _out373;
                readIdents = _3533_recIdents;
              }
            } else if (_source131.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3534___mcc_h126 = _source131.dtor_args;
              DAST._IType _3535___mcc_h127 = _source131.dtor_result;
              {
                RAST._IExpr _3536_recursiveGen;
                DCOMP._IOwnership _3537_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3538_recIdents;
                RAST._IExpr _out374;
                DCOMP._IOwnership _out375;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out374, out _out375, out _out376);
                _3536_recursiveGen = _out374;
                _3537_recOwned = _out375;
                _3538_recIdents = _out376;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3536_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out377;
                DCOMP._IOwnership _out378;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out377, out _out378);
                r = _out377;
                resultingOwnership = _out378;
                readIdents = _3538_recIdents;
              }
            } else if (_source131.is_Primitive) {
              DAST._IPrimitive _3539___mcc_h130 = _source131.dtor_Primitive_a0;
              {
                RAST._IExpr _3540_recursiveGen;
                DCOMP._IOwnership _3541_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
                RAST._IExpr _out379;
                DCOMP._IOwnership _out380;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out379, out _out380, out _out381);
                _3540_recursiveGen = _out379;
                _3541_recOwned = _out380;
                _3542_recIdents = _out381;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out382;
                DCOMP._IOwnership _out383;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out382, out _out383);
                r = _out382;
                resultingOwnership = _out383;
                readIdents = _3542_recIdents;
              }
            } else if (_source131.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3543___mcc_h132 = _source131.dtor_Passthrough_a0;
              {
                RAST._IExpr _3544_recursiveGen;
                DCOMP._IOwnership _3545_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3546_recIdents;
                RAST._IExpr _out384;
                DCOMP._IOwnership _out385;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out386;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out384, out _out385, out _out386);
                _3544_recursiveGen = _out384;
                _3545_recOwned = _out385;
                _3546_recIdents = _out386;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3544_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out387;
                DCOMP._IOwnership _out388;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out387, out _out388);
                r = _out387;
                resultingOwnership = _out388;
                readIdents = _3546_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3547___mcc_h134 = _source131.dtor_TypeArg_a0;
              {
                RAST._IExpr _3548_recursiveGen;
                DCOMP._IOwnership _3549_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3550_recIdents;
                RAST._IExpr _out389;
                DCOMP._IOwnership _out390;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out391;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out389, out _out390, out _out391);
                _3548_recursiveGen = _out389;
                _3549_recOwned = _out390;
                _3550_recIdents = _out391;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3548_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out392;
                DCOMP._IOwnership _out393;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out392, out _out393);
                r = _out392;
                resultingOwnership = _out393;
                readIdents = _3550_recIdents;
              }
            }
          } else {
            DAST._IType _3551___mcc_h136 = _source125.dtor_baseType;
            DAST._INewtypeRange _3552___mcc_h137 = _source125.dtor_range;
            bool _3553___mcc_h138 = _source125.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _3554___mcc_h139 = _source125.dtor_attributes;
            DAST._IType _source136 = _3302___mcc_h1;
            if (_source136.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3555___mcc_h152 = _source136.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3556___mcc_h153 = _source136.dtor_typeArgs;
              DAST._IResolvedType _3557___mcc_h154 = _source136.dtor_resolved;
              DAST._IResolvedType _source137 = _3557___mcc_h154;
              if (_source137.is_Datatype) {
                DAST._IDatatypeType _3558___mcc_h161 = _source137.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _3559_attributes = _3554___mcc_h139;
                bool _3560_erase = _3553___mcc_h138;
                DAST._INewtypeRange _3561_range = _3552___mcc_h137;
                DAST._IType _3562_b = _3551___mcc_h136;
                {
                  Std.Wrappers._IOption<RAST._IType> _3563_nativeFromType;
                  _3563_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3562_b, _3561_range);
                  if (object.Equals(_3562_b, _3297_toTpe)) {
                    RAST._IExpr _3564_recursiveGen;
                    DCOMP._IOwnership _3565_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3566_recIdents;
                    RAST._IExpr _out394;
                    DCOMP._IOwnership _out395;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out396;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out394, out _out395, out _out396);
                    _3564_recursiveGen = _out394;
                    _3565_recOwned = _out395;
                    _3566_recIdents = _out396;
                    readIdents = _3566_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source138 = _3563_nativeFromType;
                    if (_source138.is_None) {
                      if (_3560_erase) {
                        r = _3564_recursiveGen;
                      } else {
                        r = (_3564_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                      }
                      RAST._IExpr _out397;
                      DCOMP._IOwnership _out398;
                      DCOMP.COMP.FromOwnership(r, _3565_recOwned, expectedOwnership, out _out397, out _out398);
                      r = _out397;
                      resultingOwnership = _out398;
                    } else {
                      RAST._IType _3567___mcc_h1356 = _source138.dtor_value;
                      RAST._IType _3568_v = _3567___mcc_h1356;
                      RAST._IType _3569_toTpeRust;
                      RAST._IType _out399;
                      _out399 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                      _3569_toTpeRust = _out399;
                      r = (((_3564_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3569_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out400;
                      DCOMP._IOwnership _out401;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out400, out _out401);
                      r = _out400;
                      resultingOwnership = _out401;
                    }
                  } else {
                    if ((_3563_nativeFromType).is_Some) {
                      if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3570_recursiveGen;
                        DCOMP._IOwnership _3571_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3572_recIdents;
                        RAST._IExpr _out402;
                        DCOMP._IOwnership _out403;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out404;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out402, out _out403, out _out404);
                        _3570_recursiveGen = _out402;
                        _3571_recOwned = _out403;
                        _3572_recIdents = _out404;
                        RAST._IExpr _out405;
                        DCOMP._IOwnership _out406;
                        DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3570_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3571_recOwned, expectedOwnership, out _out405, out _out406);
                        r = _out405;
                        resultingOwnership = _out406;
                        readIdents = _3572_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out407;
                    DCOMP._IOwnership _out408;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3562_b), _3562_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out407, out _out408, out _out409);
                    r = _out407;
                    resultingOwnership = _out408;
                    readIdents = _out409;
                  }
                }
              } else if (_source137.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3573___mcc_h164 = _source137.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3574___mcc_h165 = _source137.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3575_attributes = _3554___mcc_h139;
                bool _3576_erase = _3553___mcc_h138;
                DAST._INewtypeRange _3577_range = _3552___mcc_h137;
                DAST._IType _3578_b = _3551___mcc_h136;
                {
                  Std.Wrappers._IOption<RAST._IType> _3579_nativeFromType;
                  _3579_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3578_b, _3577_range);
                  if (object.Equals(_3578_b, _3297_toTpe)) {
                    RAST._IExpr _3580_recursiveGen;
                    DCOMP._IOwnership _3581_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3582_recIdents;
                    RAST._IExpr _out410;
                    DCOMP._IOwnership _out411;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out412;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out410, out _out411, out _out412);
                    _3580_recursiveGen = _out410;
                    _3581_recOwned = _out411;
                    _3582_recIdents = _out412;
                    readIdents = _3582_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source139 = _3579_nativeFromType;
                    if (_source139.is_None) {
                      if (_3576_erase) {
                        r = _3580_recursiveGen;
                      } else {
                        r = (_3580_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                      }
                      RAST._IExpr _out413;
                      DCOMP._IOwnership _out414;
                      DCOMP.COMP.FromOwnership(r, _3581_recOwned, expectedOwnership, out _out413, out _out414);
                      r = _out413;
                      resultingOwnership = _out414;
                    } else {
                      RAST._IType _3583___mcc_h1357 = _source139.dtor_value;
                      RAST._IType _3584_v = _3583___mcc_h1357;
                      RAST._IType _3585_toTpeRust;
                      RAST._IType _out415;
                      _out415 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                      _3585_toTpeRust = _out415;
                      r = (((_3580_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3585_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out416;
                      DCOMP._IOwnership _out417;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out416, out _out417);
                      r = _out416;
                      resultingOwnership = _out417;
                    }
                  } else {
                    if ((_3579_nativeFromType).is_Some) {
                      if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3586_recursiveGen;
                        DCOMP._IOwnership _3587_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3588_recIdents;
                        RAST._IExpr _out418;
                        DCOMP._IOwnership _out419;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out420;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out418, out _out419, out _out420);
                        _3586_recursiveGen = _out418;
                        _3587_recOwned = _out419;
                        _3588_recIdents = _out420;
                        RAST._IExpr _out421;
                        DCOMP._IOwnership _out422;
                        DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3586_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3587_recOwned, expectedOwnership, out _out421, out _out422);
                        r = _out421;
                        resultingOwnership = _out422;
                        readIdents = _3588_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out423;
                    DCOMP._IOwnership _out424;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3578_b), _3578_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out423, out _out424, out _out425);
                    r = _out423;
                    resultingOwnership = _out424;
                    readIdents = _out425;
                  }
                }
              } else {
                DAST._IType _3589___mcc_h170 = _source137.dtor_baseType;
                DAST._INewtypeRange _3590___mcc_h171 = _source137.dtor_range;
                bool _3591___mcc_h172 = _source137.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3592___mcc_h173 = _source137.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3593_attributes = _3592___mcc_h173;
                bool _3594_erase = _3591___mcc_h172;
                DAST._INewtypeRange _3595_range = _3590___mcc_h171;
                DAST._IType _3596_b = _3589___mcc_h170;
                {
                  Std.Wrappers._IOption<RAST._IType> _3597_nativeToType;
                  _3597_nativeToType = DCOMP.COMP.NewtypeToRustType(_3596_b, _3595_range);
                  if (object.Equals(_3296_fromTpe, _3596_b)) {
                    RAST._IExpr _3598_recursiveGen;
                    DCOMP._IOwnership _3599_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3600_recIdents;
                    RAST._IExpr _out426;
                    DCOMP._IOwnership _out427;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out428;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out426, out _out427, out _out428);
                    _3598_recursiveGen = _out426;
                    _3599_recOwned = _out427;
                    _3600_recIdents = _out428;
                    readIdents = _3600_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source140 = _3597_nativeToType;
                    if (_source140.is_None) {
                      if (_3594_erase) {
                        r = _3598_recursiveGen;
                      } else {
                        RAST._IType _3601_rhsType;
                        RAST._IType _out429;
                        _out429 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                        _3601_rhsType = _out429;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3601_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3598_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out430;
                      DCOMP._IOwnership _out431;
                      DCOMP.COMP.FromOwnership(r, _3599_recOwned, expectedOwnership, out _out430, out _out431);
                      r = _out430;
                      resultingOwnership = _out431;
                    } else {
                      RAST._IType _3602___mcc_h1358 = _source140.dtor_value;
                      RAST._IType _3603_v = _3602___mcc_h1358;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3598_recursiveGen, RAST.Expr.create_ExprFromType(_3603_v)));
                      RAST._IExpr _out432;
                      DCOMP._IOwnership _out433;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out432, out _out433);
                      r = _out432;
                      resultingOwnership = _out433;
                    }
                  } else {
                    if ((_3597_nativeToType).is_Some) {
                      DAST._IType _source141 = _3296_fromTpe;
                      if (_source141.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3604___mcc_h1359 = _source141.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _3605___mcc_h1360 = _source141.dtor_typeArgs;
                        DAST._IResolvedType _3606___mcc_h1361 = _source141.dtor_resolved;
                        DAST._IResolvedType _source142 = _3606___mcc_h1361;
                        if (_source142.is_Datatype) {
                          DAST._IDatatypeType _3607___mcc_h1365 = _source142.dtor_datatypeType;
                        } else if (_source142.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3608___mcc_h1367 = _source142.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _3609___mcc_h1368 = _source142.dtor_attributes;
                        } else {
                          DAST._IType _3610___mcc_h1371 = _source142.dtor_baseType;
                          DAST._INewtypeRange _3611___mcc_h1372 = _source142.dtor_range;
                          bool _3612___mcc_h1373 = _source142.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _3613___mcc_h1374 = _source142.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _3614_attributes0 = _3613___mcc_h1374;
                          bool _3615_erase0 = _3612___mcc_h1373;
                          DAST._INewtypeRange _3616_range0 = _3611___mcc_h1372;
                          DAST._IType _3617_b0 = _3610___mcc_h1371;
                          {
                            Std.Wrappers._IOption<RAST._IType> _3618_nativeFromType;
                            _3618_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3617_b0, _3616_range0);
                            if ((_3618_nativeFromType).is_Some) {
                              RAST._IExpr _3619_recursiveGen;
                              DCOMP._IOwnership _3620_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3621_recIdents;
                              RAST._IExpr _out434;
                              DCOMP._IOwnership _out435;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out436;
                              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out434, out _out435, out _out436);
                              _3619_recursiveGen = _out434;
                              _3620_recOwned = _out435;
                              _3621_recIdents = _out436;
                              RAST._IExpr _out437;
                              DCOMP._IOwnership _out438;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_3619_recursiveGen, (_3597_nativeToType).dtor_value), _3620_recOwned, expectedOwnership, out _out437, out _out438);
                              r = _out437;
                              resultingOwnership = _out438;
                              readIdents = _3621_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source141.is_Nullable) {
                        DAST._IType _3622___mcc_h1379 = _source141.dtor_Nullable_a0;
                      } else if (_source141.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _3623___mcc_h1381 = _source141.dtor_Tuple_a0;
                      } else if (_source141.is_Array) {
                        DAST._IType _3624___mcc_h1383 = _source141.dtor_element;
                        BigInteger _3625___mcc_h1384 = _source141.dtor_dims;
                      } else if (_source141.is_Seq) {
                        DAST._IType _3626___mcc_h1387 = _source141.dtor_element;
                      } else if (_source141.is_Set) {
                        DAST._IType _3627___mcc_h1389 = _source141.dtor_element;
                      } else if (_source141.is_Multiset) {
                        DAST._IType _3628___mcc_h1391 = _source141.dtor_element;
                      } else if (_source141.is_Map) {
                        DAST._IType _3629___mcc_h1393 = _source141.dtor_key;
                        DAST._IType _3630___mcc_h1394 = _source141.dtor_value;
                      } else if (_source141.is_SetBuilder) {
                        DAST._IType _3631___mcc_h1397 = _source141.dtor_element;
                      } else if (_source141.is_MapBuilder) {
                        DAST._IType _3632___mcc_h1399 = _source141.dtor_key;
                        DAST._IType _3633___mcc_h1400 = _source141.dtor_value;
                      } else if (_source141.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _3634___mcc_h1403 = _source141.dtor_args;
                        DAST._IType _3635___mcc_h1404 = _source141.dtor_result;
                      } else if (_source141.is_Primitive) {
                        DAST._IPrimitive _3636___mcc_h1407 = _source141.dtor_Primitive_a0;
                      } else if (_source141.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _3637___mcc_h1409 = _source141.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _3638___mcc_h1411 = _source141.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _3639_recursiveGen;
                        DCOMP._IOwnership _3640_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3641_recIdents;
                        RAST._IExpr _out439;
                        DCOMP._IOwnership _out440;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out439, out _out440, out _out441);
                        _3639_recursiveGen = _out439;
                        _3640_recOwned = _out440;
                        _3641_recIdents = _out441;
                        RAST._IExpr _out442;
                        DCOMP._IOwnership _out443;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_3639_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3597_nativeToType).dtor_value), _3640_recOwned, expectedOwnership, out _out442, out _out443);
                        r = _out442;
                        resultingOwnership = _out443;
                        readIdents = _3641_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out444;
                    DCOMP._IOwnership _out445;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out446;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3596_b), _3596_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out444, out _out445, out _out446);
                    r = _out444;
                    resultingOwnership = _out445;
                    readIdents = _out446;
                  }
                }
              }
            } else if (_source136.is_Nullable) {
              DAST._IType _3642___mcc_h182 = _source136.dtor_Nullable_a0;
              {
                RAST._IExpr _3643_recursiveGen;
                DCOMP._IOwnership _3644_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3645_recIdents;
                RAST._IExpr _out447;
                DCOMP._IOwnership _out448;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out447, out _out448, out _out449);
                _3643_recursiveGen = _out447;
                _3644_recOwned = _out448;
                _3645_recIdents = _out449;
                r = _3643_recursiveGen;
                if (object.Equals(_3644_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out450;
                DCOMP._IOwnership _out451;
                DCOMP.COMP.FromOwnership(r, _3644_recOwned, expectedOwnership, out _out450, out _out451);
                r = _out450;
                resultingOwnership = _out451;
                readIdents = _3645_recIdents;
              }
            } else if (_source136.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3646___mcc_h185 = _source136.dtor_Tuple_a0;
              Dafny.ISequence<DAST._IAttribute> _3647_attributes = _3554___mcc_h139;
              bool _3648_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3649_range = _3552___mcc_h137;
              DAST._IType _3650_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3651_nativeFromType;
                _3651_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3650_b, _3649_range);
                if (object.Equals(_3650_b, _3297_toTpe)) {
                  RAST._IExpr _3652_recursiveGen;
                  DCOMP._IOwnership _3653_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3654_recIdents;
                  RAST._IExpr _out452;
                  DCOMP._IOwnership _out453;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out454;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out452, out _out453, out _out454);
                  _3652_recursiveGen = _out452;
                  _3653_recOwned = _out453;
                  _3654_recIdents = _out454;
                  readIdents = _3654_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source143 = _3651_nativeFromType;
                  if (_source143.is_None) {
                    if (_3648_erase) {
                      r = _3652_recursiveGen;
                    } else {
                      r = (_3652_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out455;
                    DCOMP._IOwnership _out456;
                    DCOMP.COMP.FromOwnership(r, _3653_recOwned, expectedOwnership, out _out455, out _out456);
                    r = _out455;
                    resultingOwnership = _out456;
                  } else {
                    RAST._IType _3655___mcc_h1413 = _source143.dtor_value;
                    RAST._IType _3656_v = _3655___mcc_h1413;
                    RAST._IType _3657_toTpeRust;
                    RAST._IType _out457;
                    _out457 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3657_toTpeRust = _out457;
                    r = (((_3652_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3657_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out458;
                    DCOMP._IOwnership _out459;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out458, out _out459);
                    r = _out458;
                    resultingOwnership = _out459;
                  }
                } else {
                  if ((_3651_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3658_recursiveGen;
                      DCOMP._IOwnership _3659_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3660_recIdents;
                      RAST._IExpr _out460;
                      DCOMP._IOwnership _out461;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out462;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out460, out _out461, out _out462);
                      _3658_recursiveGen = _out460;
                      _3659_recOwned = _out461;
                      _3660_recIdents = _out462;
                      RAST._IExpr _out463;
                      DCOMP._IOwnership _out464;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3658_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3659_recOwned, expectedOwnership, out _out463, out _out464);
                      r = _out463;
                      resultingOwnership = _out464;
                      readIdents = _3660_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out465;
                  DCOMP._IOwnership _out466;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out467;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3650_b), _3650_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out465, out _out466, out _out467);
                  r = _out465;
                  resultingOwnership = _out466;
                  readIdents = _out467;
                }
              }
            } else if (_source136.is_Array) {
              DAST._IType _3661___mcc_h188 = _source136.dtor_element;
              BigInteger _3662___mcc_h189 = _source136.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _3663_attributes = _3554___mcc_h139;
              bool _3664_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3665_range = _3552___mcc_h137;
              DAST._IType _3666_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3667_nativeFromType;
                _3667_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3666_b, _3665_range);
                if (object.Equals(_3666_b, _3297_toTpe)) {
                  RAST._IExpr _3668_recursiveGen;
                  DCOMP._IOwnership _3669_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3670_recIdents;
                  RAST._IExpr _out468;
                  DCOMP._IOwnership _out469;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out470;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out468, out _out469, out _out470);
                  _3668_recursiveGen = _out468;
                  _3669_recOwned = _out469;
                  _3670_recIdents = _out470;
                  readIdents = _3670_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source144 = _3667_nativeFromType;
                  if (_source144.is_None) {
                    if (_3664_erase) {
                      r = _3668_recursiveGen;
                    } else {
                      r = (_3668_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out471;
                    DCOMP._IOwnership _out472;
                    DCOMP.COMP.FromOwnership(r, _3669_recOwned, expectedOwnership, out _out471, out _out472);
                    r = _out471;
                    resultingOwnership = _out472;
                  } else {
                    RAST._IType _3671___mcc_h1414 = _source144.dtor_value;
                    RAST._IType _3672_v = _3671___mcc_h1414;
                    RAST._IType _3673_toTpeRust;
                    RAST._IType _out473;
                    _out473 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3673_toTpeRust = _out473;
                    r = (((_3668_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3673_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out474;
                    DCOMP._IOwnership _out475;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out474, out _out475);
                    r = _out474;
                    resultingOwnership = _out475;
                  }
                } else {
                  if ((_3667_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3674_recursiveGen;
                      DCOMP._IOwnership _3675_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3676_recIdents;
                      RAST._IExpr _out476;
                      DCOMP._IOwnership _out477;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out478;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out476, out _out477, out _out478);
                      _3674_recursiveGen = _out476;
                      _3675_recOwned = _out477;
                      _3676_recIdents = _out478;
                      RAST._IExpr _out479;
                      DCOMP._IOwnership _out480;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3674_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3675_recOwned, expectedOwnership, out _out479, out _out480);
                      r = _out479;
                      resultingOwnership = _out480;
                      readIdents = _3676_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out481;
                  DCOMP._IOwnership _out482;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out483;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3666_b), _3666_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out481, out _out482, out _out483);
                  r = _out481;
                  resultingOwnership = _out482;
                  readIdents = _out483;
                }
              }
            } else if (_source136.is_Seq) {
              DAST._IType _3677___mcc_h194 = _source136.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3678_attributes = _3554___mcc_h139;
              bool _3679_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3680_range = _3552___mcc_h137;
              DAST._IType _3681_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3682_nativeFromType;
                _3682_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3681_b, _3680_range);
                if (object.Equals(_3681_b, _3297_toTpe)) {
                  RAST._IExpr _3683_recursiveGen;
                  DCOMP._IOwnership _3684_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3685_recIdents;
                  RAST._IExpr _out484;
                  DCOMP._IOwnership _out485;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out486;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out484, out _out485, out _out486);
                  _3683_recursiveGen = _out484;
                  _3684_recOwned = _out485;
                  _3685_recIdents = _out486;
                  readIdents = _3685_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source145 = _3682_nativeFromType;
                  if (_source145.is_None) {
                    if (_3679_erase) {
                      r = _3683_recursiveGen;
                    } else {
                      r = (_3683_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out487;
                    DCOMP._IOwnership _out488;
                    DCOMP.COMP.FromOwnership(r, _3684_recOwned, expectedOwnership, out _out487, out _out488);
                    r = _out487;
                    resultingOwnership = _out488;
                  } else {
                    RAST._IType _3686___mcc_h1415 = _source145.dtor_value;
                    RAST._IType _3687_v = _3686___mcc_h1415;
                    RAST._IType _3688_toTpeRust;
                    RAST._IType _out489;
                    _out489 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3688_toTpeRust = _out489;
                    r = (((_3683_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3688_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out490;
                    DCOMP._IOwnership _out491;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out490, out _out491);
                    r = _out490;
                    resultingOwnership = _out491;
                  }
                } else {
                  if ((_3682_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3689_recursiveGen;
                      DCOMP._IOwnership _3690_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3691_recIdents;
                      RAST._IExpr _out492;
                      DCOMP._IOwnership _out493;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out494;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out492, out _out493, out _out494);
                      _3689_recursiveGen = _out492;
                      _3690_recOwned = _out493;
                      _3691_recIdents = _out494;
                      RAST._IExpr _out495;
                      DCOMP._IOwnership _out496;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3689_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3690_recOwned, expectedOwnership, out _out495, out _out496);
                      r = _out495;
                      resultingOwnership = _out496;
                      readIdents = _3691_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out497;
                  DCOMP._IOwnership _out498;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out499;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3681_b), _3681_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out497, out _out498, out _out499);
                  r = _out497;
                  resultingOwnership = _out498;
                  readIdents = _out499;
                }
              }
            } else if (_source136.is_Set) {
              DAST._IType _3692___mcc_h197 = _source136.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3693_attributes = _3554___mcc_h139;
              bool _3694_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3695_range = _3552___mcc_h137;
              DAST._IType _3696_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3697_nativeFromType;
                _3697_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3696_b, _3695_range);
                if (object.Equals(_3696_b, _3297_toTpe)) {
                  RAST._IExpr _3698_recursiveGen;
                  DCOMP._IOwnership _3699_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3700_recIdents;
                  RAST._IExpr _out500;
                  DCOMP._IOwnership _out501;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out502;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out500, out _out501, out _out502);
                  _3698_recursiveGen = _out500;
                  _3699_recOwned = _out501;
                  _3700_recIdents = _out502;
                  readIdents = _3700_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source146 = _3697_nativeFromType;
                  if (_source146.is_None) {
                    if (_3694_erase) {
                      r = _3698_recursiveGen;
                    } else {
                      r = (_3698_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out503;
                    DCOMP._IOwnership _out504;
                    DCOMP.COMP.FromOwnership(r, _3699_recOwned, expectedOwnership, out _out503, out _out504);
                    r = _out503;
                    resultingOwnership = _out504;
                  } else {
                    RAST._IType _3701___mcc_h1416 = _source146.dtor_value;
                    RAST._IType _3702_v = _3701___mcc_h1416;
                    RAST._IType _3703_toTpeRust;
                    RAST._IType _out505;
                    _out505 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3703_toTpeRust = _out505;
                    r = (((_3698_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3703_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out506;
                    DCOMP._IOwnership _out507;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out506, out _out507);
                    r = _out506;
                    resultingOwnership = _out507;
                  }
                } else {
                  if ((_3697_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3704_recursiveGen;
                      DCOMP._IOwnership _3705_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3706_recIdents;
                      RAST._IExpr _out508;
                      DCOMP._IOwnership _out509;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out510;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out508, out _out509, out _out510);
                      _3704_recursiveGen = _out508;
                      _3705_recOwned = _out509;
                      _3706_recIdents = _out510;
                      RAST._IExpr _out511;
                      DCOMP._IOwnership _out512;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3704_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3705_recOwned, expectedOwnership, out _out511, out _out512);
                      r = _out511;
                      resultingOwnership = _out512;
                      readIdents = _3706_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out513;
                  DCOMP._IOwnership _out514;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out515;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3696_b), _3696_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out513, out _out514, out _out515);
                  r = _out513;
                  resultingOwnership = _out514;
                  readIdents = _out515;
                }
              }
            } else if (_source136.is_Multiset) {
              DAST._IType _3707___mcc_h200 = _source136.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3708_attributes = _3554___mcc_h139;
              bool _3709_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3710_range = _3552___mcc_h137;
              DAST._IType _3711_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3712_nativeFromType;
                _3712_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3711_b, _3710_range);
                if (object.Equals(_3711_b, _3297_toTpe)) {
                  RAST._IExpr _3713_recursiveGen;
                  DCOMP._IOwnership _3714_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3715_recIdents;
                  RAST._IExpr _out516;
                  DCOMP._IOwnership _out517;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out518;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out516, out _out517, out _out518);
                  _3713_recursiveGen = _out516;
                  _3714_recOwned = _out517;
                  _3715_recIdents = _out518;
                  readIdents = _3715_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source147 = _3712_nativeFromType;
                  if (_source147.is_None) {
                    if (_3709_erase) {
                      r = _3713_recursiveGen;
                    } else {
                      r = (_3713_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out519;
                    DCOMP._IOwnership _out520;
                    DCOMP.COMP.FromOwnership(r, _3714_recOwned, expectedOwnership, out _out519, out _out520);
                    r = _out519;
                    resultingOwnership = _out520;
                  } else {
                    RAST._IType _3716___mcc_h1417 = _source147.dtor_value;
                    RAST._IType _3717_v = _3716___mcc_h1417;
                    RAST._IType _3718_toTpeRust;
                    RAST._IType _out521;
                    _out521 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3718_toTpeRust = _out521;
                    r = (((_3713_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3718_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out522;
                    DCOMP._IOwnership _out523;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out522, out _out523);
                    r = _out522;
                    resultingOwnership = _out523;
                  }
                } else {
                  if ((_3712_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3719_recursiveGen;
                      DCOMP._IOwnership _3720_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3721_recIdents;
                      RAST._IExpr _out524;
                      DCOMP._IOwnership _out525;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out524, out _out525, out _out526);
                      _3719_recursiveGen = _out524;
                      _3720_recOwned = _out525;
                      _3721_recIdents = _out526;
                      RAST._IExpr _out527;
                      DCOMP._IOwnership _out528;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3719_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3720_recOwned, expectedOwnership, out _out527, out _out528);
                      r = _out527;
                      resultingOwnership = _out528;
                      readIdents = _3721_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out529;
                  DCOMP._IOwnership _out530;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out531;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3711_b), _3711_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out529, out _out530, out _out531);
                  r = _out529;
                  resultingOwnership = _out530;
                  readIdents = _out531;
                }
              }
            } else if (_source136.is_Map) {
              DAST._IType _3722___mcc_h203 = _source136.dtor_key;
              DAST._IType _3723___mcc_h204 = _source136.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _3724_attributes = _3554___mcc_h139;
              bool _3725_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3726_range = _3552___mcc_h137;
              DAST._IType _3727_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3728_nativeFromType;
                _3728_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3727_b, _3726_range);
                if (object.Equals(_3727_b, _3297_toTpe)) {
                  RAST._IExpr _3729_recursiveGen;
                  DCOMP._IOwnership _3730_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3731_recIdents;
                  RAST._IExpr _out532;
                  DCOMP._IOwnership _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out532, out _out533, out _out534);
                  _3729_recursiveGen = _out532;
                  _3730_recOwned = _out533;
                  _3731_recIdents = _out534;
                  readIdents = _3731_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source148 = _3728_nativeFromType;
                  if (_source148.is_None) {
                    if (_3725_erase) {
                      r = _3729_recursiveGen;
                    } else {
                      r = (_3729_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out535;
                    DCOMP._IOwnership _out536;
                    DCOMP.COMP.FromOwnership(r, _3730_recOwned, expectedOwnership, out _out535, out _out536);
                    r = _out535;
                    resultingOwnership = _out536;
                  } else {
                    RAST._IType _3732___mcc_h1418 = _source148.dtor_value;
                    RAST._IType _3733_v = _3732___mcc_h1418;
                    RAST._IType _3734_toTpeRust;
                    RAST._IType _out537;
                    _out537 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3734_toTpeRust = _out537;
                    r = (((_3729_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3734_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out538;
                    DCOMP._IOwnership _out539;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out538, out _out539);
                    r = _out538;
                    resultingOwnership = _out539;
                  }
                } else {
                  if ((_3728_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3735_recursiveGen;
                      DCOMP._IOwnership _3736_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3737_recIdents;
                      RAST._IExpr _out540;
                      DCOMP._IOwnership _out541;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out540, out _out541, out _out542);
                      _3735_recursiveGen = _out540;
                      _3736_recOwned = _out541;
                      _3737_recIdents = _out542;
                      RAST._IExpr _out543;
                      DCOMP._IOwnership _out544;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3735_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3736_recOwned, expectedOwnership, out _out543, out _out544);
                      r = _out543;
                      resultingOwnership = _out544;
                      readIdents = _3737_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out545;
                  DCOMP._IOwnership _out546;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out547;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3727_b), _3727_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out545, out _out546, out _out547);
                  r = _out545;
                  resultingOwnership = _out546;
                  readIdents = _out547;
                }
              }
            } else if (_source136.is_SetBuilder) {
              DAST._IType _3738___mcc_h209 = _source136.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3739_attributes = _3554___mcc_h139;
              bool _3740_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3741_range = _3552___mcc_h137;
              DAST._IType _3742_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3743_nativeFromType;
                _3743_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3742_b, _3741_range);
                if (object.Equals(_3742_b, _3297_toTpe)) {
                  RAST._IExpr _3744_recursiveGen;
                  DCOMP._IOwnership _3745_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3746_recIdents;
                  RAST._IExpr _out548;
                  DCOMP._IOwnership _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out548, out _out549, out _out550);
                  _3744_recursiveGen = _out548;
                  _3745_recOwned = _out549;
                  _3746_recIdents = _out550;
                  readIdents = _3746_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source149 = _3743_nativeFromType;
                  if (_source149.is_None) {
                    if (_3740_erase) {
                      r = _3744_recursiveGen;
                    } else {
                      r = (_3744_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out551;
                    DCOMP._IOwnership _out552;
                    DCOMP.COMP.FromOwnership(r, _3745_recOwned, expectedOwnership, out _out551, out _out552);
                    r = _out551;
                    resultingOwnership = _out552;
                  } else {
                    RAST._IType _3747___mcc_h1419 = _source149.dtor_value;
                    RAST._IType _3748_v = _3747___mcc_h1419;
                    RAST._IType _3749_toTpeRust;
                    RAST._IType _out553;
                    _out553 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3749_toTpeRust = _out553;
                    r = (((_3744_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3749_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out554;
                    DCOMP._IOwnership _out555;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out554, out _out555);
                    r = _out554;
                    resultingOwnership = _out555;
                  }
                } else {
                  if ((_3743_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3750_recursiveGen;
                      DCOMP._IOwnership _3751_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3752_recIdents;
                      RAST._IExpr _out556;
                      DCOMP._IOwnership _out557;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out556, out _out557, out _out558);
                      _3750_recursiveGen = _out556;
                      _3751_recOwned = _out557;
                      _3752_recIdents = _out558;
                      RAST._IExpr _out559;
                      DCOMP._IOwnership _out560;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3750_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3751_recOwned, expectedOwnership, out _out559, out _out560);
                      r = _out559;
                      resultingOwnership = _out560;
                      readIdents = _3752_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out561;
                  DCOMP._IOwnership _out562;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out563;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3742_b), _3742_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out561, out _out562, out _out563);
                  r = _out561;
                  resultingOwnership = _out562;
                  readIdents = _out563;
                }
              }
            } else if (_source136.is_MapBuilder) {
              DAST._IType _3753___mcc_h212 = _source136.dtor_key;
              DAST._IType _3754___mcc_h213 = _source136.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _3755_attributes = _3554___mcc_h139;
              bool _3756_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3757_range = _3552___mcc_h137;
              DAST._IType _3758_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3759_nativeFromType;
                _3759_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3758_b, _3757_range);
                if (object.Equals(_3758_b, _3297_toTpe)) {
                  RAST._IExpr _3760_recursiveGen;
                  DCOMP._IOwnership _3761_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3762_recIdents;
                  RAST._IExpr _out564;
                  DCOMP._IOwnership _out565;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out564, out _out565, out _out566);
                  _3760_recursiveGen = _out564;
                  _3761_recOwned = _out565;
                  _3762_recIdents = _out566;
                  readIdents = _3762_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source150 = _3759_nativeFromType;
                  if (_source150.is_None) {
                    if (_3756_erase) {
                      r = _3760_recursiveGen;
                    } else {
                      r = (_3760_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out567;
                    DCOMP._IOwnership _out568;
                    DCOMP.COMP.FromOwnership(r, _3761_recOwned, expectedOwnership, out _out567, out _out568);
                    r = _out567;
                    resultingOwnership = _out568;
                  } else {
                    RAST._IType _3763___mcc_h1420 = _source150.dtor_value;
                    RAST._IType _3764_v = _3763___mcc_h1420;
                    RAST._IType _3765_toTpeRust;
                    RAST._IType _out569;
                    _out569 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3765_toTpeRust = _out569;
                    r = (((_3760_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3765_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out570;
                    DCOMP._IOwnership _out571;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out570, out _out571);
                    r = _out570;
                    resultingOwnership = _out571;
                  }
                } else {
                  if ((_3759_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3766_recursiveGen;
                      DCOMP._IOwnership _3767_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3768_recIdents;
                      RAST._IExpr _out572;
                      DCOMP._IOwnership _out573;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out572, out _out573, out _out574);
                      _3766_recursiveGen = _out572;
                      _3767_recOwned = _out573;
                      _3768_recIdents = _out574;
                      RAST._IExpr _out575;
                      DCOMP._IOwnership _out576;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3766_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3767_recOwned, expectedOwnership, out _out575, out _out576);
                      r = _out575;
                      resultingOwnership = _out576;
                      readIdents = _3768_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out577;
                  DCOMP._IOwnership _out578;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3758_b), _3758_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out577, out _out578, out _out579);
                  r = _out577;
                  resultingOwnership = _out578;
                  readIdents = _out579;
                }
              }
            } else if (_source136.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3769___mcc_h218 = _source136.dtor_args;
              DAST._IType _3770___mcc_h219 = _source136.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _3771_attributes = _3554___mcc_h139;
              bool _3772_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3773_range = _3552___mcc_h137;
              DAST._IType _3774_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3775_nativeFromType;
                _3775_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3774_b, _3773_range);
                if (object.Equals(_3774_b, _3297_toTpe)) {
                  RAST._IExpr _3776_recursiveGen;
                  DCOMP._IOwnership _3777_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3778_recIdents;
                  RAST._IExpr _out580;
                  DCOMP._IOwnership _out581;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out582;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out580, out _out581, out _out582);
                  _3776_recursiveGen = _out580;
                  _3777_recOwned = _out581;
                  _3778_recIdents = _out582;
                  readIdents = _3778_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source151 = _3775_nativeFromType;
                  if (_source151.is_None) {
                    if (_3772_erase) {
                      r = _3776_recursiveGen;
                    } else {
                      r = (_3776_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out583;
                    DCOMP._IOwnership _out584;
                    DCOMP.COMP.FromOwnership(r, _3777_recOwned, expectedOwnership, out _out583, out _out584);
                    r = _out583;
                    resultingOwnership = _out584;
                  } else {
                    RAST._IType _3779___mcc_h1421 = _source151.dtor_value;
                    RAST._IType _3780_v = _3779___mcc_h1421;
                    RAST._IType _3781_toTpeRust;
                    RAST._IType _out585;
                    _out585 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3781_toTpeRust = _out585;
                    r = (((_3776_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3781_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out586;
                    DCOMP._IOwnership _out587;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out586, out _out587);
                    r = _out586;
                    resultingOwnership = _out587;
                  }
                } else {
                  if ((_3775_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3782_recursiveGen;
                      DCOMP._IOwnership _3783_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3784_recIdents;
                      RAST._IExpr _out588;
                      DCOMP._IOwnership _out589;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out590;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out588, out _out589, out _out590);
                      _3782_recursiveGen = _out588;
                      _3783_recOwned = _out589;
                      _3784_recIdents = _out590;
                      RAST._IExpr _out591;
                      DCOMP._IOwnership _out592;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3782_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3783_recOwned, expectedOwnership, out _out591, out _out592);
                      r = _out591;
                      resultingOwnership = _out592;
                      readIdents = _3784_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out593;
                  DCOMP._IOwnership _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3774_b), _3774_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out593, out _out594, out _out595);
                  r = _out593;
                  resultingOwnership = _out594;
                  readIdents = _out595;
                }
              }
            } else if (_source136.is_Primitive) {
              DAST._IPrimitive _3785___mcc_h224 = _source136.dtor_Primitive_a0;
              Dafny.ISequence<DAST._IAttribute> _3786_attributes = _3554___mcc_h139;
              bool _3787_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3788_range = _3552___mcc_h137;
              DAST._IType _3789_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3790_nativeFromType;
                _3790_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3789_b, _3788_range);
                if (object.Equals(_3789_b, _3297_toTpe)) {
                  RAST._IExpr _3791_recursiveGen;
                  DCOMP._IOwnership _3792_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3793_recIdents;
                  RAST._IExpr _out596;
                  DCOMP._IOwnership _out597;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out598;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out596, out _out597, out _out598);
                  _3791_recursiveGen = _out596;
                  _3792_recOwned = _out597;
                  _3793_recIdents = _out598;
                  readIdents = _3793_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source152 = _3790_nativeFromType;
                  if (_source152.is_None) {
                    if (_3787_erase) {
                      r = _3791_recursiveGen;
                    } else {
                      r = (_3791_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out599;
                    DCOMP._IOwnership _out600;
                    DCOMP.COMP.FromOwnership(r, _3792_recOwned, expectedOwnership, out _out599, out _out600);
                    r = _out599;
                    resultingOwnership = _out600;
                  } else {
                    RAST._IType _3794___mcc_h1422 = _source152.dtor_value;
                    RAST._IType _3795_v = _3794___mcc_h1422;
                    RAST._IType _3796_toTpeRust;
                    RAST._IType _out601;
                    _out601 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3796_toTpeRust = _out601;
                    r = (((_3791_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3796_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out602;
                    DCOMP._IOwnership _out603;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out602, out _out603);
                    r = _out602;
                    resultingOwnership = _out603;
                  }
                } else {
                  if ((_3790_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3797_recursiveGen;
                      DCOMP._IOwnership _3798_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3799_recIdents;
                      RAST._IExpr _out604;
                      DCOMP._IOwnership _out605;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out606;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out604, out _out605, out _out606);
                      _3797_recursiveGen = _out604;
                      _3798_recOwned = _out605;
                      _3799_recIdents = _out606;
                      RAST._IExpr _out607;
                      DCOMP._IOwnership _out608;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3797_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3798_recOwned, expectedOwnership, out _out607, out _out608);
                      r = _out607;
                      resultingOwnership = _out608;
                      readIdents = _3799_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out609;
                  DCOMP._IOwnership _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3789_b), _3789_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out609, out _out610, out _out611);
                  r = _out609;
                  resultingOwnership = _out610;
                  readIdents = _out611;
                }
              }
            } else if (_source136.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3800___mcc_h227 = _source136.dtor_Passthrough_a0;
              Dafny.ISequence<DAST._IAttribute> _3801_attributes = _3554___mcc_h139;
              bool _3802_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3803_range = _3552___mcc_h137;
              DAST._IType _3804_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3805_nativeFromType;
                _3805_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3804_b, _3803_range);
                if (object.Equals(_3804_b, _3297_toTpe)) {
                  RAST._IExpr _3806_recursiveGen;
                  DCOMP._IOwnership _3807_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3808_recIdents;
                  RAST._IExpr _out612;
                  DCOMP._IOwnership _out613;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out614;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out612, out _out613, out _out614);
                  _3806_recursiveGen = _out612;
                  _3807_recOwned = _out613;
                  _3808_recIdents = _out614;
                  readIdents = _3808_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source153 = _3805_nativeFromType;
                  if (_source153.is_None) {
                    if (_3802_erase) {
                      r = _3806_recursiveGen;
                    } else {
                      r = (_3806_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out615;
                    DCOMP._IOwnership _out616;
                    DCOMP.COMP.FromOwnership(r, _3807_recOwned, expectedOwnership, out _out615, out _out616);
                    r = _out615;
                    resultingOwnership = _out616;
                  } else {
                    RAST._IType _3809___mcc_h1423 = _source153.dtor_value;
                    RAST._IType _3810_v = _3809___mcc_h1423;
                    RAST._IType _3811_toTpeRust;
                    RAST._IType _out617;
                    _out617 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3811_toTpeRust = _out617;
                    r = (((_3806_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3811_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out618;
                    DCOMP._IOwnership _out619;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out618, out _out619);
                    r = _out618;
                    resultingOwnership = _out619;
                  }
                } else {
                  if ((_3805_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3812_recursiveGen;
                      DCOMP._IOwnership _3813_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3814_recIdents;
                      RAST._IExpr _out620;
                      DCOMP._IOwnership _out621;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out622;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out620, out _out621, out _out622);
                      _3812_recursiveGen = _out620;
                      _3813_recOwned = _out621;
                      _3814_recIdents = _out622;
                      RAST._IExpr _out623;
                      DCOMP._IOwnership _out624;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3812_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3813_recOwned, expectedOwnership, out _out623, out _out624);
                      r = _out623;
                      resultingOwnership = _out624;
                      readIdents = _3814_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out625;
                  DCOMP._IOwnership _out626;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3804_b), _3804_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out625, out _out626, out _out627);
                  r = _out625;
                  resultingOwnership = _out626;
                  readIdents = _out627;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3815___mcc_h230 = _source136.dtor_TypeArg_a0;
              Dafny.ISequence<DAST._IAttribute> _3816_attributes = _3554___mcc_h139;
              bool _3817_erase = _3553___mcc_h138;
              DAST._INewtypeRange _3818_range = _3552___mcc_h137;
              DAST._IType _3819_b = _3551___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _3820_nativeFromType;
                _3820_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3819_b, _3818_range);
                if (object.Equals(_3819_b, _3297_toTpe)) {
                  RAST._IExpr _3821_recursiveGen;
                  DCOMP._IOwnership _3822_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3823_recIdents;
                  RAST._IExpr _out628;
                  DCOMP._IOwnership _out629;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out628, out _out629, out _out630);
                  _3821_recursiveGen = _out628;
                  _3822_recOwned = _out629;
                  _3823_recIdents = _out630;
                  readIdents = _3823_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source154 = _3820_nativeFromType;
                  if (_source154.is_None) {
                    if (_3817_erase) {
                      r = _3821_recursiveGen;
                    } else {
                      r = (_3821_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out631;
                    DCOMP._IOwnership _out632;
                    DCOMP.COMP.FromOwnership(r, _3822_recOwned, expectedOwnership, out _out631, out _out632);
                    r = _out631;
                    resultingOwnership = _out632;
                  } else {
                    RAST._IType _3824___mcc_h1424 = _source154.dtor_value;
                    RAST._IType _3825_v = _3824___mcc_h1424;
                    RAST._IType _3826_toTpeRust;
                    RAST._IType _out633;
                    _out633 = DCOMP.COMP.GenType(_3297_toTpe, false, false);
                    _3826_toTpeRust = _out633;
                    r = (((_3821_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_3826_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out634;
                    DCOMP._IOwnership _out635;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out634, out _out635);
                    r = _out634;
                    resultingOwnership = _out635;
                  }
                } else {
                  if ((_3820_nativeFromType).is_Some) {
                    if (object.Equals(_3297_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3827_recursiveGen;
                      DCOMP._IOwnership _3828_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3829_recIdents;
                      RAST._IExpr _out636;
                      DCOMP._IOwnership _out637;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out638;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out636, out _out637, out _out638);
                      _3827_recursiveGen = _out636;
                      _3828_recOwned = _out637;
                      _3829_recIdents = _out638;
                      RAST._IExpr _out639;
                      DCOMP._IOwnership _out640;
                      DCOMP.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_3827_recursiveGen, DCOMP.__default.DafnyCharUnderlying)), _3828_recOwned, expectedOwnership, out _out639, out _out640);
                      r = _out639;
                      resultingOwnership = _out640;
                      readIdents = _3829_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out641;
                  DCOMP._IOwnership _out642;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out643;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3819_b), _3819_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out641, out _out642, out _out643);
                  r = _out641;
                  resultingOwnership = _out642;
                  readIdents = _out643;
                }
              }
            }
          }
        } else if (_source124.is_Nullable) {
          DAST._IType _3830___mcc_h233 = _source124.dtor_Nullable_a0;
          DAST._IType _source155 = _3302___mcc_h1;
          if (_source155.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3831___mcc_h237 = _source155.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3832___mcc_h238 = _source155.dtor_typeArgs;
            DAST._IResolvedType _3833___mcc_h239 = _source155.dtor_resolved;
            DAST._IResolvedType _source156 = _3833___mcc_h239;
            if (_source156.is_Datatype) {
              DAST._IDatatypeType _3834___mcc_h246 = _source156.dtor_datatypeType;
              {
                RAST._IExpr _3835_recursiveGen;
                DCOMP._IOwnership _3836_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3837_recIdents;
                RAST._IExpr _out644;
                DCOMP._IOwnership _out645;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out646;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out644, out _out645, out _out646);
                _3835_recursiveGen = _out644;
                _3836_recOwned = _out645;
                _3837_recIdents = _out646;
                r = _3835_recursiveGen;
                if (object.Equals(_3836_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out647;
                DCOMP._IOwnership _out648;
                DCOMP.COMP.FromOwnership(r, _3836_recOwned, expectedOwnership, out _out647, out _out648);
                r = _out647;
                resultingOwnership = _out648;
                readIdents = _3837_recIdents;
              }
            } else if (_source156.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3838___mcc_h249 = _source156.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3839___mcc_h250 = _source156.dtor_attributes;
              {
                RAST._IExpr _3840_recursiveGen;
                DCOMP._IOwnership _3841_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3842_recIdents;
                RAST._IExpr _out649;
                DCOMP._IOwnership _out650;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out651;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out649, out _out650, out _out651);
                _3840_recursiveGen = _out649;
                _3841_recOwned = _out650;
                _3842_recIdents = _out651;
                r = _3840_recursiveGen;
                if (object.Equals(_3841_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out652;
                DCOMP._IOwnership _out653;
                DCOMP.COMP.FromOwnership(r, _3841_recOwned, expectedOwnership, out _out652, out _out653);
                r = _out652;
                resultingOwnership = _out653;
                readIdents = _3842_recIdents;
              }
            } else {
              DAST._IType _3843___mcc_h255 = _source156.dtor_baseType;
              DAST._INewtypeRange _3844___mcc_h256 = _source156.dtor_range;
              bool _3845___mcc_h257 = _source156.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3846___mcc_h258 = _source156.dtor_attributes;
              {
                RAST._IExpr _3847_recursiveGen;
                DCOMP._IOwnership _3848_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3849_recIdents;
                RAST._IExpr _out654;
                DCOMP._IOwnership _out655;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out654, out _out655, out _out656);
                _3847_recursiveGen = _out654;
                _3848_recOwned = _out655;
                _3849_recIdents = _out656;
                r = _3847_recursiveGen;
                if (object.Equals(_3848_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out657;
                DCOMP._IOwnership _out658;
                DCOMP.COMP.FromOwnership(r, _3848_recOwned, expectedOwnership, out _out657, out _out658);
                r = _out657;
                resultingOwnership = _out658;
                readIdents = _3849_recIdents;
              }
            }
          } else if (_source155.is_Nullable) {
            DAST._IType _3850___mcc_h267 = _source155.dtor_Nullable_a0;
            {
              RAST._IExpr _3851_recursiveGen;
              DCOMP._IOwnership _3852_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3853_recIdents;
              RAST._IExpr _out659;
              DCOMP._IOwnership _out660;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out661;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out659, out _out660, out _out661);
              _3851_recursiveGen = _out659;
              _3852_recOwned = _out660;
              _3853_recIdents = _out661;
              r = _3851_recursiveGen;
              if (object.Equals(_3852_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out662;
              DCOMP._IOwnership _out663;
              DCOMP.COMP.FromOwnership(r, _3852_recOwned, expectedOwnership, out _out662, out _out663);
              r = _out662;
              resultingOwnership = _out663;
              readIdents = _3853_recIdents;
            }
          } else if (_source155.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3854___mcc_h270 = _source155.dtor_Tuple_a0;
            {
              RAST._IExpr _3855_recursiveGen;
              DCOMP._IOwnership _3856_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3857_recIdents;
              RAST._IExpr _out664;
              DCOMP._IOwnership _out665;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out666;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out664, out _out665, out _out666);
              _3855_recursiveGen = _out664;
              _3856_recOwned = _out665;
              _3857_recIdents = _out666;
              r = _3855_recursiveGen;
              if (object.Equals(_3856_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out667;
              DCOMP._IOwnership _out668;
              DCOMP.COMP.FromOwnership(r, _3856_recOwned, expectedOwnership, out _out667, out _out668);
              r = _out667;
              resultingOwnership = _out668;
              readIdents = _3857_recIdents;
            }
          } else if (_source155.is_Array) {
            DAST._IType _3858___mcc_h273 = _source155.dtor_element;
            BigInteger _3859___mcc_h274 = _source155.dtor_dims;
            {
              RAST._IExpr _3860_recursiveGen;
              DCOMP._IOwnership _3861_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3862_recIdents;
              RAST._IExpr _out669;
              DCOMP._IOwnership _out670;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out671;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out669, out _out670, out _out671);
              _3860_recursiveGen = _out669;
              _3861_recOwned = _out670;
              _3862_recIdents = _out671;
              r = _3860_recursiveGen;
              if (object.Equals(_3861_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out672;
              DCOMP._IOwnership _out673;
              DCOMP.COMP.FromOwnership(r, _3861_recOwned, expectedOwnership, out _out672, out _out673);
              r = _out672;
              resultingOwnership = _out673;
              readIdents = _3862_recIdents;
            }
          } else if (_source155.is_Seq) {
            DAST._IType _3863___mcc_h279 = _source155.dtor_element;
            {
              RAST._IExpr _3864_recursiveGen;
              DCOMP._IOwnership _3865_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3866_recIdents;
              RAST._IExpr _out674;
              DCOMP._IOwnership _out675;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out674, out _out675, out _out676);
              _3864_recursiveGen = _out674;
              _3865_recOwned = _out675;
              _3866_recIdents = _out676;
              r = _3864_recursiveGen;
              if (object.Equals(_3865_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out677;
              DCOMP._IOwnership _out678;
              DCOMP.COMP.FromOwnership(r, _3865_recOwned, expectedOwnership, out _out677, out _out678);
              r = _out677;
              resultingOwnership = _out678;
              readIdents = _3866_recIdents;
            }
          } else if (_source155.is_Set) {
            DAST._IType _3867___mcc_h282 = _source155.dtor_element;
            {
              RAST._IExpr _3868_recursiveGen;
              DCOMP._IOwnership _3869_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3870_recIdents;
              RAST._IExpr _out679;
              DCOMP._IOwnership _out680;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out681;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out679, out _out680, out _out681);
              _3868_recursiveGen = _out679;
              _3869_recOwned = _out680;
              _3870_recIdents = _out681;
              r = _3868_recursiveGen;
              if (object.Equals(_3869_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out682;
              DCOMP._IOwnership _out683;
              DCOMP.COMP.FromOwnership(r, _3869_recOwned, expectedOwnership, out _out682, out _out683);
              r = _out682;
              resultingOwnership = _out683;
              readIdents = _3870_recIdents;
            }
          } else if (_source155.is_Multiset) {
            DAST._IType _3871___mcc_h285 = _source155.dtor_element;
            {
              RAST._IExpr _3872_recursiveGen;
              DCOMP._IOwnership _3873_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3874_recIdents;
              RAST._IExpr _out684;
              DCOMP._IOwnership _out685;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out686;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out684, out _out685, out _out686);
              _3872_recursiveGen = _out684;
              _3873_recOwned = _out685;
              _3874_recIdents = _out686;
              r = _3872_recursiveGen;
              if (object.Equals(_3873_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out687;
              DCOMP._IOwnership _out688;
              DCOMP.COMP.FromOwnership(r, _3873_recOwned, expectedOwnership, out _out687, out _out688);
              r = _out687;
              resultingOwnership = _out688;
              readIdents = _3874_recIdents;
            }
          } else if (_source155.is_Map) {
            DAST._IType _3875___mcc_h288 = _source155.dtor_key;
            DAST._IType _3876___mcc_h289 = _source155.dtor_value;
            {
              RAST._IExpr _3877_recursiveGen;
              DCOMP._IOwnership _3878_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3879_recIdents;
              RAST._IExpr _out689;
              DCOMP._IOwnership _out690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out689, out _out690, out _out691);
              _3877_recursiveGen = _out689;
              _3878_recOwned = _out690;
              _3879_recIdents = _out691;
              r = _3877_recursiveGen;
              if (object.Equals(_3878_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out692;
              DCOMP._IOwnership _out693;
              DCOMP.COMP.FromOwnership(r, _3878_recOwned, expectedOwnership, out _out692, out _out693);
              r = _out692;
              resultingOwnership = _out693;
              readIdents = _3879_recIdents;
            }
          } else if (_source155.is_SetBuilder) {
            DAST._IType _3880___mcc_h294 = _source155.dtor_element;
            {
              RAST._IExpr _3881_recursiveGen;
              DCOMP._IOwnership _3882_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3883_recIdents;
              RAST._IExpr _out694;
              DCOMP._IOwnership _out695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out694, out _out695, out _out696);
              _3881_recursiveGen = _out694;
              _3882_recOwned = _out695;
              _3883_recIdents = _out696;
              r = _3881_recursiveGen;
              if (object.Equals(_3882_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out697;
              DCOMP._IOwnership _out698;
              DCOMP.COMP.FromOwnership(r, _3882_recOwned, expectedOwnership, out _out697, out _out698);
              r = _out697;
              resultingOwnership = _out698;
              readIdents = _3883_recIdents;
            }
          } else if (_source155.is_MapBuilder) {
            DAST._IType _3884___mcc_h297 = _source155.dtor_key;
            DAST._IType _3885___mcc_h298 = _source155.dtor_value;
            {
              RAST._IExpr _3886_recursiveGen;
              DCOMP._IOwnership _3887_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3888_recIdents;
              RAST._IExpr _out699;
              DCOMP._IOwnership _out700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out699, out _out700, out _out701);
              _3886_recursiveGen = _out699;
              _3887_recOwned = _out700;
              _3888_recIdents = _out701;
              r = _3886_recursiveGen;
              if (object.Equals(_3887_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out702;
              DCOMP._IOwnership _out703;
              DCOMP.COMP.FromOwnership(r, _3887_recOwned, expectedOwnership, out _out702, out _out703);
              r = _out702;
              resultingOwnership = _out703;
              readIdents = _3888_recIdents;
            }
          } else if (_source155.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3889___mcc_h303 = _source155.dtor_args;
            DAST._IType _3890___mcc_h304 = _source155.dtor_result;
            {
              RAST._IExpr _3891_recursiveGen;
              DCOMP._IOwnership _3892_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3893_recIdents;
              RAST._IExpr _out704;
              DCOMP._IOwnership _out705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out704, out _out705, out _out706);
              _3891_recursiveGen = _out704;
              _3892_recOwned = _out705;
              _3893_recIdents = _out706;
              r = _3891_recursiveGen;
              if (object.Equals(_3892_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out707;
              DCOMP._IOwnership _out708;
              DCOMP.COMP.FromOwnership(r, _3892_recOwned, expectedOwnership, out _out707, out _out708);
              r = _out707;
              resultingOwnership = _out708;
              readIdents = _3893_recIdents;
            }
          } else if (_source155.is_Primitive) {
            DAST._IPrimitive _3894___mcc_h309 = _source155.dtor_Primitive_a0;
            {
              RAST._IExpr _3895_recursiveGen;
              DCOMP._IOwnership _3896_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3897_recIdents;
              RAST._IExpr _out709;
              DCOMP._IOwnership _out710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out709, out _out710, out _out711);
              _3895_recursiveGen = _out709;
              _3896_recOwned = _out710;
              _3897_recIdents = _out711;
              r = _3895_recursiveGen;
              if (object.Equals(_3896_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out712;
              DCOMP._IOwnership _out713;
              DCOMP.COMP.FromOwnership(r, _3896_recOwned, expectedOwnership, out _out712, out _out713);
              r = _out712;
              resultingOwnership = _out713;
              readIdents = _3897_recIdents;
            }
          } else if (_source155.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3898___mcc_h312 = _source155.dtor_Passthrough_a0;
            {
              RAST._IExpr _3899_recursiveGen;
              DCOMP._IOwnership _3900_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3901_recIdents;
              RAST._IExpr _out714;
              DCOMP._IOwnership _out715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out714, out _out715, out _out716);
              _3899_recursiveGen = _out714;
              _3900_recOwned = _out715;
              _3901_recIdents = _out716;
              r = _3899_recursiveGen;
              if (object.Equals(_3900_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out717;
              DCOMP._IOwnership _out718;
              DCOMP.COMP.FromOwnership(r, _3900_recOwned, expectedOwnership, out _out717, out _out718);
              r = _out717;
              resultingOwnership = _out718;
              readIdents = _3901_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3902___mcc_h315 = _source155.dtor_TypeArg_a0;
            {
              RAST._IExpr _3903_recursiveGen;
              DCOMP._IOwnership _3904_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3905_recIdents;
              RAST._IExpr _out719;
              DCOMP._IOwnership _out720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out719, out _out720, out _out721);
              _3903_recursiveGen = _out719;
              _3904_recOwned = _out720;
              _3905_recIdents = _out721;
              r = _3903_recursiveGen;
              if (object.Equals(_3904_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out722;
              DCOMP._IOwnership _out723;
              DCOMP.COMP.FromOwnership(r, _3904_recOwned, expectedOwnership, out _out722, out _out723);
              r = _out722;
              resultingOwnership = _out723;
              readIdents = _3905_recIdents;
            }
          }
        } else if (_source124.is_Tuple) {
          Dafny.ISequence<DAST._IType> _3906___mcc_h318 = _source124.dtor_Tuple_a0;
          DAST._IType _source157 = _3302___mcc_h1;
          if (_source157.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3907___mcc_h322 = _source157.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3908___mcc_h323 = _source157.dtor_typeArgs;
            DAST._IResolvedType _3909___mcc_h324 = _source157.dtor_resolved;
            DAST._IResolvedType _source158 = _3909___mcc_h324;
            if (_source158.is_Datatype) {
              DAST._IDatatypeType _3910___mcc_h328 = _source158.dtor_datatypeType;
              {
                RAST._IExpr _3911_recursiveGen;
                DCOMP._IOwnership _3912_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3913_recIdents;
                RAST._IExpr _out724;
                DCOMP._IOwnership _out725;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out726;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out724, out _out725, out _out726);
                _3911_recursiveGen = _out724;
                _3912_recOwned = _out725;
                _3913_recIdents = _out726;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3911_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out727;
                DCOMP._IOwnership _out728;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out727, out _out728);
                r = _out727;
                resultingOwnership = _out728;
                readIdents = _3913_recIdents;
              }
            } else if (_source158.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3914___mcc_h330 = _source158.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3915___mcc_h331 = _source158.dtor_attributes;
              {
                RAST._IExpr _3916_recursiveGen;
                DCOMP._IOwnership _3917_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3918_recIdents;
                RAST._IExpr _out729;
                DCOMP._IOwnership _out730;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out729, out _out730, out _out731);
                _3916_recursiveGen = _out729;
                _3917_recOwned = _out730;
                _3918_recIdents = _out731;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3916_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out732;
                DCOMP._IOwnership _out733;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out732, out _out733);
                r = _out732;
                resultingOwnership = _out733;
                readIdents = _3918_recIdents;
              }
            } else {
              DAST._IType _3919___mcc_h334 = _source158.dtor_baseType;
              DAST._INewtypeRange _3920___mcc_h335 = _source158.dtor_range;
              bool _3921___mcc_h336 = _source158.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3922___mcc_h337 = _source158.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3923_attributes = _3922___mcc_h337;
              bool _3924_erase = _3921___mcc_h336;
              DAST._INewtypeRange _3925_range = _3920___mcc_h335;
              DAST._IType _3926_b = _3919___mcc_h334;
              {
                Std.Wrappers._IOption<RAST._IType> _3927_nativeToType;
                _3927_nativeToType = DCOMP.COMP.NewtypeToRustType(_3926_b, _3925_range);
                if (object.Equals(_3296_fromTpe, _3926_b)) {
                  RAST._IExpr _3928_recursiveGen;
                  DCOMP._IOwnership _3929_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3930_recIdents;
                  RAST._IExpr _out734;
                  DCOMP._IOwnership _out735;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out734, out _out735, out _out736);
                  _3928_recursiveGen = _out734;
                  _3929_recOwned = _out735;
                  _3930_recIdents = _out736;
                  readIdents = _3930_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source159 = _3927_nativeToType;
                  if (_source159.is_None) {
                    if (_3924_erase) {
                      r = _3928_recursiveGen;
                    } else {
                      RAST._IType _3931_rhsType;
                      RAST._IType _out737;
                      _out737 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _3931_rhsType = _out737;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3931_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3928_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out738;
                    DCOMP._IOwnership _out739;
                    DCOMP.COMP.FromOwnership(r, _3929_recOwned, expectedOwnership, out _out738, out _out739);
                    r = _out738;
                    resultingOwnership = _out739;
                  } else {
                    RAST._IType _3932___mcc_h1425 = _source159.dtor_value;
                    RAST._IType _3933_v = _3932___mcc_h1425;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3928_recursiveGen, RAST.Expr.create_ExprFromType(_3933_v)));
                    RAST._IExpr _out740;
                    DCOMP._IOwnership _out741;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out740, out _out741);
                    r = _out740;
                    resultingOwnership = _out741;
                  }
                } else {
                  if ((_3927_nativeToType).is_Some) {
                    DAST._IType _source160 = _3296_fromTpe;
                    if (_source160.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3934___mcc_h1426 = _source160.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _3935___mcc_h1427 = _source160.dtor_typeArgs;
                      DAST._IResolvedType _3936___mcc_h1428 = _source160.dtor_resolved;
                      DAST._IResolvedType _source161 = _3936___mcc_h1428;
                      if (_source161.is_Datatype) {
                        DAST._IDatatypeType _3937___mcc_h1432 = _source161.dtor_datatypeType;
                      } else if (_source161.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3938___mcc_h1434 = _source161.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _3939___mcc_h1435 = _source161.dtor_attributes;
                      } else {
                        DAST._IType _3940___mcc_h1438 = _source161.dtor_baseType;
                        DAST._INewtypeRange _3941___mcc_h1439 = _source161.dtor_range;
                        bool _3942___mcc_h1440 = _source161.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _3943___mcc_h1441 = _source161.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _3944_attributes0 = _3943___mcc_h1441;
                        bool _3945_erase0 = _3942___mcc_h1440;
                        DAST._INewtypeRange _3946_range0 = _3941___mcc_h1439;
                        DAST._IType _3947_b0 = _3940___mcc_h1438;
                        {
                          Std.Wrappers._IOption<RAST._IType> _3948_nativeFromType;
                          _3948_nativeFromType = DCOMP.COMP.NewtypeToRustType(_3947_b0, _3946_range0);
                          if ((_3948_nativeFromType).is_Some) {
                            RAST._IExpr _3949_recursiveGen;
                            DCOMP._IOwnership _3950_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3951_recIdents;
                            RAST._IExpr _out742;
                            DCOMP._IOwnership _out743;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out744;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out742, out _out743, out _out744);
                            _3949_recursiveGen = _out742;
                            _3950_recOwned = _out743;
                            _3951_recIdents = _out744;
                            RAST._IExpr _out745;
                            DCOMP._IOwnership _out746;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_3949_recursiveGen, (_3927_nativeToType).dtor_value), _3950_recOwned, expectedOwnership, out _out745, out _out746);
                            r = _out745;
                            resultingOwnership = _out746;
                            readIdents = _3951_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source160.is_Nullable) {
                      DAST._IType _3952___mcc_h1446 = _source160.dtor_Nullable_a0;
                    } else if (_source160.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _3953___mcc_h1448 = _source160.dtor_Tuple_a0;
                    } else if (_source160.is_Array) {
                      DAST._IType _3954___mcc_h1450 = _source160.dtor_element;
                      BigInteger _3955___mcc_h1451 = _source160.dtor_dims;
                    } else if (_source160.is_Seq) {
                      DAST._IType _3956___mcc_h1454 = _source160.dtor_element;
                    } else if (_source160.is_Set) {
                      DAST._IType _3957___mcc_h1456 = _source160.dtor_element;
                    } else if (_source160.is_Multiset) {
                      DAST._IType _3958___mcc_h1458 = _source160.dtor_element;
                    } else if (_source160.is_Map) {
                      DAST._IType _3959___mcc_h1460 = _source160.dtor_key;
                      DAST._IType _3960___mcc_h1461 = _source160.dtor_value;
                    } else if (_source160.is_SetBuilder) {
                      DAST._IType _3961___mcc_h1464 = _source160.dtor_element;
                    } else if (_source160.is_MapBuilder) {
                      DAST._IType _3962___mcc_h1466 = _source160.dtor_key;
                      DAST._IType _3963___mcc_h1467 = _source160.dtor_value;
                    } else if (_source160.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _3964___mcc_h1470 = _source160.dtor_args;
                      DAST._IType _3965___mcc_h1471 = _source160.dtor_result;
                    } else if (_source160.is_Primitive) {
                      DAST._IPrimitive _3966___mcc_h1474 = _source160.dtor_Primitive_a0;
                    } else if (_source160.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _3967___mcc_h1476 = _source160.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _3968___mcc_h1478 = _source160.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _3969_recursiveGen;
                      DCOMP._IOwnership _3970_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3971_recIdents;
                      RAST._IExpr _out747;
                      DCOMP._IOwnership _out748;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out747, out _out748, out _out749);
                      _3969_recursiveGen = _out747;
                      _3970_recOwned = _out748;
                      _3971_recIdents = _out749;
                      RAST._IExpr _out750;
                      DCOMP._IOwnership _out751;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_3969_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_3927_nativeToType).dtor_value), _3970_recOwned, expectedOwnership, out _out750, out _out751);
                      r = _out750;
                      resultingOwnership = _out751;
                      readIdents = _3971_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out752;
                  DCOMP._IOwnership _out753;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out754;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _3926_b), _3926_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out752, out _out753, out _out754);
                  r = _out752;
                  resultingOwnership = _out753;
                  readIdents = _out754;
                }
              }
            }
          } else if (_source157.is_Nullable) {
            DAST._IType _3972___mcc_h342 = _source157.dtor_Nullable_a0;
            {
              RAST._IExpr _3973_recursiveGen;
              DCOMP._IOwnership _3974_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3975_recIdents;
              RAST._IExpr _out755;
              DCOMP._IOwnership _out756;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out755, out _out756, out _out757);
              _3973_recursiveGen = _out755;
              _3974_recOwned = _out756;
              _3975_recIdents = _out757;
              r = _3973_recursiveGen;
              if (object.Equals(_3974_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out758;
              DCOMP._IOwnership _out759;
              DCOMP.COMP.FromOwnership(r, _3974_recOwned, expectedOwnership, out _out758, out _out759);
              r = _out758;
              resultingOwnership = _out759;
              readIdents = _3975_recIdents;
            }
          } else if (_source157.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3976___mcc_h344 = _source157.dtor_Tuple_a0;
            {
              RAST._IExpr _3977_recursiveGen;
              DCOMP._IOwnership _3978_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3979_recIdents;
              RAST._IExpr _out760;
              DCOMP._IOwnership _out761;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out762;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out760, out _out761, out _out762);
              _3977_recursiveGen = _out760;
              _3978_recOwned = _out761;
              _3979_recIdents = _out762;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3977_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out763;
              DCOMP._IOwnership _out764;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out763, out _out764);
              r = _out763;
              resultingOwnership = _out764;
              readIdents = _3979_recIdents;
            }
          } else if (_source157.is_Array) {
            DAST._IType _3980___mcc_h346 = _source157.dtor_element;
            BigInteger _3981___mcc_h347 = _source157.dtor_dims;
            {
              RAST._IExpr _3982_recursiveGen;
              DCOMP._IOwnership _3983_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3984_recIdents;
              RAST._IExpr _out765;
              DCOMP._IOwnership _out766;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out767;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out765, out _out766, out _out767);
              _3982_recursiveGen = _out765;
              _3983_recOwned = _out766;
              _3984_recIdents = _out767;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3982_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out768;
              DCOMP._IOwnership _out769;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out768, out _out769);
              r = _out768;
              resultingOwnership = _out769;
              readIdents = _3984_recIdents;
            }
          } else if (_source157.is_Seq) {
            DAST._IType _3985___mcc_h350 = _source157.dtor_element;
            {
              RAST._IExpr _3986_recursiveGen;
              DCOMP._IOwnership _3987_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3988_recIdents;
              RAST._IExpr _out770;
              DCOMP._IOwnership _out771;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out772;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out770, out _out771, out _out772);
              _3986_recursiveGen = _out770;
              _3987_recOwned = _out771;
              _3988_recIdents = _out772;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3986_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out773;
              DCOMP._IOwnership _out774;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out773, out _out774);
              r = _out773;
              resultingOwnership = _out774;
              readIdents = _3988_recIdents;
            }
          } else if (_source157.is_Set) {
            DAST._IType _3989___mcc_h352 = _source157.dtor_element;
            {
              RAST._IExpr _3990_recursiveGen;
              DCOMP._IOwnership _3991_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3992_recIdents;
              RAST._IExpr _out775;
              DCOMP._IOwnership _out776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out775, out _out776, out _out777);
              _3990_recursiveGen = _out775;
              _3991_recOwned = _out776;
              _3992_recIdents = _out777;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3990_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out778;
              DCOMP._IOwnership _out779;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out778, out _out779);
              r = _out778;
              resultingOwnership = _out779;
              readIdents = _3992_recIdents;
            }
          } else if (_source157.is_Multiset) {
            DAST._IType _3993___mcc_h354 = _source157.dtor_element;
            {
              RAST._IExpr _3994_recursiveGen;
              DCOMP._IOwnership _3995_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3996_recIdents;
              RAST._IExpr _out780;
              DCOMP._IOwnership _out781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out780, out _out781, out _out782);
              _3994_recursiveGen = _out780;
              _3995_recOwned = _out781;
              _3996_recIdents = _out782;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3994_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out783;
              DCOMP._IOwnership _out784;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out783, out _out784);
              r = _out783;
              resultingOwnership = _out784;
              readIdents = _3996_recIdents;
            }
          } else if (_source157.is_Map) {
            DAST._IType _3997___mcc_h356 = _source157.dtor_key;
            DAST._IType _3998___mcc_h357 = _source157.dtor_value;
            {
              RAST._IExpr _3999_recursiveGen;
              DCOMP._IOwnership _4000_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4001_recIdents;
              RAST._IExpr _out785;
              DCOMP._IOwnership _out786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out785, out _out786, out _out787);
              _3999_recursiveGen = _out785;
              _4000_recOwned = _out786;
              _4001_recIdents = _out787;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3999_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out788;
              DCOMP._IOwnership _out789;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out788, out _out789);
              r = _out788;
              resultingOwnership = _out789;
              readIdents = _4001_recIdents;
            }
          } else if (_source157.is_SetBuilder) {
            DAST._IType _4002___mcc_h360 = _source157.dtor_element;
            {
              RAST._IExpr _4003_recursiveGen;
              DCOMP._IOwnership _4004_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4005_recIdents;
              RAST._IExpr _out790;
              DCOMP._IOwnership _out791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out792;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out790, out _out791, out _out792);
              _4003_recursiveGen = _out790;
              _4004_recOwned = _out791;
              _4005_recIdents = _out792;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4003_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out793;
              DCOMP._IOwnership _out794;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out793, out _out794);
              r = _out793;
              resultingOwnership = _out794;
              readIdents = _4005_recIdents;
            }
          } else if (_source157.is_MapBuilder) {
            DAST._IType _4006___mcc_h362 = _source157.dtor_key;
            DAST._IType _4007___mcc_h363 = _source157.dtor_value;
            {
              RAST._IExpr _4008_recursiveGen;
              DCOMP._IOwnership _4009_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4010_recIdents;
              RAST._IExpr _out795;
              DCOMP._IOwnership _out796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out795, out _out796, out _out797);
              _4008_recursiveGen = _out795;
              _4009_recOwned = _out796;
              _4010_recIdents = _out797;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4008_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out798;
              DCOMP._IOwnership _out799;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out798, out _out799);
              r = _out798;
              resultingOwnership = _out799;
              readIdents = _4010_recIdents;
            }
          } else if (_source157.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4011___mcc_h366 = _source157.dtor_args;
            DAST._IType _4012___mcc_h367 = _source157.dtor_result;
            {
              RAST._IExpr _4013_recursiveGen;
              DCOMP._IOwnership _4014_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4015_recIdents;
              RAST._IExpr _out800;
              DCOMP._IOwnership _out801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out800, out _out801, out _out802);
              _4013_recursiveGen = _out800;
              _4014_recOwned = _out801;
              _4015_recIdents = _out802;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4013_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out803;
              DCOMP._IOwnership _out804;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out803, out _out804);
              r = _out803;
              resultingOwnership = _out804;
              readIdents = _4015_recIdents;
            }
          } else if (_source157.is_Primitive) {
            DAST._IPrimitive _4016___mcc_h370 = _source157.dtor_Primitive_a0;
            {
              RAST._IExpr _4017_recursiveGen;
              DCOMP._IOwnership _4018_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4019_recIdents;
              RAST._IExpr _out805;
              DCOMP._IOwnership _out806;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out807;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out805, out _out806, out _out807);
              _4017_recursiveGen = _out805;
              _4018_recOwned = _out806;
              _4019_recIdents = _out807;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4017_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out808;
              DCOMP._IOwnership _out809;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out808, out _out809);
              r = _out808;
              resultingOwnership = _out809;
              readIdents = _4019_recIdents;
            }
          } else if (_source157.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4020___mcc_h372 = _source157.dtor_Passthrough_a0;
            {
              RAST._IExpr _4021_recursiveGen;
              DCOMP._IOwnership _4022_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4023_recIdents;
              RAST._IExpr _out810;
              DCOMP._IOwnership _out811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out810, out _out811, out _out812);
              _4021_recursiveGen = _out810;
              _4022_recOwned = _out811;
              _4023_recIdents = _out812;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4021_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out813;
              DCOMP._IOwnership _out814;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out813, out _out814);
              r = _out813;
              resultingOwnership = _out814;
              readIdents = _4023_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4024___mcc_h374 = _source157.dtor_TypeArg_a0;
            {
              RAST._IExpr _4025_recursiveGen;
              DCOMP._IOwnership _4026_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4027_recIdents;
              RAST._IExpr _out815;
              DCOMP._IOwnership _out816;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out815, out _out816, out _out817);
              _4025_recursiveGen = _out815;
              _4026_recOwned = _out816;
              _4027_recIdents = _out817;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4025_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out818;
              DCOMP._IOwnership _out819;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out818, out _out819);
              r = _out818;
              resultingOwnership = _out819;
              readIdents = _4027_recIdents;
            }
          }
        } else if (_source124.is_Array) {
          DAST._IType _4028___mcc_h376 = _source124.dtor_element;
          BigInteger _4029___mcc_h377 = _source124.dtor_dims;
          DAST._IType _source162 = _3302___mcc_h1;
          if (_source162.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4030___mcc_h384 = _source162.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4031___mcc_h385 = _source162.dtor_typeArgs;
            DAST._IResolvedType _4032___mcc_h386 = _source162.dtor_resolved;
            DAST._IResolvedType _source163 = _4032___mcc_h386;
            if (_source163.is_Datatype) {
              DAST._IDatatypeType _4033___mcc_h390 = _source163.dtor_datatypeType;
              {
                RAST._IExpr _4034_recursiveGen;
                DCOMP._IOwnership _4035_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4036_recIdents;
                RAST._IExpr _out820;
                DCOMP._IOwnership _out821;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out820, out _out821, out _out822);
                _4034_recursiveGen = _out820;
                _4035_recOwned = _out821;
                _4036_recIdents = _out822;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4034_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out823;
                DCOMP._IOwnership _out824;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out823, out _out824);
                r = _out823;
                resultingOwnership = _out824;
                readIdents = _4036_recIdents;
              }
            } else if (_source163.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4037___mcc_h392 = _source163.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4038___mcc_h393 = _source163.dtor_attributes;
              {
                RAST._IExpr _4039_recursiveGen;
                DCOMP._IOwnership _4040_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4041_recIdents;
                RAST._IExpr _out825;
                DCOMP._IOwnership _out826;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out825, out _out826, out _out827);
                _4039_recursiveGen = _out825;
                _4040_recOwned = _out826;
                _4041_recIdents = _out827;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4039_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out828;
                DCOMP._IOwnership _out829;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out828, out _out829);
                r = _out828;
                resultingOwnership = _out829;
                readIdents = _4041_recIdents;
              }
            } else {
              DAST._IType _4042___mcc_h396 = _source163.dtor_baseType;
              DAST._INewtypeRange _4043___mcc_h397 = _source163.dtor_range;
              bool _4044___mcc_h398 = _source163.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4045___mcc_h399 = _source163.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4046_attributes = _4045___mcc_h399;
              bool _4047_erase = _4044___mcc_h398;
              DAST._INewtypeRange _4048_range = _4043___mcc_h397;
              DAST._IType _4049_b = _4042___mcc_h396;
              {
                Std.Wrappers._IOption<RAST._IType> _4050_nativeToType;
                _4050_nativeToType = DCOMP.COMP.NewtypeToRustType(_4049_b, _4048_range);
                if (object.Equals(_3296_fromTpe, _4049_b)) {
                  RAST._IExpr _4051_recursiveGen;
                  DCOMP._IOwnership _4052_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4053_recIdents;
                  RAST._IExpr _out830;
                  DCOMP._IOwnership _out831;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out832;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out830, out _out831, out _out832);
                  _4051_recursiveGen = _out830;
                  _4052_recOwned = _out831;
                  _4053_recIdents = _out832;
                  readIdents = _4053_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source164 = _4050_nativeToType;
                  if (_source164.is_None) {
                    if (_4047_erase) {
                      r = _4051_recursiveGen;
                    } else {
                      RAST._IType _4054_rhsType;
                      RAST._IType _out833;
                      _out833 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _4054_rhsType = _out833;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4054_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4051_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out834;
                    DCOMP._IOwnership _out835;
                    DCOMP.COMP.FromOwnership(r, _4052_recOwned, expectedOwnership, out _out834, out _out835);
                    r = _out834;
                    resultingOwnership = _out835;
                  } else {
                    RAST._IType _4055___mcc_h1480 = _source164.dtor_value;
                    RAST._IType _4056_v = _4055___mcc_h1480;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4051_recursiveGen, RAST.Expr.create_ExprFromType(_4056_v)));
                    RAST._IExpr _out836;
                    DCOMP._IOwnership _out837;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out836, out _out837);
                    r = _out836;
                    resultingOwnership = _out837;
                  }
                } else {
                  if ((_4050_nativeToType).is_Some) {
                    DAST._IType _source165 = _3296_fromTpe;
                    if (_source165.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4057___mcc_h1481 = _source165.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4058___mcc_h1482 = _source165.dtor_typeArgs;
                      DAST._IResolvedType _4059___mcc_h1483 = _source165.dtor_resolved;
                      DAST._IResolvedType _source166 = _4059___mcc_h1483;
                      if (_source166.is_Datatype) {
                        DAST._IDatatypeType _4060___mcc_h1487 = _source166.dtor_datatypeType;
                      } else if (_source166.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4061___mcc_h1489 = _source166.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4062___mcc_h1490 = _source166.dtor_attributes;
                      } else {
                        DAST._IType _4063___mcc_h1493 = _source166.dtor_baseType;
                        DAST._INewtypeRange _4064___mcc_h1494 = _source166.dtor_range;
                        bool _4065___mcc_h1495 = _source166.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4066___mcc_h1496 = _source166.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4067_attributes0 = _4066___mcc_h1496;
                        bool _4068_erase0 = _4065___mcc_h1495;
                        DAST._INewtypeRange _4069_range0 = _4064___mcc_h1494;
                        DAST._IType _4070_b0 = _4063___mcc_h1493;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4071_nativeFromType;
                          _4071_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4070_b0, _4069_range0);
                          if ((_4071_nativeFromType).is_Some) {
                            RAST._IExpr _4072_recursiveGen;
                            DCOMP._IOwnership _4073_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4074_recIdents;
                            RAST._IExpr _out838;
                            DCOMP._IOwnership _out839;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out840;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out838, out _out839, out _out840);
                            _4072_recursiveGen = _out838;
                            _4073_recOwned = _out839;
                            _4074_recIdents = _out840;
                            RAST._IExpr _out841;
                            DCOMP._IOwnership _out842;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4072_recursiveGen, (_4050_nativeToType).dtor_value), _4073_recOwned, expectedOwnership, out _out841, out _out842);
                            r = _out841;
                            resultingOwnership = _out842;
                            readIdents = _4074_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source165.is_Nullable) {
                      DAST._IType _4075___mcc_h1501 = _source165.dtor_Nullable_a0;
                    } else if (_source165.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4076___mcc_h1503 = _source165.dtor_Tuple_a0;
                    } else if (_source165.is_Array) {
                      DAST._IType _4077___mcc_h1505 = _source165.dtor_element;
                      BigInteger _4078___mcc_h1506 = _source165.dtor_dims;
                    } else if (_source165.is_Seq) {
                      DAST._IType _4079___mcc_h1509 = _source165.dtor_element;
                    } else if (_source165.is_Set) {
                      DAST._IType _4080___mcc_h1511 = _source165.dtor_element;
                    } else if (_source165.is_Multiset) {
                      DAST._IType _4081___mcc_h1513 = _source165.dtor_element;
                    } else if (_source165.is_Map) {
                      DAST._IType _4082___mcc_h1515 = _source165.dtor_key;
                      DAST._IType _4083___mcc_h1516 = _source165.dtor_value;
                    } else if (_source165.is_SetBuilder) {
                      DAST._IType _4084___mcc_h1519 = _source165.dtor_element;
                    } else if (_source165.is_MapBuilder) {
                      DAST._IType _4085___mcc_h1521 = _source165.dtor_key;
                      DAST._IType _4086___mcc_h1522 = _source165.dtor_value;
                    } else if (_source165.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4087___mcc_h1525 = _source165.dtor_args;
                      DAST._IType _4088___mcc_h1526 = _source165.dtor_result;
                    } else if (_source165.is_Primitive) {
                      DAST._IPrimitive _4089___mcc_h1529 = _source165.dtor_Primitive_a0;
                    } else if (_source165.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4090___mcc_h1531 = _source165.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4091___mcc_h1533 = _source165.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4092_recursiveGen;
                      DCOMP._IOwnership _4093_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4094_recIdents;
                      RAST._IExpr _out843;
                      DCOMP._IOwnership _out844;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out845;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out843, out _out844, out _out845);
                      _4092_recursiveGen = _out843;
                      _4093_recOwned = _out844;
                      _4094_recIdents = _out845;
                      RAST._IExpr _out846;
                      DCOMP._IOwnership _out847;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4092_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4050_nativeToType).dtor_value), _4093_recOwned, expectedOwnership, out _out846, out _out847);
                      r = _out846;
                      resultingOwnership = _out847;
                      readIdents = _4094_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out848;
                  DCOMP._IOwnership _out849;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out850;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _4049_b), _4049_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out848, out _out849, out _out850);
                  r = _out848;
                  resultingOwnership = _out849;
                  readIdents = _out850;
                }
              }
            }
          } else if (_source162.is_Nullable) {
            DAST._IType _4095___mcc_h404 = _source162.dtor_Nullable_a0;
            {
              RAST._IExpr _4096_recursiveGen;
              DCOMP._IOwnership _4097_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4098_recIdents;
              RAST._IExpr _out851;
              DCOMP._IOwnership _out852;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out853;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out851, out _out852, out _out853);
              _4096_recursiveGen = _out851;
              _4097_recOwned = _out852;
              _4098_recIdents = _out853;
              r = _4096_recursiveGen;
              if (object.Equals(_4097_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out854;
              DCOMP._IOwnership _out855;
              DCOMP.COMP.FromOwnership(r, _4097_recOwned, expectedOwnership, out _out854, out _out855);
              r = _out854;
              resultingOwnership = _out855;
              readIdents = _4098_recIdents;
            }
          } else if (_source162.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4099___mcc_h406 = _source162.dtor_Tuple_a0;
            {
              RAST._IExpr _4100_recursiveGen;
              DCOMP._IOwnership _4101_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4102_recIdents;
              RAST._IExpr _out856;
              DCOMP._IOwnership _out857;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out858;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out856, out _out857, out _out858);
              _4100_recursiveGen = _out856;
              _4101_recOwned = _out857;
              _4102_recIdents = _out858;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4100_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out859;
              DCOMP._IOwnership _out860;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out859, out _out860);
              r = _out859;
              resultingOwnership = _out860;
              readIdents = _4102_recIdents;
            }
          } else if (_source162.is_Array) {
            DAST._IType _4103___mcc_h408 = _source162.dtor_element;
            BigInteger _4104___mcc_h409 = _source162.dtor_dims;
            {
              RAST._IExpr _4105_recursiveGen;
              DCOMP._IOwnership _4106_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4107_recIdents;
              RAST._IExpr _out861;
              DCOMP._IOwnership _out862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out861, out _out862, out _out863);
              _4105_recursiveGen = _out861;
              _4106_recOwned = _out862;
              _4107_recIdents = _out863;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4105_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out864;
              DCOMP._IOwnership _out865;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out864, out _out865);
              r = _out864;
              resultingOwnership = _out865;
              readIdents = _4107_recIdents;
            }
          } else if (_source162.is_Seq) {
            DAST._IType _4108___mcc_h412 = _source162.dtor_element;
            {
              RAST._IExpr _4109_recursiveGen;
              DCOMP._IOwnership _4110_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4111_recIdents;
              RAST._IExpr _out866;
              DCOMP._IOwnership _out867;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out866, out _out867, out _out868);
              _4109_recursiveGen = _out866;
              _4110_recOwned = _out867;
              _4111_recIdents = _out868;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4109_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out869;
              DCOMP._IOwnership _out870;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out869, out _out870);
              r = _out869;
              resultingOwnership = _out870;
              readIdents = _4111_recIdents;
            }
          } else if (_source162.is_Set) {
            DAST._IType _4112___mcc_h414 = _source162.dtor_element;
            {
              RAST._IExpr _4113_recursiveGen;
              DCOMP._IOwnership _4114_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4115_recIdents;
              RAST._IExpr _out871;
              DCOMP._IOwnership _out872;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out873;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out871, out _out872, out _out873);
              _4113_recursiveGen = _out871;
              _4114_recOwned = _out872;
              _4115_recIdents = _out873;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4113_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out874;
              DCOMP._IOwnership _out875;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out874, out _out875);
              r = _out874;
              resultingOwnership = _out875;
              readIdents = _4115_recIdents;
            }
          } else if (_source162.is_Multiset) {
            DAST._IType _4116___mcc_h416 = _source162.dtor_element;
            {
              RAST._IExpr _4117_recursiveGen;
              DCOMP._IOwnership _4118_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4119_recIdents;
              RAST._IExpr _out876;
              DCOMP._IOwnership _out877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out876, out _out877, out _out878);
              _4117_recursiveGen = _out876;
              _4118_recOwned = _out877;
              _4119_recIdents = _out878;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4117_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out879;
              DCOMP._IOwnership _out880;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out879, out _out880);
              r = _out879;
              resultingOwnership = _out880;
              readIdents = _4119_recIdents;
            }
          } else if (_source162.is_Map) {
            DAST._IType _4120___mcc_h418 = _source162.dtor_key;
            DAST._IType _4121___mcc_h419 = _source162.dtor_value;
            {
              RAST._IExpr _4122_recursiveGen;
              DCOMP._IOwnership _4123_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4124_recIdents;
              RAST._IExpr _out881;
              DCOMP._IOwnership _out882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out881, out _out882, out _out883);
              _4122_recursiveGen = _out881;
              _4123_recOwned = _out882;
              _4124_recIdents = _out883;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4122_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out884;
              DCOMP._IOwnership _out885;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out884, out _out885);
              r = _out884;
              resultingOwnership = _out885;
              readIdents = _4124_recIdents;
            }
          } else if (_source162.is_SetBuilder) {
            DAST._IType _4125___mcc_h422 = _source162.dtor_element;
            {
              RAST._IExpr _4126_recursiveGen;
              DCOMP._IOwnership _4127_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4128_recIdents;
              RAST._IExpr _out886;
              DCOMP._IOwnership _out887;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out886, out _out887, out _out888);
              _4126_recursiveGen = _out886;
              _4127_recOwned = _out887;
              _4128_recIdents = _out888;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4126_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out889;
              DCOMP._IOwnership _out890;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out889, out _out890);
              r = _out889;
              resultingOwnership = _out890;
              readIdents = _4128_recIdents;
            }
          } else if (_source162.is_MapBuilder) {
            DAST._IType _4129___mcc_h424 = _source162.dtor_key;
            DAST._IType _4130___mcc_h425 = _source162.dtor_value;
            {
              RAST._IExpr _4131_recursiveGen;
              DCOMP._IOwnership _4132_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4133_recIdents;
              RAST._IExpr _out891;
              DCOMP._IOwnership _out892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out893;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out891, out _out892, out _out893);
              _4131_recursiveGen = _out891;
              _4132_recOwned = _out892;
              _4133_recIdents = _out893;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4131_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out894;
              DCOMP._IOwnership _out895;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out894, out _out895);
              r = _out894;
              resultingOwnership = _out895;
              readIdents = _4133_recIdents;
            }
          } else if (_source162.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4134___mcc_h428 = _source162.dtor_args;
            DAST._IType _4135___mcc_h429 = _source162.dtor_result;
            {
              RAST._IExpr _4136_recursiveGen;
              DCOMP._IOwnership _4137_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4138_recIdents;
              RAST._IExpr _out896;
              DCOMP._IOwnership _out897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out896, out _out897, out _out898);
              _4136_recursiveGen = _out896;
              _4137_recOwned = _out897;
              _4138_recIdents = _out898;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4136_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out899;
              DCOMP._IOwnership _out900;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out899, out _out900);
              r = _out899;
              resultingOwnership = _out900;
              readIdents = _4138_recIdents;
            }
          } else if (_source162.is_Primitive) {
            DAST._IPrimitive _4139___mcc_h432 = _source162.dtor_Primitive_a0;
            {
              RAST._IExpr _4140_recursiveGen;
              DCOMP._IOwnership _4141_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4142_recIdents;
              RAST._IExpr _out901;
              DCOMP._IOwnership _out902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out901, out _out902, out _out903);
              _4140_recursiveGen = _out901;
              _4141_recOwned = _out902;
              _4142_recIdents = _out903;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4140_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out904;
              DCOMP._IOwnership _out905;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out904, out _out905);
              r = _out904;
              resultingOwnership = _out905;
              readIdents = _4142_recIdents;
            }
          } else if (_source162.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4143___mcc_h434 = _source162.dtor_Passthrough_a0;
            {
              RAST._IExpr _4144_recursiveGen;
              DCOMP._IOwnership _4145_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4146_recIdents;
              RAST._IExpr _out906;
              DCOMP._IOwnership _out907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out906, out _out907, out _out908);
              _4144_recursiveGen = _out906;
              _4145_recOwned = _out907;
              _4146_recIdents = _out908;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4144_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out909;
              DCOMP._IOwnership _out910;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out909, out _out910);
              r = _out909;
              resultingOwnership = _out910;
              readIdents = _4146_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4147___mcc_h436 = _source162.dtor_TypeArg_a0;
            {
              RAST._IExpr _4148_recursiveGen;
              DCOMP._IOwnership _4149_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4150_recIdents;
              RAST._IExpr _out911;
              DCOMP._IOwnership _out912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out911, out _out912, out _out913);
              _4148_recursiveGen = _out911;
              _4149_recOwned = _out912;
              _4150_recIdents = _out913;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4148_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out914;
              DCOMP._IOwnership _out915;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out914, out _out915);
              r = _out914;
              resultingOwnership = _out915;
              readIdents = _4150_recIdents;
            }
          }
        } else if (_source124.is_Seq) {
          DAST._IType _4151___mcc_h438 = _source124.dtor_element;
          DAST._IType _source167 = _3302___mcc_h1;
          if (_source167.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4152___mcc_h442 = _source167.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4153___mcc_h443 = _source167.dtor_typeArgs;
            DAST._IResolvedType _4154___mcc_h444 = _source167.dtor_resolved;
            DAST._IResolvedType _source168 = _4154___mcc_h444;
            if (_source168.is_Datatype) {
              DAST._IDatatypeType _4155___mcc_h448 = _source168.dtor_datatypeType;
              {
                RAST._IExpr _4156_recursiveGen;
                DCOMP._IOwnership _4157_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4158_recIdents;
                RAST._IExpr _out916;
                DCOMP._IOwnership _out917;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out918;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out916, out _out917, out _out918);
                _4156_recursiveGen = _out916;
                _4157_recOwned = _out917;
                _4158_recIdents = _out918;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4156_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out919;
                DCOMP._IOwnership _out920;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out919, out _out920);
                r = _out919;
                resultingOwnership = _out920;
                readIdents = _4158_recIdents;
              }
            } else if (_source168.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4159___mcc_h450 = _source168.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4160___mcc_h451 = _source168.dtor_attributes;
              {
                RAST._IExpr _4161_recursiveGen;
                DCOMP._IOwnership _4162_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4163_recIdents;
                RAST._IExpr _out921;
                DCOMP._IOwnership _out922;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out921, out _out922, out _out923);
                _4161_recursiveGen = _out921;
                _4162_recOwned = _out922;
                _4163_recIdents = _out923;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4161_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out924;
                DCOMP._IOwnership _out925;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out924, out _out925);
                r = _out924;
                resultingOwnership = _out925;
                readIdents = _4163_recIdents;
              }
            } else {
              DAST._IType _4164___mcc_h454 = _source168.dtor_baseType;
              DAST._INewtypeRange _4165___mcc_h455 = _source168.dtor_range;
              bool _4166___mcc_h456 = _source168.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4167___mcc_h457 = _source168.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4168_attributes = _4167___mcc_h457;
              bool _4169_erase = _4166___mcc_h456;
              DAST._INewtypeRange _4170_range = _4165___mcc_h455;
              DAST._IType _4171_b = _4164___mcc_h454;
              {
                Std.Wrappers._IOption<RAST._IType> _4172_nativeToType;
                _4172_nativeToType = DCOMP.COMP.NewtypeToRustType(_4171_b, _4170_range);
                if (object.Equals(_3296_fromTpe, _4171_b)) {
                  RAST._IExpr _4173_recursiveGen;
                  DCOMP._IOwnership _4174_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4175_recIdents;
                  RAST._IExpr _out926;
                  DCOMP._IOwnership _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out926, out _out927, out _out928);
                  _4173_recursiveGen = _out926;
                  _4174_recOwned = _out927;
                  _4175_recIdents = _out928;
                  readIdents = _4175_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source169 = _4172_nativeToType;
                  if (_source169.is_None) {
                    if (_4169_erase) {
                      r = _4173_recursiveGen;
                    } else {
                      RAST._IType _4176_rhsType;
                      RAST._IType _out929;
                      _out929 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _4176_rhsType = _out929;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4176_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4173_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out930;
                    DCOMP._IOwnership _out931;
                    DCOMP.COMP.FromOwnership(r, _4174_recOwned, expectedOwnership, out _out930, out _out931);
                    r = _out930;
                    resultingOwnership = _out931;
                  } else {
                    RAST._IType _4177___mcc_h1535 = _source169.dtor_value;
                    RAST._IType _4178_v = _4177___mcc_h1535;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4173_recursiveGen, RAST.Expr.create_ExprFromType(_4178_v)));
                    RAST._IExpr _out932;
                    DCOMP._IOwnership _out933;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out932, out _out933);
                    r = _out932;
                    resultingOwnership = _out933;
                  }
                } else {
                  if ((_4172_nativeToType).is_Some) {
                    DAST._IType _source170 = _3296_fromTpe;
                    if (_source170.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4179___mcc_h1536 = _source170.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4180___mcc_h1537 = _source170.dtor_typeArgs;
                      DAST._IResolvedType _4181___mcc_h1538 = _source170.dtor_resolved;
                      DAST._IResolvedType _source171 = _4181___mcc_h1538;
                      if (_source171.is_Datatype) {
                        DAST._IDatatypeType _4182___mcc_h1542 = _source171.dtor_datatypeType;
                      } else if (_source171.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4183___mcc_h1544 = _source171.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4184___mcc_h1545 = _source171.dtor_attributes;
                      } else {
                        DAST._IType _4185___mcc_h1548 = _source171.dtor_baseType;
                        DAST._INewtypeRange _4186___mcc_h1549 = _source171.dtor_range;
                        bool _4187___mcc_h1550 = _source171.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4188___mcc_h1551 = _source171.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4189_attributes0 = _4188___mcc_h1551;
                        bool _4190_erase0 = _4187___mcc_h1550;
                        DAST._INewtypeRange _4191_range0 = _4186___mcc_h1549;
                        DAST._IType _4192_b0 = _4185___mcc_h1548;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4193_nativeFromType;
                          _4193_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4192_b0, _4191_range0);
                          if ((_4193_nativeFromType).is_Some) {
                            RAST._IExpr _4194_recursiveGen;
                            DCOMP._IOwnership _4195_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4196_recIdents;
                            RAST._IExpr _out934;
                            DCOMP._IOwnership _out935;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out934, out _out935, out _out936);
                            _4194_recursiveGen = _out934;
                            _4195_recOwned = _out935;
                            _4196_recIdents = _out936;
                            RAST._IExpr _out937;
                            DCOMP._IOwnership _out938;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4194_recursiveGen, (_4172_nativeToType).dtor_value), _4195_recOwned, expectedOwnership, out _out937, out _out938);
                            r = _out937;
                            resultingOwnership = _out938;
                            readIdents = _4196_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source170.is_Nullable) {
                      DAST._IType _4197___mcc_h1556 = _source170.dtor_Nullable_a0;
                    } else if (_source170.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4198___mcc_h1558 = _source170.dtor_Tuple_a0;
                    } else if (_source170.is_Array) {
                      DAST._IType _4199___mcc_h1560 = _source170.dtor_element;
                      BigInteger _4200___mcc_h1561 = _source170.dtor_dims;
                    } else if (_source170.is_Seq) {
                      DAST._IType _4201___mcc_h1564 = _source170.dtor_element;
                    } else if (_source170.is_Set) {
                      DAST._IType _4202___mcc_h1566 = _source170.dtor_element;
                    } else if (_source170.is_Multiset) {
                      DAST._IType _4203___mcc_h1568 = _source170.dtor_element;
                    } else if (_source170.is_Map) {
                      DAST._IType _4204___mcc_h1570 = _source170.dtor_key;
                      DAST._IType _4205___mcc_h1571 = _source170.dtor_value;
                    } else if (_source170.is_SetBuilder) {
                      DAST._IType _4206___mcc_h1574 = _source170.dtor_element;
                    } else if (_source170.is_MapBuilder) {
                      DAST._IType _4207___mcc_h1576 = _source170.dtor_key;
                      DAST._IType _4208___mcc_h1577 = _source170.dtor_value;
                    } else if (_source170.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4209___mcc_h1580 = _source170.dtor_args;
                      DAST._IType _4210___mcc_h1581 = _source170.dtor_result;
                    } else if (_source170.is_Primitive) {
                      DAST._IPrimitive _4211___mcc_h1584 = _source170.dtor_Primitive_a0;
                    } else if (_source170.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4212___mcc_h1586 = _source170.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4213___mcc_h1588 = _source170.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4214_recursiveGen;
                      DCOMP._IOwnership _4215_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4216_recIdents;
                      RAST._IExpr _out939;
                      DCOMP._IOwnership _out940;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out941;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out939, out _out940, out _out941);
                      _4214_recursiveGen = _out939;
                      _4215_recOwned = _out940;
                      _4216_recIdents = _out941;
                      RAST._IExpr _out942;
                      DCOMP._IOwnership _out943;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4214_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4172_nativeToType).dtor_value), _4215_recOwned, expectedOwnership, out _out942, out _out943);
                      r = _out942;
                      resultingOwnership = _out943;
                      readIdents = _4216_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out944;
                  DCOMP._IOwnership _out945;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _4171_b), _4171_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out944, out _out945, out _out946);
                  r = _out944;
                  resultingOwnership = _out945;
                  readIdents = _out946;
                }
              }
            }
          } else if (_source167.is_Nullable) {
            DAST._IType _4217___mcc_h462 = _source167.dtor_Nullable_a0;
            {
              RAST._IExpr _4218_recursiveGen;
              DCOMP._IOwnership _4219_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4220_recIdents;
              RAST._IExpr _out947;
              DCOMP._IOwnership _out948;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out947, out _out948, out _out949);
              _4218_recursiveGen = _out947;
              _4219_recOwned = _out948;
              _4220_recIdents = _out949;
              r = _4218_recursiveGen;
              if (object.Equals(_4219_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out950;
              DCOMP._IOwnership _out951;
              DCOMP.COMP.FromOwnership(r, _4219_recOwned, expectedOwnership, out _out950, out _out951);
              r = _out950;
              resultingOwnership = _out951;
              readIdents = _4220_recIdents;
            }
          } else if (_source167.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4221___mcc_h464 = _source167.dtor_Tuple_a0;
            {
              RAST._IExpr _4222_recursiveGen;
              DCOMP._IOwnership _4223_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4224_recIdents;
              RAST._IExpr _out952;
              DCOMP._IOwnership _out953;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out954;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out952, out _out953, out _out954);
              _4222_recursiveGen = _out952;
              _4223_recOwned = _out953;
              _4224_recIdents = _out954;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4222_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out955;
              DCOMP._IOwnership _out956;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out955, out _out956);
              r = _out955;
              resultingOwnership = _out956;
              readIdents = _4224_recIdents;
            }
          } else if (_source167.is_Array) {
            DAST._IType _4225___mcc_h466 = _source167.dtor_element;
            BigInteger _4226___mcc_h467 = _source167.dtor_dims;
            {
              RAST._IExpr _4227_recursiveGen;
              DCOMP._IOwnership _4228_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4229_recIdents;
              RAST._IExpr _out957;
              DCOMP._IOwnership _out958;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out957, out _out958, out _out959);
              _4227_recursiveGen = _out957;
              _4228_recOwned = _out958;
              _4229_recIdents = _out959;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4227_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out960;
              DCOMP._IOwnership _out961;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out960, out _out961);
              r = _out960;
              resultingOwnership = _out961;
              readIdents = _4229_recIdents;
            }
          } else if (_source167.is_Seq) {
            DAST._IType _4230___mcc_h470 = _source167.dtor_element;
            {
              RAST._IExpr _4231_recursiveGen;
              DCOMP._IOwnership _4232_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4233_recIdents;
              RAST._IExpr _out962;
              DCOMP._IOwnership _out963;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out962, out _out963, out _out964);
              _4231_recursiveGen = _out962;
              _4232_recOwned = _out963;
              _4233_recIdents = _out964;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4231_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out965;
              DCOMP._IOwnership _out966;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out965, out _out966);
              r = _out965;
              resultingOwnership = _out966;
              readIdents = _4233_recIdents;
            }
          } else if (_source167.is_Set) {
            DAST._IType _4234___mcc_h472 = _source167.dtor_element;
            {
              RAST._IExpr _4235_recursiveGen;
              DCOMP._IOwnership _4236_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4237_recIdents;
              RAST._IExpr _out967;
              DCOMP._IOwnership _out968;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out967, out _out968, out _out969);
              _4235_recursiveGen = _out967;
              _4236_recOwned = _out968;
              _4237_recIdents = _out969;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4235_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out970;
              DCOMP._IOwnership _out971;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out970, out _out971);
              r = _out970;
              resultingOwnership = _out971;
              readIdents = _4237_recIdents;
            }
          } else if (_source167.is_Multiset) {
            DAST._IType _4238___mcc_h474 = _source167.dtor_element;
            {
              RAST._IExpr _4239_recursiveGen;
              DCOMP._IOwnership _4240_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4241_recIdents;
              RAST._IExpr _out972;
              DCOMP._IOwnership _out973;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out972, out _out973, out _out974);
              _4239_recursiveGen = _out972;
              _4240_recOwned = _out973;
              _4241_recIdents = _out974;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4239_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out975;
              DCOMP._IOwnership _out976;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out975, out _out976);
              r = _out975;
              resultingOwnership = _out976;
              readIdents = _4241_recIdents;
            }
          } else if (_source167.is_Map) {
            DAST._IType _4242___mcc_h476 = _source167.dtor_key;
            DAST._IType _4243___mcc_h477 = _source167.dtor_value;
            {
              RAST._IExpr _4244_recursiveGen;
              DCOMP._IOwnership _4245_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4246_recIdents;
              RAST._IExpr _out977;
              DCOMP._IOwnership _out978;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out977, out _out978, out _out979);
              _4244_recursiveGen = _out977;
              _4245_recOwned = _out978;
              _4246_recIdents = _out979;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4244_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out980;
              DCOMP._IOwnership _out981;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out980, out _out981);
              r = _out980;
              resultingOwnership = _out981;
              readIdents = _4246_recIdents;
            }
          } else if (_source167.is_SetBuilder) {
            DAST._IType _4247___mcc_h480 = _source167.dtor_element;
            {
              RAST._IExpr _4248_recursiveGen;
              DCOMP._IOwnership _4249_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4250_recIdents;
              RAST._IExpr _out982;
              DCOMP._IOwnership _out983;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out982, out _out983, out _out984);
              _4248_recursiveGen = _out982;
              _4249_recOwned = _out983;
              _4250_recIdents = _out984;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4248_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out985;
              DCOMP._IOwnership _out986;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out985, out _out986);
              r = _out985;
              resultingOwnership = _out986;
              readIdents = _4250_recIdents;
            }
          } else if (_source167.is_MapBuilder) {
            DAST._IType _4251___mcc_h482 = _source167.dtor_key;
            DAST._IType _4252___mcc_h483 = _source167.dtor_value;
            {
              RAST._IExpr _4253_recursiveGen;
              DCOMP._IOwnership _4254_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4255_recIdents;
              RAST._IExpr _out987;
              DCOMP._IOwnership _out988;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out987, out _out988, out _out989);
              _4253_recursiveGen = _out987;
              _4254_recOwned = _out988;
              _4255_recIdents = _out989;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4253_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out990;
              DCOMP._IOwnership _out991;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out990, out _out991);
              r = _out990;
              resultingOwnership = _out991;
              readIdents = _4255_recIdents;
            }
          } else if (_source167.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4256___mcc_h486 = _source167.dtor_args;
            DAST._IType _4257___mcc_h487 = _source167.dtor_result;
            {
              RAST._IExpr _4258_recursiveGen;
              DCOMP._IOwnership _4259_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4260_recIdents;
              RAST._IExpr _out992;
              DCOMP._IOwnership _out993;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out992, out _out993, out _out994);
              _4258_recursiveGen = _out992;
              _4259_recOwned = _out993;
              _4260_recIdents = _out994;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4258_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out995;
              DCOMP._IOwnership _out996;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out995, out _out996);
              r = _out995;
              resultingOwnership = _out996;
              readIdents = _4260_recIdents;
            }
          } else if (_source167.is_Primitive) {
            DAST._IPrimitive _4261___mcc_h490 = _source167.dtor_Primitive_a0;
            {
              RAST._IExpr _4262_recursiveGen;
              DCOMP._IOwnership _4263_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4264_recIdents;
              RAST._IExpr _out997;
              DCOMP._IOwnership _out998;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out999;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out997, out _out998, out _out999);
              _4262_recursiveGen = _out997;
              _4263_recOwned = _out998;
              _4264_recIdents = _out999;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4262_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1000;
              DCOMP._IOwnership _out1001;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1000, out _out1001);
              r = _out1000;
              resultingOwnership = _out1001;
              readIdents = _4264_recIdents;
            }
          } else if (_source167.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4265___mcc_h492 = _source167.dtor_Passthrough_a0;
            {
              RAST._IExpr _4266_recursiveGen;
              DCOMP._IOwnership _4267_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4268_recIdents;
              RAST._IExpr _out1002;
              DCOMP._IOwnership _out1003;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1002, out _out1003, out _out1004);
              _4266_recursiveGen = _out1002;
              _4267_recOwned = _out1003;
              _4268_recIdents = _out1004;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4266_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1005;
              DCOMP._IOwnership _out1006;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1005, out _out1006);
              r = _out1005;
              resultingOwnership = _out1006;
              readIdents = _4268_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4269___mcc_h494 = _source167.dtor_TypeArg_a0;
            {
              RAST._IExpr _4270_recursiveGen;
              DCOMP._IOwnership _4271_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4272_recIdents;
              RAST._IExpr _out1007;
              DCOMP._IOwnership _out1008;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1007, out _out1008, out _out1009);
              _4270_recursiveGen = _out1007;
              _4271_recOwned = _out1008;
              _4272_recIdents = _out1009;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4270_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1010;
              DCOMP._IOwnership _out1011;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1010, out _out1011);
              r = _out1010;
              resultingOwnership = _out1011;
              readIdents = _4272_recIdents;
            }
          }
        } else if (_source124.is_Set) {
          DAST._IType _4273___mcc_h496 = _source124.dtor_element;
          DAST._IType _source172 = _3302___mcc_h1;
          if (_source172.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4274___mcc_h500 = _source172.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4275___mcc_h501 = _source172.dtor_typeArgs;
            DAST._IResolvedType _4276___mcc_h502 = _source172.dtor_resolved;
            DAST._IResolvedType _source173 = _4276___mcc_h502;
            if (_source173.is_Datatype) {
              DAST._IDatatypeType _4277___mcc_h506 = _source173.dtor_datatypeType;
              {
                RAST._IExpr _4278_recursiveGen;
                DCOMP._IOwnership _4279_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4280_recIdents;
                RAST._IExpr _out1012;
                DCOMP._IOwnership _out1013;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1014;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1012, out _out1013, out _out1014);
                _4278_recursiveGen = _out1012;
                _4279_recOwned = _out1013;
                _4280_recIdents = _out1014;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4278_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1015;
                DCOMP._IOwnership _out1016;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1015, out _out1016);
                r = _out1015;
                resultingOwnership = _out1016;
                readIdents = _4280_recIdents;
              }
            } else if (_source173.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4281___mcc_h508 = _source173.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4282___mcc_h509 = _source173.dtor_attributes;
              {
                RAST._IExpr _4283_recursiveGen;
                DCOMP._IOwnership _4284_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4285_recIdents;
                RAST._IExpr _out1017;
                DCOMP._IOwnership _out1018;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1017, out _out1018, out _out1019);
                _4283_recursiveGen = _out1017;
                _4284_recOwned = _out1018;
                _4285_recIdents = _out1019;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4283_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1020;
                DCOMP._IOwnership _out1021;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1020, out _out1021);
                r = _out1020;
                resultingOwnership = _out1021;
                readIdents = _4285_recIdents;
              }
            } else {
              DAST._IType _4286___mcc_h512 = _source173.dtor_baseType;
              DAST._INewtypeRange _4287___mcc_h513 = _source173.dtor_range;
              bool _4288___mcc_h514 = _source173.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4289___mcc_h515 = _source173.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4290_attributes = _4289___mcc_h515;
              bool _4291_erase = _4288___mcc_h514;
              DAST._INewtypeRange _4292_range = _4287___mcc_h513;
              DAST._IType _4293_b = _4286___mcc_h512;
              {
                Std.Wrappers._IOption<RAST._IType> _4294_nativeToType;
                _4294_nativeToType = DCOMP.COMP.NewtypeToRustType(_4293_b, _4292_range);
                if (object.Equals(_3296_fromTpe, _4293_b)) {
                  RAST._IExpr _4295_recursiveGen;
                  DCOMP._IOwnership _4296_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4297_recIdents;
                  RAST._IExpr _out1022;
                  DCOMP._IOwnership _out1023;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1022, out _out1023, out _out1024);
                  _4295_recursiveGen = _out1022;
                  _4296_recOwned = _out1023;
                  _4297_recIdents = _out1024;
                  readIdents = _4297_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source174 = _4294_nativeToType;
                  if (_source174.is_None) {
                    if (_4291_erase) {
                      r = _4295_recursiveGen;
                    } else {
                      RAST._IType _4298_rhsType;
                      RAST._IType _out1025;
                      _out1025 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _4298_rhsType = _out1025;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4298_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4295_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1026;
                    DCOMP._IOwnership _out1027;
                    DCOMP.COMP.FromOwnership(r, _4296_recOwned, expectedOwnership, out _out1026, out _out1027);
                    r = _out1026;
                    resultingOwnership = _out1027;
                  } else {
                    RAST._IType _4299___mcc_h1590 = _source174.dtor_value;
                    RAST._IType _4300_v = _4299___mcc_h1590;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4295_recursiveGen, RAST.Expr.create_ExprFromType(_4300_v)));
                    RAST._IExpr _out1028;
                    DCOMP._IOwnership _out1029;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1028, out _out1029);
                    r = _out1028;
                    resultingOwnership = _out1029;
                  }
                } else {
                  if ((_4294_nativeToType).is_Some) {
                    DAST._IType _source175 = _3296_fromTpe;
                    if (_source175.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4301___mcc_h1591 = _source175.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4302___mcc_h1592 = _source175.dtor_typeArgs;
                      DAST._IResolvedType _4303___mcc_h1593 = _source175.dtor_resolved;
                      DAST._IResolvedType _source176 = _4303___mcc_h1593;
                      if (_source176.is_Datatype) {
                        DAST._IDatatypeType _4304___mcc_h1597 = _source176.dtor_datatypeType;
                      } else if (_source176.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4305___mcc_h1599 = _source176.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4306___mcc_h1600 = _source176.dtor_attributes;
                      } else {
                        DAST._IType _4307___mcc_h1603 = _source176.dtor_baseType;
                        DAST._INewtypeRange _4308___mcc_h1604 = _source176.dtor_range;
                        bool _4309___mcc_h1605 = _source176.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4310___mcc_h1606 = _source176.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4311_attributes0 = _4310___mcc_h1606;
                        bool _4312_erase0 = _4309___mcc_h1605;
                        DAST._INewtypeRange _4313_range0 = _4308___mcc_h1604;
                        DAST._IType _4314_b0 = _4307___mcc_h1603;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4315_nativeFromType;
                          _4315_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4314_b0, _4313_range0);
                          if ((_4315_nativeFromType).is_Some) {
                            RAST._IExpr _4316_recursiveGen;
                            DCOMP._IOwnership _4317_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4318_recIdents;
                            RAST._IExpr _out1030;
                            DCOMP._IOwnership _out1031;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1030, out _out1031, out _out1032);
                            _4316_recursiveGen = _out1030;
                            _4317_recOwned = _out1031;
                            _4318_recIdents = _out1032;
                            RAST._IExpr _out1033;
                            DCOMP._IOwnership _out1034;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4316_recursiveGen, (_4294_nativeToType).dtor_value), _4317_recOwned, expectedOwnership, out _out1033, out _out1034);
                            r = _out1033;
                            resultingOwnership = _out1034;
                            readIdents = _4318_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source175.is_Nullable) {
                      DAST._IType _4319___mcc_h1611 = _source175.dtor_Nullable_a0;
                    } else if (_source175.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4320___mcc_h1613 = _source175.dtor_Tuple_a0;
                    } else if (_source175.is_Array) {
                      DAST._IType _4321___mcc_h1615 = _source175.dtor_element;
                      BigInteger _4322___mcc_h1616 = _source175.dtor_dims;
                    } else if (_source175.is_Seq) {
                      DAST._IType _4323___mcc_h1619 = _source175.dtor_element;
                    } else if (_source175.is_Set) {
                      DAST._IType _4324___mcc_h1621 = _source175.dtor_element;
                    } else if (_source175.is_Multiset) {
                      DAST._IType _4325___mcc_h1623 = _source175.dtor_element;
                    } else if (_source175.is_Map) {
                      DAST._IType _4326___mcc_h1625 = _source175.dtor_key;
                      DAST._IType _4327___mcc_h1626 = _source175.dtor_value;
                    } else if (_source175.is_SetBuilder) {
                      DAST._IType _4328___mcc_h1629 = _source175.dtor_element;
                    } else if (_source175.is_MapBuilder) {
                      DAST._IType _4329___mcc_h1631 = _source175.dtor_key;
                      DAST._IType _4330___mcc_h1632 = _source175.dtor_value;
                    } else if (_source175.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4331___mcc_h1635 = _source175.dtor_args;
                      DAST._IType _4332___mcc_h1636 = _source175.dtor_result;
                    } else if (_source175.is_Primitive) {
                      DAST._IPrimitive _4333___mcc_h1639 = _source175.dtor_Primitive_a0;
                    } else if (_source175.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4334___mcc_h1641 = _source175.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4335___mcc_h1643 = _source175.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4336_recursiveGen;
                      DCOMP._IOwnership _4337_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4338_recIdents;
                      RAST._IExpr _out1035;
                      DCOMP._IOwnership _out1036;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1037;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1035, out _out1036, out _out1037);
                      _4336_recursiveGen = _out1035;
                      _4337_recOwned = _out1036;
                      _4338_recIdents = _out1037;
                      RAST._IExpr _out1038;
                      DCOMP._IOwnership _out1039;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4336_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4294_nativeToType).dtor_value), _4337_recOwned, expectedOwnership, out _out1038, out _out1039);
                      r = _out1038;
                      resultingOwnership = _out1039;
                      readIdents = _4338_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1040;
                  DCOMP._IOwnership _out1041;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1042;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _4293_b), _4293_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1040, out _out1041, out _out1042);
                  r = _out1040;
                  resultingOwnership = _out1041;
                  readIdents = _out1042;
                }
              }
            }
          } else if (_source172.is_Nullable) {
            DAST._IType _4339___mcc_h520 = _source172.dtor_Nullable_a0;
            {
              RAST._IExpr _4340_recursiveGen;
              DCOMP._IOwnership _4341_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4342_recIdents;
              RAST._IExpr _out1043;
              DCOMP._IOwnership _out1044;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1043, out _out1044, out _out1045);
              _4340_recursiveGen = _out1043;
              _4341_recOwned = _out1044;
              _4342_recIdents = _out1045;
              r = _4340_recursiveGen;
              if (object.Equals(_4341_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1046;
              DCOMP._IOwnership _out1047;
              DCOMP.COMP.FromOwnership(r, _4341_recOwned, expectedOwnership, out _out1046, out _out1047);
              r = _out1046;
              resultingOwnership = _out1047;
              readIdents = _4342_recIdents;
            }
          } else if (_source172.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4343___mcc_h522 = _source172.dtor_Tuple_a0;
            {
              RAST._IExpr _4344_recursiveGen;
              DCOMP._IOwnership _4345_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4346_recIdents;
              RAST._IExpr _out1048;
              DCOMP._IOwnership _out1049;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1050;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1048, out _out1049, out _out1050);
              _4344_recursiveGen = _out1048;
              _4345_recOwned = _out1049;
              _4346_recIdents = _out1050;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4344_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1051;
              DCOMP._IOwnership _out1052;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1051, out _out1052);
              r = _out1051;
              resultingOwnership = _out1052;
              readIdents = _4346_recIdents;
            }
          } else if (_source172.is_Array) {
            DAST._IType _4347___mcc_h524 = _source172.dtor_element;
            BigInteger _4348___mcc_h525 = _source172.dtor_dims;
            {
              RAST._IExpr _4349_recursiveGen;
              DCOMP._IOwnership _4350_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4351_recIdents;
              RAST._IExpr _out1053;
              DCOMP._IOwnership _out1054;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1053, out _out1054, out _out1055);
              _4349_recursiveGen = _out1053;
              _4350_recOwned = _out1054;
              _4351_recIdents = _out1055;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4349_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1056;
              DCOMP._IOwnership _out1057;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1056, out _out1057);
              r = _out1056;
              resultingOwnership = _out1057;
              readIdents = _4351_recIdents;
            }
          } else if (_source172.is_Seq) {
            DAST._IType _4352___mcc_h528 = _source172.dtor_element;
            {
              RAST._IExpr _4353_recursiveGen;
              DCOMP._IOwnership _4354_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4355_recIdents;
              RAST._IExpr _out1058;
              DCOMP._IOwnership _out1059;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1058, out _out1059, out _out1060);
              _4353_recursiveGen = _out1058;
              _4354_recOwned = _out1059;
              _4355_recIdents = _out1060;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4353_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1061;
              DCOMP._IOwnership _out1062;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1061, out _out1062);
              r = _out1061;
              resultingOwnership = _out1062;
              readIdents = _4355_recIdents;
            }
          } else if (_source172.is_Set) {
            DAST._IType _4356___mcc_h530 = _source172.dtor_element;
            {
              RAST._IExpr _4357_recursiveGen;
              DCOMP._IOwnership _4358_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4359_recIdents;
              RAST._IExpr _out1063;
              DCOMP._IOwnership _out1064;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1063, out _out1064, out _out1065);
              _4357_recursiveGen = _out1063;
              _4358_recOwned = _out1064;
              _4359_recIdents = _out1065;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4357_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1066;
              DCOMP._IOwnership _out1067;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1066, out _out1067);
              r = _out1066;
              resultingOwnership = _out1067;
              readIdents = _4359_recIdents;
            }
          } else if (_source172.is_Multiset) {
            DAST._IType _4360___mcc_h532 = _source172.dtor_element;
            {
              RAST._IExpr _4361_recursiveGen;
              DCOMP._IOwnership _4362_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4363_recIdents;
              RAST._IExpr _out1068;
              DCOMP._IOwnership _out1069;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1070;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1068, out _out1069, out _out1070);
              _4361_recursiveGen = _out1068;
              _4362_recOwned = _out1069;
              _4363_recIdents = _out1070;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4361_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1071;
              DCOMP._IOwnership _out1072;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1071, out _out1072);
              r = _out1071;
              resultingOwnership = _out1072;
              readIdents = _4363_recIdents;
            }
          } else if (_source172.is_Map) {
            DAST._IType _4364___mcc_h534 = _source172.dtor_key;
            DAST._IType _4365___mcc_h535 = _source172.dtor_value;
            {
              RAST._IExpr _4366_recursiveGen;
              DCOMP._IOwnership _4367_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4368_recIdents;
              RAST._IExpr _out1073;
              DCOMP._IOwnership _out1074;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1073, out _out1074, out _out1075);
              _4366_recursiveGen = _out1073;
              _4367_recOwned = _out1074;
              _4368_recIdents = _out1075;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4366_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1076;
              DCOMP._IOwnership _out1077;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1076, out _out1077);
              r = _out1076;
              resultingOwnership = _out1077;
              readIdents = _4368_recIdents;
            }
          } else if (_source172.is_SetBuilder) {
            DAST._IType _4369___mcc_h538 = _source172.dtor_element;
            {
              RAST._IExpr _4370_recursiveGen;
              DCOMP._IOwnership _4371_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4372_recIdents;
              RAST._IExpr _out1078;
              DCOMP._IOwnership _out1079;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1078, out _out1079, out _out1080);
              _4370_recursiveGen = _out1078;
              _4371_recOwned = _out1079;
              _4372_recIdents = _out1080;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4370_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1081;
              DCOMP._IOwnership _out1082;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1081, out _out1082);
              r = _out1081;
              resultingOwnership = _out1082;
              readIdents = _4372_recIdents;
            }
          } else if (_source172.is_MapBuilder) {
            DAST._IType _4373___mcc_h540 = _source172.dtor_key;
            DAST._IType _4374___mcc_h541 = _source172.dtor_value;
            {
              RAST._IExpr _4375_recursiveGen;
              DCOMP._IOwnership _4376_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4377_recIdents;
              RAST._IExpr _out1083;
              DCOMP._IOwnership _out1084;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1083, out _out1084, out _out1085);
              _4375_recursiveGen = _out1083;
              _4376_recOwned = _out1084;
              _4377_recIdents = _out1085;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4375_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1086;
              DCOMP._IOwnership _out1087;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1086, out _out1087);
              r = _out1086;
              resultingOwnership = _out1087;
              readIdents = _4377_recIdents;
            }
          } else if (_source172.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4378___mcc_h544 = _source172.dtor_args;
            DAST._IType _4379___mcc_h545 = _source172.dtor_result;
            {
              RAST._IExpr _4380_recursiveGen;
              DCOMP._IOwnership _4381_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4382_recIdents;
              RAST._IExpr _out1088;
              DCOMP._IOwnership _out1089;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1088, out _out1089, out _out1090);
              _4380_recursiveGen = _out1088;
              _4381_recOwned = _out1089;
              _4382_recIdents = _out1090;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4380_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1091;
              DCOMP._IOwnership _out1092;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1091, out _out1092);
              r = _out1091;
              resultingOwnership = _out1092;
              readIdents = _4382_recIdents;
            }
          } else if (_source172.is_Primitive) {
            DAST._IPrimitive _4383___mcc_h548 = _source172.dtor_Primitive_a0;
            {
              RAST._IExpr _4384_recursiveGen;
              DCOMP._IOwnership _4385_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4386_recIdents;
              RAST._IExpr _out1093;
              DCOMP._IOwnership _out1094;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1093, out _out1094, out _out1095);
              _4384_recursiveGen = _out1093;
              _4385_recOwned = _out1094;
              _4386_recIdents = _out1095;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4384_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1096;
              DCOMP._IOwnership _out1097;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1096, out _out1097);
              r = _out1096;
              resultingOwnership = _out1097;
              readIdents = _4386_recIdents;
            }
          } else if (_source172.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4387___mcc_h550 = _source172.dtor_Passthrough_a0;
            {
              RAST._IExpr _4388_recursiveGen;
              DCOMP._IOwnership _4389_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4390_recIdents;
              RAST._IExpr _out1098;
              DCOMP._IOwnership _out1099;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1098, out _out1099, out _out1100);
              _4388_recursiveGen = _out1098;
              _4389_recOwned = _out1099;
              _4390_recIdents = _out1100;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4388_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1101;
              DCOMP._IOwnership _out1102;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1101, out _out1102);
              r = _out1101;
              resultingOwnership = _out1102;
              readIdents = _4390_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4391___mcc_h552 = _source172.dtor_TypeArg_a0;
            {
              RAST._IExpr _4392_recursiveGen;
              DCOMP._IOwnership _4393_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4394_recIdents;
              RAST._IExpr _out1103;
              DCOMP._IOwnership _out1104;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1103, out _out1104, out _out1105);
              _4392_recursiveGen = _out1103;
              _4393_recOwned = _out1104;
              _4394_recIdents = _out1105;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4392_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1106;
              DCOMP._IOwnership _out1107;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1106, out _out1107);
              r = _out1106;
              resultingOwnership = _out1107;
              readIdents = _4394_recIdents;
            }
          }
        } else if (_source124.is_Multiset) {
          DAST._IType _4395___mcc_h554 = _source124.dtor_element;
          DAST._IType _source177 = _3302___mcc_h1;
          if (_source177.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4396___mcc_h558 = _source177.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4397___mcc_h559 = _source177.dtor_typeArgs;
            DAST._IResolvedType _4398___mcc_h560 = _source177.dtor_resolved;
            DAST._IResolvedType _source178 = _4398___mcc_h560;
            if (_source178.is_Datatype) {
              DAST._IDatatypeType _4399___mcc_h564 = _source178.dtor_datatypeType;
              {
                RAST._IExpr _4400_recursiveGen;
                DCOMP._IOwnership _4401_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4402_recIdents;
                RAST._IExpr _out1108;
                DCOMP._IOwnership _out1109;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1110;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1108, out _out1109, out _out1110);
                _4400_recursiveGen = _out1108;
                _4401_recOwned = _out1109;
                _4402_recIdents = _out1110;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4400_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1111;
                DCOMP._IOwnership _out1112;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1111, out _out1112);
                r = _out1111;
                resultingOwnership = _out1112;
                readIdents = _4402_recIdents;
              }
            } else if (_source178.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4403___mcc_h566 = _source178.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4404___mcc_h567 = _source178.dtor_attributes;
              {
                RAST._IExpr _4405_recursiveGen;
                DCOMP._IOwnership _4406_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4407_recIdents;
                RAST._IExpr _out1113;
                DCOMP._IOwnership _out1114;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1115;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1113, out _out1114, out _out1115);
                _4405_recursiveGen = _out1113;
                _4406_recOwned = _out1114;
                _4407_recIdents = _out1115;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4405_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1116;
                DCOMP._IOwnership _out1117;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1116, out _out1117);
                r = _out1116;
                resultingOwnership = _out1117;
                readIdents = _4407_recIdents;
              }
            } else {
              DAST._IType _4408___mcc_h570 = _source178.dtor_baseType;
              DAST._INewtypeRange _4409___mcc_h571 = _source178.dtor_range;
              bool _4410___mcc_h572 = _source178.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4411___mcc_h573 = _source178.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4412_attributes = _4411___mcc_h573;
              bool _4413_erase = _4410___mcc_h572;
              DAST._INewtypeRange _4414_range = _4409___mcc_h571;
              DAST._IType _4415_b = _4408___mcc_h570;
              {
                Std.Wrappers._IOption<RAST._IType> _4416_nativeToType;
                _4416_nativeToType = DCOMP.COMP.NewtypeToRustType(_4415_b, _4414_range);
                if (object.Equals(_3296_fromTpe, _4415_b)) {
                  RAST._IExpr _4417_recursiveGen;
                  DCOMP._IOwnership _4418_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4419_recIdents;
                  RAST._IExpr _out1118;
                  DCOMP._IOwnership _out1119;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1120;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1118, out _out1119, out _out1120);
                  _4417_recursiveGen = _out1118;
                  _4418_recOwned = _out1119;
                  _4419_recIdents = _out1120;
                  readIdents = _4419_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source179 = _4416_nativeToType;
                  if (_source179.is_None) {
                    if (_4413_erase) {
                      r = _4417_recursiveGen;
                    } else {
                      RAST._IType _4420_rhsType;
                      RAST._IType _out1121;
                      _out1121 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _4420_rhsType = _out1121;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4420_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4417_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1122;
                    DCOMP._IOwnership _out1123;
                    DCOMP.COMP.FromOwnership(r, _4418_recOwned, expectedOwnership, out _out1122, out _out1123);
                    r = _out1122;
                    resultingOwnership = _out1123;
                  } else {
                    RAST._IType _4421___mcc_h1645 = _source179.dtor_value;
                    RAST._IType _4422_v = _4421___mcc_h1645;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4417_recursiveGen, RAST.Expr.create_ExprFromType(_4422_v)));
                    RAST._IExpr _out1124;
                    DCOMP._IOwnership _out1125;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1124, out _out1125);
                    r = _out1124;
                    resultingOwnership = _out1125;
                  }
                } else {
                  if ((_4416_nativeToType).is_Some) {
                    DAST._IType _source180 = _3296_fromTpe;
                    if (_source180.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4423___mcc_h1646 = _source180.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4424___mcc_h1647 = _source180.dtor_typeArgs;
                      DAST._IResolvedType _4425___mcc_h1648 = _source180.dtor_resolved;
                      DAST._IResolvedType _source181 = _4425___mcc_h1648;
                      if (_source181.is_Datatype) {
                        DAST._IDatatypeType _4426___mcc_h1652 = _source181.dtor_datatypeType;
                      } else if (_source181.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4427___mcc_h1654 = _source181.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4428___mcc_h1655 = _source181.dtor_attributes;
                      } else {
                        DAST._IType _4429___mcc_h1658 = _source181.dtor_baseType;
                        DAST._INewtypeRange _4430___mcc_h1659 = _source181.dtor_range;
                        bool _4431___mcc_h1660 = _source181.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4432___mcc_h1661 = _source181.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4433_attributes0 = _4432___mcc_h1661;
                        bool _4434_erase0 = _4431___mcc_h1660;
                        DAST._INewtypeRange _4435_range0 = _4430___mcc_h1659;
                        DAST._IType _4436_b0 = _4429___mcc_h1658;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4437_nativeFromType;
                          _4437_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4436_b0, _4435_range0);
                          if ((_4437_nativeFromType).is_Some) {
                            RAST._IExpr _4438_recursiveGen;
                            DCOMP._IOwnership _4439_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4440_recIdents;
                            RAST._IExpr _out1126;
                            DCOMP._IOwnership _out1127;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1128;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1126, out _out1127, out _out1128);
                            _4438_recursiveGen = _out1126;
                            _4439_recOwned = _out1127;
                            _4440_recIdents = _out1128;
                            RAST._IExpr _out1129;
                            DCOMP._IOwnership _out1130;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4438_recursiveGen, (_4416_nativeToType).dtor_value), _4439_recOwned, expectedOwnership, out _out1129, out _out1130);
                            r = _out1129;
                            resultingOwnership = _out1130;
                            readIdents = _4440_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source180.is_Nullable) {
                      DAST._IType _4441___mcc_h1666 = _source180.dtor_Nullable_a0;
                    } else if (_source180.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4442___mcc_h1668 = _source180.dtor_Tuple_a0;
                    } else if (_source180.is_Array) {
                      DAST._IType _4443___mcc_h1670 = _source180.dtor_element;
                      BigInteger _4444___mcc_h1671 = _source180.dtor_dims;
                    } else if (_source180.is_Seq) {
                      DAST._IType _4445___mcc_h1674 = _source180.dtor_element;
                    } else if (_source180.is_Set) {
                      DAST._IType _4446___mcc_h1676 = _source180.dtor_element;
                    } else if (_source180.is_Multiset) {
                      DAST._IType _4447___mcc_h1678 = _source180.dtor_element;
                    } else if (_source180.is_Map) {
                      DAST._IType _4448___mcc_h1680 = _source180.dtor_key;
                      DAST._IType _4449___mcc_h1681 = _source180.dtor_value;
                    } else if (_source180.is_SetBuilder) {
                      DAST._IType _4450___mcc_h1684 = _source180.dtor_element;
                    } else if (_source180.is_MapBuilder) {
                      DAST._IType _4451___mcc_h1686 = _source180.dtor_key;
                      DAST._IType _4452___mcc_h1687 = _source180.dtor_value;
                    } else if (_source180.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4453___mcc_h1690 = _source180.dtor_args;
                      DAST._IType _4454___mcc_h1691 = _source180.dtor_result;
                    } else if (_source180.is_Primitive) {
                      DAST._IPrimitive _4455___mcc_h1694 = _source180.dtor_Primitive_a0;
                    } else if (_source180.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4456___mcc_h1696 = _source180.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4457___mcc_h1698 = _source180.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4458_recursiveGen;
                      DCOMP._IOwnership _4459_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4460_recIdents;
                      RAST._IExpr _out1131;
                      DCOMP._IOwnership _out1132;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1131, out _out1132, out _out1133);
                      _4458_recursiveGen = _out1131;
                      _4459_recOwned = _out1132;
                      _4460_recIdents = _out1133;
                      RAST._IExpr _out1134;
                      DCOMP._IOwnership _out1135;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4458_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4416_nativeToType).dtor_value), _4459_recOwned, expectedOwnership, out _out1134, out _out1135);
                      r = _out1134;
                      resultingOwnership = _out1135;
                      readIdents = _4460_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1136;
                  DCOMP._IOwnership _out1137;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1138;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _4415_b), _4415_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1136, out _out1137, out _out1138);
                  r = _out1136;
                  resultingOwnership = _out1137;
                  readIdents = _out1138;
                }
              }
            }
          } else if (_source177.is_Nullable) {
            DAST._IType _4461___mcc_h578 = _source177.dtor_Nullable_a0;
            {
              RAST._IExpr _4462_recursiveGen;
              DCOMP._IOwnership _4463_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4464_recIdents;
              RAST._IExpr _out1139;
              DCOMP._IOwnership _out1140;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1139, out _out1140, out _out1141);
              _4462_recursiveGen = _out1139;
              _4463_recOwned = _out1140;
              _4464_recIdents = _out1141;
              r = _4462_recursiveGen;
              if (object.Equals(_4463_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1142;
              DCOMP._IOwnership _out1143;
              DCOMP.COMP.FromOwnership(r, _4463_recOwned, expectedOwnership, out _out1142, out _out1143);
              r = _out1142;
              resultingOwnership = _out1143;
              readIdents = _4464_recIdents;
            }
          } else if (_source177.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4465___mcc_h580 = _source177.dtor_Tuple_a0;
            {
              RAST._IExpr _4466_recursiveGen;
              DCOMP._IOwnership _4467_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4468_recIdents;
              RAST._IExpr _out1144;
              DCOMP._IOwnership _out1145;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1144, out _out1145, out _out1146);
              _4466_recursiveGen = _out1144;
              _4467_recOwned = _out1145;
              _4468_recIdents = _out1146;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4466_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1147;
              DCOMP._IOwnership _out1148;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1147, out _out1148);
              r = _out1147;
              resultingOwnership = _out1148;
              readIdents = _4468_recIdents;
            }
          } else if (_source177.is_Array) {
            DAST._IType _4469___mcc_h582 = _source177.dtor_element;
            BigInteger _4470___mcc_h583 = _source177.dtor_dims;
            {
              RAST._IExpr _4471_recursiveGen;
              DCOMP._IOwnership _4472_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4473_recIdents;
              RAST._IExpr _out1149;
              DCOMP._IOwnership _out1150;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1149, out _out1150, out _out1151);
              _4471_recursiveGen = _out1149;
              _4472_recOwned = _out1150;
              _4473_recIdents = _out1151;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4471_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1152;
              DCOMP._IOwnership _out1153;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1152, out _out1153);
              r = _out1152;
              resultingOwnership = _out1153;
              readIdents = _4473_recIdents;
            }
          } else if (_source177.is_Seq) {
            DAST._IType _4474___mcc_h586 = _source177.dtor_element;
            {
              RAST._IExpr _4475_recursiveGen;
              DCOMP._IOwnership _4476_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4477_recIdents;
              RAST._IExpr _out1154;
              DCOMP._IOwnership _out1155;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1154, out _out1155, out _out1156);
              _4475_recursiveGen = _out1154;
              _4476_recOwned = _out1155;
              _4477_recIdents = _out1156;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4475_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1157;
              DCOMP._IOwnership _out1158;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1157, out _out1158);
              r = _out1157;
              resultingOwnership = _out1158;
              readIdents = _4477_recIdents;
            }
          } else if (_source177.is_Set) {
            DAST._IType _4478___mcc_h588 = _source177.dtor_element;
            {
              RAST._IExpr _4479_recursiveGen;
              DCOMP._IOwnership _4480_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4481_recIdents;
              RAST._IExpr _out1159;
              DCOMP._IOwnership _out1160;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1159, out _out1160, out _out1161);
              _4479_recursiveGen = _out1159;
              _4480_recOwned = _out1160;
              _4481_recIdents = _out1161;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4479_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1162;
              DCOMP._IOwnership _out1163;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1162, out _out1163);
              r = _out1162;
              resultingOwnership = _out1163;
              readIdents = _4481_recIdents;
            }
          } else if (_source177.is_Multiset) {
            DAST._IType _4482___mcc_h590 = _source177.dtor_element;
            {
              RAST._IExpr _4483_recursiveGen;
              DCOMP._IOwnership _4484_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4485_recIdents;
              RAST._IExpr _out1164;
              DCOMP._IOwnership _out1165;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1164, out _out1165, out _out1166);
              _4483_recursiveGen = _out1164;
              _4484_recOwned = _out1165;
              _4485_recIdents = _out1166;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4483_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1167;
              DCOMP._IOwnership _out1168;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1167, out _out1168);
              r = _out1167;
              resultingOwnership = _out1168;
              readIdents = _4485_recIdents;
            }
          } else if (_source177.is_Map) {
            DAST._IType _4486___mcc_h592 = _source177.dtor_key;
            DAST._IType _4487___mcc_h593 = _source177.dtor_value;
            {
              RAST._IExpr _4488_recursiveGen;
              DCOMP._IOwnership _4489_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4490_recIdents;
              RAST._IExpr _out1169;
              DCOMP._IOwnership _out1170;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1171;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1169, out _out1170, out _out1171);
              _4488_recursiveGen = _out1169;
              _4489_recOwned = _out1170;
              _4490_recIdents = _out1171;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4488_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1172;
              DCOMP._IOwnership _out1173;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1172, out _out1173);
              r = _out1172;
              resultingOwnership = _out1173;
              readIdents = _4490_recIdents;
            }
          } else if (_source177.is_SetBuilder) {
            DAST._IType _4491___mcc_h596 = _source177.dtor_element;
            {
              RAST._IExpr _4492_recursiveGen;
              DCOMP._IOwnership _4493_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4494_recIdents;
              RAST._IExpr _out1174;
              DCOMP._IOwnership _out1175;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1174, out _out1175, out _out1176);
              _4492_recursiveGen = _out1174;
              _4493_recOwned = _out1175;
              _4494_recIdents = _out1176;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4492_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1177;
              DCOMP._IOwnership _out1178;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1177, out _out1178);
              r = _out1177;
              resultingOwnership = _out1178;
              readIdents = _4494_recIdents;
            }
          } else if (_source177.is_MapBuilder) {
            DAST._IType _4495___mcc_h598 = _source177.dtor_key;
            DAST._IType _4496___mcc_h599 = _source177.dtor_value;
            {
              RAST._IExpr _4497_recursiveGen;
              DCOMP._IOwnership _4498_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4499_recIdents;
              RAST._IExpr _out1179;
              DCOMP._IOwnership _out1180;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1179, out _out1180, out _out1181);
              _4497_recursiveGen = _out1179;
              _4498_recOwned = _out1180;
              _4499_recIdents = _out1181;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4497_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1182;
              DCOMP._IOwnership _out1183;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1182, out _out1183);
              r = _out1182;
              resultingOwnership = _out1183;
              readIdents = _4499_recIdents;
            }
          } else if (_source177.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4500___mcc_h602 = _source177.dtor_args;
            DAST._IType _4501___mcc_h603 = _source177.dtor_result;
            {
              RAST._IExpr _4502_recursiveGen;
              DCOMP._IOwnership _4503_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4504_recIdents;
              RAST._IExpr _out1184;
              DCOMP._IOwnership _out1185;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1184, out _out1185, out _out1186);
              _4502_recursiveGen = _out1184;
              _4503_recOwned = _out1185;
              _4504_recIdents = _out1186;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4502_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1187;
              DCOMP._IOwnership _out1188;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1187, out _out1188);
              r = _out1187;
              resultingOwnership = _out1188;
              readIdents = _4504_recIdents;
            }
          } else if (_source177.is_Primitive) {
            DAST._IPrimitive _4505___mcc_h606 = _source177.dtor_Primitive_a0;
            {
              RAST._IExpr _4506_recursiveGen;
              DCOMP._IOwnership _4507_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4508_recIdents;
              RAST._IExpr _out1189;
              DCOMP._IOwnership _out1190;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1189, out _out1190, out _out1191);
              _4506_recursiveGen = _out1189;
              _4507_recOwned = _out1190;
              _4508_recIdents = _out1191;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4506_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1192;
              DCOMP._IOwnership _out1193;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1192, out _out1193);
              r = _out1192;
              resultingOwnership = _out1193;
              readIdents = _4508_recIdents;
            }
          } else if (_source177.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4509___mcc_h608 = _source177.dtor_Passthrough_a0;
            {
              RAST._IExpr _4510_recursiveGen;
              DCOMP._IOwnership _4511_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4512_recIdents;
              RAST._IExpr _out1194;
              DCOMP._IOwnership _out1195;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1194, out _out1195, out _out1196);
              _4510_recursiveGen = _out1194;
              _4511_recOwned = _out1195;
              _4512_recIdents = _out1196;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4510_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1197;
              DCOMP._IOwnership _out1198;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1197, out _out1198);
              r = _out1197;
              resultingOwnership = _out1198;
              readIdents = _4512_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4513___mcc_h610 = _source177.dtor_TypeArg_a0;
            {
              RAST._IExpr _4514_recursiveGen;
              DCOMP._IOwnership _4515_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4516_recIdents;
              RAST._IExpr _out1199;
              DCOMP._IOwnership _out1200;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1201;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1199, out _out1200, out _out1201);
              _4514_recursiveGen = _out1199;
              _4515_recOwned = _out1200;
              _4516_recIdents = _out1201;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4514_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1202;
              DCOMP._IOwnership _out1203;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1202, out _out1203);
              r = _out1202;
              resultingOwnership = _out1203;
              readIdents = _4516_recIdents;
            }
          }
        } else if (_source124.is_Map) {
          DAST._IType _4517___mcc_h612 = _source124.dtor_key;
          DAST._IType _4518___mcc_h613 = _source124.dtor_value;
          DAST._IType _source182 = _3302___mcc_h1;
          if (_source182.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4519___mcc_h620 = _source182.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4520___mcc_h621 = _source182.dtor_typeArgs;
            DAST._IResolvedType _4521___mcc_h622 = _source182.dtor_resolved;
            DAST._IResolvedType _source183 = _4521___mcc_h622;
            if (_source183.is_Datatype) {
              DAST._IDatatypeType _4522___mcc_h626 = _source183.dtor_datatypeType;
              {
                RAST._IExpr _4523_recursiveGen;
                DCOMP._IOwnership _4524_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4525_recIdents;
                RAST._IExpr _out1204;
                DCOMP._IOwnership _out1205;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1204, out _out1205, out _out1206);
                _4523_recursiveGen = _out1204;
                _4524_recOwned = _out1205;
                _4525_recIdents = _out1206;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4523_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1207;
                DCOMP._IOwnership _out1208;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1207, out _out1208);
                r = _out1207;
                resultingOwnership = _out1208;
                readIdents = _4525_recIdents;
              }
            } else if (_source183.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4526___mcc_h628 = _source183.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4527___mcc_h629 = _source183.dtor_attributes;
              {
                RAST._IExpr _4528_recursiveGen;
                DCOMP._IOwnership _4529_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4530_recIdents;
                RAST._IExpr _out1209;
                DCOMP._IOwnership _out1210;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1211;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1209, out _out1210, out _out1211);
                _4528_recursiveGen = _out1209;
                _4529_recOwned = _out1210;
                _4530_recIdents = _out1211;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4528_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1212;
                DCOMP._IOwnership _out1213;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1212, out _out1213);
                r = _out1212;
                resultingOwnership = _out1213;
                readIdents = _4530_recIdents;
              }
            } else {
              DAST._IType _4531___mcc_h632 = _source183.dtor_baseType;
              DAST._INewtypeRange _4532___mcc_h633 = _source183.dtor_range;
              bool _4533___mcc_h634 = _source183.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4534___mcc_h635 = _source183.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4535_attributes = _4534___mcc_h635;
              bool _4536_erase = _4533___mcc_h634;
              DAST._INewtypeRange _4537_range = _4532___mcc_h633;
              DAST._IType _4538_b = _4531___mcc_h632;
              {
                Std.Wrappers._IOption<RAST._IType> _4539_nativeToType;
                _4539_nativeToType = DCOMP.COMP.NewtypeToRustType(_4538_b, _4537_range);
                if (object.Equals(_3296_fromTpe, _4538_b)) {
                  RAST._IExpr _4540_recursiveGen;
                  DCOMP._IOwnership _4541_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4542_recIdents;
                  RAST._IExpr _out1214;
                  DCOMP._IOwnership _out1215;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1216;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1214, out _out1215, out _out1216);
                  _4540_recursiveGen = _out1214;
                  _4541_recOwned = _out1215;
                  _4542_recIdents = _out1216;
                  readIdents = _4542_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source184 = _4539_nativeToType;
                  if (_source184.is_None) {
                    if (_4536_erase) {
                      r = _4540_recursiveGen;
                    } else {
                      RAST._IType _4543_rhsType;
                      RAST._IType _out1217;
                      _out1217 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _4543_rhsType = _out1217;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4543_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1218;
                    DCOMP._IOwnership _out1219;
                    DCOMP.COMP.FromOwnership(r, _4541_recOwned, expectedOwnership, out _out1218, out _out1219);
                    r = _out1218;
                    resultingOwnership = _out1219;
                  } else {
                    RAST._IType _4544___mcc_h1700 = _source184.dtor_value;
                    RAST._IType _4545_v = _4544___mcc_h1700;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4540_recursiveGen, RAST.Expr.create_ExprFromType(_4545_v)));
                    RAST._IExpr _out1220;
                    DCOMP._IOwnership _out1221;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1220, out _out1221);
                    r = _out1220;
                    resultingOwnership = _out1221;
                  }
                } else {
                  if ((_4539_nativeToType).is_Some) {
                    DAST._IType _source185 = _3296_fromTpe;
                    if (_source185.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4546___mcc_h1701 = _source185.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4547___mcc_h1702 = _source185.dtor_typeArgs;
                      DAST._IResolvedType _4548___mcc_h1703 = _source185.dtor_resolved;
                      DAST._IResolvedType _source186 = _4548___mcc_h1703;
                      if (_source186.is_Datatype) {
                        DAST._IDatatypeType _4549___mcc_h1707 = _source186.dtor_datatypeType;
                      } else if (_source186.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4550___mcc_h1709 = _source186.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4551___mcc_h1710 = _source186.dtor_attributes;
                      } else {
                        DAST._IType _4552___mcc_h1713 = _source186.dtor_baseType;
                        DAST._INewtypeRange _4553___mcc_h1714 = _source186.dtor_range;
                        bool _4554___mcc_h1715 = _source186.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4555___mcc_h1716 = _source186.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4556_attributes0 = _4555___mcc_h1716;
                        bool _4557_erase0 = _4554___mcc_h1715;
                        DAST._INewtypeRange _4558_range0 = _4553___mcc_h1714;
                        DAST._IType _4559_b0 = _4552___mcc_h1713;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4560_nativeFromType;
                          _4560_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4559_b0, _4558_range0);
                          if ((_4560_nativeFromType).is_Some) {
                            RAST._IExpr _4561_recursiveGen;
                            DCOMP._IOwnership _4562_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4563_recIdents;
                            RAST._IExpr _out1222;
                            DCOMP._IOwnership _out1223;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1224;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1222, out _out1223, out _out1224);
                            _4561_recursiveGen = _out1222;
                            _4562_recOwned = _out1223;
                            _4563_recIdents = _out1224;
                            RAST._IExpr _out1225;
                            DCOMP._IOwnership _out1226;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4561_recursiveGen, (_4539_nativeToType).dtor_value), _4562_recOwned, expectedOwnership, out _out1225, out _out1226);
                            r = _out1225;
                            resultingOwnership = _out1226;
                            readIdents = _4563_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source185.is_Nullable) {
                      DAST._IType _4564___mcc_h1721 = _source185.dtor_Nullable_a0;
                    } else if (_source185.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4565___mcc_h1723 = _source185.dtor_Tuple_a0;
                    } else if (_source185.is_Array) {
                      DAST._IType _4566___mcc_h1725 = _source185.dtor_element;
                      BigInteger _4567___mcc_h1726 = _source185.dtor_dims;
                    } else if (_source185.is_Seq) {
                      DAST._IType _4568___mcc_h1729 = _source185.dtor_element;
                    } else if (_source185.is_Set) {
                      DAST._IType _4569___mcc_h1731 = _source185.dtor_element;
                    } else if (_source185.is_Multiset) {
                      DAST._IType _4570___mcc_h1733 = _source185.dtor_element;
                    } else if (_source185.is_Map) {
                      DAST._IType _4571___mcc_h1735 = _source185.dtor_key;
                      DAST._IType _4572___mcc_h1736 = _source185.dtor_value;
                    } else if (_source185.is_SetBuilder) {
                      DAST._IType _4573___mcc_h1739 = _source185.dtor_element;
                    } else if (_source185.is_MapBuilder) {
                      DAST._IType _4574___mcc_h1741 = _source185.dtor_key;
                      DAST._IType _4575___mcc_h1742 = _source185.dtor_value;
                    } else if (_source185.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4576___mcc_h1745 = _source185.dtor_args;
                      DAST._IType _4577___mcc_h1746 = _source185.dtor_result;
                    } else if (_source185.is_Primitive) {
                      DAST._IPrimitive _4578___mcc_h1749 = _source185.dtor_Primitive_a0;
                    } else if (_source185.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4579___mcc_h1751 = _source185.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4580___mcc_h1753 = _source185.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4581_recursiveGen;
                      DCOMP._IOwnership _4582_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4583_recIdents;
                      RAST._IExpr _out1227;
                      DCOMP._IOwnership _out1228;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1229;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1227, out _out1228, out _out1229);
                      _4581_recursiveGen = _out1227;
                      _4582_recOwned = _out1228;
                      _4583_recIdents = _out1229;
                      RAST._IExpr _out1230;
                      DCOMP._IOwnership _out1231;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4581_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4539_nativeToType).dtor_value), _4582_recOwned, expectedOwnership, out _out1230, out _out1231);
                      r = _out1230;
                      resultingOwnership = _out1231;
                      readIdents = _4583_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1232;
                  DCOMP._IOwnership _out1233;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1234;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _4538_b), _4538_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1232, out _out1233, out _out1234);
                  r = _out1232;
                  resultingOwnership = _out1233;
                  readIdents = _out1234;
                }
              }
            }
          } else if (_source182.is_Nullable) {
            DAST._IType _4584___mcc_h640 = _source182.dtor_Nullable_a0;
            {
              RAST._IExpr _4585_recursiveGen;
              DCOMP._IOwnership _4586_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4587_recIdents;
              RAST._IExpr _out1235;
              DCOMP._IOwnership _out1236;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1235, out _out1236, out _out1237);
              _4585_recursiveGen = _out1235;
              _4586_recOwned = _out1236;
              _4587_recIdents = _out1237;
              r = _4585_recursiveGen;
              if (object.Equals(_4586_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1238;
              DCOMP._IOwnership _out1239;
              DCOMP.COMP.FromOwnership(r, _4586_recOwned, expectedOwnership, out _out1238, out _out1239);
              r = _out1238;
              resultingOwnership = _out1239;
              readIdents = _4587_recIdents;
            }
          } else if (_source182.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4588___mcc_h642 = _source182.dtor_Tuple_a0;
            {
              RAST._IExpr _4589_recursiveGen;
              DCOMP._IOwnership _4590_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4591_recIdents;
              RAST._IExpr _out1240;
              DCOMP._IOwnership _out1241;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1240, out _out1241, out _out1242);
              _4589_recursiveGen = _out1240;
              _4590_recOwned = _out1241;
              _4591_recIdents = _out1242;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4589_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1243;
              DCOMP._IOwnership _out1244;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1243, out _out1244);
              r = _out1243;
              resultingOwnership = _out1244;
              readIdents = _4591_recIdents;
            }
          } else if (_source182.is_Array) {
            DAST._IType _4592___mcc_h644 = _source182.dtor_element;
            BigInteger _4593___mcc_h645 = _source182.dtor_dims;
            {
              RAST._IExpr _4594_recursiveGen;
              DCOMP._IOwnership _4595_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4596_recIdents;
              RAST._IExpr _out1245;
              DCOMP._IOwnership _out1246;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1245, out _out1246, out _out1247);
              _4594_recursiveGen = _out1245;
              _4595_recOwned = _out1246;
              _4596_recIdents = _out1247;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4594_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1248;
              DCOMP._IOwnership _out1249;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1248, out _out1249);
              r = _out1248;
              resultingOwnership = _out1249;
              readIdents = _4596_recIdents;
            }
          } else if (_source182.is_Seq) {
            DAST._IType _4597___mcc_h648 = _source182.dtor_element;
            {
              RAST._IExpr _4598_recursiveGen;
              DCOMP._IOwnership _4599_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4600_recIdents;
              RAST._IExpr _out1250;
              DCOMP._IOwnership _out1251;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1252;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1250, out _out1251, out _out1252);
              _4598_recursiveGen = _out1250;
              _4599_recOwned = _out1251;
              _4600_recIdents = _out1252;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4598_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1253;
              DCOMP._IOwnership _out1254;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1253, out _out1254);
              r = _out1253;
              resultingOwnership = _out1254;
              readIdents = _4600_recIdents;
            }
          } else if (_source182.is_Set) {
            DAST._IType _4601___mcc_h650 = _source182.dtor_element;
            {
              RAST._IExpr _4602_recursiveGen;
              DCOMP._IOwnership _4603_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4604_recIdents;
              RAST._IExpr _out1255;
              DCOMP._IOwnership _out1256;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1255, out _out1256, out _out1257);
              _4602_recursiveGen = _out1255;
              _4603_recOwned = _out1256;
              _4604_recIdents = _out1257;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4602_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1258;
              DCOMP._IOwnership _out1259;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1258, out _out1259);
              r = _out1258;
              resultingOwnership = _out1259;
              readIdents = _4604_recIdents;
            }
          } else if (_source182.is_Multiset) {
            DAST._IType _4605___mcc_h652 = _source182.dtor_element;
            {
              RAST._IExpr _4606_recursiveGen;
              DCOMP._IOwnership _4607_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4608_recIdents;
              RAST._IExpr _out1260;
              DCOMP._IOwnership _out1261;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1260, out _out1261, out _out1262);
              _4606_recursiveGen = _out1260;
              _4607_recOwned = _out1261;
              _4608_recIdents = _out1262;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4606_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1263;
              DCOMP._IOwnership _out1264;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1263, out _out1264);
              r = _out1263;
              resultingOwnership = _out1264;
              readIdents = _4608_recIdents;
            }
          } else if (_source182.is_Map) {
            DAST._IType _4609___mcc_h654 = _source182.dtor_key;
            DAST._IType _4610___mcc_h655 = _source182.dtor_value;
            {
              RAST._IExpr _4611_recursiveGen;
              DCOMP._IOwnership _4612_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4613_recIdents;
              RAST._IExpr _out1265;
              DCOMP._IOwnership _out1266;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1265, out _out1266, out _out1267);
              _4611_recursiveGen = _out1265;
              _4612_recOwned = _out1266;
              _4613_recIdents = _out1267;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4611_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1268;
              DCOMP._IOwnership _out1269;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1268, out _out1269);
              r = _out1268;
              resultingOwnership = _out1269;
              readIdents = _4613_recIdents;
            }
          } else if (_source182.is_SetBuilder) {
            DAST._IType _4614___mcc_h658 = _source182.dtor_element;
            {
              RAST._IExpr _4615_recursiveGen;
              DCOMP._IOwnership _4616_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4617_recIdents;
              RAST._IExpr _out1270;
              DCOMP._IOwnership _out1271;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1270, out _out1271, out _out1272);
              _4615_recursiveGen = _out1270;
              _4616_recOwned = _out1271;
              _4617_recIdents = _out1272;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4615_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1273;
              DCOMP._IOwnership _out1274;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1273, out _out1274);
              r = _out1273;
              resultingOwnership = _out1274;
              readIdents = _4617_recIdents;
            }
          } else if (_source182.is_MapBuilder) {
            DAST._IType _4618___mcc_h660 = _source182.dtor_key;
            DAST._IType _4619___mcc_h661 = _source182.dtor_value;
            {
              RAST._IExpr _4620_recursiveGen;
              DCOMP._IOwnership _4621_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4622_recIdents;
              RAST._IExpr _out1275;
              DCOMP._IOwnership _out1276;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1277;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1275, out _out1276, out _out1277);
              _4620_recursiveGen = _out1275;
              _4621_recOwned = _out1276;
              _4622_recIdents = _out1277;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4620_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1278;
              DCOMP._IOwnership _out1279;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1278, out _out1279);
              r = _out1278;
              resultingOwnership = _out1279;
              readIdents = _4622_recIdents;
            }
          } else if (_source182.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4623___mcc_h664 = _source182.dtor_args;
            DAST._IType _4624___mcc_h665 = _source182.dtor_result;
            {
              RAST._IExpr _4625_recursiveGen;
              DCOMP._IOwnership _4626_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4627_recIdents;
              RAST._IExpr _out1280;
              DCOMP._IOwnership _out1281;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1280, out _out1281, out _out1282);
              _4625_recursiveGen = _out1280;
              _4626_recOwned = _out1281;
              _4627_recIdents = _out1282;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4625_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1283;
              DCOMP._IOwnership _out1284;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1283, out _out1284);
              r = _out1283;
              resultingOwnership = _out1284;
              readIdents = _4627_recIdents;
            }
          } else if (_source182.is_Primitive) {
            DAST._IPrimitive _4628___mcc_h668 = _source182.dtor_Primitive_a0;
            {
              RAST._IExpr _4629_recursiveGen;
              DCOMP._IOwnership _4630_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4631_recIdents;
              RAST._IExpr _out1285;
              DCOMP._IOwnership _out1286;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1287;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1285, out _out1286, out _out1287);
              _4629_recursiveGen = _out1285;
              _4630_recOwned = _out1286;
              _4631_recIdents = _out1287;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4629_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1288;
              DCOMP._IOwnership _out1289;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1288, out _out1289);
              r = _out1288;
              resultingOwnership = _out1289;
              readIdents = _4631_recIdents;
            }
          } else if (_source182.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4632___mcc_h670 = _source182.dtor_Passthrough_a0;
            {
              RAST._IExpr _4633_recursiveGen;
              DCOMP._IOwnership _4634_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4635_recIdents;
              RAST._IExpr _out1290;
              DCOMP._IOwnership _out1291;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1290, out _out1291, out _out1292);
              _4633_recursiveGen = _out1290;
              _4634_recOwned = _out1291;
              _4635_recIdents = _out1292;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4633_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1293;
              DCOMP._IOwnership _out1294;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1293, out _out1294);
              r = _out1293;
              resultingOwnership = _out1294;
              readIdents = _4635_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4636___mcc_h672 = _source182.dtor_TypeArg_a0;
            {
              RAST._IExpr _4637_recursiveGen;
              DCOMP._IOwnership _4638_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4639_recIdents;
              RAST._IExpr _out1295;
              DCOMP._IOwnership _out1296;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1297;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1295, out _out1296, out _out1297);
              _4637_recursiveGen = _out1295;
              _4638_recOwned = _out1296;
              _4639_recIdents = _out1297;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4637_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1298;
              DCOMP._IOwnership _out1299;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1298, out _out1299);
              r = _out1298;
              resultingOwnership = _out1299;
              readIdents = _4639_recIdents;
            }
          }
        } else if (_source124.is_SetBuilder) {
          DAST._IType _4640___mcc_h674 = _source124.dtor_element;
          DAST._IType _source187 = _3302___mcc_h1;
          if (_source187.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4641___mcc_h678 = _source187.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4642___mcc_h679 = _source187.dtor_typeArgs;
            DAST._IResolvedType _4643___mcc_h680 = _source187.dtor_resolved;
            DAST._IResolvedType _source188 = _4643___mcc_h680;
            if (_source188.is_Datatype) {
              DAST._IDatatypeType _4644___mcc_h684 = _source188.dtor_datatypeType;
              {
                RAST._IExpr _4645_recursiveGen;
                DCOMP._IOwnership _4646_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4647_recIdents;
                RAST._IExpr _out1300;
                DCOMP._IOwnership _out1301;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1302;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1300, out _out1301, out _out1302);
                _4645_recursiveGen = _out1300;
                _4646_recOwned = _out1301;
                _4647_recIdents = _out1302;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4645_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1303;
                DCOMP._IOwnership _out1304;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1303, out _out1304);
                r = _out1303;
                resultingOwnership = _out1304;
                readIdents = _4647_recIdents;
              }
            } else if (_source188.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4648___mcc_h686 = _source188.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4649___mcc_h687 = _source188.dtor_attributes;
              {
                RAST._IExpr _4650_recursiveGen;
                DCOMP._IOwnership _4651_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4652_recIdents;
                RAST._IExpr _out1305;
                DCOMP._IOwnership _out1306;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1307;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1305, out _out1306, out _out1307);
                _4650_recursiveGen = _out1305;
                _4651_recOwned = _out1306;
                _4652_recIdents = _out1307;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4650_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1308;
                DCOMP._IOwnership _out1309;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1308, out _out1309);
                r = _out1308;
                resultingOwnership = _out1309;
                readIdents = _4652_recIdents;
              }
            } else {
              DAST._IType _4653___mcc_h690 = _source188.dtor_baseType;
              DAST._INewtypeRange _4654___mcc_h691 = _source188.dtor_range;
              bool _4655___mcc_h692 = _source188.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4656___mcc_h693 = _source188.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4657_attributes = _4656___mcc_h693;
              bool _4658_erase = _4655___mcc_h692;
              DAST._INewtypeRange _4659_range = _4654___mcc_h691;
              DAST._IType _4660_b = _4653___mcc_h690;
              {
                Std.Wrappers._IOption<RAST._IType> _4661_nativeToType;
                _4661_nativeToType = DCOMP.COMP.NewtypeToRustType(_4660_b, _4659_range);
                if (object.Equals(_3296_fromTpe, _4660_b)) {
                  RAST._IExpr _4662_recursiveGen;
                  DCOMP._IOwnership _4663_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4664_recIdents;
                  RAST._IExpr _out1310;
                  DCOMP._IOwnership _out1311;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1312;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1310, out _out1311, out _out1312);
                  _4662_recursiveGen = _out1310;
                  _4663_recOwned = _out1311;
                  _4664_recIdents = _out1312;
                  readIdents = _4664_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source189 = _4661_nativeToType;
                  if (_source189.is_None) {
                    if (_4658_erase) {
                      r = _4662_recursiveGen;
                    } else {
                      RAST._IType _4665_rhsType;
                      RAST._IType _out1313;
                      _out1313 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _4665_rhsType = _out1313;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4665_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4662_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1314;
                    DCOMP._IOwnership _out1315;
                    DCOMP.COMP.FromOwnership(r, _4663_recOwned, expectedOwnership, out _out1314, out _out1315);
                    r = _out1314;
                    resultingOwnership = _out1315;
                  } else {
                    RAST._IType _4666___mcc_h1755 = _source189.dtor_value;
                    RAST._IType _4667_v = _4666___mcc_h1755;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4662_recursiveGen, RAST.Expr.create_ExprFromType(_4667_v)));
                    RAST._IExpr _out1316;
                    DCOMP._IOwnership _out1317;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1316, out _out1317);
                    r = _out1316;
                    resultingOwnership = _out1317;
                  }
                } else {
                  if ((_4661_nativeToType).is_Some) {
                    DAST._IType _source190 = _3296_fromTpe;
                    if (_source190.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4668___mcc_h1756 = _source190.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4669___mcc_h1757 = _source190.dtor_typeArgs;
                      DAST._IResolvedType _4670___mcc_h1758 = _source190.dtor_resolved;
                      DAST._IResolvedType _source191 = _4670___mcc_h1758;
                      if (_source191.is_Datatype) {
                        DAST._IDatatypeType _4671___mcc_h1762 = _source191.dtor_datatypeType;
                      } else if (_source191.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4672___mcc_h1764 = _source191.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4673___mcc_h1765 = _source191.dtor_attributes;
                      } else {
                        DAST._IType _4674___mcc_h1768 = _source191.dtor_baseType;
                        DAST._INewtypeRange _4675___mcc_h1769 = _source191.dtor_range;
                        bool _4676___mcc_h1770 = _source191.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4677___mcc_h1771 = _source191.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4678_attributes0 = _4677___mcc_h1771;
                        bool _4679_erase0 = _4676___mcc_h1770;
                        DAST._INewtypeRange _4680_range0 = _4675___mcc_h1769;
                        DAST._IType _4681_b0 = _4674___mcc_h1768;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4682_nativeFromType;
                          _4682_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4681_b0, _4680_range0);
                          if ((_4682_nativeFromType).is_Some) {
                            RAST._IExpr _4683_recursiveGen;
                            DCOMP._IOwnership _4684_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4685_recIdents;
                            RAST._IExpr _out1318;
                            DCOMP._IOwnership _out1319;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1320;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1318, out _out1319, out _out1320);
                            _4683_recursiveGen = _out1318;
                            _4684_recOwned = _out1319;
                            _4685_recIdents = _out1320;
                            RAST._IExpr _out1321;
                            DCOMP._IOwnership _out1322;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4683_recursiveGen, (_4661_nativeToType).dtor_value), _4684_recOwned, expectedOwnership, out _out1321, out _out1322);
                            r = _out1321;
                            resultingOwnership = _out1322;
                            readIdents = _4685_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source190.is_Nullable) {
                      DAST._IType _4686___mcc_h1776 = _source190.dtor_Nullable_a0;
                    } else if (_source190.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4687___mcc_h1778 = _source190.dtor_Tuple_a0;
                    } else if (_source190.is_Array) {
                      DAST._IType _4688___mcc_h1780 = _source190.dtor_element;
                      BigInteger _4689___mcc_h1781 = _source190.dtor_dims;
                    } else if (_source190.is_Seq) {
                      DAST._IType _4690___mcc_h1784 = _source190.dtor_element;
                    } else if (_source190.is_Set) {
                      DAST._IType _4691___mcc_h1786 = _source190.dtor_element;
                    } else if (_source190.is_Multiset) {
                      DAST._IType _4692___mcc_h1788 = _source190.dtor_element;
                    } else if (_source190.is_Map) {
                      DAST._IType _4693___mcc_h1790 = _source190.dtor_key;
                      DAST._IType _4694___mcc_h1791 = _source190.dtor_value;
                    } else if (_source190.is_SetBuilder) {
                      DAST._IType _4695___mcc_h1794 = _source190.dtor_element;
                    } else if (_source190.is_MapBuilder) {
                      DAST._IType _4696___mcc_h1796 = _source190.dtor_key;
                      DAST._IType _4697___mcc_h1797 = _source190.dtor_value;
                    } else if (_source190.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4698___mcc_h1800 = _source190.dtor_args;
                      DAST._IType _4699___mcc_h1801 = _source190.dtor_result;
                    } else if (_source190.is_Primitive) {
                      DAST._IPrimitive _4700___mcc_h1804 = _source190.dtor_Primitive_a0;
                    } else if (_source190.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4701___mcc_h1806 = _source190.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4702___mcc_h1808 = _source190.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4703_recursiveGen;
                      DCOMP._IOwnership _4704_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4705_recIdents;
                      RAST._IExpr _out1323;
                      DCOMP._IOwnership _out1324;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1323, out _out1324, out _out1325);
                      _4703_recursiveGen = _out1323;
                      _4704_recOwned = _out1324;
                      _4705_recIdents = _out1325;
                      RAST._IExpr _out1326;
                      DCOMP._IOwnership _out1327;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4703_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4661_nativeToType).dtor_value), _4704_recOwned, expectedOwnership, out _out1326, out _out1327);
                      r = _out1326;
                      resultingOwnership = _out1327;
                      readIdents = _4705_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1328;
                  DCOMP._IOwnership _out1329;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1330;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _4660_b), _4660_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1328, out _out1329, out _out1330);
                  r = _out1328;
                  resultingOwnership = _out1329;
                  readIdents = _out1330;
                }
              }
            }
          } else if (_source187.is_Nullable) {
            DAST._IType _4706___mcc_h698 = _source187.dtor_Nullable_a0;
            {
              RAST._IExpr _4707_recursiveGen;
              DCOMP._IOwnership _4708_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4709_recIdents;
              RAST._IExpr _out1331;
              DCOMP._IOwnership _out1332;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1331, out _out1332, out _out1333);
              _4707_recursiveGen = _out1331;
              _4708_recOwned = _out1332;
              _4709_recIdents = _out1333;
              r = _4707_recursiveGen;
              if (object.Equals(_4708_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1334;
              DCOMP._IOwnership _out1335;
              DCOMP.COMP.FromOwnership(r, _4708_recOwned, expectedOwnership, out _out1334, out _out1335);
              r = _out1334;
              resultingOwnership = _out1335;
              readIdents = _4709_recIdents;
            }
          } else if (_source187.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4710___mcc_h700 = _source187.dtor_Tuple_a0;
            {
              RAST._IExpr _4711_recursiveGen;
              DCOMP._IOwnership _4712_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4713_recIdents;
              RAST._IExpr _out1336;
              DCOMP._IOwnership _out1337;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1336, out _out1337, out _out1338);
              _4711_recursiveGen = _out1336;
              _4712_recOwned = _out1337;
              _4713_recIdents = _out1338;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4711_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1339;
              DCOMP._IOwnership _out1340;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1339, out _out1340);
              r = _out1339;
              resultingOwnership = _out1340;
              readIdents = _4713_recIdents;
            }
          } else if (_source187.is_Array) {
            DAST._IType _4714___mcc_h702 = _source187.dtor_element;
            BigInteger _4715___mcc_h703 = _source187.dtor_dims;
            {
              RAST._IExpr _4716_recursiveGen;
              DCOMP._IOwnership _4717_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4718_recIdents;
              RAST._IExpr _out1341;
              DCOMP._IOwnership _out1342;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1341, out _out1342, out _out1343);
              _4716_recursiveGen = _out1341;
              _4717_recOwned = _out1342;
              _4718_recIdents = _out1343;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4716_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1344;
              DCOMP._IOwnership _out1345;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1344, out _out1345);
              r = _out1344;
              resultingOwnership = _out1345;
              readIdents = _4718_recIdents;
            }
          } else if (_source187.is_Seq) {
            DAST._IType _4719___mcc_h706 = _source187.dtor_element;
            {
              RAST._IExpr _4720_recursiveGen;
              DCOMP._IOwnership _4721_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4722_recIdents;
              RAST._IExpr _out1346;
              DCOMP._IOwnership _out1347;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1346, out _out1347, out _out1348);
              _4720_recursiveGen = _out1346;
              _4721_recOwned = _out1347;
              _4722_recIdents = _out1348;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4720_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1349;
              DCOMP._IOwnership _out1350;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1349, out _out1350);
              r = _out1349;
              resultingOwnership = _out1350;
              readIdents = _4722_recIdents;
            }
          } else if (_source187.is_Set) {
            DAST._IType _4723___mcc_h708 = _source187.dtor_element;
            {
              RAST._IExpr _4724_recursiveGen;
              DCOMP._IOwnership _4725_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4726_recIdents;
              RAST._IExpr _out1351;
              DCOMP._IOwnership _out1352;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1353;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1351, out _out1352, out _out1353);
              _4724_recursiveGen = _out1351;
              _4725_recOwned = _out1352;
              _4726_recIdents = _out1353;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4724_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1354;
              DCOMP._IOwnership _out1355;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1354, out _out1355);
              r = _out1354;
              resultingOwnership = _out1355;
              readIdents = _4726_recIdents;
            }
          } else if (_source187.is_Multiset) {
            DAST._IType _4727___mcc_h710 = _source187.dtor_element;
            {
              RAST._IExpr _4728_recursiveGen;
              DCOMP._IOwnership _4729_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4730_recIdents;
              RAST._IExpr _out1356;
              DCOMP._IOwnership _out1357;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1356, out _out1357, out _out1358);
              _4728_recursiveGen = _out1356;
              _4729_recOwned = _out1357;
              _4730_recIdents = _out1358;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4728_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1359;
              DCOMP._IOwnership _out1360;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1359, out _out1360);
              r = _out1359;
              resultingOwnership = _out1360;
              readIdents = _4730_recIdents;
            }
          } else if (_source187.is_Map) {
            DAST._IType _4731___mcc_h712 = _source187.dtor_key;
            DAST._IType _4732___mcc_h713 = _source187.dtor_value;
            {
              RAST._IExpr _4733_recursiveGen;
              DCOMP._IOwnership _4734_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4735_recIdents;
              RAST._IExpr _out1361;
              DCOMP._IOwnership _out1362;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1361, out _out1362, out _out1363);
              _4733_recursiveGen = _out1361;
              _4734_recOwned = _out1362;
              _4735_recIdents = _out1363;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4733_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1364;
              DCOMP._IOwnership _out1365;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1364, out _out1365);
              r = _out1364;
              resultingOwnership = _out1365;
              readIdents = _4735_recIdents;
            }
          } else if (_source187.is_SetBuilder) {
            DAST._IType _4736___mcc_h716 = _source187.dtor_element;
            {
              RAST._IExpr _4737_recursiveGen;
              DCOMP._IOwnership _4738_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4739_recIdents;
              RAST._IExpr _out1366;
              DCOMP._IOwnership _out1367;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1366, out _out1367, out _out1368);
              _4737_recursiveGen = _out1366;
              _4738_recOwned = _out1367;
              _4739_recIdents = _out1368;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4737_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1369;
              DCOMP._IOwnership _out1370;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1369, out _out1370);
              r = _out1369;
              resultingOwnership = _out1370;
              readIdents = _4739_recIdents;
            }
          } else if (_source187.is_MapBuilder) {
            DAST._IType _4740___mcc_h718 = _source187.dtor_key;
            DAST._IType _4741___mcc_h719 = _source187.dtor_value;
            {
              RAST._IExpr _4742_recursiveGen;
              DCOMP._IOwnership _4743_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4744_recIdents;
              RAST._IExpr _out1371;
              DCOMP._IOwnership _out1372;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1373;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1371, out _out1372, out _out1373);
              _4742_recursiveGen = _out1371;
              _4743_recOwned = _out1372;
              _4744_recIdents = _out1373;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4742_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1374;
              DCOMP._IOwnership _out1375;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1374, out _out1375);
              r = _out1374;
              resultingOwnership = _out1375;
              readIdents = _4744_recIdents;
            }
          } else if (_source187.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4745___mcc_h722 = _source187.dtor_args;
            DAST._IType _4746___mcc_h723 = _source187.dtor_result;
            {
              RAST._IExpr _4747_recursiveGen;
              DCOMP._IOwnership _4748_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4749_recIdents;
              RAST._IExpr _out1376;
              DCOMP._IOwnership _out1377;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1378;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1376, out _out1377, out _out1378);
              _4747_recursiveGen = _out1376;
              _4748_recOwned = _out1377;
              _4749_recIdents = _out1378;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4747_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1379;
              DCOMP._IOwnership _out1380;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1379, out _out1380);
              r = _out1379;
              resultingOwnership = _out1380;
              readIdents = _4749_recIdents;
            }
          } else if (_source187.is_Primitive) {
            DAST._IPrimitive _4750___mcc_h726 = _source187.dtor_Primitive_a0;
            {
              RAST._IExpr _4751_recursiveGen;
              DCOMP._IOwnership _4752_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4753_recIdents;
              RAST._IExpr _out1381;
              DCOMP._IOwnership _out1382;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1383;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1381, out _out1382, out _out1383);
              _4751_recursiveGen = _out1381;
              _4752_recOwned = _out1382;
              _4753_recIdents = _out1383;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4751_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1384;
              DCOMP._IOwnership _out1385;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1384, out _out1385);
              r = _out1384;
              resultingOwnership = _out1385;
              readIdents = _4753_recIdents;
            }
          } else if (_source187.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4754___mcc_h728 = _source187.dtor_Passthrough_a0;
            {
              RAST._IExpr _4755_recursiveGen;
              DCOMP._IOwnership _4756_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4757_recIdents;
              RAST._IExpr _out1386;
              DCOMP._IOwnership _out1387;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1386, out _out1387, out _out1388);
              _4755_recursiveGen = _out1386;
              _4756_recOwned = _out1387;
              _4757_recIdents = _out1388;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4755_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1389;
              DCOMP._IOwnership _out1390;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1389, out _out1390);
              r = _out1389;
              resultingOwnership = _out1390;
              readIdents = _4757_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4758___mcc_h730 = _source187.dtor_TypeArg_a0;
            {
              RAST._IExpr _4759_recursiveGen;
              DCOMP._IOwnership _4760_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4761_recIdents;
              RAST._IExpr _out1391;
              DCOMP._IOwnership _out1392;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1393;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1391, out _out1392, out _out1393);
              _4759_recursiveGen = _out1391;
              _4760_recOwned = _out1392;
              _4761_recIdents = _out1393;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4759_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1394;
              DCOMP._IOwnership _out1395;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1394, out _out1395);
              r = _out1394;
              resultingOwnership = _out1395;
              readIdents = _4761_recIdents;
            }
          }
        } else if (_source124.is_MapBuilder) {
          DAST._IType _4762___mcc_h732 = _source124.dtor_key;
          DAST._IType _4763___mcc_h733 = _source124.dtor_value;
          DAST._IType _source192 = _3302___mcc_h1;
          if (_source192.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4764___mcc_h740 = _source192.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4765___mcc_h741 = _source192.dtor_typeArgs;
            DAST._IResolvedType _4766___mcc_h742 = _source192.dtor_resolved;
            DAST._IResolvedType _source193 = _4766___mcc_h742;
            if (_source193.is_Datatype) {
              DAST._IDatatypeType _4767___mcc_h746 = _source193.dtor_datatypeType;
              {
                RAST._IExpr _4768_recursiveGen;
                DCOMP._IOwnership _4769_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4770_recIdents;
                RAST._IExpr _out1396;
                DCOMP._IOwnership _out1397;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1398;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1396, out _out1397, out _out1398);
                _4768_recursiveGen = _out1396;
                _4769_recOwned = _out1397;
                _4770_recIdents = _out1398;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4768_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1399;
                DCOMP._IOwnership _out1400;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1399, out _out1400);
                r = _out1399;
                resultingOwnership = _out1400;
                readIdents = _4770_recIdents;
              }
            } else if (_source193.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4771___mcc_h748 = _source193.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4772___mcc_h749 = _source193.dtor_attributes;
              {
                RAST._IExpr _4773_recursiveGen;
                DCOMP._IOwnership _4774_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4775_recIdents;
                RAST._IExpr _out1401;
                DCOMP._IOwnership _out1402;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1403;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1401, out _out1402, out _out1403);
                _4773_recursiveGen = _out1401;
                _4774_recOwned = _out1402;
                _4775_recIdents = _out1403;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4773_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1404;
                DCOMP._IOwnership _out1405;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1404, out _out1405);
                r = _out1404;
                resultingOwnership = _out1405;
                readIdents = _4775_recIdents;
              }
            } else {
              DAST._IType _4776___mcc_h752 = _source193.dtor_baseType;
              DAST._INewtypeRange _4777___mcc_h753 = _source193.dtor_range;
              bool _4778___mcc_h754 = _source193.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4779___mcc_h755 = _source193.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4780_attributes = _4779___mcc_h755;
              bool _4781_erase = _4778___mcc_h754;
              DAST._INewtypeRange _4782_range = _4777___mcc_h753;
              DAST._IType _4783_b = _4776___mcc_h752;
              {
                Std.Wrappers._IOption<RAST._IType> _4784_nativeToType;
                _4784_nativeToType = DCOMP.COMP.NewtypeToRustType(_4783_b, _4782_range);
                if (object.Equals(_3296_fromTpe, _4783_b)) {
                  RAST._IExpr _4785_recursiveGen;
                  DCOMP._IOwnership _4786_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4787_recIdents;
                  RAST._IExpr _out1406;
                  DCOMP._IOwnership _out1407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1406, out _out1407, out _out1408);
                  _4785_recursiveGen = _out1406;
                  _4786_recOwned = _out1407;
                  _4787_recIdents = _out1408;
                  readIdents = _4787_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source194 = _4784_nativeToType;
                  if (_source194.is_None) {
                    if (_4781_erase) {
                      r = _4785_recursiveGen;
                    } else {
                      RAST._IType _4788_rhsType;
                      RAST._IType _out1409;
                      _out1409 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _4788_rhsType = _out1409;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4788_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4785_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1410;
                    DCOMP._IOwnership _out1411;
                    DCOMP.COMP.FromOwnership(r, _4786_recOwned, expectedOwnership, out _out1410, out _out1411);
                    r = _out1410;
                    resultingOwnership = _out1411;
                  } else {
                    RAST._IType _4789___mcc_h1810 = _source194.dtor_value;
                    RAST._IType _4790_v = _4789___mcc_h1810;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4785_recursiveGen, RAST.Expr.create_ExprFromType(_4790_v)));
                    RAST._IExpr _out1412;
                    DCOMP._IOwnership _out1413;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1412, out _out1413);
                    r = _out1412;
                    resultingOwnership = _out1413;
                  }
                } else {
                  if ((_4784_nativeToType).is_Some) {
                    DAST._IType _source195 = _3296_fromTpe;
                    if (_source195.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4791___mcc_h1811 = _source195.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4792___mcc_h1812 = _source195.dtor_typeArgs;
                      DAST._IResolvedType _4793___mcc_h1813 = _source195.dtor_resolved;
                      DAST._IResolvedType _source196 = _4793___mcc_h1813;
                      if (_source196.is_Datatype) {
                        DAST._IDatatypeType _4794___mcc_h1817 = _source196.dtor_datatypeType;
                      } else if (_source196.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4795___mcc_h1819 = _source196.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4796___mcc_h1820 = _source196.dtor_attributes;
                      } else {
                        DAST._IType _4797___mcc_h1823 = _source196.dtor_baseType;
                        DAST._INewtypeRange _4798___mcc_h1824 = _source196.dtor_range;
                        bool _4799___mcc_h1825 = _source196.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4800___mcc_h1826 = _source196.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4801_attributes0 = _4800___mcc_h1826;
                        bool _4802_erase0 = _4799___mcc_h1825;
                        DAST._INewtypeRange _4803_range0 = _4798___mcc_h1824;
                        DAST._IType _4804_b0 = _4797___mcc_h1823;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4805_nativeFromType;
                          _4805_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4804_b0, _4803_range0);
                          if ((_4805_nativeFromType).is_Some) {
                            RAST._IExpr _4806_recursiveGen;
                            DCOMP._IOwnership _4807_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4808_recIdents;
                            RAST._IExpr _out1414;
                            DCOMP._IOwnership _out1415;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1414, out _out1415, out _out1416);
                            _4806_recursiveGen = _out1414;
                            _4807_recOwned = _out1415;
                            _4808_recIdents = _out1416;
                            RAST._IExpr _out1417;
                            DCOMP._IOwnership _out1418;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4806_recursiveGen, (_4784_nativeToType).dtor_value), _4807_recOwned, expectedOwnership, out _out1417, out _out1418);
                            r = _out1417;
                            resultingOwnership = _out1418;
                            readIdents = _4808_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source195.is_Nullable) {
                      DAST._IType _4809___mcc_h1831 = _source195.dtor_Nullable_a0;
                    } else if (_source195.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4810___mcc_h1833 = _source195.dtor_Tuple_a0;
                    } else if (_source195.is_Array) {
                      DAST._IType _4811___mcc_h1835 = _source195.dtor_element;
                      BigInteger _4812___mcc_h1836 = _source195.dtor_dims;
                    } else if (_source195.is_Seq) {
                      DAST._IType _4813___mcc_h1839 = _source195.dtor_element;
                    } else if (_source195.is_Set) {
                      DAST._IType _4814___mcc_h1841 = _source195.dtor_element;
                    } else if (_source195.is_Multiset) {
                      DAST._IType _4815___mcc_h1843 = _source195.dtor_element;
                    } else if (_source195.is_Map) {
                      DAST._IType _4816___mcc_h1845 = _source195.dtor_key;
                      DAST._IType _4817___mcc_h1846 = _source195.dtor_value;
                    } else if (_source195.is_SetBuilder) {
                      DAST._IType _4818___mcc_h1849 = _source195.dtor_element;
                    } else if (_source195.is_MapBuilder) {
                      DAST._IType _4819___mcc_h1851 = _source195.dtor_key;
                      DAST._IType _4820___mcc_h1852 = _source195.dtor_value;
                    } else if (_source195.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4821___mcc_h1855 = _source195.dtor_args;
                      DAST._IType _4822___mcc_h1856 = _source195.dtor_result;
                    } else if (_source195.is_Primitive) {
                      DAST._IPrimitive _4823___mcc_h1859 = _source195.dtor_Primitive_a0;
                    } else if (_source195.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4824___mcc_h1861 = _source195.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4825___mcc_h1863 = _source195.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4826_recursiveGen;
                      DCOMP._IOwnership _4827_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4828_recIdents;
                      RAST._IExpr _out1419;
                      DCOMP._IOwnership _out1420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1421;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1419, out _out1420, out _out1421);
                      _4826_recursiveGen = _out1419;
                      _4827_recOwned = _out1420;
                      _4828_recIdents = _out1421;
                      RAST._IExpr _out1422;
                      DCOMP._IOwnership _out1423;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4826_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4784_nativeToType).dtor_value), _4827_recOwned, expectedOwnership, out _out1422, out _out1423);
                      r = _out1422;
                      resultingOwnership = _out1423;
                      readIdents = _4828_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1424;
                  DCOMP._IOwnership _out1425;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1426;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _4783_b), _4783_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1424, out _out1425, out _out1426);
                  r = _out1424;
                  resultingOwnership = _out1425;
                  readIdents = _out1426;
                }
              }
            }
          } else if (_source192.is_Nullable) {
            DAST._IType _4829___mcc_h760 = _source192.dtor_Nullable_a0;
            {
              RAST._IExpr _4830_recursiveGen;
              DCOMP._IOwnership _4831_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4832_recIdents;
              RAST._IExpr _out1427;
              DCOMP._IOwnership _out1428;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1429;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1427, out _out1428, out _out1429);
              _4830_recursiveGen = _out1427;
              _4831_recOwned = _out1428;
              _4832_recIdents = _out1429;
              r = _4830_recursiveGen;
              if (object.Equals(_4831_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1430;
              DCOMP._IOwnership _out1431;
              DCOMP.COMP.FromOwnership(r, _4831_recOwned, expectedOwnership, out _out1430, out _out1431);
              r = _out1430;
              resultingOwnership = _out1431;
              readIdents = _4832_recIdents;
            }
          } else if (_source192.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4833___mcc_h762 = _source192.dtor_Tuple_a0;
            {
              RAST._IExpr _4834_recursiveGen;
              DCOMP._IOwnership _4835_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4836_recIdents;
              RAST._IExpr _out1432;
              DCOMP._IOwnership _out1433;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1434;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1432, out _out1433, out _out1434);
              _4834_recursiveGen = _out1432;
              _4835_recOwned = _out1433;
              _4836_recIdents = _out1434;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4834_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1435;
              DCOMP._IOwnership _out1436;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1435, out _out1436);
              r = _out1435;
              resultingOwnership = _out1436;
              readIdents = _4836_recIdents;
            }
          } else if (_source192.is_Array) {
            DAST._IType _4837___mcc_h764 = _source192.dtor_element;
            BigInteger _4838___mcc_h765 = _source192.dtor_dims;
            {
              RAST._IExpr _4839_recursiveGen;
              DCOMP._IOwnership _4840_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4841_recIdents;
              RAST._IExpr _out1437;
              DCOMP._IOwnership _out1438;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1437, out _out1438, out _out1439);
              _4839_recursiveGen = _out1437;
              _4840_recOwned = _out1438;
              _4841_recIdents = _out1439;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4839_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1440;
              DCOMP._IOwnership _out1441;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1440, out _out1441);
              r = _out1440;
              resultingOwnership = _out1441;
              readIdents = _4841_recIdents;
            }
          } else if (_source192.is_Seq) {
            DAST._IType _4842___mcc_h768 = _source192.dtor_element;
            {
              RAST._IExpr _4843_recursiveGen;
              DCOMP._IOwnership _4844_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4845_recIdents;
              RAST._IExpr _out1442;
              DCOMP._IOwnership _out1443;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1442, out _out1443, out _out1444);
              _4843_recursiveGen = _out1442;
              _4844_recOwned = _out1443;
              _4845_recIdents = _out1444;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4843_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1445;
              DCOMP._IOwnership _out1446;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1445, out _out1446);
              r = _out1445;
              resultingOwnership = _out1446;
              readIdents = _4845_recIdents;
            }
          } else if (_source192.is_Set) {
            DAST._IType _4846___mcc_h770 = _source192.dtor_element;
            {
              RAST._IExpr _4847_recursiveGen;
              DCOMP._IOwnership _4848_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4849_recIdents;
              RAST._IExpr _out1447;
              DCOMP._IOwnership _out1448;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1447, out _out1448, out _out1449);
              _4847_recursiveGen = _out1447;
              _4848_recOwned = _out1448;
              _4849_recIdents = _out1449;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4847_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1450;
              DCOMP._IOwnership _out1451;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1450, out _out1451);
              r = _out1450;
              resultingOwnership = _out1451;
              readIdents = _4849_recIdents;
            }
          } else if (_source192.is_Multiset) {
            DAST._IType _4850___mcc_h772 = _source192.dtor_element;
            {
              RAST._IExpr _4851_recursiveGen;
              DCOMP._IOwnership _4852_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4853_recIdents;
              RAST._IExpr _out1452;
              DCOMP._IOwnership _out1453;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1454;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1452, out _out1453, out _out1454);
              _4851_recursiveGen = _out1452;
              _4852_recOwned = _out1453;
              _4853_recIdents = _out1454;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4851_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1455;
              DCOMP._IOwnership _out1456;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1455, out _out1456);
              r = _out1455;
              resultingOwnership = _out1456;
              readIdents = _4853_recIdents;
            }
          } else if (_source192.is_Map) {
            DAST._IType _4854___mcc_h774 = _source192.dtor_key;
            DAST._IType _4855___mcc_h775 = _source192.dtor_value;
            {
              RAST._IExpr _4856_recursiveGen;
              DCOMP._IOwnership _4857_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4858_recIdents;
              RAST._IExpr _out1457;
              DCOMP._IOwnership _out1458;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1459;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1457, out _out1458, out _out1459);
              _4856_recursiveGen = _out1457;
              _4857_recOwned = _out1458;
              _4858_recIdents = _out1459;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4856_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1460;
              DCOMP._IOwnership _out1461;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1460, out _out1461);
              r = _out1460;
              resultingOwnership = _out1461;
              readIdents = _4858_recIdents;
            }
          } else if (_source192.is_SetBuilder) {
            DAST._IType _4859___mcc_h778 = _source192.dtor_element;
            {
              RAST._IExpr _4860_recursiveGen;
              DCOMP._IOwnership _4861_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4862_recIdents;
              RAST._IExpr _out1462;
              DCOMP._IOwnership _out1463;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1464;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1462, out _out1463, out _out1464);
              _4860_recursiveGen = _out1462;
              _4861_recOwned = _out1463;
              _4862_recIdents = _out1464;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4860_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1465;
              DCOMP._IOwnership _out1466;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1465, out _out1466);
              r = _out1465;
              resultingOwnership = _out1466;
              readIdents = _4862_recIdents;
            }
          } else if (_source192.is_MapBuilder) {
            DAST._IType _4863___mcc_h780 = _source192.dtor_key;
            DAST._IType _4864___mcc_h781 = _source192.dtor_value;
            {
              RAST._IExpr _4865_recursiveGen;
              DCOMP._IOwnership _4866_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4867_recIdents;
              RAST._IExpr _out1467;
              DCOMP._IOwnership _out1468;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1467, out _out1468, out _out1469);
              _4865_recursiveGen = _out1467;
              _4866_recOwned = _out1468;
              _4867_recIdents = _out1469;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4865_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1470;
              DCOMP._IOwnership _out1471;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1470, out _out1471);
              r = _out1470;
              resultingOwnership = _out1471;
              readIdents = _4867_recIdents;
            }
          } else if (_source192.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4868___mcc_h784 = _source192.dtor_args;
            DAST._IType _4869___mcc_h785 = _source192.dtor_result;
            {
              RAST._IExpr _4870_recursiveGen;
              DCOMP._IOwnership _4871_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4872_recIdents;
              RAST._IExpr _out1472;
              DCOMP._IOwnership _out1473;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1474;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1472, out _out1473, out _out1474);
              _4870_recursiveGen = _out1472;
              _4871_recOwned = _out1473;
              _4872_recIdents = _out1474;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4870_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1475;
              DCOMP._IOwnership _out1476;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1475, out _out1476);
              r = _out1475;
              resultingOwnership = _out1476;
              readIdents = _4872_recIdents;
            }
          } else if (_source192.is_Primitive) {
            DAST._IPrimitive _4873___mcc_h788 = _source192.dtor_Primitive_a0;
            {
              RAST._IExpr _4874_recursiveGen;
              DCOMP._IOwnership _4875_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4876_recIdents;
              RAST._IExpr _out1477;
              DCOMP._IOwnership _out1478;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1479;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1477, out _out1478, out _out1479);
              _4874_recursiveGen = _out1477;
              _4875_recOwned = _out1478;
              _4876_recIdents = _out1479;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4874_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1480;
              DCOMP._IOwnership _out1481;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1480, out _out1481);
              r = _out1480;
              resultingOwnership = _out1481;
              readIdents = _4876_recIdents;
            }
          } else if (_source192.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4877___mcc_h790 = _source192.dtor_Passthrough_a0;
            {
              RAST._IExpr _4878_recursiveGen;
              DCOMP._IOwnership _4879_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4880_recIdents;
              RAST._IExpr _out1482;
              DCOMP._IOwnership _out1483;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1482, out _out1483, out _out1484);
              _4878_recursiveGen = _out1482;
              _4879_recOwned = _out1483;
              _4880_recIdents = _out1484;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4878_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1485;
              DCOMP._IOwnership _out1486;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1485, out _out1486);
              r = _out1485;
              resultingOwnership = _out1486;
              readIdents = _4880_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4881___mcc_h792 = _source192.dtor_TypeArg_a0;
            {
              RAST._IExpr _4882_recursiveGen;
              DCOMP._IOwnership _4883_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4884_recIdents;
              RAST._IExpr _out1487;
              DCOMP._IOwnership _out1488;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1487, out _out1488, out _out1489);
              _4882_recursiveGen = _out1487;
              _4883_recOwned = _out1488;
              _4884_recIdents = _out1489;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4882_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1490;
              DCOMP._IOwnership _out1491;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1490, out _out1491);
              r = _out1490;
              resultingOwnership = _out1491;
              readIdents = _4884_recIdents;
            }
          }
        } else if (_source124.is_Arrow) {
          Dafny.ISequence<DAST._IType> _4885___mcc_h794 = _source124.dtor_args;
          DAST._IType _4886___mcc_h795 = _source124.dtor_result;
          DAST._IType _source197 = _3302___mcc_h1;
          if (_source197.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4887___mcc_h802 = _source197.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4888___mcc_h803 = _source197.dtor_typeArgs;
            DAST._IResolvedType _4889___mcc_h804 = _source197.dtor_resolved;
            DAST._IResolvedType _source198 = _4889___mcc_h804;
            if (_source198.is_Datatype) {
              DAST._IDatatypeType _4890___mcc_h808 = _source198.dtor_datatypeType;
              {
                RAST._IExpr _4891_recursiveGen;
                DCOMP._IOwnership _4892_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4893_recIdents;
                RAST._IExpr _out1492;
                DCOMP._IOwnership _out1493;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1494;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1492, out _out1493, out _out1494);
                _4891_recursiveGen = _out1492;
                _4892_recOwned = _out1493;
                _4893_recIdents = _out1494;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4891_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1495;
                DCOMP._IOwnership _out1496;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1495, out _out1496);
                r = _out1495;
                resultingOwnership = _out1496;
                readIdents = _4893_recIdents;
              }
            } else if (_source198.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4894___mcc_h810 = _source198.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4895___mcc_h811 = _source198.dtor_attributes;
              {
                RAST._IExpr _4896_recursiveGen;
                DCOMP._IOwnership _4897_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4898_recIdents;
                RAST._IExpr _out1497;
                DCOMP._IOwnership _out1498;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1499;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1497, out _out1498, out _out1499);
                _4896_recursiveGen = _out1497;
                _4897_recOwned = _out1498;
                _4898_recIdents = _out1499;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4896_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1500;
                DCOMP._IOwnership _out1501;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1500, out _out1501);
                r = _out1500;
                resultingOwnership = _out1501;
                readIdents = _4898_recIdents;
              }
            } else {
              DAST._IType _4899___mcc_h814 = _source198.dtor_baseType;
              DAST._INewtypeRange _4900___mcc_h815 = _source198.dtor_range;
              bool _4901___mcc_h816 = _source198.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4902___mcc_h817 = _source198.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4903_attributes = _4902___mcc_h817;
              bool _4904_erase = _4901___mcc_h816;
              DAST._INewtypeRange _4905_range = _4900___mcc_h815;
              DAST._IType _4906_b = _4899___mcc_h814;
              {
                Std.Wrappers._IOption<RAST._IType> _4907_nativeToType;
                _4907_nativeToType = DCOMP.COMP.NewtypeToRustType(_4906_b, _4905_range);
                if (object.Equals(_3296_fromTpe, _4906_b)) {
                  RAST._IExpr _4908_recursiveGen;
                  DCOMP._IOwnership _4909_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4910_recIdents;
                  RAST._IExpr _out1502;
                  DCOMP._IOwnership _out1503;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1504;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1502, out _out1503, out _out1504);
                  _4908_recursiveGen = _out1502;
                  _4909_recOwned = _out1503;
                  _4910_recIdents = _out1504;
                  readIdents = _4910_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source199 = _4907_nativeToType;
                  if (_source199.is_None) {
                    if (_4904_erase) {
                      r = _4908_recursiveGen;
                    } else {
                      RAST._IType _4911_rhsType;
                      RAST._IType _out1505;
                      _out1505 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _4911_rhsType = _out1505;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4911_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4908_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1506;
                    DCOMP._IOwnership _out1507;
                    DCOMP.COMP.FromOwnership(r, _4909_recOwned, expectedOwnership, out _out1506, out _out1507);
                    r = _out1506;
                    resultingOwnership = _out1507;
                  } else {
                    RAST._IType _4912___mcc_h1865 = _source199.dtor_value;
                    RAST._IType _4913_v = _4912___mcc_h1865;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4908_recursiveGen, RAST.Expr.create_ExprFromType(_4913_v)));
                    RAST._IExpr _out1508;
                    DCOMP._IOwnership _out1509;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1508, out _out1509);
                    r = _out1508;
                    resultingOwnership = _out1509;
                  }
                } else {
                  if ((_4907_nativeToType).is_Some) {
                    DAST._IType _source200 = _3296_fromTpe;
                    if (_source200.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4914___mcc_h1866 = _source200.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _4915___mcc_h1867 = _source200.dtor_typeArgs;
                      DAST._IResolvedType _4916___mcc_h1868 = _source200.dtor_resolved;
                      DAST._IResolvedType _source201 = _4916___mcc_h1868;
                      if (_source201.is_Datatype) {
                        DAST._IDatatypeType _4917___mcc_h1872 = _source201.dtor_datatypeType;
                      } else if (_source201.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4918___mcc_h1874 = _source201.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _4919___mcc_h1875 = _source201.dtor_attributes;
                      } else {
                        DAST._IType _4920___mcc_h1878 = _source201.dtor_baseType;
                        DAST._INewtypeRange _4921___mcc_h1879 = _source201.dtor_range;
                        bool _4922___mcc_h1880 = _source201.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _4923___mcc_h1881 = _source201.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _4924_attributes0 = _4923___mcc_h1881;
                        bool _4925_erase0 = _4922___mcc_h1880;
                        DAST._INewtypeRange _4926_range0 = _4921___mcc_h1879;
                        DAST._IType _4927_b0 = _4920___mcc_h1878;
                        {
                          Std.Wrappers._IOption<RAST._IType> _4928_nativeFromType;
                          _4928_nativeFromType = DCOMP.COMP.NewtypeToRustType(_4927_b0, _4926_range0);
                          if ((_4928_nativeFromType).is_Some) {
                            RAST._IExpr _4929_recursiveGen;
                            DCOMP._IOwnership _4930_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4931_recIdents;
                            RAST._IExpr _out1510;
                            DCOMP._IOwnership _out1511;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1510, out _out1511, out _out1512);
                            _4929_recursiveGen = _out1510;
                            _4930_recOwned = _out1511;
                            _4931_recIdents = _out1512;
                            RAST._IExpr _out1513;
                            DCOMP._IOwnership _out1514;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_4929_recursiveGen, (_4907_nativeToType).dtor_value), _4930_recOwned, expectedOwnership, out _out1513, out _out1514);
                            r = _out1513;
                            resultingOwnership = _out1514;
                            readIdents = _4931_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source200.is_Nullable) {
                      DAST._IType _4932___mcc_h1886 = _source200.dtor_Nullable_a0;
                    } else if (_source200.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _4933___mcc_h1888 = _source200.dtor_Tuple_a0;
                    } else if (_source200.is_Array) {
                      DAST._IType _4934___mcc_h1890 = _source200.dtor_element;
                      BigInteger _4935___mcc_h1891 = _source200.dtor_dims;
                    } else if (_source200.is_Seq) {
                      DAST._IType _4936___mcc_h1894 = _source200.dtor_element;
                    } else if (_source200.is_Set) {
                      DAST._IType _4937___mcc_h1896 = _source200.dtor_element;
                    } else if (_source200.is_Multiset) {
                      DAST._IType _4938___mcc_h1898 = _source200.dtor_element;
                    } else if (_source200.is_Map) {
                      DAST._IType _4939___mcc_h1900 = _source200.dtor_key;
                      DAST._IType _4940___mcc_h1901 = _source200.dtor_value;
                    } else if (_source200.is_SetBuilder) {
                      DAST._IType _4941___mcc_h1904 = _source200.dtor_element;
                    } else if (_source200.is_MapBuilder) {
                      DAST._IType _4942___mcc_h1906 = _source200.dtor_key;
                      DAST._IType _4943___mcc_h1907 = _source200.dtor_value;
                    } else if (_source200.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _4944___mcc_h1910 = _source200.dtor_args;
                      DAST._IType _4945___mcc_h1911 = _source200.dtor_result;
                    } else if (_source200.is_Primitive) {
                      DAST._IPrimitive _4946___mcc_h1914 = _source200.dtor_Primitive_a0;
                    } else if (_source200.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _4947___mcc_h1916 = _source200.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _4948___mcc_h1918 = _source200.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _4949_recursiveGen;
                      DCOMP._IOwnership _4950_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4951_recIdents;
                      RAST._IExpr _out1515;
                      DCOMP._IOwnership _out1516;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1515, out _out1516, out _out1517);
                      _4949_recursiveGen = _out1515;
                      _4950_recOwned = _out1516;
                      _4951_recIdents = _out1517;
                      RAST._IExpr _out1518;
                      DCOMP._IOwnership _out1519;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_4949_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_4907_nativeToType).dtor_value), _4950_recOwned, expectedOwnership, out _out1518, out _out1519);
                      r = _out1518;
                      resultingOwnership = _out1519;
                      readIdents = _4951_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out1520;
                  DCOMP._IOwnership _out1521;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _4906_b), _4906_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1520, out _out1521, out _out1522);
                  r = _out1520;
                  resultingOwnership = _out1521;
                  readIdents = _out1522;
                }
              }
            }
          } else if (_source197.is_Nullable) {
            DAST._IType _4952___mcc_h822 = _source197.dtor_Nullable_a0;
            {
              RAST._IExpr _4953_recursiveGen;
              DCOMP._IOwnership _4954_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4955_recIdents;
              RAST._IExpr _out1523;
              DCOMP._IOwnership _out1524;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1523, out _out1524, out _out1525);
              _4953_recursiveGen = _out1523;
              _4954_recOwned = _out1524;
              _4955_recIdents = _out1525;
              r = _4953_recursiveGen;
              if (object.Equals(_4954_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1526;
              DCOMP._IOwnership _out1527;
              DCOMP.COMP.FromOwnership(r, _4954_recOwned, expectedOwnership, out _out1526, out _out1527);
              r = _out1526;
              resultingOwnership = _out1527;
              readIdents = _4955_recIdents;
            }
          } else if (_source197.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4956___mcc_h824 = _source197.dtor_Tuple_a0;
            {
              RAST._IExpr _4957_recursiveGen;
              DCOMP._IOwnership _4958_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4959_recIdents;
              RAST._IExpr _out1528;
              DCOMP._IOwnership _out1529;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1530;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1528, out _out1529, out _out1530);
              _4957_recursiveGen = _out1528;
              _4958_recOwned = _out1529;
              _4959_recIdents = _out1530;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4957_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1531;
              DCOMP._IOwnership _out1532;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1531, out _out1532);
              r = _out1531;
              resultingOwnership = _out1532;
              readIdents = _4959_recIdents;
            }
          } else if (_source197.is_Array) {
            DAST._IType _4960___mcc_h826 = _source197.dtor_element;
            BigInteger _4961___mcc_h827 = _source197.dtor_dims;
            {
              RAST._IExpr _4962_recursiveGen;
              DCOMP._IOwnership _4963_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4964_recIdents;
              RAST._IExpr _out1533;
              DCOMP._IOwnership _out1534;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1535;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1533, out _out1534, out _out1535);
              _4962_recursiveGen = _out1533;
              _4963_recOwned = _out1534;
              _4964_recIdents = _out1535;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4962_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1536;
              DCOMP._IOwnership _out1537;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1536, out _out1537);
              r = _out1536;
              resultingOwnership = _out1537;
              readIdents = _4964_recIdents;
            }
          } else if (_source197.is_Seq) {
            DAST._IType _4965___mcc_h830 = _source197.dtor_element;
            {
              RAST._IExpr _4966_recursiveGen;
              DCOMP._IOwnership _4967_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4968_recIdents;
              RAST._IExpr _out1538;
              DCOMP._IOwnership _out1539;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1540;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1538, out _out1539, out _out1540);
              _4966_recursiveGen = _out1538;
              _4967_recOwned = _out1539;
              _4968_recIdents = _out1540;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4966_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1541;
              DCOMP._IOwnership _out1542;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1541, out _out1542);
              r = _out1541;
              resultingOwnership = _out1542;
              readIdents = _4968_recIdents;
            }
          } else if (_source197.is_Set) {
            DAST._IType _4969___mcc_h832 = _source197.dtor_element;
            {
              RAST._IExpr _4970_recursiveGen;
              DCOMP._IOwnership _4971_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4972_recIdents;
              RAST._IExpr _out1543;
              DCOMP._IOwnership _out1544;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1543, out _out1544, out _out1545);
              _4970_recursiveGen = _out1543;
              _4971_recOwned = _out1544;
              _4972_recIdents = _out1545;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4970_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1546;
              DCOMP._IOwnership _out1547;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1546, out _out1547);
              r = _out1546;
              resultingOwnership = _out1547;
              readIdents = _4972_recIdents;
            }
          } else if (_source197.is_Multiset) {
            DAST._IType _4973___mcc_h834 = _source197.dtor_element;
            {
              RAST._IExpr _4974_recursiveGen;
              DCOMP._IOwnership _4975_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4976_recIdents;
              RAST._IExpr _out1548;
              DCOMP._IOwnership _out1549;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1550;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1548, out _out1549, out _out1550);
              _4974_recursiveGen = _out1548;
              _4975_recOwned = _out1549;
              _4976_recIdents = _out1550;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4974_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1551;
              DCOMP._IOwnership _out1552;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1551, out _out1552);
              r = _out1551;
              resultingOwnership = _out1552;
              readIdents = _4976_recIdents;
            }
          } else if (_source197.is_Map) {
            DAST._IType _4977___mcc_h836 = _source197.dtor_key;
            DAST._IType _4978___mcc_h837 = _source197.dtor_value;
            {
              RAST._IExpr _4979_recursiveGen;
              DCOMP._IOwnership _4980_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4981_recIdents;
              RAST._IExpr _out1553;
              DCOMP._IOwnership _out1554;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1555;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1553, out _out1554, out _out1555);
              _4979_recursiveGen = _out1553;
              _4980_recOwned = _out1554;
              _4981_recIdents = _out1555;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4979_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1556;
              DCOMP._IOwnership _out1557;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1556, out _out1557);
              r = _out1556;
              resultingOwnership = _out1557;
              readIdents = _4981_recIdents;
            }
          } else if (_source197.is_SetBuilder) {
            DAST._IType _4982___mcc_h840 = _source197.dtor_element;
            {
              RAST._IExpr _4983_recursiveGen;
              DCOMP._IOwnership _4984_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4985_recIdents;
              RAST._IExpr _out1558;
              DCOMP._IOwnership _out1559;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1560;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1558, out _out1559, out _out1560);
              _4983_recursiveGen = _out1558;
              _4984_recOwned = _out1559;
              _4985_recIdents = _out1560;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4983_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1561;
              DCOMP._IOwnership _out1562;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1561, out _out1562);
              r = _out1561;
              resultingOwnership = _out1562;
              readIdents = _4985_recIdents;
            }
          } else if (_source197.is_MapBuilder) {
            DAST._IType _4986___mcc_h842 = _source197.dtor_key;
            DAST._IType _4987___mcc_h843 = _source197.dtor_value;
            {
              RAST._IExpr _4988_recursiveGen;
              DCOMP._IOwnership _4989_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4990_recIdents;
              RAST._IExpr _out1563;
              DCOMP._IOwnership _out1564;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1563, out _out1564, out _out1565);
              _4988_recursiveGen = _out1563;
              _4989_recOwned = _out1564;
              _4990_recIdents = _out1565;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4988_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1566;
              DCOMP._IOwnership _out1567;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1566, out _out1567);
              r = _out1566;
              resultingOwnership = _out1567;
              readIdents = _4990_recIdents;
            }
          } else if (_source197.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4991___mcc_h846 = _source197.dtor_args;
            DAST._IType _4992___mcc_h847 = _source197.dtor_result;
            {
              RAST._IExpr _4993_recursiveGen;
              DCOMP._IOwnership _4994_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4995_recIdents;
              RAST._IExpr _out1568;
              DCOMP._IOwnership _out1569;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1570;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1568, out _out1569, out _out1570);
              _4993_recursiveGen = _out1568;
              _4994_recOwned = _out1569;
              _4995_recIdents = _out1570;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4993_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1571;
              DCOMP._IOwnership _out1572;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1571, out _out1572);
              r = _out1571;
              resultingOwnership = _out1572;
              readIdents = _4995_recIdents;
            }
          } else if (_source197.is_Primitive) {
            DAST._IPrimitive _4996___mcc_h850 = _source197.dtor_Primitive_a0;
            {
              RAST._IExpr _4997_recursiveGen;
              DCOMP._IOwnership _4998_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4999_recIdents;
              RAST._IExpr _out1573;
              DCOMP._IOwnership _out1574;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1575;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1573, out _out1574, out _out1575);
              _4997_recursiveGen = _out1573;
              _4998_recOwned = _out1574;
              _4999_recIdents = _out1575;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4997_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1576;
              DCOMP._IOwnership _out1577;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1576, out _out1577);
              r = _out1576;
              resultingOwnership = _out1577;
              readIdents = _4999_recIdents;
            }
          } else if (_source197.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5000___mcc_h852 = _source197.dtor_Passthrough_a0;
            {
              RAST._IExpr _5001_recursiveGen;
              DCOMP._IOwnership _5002_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5003_recIdents;
              RAST._IExpr _out1578;
              DCOMP._IOwnership _out1579;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1580;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1578, out _out1579, out _out1580);
              _5001_recursiveGen = _out1578;
              _5002_recOwned = _out1579;
              _5003_recIdents = _out1580;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5001_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1581;
              DCOMP._IOwnership _out1582;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1581, out _out1582);
              r = _out1581;
              resultingOwnership = _out1582;
              readIdents = _5003_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5004___mcc_h854 = _source197.dtor_TypeArg_a0;
            {
              RAST._IExpr _5005_recursiveGen;
              DCOMP._IOwnership _5006_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5007_recIdents;
              RAST._IExpr _out1583;
              DCOMP._IOwnership _out1584;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1583, out _out1584, out _out1585);
              _5005_recursiveGen = _out1583;
              _5006_recOwned = _out1584;
              _5007_recIdents = _out1585;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5005_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1586;
              DCOMP._IOwnership _out1587;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1586, out _out1587);
              r = _out1586;
              resultingOwnership = _out1587;
              readIdents = _5007_recIdents;
            }
          }
        } else if (_source124.is_Primitive) {
          DAST._IPrimitive _5008___mcc_h856 = _source124.dtor_Primitive_a0;
          DAST._IPrimitive _source202 = _5008___mcc_h856;
          if (_source202.is_Int) {
            DAST._IType _source203 = _3302___mcc_h1;
            if (_source203.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5009___mcc_h860 = _source203.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5010___mcc_h861 = _source203.dtor_typeArgs;
              DAST._IResolvedType _5011___mcc_h862 = _source203.dtor_resolved;
              DAST._IResolvedType _source204 = _5011___mcc_h862;
              if (_source204.is_Datatype) {
                DAST._IDatatypeType _5012___mcc_h866 = _source204.dtor_datatypeType;
                {
                  RAST._IExpr _5013_recursiveGen;
                  DCOMP._IOwnership _5014_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5015_recIdents;
                  RAST._IExpr _out1588;
                  DCOMP._IOwnership _out1589;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1588, out _out1589, out _out1590);
                  _5013_recursiveGen = _out1588;
                  _5014_recOwned = _out1589;
                  _5015_recIdents = _out1590;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5013_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1591;
                  DCOMP._IOwnership _out1592;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1591, out _out1592);
                  r = _out1591;
                  resultingOwnership = _out1592;
                  readIdents = _5015_recIdents;
                }
              } else if (_source204.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5016___mcc_h868 = _source204.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5017___mcc_h869 = _source204.dtor_attributes;
                {
                  RAST._IExpr _5018_recursiveGen;
                  DCOMP._IOwnership _5019_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5020_recIdents;
                  RAST._IExpr _out1593;
                  DCOMP._IOwnership _out1594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1595;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1593, out _out1594, out _out1595);
                  _5018_recursiveGen = _out1593;
                  _5019_recOwned = _out1594;
                  _5020_recIdents = _out1595;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5018_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1596;
                  DCOMP._IOwnership _out1597;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1596, out _out1597);
                  r = _out1596;
                  resultingOwnership = _out1597;
                  readIdents = _5020_recIdents;
                }
              } else {
                DAST._IType _5021___mcc_h872 = _source204.dtor_baseType;
                DAST._INewtypeRange _5022___mcc_h873 = _source204.dtor_range;
                bool _5023___mcc_h874 = _source204.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5024___mcc_h875 = _source204.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5025_attributes = _5024___mcc_h875;
                bool _5026_erase = _5023___mcc_h874;
                DAST._INewtypeRange _5027_range = _5022___mcc_h873;
                DAST._IType _5028_b = _5021___mcc_h872;
                {
                  Std.Wrappers._IOption<RAST._IType> _5029_nativeToType;
                  _5029_nativeToType = DCOMP.COMP.NewtypeToRustType(_5028_b, _5027_range);
                  if (object.Equals(_3296_fromTpe, _5028_b)) {
                    RAST._IExpr _5030_recursiveGen;
                    DCOMP._IOwnership _5031_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5032_recIdents;
                    RAST._IExpr _out1598;
                    DCOMP._IOwnership _out1599;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1600;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1598, out _out1599, out _out1600);
                    _5030_recursiveGen = _out1598;
                    _5031_recOwned = _out1599;
                    _5032_recIdents = _out1600;
                    readIdents = _5032_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source205 = _5029_nativeToType;
                    if (_source205.is_None) {
                      if (_5026_erase) {
                        r = _5030_recursiveGen;
                      } else {
                        RAST._IType _5033_rhsType;
                        RAST._IType _out1601;
                        _out1601 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                        _5033_rhsType = _out1601;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5033_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5030_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1602;
                      DCOMP._IOwnership _out1603;
                      DCOMP.COMP.FromOwnership(r, _5031_recOwned, expectedOwnership, out _out1602, out _out1603);
                      r = _out1602;
                      resultingOwnership = _out1603;
                    } else {
                      RAST._IType _5034___mcc_h1920 = _source205.dtor_value;
                      RAST._IType _5035_v = _5034___mcc_h1920;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5030_recursiveGen, RAST.Expr.create_ExprFromType(_5035_v)));
                      RAST._IExpr _out1604;
                      DCOMP._IOwnership _out1605;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1604, out _out1605);
                      r = _out1604;
                      resultingOwnership = _out1605;
                    }
                  } else {
                    if ((_5029_nativeToType).is_Some) {
                      DAST._IType _source206 = _3296_fromTpe;
                      if (_source206.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5036___mcc_h1921 = _source206.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5037___mcc_h1922 = _source206.dtor_typeArgs;
                        DAST._IResolvedType _5038___mcc_h1923 = _source206.dtor_resolved;
                        DAST._IResolvedType _source207 = _5038___mcc_h1923;
                        if (_source207.is_Datatype) {
                          DAST._IDatatypeType _5039___mcc_h1927 = _source207.dtor_datatypeType;
                        } else if (_source207.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5040___mcc_h1929 = _source207.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5041___mcc_h1930 = _source207.dtor_attributes;
                        } else {
                          DAST._IType _5042___mcc_h1933 = _source207.dtor_baseType;
                          DAST._INewtypeRange _5043___mcc_h1934 = _source207.dtor_range;
                          bool _5044___mcc_h1935 = _source207.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5045___mcc_h1936 = _source207.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5046_attributes0 = _5045___mcc_h1936;
                          bool _5047_erase0 = _5044___mcc_h1935;
                          DAST._INewtypeRange _5048_range0 = _5043___mcc_h1934;
                          DAST._IType _5049_b0 = _5042___mcc_h1933;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5050_nativeFromType;
                            _5050_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5049_b0, _5048_range0);
                            if ((_5050_nativeFromType).is_Some) {
                              RAST._IExpr _5051_recursiveGen;
                              DCOMP._IOwnership _5052_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5053_recIdents;
                              RAST._IExpr _out1606;
                              DCOMP._IOwnership _out1607;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
                              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1606, out _out1607, out _out1608);
                              _5051_recursiveGen = _out1606;
                              _5052_recOwned = _out1607;
                              _5053_recIdents = _out1608;
                              RAST._IExpr _out1609;
                              DCOMP._IOwnership _out1610;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5051_recursiveGen, (_5029_nativeToType).dtor_value), _5052_recOwned, expectedOwnership, out _out1609, out _out1610);
                              r = _out1609;
                              resultingOwnership = _out1610;
                              readIdents = _5053_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source206.is_Nullable) {
                        DAST._IType _5054___mcc_h1941 = _source206.dtor_Nullable_a0;
                      } else if (_source206.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5055___mcc_h1943 = _source206.dtor_Tuple_a0;
                      } else if (_source206.is_Array) {
                        DAST._IType _5056___mcc_h1945 = _source206.dtor_element;
                        BigInteger _5057___mcc_h1946 = _source206.dtor_dims;
                      } else if (_source206.is_Seq) {
                        DAST._IType _5058___mcc_h1949 = _source206.dtor_element;
                      } else if (_source206.is_Set) {
                        DAST._IType _5059___mcc_h1951 = _source206.dtor_element;
                      } else if (_source206.is_Multiset) {
                        DAST._IType _5060___mcc_h1953 = _source206.dtor_element;
                      } else if (_source206.is_Map) {
                        DAST._IType _5061___mcc_h1955 = _source206.dtor_key;
                        DAST._IType _5062___mcc_h1956 = _source206.dtor_value;
                      } else if (_source206.is_SetBuilder) {
                        DAST._IType _5063___mcc_h1959 = _source206.dtor_element;
                      } else if (_source206.is_MapBuilder) {
                        DAST._IType _5064___mcc_h1961 = _source206.dtor_key;
                        DAST._IType _5065___mcc_h1962 = _source206.dtor_value;
                      } else if (_source206.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5066___mcc_h1965 = _source206.dtor_args;
                        DAST._IType _5067___mcc_h1966 = _source206.dtor_result;
                      } else if (_source206.is_Primitive) {
                        DAST._IPrimitive _5068___mcc_h1969 = _source206.dtor_Primitive_a0;
                      } else if (_source206.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5069___mcc_h1971 = _source206.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5070___mcc_h1973 = _source206.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5071_recursiveGen;
                        DCOMP._IOwnership _5072_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5073_recIdents;
                        RAST._IExpr _out1611;
                        DCOMP._IOwnership _out1612;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1611, out _out1612, out _out1613);
                        _5071_recursiveGen = _out1611;
                        _5072_recOwned = _out1612;
                        _5073_recIdents = _out1613;
                        RAST._IExpr _out1614;
                        DCOMP._IOwnership _out1615;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5071_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5029_nativeToType).dtor_value), _5072_recOwned, expectedOwnership, out _out1614, out _out1615);
                        r = _out1614;
                        resultingOwnership = _out1615;
                        readIdents = _5073_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out1616;
                    DCOMP._IOwnership _out1617;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _5028_b), _5028_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1616, out _out1617, out _out1618);
                    r = _out1616;
                    resultingOwnership = _out1617;
                    readIdents = _out1618;
                  }
                }
              }
            } else if (_source203.is_Nullable) {
              DAST._IType _5074___mcc_h880 = _source203.dtor_Nullable_a0;
              {
                RAST._IExpr _5075_recursiveGen;
                DCOMP._IOwnership _5076_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5077_recIdents;
                RAST._IExpr _out1619;
                DCOMP._IOwnership _out1620;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1619, out _out1620, out _out1621);
                _5075_recursiveGen = _out1619;
                _5076_recOwned = _out1620;
                _5077_recIdents = _out1621;
                r = _5075_recursiveGen;
                if (object.Equals(_5076_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1622;
                DCOMP._IOwnership _out1623;
                DCOMP.COMP.FromOwnership(r, _5076_recOwned, expectedOwnership, out _out1622, out _out1623);
                r = _out1622;
                resultingOwnership = _out1623;
                readIdents = _5077_recIdents;
              }
            } else if (_source203.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5078___mcc_h882 = _source203.dtor_Tuple_a0;
              {
                RAST._IExpr _5079_recursiveGen;
                DCOMP._IOwnership _5080_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5081_recIdents;
                RAST._IExpr _out1624;
                DCOMP._IOwnership _out1625;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1626;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1624, out _out1625, out _out1626);
                _5079_recursiveGen = _out1624;
                _5080_recOwned = _out1625;
                _5081_recIdents = _out1626;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5079_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1627;
                DCOMP._IOwnership _out1628;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1627, out _out1628);
                r = _out1627;
                resultingOwnership = _out1628;
                readIdents = _5081_recIdents;
              }
            } else if (_source203.is_Array) {
              DAST._IType _5082___mcc_h884 = _source203.dtor_element;
              BigInteger _5083___mcc_h885 = _source203.dtor_dims;
              {
                RAST._IExpr _5084_recursiveGen;
                DCOMP._IOwnership _5085_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5086_recIdents;
                RAST._IExpr _out1629;
                DCOMP._IOwnership _out1630;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1631;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1629, out _out1630, out _out1631);
                _5084_recursiveGen = _out1629;
                _5085_recOwned = _out1630;
                _5086_recIdents = _out1631;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5084_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1632;
                DCOMP._IOwnership _out1633;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1632, out _out1633);
                r = _out1632;
                resultingOwnership = _out1633;
                readIdents = _5086_recIdents;
              }
            } else if (_source203.is_Seq) {
              DAST._IType _5087___mcc_h888 = _source203.dtor_element;
              {
                RAST._IExpr _5088_recursiveGen;
                DCOMP._IOwnership _5089_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5090_recIdents;
                RAST._IExpr _out1634;
                DCOMP._IOwnership _out1635;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1636;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1634, out _out1635, out _out1636);
                _5088_recursiveGen = _out1634;
                _5089_recOwned = _out1635;
                _5090_recIdents = _out1636;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5088_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1637;
                DCOMP._IOwnership _out1638;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1637, out _out1638);
                r = _out1637;
                resultingOwnership = _out1638;
                readIdents = _5090_recIdents;
              }
            } else if (_source203.is_Set) {
              DAST._IType _5091___mcc_h890 = _source203.dtor_element;
              {
                RAST._IExpr _5092_recursiveGen;
                DCOMP._IOwnership _5093_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5094_recIdents;
                RAST._IExpr _out1639;
                DCOMP._IOwnership _out1640;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1639, out _out1640, out _out1641);
                _5092_recursiveGen = _out1639;
                _5093_recOwned = _out1640;
                _5094_recIdents = _out1641;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5092_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1642;
                DCOMP._IOwnership _out1643;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1642, out _out1643);
                r = _out1642;
                resultingOwnership = _out1643;
                readIdents = _5094_recIdents;
              }
            } else if (_source203.is_Multiset) {
              DAST._IType _5095___mcc_h892 = _source203.dtor_element;
              {
                RAST._IExpr _5096_recursiveGen;
                DCOMP._IOwnership _5097_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5098_recIdents;
                RAST._IExpr _out1644;
                DCOMP._IOwnership _out1645;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1646;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1644, out _out1645, out _out1646);
                _5096_recursiveGen = _out1644;
                _5097_recOwned = _out1645;
                _5098_recIdents = _out1646;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5096_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1647;
                DCOMP._IOwnership _out1648;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1647, out _out1648);
                r = _out1647;
                resultingOwnership = _out1648;
                readIdents = _5098_recIdents;
              }
            } else if (_source203.is_Map) {
              DAST._IType _5099___mcc_h894 = _source203.dtor_key;
              DAST._IType _5100___mcc_h895 = _source203.dtor_value;
              {
                RAST._IExpr _5101_recursiveGen;
                DCOMP._IOwnership _5102_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5103_recIdents;
                RAST._IExpr _out1649;
                DCOMP._IOwnership _out1650;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1651;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1649, out _out1650, out _out1651);
                _5101_recursiveGen = _out1649;
                _5102_recOwned = _out1650;
                _5103_recIdents = _out1651;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5101_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1652;
                DCOMP._IOwnership _out1653;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1652, out _out1653);
                r = _out1652;
                resultingOwnership = _out1653;
                readIdents = _5103_recIdents;
              }
            } else if (_source203.is_SetBuilder) {
              DAST._IType _5104___mcc_h898 = _source203.dtor_element;
              {
                RAST._IExpr _5105_recursiveGen;
                DCOMP._IOwnership _5106_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5107_recIdents;
                RAST._IExpr _out1654;
                DCOMP._IOwnership _out1655;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1656;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1654, out _out1655, out _out1656);
                _5105_recursiveGen = _out1654;
                _5106_recOwned = _out1655;
                _5107_recIdents = _out1656;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5105_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1657;
                DCOMP._IOwnership _out1658;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1657, out _out1658);
                r = _out1657;
                resultingOwnership = _out1658;
                readIdents = _5107_recIdents;
              }
            } else if (_source203.is_MapBuilder) {
              DAST._IType _5108___mcc_h900 = _source203.dtor_key;
              DAST._IType _5109___mcc_h901 = _source203.dtor_value;
              {
                RAST._IExpr _5110_recursiveGen;
                DCOMP._IOwnership _5111_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5112_recIdents;
                RAST._IExpr _out1659;
                DCOMP._IOwnership _out1660;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1661;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1659, out _out1660, out _out1661);
                _5110_recursiveGen = _out1659;
                _5111_recOwned = _out1660;
                _5112_recIdents = _out1661;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5110_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1662;
                DCOMP._IOwnership _out1663;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1662, out _out1663);
                r = _out1662;
                resultingOwnership = _out1663;
                readIdents = _5112_recIdents;
              }
            } else if (_source203.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5113___mcc_h904 = _source203.dtor_args;
              DAST._IType _5114___mcc_h905 = _source203.dtor_result;
              {
                RAST._IExpr _5115_recursiveGen;
                DCOMP._IOwnership _5116_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5117_recIdents;
                RAST._IExpr _out1664;
                DCOMP._IOwnership _out1665;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1664, out _out1665, out _out1666);
                _5115_recursiveGen = _out1664;
                _5116_recOwned = _out1665;
                _5117_recIdents = _out1666;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5115_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1667;
                DCOMP._IOwnership _out1668;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1667, out _out1668);
                r = _out1667;
                resultingOwnership = _out1668;
                readIdents = _5117_recIdents;
              }
            } else if (_source203.is_Primitive) {
              DAST._IPrimitive _5118___mcc_h908 = _source203.dtor_Primitive_a0;
              DAST._IPrimitive _source208 = _5118___mcc_h908;
              if (_source208.is_Int) {
                {
                  RAST._IExpr _5119_recursiveGen;
                  DCOMP._IOwnership _5120_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5121_recIdents;
                  RAST._IExpr _out1669;
                  DCOMP._IOwnership _out1670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1671;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1669, out _out1670, out _out1671);
                  _5119_recursiveGen = _out1669;
                  _5120_recOwned = _out1670;
                  _5121_recIdents = _out1671;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5119_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1672;
                  DCOMP._IOwnership _out1673;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1672, out _out1673);
                  r = _out1672;
                  resultingOwnership = _out1673;
                  readIdents = _5121_recIdents;
                }
              } else if (_source208.is_Real) {
                {
                  RAST._IExpr _5122_recursiveGen;
                  DCOMP._IOwnership _5123___v82;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5124_recIdents;
                  RAST._IExpr _out1674;
                  DCOMP._IOwnership _out1675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1674, out _out1675, out _out1676);
                  _5122_recursiveGen = _out1674;
                  _5123___v82 = _out1675;
                  _5124_recIdents = _out1676;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_5122_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out1677;
                  DCOMP._IOwnership _out1678;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1677, out _out1678);
                  r = _out1677;
                  resultingOwnership = _out1678;
                  readIdents = _5124_recIdents;
                }
              } else if (_source208.is_String) {
                {
                  RAST._IExpr _5125_recursiveGen;
                  DCOMP._IOwnership _5126_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5127_recIdents;
                  RAST._IExpr _out1679;
                  DCOMP._IOwnership _out1680;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1681;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1679, out _out1680, out _out1681);
                  _5125_recursiveGen = _out1679;
                  _5126_recOwned = _out1680;
                  _5127_recIdents = _out1681;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5125_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1682;
                  DCOMP._IOwnership _out1683;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1682, out _out1683);
                  r = _out1682;
                  resultingOwnership = _out1683;
                  readIdents = _5127_recIdents;
                }
              } else if (_source208.is_Bool) {
                {
                  RAST._IExpr _5128_recursiveGen;
                  DCOMP._IOwnership _5129_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5130_recIdents;
                  RAST._IExpr _out1684;
                  DCOMP._IOwnership _out1685;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1686;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1684, out _out1685, out _out1686);
                  _5128_recursiveGen = _out1684;
                  _5129_recOwned = _out1685;
                  _5130_recIdents = _out1686;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5128_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1687;
                  DCOMP._IOwnership _out1688;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1687, out _out1688);
                  r = _out1687;
                  resultingOwnership = _out1688;
                  readIdents = _5130_recIdents;
                }
              } else {
                {
                  RAST._IType _5131_rhsType;
                  RAST._IType _out1689;
                  _out1689 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                  _5131_rhsType = _out1689;
                  RAST._IExpr _5132_recursiveGen;
                  DCOMP._IOwnership _5133___v88;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5134_recIdents;
                  RAST._IExpr _out1690;
                  DCOMP._IOwnership _out1691;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1690, out _out1691, out _out1692);
                  _5132_recursiveGen = _out1690;
                  _5133___v88 = _out1691;
                  _5134_recIdents = _out1692;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_5132_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out1693;
                  DCOMP._IOwnership _out1694;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1693, out _out1694);
                  r = _out1693;
                  resultingOwnership = _out1694;
                  readIdents = _5134_recIdents;
                }
              }
            } else if (_source203.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5135___mcc_h910 = _source203.dtor_Passthrough_a0;
              {
                RAST._IType _5136_rhsType;
                RAST._IType _out1695;
                _out1695 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                _5136_rhsType = _out1695;
                RAST._IExpr _5137_recursiveGen;
                DCOMP._IOwnership _5138___v85;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5139_recIdents;
                RAST._IExpr _out1696;
                DCOMP._IOwnership _out1697;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1698;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1696, out _out1697, out _out1698);
                _5137_recursiveGen = _out1696;
                _5138___v85 = _out1697;
                _5139_recIdents = _out1698;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_5136_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_5137_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out1699;
                DCOMP._IOwnership _out1700;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1699, out _out1700);
                r = _out1699;
                resultingOwnership = _out1700;
                readIdents = _5139_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5140___mcc_h912 = _source203.dtor_TypeArg_a0;
              {
                RAST._IExpr _5141_recursiveGen;
                DCOMP._IOwnership _5142_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5143_recIdents;
                RAST._IExpr _out1701;
                DCOMP._IOwnership _out1702;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1703;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1701, out _out1702, out _out1703);
                _5141_recursiveGen = _out1701;
                _5142_recOwned = _out1702;
                _5143_recIdents = _out1703;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5141_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1704;
                DCOMP._IOwnership _out1705;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1704, out _out1705);
                r = _out1704;
                resultingOwnership = _out1705;
                readIdents = _5143_recIdents;
              }
            }
          } else if (_source202.is_Real) {
            DAST._IType _source209 = _3302___mcc_h1;
            if (_source209.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5144___mcc_h914 = _source209.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5145___mcc_h915 = _source209.dtor_typeArgs;
              DAST._IResolvedType _5146___mcc_h916 = _source209.dtor_resolved;
              DAST._IResolvedType _source210 = _5146___mcc_h916;
              if (_source210.is_Datatype) {
                DAST._IDatatypeType _5147___mcc_h920 = _source210.dtor_datatypeType;
                {
                  RAST._IExpr _5148_recursiveGen;
                  DCOMP._IOwnership _5149_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5150_recIdents;
                  RAST._IExpr _out1706;
                  DCOMP._IOwnership _out1707;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1708;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1706, out _out1707, out _out1708);
                  _5148_recursiveGen = _out1706;
                  _5149_recOwned = _out1707;
                  _5150_recIdents = _out1708;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5148_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1709;
                  DCOMP._IOwnership _out1710;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1709, out _out1710);
                  r = _out1709;
                  resultingOwnership = _out1710;
                  readIdents = _5150_recIdents;
                }
              } else if (_source210.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5151___mcc_h922 = _source210.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5152___mcc_h923 = _source210.dtor_attributes;
                {
                  RAST._IExpr _5153_recursiveGen;
                  DCOMP._IOwnership _5154_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5155_recIdents;
                  RAST._IExpr _out1711;
                  DCOMP._IOwnership _out1712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1713;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1711, out _out1712, out _out1713);
                  _5153_recursiveGen = _out1711;
                  _5154_recOwned = _out1712;
                  _5155_recIdents = _out1713;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5153_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1714;
                  DCOMP._IOwnership _out1715;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1714, out _out1715);
                  r = _out1714;
                  resultingOwnership = _out1715;
                  readIdents = _5155_recIdents;
                }
              } else {
                DAST._IType _5156___mcc_h926 = _source210.dtor_baseType;
                DAST._INewtypeRange _5157___mcc_h927 = _source210.dtor_range;
                bool _5158___mcc_h928 = _source210.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5159___mcc_h929 = _source210.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5160_attributes = _5159___mcc_h929;
                bool _5161_erase = _5158___mcc_h928;
                DAST._INewtypeRange _5162_range = _5157___mcc_h927;
                DAST._IType _5163_b = _5156___mcc_h926;
                {
                  Std.Wrappers._IOption<RAST._IType> _5164_nativeToType;
                  _5164_nativeToType = DCOMP.COMP.NewtypeToRustType(_5163_b, _5162_range);
                  if (object.Equals(_3296_fromTpe, _5163_b)) {
                    RAST._IExpr _5165_recursiveGen;
                    DCOMP._IOwnership _5166_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5167_recIdents;
                    RAST._IExpr _out1716;
                    DCOMP._IOwnership _out1717;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1716, out _out1717, out _out1718);
                    _5165_recursiveGen = _out1716;
                    _5166_recOwned = _out1717;
                    _5167_recIdents = _out1718;
                    readIdents = _5167_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source211 = _5164_nativeToType;
                    if (_source211.is_None) {
                      if (_5161_erase) {
                        r = _5165_recursiveGen;
                      } else {
                        RAST._IType _5168_rhsType;
                        RAST._IType _out1719;
                        _out1719 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                        _5168_rhsType = _out1719;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5168_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5165_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1720;
                      DCOMP._IOwnership _out1721;
                      DCOMP.COMP.FromOwnership(r, _5166_recOwned, expectedOwnership, out _out1720, out _out1721);
                      r = _out1720;
                      resultingOwnership = _out1721;
                    } else {
                      RAST._IType _5169___mcc_h1975 = _source211.dtor_value;
                      RAST._IType _5170_v = _5169___mcc_h1975;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5165_recursiveGen, RAST.Expr.create_ExprFromType(_5170_v)));
                      RAST._IExpr _out1722;
                      DCOMP._IOwnership _out1723;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1722, out _out1723);
                      r = _out1722;
                      resultingOwnership = _out1723;
                    }
                  } else {
                    if ((_5164_nativeToType).is_Some) {
                      DAST._IType _source212 = _3296_fromTpe;
                      if (_source212.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5171___mcc_h1976 = _source212.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5172___mcc_h1977 = _source212.dtor_typeArgs;
                        DAST._IResolvedType _5173___mcc_h1978 = _source212.dtor_resolved;
                        DAST._IResolvedType _source213 = _5173___mcc_h1978;
                        if (_source213.is_Datatype) {
                          DAST._IDatatypeType _5174___mcc_h1982 = _source213.dtor_datatypeType;
                        } else if (_source213.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5175___mcc_h1984 = _source213.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5176___mcc_h1985 = _source213.dtor_attributes;
                        } else {
                          DAST._IType _5177___mcc_h1988 = _source213.dtor_baseType;
                          DAST._INewtypeRange _5178___mcc_h1989 = _source213.dtor_range;
                          bool _5179___mcc_h1990 = _source213.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5180___mcc_h1991 = _source213.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5181_attributes0 = _5180___mcc_h1991;
                          bool _5182_erase0 = _5179___mcc_h1990;
                          DAST._INewtypeRange _5183_range0 = _5178___mcc_h1989;
                          DAST._IType _5184_b0 = _5177___mcc_h1988;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5185_nativeFromType;
                            _5185_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5184_b0, _5183_range0);
                            if ((_5185_nativeFromType).is_Some) {
                              RAST._IExpr _5186_recursiveGen;
                              DCOMP._IOwnership _5187_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5188_recIdents;
                              RAST._IExpr _out1724;
                              DCOMP._IOwnership _out1725;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1726;
                              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1724, out _out1725, out _out1726);
                              _5186_recursiveGen = _out1724;
                              _5187_recOwned = _out1725;
                              _5188_recIdents = _out1726;
                              RAST._IExpr _out1727;
                              DCOMP._IOwnership _out1728;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5186_recursiveGen, (_5164_nativeToType).dtor_value), _5187_recOwned, expectedOwnership, out _out1727, out _out1728);
                              r = _out1727;
                              resultingOwnership = _out1728;
                              readIdents = _5188_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source212.is_Nullable) {
                        DAST._IType _5189___mcc_h1996 = _source212.dtor_Nullable_a0;
                      } else if (_source212.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5190___mcc_h1998 = _source212.dtor_Tuple_a0;
                      } else if (_source212.is_Array) {
                        DAST._IType _5191___mcc_h2000 = _source212.dtor_element;
                        BigInteger _5192___mcc_h2001 = _source212.dtor_dims;
                      } else if (_source212.is_Seq) {
                        DAST._IType _5193___mcc_h2004 = _source212.dtor_element;
                      } else if (_source212.is_Set) {
                        DAST._IType _5194___mcc_h2006 = _source212.dtor_element;
                      } else if (_source212.is_Multiset) {
                        DAST._IType _5195___mcc_h2008 = _source212.dtor_element;
                      } else if (_source212.is_Map) {
                        DAST._IType _5196___mcc_h2010 = _source212.dtor_key;
                        DAST._IType _5197___mcc_h2011 = _source212.dtor_value;
                      } else if (_source212.is_SetBuilder) {
                        DAST._IType _5198___mcc_h2014 = _source212.dtor_element;
                      } else if (_source212.is_MapBuilder) {
                        DAST._IType _5199___mcc_h2016 = _source212.dtor_key;
                        DAST._IType _5200___mcc_h2017 = _source212.dtor_value;
                      } else if (_source212.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5201___mcc_h2020 = _source212.dtor_args;
                        DAST._IType _5202___mcc_h2021 = _source212.dtor_result;
                      } else if (_source212.is_Primitive) {
                        DAST._IPrimitive _5203___mcc_h2024 = _source212.dtor_Primitive_a0;
                      } else if (_source212.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5204___mcc_h2026 = _source212.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5205___mcc_h2028 = _source212.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5206_recursiveGen;
                        DCOMP._IOwnership _5207_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5208_recIdents;
                        RAST._IExpr _out1729;
                        DCOMP._IOwnership _out1730;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1731;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1729, out _out1730, out _out1731);
                        _5206_recursiveGen = _out1729;
                        _5207_recOwned = _out1730;
                        _5208_recIdents = _out1731;
                        RAST._IExpr _out1732;
                        DCOMP._IOwnership _out1733;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5206_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5164_nativeToType).dtor_value), _5207_recOwned, expectedOwnership, out _out1732, out _out1733);
                        r = _out1732;
                        resultingOwnership = _out1733;
                        readIdents = _5208_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out1734;
                    DCOMP._IOwnership _out1735;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1736;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _5163_b), _5163_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1734, out _out1735, out _out1736);
                    r = _out1734;
                    resultingOwnership = _out1735;
                    readIdents = _out1736;
                  }
                }
              }
            } else if (_source209.is_Nullable) {
              DAST._IType _5209___mcc_h934 = _source209.dtor_Nullable_a0;
              {
                RAST._IExpr _5210_recursiveGen;
                DCOMP._IOwnership _5211_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5212_recIdents;
                RAST._IExpr _out1737;
                DCOMP._IOwnership _out1738;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1737, out _out1738, out _out1739);
                _5210_recursiveGen = _out1737;
                _5211_recOwned = _out1738;
                _5212_recIdents = _out1739;
                r = _5210_recursiveGen;
                if (object.Equals(_5211_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1740;
                DCOMP._IOwnership _out1741;
                DCOMP.COMP.FromOwnership(r, _5211_recOwned, expectedOwnership, out _out1740, out _out1741);
                r = _out1740;
                resultingOwnership = _out1741;
                readIdents = _5212_recIdents;
              }
            } else if (_source209.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5213___mcc_h936 = _source209.dtor_Tuple_a0;
              {
                RAST._IExpr _5214_recursiveGen;
                DCOMP._IOwnership _5215_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5216_recIdents;
                RAST._IExpr _out1742;
                DCOMP._IOwnership _out1743;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1744;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1742, out _out1743, out _out1744);
                _5214_recursiveGen = _out1742;
                _5215_recOwned = _out1743;
                _5216_recIdents = _out1744;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5214_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1745;
                DCOMP._IOwnership _out1746;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1745, out _out1746);
                r = _out1745;
                resultingOwnership = _out1746;
                readIdents = _5216_recIdents;
              }
            } else if (_source209.is_Array) {
              DAST._IType _5217___mcc_h938 = _source209.dtor_element;
              BigInteger _5218___mcc_h939 = _source209.dtor_dims;
              {
                RAST._IExpr _5219_recursiveGen;
                DCOMP._IOwnership _5220_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5221_recIdents;
                RAST._IExpr _out1747;
                DCOMP._IOwnership _out1748;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1747, out _out1748, out _out1749);
                _5219_recursiveGen = _out1747;
                _5220_recOwned = _out1748;
                _5221_recIdents = _out1749;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5219_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1750;
                DCOMP._IOwnership _out1751;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1750, out _out1751);
                r = _out1750;
                resultingOwnership = _out1751;
                readIdents = _5221_recIdents;
              }
            } else if (_source209.is_Seq) {
              DAST._IType _5222___mcc_h942 = _source209.dtor_element;
              {
                RAST._IExpr _5223_recursiveGen;
                DCOMP._IOwnership _5224_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5225_recIdents;
                RAST._IExpr _out1752;
                DCOMP._IOwnership _out1753;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1754;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1752, out _out1753, out _out1754);
                _5223_recursiveGen = _out1752;
                _5224_recOwned = _out1753;
                _5225_recIdents = _out1754;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5223_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1755;
                DCOMP._IOwnership _out1756;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1755, out _out1756);
                r = _out1755;
                resultingOwnership = _out1756;
                readIdents = _5225_recIdents;
              }
            } else if (_source209.is_Set) {
              DAST._IType _5226___mcc_h944 = _source209.dtor_element;
              {
                RAST._IExpr _5227_recursiveGen;
                DCOMP._IOwnership _5228_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5229_recIdents;
                RAST._IExpr _out1757;
                DCOMP._IOwnership _out1758;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1759;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1757, out _out1758, out _out1759);
                _5227_recursiveGen = _out1757;
                _5228_recOwned = _out1758;
                _5229_recIdents = _out1759;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5227_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1760;
                DCOMP._IOwnership _out1761;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1760, out _out1761);
                r = _out1760;
                resultingOwnership = _out1761;
                readIdents = _5229_recIdents;
              }
            } else if (_source209.is_Multiset) {
              DAST._IType _5230___mcc_h946 = _source209.dtor_element;
              {
                RAST._IExpr _5231_recursiveGen;
                DCOMP._IOwnership _5232_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5233_recIdents;
                RAST._IExpr _out1762;
                DCOMP._IOwnership _out1763;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1764;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1762, out _out1763, out _out1764);
                _5231_recursiveGen = _out1762;
                _5232_recOwned = _out1763;
                _5233_recIdents = _out1764;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5231_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1765;
                DCOMP._IOwnership _out1766;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1765, out _out1766);
                r = _out1765;
                resultingOwnership = _out1766;
                readIdents = _5233_recIdents;
              }
            } else if (_source209.is_Map) {
              DAST._IType _5234___mcc_h948 = _source209.dtor_key;
              DAST._IType _5235___mcc_h949 = _source209.dtor_value;
              {
                RAST._IExpr _5236_recursiveGen;
                DCOMP._IOwnership _5237_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5238_recIdents;
                RAST._IExpr _out1767;
                DCOMP._IOwnership _out1768;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1769;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1767, out _out1768, out _out1769);
                _5236_recursiveGen = _out1767;
                _5237_recOwned = _out1768;
                _5238_recIdents = _out1769;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5236_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1770;
                DCOMP._IOwnership _out1771;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1770, out _out1771);
                r = _out1770;
                resultingOwnership = _out1771;
                readIdents = _5238_recIdents;
              }
            } else if (_source209.is_SetBuilder) {
              DAST._IType _5239___mcc_h952 = _source209.dtor_element;
              {
                RAST._IExpr _5240_recursiveGen;
                DCOMP._IOwnership _5241_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5242_recIdents;
                RAST._IExpr _out1772;
                DCOMP._IOwnership _out1773;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1774;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1772, out _out1773, out _out1774);
                _5240_recursiveGen = _out1772;
                _5241_recOwned = _out1773;
                _5242_recIdents = _out1774;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5240_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1775;
                DCOMP._IOwnership _out1776;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1775, out _out1776);
                r = _out1775;
                resultingOwnership = _out1776;
                readIdents = _5242_recIdents;
              }
            } else if (_source209.is_MapBuilder) {
              DAST._IType _5243___mcc_h954 = _source209.dtor_key;
              DAST._IType _5244___mcc_h955 = _source209.dtor_value;
              {
                RAST._IExpr _5245_recursiveGen;
                DCOMP._IOwnership _5246_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5247_recIdents;
                RAST._IExpr _out1777;
                DCOMP._IOwnership _out1778;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1779;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1777, out _out1778, out _out1779);
                _5245_recursiveGen = _out1777;
                _5246_recOwned = _out1778;
                _5247_recIdents = _out1779;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5245_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1780;
                DCOMP._IOwnership _out1781;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1780, out _out1781);
                r = _out1780;
                resultingOwnership = _out1781;
                readIdents = _5247_recIdents;
              }
            } else if (_source209.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5248___mcc_h958 = _source209.dtor_args;
              DAST._IType _5249___mcc_h959 = _source209.dtor_result;
              {
                RAST._IExpr _5250_recursiveGen;
                DCOMP._IOwnership _5251_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5252_recIdents;
                RAST._IExpr _out1782;
                DCOMP._IOwnership _out1783;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1784;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1782, out _out1783, out _out1784);
                _5250_recursiveGen = _out1782;
                _5251_recOwned = _out1783;
                _5252_recIdents = _out1784;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5250_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1785;
                DCOMP._IOwnership _out1786;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1785, out _out1786);
                r = _out1785;
                resultingOwnership = _out1786;
                readIdents = _5252_recIdents;
              }
            } else if (_source209.is_Primitive) {
              DAST._IPrimitive _5253___mcc_h962 = _source209.dtor_Primitive_a0;
              DAST._IPrimitive _source214 = _5253___mcc_h962;
              if (_source214.is_Int) {
                {
                  RAST._IExpr _5254_recursiveGen;
                  DCOMP._IOwnership _5255___v83;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5256_recIdents;
                  RAST._IExpr _out1787;
                  DCOMP._IOwnership _out1788;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1789;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1787, out _out1788, out _out1789);
                  _5254_recursiveGen = _out1787;
                  _5255___v83 = _out1788;
                  _5256_recIdents = _out1789;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_5254_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out1790;
                  DCOMP._IOwnership _out1791;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1790, out _out1791);
                  r = _out1790;
                  resultingOwnership = _out1791;
                  readIdents = _5256_recIdents;
                }
              } else if (_source214.is_Real) {
                {
                  RAST._IExpr _5257_recursiveGen;
                  DCOMP._IOwnership _5258_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5259_recIdents;
                  RAST._IExpr _out1792;
                  DCOMP._IOwnership _out1793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1794;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1792, out _out1793, out _out1794);
                  _5257_recursiveGen = _out1792;
                  _5258_recOwned = _out1793;
                  _5259_recIdents = _out1794;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5257_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1795;
                  DCOMP._IOwnership _out1796;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1795, out _out1796);
                  r = _out1795;
                  resultingOwnership = _out1796;
                  readIdents = _5259_recIdents;
                }
              } else if (_source214.is_String) {
                {
                  RAST._IExpr _5260_recursiveGen;
                  DCOMP._IOwnership _5261_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5262_recIdents;
                  RAST._IExpr _out1797;
                  DCOMP._IOwnership _out1798;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1799;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1797, out _out1798, out _out1799);
                  _5260_recursiveGen = _out1797;
                  _5261_recOwned = _out1798;
                  _5262_recIdents = _out1799;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5260_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1800;
                  DCOMP._IOwnership _out1801;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1800, out _out1801);
                  r = _out1800;
                  resultingOwnership = _out1801;
                  readIdents = _5262_recIdents;
                }
              } else if (_source214.is_Bool) {
                {
                  RAST._IExpr _5263_recursiveGen;
                  DCOMP._IOwnership _5264_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5265_recIdents;
                  RAST._IExpr _out1802;
                  DCOMP._IOwnership _out1803;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1804;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1802, out _out1803, out _out1804);
                  _5263_recursiveGen = _out1802;
                  _5264_recOwned = _out1803;
                  _5265_recIdents = _out1804;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5263_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1805;
                  DCOMP._IOwnership _out1806;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1805, out _out1806);
                  r = _out1805;
                  resultingOwnership = _out1806;
                  readIdents = _5265_recIdents;
                }
              } else {
                {
                  RAST._IExpr _5266_recursiveGen;
                  DCOMP._IOwnership _5267_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5268_recIdents;
                  RAST._IExpr _out1807;
                  DCOMP._IOwnership _out1808;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1809;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1807, out _out1808, out _out1809);
                  _5266_recursiveGen = _out1807;
                  _5267_recOwned = _out1808;
                  _5268_recIdents = _out1809;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5266_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1810;
                  DCOMP._IOwnership _out1811;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1810, out _out1811);
                  r = _out1810;
                  resultingOwnership = _out1811;
                  readIdents = _5268_recIdents;
                }
              }
            } else if (_source209.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5269___mcc_h964 = _source209.dtor_Passthrough_a0;
              {
                RAST._IExpr _5270_recursiveGen;
                DCOMP._IOwnership _5271_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5272_recIdents;
                RAST._IExpr _out1812;
                DCOMP._IOwnership _out1813;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1814;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1812, out _out1813, out _out1814);
                _5270_recursiveGen = _out1812;
                _5271_recOwned = _out1813;
                _5272_recIdents = _out1814;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5270_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1815;
                DCOMP._IOwnership _out1816;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1815, out _out1816);
                r = _out1815;
                resultingOwnership = _out1816;
                readIdents = _5272_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5273___mcc_h966 = _source209.dtor_TypeArg_a0;
              {
                RAST._IExpr _5274_recursiveGen;
                DCOMP._IOwnership _5275_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5276_recIdents;
                RAST._IExpr _out1817;
                DCOMP._IOwnership _out1818;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1819;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1817, out _out1818, out _out1819);
                _5274_recursiveGen = _out1817;
                _5275_recOwned = _out1818;
                _5276_recIdents = _out1819;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5274_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1820;
                DCOMP._IOwnership _out1821;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1820, out _out1821);
                r = _out1820;
                resultingOwnership = _out1821;
                readIdents = _5276_recIdents;
              }
            }
          } else if (_source202.is_String) {
            DAST._IType _source215 = _3302___mcc_h1;
            if (_source215.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5277___mcc_h968 = _source215.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5278___mcc_h969 = _source215.dtor_typeArgs;
              DAST._IResolvedType _5279___mcc_h970 = _source215.dtor_resolved;
              DAST._IResolvedType _source216 = _5279___mcc_h970;
              if (_source216.is_Datatype) {
                DAST._IDatatypeType _5280___mcc_h974 = _source216.dtor_datatypeType;
                {
                  RAST._IExpr _5281_recursiveGen;
                  DCOMP._IOwnership _5282_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5283_recIdents;
                  RAST._IExpr _out1822;
                  DCOMP._IOwnership _out1823;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1824;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1822, out _out1823, out _out1824);
                  _5281_recursiveGen = _out1822;
                  _5282_recOwned = _out1823;
                  _5283_recIdents = _out1824;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5281_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1825;
                  DCOMP._IOwnership _out1826;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1825, out _out1826);
                  r = _out1825;
                  resultingOwnership = _out1826;
                  readIdents = _5283_recIdents;
                }
              } else if (_source216.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5284___mcc_h976 = _source216.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5285___mcc_h977 = _source216.dtor_attributes;
                {
                  RAST._IExpr _5286_recursiveGen;
                  DCOMP._IOwnership _5287_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5288_recIdents;
                  RAST._IExpr _out1827;
                  DCOMP._IOwnership _out1828;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1829;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1827, out _out1828, out _out1829);
                  _5286_recursiveGen = _out1827;
                  _5287_recOwned = _out1828;
                  _5288_recIdents = _out1829;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5286_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1830;
                  DCOMP._IOwnership _out1831;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1830, out _out1831);
                  r = _out1830;
                  resultingOwnership = _out1831;
                  readIdents = _5288_recIdents;
                }
              } else {
                DAST._IType _5289___mcc_h980 = _source216.dtor_baseType;
                DAST._INewtypeRange _5290___mcc_h981 = _source216.dtor_range;
                bool _5291___mcc_h982 = _source216.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5292___mcc_h983 = _source216.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5293_attributes = _5292___mcc_h983;
                bool _5294_erase = _5291___mcc_h982;
                DAST._INewtypeRange _5295_range = _5290___mcc_h981;
                DAST._IType _5296_b = _5289___mcc_h980;
                {
                  Std.Wrappers._IOption<RAST._IType> _5297_nativeToType;
                  _5297_nativeToType = DCOMP.COMP.NewtypeToRustType(_5296_b, _5295_range);
                  if (object.Equals(_3296_fromTpe, _5296_b)) {
                    RAST._IExpr _5298_recursiveGen;
                    DCOMP._IOwnership _5299_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5300_recIdents;
                    RAST._IExpr _out1832;
                    DCOMP._IOwnership _out1833;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1834;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1832, out _out1833, out _out1834);
                    _5298_recursiveGen = _out1832;
                    _5299_recOwned = _out1833;
                    _5300_recIdents = _out1834;
                    readIdents = _5300_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source217 = _5297_nativeToType;
                    if (_source217.is_None) {
                      if (_5294_erase) {
                        r = _5298_recursiveGen;
                      } else {
                        RAST._IType _5301_rhsType;
                        RAST._IType _out1835;
                        _out1835 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                        _5301_rhsType = _out1835;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5301_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5298_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1836;
                      DCOMP._IOwnership _out1837;
                      DCOMP.COMP.FromOwnership(r, _5299_recOwned, expectedOwnership, out _out1836, out _out1837);
                      r = _out1836;
                      resultingOwnership = _out1837;
                    } else {
                      RAST._IType _5302___mcc_h2030 = _source217.dtor_value;
                      RAST._IType _5303_v = _5302___mcc_h2030;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5298_recursiveGen, RAST.Expr.create_ExprFromType(_5303_v)));
                      RAST._IExpr _out1838;
                      DCOMP._IOwnership _out1839;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1838, out _out1839);
                      r = _out1838;
                      resultingOwnership = _out1839;
                    }
                  } else {
                    if ((_5297_nativeToType).is_Some) {
                      DAST._IType _source218 = _3296_fromTpe;
                      if (_source218.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5304___mcc_h2031 = _source218.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5305___mcc_h2032 = _source218.dtor_typeArgs;
                        DAST._IResolvedType _5306___mcc_h2033 = _source218.dtor_resolved;
                        DAST._IResolvedType _source219 = _5306___mcc_h2033;
                        if (_source219.is_Datatype) {
                          DAST._IDatatypeType _5307___mcc_h2037 = _source219.dtor_datatypeType;
                        } else if (_source219.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5308___mcc_h2039 = _source219.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5309___mcc_h2040 = _source219.dtor_attributes;
                        } else {
                          DAST._IType _5310___mcc_h2043 = _source219.dtor_baseType;
                          DAST._INewtypeRange _5311___mcc_h2044 = _source219.dtor_range;
                          bool _5312___mcc_h2045 = _source219.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5313___mcc_h2046 = _source219.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5314_attributes0 = _5313___mcc_h2046;
                          bool _5315_erase0 = _5312___mcc_h2045;
                          DAST._INewtypeRange _5316_range0 = _5311___mcc_h2044;
                          DAST._IType _5317_b0 = _5310___mcc_h2043;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5318_nativeFromType;
                            _5318_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5317_b0, _5316_range0);
                            if ((_5318_nativeFromType).is_Some) {
                              RAST._IExpr _5319_recursiveGen;
                              DCOMP._IOwnership _5320_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5321_recIdents;
                              RAST._IExpr _out1840;
                              DCOMP._IOwnership _out1841;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1842;
                              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1840, out _out1841, out _out1842);
                              _5319_recursiveGen = _out1840;
                              _5320_recOwned = _out1841;
                              _5321_recIdents = _out1842;
                              RAST._IExpr _out1843;
                              DCOMP._IOwnership _out1844;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5319_recursiveGen, (_5297_nativeToType).dtor_value), _5320_recOwned, expectedOwnership, out _out1843, out _out1844);
                              r = _out1843;
                              resultingOwnership = _out1844;
                              readIdents = _5321_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source218.is_Nullable) {
                        DAST._IType _5322___mcc_h2051 = _source218.dtor_Nullable_a0;
                      } else if (_source218.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5323___mcc_h2053 = _source218.dtor_Tuple_a0;
                      } else if (_source218.is_Array) {
                        DAST._IType _5324___mcc_h2055 = _source218.dtor_element;
                        BigInteger _5325___mcc_h2056 = _source218.dtor_dims;
                      } else if (_source218.is_Seq) {
                        DAST._IType _5326___mcc_h2059 = _source218.dtor_element;
                      } else if (_source218.is_Set) {
                        DAST._IType _5327___mcc_h2061 = _source218.dtor_element;
                      } else if (_source218.is_Multiset) {
                        DAST._IType _5328___mcc_h2063 = _source218.dtor_element;
                      } else if (_source218.is_Map) {
                        DAST._IType _5329___mcc_h2065 = _source218.dtor_key;
                        DAST._IType _5330___mcc_h2066 = _source218.dtor_value;
                      } else if (_source218.is_SetBuilder) {
                        DAST._IType _5331___mcc_h2069 = _source218.dtor_element;
                      } else if (_source218.is_MapBuilder) {
                        DAST._IType _5332___mcc_h2071 = _source218.dtor_key;
                        DAST._IType _5333___mcc_h2072 = _source218.dtor_value;
                      } else if (_source218.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5334___mcc_h2075 = _source218.dtor_args;
                        DAST._IType _5335___mcc_h2076 = _source218.dtor_result;
                      } else if (_source218.is_Primitive) {
                        DAST._IPrimitive _5336___mcc_h2079 = _source218.dtor_Primitive_a0;
                      } else if (_source218.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5337___mcc_h2081 = _source218.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5338___mcc_h2083 = _source218.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5339_recursiveGen;
                        DCOMP._IOwnership _5340_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5341_recIdents;
                        RAST._IExpr _out1845;
                        DCOMP._IOwnership _out1846;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1847;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1845, out _out1846, out _out1847);
                        _5339_recursiveGen = _out1845;
                        _5340_recOwned = _out1846;
                        _5341_recIdents = _out1847;
                        RAST._IExpr _out1848;
                        DCOMP._IOwnership _out1849;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5339_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5297_nativeToType).dtor_value), _5340_recOwned, expectedOwnership, out _out1848, out _out1849);
                        r = _out1848;
                        resultingOwnership = _out1849;
                        readIdents = _5341_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out1850;
                    DCOMP._IOwnership _out1851;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1852;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _5296_b), _5296_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1850, out _out1851, out _out1852);
                    r = _out1850;
                    resultingOwnership = _out1851;
                    readIdents = _out1852;
                  }
                }
              }
            } else if (_source215.is_Nullable) {
              DAST._IType _5342___mcc_h988 = _source215.dtor_Nullable_a0;
              {
                RAST._IExpr _5343_recursiveGen;
                DCOMP._IOwnership _5344_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5345_recIdents;
                RAST._IExpr _out1853;
                DCOMP._IOwnership _out1854;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1855;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1853, out _out1854, out _out1855);
                _5343_recursiveGen = _out1853;
                _5344_recOwned = _out1854;
                _5345_recIdents = _out1855;
                r = _5343_recursiveGen;
                if (object.Equals(_5344_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1856;
                DCOMP._IOwnership _out1857;
                DCOMP.COMP.FromOwnership(r, _5344_recOwned, expectedOwnership, out _out1856, out _out1857);
                r = _out1856;
                resultingOwnership = _out1857;
                readIdents = _5345_recIdents;
              }
            } else if (_source215.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5346___mcc_h990 = _source215.dtor_Tuple_a0;
              {
                RAST._IExpr _5347_recursiveGen;
                DCOMP._IOwnership _5348_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5349_recIdents;
                RAST._IExpr _out1858;
                DCOMP._IOwnership _out1859;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1860;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1858, out _out1859, out _out1860);
                _5347_recursiveGen = _out1858;
                _5348_recOwned = _out1859;
                _5349_recIdents = _out1860;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5347_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1861;
                DCOMP._IOwnership _out1862;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1861, out _out1862);
                r = _out1861;
                resultingOwnership = _out1862;
                readIdents = _5349_recIdents;
              }
            } else if (_source215.is_Array) {
              DAST._IType _5350___mcc_h992 = _source215.dtor_element;
              BigInteger _5351___mcc_h993 = _source215.dtor_dims;
              {
                RAST._IExpr _5352_recursiveGen;
                DCOMP._IOwnership _5353_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5354_recIdents;
                RAST._IExpr _out1863;
                DCOMP._IOwnership _out1864;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1865;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1863, out _out1864, out _out1865);
                _5352_recursiveGen = _out1863;
                _5353_recOwned = _out1864;
                _5354_recIdents = _out1865;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5352_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1866;
                DCOMP._IOwnership _out1867;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1866, out _out1867);
                r = _out1866;
                resultingOwnership = _out1867;
                readIdents = _5354_recIdents;
              }
            } else if (_source215.is_Seq) {
              DAST._IType _5355___mcc_h996 = _source215.dtor_element;
              {
                RAST._IExpr _5356_recursiveGen;
                DCOMP._IOwnership _5357_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5358_recIdents;
                RAST._IExpr _out1868;
                DCOMP._IOwnership _out1869;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1870;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1868, out _out1869, out _out1870);
                _5356_recursiveGen = _out1868;
                _5357_recOwned = _out1869;
                _5358_recIdents = _out1870;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5356_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1871;
                DCOMP._IOwnership _out1872;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1871, out _out1872);
                r = _out1871;
                resultingOwnership = _out1872;
                readIdents = _5358_recIdents;
              }
            } else if (_source215.is_Set) {
              DAST._IType _5359___mcc_h998 = _source215.dtor_element;
              {
                RAST._IExpr _5360_recursiveGen;
                DCOMP._IOwnership _5361_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5362_recIdents;
                RAST._IExpr _out1873;
                DCOMP._IOwnership _out1874;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1875;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1873, out _out1874, out _out1875);
                _5360_recursiveGen = _out1873;
                _5361_recOwned = _out1874;
                _5362_recIdents = _out1875;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5360_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1876;
                DCOMP._IOwnership _out1877;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1876, out _out1877);
                r = _out1876;
                resultingOwnership = _out1877;
                readIdents = _5362_recIdents;
              }
            } else if (_source215.is_Multiset) {
              DAST._IType _5363___mcc_h1000 = _source215.dtor_element;
              {
                RAST._IExpr _5364_recursiveGen;
                DCOMP._IOwnership _5365_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5366_recIdents;
                RAST._IExpr _out1878;
                DCOMP._IOwnership _out1879;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1880;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1878, out _out1879, out _out1880);
                _5364_recursiveGen = _out1878;
                _5365_recOwned = _out1879;
                _5366_recIdents = _out1880;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5364_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1881;
                DCOMP._IOwnership _out1882;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1881, out _out1882);
                r = _out1881;
                resultingOwnership = _out1882;
                readIdents = _5366_recIdents;
              }
            } else if (_source215.is_Map) {
              DAST._IType _5367___mcc_h1002 = _source215.dtor_key;
              DAST._IType _5368___mcc_h1003 = _source215.dtor_value;
              {
                RAST._IExpr _5369_recursiveGen;
                DCOMP._IOwnership _5370_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5371_recIdents;
                RAST._IExpr _out1883;
                DCOMP._IOwnership _out1884;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1885;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1883, out _out1884, out _out1885);
                _5369_recursiveGen = _out1883;
                _5370_recOwned = _out1884;
                _5371_recIdents = _out1885;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5369_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1886;
                DCOMP._IOwnership _out1887;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1886, out _out1887);
                r = _out1886;
                resultingOwnership = _out1887;
                readIdents = _5371_recIdents;
              }
            } else if (_source215.is_SetBuilder) {
              DAST._IType _5372___mcc_h1006 = _source215.dtor_element;
              {
                RAST._IExpr _5373_recursiveGen;
                DCOMP._IOwnership _5374_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5375_recIdents;
                RAST._IExpr _out1888;
                DCOMP._IOwnership _out1889;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1890;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1888, out _out1889, out _out1890);
                _5373_recursiveGen = _out1888;
                _5374_recOwned = _out1889;
                _5375_recIdents = _out1890;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5373_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1891;
                DCOMP._IOwnership _out1892;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1891, out _out1892);
                r = _out1891;
                resultingOwnership = _out1892;
                readIdents = _5375_recIdents;
              }
            } else if (_source215.is_MapBuilder) {
              DAST._IType _5376___mcc_h1008 = _source215.dtor_key;
              DAST._IType _5377___mcc_h1009 = _source215.dtor_value;
              {
                RAST._IExpr _5378_recursiveGen;
                DCOMP._IOwnership _5379_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5380_recIdents;
                RAST._IExpr _out1893;
                DCOMP._IOwnership _out1894;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1895;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1893, out _out1894, out _out1895);
                _5378_recursiveGen = _out1893;
                _5379_recOwned = _out1894;
                _5380_recIdents = _out1895;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5378_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1896;
                DCOMP._IOwnership _out1897;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1896, out _out1897);
                r = _out1896;
                resultingOwnership = _out1897;
                readIdents = _5380_recIdents;
              }
            } else if (_source215.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5381___mcc_h1012 = _source215.dtor_args;
              DAST._IType _5382___mcc_h1013 = _source215.dtor_result;
              {
                RAST._IExpr _5383_recursiveGen;
                DCOMP._IOwnership _5384_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5385_recIdents;
                RAST._IExpr _out1898;
                DCOMP._IOwnership _out1899;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1900;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1898, out _out1899, out _out1900);
                _5383_recursiveGen = _out1898;
                _5384_recOwned = _out1899;
                _5385_recIdents = _out1900;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5383_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1901;
                DCOMP._IOwnership _out1902;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1901, out _out1902);
                r = _out1901;
                resultingOwnership = _out1902;
                readIdents = _5385_recIdents;
              }
            } else if (_source215.is_Primitive) {
              DAST._IPrimitive _5386___mcc_h1016 = _source215.dtor_Primitive_a0;
              {
                RAST._IExpr _5387_recursiveGen;
                DCOMP._IOwnership _5388_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5389_recIdents;
                RAST._IExpr _out1903;
                DCOMP._IOwnership _out1904;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1905;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1903, out _out1904, out _out1905);
                _5387_recursiveGen = _out1903;
                _5388_recOwned = _out1904;
                _5389_recIdents = _out1905;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5387_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1906;
                DCOMP._IOwnership _out1907;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1906, out _out1907);
                r = _out1906;
                resultingOwnership = _out1907;
                readIdents = _5389_recIdents;
              }
            } else if (_source215.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5390___mcc_h1018 = _source215.dtor_Passthrough_a0;
              {
                RAST._IExpr _5391_recursiveGen;
                DCOMP._IOwnership _5392_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5393_recIdents;
                RAST._IExpr _out1908;
                DCOMP._IOwnership _out1909;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1910;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1908, out _out1909, out _out1910);
                _5391_recursiveGen = _out1908;
                _5392_recOwned = _out1909;
                _5393_recIdents = _out1910;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5391_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1911;
                DCOMP._IOwnership _out1912;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1911, out _out1912);
                r = _out1911;
                resultingOwnership = _out1912;
                readIdents = _5393_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5394___mcc_h1020 = _source215.dtor_TypeArg_a0;
              {
                RAST._IExpr _5395_recursiveGen;
                DCOMP._IOwnership _5396_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5397_recIdents;
                RAST._IExpr _out1913;
                DCOMP._IOwnership _out1914;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1915;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1913, out _out1914, out _out1915);
                _5395_recursiveGen = _out1913;
                _5396_recOwned = _out1914;
                _5397_recIdents = _out1915;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5395_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1916;
                DCOMP._IOwnership _out1917;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1916, out _out1917);
                r = _out1916;
                resultingOwnership = _out1917;
                readIdents = _5397_recIdents;
              }
            }
          } else if (_source202.is_Bool) {
            DAST._IType _source220 = _3302___mcc_h1;
            if (_source220.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5398___mcc_h1022 = _source220.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5399___mcc_h1023 = _source220.dtor_typeArgs;
              DAST._IResolvedType _5400___mcc_h1024 = _source220.dtor_resolved;
              DAST._IResolvedType _source221 = _5400___mcc_h1024;
              if (_source221.is_Datatype) {
                DAST._IDatatypeType _5401___mcc_h1028 = _source221.dtor_datatypeType;
                {
                  RAST._IExpr _5402_recursiveGen;
                  DCOMP._IOwnership _5403_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5404_recIdents;
                  RAST._IExpr _out1918;
                  DCOMP._IOwnership _out1919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1920;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1918, out _out1919, out _out1920);
                  _5402_recursiveGen = _out1918;
                  _5403_recOwned = _out1919;
                  _5404_recIdents = _out1920;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5402_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1921;
                  DCOMP._IOwnership _out1922;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1921, out _out1922);
                  r = _out1921;
                  resultingOwnership = _out1922;
                  readIdents = _5404_recIdents;
                }
              } else if (_source221.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5405___mcc_h1030 = _source221.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5406___mcc_h1031 = _source221.dtor_attributes;
                {
                  RAST._IExpr _5407_recursiveGen;
                  DCOMP._IOwnership _5408_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5409_recIdents;
                  RAST._IExpr _out1923;
                  DCOMP._IOwnership _out1924;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1925;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1923, out _out1924, out _out1925);
                  _5407_recursiveGen = _out1923;
                  _5408_recOwned = _out1924;
                  _5409_recIdents = _out1925;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5407_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1926;
                  DCOMP._IOwnership _out1927;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1926, out _out1927);
                  r = _out1926;
                  resultingOwnership = _out1927;
                  readIdents = _5409_recIdents;
                }
              } else {
                DAST._IType _5410___mcc_h1034 = _source221.dtor_baseType;
                DAST._INewtypeRange _5411___mcc_h1035 = _source221.dtor_range;
                bool _5412___mcc_h1036 = _source221.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5413___mcc_h1037 = _source221.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5414_attributes = _5413___mcc_h1037;
                bool _5415_erase = _5412___mcc_h1036;
                DAST._INewtypeRange _5416_range = _5411___mcc_h1035;
                DAST._IType _5417_b = _5410___mcc_h1034;
                {
                  Std.Wrappers._IOption<RAST._IType> _5418_nativeToType;
                  _5418_nativeToType = DCOMP.COMP.NewtypeToRustType(_5417_b, _5416_range);
                  if (object.Equals(_3296_fromTpe, _5417_b)) {
                    RAST._IExpr _5419_recursiveGen;
                    DCOMP._IOwnership _5420_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5421_recIdents;
                    RAST._IExpr _out1928;
                    DCOMP._IOwnership _out1929;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1930;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1928, out _out1929, out _out1930);
                    _5419_recursiveGen = _out1928;
                    _5420_recOwned = _out1929;
                    _5421_recIdents = _out1930;
                    readIdents = _5421_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source222 = _5418_nativeToType;
                    if (_source222.is_None) {
                      if (_5415_erase) {
                        r = _5419_recursiveGen;
                      } else {
                        RAST._IType _5422_rhsType;
                        RAST._IType _out1931;
                        _out1931 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                        _5422_rhsType = _out1931;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5422_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5419_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1932;
                      DCOMP._IOwnership _out1933;
                      DCOMP.COMP.FromOwnership(r, _5420_recOwned, expectedOwnership, out _out1932, out _out1933);
                      r = _out1932;
                      resultingOwnership = _out1933;
                    } else {
                      RAST._IType _5423___mcc_h2085 = _source222.dtor_value;
                      RAST._IType _5424_v = _5423___mcc_h2085;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5419_recursiveGen, RAST.Expr.create_ExprFromType(_5424_v)));
                      RAST._IExpr _out1934;
                      DCOMP._IOwnership _out1935;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1934, out _out1935);
                      r = _out1934;
                      resultingOwnership = _out1935;
                    }
                  } else {
                    if ((_5418_nativeToType).is_Some) {
                      DAST._IType _source223 = _3296_fromTpe;
                      if (_source223.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5425___mcc_h2086 = _source223.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5426___mcc_h2087 = _source223.dtor_typeArgs;
                        DAST._IResolvedType _5427___mcc_h2088 = _source223.dtor_resolved;
                        DAST._IResolvedType _source224 = _5427___mcc_h2088;
                        if (_source224.is_Datatype) {
                          DAST._IDatatypeType _5428___mcc_h2092 = _source224.dtor_datatypeType;
                        } else if (_source224.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5429___mcc_h2094 = _source224.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5430___mcc_h2095 = _source224.dtor_attributes;
                        } else {
                          DAST._IType _5431___mcc_h2098 = _source224.dtor_baseType;
                          DAST._INewtypeRange _5432___mcc_h2099 = _source224.dtor_range;
                          bool _5433___mcc_h2100 = _source224.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5434___mcc_h2101 = _source224.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5435_attributes0 = _5434___mcc_h2101;
                          bool _5436_erase0 = _5433___mcc_h2100;
                          DAST._INewtypeRange _5437_range0 = _5432___mcc_h2099;
                          DAST._IType _5438_b0 = _5431___mcc_h2098;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5439_nativeFromType;
                            _5439_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5438_b0, _5437_range0);
                            if ((_5439_nativeFromType).is_Some) {
                              RAST._IExpr _5440_recursiveGen;
                              DCOMP._IOwnership _5441_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5442_recIdents;
                              RAST._IExpr _out1936;
                              DCOMP._IOwnership _out1937;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1938;
                              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1936, out _out1937, out _out1938);
                              _5440_recursiveGen = _out1936;
                              _5441_recOwned = _out1937;
                              _5442_recIdents = _out1938;
                              RAST._IExpr _out1939;
                              DCOMP._IOwnership _out1940;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5440_recursiveGen, (_5418_nativeToType).dtor_value), _5441_recOwned, expectedOwnership, out _out1939, out _out1940);
                              r = _out1939;
                              resultingOwnership = _out1940;
                              readIdents = _5442_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source223.is_Nullable) {
                        DAST._IType _5443___mcc_h2106 = _source223.dtor_Nullable_a0;
                      } else if (_source223.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5444___mcc_h2108 = _source223.dtor_Tuple_a0;
                      } else if (_source223.is_Array) {
                        DAST._IType _5445___mcc_h2110 = _source223.dtor_element;
                        BigInteger _5446___mcc_h2111 = _source223.dtor_dims;
                      } else if (_source223.is_Seq) {
                        DAST._IType _5447___mcc_h2114 = _source223.dtor_element;
                      } else if (_source223.is_Set) {
                        DAST._IType _5448___mcc_h2116 = _source223.dtor_element;
                      } else if (_source223.is_Multiset) {
                        DAST._IType _5449___mcc_h2118 = _source223.dtor_element;
                      } else if (_source223.is_Map) {
                        DAST._IType _5450___mcc_h2120 = _source223.dtor_key;
                        DAST._IType _5451___mcc_h2121 = _source223.dtor_value;
                      } else if (_source223.is_SetBuilder) {
                        DAST._IType _5452___mcc_h2124 = _source223.dtor_element;
                      } else if (_source223.is_MapBuilder) {
                        DAST._IType _5453___mcc_h2126 = _source223.dtor_key;
                        DAST._IType _5454___mcc_h2127 = _source223.dtor_value;
                      } else if (_source223.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5455___mcc_h2130 = _source223.dtor_args;
                        DAST._IType _5456___mcc_h2131 = _source223.dtor_result;
                      } else if (_source223.is_Primitive) {
                        DAST._IPrimitive _5457___mcc_h2134 = _source223.dtor_Primitive_a0;
                      } else if (_source223.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5458___mcc_h2136 = _source223.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5459___mcc_h2138 = _source223.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5460_recursiveGen;
                        DCOMP._IOwnership _5461_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5462_recIdents;
                        RAST._IExpr _out1941;
                        DCOMP._IOwnership _out1942;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1943;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1941, out _out1942, out _out1943);
                        _5460_recursiveGen = _out1941;
                        _5461_recOwned = _out1942;
                        _5462_recIdents = _out1943;
                        RAST._IExpr _out1944;
                        DCOMP._IOwnership _out1945;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5460_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5418_nativeToType).dtor_value), _5461_recOwned, expectedOwnership, out _out1944, out _out1945);
                        r = _out1944;
                        resultingOwnership = _out1945;
                        readIdents = _5462_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out1946;
                    DCOMP._IOwnership _out1947;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1948;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _5417_b), _5417_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out1946, out _out1947, out _out1948);
                    r = _out1946;
                    resultingOwnership = _out1947;
                    readIdents = _out1948;
                  }
                }
              }
            } else if (_source220.is_Nullable) {
              DAST._IType _5463___mcc_h1042 = _source220.dtor_Nullable_a0;
              {
                RAST._IExpr _5464_recursiveGen;
                DCOMP._IOwnership _5465_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5466_recIdents;
                RAST._IExpr _out1949;
                DCOMP._IOwnership _out1950;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1951;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1949, out _out1950, out _out1951);
                _5464_recursiveGen = _out1949;
                _5465_recOwned = _out1950;
                _5466_recIdents = _out1951;
                r = _5464_recursiveGen;
                if (object.Equals(_5465_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1952;
                DCOMP._IOwnership _out1953;
                DCOMP.COMP.FromOwnership(r, _5465_recOwned, expectedOwnership, out _out1952, out _out1953);
                r = _out1952;
                resultingOwnership = _out1953;
                readIdents = _5466_recIdents;
              }
            } else if (_source220.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5467___mcc_h1044 = _source220.dtor_Tuple_a0;
              {
                RAST._IExpr _5468_recursiveGen;
                DCOMP._IOwnership _5469_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5470_recIdents;
                RAST._IExpr _out1954;
                DCOMP._IOwnership _out1955;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1956;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1954, out _out1955, out _out1956);
                _5468_recursiveGen = _out1954;
                _5469_recOwned = _out1955;
                _5470_recIdents = _out1956;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5468_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1957;
                DCOMP._IOwnership _out1958;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1957, out _out1958);
                r = _out1957;
                resultingOwnership = _out1958;
                readIdents = _5470_recIdents;
              }
            } else if (_source220.is_Array) {
              DAST._IType _5471___mcc_h1046 = _source220.dtor_element;
              BigInteger _5472___mcc_h1047 = _source220.dtor_dims;
              {
                RAST._IExpr _5473_recursiveGen;
                DCOMP._IOwnership _5474_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5475_recIdents;
                RAST._IExpr _out1959;
                DCOMP._IOwnership _out1960;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1961;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1959, out _out1960, out _out1961);
                _5473_recursiveGen = _out1959;
                _5474_recOwned = _out1960;
                _5475_recIdents = _out1961;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5473_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1962;
                DCOMP._IOwnership _out1963;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1962, out _out1963);
                r = _out1962;
                resultingOwnership = _out1963;
                readIdents = _5475_recIdents;
              }
            } else if (_source220.is_Seq) {
              DAST._IType _5476___mcc_h1050 = _source220.dtor_element;
              {
                RAST._IExpr _5477_recursiveGen;
                DCOMP._IOwnership _5478_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5479_recIdents;
                RAST._IExpr _out1964;
                DCOMP._IOwnership _out1965;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1966;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1964, out _out1965, out _out1966);
                _5477_recursiveGen = _out1964;
                _5478_recOwned = _out1965;
                _5479_recIdents = _out1966;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5477_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1967;
                DCOMP._IOwnership _out1968;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1967, out _out1968);
                r = _out1967;
                resultingOwnership = _out1968;
                readIdents = _5479_recIdents;
              }
            } else if (_source220.is_Set) {
              DAST._IType _5480___mcc_h1052 = _source220.dtor_element;
              {
                RAST._IExpr _5481_recursiveGen;
                DCOMP._IOwnership _5482_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5483_recIdents;
                RAST._IExpr _out1969;
                DCOMP._IOwnership _out1970;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1971;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1969, out _out1970, out _out1971);
                _5481_recursiveGen = _out1969;
                _5482_recOwned = _out1970;
                _5483_recIdents = _out1971;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5481_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1972;
                DCOMP._IOwnership _out1973;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1972, out _out1973);
                r = _out1972;
                resultingOwnership = _out1973;
                readIdents = _5483_recIdents;
              }
            } else if (_source220.is_Multiset) {
              DAST._IType _5484___mcc_h1054 = _source220.dtor_element;
              {
                RAST._IExpr _5485_recursiveGen;
                DCOMP._IOwnership _5486_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5487_recIdents;
                RAST._IExpr _out1974;
                DCOMP._IOwnership _out1975;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1976;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1974, out _out1975, out _out1976);
                _5485_recursiveGen = _out1974;
                _5486_recOwned = _out1975;
                _5487_recIdents = _out1976;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5485_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1977;
                DCOMP._IOwnership _out1978;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1977, out _out1978);
                r = _out1977;
                resultingOwnership = _out1978;
                readIdents = _5487_recIdents;
              }
            } else if (_source220.is_Map) {
              DAST._IType _5488___mcc_h1056 = _source220.dtor_key;
              DAST._IType _5489___mcc_h1057 = _source220.dtor_value;
              {
                RAST._IExpr _5490_recursiveGen;
                DCOMP._IOwnership _5491_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5492_recIdents;
                RAST._IExpr _out1979;
                DCOMP._IOwnership _out1980;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1981;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1979, out _out1980, out _out1981);
                _5490_recursiveGen = _out1979;
                _5491_recOwned = _out1980;
                _5492_recIdents = _out1981;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5490_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1982;
                DCOMP._IOwnership _out1983;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1982, out _out1983);
                r = _out1982;
                resultingOwnership = _out1983;
                readIdents = _5492_recIdents;
              }
            } else if (_source220.is_SetBuilder) {
              DAST._IType _5493___mcc_h1060 = _source220.dtor_element;
              {
                RAST._IExpr _5494_recursiveGen;
                DCOMP._IOwnership _5495_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5496_recIdents;
                RAST._IExpr _out1984;
                DCOMP._IOwnership _out1985;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1986;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1984, out _out1985, out _out1986);
                _5494_recursiveGen = _out1984;
                _5495_recOwned = _out1985;
                _5496_recIdents = _out1986;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5494_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1987;
                DCOMP._IOwnership _out1988;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1987, out _out1988);
                r = _out1987;
                resultingOwnership = _out1988;
                readIdents = _5496_recIdents;
              }
            } else if (_source220.is_MapBuilder) {
              DAST._IType _5497___mcc_h1062 = _source220.dtor_key;
              DAST._IType _5498___mcc_h1063 = _source220.dtor_value;
              {
                RAST._IExpr _5499_recursiveGen;
                DCOMP._IOwnership _5500_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5501_recIdents;
                RAST._IExpr _out1989;
                DCOMP._IOwnership _out1990;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1991;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1989, out _out1990, out _out1991);
                _5499_recursiveGen = _out1989;
                _5500_recOwned = _out1990;
                _5501_recIdents = _out1991;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5499_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1992;
                DCOMP._IOwnership _out1993;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1992, out _out1993);
                r = _out1992;
                resultingOwnership = _out1993;
                readIdents = _5501_recIdents;
              }
            } else if (_source220.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5502___mcc_h1066 = _source220.dtor_args;
              DAST._IType _5503___mcc_h1067 = _source220.dtor_result;
              {
                RAST._IExpr _5504_recursiveGen;
                DCOMP._IOwnership _5505_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5506_recIdents;
                RAST._IExpr _out1994;
                DCOMP._IOwnership _out1995;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1996;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1994, out _out1995, out _out1996);
                _5504_recursiveGen = _out1994;
                _5505_recOwned = _out1995;
                _5506_recIdents = _out1996;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5504_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1997;
                DCOMP._IOwnership _out1998;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1997, out _out1998);
                r = _out1997;
                resultingOwnership = _out1998;
                readIdents = _5506_recIdents;
              }
            } else if (_source220.is_Primitive) {
              DAST._IPrimitive _5507___mcc_h1070 = _source220.dtor_Primitive_a0;
              {
                RAST._IExpr _5508_recursiveGen;
                DCOMP._IOwnership _5509_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5510_recIdents;
                RAST._IExpr _out1999;
                DCOMP._IOwnership _out2000;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2001;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out1999, out _out2000, out _out2001);
                _5508_recursiveGen = _out1999;
                _5509_recOwned = _out2000;
                _5510_recIdents = _out2001;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5508_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2002;
                DCOMP._IOwnership _out2003;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2002, out _out2003);
                r = _out2002;
                resultingOwnership = _out2003;
                readIdents = _5510_recIdents;
              }
            } else if (_source220.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5511___mcc_h1072 = _source220.dtor_Passthrough_a0;
              {
                RAST._IExpr _5512_recursiveGen;
                DCOMP._IOwnership _5513_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5514_recIdents;
                RAST._IExpr _out2004;
                DCOMP._IOwnership _out2005;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2006;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2004, out _out2005, out _out2006);
                _5512_recursiveGen = _out2004;
                _5513_recOwned = _out2005;
                _5514_recIdents = _out2006;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5512_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2007;
                DCOMP._IOwnership _out2008;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2007, out _out2008);
                r = _out2007;
                resultingOwnership = _out2008;
                readIdents = _5514_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5515___mcc_h1074 = _source220.dtor_TypeArg_a0;
              {
                RAST._IExpr _5516_recursiveGen;
                DCOMP._IOwnership _5517_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5518_recIdents;
                RAST._IExpr _out2009;
                DCOMP._IOwnership _out2010;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2011;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2009, out _out2010, out _out2011);
                _5516_recursiveGen = _out2009;
                _5517_recOwned = _out2010;
                _5518_recIdents = _out2011;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5516_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2012;
                DCOMP._IOwnership _out2013;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2012, out _out2013);
                r = _out2012;
                resultingOwnership = _out2013;
                readIdents = _5518_recIdents;
              }
            }
          } else {
            DAST._IType _source225 = _3302___mcc_h1;
            if (_source225.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5519___mcc_h1076 = _source225.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _5520___mcc_h1077 = _source225.dtor_typeArgs;
              DAST._IResolvedType _5521___mcc_h1078 = _source225.dtor_resolved;
              DAST._IResolvedType _source226 = _5521___mcc_h1078;
              if (_source226.is_Datatype) {
                DAST._IDatatypeType _5522___mcc_h1082 = _source226.dtor_datatypeType;
                {
                  RAST._IExpr _5523_recursiveGen;
                  DCOMP._IOwnership _5524_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5525_recIdents;
                  RAST._IExpr _out2014;
                  DCOMP._IOwnership _out2015;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2016;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2014, out _out2015, out _out2016);
                  _5523_recursiveGen = _out2014;
                  _5524_recOwned = _out2015;
                  _5525_recIdents = _out2016;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5523_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2017;
                  DCOMP._IOwnership _out2018;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2017, out _out2018);
                  r = _out2017;
                  resultingOwnership = _out2018;
                  readIdents = _5525_recIdents;
                }
              } else if (_source226.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5526___mcc_h1084 = _source226.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _5527___mcc_h1085 = _source226.dtor_attributes;
                {
                  RAST._IExpr _5528_recursiveGen;
                  DCOMP._IOwnership _5529_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5530_recIdents;
                  RAST._IExpr _out2019;
                  DCOMP._IOwnership _out2020;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2021;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2019, out _out2020, out _out2021);
                  _5528_recursiveGen = _out2019;
                  _5529_recOwned = _out2020;
                  _5530_recIdents = _out2021;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5528_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2022;
                  DCOMP._IOwnership _out2023;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2022, out _out2023);
                  r = _out2022;
                  resultingOwnership = _out2023;
                  readIdents = _5530_recIdents;
                }
              } else {
                DAST._IType _5531___mcc_h1088 = _source226.dtor_baseType;
                DAST._INewtypeRange _5532___mcc_h1089 = _source226.dtor_range;
                bool _5533___mcc_h1090 = _source226.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _5534___mcc_h1091 = _source226.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _5535_attributes = _5534___mcc_h1091;
                bool _5536_erase = _5533___mcc_h1090;
                DAST._INewtypeRange _5537_range = _5532___mcc_h1089;
                DAST._IType _5538_b = _5531___mcc_h1088;
                {
                  Std.Wrappers._IOption<RAST._IType> _5539_nativeToType;
                  _5539_nativeToType = DCOMP.COMP.NewtypeToRustType(_5538_b, _5537_range);
                  if (object.Equals(_3296_fromTpe, _5538_b)) {
                    RAST._IExpr _5540_recursiveGen;
                    DCOMP._IOwnership _5541_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5542_recIdents;
                    RAST._IExpr _out2024;
                    DCOMP._IOwnership _out2025;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2026;
                    DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2024, out _out2025, out _out2026);
                    _5540_recursiveGen = _out2024;
                    _5541_recOwned = _out2025;
                    _5542_recIdents = _out2026;
                    readIdents = _5542_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source227 = _5539_nativeToType;
                    if (_source227.is_None) {
                      if (_5536_erase) {
                        r = _5540_recursiveGen;
                      } else {
                        RAST._IType _5543_rhsType;
                        RAST._IType _out2027;
                        _out2027 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                        _5543_rhsType = _out2027;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5543_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2028;
                      DCOMP._IOwnership _out2029;
                      DCOMP.COMP.FromOwnership(r, _5541_recOwned, expectedOwnership, out _out2028, out _out2029);
                      r = _out2028;
                      resultingOwnership = _out2029;
                    } else {
                      RAST._IType _5544___mcc_h2140 = _source227.dtor_value;
                      RAST._IType _5545_v = _5544___mcc_h2140;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5540_recursiveGen, RAST.Expr.create_ExprFromType(_5545_v)));
                      RAST._IExpr _out2030;
                      DCOMP._IOwnership _out2031;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2030, out _out2031);
                      r = _out2030;
                      resultingOwnership = _out2031;
                    }
                  } else {
                    if ((_5539_nativeToType).is_Some) {
                      DAST._IType _source228 = _3296_fromTpe;
                      if (_source228.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5546___mcc_h2141 = _source228.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _5547___mcc_h2142 = _source228.dtor_typeArgs;
                        DAST._IResolvedType _5548___mcc_h2143 = _source228.dtor_resolved;
                        DAST._IResolvedType _source229 = _5548___mcc_h2143;
                        if (_source229.is_Datatype) {
                          DAST._IDatatypeType _5549___mcc_h2147 = _source229.dtor_datatypeType;
                        } else if (_source229.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5550___mcc_h2149 = _source229.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _5551___mcc_h2150 = _source229.dtor_attributes;
                        } else {
                          DAST._IType _5552___mcc_h2153 = _source229.dtor_baseType;
                          DAST._INewtypeRange _5553___mcc_h2154 = _source229.dtor_range;
                          bool _5554___mcc_h2155 = _source229.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _5555___mcc_h2156 = _source229.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _5556_attributes0 = _5555___mcc_h2156;
                          bool _5557_erase0 = _5554___mcc_h2155;
                          DAST._INewtypeRange _5558_range0 = _5553___mcc_h2154;
                          DAST._IType _5559_b0 = _5552___mcc_h2153;
                          {
                            Std.Wrappers._IOption<RAST._IType> _5560_nativeFromType;
                            _5560_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5559_b0, _5558_range0);
                            if ((_5560_nativeFromType).is_Some) {
                              RAST._IExpr _5561_recursiveGen;
                              DCOMP._IOwnership _5562_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5563_recIdents;
                              RAST._IExpr _out2032;
                              DCOMP._IOwnership _out2033;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2034;
                              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2032, out _out2033, out _out2034);
                              _5561_recursiveGen = _out2032;
                              _5562_recOwned = _out2033;
                              _5563_recIdents = _out2034;
                              RAST._IExpr _out2035;
                              DCOMP._IOwnership _out2036;
                              DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5561_recursiveGen, (_5539_nativeToType).dtor_value), _5562_recOwned, expectedOwnership, out _out2035, out _out2036);
                              r = _out2035;
                              resultingOwnership = _out2036;
                              readIdents = _5563_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source228.is_Nullable) {
                        DAST._IType _5564___mcc_h2161 = _source228.dtor_Nullable_a0;
                      } else if (_source228.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _5565___mcc_h2163 = _source228.dtor_Tuple_a0;
                      } else if (_source228.is_Array) {
                        DAST._IType _5566___mcc_h2165 = _source228.dtor_element;
                        BigInteger _5567___mcc_h2166 = _source228.dtor_dims;
                      } else if (_source228.is_Seq) {
                        DAST._IType _5568___mcc_h2169 = _source228.dtor_element;
                      } else if (_source228.is_Set) {
                        DAST._IType _5569___mcc_h2171 = _source228.dtor_element;
                      } else if (_source228.is_Multiset) {
                        DAST._IType _5570___mcc_h2173 = _source228.dtor_element;
                      } else if (_source228.is_Map) {
                        DAST._IType _5571___mcc_h2175 = _source228.dtor_key;
                        DAST._IType _5572___mcc_h2176 = _source228.dtor_value;
                      } else if (_source228.is_SetBuilder) {
                        DAST._IType _5573___mcc_h2179 = _source228.dtor_element;
                      } else if (_source228.is_MapBuilder) {
                        DAST._IType _5574___mcc_h2181 = _source228.dtor_key;
                        DAST._IType _5575___mcc_h2182 = _source228.dtor_value;
                      } else if (_source228.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _5576___mcc_h2185 = _source228.dtor_args;
                        DAST._IType _5577___mcc_h2186 = _source228.dtor_result;
                      } else if (_source228.is_Primitive) {
                        DAST._IPrimitive _5578___mcc_h2189 = _source228.dtor_Primitive_a0;
                      } else if (_source228.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _5579___mcc_h2191 = _source228.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _5580___mcc_h2193 = _source228.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _5581_recursiveGen;
                        DCOMP._IOwnership _5582_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5583_recIdents;
                        RAST._IExpr _out2037;
                        DCOMP._IOwnership _out2038;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2039;
                        DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2037, out _out2038, out _out2039);
                        _5581_recursiveGen = _out2037;
                        _5582_recOwned = _out2038;
                        _5583_recIdents = _out2039;
                        RAST._IExpr _out2040;
                        DCOMP._IOwnership _out2041;
                        DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5581_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5539_nativeToType).dtor_value), _5582_recOwned, expectedOwnership, out _out2040, out _out2041);
                        r = _out2040;
                        resultingOwnership = _out2041;
                        readIdents = _5583_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out2042;
                    DCOMP._IOwnership _out2043;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2044;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _5538_b), _5538_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out2042, out _out2043, out _out2044);
                    r = _out2042;
                    resultingOwnership = _out2043;
                    readIdents = _out2044;
                  }
                }
              }
            } else if (_source225.is_Nullable) {
              DAST._IType _5584___mcc_h1096 = _source225.dtor_Nullable_a0;
              {
                RAST._IExpr _5585_recursiveGen;
                DCOMP._IOwnership _5586_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5587_recIdents;
                RAST._IExpr _out2045;
                DCOMP._IOwnership _out2046;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2047;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2045, out _out2046, out _out2047);
                _5585_recursiveGen = _out2045;
                _5586_recOwned = _out2046;
                _5587_recIdents = _out2047;
                r = _5585_recursiveGen;
                if (object.Equals(_5586_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out2048;
                DCOMP._IOwnership _out2049;
                DCOMP.COMP.FromOwnership(r, _5586_recOwned, expectedOwnership, out _out2048, out _out2049);
                r = _out2048;
                resultingOwnership = _out2049;
                readIdents = _5587_recIdents;
              }
            } else if (_source225.is_Tuple) {
              Dafny.ISequence<DAST._IType> _5588___mcc_h1098 = _source225.dtor_Tuple_a0;
              {
                RAST._IExpr _5589_recursiveGen;
                DCOMP._IOwnership _5590_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5591_recIdents;
                RAST._IExpr _out2050;
                DCOMP._IOwnership _out2051;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2052;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2050, out _out2051, out _out2052);
                _5589_recursiveGen = _out2050;
                _5590_recOwned = _out2051;
                _5591_recIdents = _out2052;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5589_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2053;
                DCOMP._IOwnership _out2054;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2053, out _out2054);
                r = _out2053;
                resultingOwnership = _out2054;
                readIdents = _5591_recIdents;
              }
            } else if (_source225.is_Array) {
              DAST._IType _5592___mcc_h1100 = _source225.dtor_element;
              BigInteger _5593___mcc_h1101 = _source225.dtor_dims;
              {
                RAST._IExpr _5594_recursiveGen;
                DCOMP._IOwnership _5595_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5596_recIdents;
                RAST._IExpr _out2055;
                DCOMP._IOwnership _out2056;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2057;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2055, out _out2056, out _out2057);
                _5594_recursiveGen = _out2055;
                _5595_recOwned = _out2056;
                _5596_recIdents = _out2057;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5594_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2058;
                DCOMP._IOwnership _out2059;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2058, out _out2059);
                r = _out2058;
                resultingOwnership = _out2059;
                readIdents = _5596_recIdents;
              }
            } else if (_source225.is_Seq) {
              DAST._IType _5597___mcc_h1104 = _source225.dtor_element;
              {
                RAST._IExpr _5598_recursiveGen;
                DCOMP._IOwnership _5599_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5600_recIdents;
                RAST._IExpr _out2060;
                DCOMP._IOwnership _out2061;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2062;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2060, out _out2061, out _out2062);
                _5598_recursiveGen = _out2060;
                _5599_recOwned = _out2061;
                _5600_recIdents = _out2062;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5598_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2063;
                DCOMP._IOwnership _out2064;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2063, out _out2064);
                r = _out2063;
                resultingOwnership = _out2064;
                readIdents = _5600_recIdents;
              }
            } else if (_source225.is_Set) {
              DAST._IType _5601___mcc_h1106 = _source225.dtor_element;
              {
                RAST._IExpr _5602_recursiveGen;
                DCOMP._IOwnership _5603_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5604_recIdents;
                RAST._IExpr _out2065;
                DCOMP._IOwnership _out2066;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2067;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2065, out _out2066, out _out2067);
                _5602_recursiveGen = _out2065;
                _5603_recOwned = _out2066;
                _5604_recIdents = _out2067;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5602_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2068;
                DCOMP._IOwnership _out2069;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2068, out _out2069);
                r = _out2068;
                resultingOwnership = _out2069;
                readIdents = _5604_recIdents;
              }
            } else if (_source225.is_Multiset) {
              DAST._IType _5605___mcc_h1108 = _source225.dtor_element;
              {
                RAST._IExpr _5606_recursiveGen;
                DCOMP._IOwnership _5607_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5608_recIdents;
                RAST._IExpr _out2070;
                DCOMP._IOwnership _out2071;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2072;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2070, out _out2071, out _out2072);
                _5606_recursiveGen = _out2070;
                _5607_recOwned = _out2071;
                _5608_recIdents = _out2072;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5606_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2073;
                DCOMP._IOwnership _out2074;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2073, out _out2074);
                r = _out2073;
                resultingOwnership = _out2074;
                readIdents = _5608_recIdents;
              }
            } else if (_source225.is_Map) {
              DAST._IType _5609___mcc_h1110 = _source225.dtor_key;
              DAST._IType _5610___mcc_h1111 = _source225.dtor_value;
              {
                RAST._IExpr _5611_recursiveGen;
                DCOMP._IOwnership _5612_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5613_recIdents;
                RAST._IExpr _out2075;
                DCOMP._IOwnership _out2076;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2077;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2075, out _out2076, out _out2077);
                _5611_recursiveGen = _out2075;
                _5612_recOwned = _out2076;
                _5613_recIdents = _out2077;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5611_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2078;
                DCOMP._IOwnership _out2079;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2078, out _out2079);
                r = _out2078;
                resultingOwnership = _out2079;
                readIdents = _5613_recIdents;
              }
            } else if (_source225.is_SetBuilder) {
              DAST._IType _5614___mcc_h1114 = _source225.dtor_element;
              {
                RAST._IExpr _5615_recursiveGen;
                DCOMP._IOwnership _5616_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5617_recIdents;
                RAST._IExpr _out2080;
                DCOMP._IOwnership _out2081;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2082;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2080, out _out2081, out _out2082);
                _5615_recursiveGen = _out2080;
                _5616_recOwned = _out2081;
                _5617_recIdents = _out2082;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5615_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2083;
                DCOMP._IOwnership _out2084;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2083, out _out2084);
                r = _out2083;
                resultingOwnership = _out2084;
                readIdents = _5617_recIdents;
              }
            } else if (_source225.is_MapBuilder) {
              DAST._IType _5618___mcc_h1116 = _source225.dtor_key;
              DAST._IType _5619___mcc_h1117 = _source225.dtor_value;
              {
                RAST._IExpr _5620_recursiveGen;
                DCOMP._IOwnership _5621_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5622_recIdents;
                RAST._IExpr _out2085;
                DCOMP._IOwnership _out2086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2087;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2085, out _out2086, out _out2087);
                _5620_recursiveGen = _out2085;
                _5621_recOwned = _out2086;
                _5622_recIdents = _out2087;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5620_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2088;
                DCOMP._IOwnership _out2089;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2088, out _out2089);
                r = _out2088;
                resultingOwnership = _out2089;
                readIdents = _5622_recIdents;
              }
            } else if (_source225.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5623___mcc_h1120 = _source225.dtor_args;
              DAST._IType _5624___mcc_h1121 = _source225.dtor_result;
              {
                RAST._IExpr _5625_recursiveGen;
                DCOMP._IOwnership _5626_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5627_recIdents;
                RAST._IExpr _out2090;
                DCOMP._IOwnership _out2091;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2092;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2090, out _out2091, out _out2092);
                _5625_recursiveGen = _out2090;
                _5626_recOwned = _out2091;
                _5627_recIdents = _out2092;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5625_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2093;
                DCOMP._IOwnership _out2094;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2093, out _out2094);
                r = _out2093;
                resultingOwnership = _out2094;
                readIdents = _5627_recIdents;
              }
            } else if (_source225.is_Primitive) {
              DAST._IPrimitive _5628___mcc_h1124 = _source225.dtor_Primitive_a0;
              DAST._IPrimitive _source230 = _5628___mcc_h1124;
              if (_source230.is_Int) {
                {
                  RAST._IType _5629_rhsType;
                  RAST._IType _out2095;
                  _out2095 = DCOMP.COMP.GenType(_3296_fromTpe, true, false);
                  _5629_rhsType = _out2095;
                  RAST._IExpr _5630_recursiveGen;
                  DCOMP._IOwnership _5631___v89;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5632_recIdents;
                  RAST._IExpr _out2096;
                  DCOMP._IOwnership _out2097;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2098;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2096, out _out2097, out _out2098);
                  _5630_recursiveGen = _out2096;
                  _5631___v89 = _out2097;
                  _5632_recIdents = _out2098;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_5630_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out2099;
                  DCOMP._IOwnership _out2100;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2099, out _out2100);
                  r = _out2099;
                  resultingOwnership = _out2100;
                  readIdents = _5632_recIdents;
                }
              } else if (_source230.is_Real) {
                {
                  RAST._IExpr _5633_recursiveGen;
                  DCOMP._IOwnership _5634_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5635_recIdents;
                  RAST._IExpr _out2101;
                  DCOMP._IOwnership _out2102;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2103;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2101, out _out2102, out _out2103);
                  _5633_recursiveGen = _out2101;
                  _5634_recOwned = _out2102;
                  _5635_recIdents = _out2103;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5633_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2104;
                  DCOMP._IOwnership _out2105;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2104, out _out2105);
                  r = _out2104;
                  resultingOwnership = _out2105;
                  readIdents = _5635_recIdents;
                }
              } else if (_source230.is_String) {
                {
                  RAST._IExpr _5636_recursiveGen;
                  DCOMP._IOwnership _5637_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5638_recIdents;
                  RAST._IExpr _out2106;
                  DCOMP._IOwnership _out2107;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2108;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2106, out _out2107, out _out2108);
                  _5636_recursiveGen = _out2106;
                  _5637_recOwned = _out2107;
                  _5638_recIdents = _out2108;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5636_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2109;
                  DCOMP._IOwnership _out2110;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2109, out _out2110);
                  r = _out2109;
                  resultingOwnership = _out2110;
                  readIdents = _5638_recIdents;
                }
              } else if (_source230.is_Bool) {
                {
                  RAST._IExpr _5639_recursiveGen;
                  DCOMP._IOwnership _5640_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5641_recIdents;
                  RAST._IExpr _out2111;
                  DCOMP._IOwnership _out2112;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2113;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2111, out _out2112, out _out2113);
                  _5639_recursiveGen = _out2111;
                  _5640_recOwned = _out2112;
                  _5641_recIdents = _out2113;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5639_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2114;
                  DCOMP._IOwnership _out2115;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2114, out _out2115);
                  r = _out2114;
                  resultingOwnership = _out2115;
                  readIdents = _5641_recIdents;
                }
              } else {
                {
                  RAST._IExpr _5642_recursiveGen;
                  DCOMP._IOwnership _5643_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5644_recIdents;
                  RAST._IExpr _out2116;
                  DCOMP._IOwnership _out2117;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2118;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2116, out _out2117, out _out2118);
                  _5642_recursiveGen = _out2116;
                  _5643_recOwned = _out2117;
                  _5644_recIdents = _out2118;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5642_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2119;
                  DCOMP._IOwnership _out2120;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2119, out _out2120);
                  r = _out2119;
                  resultingOwnership = _out2120;
                  readIdents = _5644_recIdents;
                }
              }
            } else if (_source225.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5645___mcc_h1126 = _source225.dtor_Passthrough_a0;
              {
                RAST._IExpr _5646_recursiveGen;
                DCOMP._IOwnership _5647_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5648_recIdents;
                RAST._IExpr _out2121;
                DCOMP._IOwnership _out2122;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2123;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2121, out _out2122, out _out2123);
                _5646_recursiveGen = _out2121;
                _5647_recOwned = _out2122;
                _5648_recIdents = _out2123;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5646_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2124;
                DCOMP._IOwnership _out2125;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2124, out _out2125);
                r = _out2124;
                resultingOwnership = _out2125;
                readIdents = _5648_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5649___mcc_h1128 = _source225.dtor_TypeArg_a0;
              {
                RAST._IExpr _5650_recursiveGen;
                DCOMP._IOwnership _5651_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5652_recIdents;
                RAST._IExpr _out2126;
                DCOMP._IOwnership _out2127;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2128;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2126, out _out2127, out _out2128);
                _5650_recursiveGen = _out2126;
                _5651_recOwned = _out2127;
                _5652_recIdents = _out2128;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5650_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2129;
                DCOMP._IOwnership _out2130;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2129, out _out2130);
                r = _out2129;
                resultingOwnership = _out2130;
                readIdents = _5652_recIdents;
              }
            }
          }
        } else if (_source124.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _5653___mcc_h1130 = _source124.dtor_Passthrough_a0;
          DAST._IType _source231 = _3302___mcc_h1;
          if (_source231.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5654___mcc_h1134 = _source231.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5655___mcc_h1135 = _source231.dtor_typeArgs;
            DAST._IResolvedType _5656___mcc_h1136 = _source231.dtor_resolved;
            DAST._IResolvedType _source232 = _5656___mcc_h1136;
            if (_source232.is_Datatype) {
              DAST._IDatatypeType _5657___mcc_h1140 = _source232.dtor_datatypeType;
              {
                RAST._IExpr _5658_recursiveGen;
                DCOMP._IOwnership _5659_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5660_recIdents;
                RAST._IExpr _out2131;
                DCOMP._IOwnership _out2132;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2133;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2131, out _out2132, out _out2133);
                _5658_recursiveGen = _out2131;
                _5659_recOwned = _out2132;
                _5660_recIdents = _out2133;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5658_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2134;
                DCOMP._IOwnership _out2135;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2134, out _out2135);
                r = _out2134;
                resultingOwnership = _out2135;
                readIdents = _5660_recIdents;
              }
            } else if (_source232.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5661___mcc_h1142 = _source232.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _5662___mcc_h1143 = _source232.dtor_attributes;
              {
                RAST._IExpr _5663_recursiveGen;
                DCOMP._IOwnership _5664_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5665_recIdents;
                RAST._IExpr _out2136;
                DCOMP._IOwnership _out2137;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2138;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2136, out _out2137, out _out2138);
                _5663_recursiveGen = _out2136;
                _5664_recOwned = _out2137;
                _5665_recIdents = _out2138;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5663_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2139;
                DCOMP._IOwnership _out2140;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2139, out _out2140);
                r = _out2139;
                resultingOwnership = _out2140;
                readIdents = _5665_recIdents;
              }
            } else {
              DAST._IType _5666___mcc_h1146 = _source232.dtor_baseType;
              DAST._INewtypeRange _5667___mcc_h1147 = _source232.dtor_range;
              bool _5668___mcc_h1148 = _source232.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _5669___mcc_h1149 = _source232.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _5670_attributes = _5669___mcc_h1149;
              bool _5671_erase = _5668___mcc_h1148;
              DAST._INewtypeRange _5672_range = _5667___mcc_h1147;
              DAST._IType _5673_b = _5666___mcc_h1146;
              {
                Std.Wrappers._IOption<RAST._IType> _5674_nativeToType;
                _5674_nativeToType = DCOMP.COMP.NewtypeToRustType(_5673_b, _5672_range);
                if (object.Equals(_3296_fromTpe, _5673_b)) {
                  RAST._IExpr _5675_recursiveGen;
                  DCOMP._IOwnership _5676_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5677_recIdents;
                  RAST._IExpr _out2141;
                  DCOMP._IOwnership _out2142;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2143;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2141, out _out2142, out _out2143);
                  _5675_recursiveGen = _out2141;
                  _5676_recOwned = _out2142;
                  _5677_recIdents = _out2143;
                  readIdents = _5677_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source233 = _5674_nativeToType;
                  if (_source233.is_None) {
                    if (_5671_erase) {
                      r = _5675_recursiveGen;
                    } else {
                      RAST._IType _5678_rhsType;
                      RAST._IType _out2144;
                      _out2144 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _5678_rhsType = _out2144;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5678_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5675_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out2145;
                    DCOMP._IOwnership _out2146;
                    DCOMP.COMP.FromOwnership(r, _5676_recOwned, expectedOwnership, out _out2145, out _out2146);
                    r = _out2145;
                    resultingOwnership = _out2146;
                  } else {
                    RAST._IType _5679___mcc_h2195 = _source233.dtor_value;
                    RAST._IType _5680_v = _5679___mcc_h2195;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5675_recursiveGen, RAST.Expr.create_ExprFromType(_5680_v)));
                    RAST._IExpr _out2147;
                    DCOMP._IOwnership _out2148;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2147, out _out2148);
                    r = _out2147;
                    resultingOwnership = _out2148;
                  }
                } else {
                  if ((_5674_nativeToType).is_Some) {
                    DAST._IType _source234 = _3296_fromTpe;
                    if (_source234.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5681___mcc_h2196 = _source234.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _5682___mcc_h2197 = _source234.dtor_typeArgs;
                      DAST._IResolvedType _5683___mcc_h2198 = _source234.dtor_resolved;
                      DAST._IResolvedType _source235 = _5683___mcc_h2198;
                      if (_source235.is_Datatype) {
                        DAST._IDatatypeType _5684___mcc_h2202 = _source235.dtor_datatypeType;
                      } else if (_source235.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5685___mcc_h2204 = _source235.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _5686___mcc_h2205 = _source235.dtor_attributes;
                      } else {
                        DAST._IType _5687___mcc_h2208 = _source235.dtor_baseType;
                        DAST._INewtypeRange _5688___mcc_h2209 = _source235.dtor_range;
                        bool _5689___mcc_h2210 = _source235.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _5690___mcc_h2211 = _source235.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _5691_attributes0 = _5690___mcc_h2211;
                        bool _5692_erase0 = _5689___mcc_h2210;
                        DAST._INewtypeRange _5693_range0 = _5688___mcc_h2209;
                        DAST._IType _5694_b0 = _5687___mcc_h2208;
                        {
                          Std.Wrappers._IOption<RAST._IType> _5695_nativeFromType;
                          _5695_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5694_b0, _5693_range0);
                          if ((_5695_nativeFromType).is_Some) {
                            RAST._IExpr _5696_recursiveGen;
                            DCOMP._IOwnership _5697_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5698_recIdents;
                            RAST._IExpr _out2149;
                            DCOMP._IOwnership _out2150;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2151;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2149, out _out2150, out _out2151);
                            _5696_recursiveGen = _out2149;
                            _5697_recOwned = _out2150;
                            _5698_recIdents = _out2151;
                            RAST._IExpr _out2152;
                            DCOMP._IOwnership _out2153;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5696_recursiveGen, (_5674_nativeToType).dtor_value), _5697_recOwned, expectedOwnership, out _out2152, out _out2153);
                            r = _out2152;
                            resultingOwnership = _out2153;
                            readIdents = _5698_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source234.is_Nullable) {
                      DAST._IType _5699___mcc_h2216 = _source234.dtor_Nullable_a0;
                    } else if (_source234.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _5700___mcc_h2218 = _source234.dtor_Tuple_a0;
                    } else if (_source234.is_Array) {
                      DAST._IType _5701___mcc_h2220 = _source234.dtor_element;
                      BigInteger _5702___mcc_h2221 = _source234.dtor_dims;
                    } else if (_source234.is_Seq) {
                      DAST._IType _5703___mcc_h2224 = _source234.dtor_element;
                    } else if (_source234.is_Set) {
                      DAST._IType _5704___mcc_h2226 = _source234.dtor_element;
                    } else if (_source234.is_Multiset) {
                      DAST._IType _5705___mcc_h2228 = _source234.dtor_element;
                    } else if (_source234.is_Map) {
                      DAST._IType _5706___mcc_h2230 = _source234.dtor_key;
                      DAST._IType _5707___mcc_h2231 = _source234.dtor_value;
                    } else if (_source234.is_SetBuilder) {
                      DAST._IType _5708___mcc_h2234 = _source234.dtor_element;
                    } else if (_source234.is_MapBuilder) {
                      DAST._IType _5709___mcc_h2236 = _source234.dtor_key;
                      DAST._IType _5710___mcc_h2237 = _source234.dtor_value;
                    } else if (_source234.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _5711___mcc_h2240 = _source234.dtor_args;
                      DAST._IType _5712___mcc_h2241 = _source234.dtor_result;
                    } else if (_source234.is_Primitive) {
                      DAST._IPrimitive _5713___mcc_h2244 = _source234.dtor_Primitive_a0;
                    } else if (_source234.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _5714___mcc_h2246 = _source234.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _5715___mcc_h2248 = _source234.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _5716_recursiveGen;
                      DCOMP._IOwnership _5717_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5718_recIdents;
                      RAST._IExpr _out2154;
                      DCOMP._IOwnership _out2155;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2156;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2154, out _out2155, out _out2156);
                      _5716_recursiveGen = _out2154;
                      _5717_recOwned = _out2155;
                      _5718_recIdents = _out2156;
                      RAST._IExpr _out2157;
                      DCOMP._IOwnership _out2158;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5716_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5674_nativeToType).dtor_value), _5717_recOwned, expectedOwnership, out _out2157, out _out2158);
                      r = _out2157;
                      resultingOwnership = _out2158;
                      readIdents = _5718_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out2159;
                  DCOMP._IOwnership _out2160;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2161;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _5673_b), _5673_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out2159, out _out2160, out _out2161);
                  r = _out2159;
                  resultingOwnership = _out2160;
                  readIdents = _out2161;
                }
              }
            }
          } else if (_source231.is_Nullable) {
            DAST._IType _5719___mcc_h1154 = _source231.dtor_Nullable_a0;
            {
              RAST._IExpr _5720_recursiveGen;
              DCOMP._IOwnership _5721_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5722_recIdents;
              RAST._IExpr _out2162;
              DCOMP._IOwnership _out2163;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2164;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2162, out _out2163, out _out2164);
              _5720_recursiveGen = _out2162;
              _5721_recOwned = _out2163;
              _5722_recIdents = _out2164;
              r = _5720_recursiveGen;
              if (object.Equals(_5721_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out2165;
              DCOMP._IOwnership _out2166;
              DCOMP.COMP.FromOwnership(r, _5721_recOwned, expectedOwnership, out _out2165, out _out2166);
              r = _out2165;
              resultingOwnership = _out2166;
              readIdents = _5722_recIdents;
            }
          } else if (_source231.is_Tuple) {
            Dafny.ISequence<DAST._IType> _5723___mcc_h1156 = _source231.dtor_Tuple_a0;
            {
              RAST._IExpr _5724_recursiveGen;
              DCOMP._IOwnership _5725_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5726_recIdents;
              RAST._IExpr _out2167;
              DCOMP._IOwnership _out2168;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2169;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2167, out _out2168, out _out2169);
              _5724_recursiveGen = _out2167;
              _5725_recOwned = _out2168;
              _5726_recIdents = _out2169;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5724_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2170;
              DCOMP._IOwnership _out2171;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2170, out _out2171);
              r = _out2170;
              resultingOwnership = _out2171;
              readIdents = _5726_recIdents;
            }
          } else if (_source231.is_Array) {
            DAST._IType _5727___mcc_h1158 = _source231.dtor_element;
            BigInteger _5728___mcc_h1159 = _source231.dtor_dims;
            {
              RAST._IExpr _5729_recursiveGen;
              DCOMP._IOwnership _5730_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5731_recIdents;
              RAST._IExpr _out2172;
              DCOMP._IOwnership _out2173;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2174;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2172, out _out2173, out _out2174);
              _5729_recursiveGen = _out2172;
              _5730_recOwned = _out2173;
              _5731_recIdents = _out2174;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5729_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2175;
              DCOMP._IOwnership _out2176;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2175, out _out2176);
              r = _out2175;
              resultingOwnership = _out2176;
              readIdents = _5731_recIdents;
            }
          } else if (_source231.is_Seq) {
            DAST._IType _5732___mcc_h1162 = _source231.dtor_element;
            {
              RAST._IExpr _5733_recursiveGen;
              DCOMP._IOwnership _5734_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5735_recIdents;
              RAST._IExpr _out2177;
              DCOMP._IOwnership _out2178;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2179;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2177, out _out2178, out _out2179);
              _5733_recursiveGen = _out2177;
              _5734_recOwned = _out2178;
              _5735_recIdents = _out2179;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5733_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2180;
              DCOMP._IOwnership _out2181;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2180, out _out2181);
              r = _out2180;
              resultingOwnership = _out2181;
              readIdents = _5735_recIdents;
            }
          } else if (_source231.is_Set) {
            DAST._IType _5736___mcc_h1164 = _source231.dtor_element;
            {
              RAST._IExpr _5737_recursiveGen;
              DCOMP._IOwnership _5738_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5739_recIdents;
              RAST._IExpr _out2182;
              DCOMP._IOwnership _out2183;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2184;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2182, out _out2183, out _out2184);
              _5737_recursiveGen = _out2182;
              _5738_recOwned = _out2183;
              _5739_recIdents = _out2184;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5737_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2185;
              DCOMP._IOwnership _out2186;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2185, out _out2186);
              r = _out2185;
              resultingOwnership = _out2186;
              readIdents = _5739_recIdents;
            }
          } else if (_source231.is_Multiset) {
            DAST._IType _5740___mcc_h1166 = _source231.dtor_element;
            {
              RAST._IExpr _5741_recursiveGen;
              DCOMP._IOwnership _5742_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5743_recIdents;
              RAST._IExpr _out2187;
              DCOMP._IOwnership _out2188;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2189;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2187, out _out2188, out _out2189);
              _5741_recursiveGen = _out2187;
              _5742_recOwned = _out2188;
              _5743_recIdents = _out2189;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5741_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2190;
              DCOMP._IOwnership _out2191;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2190, out _out2191);
              r = _out2190;
              resultingOwnership = _out2191;
              readIdents = _5743_recIdents;
            }
          } else if (_source231.is_Map) {
            DAST._IType _5744___mcc_h1168 = _source231.dtor_key;
            DAST._IType _5745___mcc_h1169 = _source231.dtor_value;
            {
              RAST._IExpr _5746_recursiveGen;
              DCOMP._IOwnership _5747_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5748_recIdents;
              RAST._IExpr _out2192;
              DCOMP._IOwnership _out2193;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2194;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2192, out _out2193, out _out2194);
              _5746_recursiveGen = _out2192;
              _5747_recOwned = _out2193;
              _5748_recIdents = _out2194;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5746_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2195;
              DCOMP._IOwnership _out2196;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2195, out _out2196);
              r = _out2195;
              resultingOwnership = _out2196;
              readIdents = _5748_recIdents;
            }
          } else if (_source231.is_SetBuilder) {
            DAST._IType _5749___mcc_h1172 = _source231.dtor_element;
            {
              RAST._IExpr _5750_recursiveGen;
              DCOMP._IOwnership _5751_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5752_recIdents;
              RAST._IExpr _out2197;
              DCOMP._IOwnership _out2198;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2199;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2197, out _out2198, out _out2199);
              _5750_recursiveGen = _out2197;
              _5751_recOwned = _out2198;
              _5752_recIdents = _out2199;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5750_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2200;
              DCOMP._IOwnership _out2201;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2200, out _out2201);
              r = _out2200;
              resultingOwnership = _out2201;
              readIdents = _5752_recIdents;
            }
          } else if (_source231.is_MapBuilder) {
            DAST._IType _5753___mcc_h1174 = _source231.dtor_key;
            DAST._IType _5754___mcc_h1175 = _source231.dtor_value;
            {
              RAST._IExpr _5755_recursiveGen;
              DCOMP._IOwnership _5756_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5757_recIdents;
              RAST._IExpr _out2202;
              DCOMP._IOwnership _out2203;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2204;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2202, out _out2203, out _out2204);
              _5755_recursiveGen = _out2202;
              _5756_recOwned = _out2203;
              _5757_recIdents = _out2204;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5755_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2205;
              DCOMP._IOwnership _out2206;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2205, out _out2206);
              r = _out2205;
              resultingOwnership = _out2206;
              readIdents = _5757_recIdents;
            }
          } else if (_source231.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5758___mcc_h1178 = _source231.dtor_args;
            DAST._IType _5759___mcc_h1179 = _source231.dtor_result;
            {
              RAST._IExpr _5760_recursiveGen;
              DCOMP._IOwnership _5761_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5762_recIdents;
              RAST._IExpr _out2207;
              DCOMP._IOwnership _out2208;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2209;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2207, out _out2208, out _out2209);
              _5760_recursiveGen = _out2207;
              _5761_recOwned = _out2208;
              _5762_recIdents = _out2209;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5760_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2210;
              DCOMP._IOwnership _out2211;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2210, out _out2211);
              r = _out2210;
              resultingOwnership = _out2211;
              readIdents = _5762_recIdents;
            }
          } else if (_source231.is_Primitive) {
            DAST._IPrimitive _5763___mcc_h1182 = _source231.dtor_Primitive_a0;
            DAST._IPrimitive _source236 = _5763___mcc_h1182;
            if (_source236.is_Int) {
              {
                RAST._IType _5764_rhsType;
                RAST._IType _out2212;
                _out2212 = DCOMP.COMP.GenType(_3296_fromTpe, true, false);
                _5764_rhsType = _out2212;
                RAST._IExpr _5765_recursiveGen;
                DCOMP._IOwnership _5766___v87;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5767_recIdents;
                RAST._IExpr _out2213;
                DCOMP._IOwnership _out2214;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2215;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2213, out _out2214, out _out2215);
                _5765_recursiveGen = _out2213;
                _5766___v87 = _out2214;
                _5767_recIdents = _out2215;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_5765_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out2216;
                DCOMP._IOwnership _out2217;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2216, out _out2217);
                r = _out2216;
                resultingOwnership = _out2217;
                readIdents = _5767_recIdents;
              }
            } else if (_source236.is_Real) {
              {
                RAST._IExpr _5768_recursiveGen;
                DCOMP._IOwnership _5769_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5770_recIdents;
                RAST._IExpr _out2218;
                DCOMP._IOwnership _out2219;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2220;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2218, out _out2219, out _out2220);
                _5768_recursiveGen = _out2218;
                _5769_recOwned = _out2219;
                _5770_recIdents = _out2220;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5768_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2221;
                DCOMP._IOwnership _out2222;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2221, out _out2222);
                r = _out2221;
                resultingOwnership = _out2222;
                readIdents = _5770_recIdents;
              }
            } else if (_source236.is_String) {
              {
                RAST._IExpr _5771_recursiveGen;
                DCOMP._IOwnership _5772_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5773_recIdents;
                RAST._IExpr _out2223;
                DCOMP._IOwnership _out2224;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2225;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2223, out _out2224, out _out2225);
                _5771_recursiveGen = _out2223;
                _5772_recOwned = _out2224;
                _5773_recIdents = _out2225;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5771_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2226;
                DCOMP._IOwnership _out2227;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2226, out _out2227);
                r = _out2226;
                resultingOwnership = _out2227;
                readIdents = _5773_recIdents;
              }
            } else if (_source236.is_Bool) {
              {
                RAST._IExpr _5774_recursiveGen;
                DCOMP._IOwnership _5775_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5776_recIdents;
                RAST._IExpr _out2228;
                DCOMP._IOwnership _out2229;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2230;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2228, out _out2229, out _out2230);
                _5774_recursiveGen = _out2228;
                _5775_recOwned = _out2229;
                _5776_recIdents = _out2230;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5774_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2231;
                DCOMP._IOwnership _out2232;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2231, out _out2232);
                r = _out2231;
                resultingOwnership = _out2232;
                readIdents = _5776_recIdents;
              }
            } else {
              {
                RAST._IExpr _5777_recursiveGen;
                DCOMP._IOwnership _5778_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5779_recIdents;
                RAST._IExpr _out2233;
                DCOMP._IOwnership _out2234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2235;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2233, out _out2234, out _out2235);
                _5777_recursiveGen = _out2233;
                _5778_recOwned = _out2234;
                _5779_recIdents = _out2235;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5777_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2236;
                DCOMP._IOwnership _out2237;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2236, out _out2237);
                r = _out2236;
                resultingOwnership = _out2237;
                readIdents = _5779_recIdents;
              }
            }
          } else if (_source231.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5780___mcc_h1184 = _source231.dtor_Passthrough_a0;
            {
              RAST._IExpr _5781_recursiveGen;
              DCOMP._IOwnership _5782___v92;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5783_recIdents;
              RAST._IExpr _out2238;
              DCOMP._IOwnership _out2239;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2240;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2238, out _out2239, out _out2240);
              _5781_recursiveGen = _out2238;
              _5782___v92 = _out2239;
              _5783_recIdents = _out2240;
              RAST._IType _5784_toTpeGen;
              RAST._IType _out2241;
              _out2241 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
              _5784_toTpeGen = _out2241;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_5781_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_5784_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out2242;
              DCOMP._IOwnership _out2243;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2242, out _out2243);
              r = _out2242;
              resultingOwnership = _out2243;
              readIdents = _5783_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5785___mcc_h1186 = _source231.dtor_TypeArg_a0;
            {
              RAST._IExpr _5786_recursiveGen;
              DCOMP._IOwnership _5787_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5788_recIdents;
              RAST._IExpr _out2244;
              DCOMP._IOwnership _out2245;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2246;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2244, out _out2245, out _out2246);
              _5786_recursiveGen = _out2244;
              _5787_recOwned = _out2245;
              _5788_recIdents = _out2246;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5786_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2247;
              DCOMP._IOwnership _out2248;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2247, out _out2248);
              r = _out2247;
              resultingOwnership = _out2248;
              readIdents = _5788_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _5789___mcc_h1188 = _source124.dtor_TypeArg_a0;
          DAST._IType _source237 = _3302___mcc_h1;
          if (_source237.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5790___mcc_h1192 = _source237.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5791___mcc_h1193 = _source237.dtor_typeArgs;
            DAST._IResolvedType _5792___mcc_h1194 = _source237.dtor_resolved;
            DAST._IResolvedType _source238 = _5792___mcc_h1194;
            if (_source238.is_Datatype) {
              DAST._IDatatypeType _5793___mcc_h1198 = _source238.dtor_datatypeType;
              {
                RAST._IExpr _5794_recursiveGen;
                DCOMP._IOwnership _5795_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5796_recIdents;
                RAST._IExpr _out2249;
                DCOMP._IOwnership _out2250;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2251;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2249, out _out2250, out _out2251);
                _5794_recursiveGen = _out2249;
                _5795_recOwned = _out2250;
                _5796_recIdents = _out2251;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5794_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2252;
                DCOMP._IOwnership _out2253;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2252, out _out2253);
                r = _out2252;
                resultingOwnership = _out2253;
                readIdents = _5796_recIdents;
              }
            } else if (_source238.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5797___mcc_h1200 = _source238.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _5798___mcc_h1201 = _source238.dtor_attributes;
              {
                RAST._IExpr _5799_recursiveGen;
                DCOMP._IOwnership _5800_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5801_recIdents;
                RAST._IExpr _out2254;
                DCOMP._IOwnership _out2255;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2256;
                DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2254, out _out2255, out _out2256);
                _5799_recursiveGen = _out2254;
                _5800_recOwned = _out2255;
                _5801_recIdents = _out2256;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5799_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2257;
                DCOMP._IOwnership _out2258;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2257, out _out2258);
                r = _out2257;
                resultingOwnership = _out2258;
                readIdents = _5801_recIdents;
              }
            } else {
              DAST._IType _5802___mcc_h1204 = _source238.dtor_baseType;
              DAST._INewtypeRange _5803___mcc_h1205 = _source238.dtor_range;
              bool _5804___mcc_h1206 = _source238.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _5805___mcc_h1207 = _source238.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _5806_attributes = _5805___mcc_h1207;
              bool _5807_erase = _5804___mcc_h1206;
              DAST._INewtypeRange _5808_range = _5803___mcc_h1205;
              DAST._IType _5809_b = _5802___mcc_h1204;
              {
                Std.Wrappers._IOption<RAST._IType> _5810_nativeToType;
                _5810_nativeToType = DCOMP.COMP.NewtypeToRustType(_5809_b, _5808_range);
                if (object.Equals(_3296_fromTpe, _5809_b)) {
                  RAST._IExpr _5811_recursiveGen;
                  DCOMP._IOwnership _5812_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5813_recIdents;
                  RAST._IExpr _out2259;
                  DCOMP._IOwnership _out2260;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2261;
                  DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2259, out _out2260, out _out2261);
                  _5811_recursiveGen = _out2259;
                  _5812_recOwned = _out2260;
                  _5813_recIdents = _out2261;
                  readIdents = _5813_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source239 = _5810_nativeToType;
                  if (_source239.is_None) {
                    if (_5807_erase) {
                      r = _5811_recursiveGen;
                    } else {
                      RAST._IType _5814_rhsType;
                      RAST._IType _out2262;
                      _out2262 = DCOMP.COMP.GenType(_3297_toTpe, true, false);
                      _5814_rhsType = _out2262;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5814_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5811_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out2263;
                    DCOMP._IOwnership _out2264;
                    DCOMP.COMP.FromOwnership(r, _5812_recOwned, expectedOwnership, out _out2263, out _out2264);
                    r = _out2263;
                    resultingOwnership = _out2264;
                  } else {
                    RAST._IType _5815___mcc_h2250 = _source239.dtor_value;
                    RAST._IType _5816_v = _5815___mcc_h2250;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5811_recursiveGen, RAST.Expr.create_ExprFromType(_5816_v)));
                    RAST._IExpr _out2265;
                    DCOMP._IOwnership _out2266;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2265, out _out2266);
                    r = _out2265;
                    resultingOwnership = _out2266;
                  }
                } else {
                  if ((_5810_nativeToType).is_Some) {
                    DAST._IType _source240 = _3296_fromTpe;
                    if (_source240.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5817___mcc_h2251 = _source240.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _5818___mcc_h2252 = _source240.dtor_typeArgs;
                      DAST._IResolvedType _5819___mcc_h2253 = _source240.dtor_resolved;
                      DAST._IResolvedType _source241 = _5819___mcc_h2253;
                      if (_source241.is_Datatype) {
                        DAST._IDatatypeType _5820___mcc_h2257 = _source241.dtor_datatypeType;
                      } else if (_source241.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5821___mcc_h2259 = _source241.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _5822___mcc_h2260 = _source241.dtor_attributes;
                      } else {
                        DAST._IType _5823___mcc_h2263 = _source241.dtor_baseType;
                        DAST._INewtypeRange _5824___mcc_h2264 = _source241.dtor_range;
                        bool _5825___mcc_h2265 = _source241.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _5826___mcc_h2266 = _source241.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _5827_attributes0 = _5826___mcc_h2266;
                        bool _5828_erase0 = _5825___mcc_h2265;
                        DAST._INewtypeRange _5829_range0 = _5824___mcc_h2264;
                        DAST._IType _5830_b0 = _5823___mcc_h2263;
                        {
                          Std.Wrappers._IOption<RAST._IType> _5831_nativeFromType;
                          _5831_nativeFromType = DCOMP.COMP.NewtypeToRustType(_5830_b0, _5829_range0);
                          if ((_5831_nativeFromType).is_Some) {
                            RAST._IExpr _5832_recursiveGen;
                            DCOMP._IOwnership _5833_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5834_recIdents;
                            RAST._IExpr _out2267;
                            DCOMP._IOwnership _out2268;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2269;
                            DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2267, out _out2268, out _out2269);
                            _5832_recursiveGen = _out2267;
                            _5833_recOwned = _out2268;
                            _5834_recIdents = _out2269;
                            RAST._IExpr _out2270;
                            DCOMP._IOwnership _out2271;
                            DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_5832_recursiveGen, (_5810_nativeToType).dtor_value), _5833_recOwned, expectedOwnership, out _out2270, out _out2271);
                            r = _out2270;
                            resultingOwnership = _out2271;
                            readIdents = _5834_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source240.is_Nullable) {
                      DAST._IType _5835___mcc_h2271 = _source240.dtor_Nullable_a0;
                    } else if (_source240.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _5836___mcc_h2273 = _source240.dtor_Tuple_a0;
                    } else if (_source240.is_Array) {
                      DAST._IType _5837___mcc_h2275 = _source240.dtor_element;
                      BigInteger _5838___mcc_h2276 = _source240.dtor_dims;
                    } else if (_source240.is_Seq) {
                      DAST._IType _5839___mcc_h2279 = _source240.dtor_element;
                    } else if (_source240.is_Set) {
                      DAST._IType _5840___mcc_h2281 = _source240.dtor_element;
                    } else if (_source240.is_Multiset) {
                      DAST._IType _5841___mcc_h2283 = _source240.dtor_element;
                    } else if (_source240.is_Map) {
                      DAST._IType _5842___mcc_h2285 = _source240.dtor_key;
                      DAST._IType _5843___mcc_h2286 = _source240.dtor_value;
                    } else if (_source240.is_SetBuilder) {
                      DAST._IType _5844___mcc_h2289 = _source240.dtor_element;
                    } else if (_source240.is_MapBuilder) {
                      DAST._IType _5845___mcc_h2291 = _source240.dtor_key;
                      DAST._IType _5846___mcc_h2292 = _source240.dtor_value;
                    } else if (_source240.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _5847___mcc_h2295 = _source240.dtor_args;
                      DAST._IType _5848___mcc_h2296 = _source240.dtor_result;
                    } else if (_source240.is_Primitive) {
                      DAST._IPrimitive _5849___mcc_h2299 = _source240.dtor_Primitive_a0;
                    } else if (_source240.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _5850___mcc_h2301 = _source240.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _5851___mcc_h2303 = _source240.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_3296_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _5852_recursiveGen;
                      DCOMP._IOwnership _5853_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5854_recIdents;
                      RAST._IExpr _out2272;
                      DCOMP._IOwnership _out2273;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2274;
                      DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2272, out _out2273, out _out2274);
                      _5852_recursiveGen = _out2272;
                      _5853_recOwned = _out2273;
                      _5854_recIdents = _out2274;
                      RAST._IExpr _out2275;
                      DCOMP._IOwnership _out2276;
                      DCOMP.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_5852_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_5810_nativeToType).dtor_value), _5853_recOwned, expectedOwnership, out _out2275, out _out2276);
                      r = _out2275;
                      resultingOwnership = _out2276;
                      readIdents = _5854_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out2277;
                  DCOMP._IOwnership _out2278;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2279;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3295_expr, _3296_fromTpe, _5809_b), _5809_b, _3297_toTpe), selfIdent, env, expectedOwnership, out _out2277, out _out2278, out _out2279);
                  r = _out2277;
                  resultingOwnership = _out2278;
                  readIdents = _out2279;
                }
              }
            }
          } else if (_source237.is_Nullable) {
            DAST._IType _5855___mcc_h1212 = _source237.dtor_Nullable_a0;
            {
              RAST._IExpr _5856_recursiveGen;
              DCOMP._IOwnership _5857_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5858_recIdents;
              RAST._IExpr _out2280;
              DCOMP._IOwnership _out2281;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2282;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2280, out _out2281, out _out2282);
              _5856_recursiveGen = _out2280;
              _5857_recOwned = _out2281;
              _5858_recIdents = _out2282;
              r = _5856_recursiveGen;
              if (object.Equals(_5857_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out2283;
              DCOMP._IOwnership _out2284;
              DCOMP.COMP.FromOwnership(r, _5857_recOwned, expectedOwnership, out _out2283, out _out2284);
              r = _out2283;
              resultingOwnership = _out2284;
              readIdents = _5858_recIdents;
            }
          } else if (_source237.is_Tuple) {
            Dafny.ISequence<DAST._IType> _5859___mcc_h1214 = _source237.dtor_Tuple_a0;
            {
              RAST._IExpr _5860_recursiveGen;
              DCOMP._IOwnership _5861_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5862_recIdents;
              RAST._IExpr _out2285;
              DCOMP._IOwnership _out2286;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2287;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2285, out _out2286, out _out2287);
              _5860_recursiveGen = _out2285;
              _5861_recOwned = _out2286;
              _5862_recIdents = _out2287;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5860_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2288;
              DCOMP._IOwnership _out2289;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2288, out _out2289);
              r = _out2288;
              resultingOwnership = _out2289;
              readIdents = _5862_recIdents;
            }
          } else if (_source237.is_Array) {
            DAST._IType _5863___mcc_h1216 = _source237.dtor_element;
            BigInteger _5864___mcc_h1217 = _source237.dtor_dims;
            {
              RAST._IExpr _5865_recursiveGen;
              DCOMP._IOwnership _5866_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5867_recIdents;
              RAST._IExpr _out2290;
              DCOMP._IOwnership _out2291;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2292;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2290, out _out2291, out _out2292);
              _5865_recursiveGen = _out2290;
              _5866_recOwned = _out2291;
              _5867_recIdents = _out2292;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5865_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2293;
              DCOMP._IOwnership _out2294;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2293, out _out2294);
              r = _out2293;
              resultingOwnership = _out2294;
              readIdents = _5867_recIdents;
            }
          } else if (_source237.is_Seq) {
            DAST._IType _5868___mcc_h1220 = _source237.dtor_element;
            {
              RAST._IExpr _5869_recursiveGen;
              DCOMP._IOwnership _5870_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5871_recIdents;
              RAST._IExpr _out2295;
              DCOMP._IOwnership _out2296;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2297;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2295, out _out2296, out _out2297);
              _5869_recursiveGen = _out2295;
              _5870_recOwned = _out2296;
              _5871_recIdents = _out2297;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5869_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2298;
              DCOMP._IOwnership _out2299;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2298, out _out2299);
              r = _out2298;
              resultingOwnership = _out2299;
              readIdents = _5871_recIdents;
            }
          } else if (_source237.is_Set) {
            DAST._IType _5872___mcc_h1222 = _source237.dtor_element;
            {
              RAST._IExpr _5873_recursiveGen;
              DCOMP._IOwnership _5874_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5875_recIdents;
              RAST._IExpr _out2300;
              DCOMP._IOwnership _out2301;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2302;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2300, out _out2301, out _out2302);
              _5873_recursiveGen = _out2300;
              _5874_recOwned = _out2301;
              _5875_recIdents = _out2302;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5873_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2303;
              DCOMP._IOwnership _out2304;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2303, out _out2304);
              r = _out2303;
              resultingOwnership = _out2304;
              readIdents = _5875_recIdents;
            }
          } else if (_source237.is_Multiset) {
            DAST._IType _5876___mcc_h1224 = _source237.dtor_element;
            {
              RAST._IExpr _5877_recursiveGen;
              DCOMP._IOwnership _5878_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5879_recIdents;
              RAST._IExpr _out2305;
              DCOMP._IOwnership _out2306;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2307;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2305, out _out2306, out _out2307);
              _5877_recursiveGen = _out2305;
              _5878_recOwned = _out2306;
              _5879_recIdents = _out2307;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5877_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2308;
              DCOMP._IOwnership _out2309;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2308, out _out2309);
              r = _out2308;
              resultingOwnership = _out2309;
              readIdents = _5879_recIdents;
            }
          } else if (_source237.is_Map) {
            DAST._IType _5880___mcc_h1226 = _source237.dtor_key;
            DAST._IType _5881___mcc_h1227 = _source237.dtor_value;
            {
              RAST._IExpr _5882_recursiveGen;
              DCOMP._IOwnership _5883_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5884_recIdents;
              RAST._IExpr _out2310;
              DCOMP._IOwnership _out2311;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2312;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2310, out _out2311, out _out2312);
              _5882_recursiveGen = _out2310;
              _5883_recOwned = _out2311;
              _5884_recIdents = _out2312;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5882_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2313;
              DCOMP._IOwnership _out2314;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2313, out _out2314);
              r = _out2313;
              resultingOwnership = _out2314;
              readIdents = _5884_recIdents;
            }
          } else if (_source237.is_SetBuilder) {
            DAST._IType _5885___mcc_h1230 = _source237.dtor_element;
            {
              RAST._IExpr _5886_recursiveGen;
              DCOMP._IOwnership _5887_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5888_recIdents;
              RAST._IExpr _out2315;
              DCOMP._IOwnership _out2316;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2317;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2315, out _out2316, out _out2317);
              _5886_recursiveGen = _out2315;
              _5887_recOwned = _out2316;
              _5888_recIdents = _out2317;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5886_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2318;
              DCOMP._IOwnership _out2319;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2318, out _out2319);
              r = _out2318;
              resultingOwnership = _out2319;
              readIdents = _5888_recIdents;
            }
          } else if (_source237.is_MapBuilder) {
            DAST._IType _5889___mcc_h1232 = _source237.dtor_key;
            DAST._IType _5890___mcc_h1233 = _source237.dtor_value;
            {
              RAST._IExpr _5891_recursiveGen;
              DCOMP._IOwnership _5892_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5893_recIdents;
              RAST._IExpr _out2320;
              DCOMP._IOwnership _out2321;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2322;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2320, out _out2321, out _out2322);
              _5891_recursiveGen = _out2320;
              _5892_recOwned = _out2321;
              _5893_recIdents = _out2322;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5891_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2323;
              DCOMP._IOwnership _out2324;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2323, out _out2324);
              r = _out2323;
              resultingOwnership = _out2324;
              readIdents = _5893_recIdents;
            }
          } else if (_source237.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5894___mcc_h1236 = _source237.dtor_args;
            DAST._IType _5895___mcc_h1237 = _source237.dtor_result;
            {
              RAST._IExpr _5896_recursiveGen;
              DCOMP._IOwnership _5897_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5898_recIdents;
              RAST._IExpr _out2325;
              DCOMP._IOwnership _out2326;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2327;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2325, out _out2326, out _out2327);
              _5896_recursiveGen = _out2325;
              _5897_recOwned = _out2326;
              _5898_recIdents = _out2327;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5896_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2328;
              DCOMP._IOwnership _out2329;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2328, out _out2329);
              r = _out2328;
              resultingOwnership = _out2329;
              readIdents = _5898_recIdents;
            }
          } else if (_source237.is_Primitive) {
            DAST._IPrimitive _5899___mcc_h1240 = _source237.dtor_Primitive_a0;
            {
              RAST._IExpr _5900_recursiveGen;
              DCOMP._IOwnership _5901_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5902_recIdents;
              RAST._IExpr _out2330;
              DCOMP._IOwnership _out2331;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2332;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2330, out _out2331, out _out2332);
              _5900_recursiveGen = _out2330;
              _5901_recOwned = _out2331;
              _5902_recIdents = _out2332;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5900_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2333;
              DCOMP._IOwnership _out2334;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2333, out _out2334);
              r = _out2333;
              resultingOwnership = _out2334;
              readIdents = _5902_recIdents;
            }
          } else if (_source237.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5903___mcc_h1242 = _source237.dtor_Passthrough_a0;
            {
              RAST._IExpr _5904_recursiveGen;
              DCOMP._IOwnership _5905_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5906_recIdents;
              RAST._IExpr _out2335;
              DCOMP._IOwnership _out2336;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2337;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2335, out _out2336, out _out2337);
              _5904_recursiveGen = _out2335;
              _5905_recOwned = _out2336;
              _5906_recIdents = _out2337;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5904_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2338;
              DCOMP._IOwnership _out2339;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2338, out _out2339);
              r = _out2338;
              resultingOwnership = _out2339;
              readIdents = _5906_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5907___mcc_h1244 = _source237.dtor_TypeArg_a0;
            {
              RAST._IExpr _5908_recursiveGen;
              DCOMP._IOwnership _5909_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5910_recIdents;
              RAST._IExpr _out2340;
              DCOMP._IOwnership _out2341;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2342;
              DCOMP.COMP.GenExpr(_3295_expr, selfIdent, env, expectedOwnership, out _out2340, out _out2341, out _out2342);
              _5908_recursiveGen = _out2340;
              _5909_recOwned = _out2341;
              _5910_recIdents = _out2342;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5908_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2343;
              DCOMP._IOwnership _out2344;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2343, out _out2344);
              r = _out2343;
              resultingOwnership = _out2344;
              readIdents = _5910_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source242 = e;
      if (_source242.is_Literal) {
        DAST._ILiteral _5911___mcc_h0 = _source242.dtor_Literal_a0;
        RAST._IExpr _out2345;
        DCOMP._IOwnership _out2346;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2347;
        DCOMP.COMP.GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out2345, out _out2346, out _out2347);
        r = _out2345;
        resultingOwnership = _out2346;
        readIdents = _out2347;
      } else if (_source242.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _5912___mcc_h1 = _source242.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _5913_name = _5912___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_5913_name));
          bool _5914_currentlyBorrowed;
          _5914_currentlyBorrowed = (env).IsBorrowed(_5913_name);
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (_5914_currentlyBorrowed) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5913_name);
          return ;
        }
      } else if (_source242.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5915___mcc_h2 = _source242.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5916_path = _5915___mcc_h2;
        {
          RAST._IExpr _out2348;
          _out2348 = DCOMP.COMP.GenPathExpr(_5916_path);
          r = _out2348;
          RAST._IExpr _out2349;
          DCOMP._IOwnership _out2350;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2349, out _out2350);
          r = _out2349;
          resultingOwnership = _out2350;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source242.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _5917___mcc_h3 = _source242.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _5918_values = _5917___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _5919_s;
          _5919_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5920_i;
          _5920_i = BigInteger.Zero;
          while ((_5920_i) < (new BigInteger((_5918_values).Count))) {
            if ((_5920_i).Sign == 1) {
              _5919_s = Dafny.Sequence<Dafny.Rune>.Concat(_5919_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _5921_recursiveGen;
            DCOMP._IOwnership _5922___v95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5923_recIdents;
            RAST._IExpr _out2351;
            DCOMP._IOwnership _out2352;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2353;
            DCOMP.COMP.GenExpr((_5918_values).Select(_5920_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2351, out _out2352, out _out2353);
            _5921_recursiveGen = _out2351;
            _5922___v95 = _out2352;
            _5923_recIdents = _out2353;
            _5919_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5919_s, (_5921_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5923_recIdents);
            _5920_i = (_5920_i) + (BigInteger.One);
          }
          _5919_s = Dafny.Sequence<Dafny.Rune>.Concat(_5919_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_5919_s);
          RAST._IExpr _out2354;
          DCOMP._IOwnership _out2355;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2354, out _out2355);
          r = _out2354;
          resultingOwnership = _out2355;
          return ;
        }
      } else if (_source242.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5924___mcc_h4 = _source242.dtor_path;
        Dafny.ISequence<DAST._IType> _5925___mcc_h5 = _source242.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _5926___mcc_h6 = _source242.dtor_args;
        Dafny.ISequence<DAST._IExpression> _5927_args = _5926___mcc_h6;
        Dafny.ISequence<DAST._IType> _5928_typeArgs = _5925___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5929_path = _5924___mcc_h4;
        {
          RAST._IExpr _out2356;
          _out2356 = DCOMP.COMP.GenPathExpr(_5929_path);
          r = _out2356;
          if ((new BigInteger((_5928_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _5930_typeExprs;
            _5930_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi6 = new BigInteger((_5928_typeArgs).Count);
            for (BigInteger _5931_i = BigInteger.Zero; _5931_i < _hi6; _5931_i++) {
              RAST._IType _5932_typeExpr;
              RAST._IType _out2357;
              _out2357 = DCOMP.COMP.GenType((_5928_typeArgs).Select(_5931_i), false, false);
              _5932_typeExpr = _out2357;
              _5930_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_5930_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_5932_typeExpr));
            }
            r = (r).ApplyType(_5930_typeExprs);
          }
          r = (r).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _5933_arguments;
          _5933_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi7 = new BigInteger((_5927_args).Count);
          for (BigInteger _5934_i = BigInteger.Zero; _5934_i < _hi7; _5934_i++) {
            RAST._IExpr _5935_recursiveGen;
            DCOMP._IOwnership _5936___v96;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5937_recIdents;
            RAST._IExpr _out2358;
            DCOMP._IOwnership _out2359;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2360;
            DCOMP.COMP.GenExpr((_5927_args).Select(_5934_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2358, out _out2359, out _out2360);
            _5935_recursiveGen = _out2358;
            _5936___v96 = _out2359;
            _5937_recIdents = _out2360;
            _5933_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5933_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_5935_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5937_recIdents);
          }
          r = (r).Apply(_5933_arguments);
          r = RAST.__default.RcNew(r);
          RAST._IExpr _out2361;
          DCOMP._IOwnership _out2362;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2361, out _out2362);
          r = _out2361;
          resultingOwnership = _out2362;
          return ;
        }
      } else if (_source242.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _5938___mcc_h7 = _source242.dtor_dims;
        DAST._IType _5939___mcc_h8 = _source242.dtor_typ;
        DAST._IType _5940_typ = _5939___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _5941_dims = _5938___mcc_h7;
        {
          BigInteger _5942_i;
          _5942_i = (new BigInteger((_5941_dims).Count)) - (BigInteger.One);
          RAST._IType _5943_genTyp;
          RAST._IType _out2363;
          _out2363 = DCOMP.COMP.GenType(_5940_typ, false, false);
          _5943_genTyp = _out2363;
          Dafny.ISequence<Dafny.Rune> _5944_s;
          _5944_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_5943_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_5942_i).Sign != -1) {
            RAST._IExpr _5945_recursiveGen;
            DCOMP._IOwnership _5946___v97;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5947_recIdents;
            RAST._IExpr _out2364;
            DCOMP._IOwnership _out2365;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2366;
            DCOMP.COMP.GenExpr((_5941_dims).Select(_5942_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2364, out _out2365, out _out2366);
            _5945_recursiveGen = _out2364;
            _5946___v97 = _out2365;
            _5947_recIdents = _out2366;
            _5944_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _5944_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_5945_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5947_recIdents);
            _5942_i = (_5942_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_5944_s);
          RAST._IExpr _out2367;
          DCOMP._IOwnership _out2368;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2367, out _out2368);
          r = _out2367;
          resultingOwnership = _out2368;
          return ;
        }
      } else if (_source242.is_DatatypeValue) {
        DAST._IDatatypeType _5948___mcc_h9 = _source242.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _5949___mcc_h10 = _source242.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _5950___mcc_h11 = _source242.dtor_variant;
        bool _5951___mcc_h12 = _source242.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5952___mcc_h13 = _source242.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5953_values = _5952___mcc_h13;
        bool _5954_isCo = _5951___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _5955_variant = _5950___mcc_h11;
        Dafny.ISequence<DAST._IType> _5956_typeArgs = _5949___mcc_h10;
        DAST._IDatatypeType _5957_datatypeType = _5948___mcc_h9;
        {
          RAST._IExpr _out2369;
          _out2369 = DCOMP.COMP.GenPathExpr((_5957_datatypeType).dtor_path);
          r = _out2369;
          Dafny.ISequence<RAST._IType> _5958_genTypeArgs;
          _5958_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi8 = new BigInteger((_5956_typeArgs).Count);
          for (BigInteger _5959_i = BigInteger.Zero; _5959_i < _hi8; _5959_i++) {
            RAST._IType _5960_typeExpr;
            RAST._IType _out2370;
            _out2370 = DCOMP.COMP.GenType((_5956_typeArgs).Select(_5959_i), false, false);
            _5960_typeExpr = _out2370;
            _5958_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_5958_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_5960_typeExpr));
          }
          if ((new BigInteger((_5956_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_5958_genTypeArgs);
          }
          r = (r).MSel(DCOMP.__default.escapeIdent(_5955_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _5961_assignments;
          _5961_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi9 = new BigInteger((_5953_values).Count);
          for (BigInteger _5962_i = BigInteger.Zero; _5962_i < _hi9; _5962_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs52 = (_5953_values).Select(_5962_i);
            Dafny.ISequence<Dafny.Rune> _5963_name = _let_tmp_rhs52.dtor__0;
            DAST._IExpression _5964_value = _let_tmp_rhs52.dtor__1;
            if (_5954_isCo) {
              RAST._IExpr _5965_recursiveGen;
              DCOMP._IOwnership _5966___v98;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5967_recIdents;
              RAST._IExpr _out2371;
              DCOMP._IOwnership _out2372;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2373;
              DCOMP.COMP.GenExpr(_5964_value, selfIdent, DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out2371, out _out2372, out _out2373);
              _5965_recursiveGen = _out2371;
              _5966___v98 = _out2372;
              _5967_recIdents = _out2373;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5967_recIdents);
              Dafny.ISequence<Dafny.Rune> _5968_allReadCloned;
              _5968_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_5967_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _5969_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_5967_recIdents).Elements) {
                  _5969_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_5967_recIdents).Contains(_5969_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2859)");
              after__ASSIGN_SUCH_THAT_2: ;
                _5968_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5968_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_5969_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_5969_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _5967_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5967_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5969_next));
              }
              Dafny.ISequence<Dafny.Rune> _5970_assigned;
              _5970_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _5968_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_5965_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _5961_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5961_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_5963_name), RAST.Expr.create_RawExpr(_5970_assigned))));
            } else {
              RAST._IExpr _5971_recursiveGen;
              DCOMP._IOwnership _5972___v99;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5973_recIdents;
              RAST._IExpr _out2374;
              DCOMP._IOwnership _out2375;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2376;
              DCOMP.COMP.GenExpr(_5964_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2374, out _out2375, out _out2376);
              _5971_recursiveGen = _out2374;
              _5972___v99 = _out2375;
              _5973_recIdents = _out2376;
              _5961_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5961_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_5963_name), _5971_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5973_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _5961_assignments);
          if (DCOMP.COMP.IsRcWrapped((_5957_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out2377;
          DCOMP._IOwnership _out2378;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2377, out _out2378);
          r = _out2377;
          resultingOwnership = _out2378;
          return ;
        }
      } else if (_source242.is_Convert) {
        DAST._IExpression _5974___mcc_h14 = _source242.dtor_value;
        DAST._IType _5975___mcc_h15 = _source242.dtor_from;
        DAST._IType _5976___mcc_h16 = _source242.dtor_typ;
        {
          RAST._IExpr _out2379;
          DCOMP._IOwnership _out2380;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2381;
          DCOMP.COMP.GenExprConvert(e, selfIdent, env, expectedOwnership, out _out2379, out _out2380, out _out2381);
          r = _out2379;
          resultingOwnership = _out2380;
          readIdents = _out2381;
        }
      } else if (_source242.is_SeqConstruct) {
        DAST._IExpression _5977___mcc_h17 = _source242.dtor_length;
        DAST._IExpression _5978___mcc_h18 = _source242.dtor_elem;
        DAST._IExpression _5979_expr = _5978___mcc_h18;
        DAST._IExpression _5980_length = _5977___mcc_h17;
        {
          RAST._IExpr _5981_recursiveGen;
          DCOMP._IOwnership _5982___v103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5983_recIdents;
          RAST._IExpr _out2382;
          DCOMP._IOwnership _out2383;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2384;
          DCOMP.COMP.GenExpr(_5979_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2382, out _out2383, out _out2384);
          _5981_recursiveGen = _out2382;
          _5982___v103 = _out2383;
          _5983_recIdents = _out2384;
          RAST._IExpr _5984_lengthGen;
          DCOMP._IOwnership _5985___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5986_lengthIdents;
          RAST._IExpr _out2385;
          DCOMP._IOwnership _out2386;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2387;
          DCOMP.COMP.GenExpr(_5980_length, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2385, out _out2386, out _out2387);
          _5984_lengthGen = _out2385;
          _5985___v104 = _out2386;
          _5986_lengthIdents = _out2387;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_5981_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_5984_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5983_recIdents, _5986_lengthIdents);
          RAST._IExpr _out2388;
          DCOMP._IOwnership _out2389;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2388, out _out2389);
          r = _out2388;
          resultingOwnership = _out2389;
          return ;
        }
      } else if (_source242.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _5987___mcc_h19 = _source242.dtor_elements;
        DAST._IType _5988___mcc_h20 = _source242.dtor_typ;
        DAST._IType _5989_typ = _5988___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _5990_exprs = _5987___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _5991_genTpe;
          RAST._IType _out2390;
          _out2390 = DCOMP.COMP.GenType(_5989_typ, false, false);
          _5991_genTpe = _out2390;
          BigInteger _5992_i;
          _5992_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _5993_args;
          _5993_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_5992_i) < (new BigInteger((_5990_exprs).Count))) {
            RAST._IExpr _5994_recursiveGen;
            DCOMP._IOwnership _5995___v105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5996_recIdents;
            RAST._IExpr _out2391;
            DCOMP._IOwnership _out2392;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2393;
            DCOMP.COMP.GenExpr((_5990_exprs).Select(_5992_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2391, out _out2392, out _out2393);
            _5994_recursiveGen = _out2391;
            _5995___v105 = _out2392;
            _5996_recIdents = _out2393;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5996_recIdents);
            _5993_args = Dafny.Sequence<RAST._IExpr>.Concat(_5993_args, Dafny.Sequence<RAST._IExpr>.FromElements(_5994_recursiveGen));
            _5992_i = (_5992_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_5993_args);
          if ((new BigInteger((_5993_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_5991_genTpe));
          }
          RAST._IExpr _out2394;
          DCOMP._IOwnership _out2395;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2394, out _out2395);
          r = _out2394;
          resultingOwnership = _out2395;
          return ;
        }
      } else if (_source242.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _5997___mcc_h21 = _source242.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _5998_exprs = _5997___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _5999_generatedValues;
          _5999_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6000_i;
          _6000_i = BigInteger.Zero;
          while ((_6000_i) < (new BigInteger((_5998_exprs).Count))) {
            RAST._IExpr _6001_recursiveGen;
            DCOMP._IOwnership _6002___v106;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6003_recIdents;
            RAST._IExpr _out2396;
            DCOMP._IOwnership _out2397;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2398;
            DCOMP.COMP.GenExpr((_5998_exprs).Select(_6000_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2396, out _out2397, out _out2398);
            _6001_recursiveGen = _out2396;
            _6002___v106 = _out2397;
            _6003_recIdents = _out2398;
            _5999_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_5999_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_6001_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6003_recIdents);
            _6000_i = (_6000_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_5999_generatedValues);
          RAST._IExpr _out2399;
          DCOMP._IOwnership _out2400;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2399, out _out2400);
          r = _out2399;
          resultingOwnership = _out2400;
          return ;
        }
      } else if (_source242.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _6004___mcc_h22 = _source242.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _6005_exprs = _6004___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _6006_generatedValues;
          _6006_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6007_i;
          _6007_i = BigInteger.Zero;
          while ((_6007_i) < (new BigInteger((_6005_exprs).Count))) {
            RAST._IExpr _6008_recursiveGen;
            DCOMP._IOwnership _6009___v107;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6010_recIdents;
            RAST._IExpr _out2401;
            DCOMP._IOwnership _out2402;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2403;
            DCOMP.COMP.GenExpr((_6005_exprs).Select(_6007_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2401, out _out2402, out _out2403);
            _6008_recursiveGen = _out2401;
            _6009___v107 = _out2402;
            _6010_recIdents = _out2403;
            _6006_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_6006_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_6008_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6010_recIdents);
            _6007_i = (_6007_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_6006_generatedValues);
          RAST._IExpr _out2404;
          DCOMP._IOwnership _out2405;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2404, out _out2405);
          r = _out2404;
          resultingOwnership = _out2405;
          return ;
        }
      } else if (_source242.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6011___mcc_h23 = _source242.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6012_mapElems = _6011___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _6013_generatedValues;
          _6013_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6014_i;
          _6014_i = BigInteger.Zero;
          while ((_6014_i) < (new BigInteger((_6012_mapElems).Count))) {
            RAST._IExpr _6015_recursiveGenKey;
            DCOMP._IOwnership _6016___v109;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6017_recIdentsKey;
            RAST._IExpr _out2406;
            DCOMP._IOwnership _out2407;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2408;
            DCOMP.COMP.GenExpr(((_6012_mapElems).Select(_6014_i)).dtor__0, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2406, out _out2407, out _out2408);
            _6015_recursiveGenKey = _out2406;
            _6016___v109 = _out2407;
            _6017_recIdentsKey = _out2408;
            RAST._IExpr _6018_recursiveGenValue;
            DCOMP._IOwnership _6019___v110;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6020_recIdentsValue;
            RAST._IExpr _out2409;
            DCOMP._IOwnership _out2410;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2411;
            DCOMP.COMP.GenExpr(((_6012_mapElems).Select(_6014_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2409, out _out2410, out _out2411);
            _6018_recursiveGenValue = _out2409;
            _6019___v110 = _out2410;
            _6020_recIdentsValue = _out2411;
            _6013_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_6013_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_6015_recursiveGenKey, _6018_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6017_recIdentsKey), _6020_recIdentsValue);
            _6014_i = (_6014_i) + (BigInteger.One);
          }
          _6014_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _6021_arguments;
          _6021_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_6014_i) < (new BigInteger((_6013_generatedValues).Count))) {
            RAST._IExpr _6022_genKey;
            _6022_genKey = ((_6013_generatedValues).Select(_6014_i)).dtor__0;
            RAST._IExpr _6023_genValue;
            _6023_genValue = ((_6013_generatedValues).Select(_6014_i)).dtor__1;
            _6021_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_6021_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _6022_genKey, _6023_genValue, DAST.Format.BinOpFormat.create_NoFormat())));
            _6014_i = (_6014_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_6021_arguments);
          RAST._IExpr _out2412;
          DCOMP._IOwnership _out2413;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2412, out _out2413);
          r = _out2412;
          resultingOwnership = _out2413;
          return ;
        }
      } else if (_source242.is_MapBuilder) {
        DAST._IType _6024___mcc_h24 = _source242.dtor_keyType;
        DAST._IType _6025___mcc_h25 = _source242.dtor_valueType;
        DAST._IType _6026_valueType = _6025___mcc_h25;
        DAST._IType _6027_keyType = _6024___mcc_h24;
        {
          RAST._IType _6028_kType;
          RAST._IType _out2414;
          _out2414 = DCOMP.COMP.GenType(_6027_keyType, false, false);
          _6028_kType = _out2414;
          RAST._IType _6029_vType;
          RAST._IType _out2415;
          _out2415 = DCOMP.COMP.GenType(_6026_valueType, false, false);
          _6029_vType = _out2415;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_6028_kType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_6029_vType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2416;
          DCOMP._IOwnership _out2417;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2416, out _out2417);
          r = _out2416;
          resultingOwnership = _out2417;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source242.is_SeqUpdate) {
        DAST._IExpression _6030___mcc_h26 = _source242.dtor_expr;
        DAST._IExpression _6031___mcc_h27 = _source242.dtor_indexExpr;
        DAST._IExpression _6032___mcc_h28 = _source242.dtor_value;
        DAST._IExpression _6033_value = _6032___mcc_h28;
        DAST._IExpression _6034_index = _6031___mcc_h27;
        DAST._IExpression _6035_expr = _6030___mcc_h26;
        {
          RAST._IExpr _6036_exprR;
          DCOMP._IOwnership _6037___v111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6038_exprIdents;
          RAST._IExpr _out2418;
          DCOMP._IOwnership _out2419;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2420;
          DCOMP.COMP.GenExpr(_6035_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2418, out _out2419, out _out2420);
          _6036_exprR = _out2418;
          _6037___v111 = _out2419;
          _6038_exprIdents = _out2420;
          RAST._IExpr _6039_indexR;
          DCOMP._IOwnership _6040_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6041_indexIdents;
          RAST._IExpr _out2421;
          DCOMP._IOwnership _out2422;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2423;
          DCOMP.COMP.GenExpr(_6034_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2421, out _out2422, out _out2423);
          _6039_indexR = _out2421;
          _6040_indexOwnership = _out2422;
          _6041_indexIdents = _out2423;
          RAST._IExpr _6042_valueR;
          DCOMP._IOwnership _6043_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6044_valueIdents;
          RAST._IExpr _out2424;
          DCOMP._IOwnership _out2425;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2426;
          DCOMP.COMP.GenExpr(_6033_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2424, out _out2425, out _out2426);
          _6042_valueR = _out2424;
          _6043_valueOwnership = _out2425;
          _6044_valueIdents = _out2426;
          r = ((_6036_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6039_indexR, _6042_valueR));
          RAST._IExpr _out2427;
          DCOMP._IOwnership _out2428;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2427, out _out2428);
          r = _out2427;
          resultingOwnership = _out2428;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6038_exprIdents, _6041_indexIdents), _6044_valueIdents);
          return ;
        }
      } else if (_source242.is_MapUpdate) {
        DAST._IExpression _6045___mcc_h29 = _source242.dtor_expr;
        DAST._IExpression _6046___mcc_h30 = _source242.dtor_indexExpr;
        DAST._IExpression _6047___mcc_h31 = _source242.dtor_value;
        DAST._IExpression _6048_value = _6047___mcc_h31;
        DAST._IExpression _6049_index = _6046___mcc_h30;
        DAST._IExpression _6050_expr = _6045___mcc_h29;
        {
          RAST._IExpr _6051_exprR;
          DCOMP._IOwnership _6052___v112;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6053_exprIdents;
          RAST._IExpr _out2429;
          DCOMP._IOwnership _out2430;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2431;
          DCOMP.COMP.GenExpr(_6050_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2429, out _out2430, out _out2431);
          _6051_exprR = _out2429;
          _6052___v112 = _out2430;
          _6053_exprIdents = _out2431;
          RAST._IExpr _6054_indexR;
          DCOMP._IOwnership _6055_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6056_indexIdents;
          RAST._IExpr _out2432;
          DCOMP._IOwnership _out2433;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2434;
          DCOMP.COMP.GenExpr(_6049_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2432, out _out2433, out _out2434);
          _6054_indexR = _out2432;
          _6055_indexOwnership = _out2433;
          _6056_indexIdents = _out2434;
          RAST._IExpr _6057_valueR;
          DCOMP._IOwnership _6058_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6059_valueIdents;
          RAST._IExpr _out2435;
          DCOMP._IOwnership _out2436;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2437;
          DCOMP.COMP.GenExpr(_6048_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2435, out _out2436, out _out2437);
          _6057_valueR = _out2435;
          _6058_valueOwnership = _out2436;
          _6059_valueIdents = _out2437;
          r = ((_6051_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6054_indexR, _6057_valueR));
          RAST._IExpr _out2438;
          DCOMP._IOwnership _out2439;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2438, out _out2439);
          r = _out2438;
          resultingOwnership = _out2439;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6053_exprIdents, _6056_indexIdents), _6059_valueIdents);
          return ;
        }
      } else if (_source242.is_SetBuilder) {
        DAST._IType _6060___mcc_h32 = _source242.dtor_elemType;
        DAST._IType _6061_elemType = _6060___mcc_h32;
        {
          RAST._IType _6062_eType;
          RAST._IType _out2440;
          _out2440 = DCOMP.COMP.GenType(_6061_elemType, false, false);
          _6062_eType = _out2440;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_6062_eType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2441;
          DCOMP._IOwnership _out2442;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2441, out _out2442);
          r = _out2441;
          resultingOwnership = _out2442;
          return ;
        }
      } else if (_source242.is_ToMultiset) {
        DAST._IExpression _6063___mcc_h33 = _source242.dtor_ToMultiset_a0;
        DAST._IExpression _6064_expr = _6063___mcc_h33;
        {
          RAST._IExpr _6065_recursiveGen;
          DCOMP._IOwnership _6066___v108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6067_recIdents;
          RAST._IExpr _out2443;
          DCOMP._IOwnership _out2444;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2445;
          DCOMP.COMP.GenExpr(_6064_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2443, out _out2444, out _out2445);
          _6065_recursiveGen = _out2443;
          _6066___v108 = _out2444;
          _6067_recIdents = _out2445;
          r = ((_6065_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _6067_recIdents;
          RAST._IExpr _out2446;
          DCOMP._IOwnership _out2447;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2446, out _out2447);
          r = _out2446;
          resultingOwnership = _out2447;
          return ;
        }
      } else if (_source242.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source243 = selfIdent;
          if (_source243.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out2448;
              DCOMP._IOwnership _out2449;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2448, out _out2449);
              r = _out2448;
              resultingOwnership = _out2449;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6068___mcc_h273 = _source243.dtor_value;
            Dafny.ISequence<Dafny.Rune> _6069_id = _6068___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_6069_id);
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_6069_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_6069_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6069_id);
            }
          }
          return ;
        }
      } else if (_source242.is_Ite) {
        DAST._IExpression _6070___mcc_h34 = _source242.dtor_cond;
        DAST._IExpression _6071___mcc_h35 = _source242.dtor_thn;
        DAST._IExpression _6072___mcc_h36 = _source242.dtor_els;
        DAST._IExpression _6073_f = _6072___mcc_h36;
        DAST._IExpression _6074_t = _6071___mcc_h35;
        DAST._IExpression _6075_cond = _6070___mcc_h34;
        {
          RAST._IExpr _6076_cond;
          DCOMP._IOwnership _6077___v113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6078_recIdentsCond;
          RAST._IExpr _out2450;
          DCOMP._IOwnership _out2451;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2452;
          DCOMP.COMP.GenExpr(_6075_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2450, out _out2451, out _out2452);
          _6076_cond = _out2450;
          _6077___v113 = _out2451;
          _6078_recIdentsCond = _out2452;
          Dafny.ISequence<Dafny.Rune> _6079_condString;
          _6079_condString = (_6076_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _6080___v114;
          DCOMP._IOwnership _6081_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6082___v115;
          RAST._IExpr _out2453;
          DCOMP._IOwnership _out2454;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2455;
          DCOMP.COMP.GenExpr(_6074_t, selfIdent, env, expectedOwnership, out _out2453, out _out2454, out _out2455);
          _6080___v114 = _out2453;
          _6081_tHasToBeOwned = _out2454;
          _6082___v115 = _out2455;
          RAST._IExpr _6083_fExpr;
          DCOMP._IOwnership _6084_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6085_recIdentsF;
          RAST._IExpr _out2456;
          DCOMP._IOwnership _out2457;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2458;
          DCOMP.COMP.GenExpr(_6073_f, selfIdent, env, _6081_tHasToBeOwned, out _out2456, out _out2457, out _out2458);
          _6083_fExpr = _out2456;
          _6084_fOwned = _out2457;
          _6085_recIdentsF = _out2458;
          Dafny.ISequence<Dafny.Rune> _6086_fString;
          _6086_fString = (_6083_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _6087_tExpr;
          DCOMP._IOwnership _6088___v116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6089_recIdentsT;
          RAST._IExpr _out2459;
          DCOMP._IOwnership _out2460;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2461;
          DCOMP.COMP.GenExpr(_6074_t, selfIdent, env, _6084_fOwned, out _out2459, out _out2460, out _out2461);
          _6087_tExpr = _out2459;
          _6088___v116 = _out2460;
          _6089_recIdentsT = _out2461;
          Dafny.ISequence<Dafny.Rune> _6090_tString;
          _6090_tString = (_6087_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _6079_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _6090_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _6086_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out2462;
          DCOMP._IOwnership _out2463;
          DCOMP.COMP.FromOwnership(r, _6084_fOwned, expectedOwnership, out _out2462, out _out2463);
          r = _out2462;
          resultingOwnership = _out2463;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6078_recIdentsCond, _6089_recIdentsT), _6085_recIdentsF);
          return ;
        }
      } else if (_source242.is_UnOp) {
        DAST._IUnaryOp _6091___mcc_h37 = _source242.dtor_unOp;
        DAST._IExpression _6092___mcc_h38 = _source242.dtor_expr;
        DAST.Format._IUnOpFormat _6093___mcc_h39 = _source242.dtor_format1;
        DAST._IUnaryOp _source244 = _6091___mcc_h37;
        if (_source244.is_Not) {
          DAST.Format._IUnOpFormat _6094_format = _6093___mcc_h39;
          DAST._IExpression _6095_e = _6092___mcc_h38;
          {
            RAST._IExpr _6096_recursiveGen;
            DCOMP._IOwnership _6097___v117;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6098_recIdents;
            RAST._IExpr _out2464;
            DCOMP._IOwnership _out2465;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2466;
            DCOMP.COMP.GenExpr(_6095_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2464, out _out2465, out _out2466);
            _6096_recursiveGen = _out2464;
            _6097___v117 = _out2465;
            _6098_recIdents = _out2466;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _6096_recursiveGen, _6094_format);
            RAST._IExpr _out2467;
            DCOMP._IOwnership _out2468;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2467, out _out2468);
            r = _out2467;
            resultingOwnership = _out2468;
            readIdents = _6098_recIdents;
            return ;
          }
        } else if (_source244.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _6099_format = _6093___mcc_h39;
          DAST._IExpression _6100_e = _6092___mcc_h38;
          {
            RAST._IExpr _6101_recursiveGen;
            DCOMP._IOwnership _6102___v118;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6103_recIdents;
            RAST._IExpr _out2469;
            DCOMP._IOwnership _out2470;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2471;
            DCOMP.COMP.GenExpr(_6100_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2469, out _out2470, out _out2471);
            _6101_recursiveGen = _out2469;
            _6102___v118 = _out2470;
            _6103_recIdents = _out2471;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _6101_recursiveGen, _6099_format);
            RAST._IExpr _out2472;
            DCOMP._IOwnership _out2473;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2472, out _out2473);
            r = _out2472;
            resultingOwnership = _out2473;
            readIdents = _6103_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnOpFormat _6104_format = _6093___mcc_h39;
          DAST._IExpression _6105_e = _6092___mcc_h38;
          {
            RAST._IExpr _6106_recursiveGen;
            DCOMP._IOwnership _6107_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6108_recIdents;
            RAST._IExpr _out2474;
            DCOMP._IOwnership _out2475;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2476;
            DCOMP.COMP.GenExpr(_6105_e, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2474, out _out2475, out _out2476);
            _6106_recursiveGen = _out2474;
            _6107_recOwned = _out2475;
            _6108_recIdents = _out2476;
            r = ((_6106_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out2477;
            DCOMP._IOwnership _out2478;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2477, out _out2478);
            r = _out2477;
            resultingOwnership = _out2478;
            readIdents = _6108_recIdents;
            return ;
          }
        }
      } else if (_source242.is_BinOp) {
        DAST._IBinOp _6109___mcc_h40 = _source242.dtor_op;
        DAST._IExpression _6110___mcc_h41 = _source242.dtor_left;
        DAST._IExpression _6111___mcc_h42 = _source242.dtor_right;
        DAST.Format._IBinOpFormat _6112___mcc_h43 = _source242.dtor_format2;
        RAST._IExpr _out2479;
        DCOMP._IOwnership _out2480;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2481;
        DCOMP.COMP.GenExprBinary(e, selfIdent, env, expectedOwnership, out _out2479, out _out2480, out _out2481);
        r = _out2479;
        resultingOwnership = _out2480;
        readIdents = _out2481;
      } else if (_source242.is_ArrayLen) {
        DAST._IExpression _6113___mcc_h44 = _source242.dtor_expr;
        BigInteger _6114___mcc_h45 = _source242.dtor_dim;
        BigInteger _6115_dim = _6114___mcc_h45;
        DAST._IExpression _6116_expr = _6113___mcc_h44;
        {
          RAST._IExpr _6117_recursiveGen;
          DCOMP._IOwnership _6118___v123;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6119_recIdents;
          RAST._IExpr _out2482;
          DCOMP._IOwnership _out2483;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2484;
          DCOMP.COMP.GenExpr(_6116_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2482, out _out2483, out _out2484);
          _6117_recursiveGen = _out2482;
          _6118___v123 = _out2483;
          _6119_recIdents = _out2484;
          if ((_6115_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_6117_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _6120_s;
            _6120_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _6121_i;
            _6121_i = BigInteger.One;
            while ((_6121_i) < (_6115_dim)) {
              _6120_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _6120_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _6121_i = (_6121_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6117_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _6120_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out2485;
          DCOMP._IOwnership _out2486;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2485, out _out2486);
          r = _out2485;
          resultingOwnership = _out2486;
          readIdents = _6119_recIdents;
          return ;
        }
      } else if (_source242.is_MapKeys) {
        DAST._IExpression _6122___mcc_h46 = _source242.dtor_expr;
        DAST._IExpression _6123_expr = _6122___mcc_h46;
        {
          RAST._IExpr _6124_recursiveGen;
          DCOMP._IOwnership _6125___v124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6126_recIdents;
          RAST._IExpr _out2487;
          DCOMP._IOwnership _out2488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2489;
          DCOMP.COMP.GenExpr(_6123_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2487, out _out2488, out _out2489);
          _6124_recursiveGen = _out2487;
          _6125___v124 = _out2488;
          _6126_recIdents = _out2489;
          readIdents = _6126_recIdents;
          r = ((_6124_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2490;
          DCOMP._IOwnership _out2491;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2490, out _out2491);
          r = _out2490;
          resultingOwnership = _out2491;
          return ;
        }
      } else if (_source242.is_MapValues) {
        DAST._IExpression _6127___mcc_h47 = _source242.dtor_expr;
        DAST._IExpression _6128_expr = _6127___mcc_h47;
        {
          RAST._IExpr _6129_recursiveGen;
          DCOMP._IOwnership _6130___v125;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6131_recIdents;
          RAST._IExpr _out2492;
          DCOMP._IOwnership _out2493;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2494;
          DCOMP.COMP.GenExpr(_6128_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2492, out _out2493, out _out2494);
          _6129_recursiveGen = _out2492;
          _6130___v125 = _out2493;
          _6131_recIdents = _out2494;
          readIdents = _6131_recIdents;
          r = ((_6129_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2495;
          DCOMP._IOwnership _out2496;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2495, out _out2496);
          r = _out2495;
          resultingOwnership = _out2496;
          return ;
        }
      } else if (_source242.is_Select) {
        DAST._IExpression _6132___mcc_h48 = _source242.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _6133___mcc_h49 = _source242.dtor_field;
        bool _6134___mcc_h50 = _source242.dtor_isConstant;
        bool _6135___mcc_h51 = _source242.dtor_onDatatype;
        DAST._IExpression _source245 = _6132___mcc_h48;
        if (_source245.is_Literal) {
          DAST._ILiteral _6136___mcc_h52 = _source245.dtor_Literal_a0;
          bool _6137_isDatatype = _6135___mcc_h51;
          bool _6138_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6139_field = _6133___mcc_h49;
          DAST._IExpression _6140_on = _6132___mcc_h48;
          {
            RAST._IExpr _6141_onExpr;
            DCOMP._IOwnership _6142_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6143_recIdents;
            RAST._IExpr _out2497;
            DCOMP._IOwnership _out2498;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2499;
            DCOMP.COMP.GenExpr(_6140_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2497, out _out2498, out _out2499);
            _6141_onExpr = _out2497;
            _6142_onOwned = _out2498;
            _6143_recIdents = _out2499;
            if ((_6137_isDatatype) || (_6138_isConstant)) {
              r = ((_6141_onExpr).Sel(DCOMP.__default.escapeIdent(_6139_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2500;
              DCOMP._IOwnership _out2501;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2500, out _out2501);
              r = _out2500;
              resultingOwnership = _out2501;
            } else {
              Dafny.ISequence<Dafny.Rune> _6144_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6144_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6141_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6139_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2502;
              DCOMP._IOwnership _out2503;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6144_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2502, out _out2503);
              r = _out2502;
              resultingOwnership = _out2503;
            }
            readIdents = _6143_recIdents;
            return ;
          }
        } else if (_source245.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _6145___mcc_h54 = _source245.dtor_Ident_a0;
          bool _6146_isDatatype = _6135___mcc_h51;
          bool _6147_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6148_field = _6133___mcc_h49;
          DAST._IExpression _6149_on = _6132___mcc_h48;
          {
            RAST._IExpr _6150_onExpr;
            DCOMP._IOwnership _6151_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6152_recIdents;
            RAST._IExpr _out2504;
            DCOMP._IOwnership _out2505;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2506;
            DCOMP.COMP.GenExpr(_6149_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2504, out _out2505, out _out2506);
            _6150_onExpr = _out2504;
            _6151_onOwned = _out2505;
            _6152_recIdents = _out2506;
            if ((_6146_isDatatype) || (_6147_isConstant)) {
              r = ((_6150_onExpr).Sel(DCOMP.__default.escapeIdent(_6148_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2507;
              DCOMP._IOwnership _out2508;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2507, out _out2508);
              r = _out2507;
              resultingOwnership = _out2508;
            } else {
              Dafny.ISequence<Dafny.Rune> _6153_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6153_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6150_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6148_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2509;
              DCOMP._IOwnership _out2510;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6153_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2509, out _out2510);
              r = _out2509;
              resultingOwnership = _out2510;
            }
            readIdents = _6152_recIdents;
            return ;
          }
        } else if (_source245.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6154___mcc_h56 = _source245.dtor_Companion_a0;
          bool _6155_isDatatype = _6135___mcc_h51;
          bool _6156_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6157_field = _6133___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6158_c = _6154___mcc_h56;
          {
            RAST._IExpr _6159_onExpr;
            DCOMP._IOwnership _6160_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6161_recIdents;
            RAST._IExpr _out2511;
            DCOMP._IOwnership _out2512;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2513;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_6158_c), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2511, out _out2512, out _out2513);
            _6159_onExpr = _out2511;
            _6160_onOwned = _out2512;
            _6161_recIdents = _out2513;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6159_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_6157_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out2514;
            DCOMP._IOwnership _out2515;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2514, out _out2515);
            r = _out2514;
            resultingOwnership = _out2515;
            readIdents = _6161_recIdents;
            return ;
          }
        } else if (_source245.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _6162___mcc_h58 = _source245.dtor_Tuple_a0;
          bool _6163_isDatatype = _6135___mcc_h51;
          bool _6164_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6165_field = _6133___mcc_h49;
          DAST._IExpression _6166_on = _6132___mcc_h48;
          {
            RAST._IExpr _6167_onExpr;
            DCOMP._IOwnership _6168_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6169_recIdents;
            RAST._IExpr _out2516;
            DCOMP._IOwnership _out2517;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2518;
            DCOMP.COMP.GenExpr(_6166_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2516, out _out2517, out _out2518);
            _6167_onExpr = _out2516;
            _6168_onOwned = _out2517;
            _6169_recIdents = _out2518;
            if ((_6163_isDatatype) || (_6164_isConstant)) {
              r = ((_6167_onExpr).Sel(DCOMP.__default.escapeIdent(_6165_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2519;
              DCOMP._IOwnership _out2520;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2519, out _out2520);
              r = _out2519;
              resultingOwnership = _out2520;
            } else {
              Dafny.ISequence<Dafny.Rune> _6170_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6170_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6167_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6165_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2521;
              DCOMP._IOwnership _out2522;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6170_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2521, out _out2522);
              r = _out2521;
              resultingOwnership = _out2522;
            }
            readIdents = _6169_recIdents;
            return ;
          }
        } else if (_source245.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6171___mcc_h60 = _source245.dtor_path;
          Dafny.ISequence<DAST._IType> _6172___mcc_h61 = _source245.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _6173___mcc_h62 = _source245.dtor_args;
          bool _6174_isDatatype = _6135___mcc_h51;
          bool _6175_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6176_field = _6133___mcc_h49;
          DAST._IExpression _6177_on = _6132___mcc_h48;
          {
            RAST._IExpr _6178_onExpr;
            DCOMP._IOwnership _6179_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6180_recIdents;
            RAST._IExpr _out2523;
            DCOMP._IOwnership _out2524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2525;
            DCOMP.COMP.GenExpr(_6177_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2523, out _out2524, out _out2525);
            _6178_onExpr = _out2523;
            _6179_onOwned = _out2524;
            _6180_recIdents = _out2525;
            if ((_6174_isDatatype) || (_6175_isConstant)) {
              r = ((_6178_onExpr).Sel(DCOMP.__default.escapeIdent(_6176_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2526;
              DCOMP._IOwnership _out2527;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2526, out _out2527);
              r = _out2526;
              resultingOwnership = _out2527;
            } else {
              Dafny.ISequence<Dafny.Rune> _6181_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6181_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6178_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6176_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2528;
              DCOMP._IOwnership _out2529;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6181_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2528, out _out2529);
              r = _out2528;
              resultingOwnership = _out2529;
            }
            readIdents = _6180_recIdents;
            return ;
          }
        } else if (_source245.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _6182___mcc_h66 = _source245.dtor_dims;
          DAST._IType _6183___mcc_h67 = _source245.dtor_typ;
          bool _6184_isDatatype = _6135___mcc_h51;
          bool _6185_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6186_field = _6133___mcc_h49;
          DAST._IExpression _6187_on = _6132___mcc_h48;
          {
            RAST._IExpr _6188_onExpr;
            DCOMP._IOwnership _6189_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6190_recIdents;
            RAST._IExpr _out2530;
            DCOMP._IOwnership _out2531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2532;
            DCOMP.COMP.GenExpr(_6187_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2530, out _out2531, out _out2532);
            _6188_onExpr = _out2530;
            _6189_onOwned = _out2531;
            _6190_recIdents = _out2532;
            if ((_6184_isDatatype) || (_6185_isConstant)) {
              r = ((_6188_onExpr).Sel(DCOMP.__default.escapeIdent(_6186_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2533;
              DCOMP._IOwnership _out2534;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2533, out _out2534);
              r = _out2533;
              resultingOwnership = _out2534;
            } else {
              Dafny.ISequence<Dafny.Rune> _6191_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6191_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6188_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6186_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2535;
              DCOMP._IOwnership _out2536;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6191_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2535, out _out2536);
              r = _out2535;
              resultingOwnership = _out2536;
            }
            readIdents = _6190_recIdents;
            return ;
          }
        } else if (_source245.is_DatatypeValue) {
          DAST._IDatatypeType _6192___mcc_h70 = _source245.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _6193___mcc_h71 = _source245.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _6194___mcc_h72 = _source245.dtor_variant;
          bool _6195___mcc_h73 = _source245.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6196___mcc_h74 = _source245.dtor_contents;
          bool _6197_isDatatype = _6135___mcc_h51;
          bool _6198_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6199_field = _6133___mcc_h49;
          DAST._IExpression _6200_on = _6132___mcc_h48;
          {
            RAST._IExpr _6201_onExpr;
            DCOMP._IOwnership _6202_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6203_recIdents;
            RAST._IExpr _out2537;
            DCOMP._IOwnership _out2538;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2539;
            DCOMP.COMP.GenExpr(_6200_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2537, out _out2538, out _out2539);
            _6201_onExpr = _out2537;
            _6202_onOwned = _out2538;
            _6203_recIdents = _out2539;
            if ((_6197_isDatatype) || (_6198_isConstant)) {
              r = ((_6201_onExpr).Sel(DCOMP.__default.escapeIdent(_6199_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2540;
              DCOMP._IOwnership _out2541;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2540, out _out2541);
              r = _out2540;
              resultingOwnership = _out2541;
            } else {
              Dafny.ISequence<Dafny.Rune> _6204_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6204_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6201_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6199_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2542;
              DCOMP._IOwnership _out2543;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6204_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2542, out _out2543);
              r = _out2542;
              resultingOwnership = _out2543;
            }
            readIdents = _6203_recIdents;
            return ;
          }
        } else if (_source245.is_Convert) {
          DAST._IExpression _6205___mcc_h80 = _source245.dtor_value;
          DAST._IType _6206___mcc_h81 = _source245.dtor_from;
          DAST._IType _6207___mcc_h82 = _source245.dtor_typ;
          bool _6208_isDatatype = _6135___mcc_h51;
          bool _6209_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6210_field = _6133___mcc_h49;
          DAST._IExpression _6211_on = _6132___mcc_h48;
          {
            RAST._IExpr _6212_onExpr;
            DCOMP._IOwnership _6213_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6214_recIdents;
            RAST._IExpr _out2544;
            DCOMP._IOwnership _out2545;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2546;
            DCOMP.COMP.GenExpr(_6211_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2544, out _out2545, out _out2546);
            _6212_onExpr = _out2544;
            _6213_onOwned = _out2545;
            _6214_recIdents = _out2546;
            if ((_6208_isDatatype) || (_6209_isConstant)) {
              r = ((_6212_onExpr).Sel(DCOMP.__default.escapeIdent(_6210_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2547;
              DCOMP._IOwnership _out2548;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2547, out _out2548);
              r = _out2547;
              resultingOwnership = _out2548;
            } else {
              Dafny.ISequence<Dafny.Rune> _6215_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6215_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6212_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6210_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2549;
              DCOMP._IOwnership _out2550;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6215_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2549, out _out2550);
              r = _out2549;
              resultingOwnership = _out2550;
            }
            readIdents = _6214_recIdents;
            return ;
          }
        } else if (_source245.is_SeqConstruct) {
          DAST._IExpression _6216___mcc_h86 = _source245.dtor_length;
          DAST._IExpression _6217___mcc_h87 = _source245.dtor_elem;
          bool _6218_isDatatype = _6135___mcc_h51;
          bool _6219_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6220_field = _6133___mcc_h49;
          DAST._IExpression _6221_on = _6132___mcc_h48;
          {
            RAST._IExpr _6222_onExpr;
            DCOMP._IOwnership _6223_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6224_recIdents;
            RAST._IExpr _out2551;
            DCOMP._IOwnership _out2552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2553;
            DCOMP.COMP.GenExpr(_6221_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2551, out _out2552, out _out2553);
            _6222_onExpr = _out2551;
            _6223_onOwned = _out2552;
            _6224_recIdents = _out2553;
            if ((_6218_isDatatype) || (_6219_isConstant)) {
              r = ((_6222_onExpr).Sel(DCOMP.__default.escapeIdent(_6220_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2554;
              DCOMP._IOwnership _out2555;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2554, out _out2555);
              r = _out2554;
              resultingOwnership = _out2555;
            } else {
              Dafny.ISequence<Dafny.Rune> _6225_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6225_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6222_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6220_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2556;
              DCOMP._IOwnership _out2557;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6225_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2556, out _out2557);
              r = _out2556;
              resultingOwnership = _out2557;
            }
            readIdents = _6224_recIdents;
            return ;
          }
        } else if (_source245.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _6226___mcc_h90 = _source245.dtor_elements;
          DAST._IType _6227___mcc_h91 = _source245.dtor_typ;
          bool _6228_isDatatype = _6135___mcc_h51;
          bool _6229_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6230_field = _6133___mcc_h49;
          DAST._IExpression _6231_on = _6132___mcc_h48;
          {
            RAST._IExpr _6232_onExpr;
            DCOMP._IOwnership _6233_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6234_recIdents;
            RAST._IExpr _out2558;
            DCOMP._IOwnership _out2559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2560;
            DCOMP.COMP.GenExpr(_6231_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2558, out _out2559, out _out2560);
            _6232_onExpr = _out2558;
            _6233_onOwned = _out2559;
            _6234_recIdents = _out2560;
            if ((_6228_isDatatype) || (_6229_isConstant)) {
              r = ((_6232_onExpr).Sel(DCOMP.__default.escapeIdent(_6230_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2561;
              DCOMP._IOwnership _out2562;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2561, out _out2562);
              r = _out2561;
              resultingOwnership = _out2562;
            } else {
              Dafny.ISequence<Dafny.Rune> _6235_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6235_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6232_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6230_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2563;
              DCOMP._IOwnership _out2564;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6235_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2563, out _out2564);
              r = _out2563;
              resultingOwnership = _out2564;
            }
            readIdents = _6234_recIdents;
            return ;
          }
        } else if (_source245.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _6236___mcc_h94 = _source245.dtor_elements;
          bool _6237_isDatatype = _6135___mcc_h51;
          bool _6238_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6239_field = _6133___mcc_h49;
          DAST._IExpression _6240_on = _6132___mcc_h48;
          {
            RAST._IExpr _6241_onExpr;
            DCOMP._IOwnership _6242_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6243_recIdents;
            RAST._IExpr _out2565;
            DCOMP._IOwnership _out2566;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2567;
            DCOMP.COMP.GenExpr(_6240_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2565, out _out2566, out _out2567);
            _6241_onExpr = _out2565;
            _6242_onOwned = _out2566;
            _6243_recIdents = _out2567;
            if ((_6237_isDatatype) || (_6238_isConstant)) {
              r = ((_6241_onExpr).Sel(DCOMP.__default.escapeIdent(_6239_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2568;
              DCOMP._IOwnership _out2569;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2568, out _out2569);
              r = _out2568;
              resultingOwnership = _out2569;
            } else {
              Dafny.ISequence<Dafny.Rune> _6244_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6244_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6241_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6239_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2570;
              DCOMP._IOwnership _out2571;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6244_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2570, out _out2571);
              r = _out2570;
              resultingOwnership = _out2571;
            }
            readIdents = _6243_recIdents;
            return ;
          }
        } else if (_source245.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _6245___mcc_h96 = _source245.dtor_elements;
          bool _6246_isDatatype = _6135___mcc_h51;
          bool _6247_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6248_field = _6133___mcc_h49;
          DAST._IExpression _6249_on = _6132___mcc_h48;
          {
            RAST._IExpr _6250_onExpr;
            DCOMP._IOwnership _6251_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6252_recIdents;
            RAST._IExpr _out2572;
            DCOMP._IOwnership _out2573;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2574;
            DCOMP.COMP.GenExpr(_6249_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2572, out _out2573, out _out2574);
            _6250_onExpr = _out2572;
            _6251_onOwned = _out2573;
            _6252_recIdents = _out2574;
            if ((_6246_isDatatype) || (_6247_isConstant)) {
              r = ((_6250_onExpr).Sel(DCOMP.__default.escapeIdent(_6248_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2575;
              DCOMP._IOwnership _out2576;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2575, out _out2576);
              r = _out2575;
              resultingOwnership = _out2576;
            } else {
              Dafny.ISequence<Dafny.Rune> _6253_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6253_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6250_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6248_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2577;
              DCOMP._IOwnership _out2578;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6253_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2577, out _out2578);
              r = _out2577;
              resultingOwnership = _out2578;
            }
            readIdents = _6252_recIdents;
            return ;
          }
        } else if (_source245.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6254___mcc_h98 = _source245.dtor_mapElems;
          bool _6255_isDatatype = _6135___mcc_h51;
          bool _6256_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6257_field = _6133___mcc_h49;
          DAST._IExpression _6258_on = _6132___mcc_h48;
          {
            RAST._IExpr _6259_onExpr;
            DCOMP._IOwnership _6260_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6261_recIdents;
            RAST._IExpr _out2579;
            DCOMP._IOwnership _out2580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2581;
            DCOMP.COMP.GenExpr(_6258_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2579, out _out2580, out _out2581);
            _6259_onExpr = _out2579;
            _6260_onOwned = _out2580;
            _6261_recIdents = _out2581;
            if ((_6255_isDatatype) || (_6256_isConstant)) {
              r = ((_6259_onExpr).Sel(DCOMP.__default.escapeIdent(_6257_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2582;
              DCOMP._IOwnership _out2583;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2582, out _out2583);
              r = _out2582;
              resultingOwnership = _out2583;
            } else {
              Dafny.ISequence<Dafny.Rune> _6262_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6262_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6259_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6257_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2584;
              DCOMP._IOwnership _out2585;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6262_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2584, out _out2585);
              r = _out2584;
              resultingOwnership = _out2585;
            }
            readIdents = _6261_recIdents;
            return ;
          }
        } else if (_source245.is_MapBuilder) {
          DAST._IType _6263___mcc_h100 = _source245.dtor_keyType;
          DAST._IType _6264___mcc_h101 = _source245.dtor_valueType;
          bool _6265_isDatatype = _6135___mcc_h51;
          bool _6266_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6267_field = _6133___mcc_h49;
          DAST._IExpression _6268_on = _6132___mcc_h48;
          {
            RAST._IExpr _6269_onExpr;
            DCOMP._IOwnership _6270_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6271_recIdents;
            RAST._IExpr _out2586;
            DCOMP._IOwnership _out2587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2588;
            DCOMP.COMP.GenExpr(_6268_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2586, out _out2587, out _out2588);
            _6269_onExpr = _out2586;
            _6270_onOwned = _out2587;
            _6271_recIdents = _out2588;
            if ((_6265_isDatatype) || (_6266_isConstant)) {
              r = ((_6269_onExpr).Sel(DCOMP.__default.escapeIdent(_6267_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2589;
              DCOMP._IOwnership _out2590;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2589, out _out2590);
              r = _out2589;
              resultingOwnership = _out2590;
            } else {
              Dafny.ISequence<Dafny.Rune> _6272_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6272_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6269_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6267_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2591;
              DCOMP._IOwnership _out2592;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6272_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2591, out _out2592);
              r = _out2591;
              resultingOwnership = _out2592;
            }
            readIdents = _6271_recIdents;
            return ;
          }
        } else if (_source245.is_SeqUpdate) {
          DAST._IExpression _6273___mcc_h104 = _source245.dtor_expr;
          DAST._IExpression _6274___mcc_h105 = _source245.dtor_indexExpr;
          DAST._IExpression _6275___mcc_h106 = _source245.dtor_value;
          bool _6276_isDatatype = _6135___mcc_h51;
          bool _6277_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6278_field = _6133___mcc_h49;
          DAST._IExpression _6279_on = _6132___mcc_h48;
          {
            RAST._IExpr _6280_onExpr;
            DCOMP._IOwnership _6281_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6282_recIdents;
            RAST._IExpr _out2593;
            DCOMP._IOwnership _out2594;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2595;
            DCOMP.COMP.GenExpr(_6279_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2593, out _out2594, out _out2595);
            _6280_onExpr = _out2593;
            _6281_onOwned = _out2594;
            _6282_recIdents = _out2595;
            if ((_6276_isDatatype) || (_6277_isConstant)) {
              r = ((_6280_onExpr).Sel(DCOMP.__default.escapeIdent(_6278_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2596;
              DCOMP._IOwnership _out2597;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2596, out _out2597);
              r = _out2596;
              resultingOwnership = _out2597;
            } else {
              Dafny.ISequence<Dafny.Rune> _6283_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6283_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6280_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6278_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2598;
              DCOMP._IOwnership _out2599;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6283_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2598, out _out2599);
              r = _out2598;
              resultingOwnership = _out2599;
            }
            readIdents = _6282_recIdents;
            return ;
          }
        } else if (_source245.is_MapUpdate) {
          DAST._IExpression _6284___mcc_h110 = _source245.dtor_expr;
          DAST._IExpression _6285___mcc_h111 = _source245.dtor_indexExpr;
          DAST._IExpression _6286___mcc_h112 = _source245.dtor_value;
          bool _6287_isDatatype = _6135___mcc_h51;
          bool _6288_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6289_field = _6133___mcc_h49;
          DAST._IExpression _6290_on = _6132___mcc_h48;
          {
            RAST._IExpr _6291_onExpr;
            DCOMP._IOwnership _6292_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6293_recIdents;
            RAST._IExpr _out2600;
            DCOMP._IOwnership _out2601;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2602;
            DCOMP.COMP.GenExpr(_6290_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2600, out _out2601, out _out2602);
            _6291_onExpr = _out2600;
            _6292_onOwned = _out2601;
            _6293_recIdents = _out2602;
            if ((_6287_isDatatype) || (_6288_isConstant)) {
              r = ((_6291_onExpr).Sel(DCOMP.__default.escapeIdent(_6289_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2603;
              DCOMP._IOwnership _out2604;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2603, out _out2604);
              r = _out2603;
              resultingOwnership = _out2604;
            } else {
              Dafny.ISequence<Dafny.Rune> _6294_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6294_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6291_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6289_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2605;
              DCOMP._IOwnership _out2606;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6294_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2605, out _out2606);
              r = _out2605;
              resultingOwnership = _out2606;
            }
            readIdents = _6293_recIdents;
            return ;
          }
        } else if (_source245.is_SetBuilder) {
          DAST._IType _6295___mcc_h116 = _source245.dtor_elemType;
          bool _6296_isDatatype = _6135___mcc_h51;
          bool _6297_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6298_field = _6133___mcc_h49;
          DAST._IExpression _6299_on = _6132___mcc_h48;
          {
            RAST._IExpr _6300_onExpr;
            DCOMP._IOwnership _6301_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6302_recIdents;
            RAST._IExpr _out2607;
            DCOMP._IOwnership _out2608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2609;
            DCOMP.COMP.GenExpr(_6299_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2607, out _out2608, out _out2609);
            _6300_onExpr = _out2607;
            _6301_onOwned = _out2608;
            _6302_recIdents = _out2609;
            if ((_6296_isDatatype) || (_6297_isConstant)) {
              r = ((_6300_onExpr).Sel(DCOMP.__default.escapeIdent(_6298_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2610;
              DCOMP._IOwnership _out2611;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2610, out _out2611);
              r = _out2610;
              resultingOwnership = _out2611;
            } else {
              Dafny.ISequence<Dafny.Rune> _6303_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6303_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6300_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6298_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2612;
              DCOMP._IOwnership _out2613;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6303_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2612, out _out2613);
              r = _out2612;
              resultingOwnership = _out2613;
            }
            readIdents = _6302_recIdents;
            return ;
          }
        } else if (_source245.is_ToMultiset) {
          DAST._IExpression _6304___mcc_h118 = _source245.dtor_ToMultiset_a0;
          bool _6305_isDatatype = _6135___mcc_h51;
          bool _6306_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6307_field = _6133___mcc_h49;
          DAST._IExpression _6308_on = _6132___mcc_h48;
          {
            RAST._IExpr _6309_onExpr;
            DCOMP._IOwnership _6310_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6311_recIdents;
            RAST._IExpr _out2614;
            DCOMP._IOwnership _out2615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2616;
            DCOMP.COMP.GenExpr(_6308_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2614, out _out2615, out _out2616);
            _6309_onExpr = _out2614;
            _6310_onOwned = _out2615;
            _6311_recIdents = _out2616;
            if ((_6305_isDatatype) || (_6306_isConstant)) {
              r = ((_6309_onExpr).Sel(DCOMP.__default.escapeIdent(_6307_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2617;
              DCOMP._IOwnership _out2618;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2617, out _out2618);
              r = _out2617;
              resultingOwnership = _out2618;
            } else {
              Dafny.ISequence<Dafny.Rune> _6312_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6312_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6309_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6307_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2619;
              DCOMP._IOwnership _out2620;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6312_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2619, out _out2620);
              r = _out2619;
              resultingOwnership = _out2620;
            }
            readIdents = _6311_recIdents;
            return ;
          }
        } else if (_source245.is_This) {
          bool _6313_isDatatype = _6135___mcc_h51;
          bool _6314_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6315_field = _6133___mcc_h49;
          DAST._IExpression _6316_on = _6132___mcc_h48;
          {
            RAST._IExpr _6317_onExpr;
            DCOMP._IOwnership _6318_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6319_recIdents;
            RAST._IExpr _out2621;
            DCOMP._IOwnership _out2622;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2623;
            DCOMP.COMP.GenExpr(_6316_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2621, out _out2622, out _out2623);
            _6317_onExpr = _out2621;
            _6318_onOwned = _out2622;
            _6319_recIdents = _out2623;
            if ((_6313_isDatatype) || (_6314_isConstant)) {
              r = ((_6317_onExpr).Sel(DCOMP.__default.escapeIdent(_6315_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2624;
              DCOMP._IOwnership _out2625;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2624, out _out2625);
              r = _out2624;
              resultingOwnership = _out2625;
            } else {
              Dafny.ISequence<Dafny.Rune> _6320_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6320_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6317_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6315_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2626;
              DCOMP._IOwnership _out2627;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6320_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2626, out _out2627);
              r = _out2626;
              resultingOwnership = _out2627;
            }
            readIdents = _6319_recIdents;
            return ;
          }
        } else if (_source245.is_Ite) {
          DAST._IExpression _6321___mcc_h120 = _source245.dtor_cond;
          DAST._IExpression _6322___mcc_h121 = _source245.dtor_thn;
          DAST._IExpression _6323___mcc_h122 = _source245.dtor_els;
          bool _6324_isDatatype = _6135___mcc_h51;
          bool _6325_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6326_field = _6133___mcc_h49;
          DAST._IExpression _6327_on = _6132___mcc_h48;
          {
            RAST._IExpr _6328_onExpr;
            DCOMP._IOwnership _6329_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6330_recIdents;
            RAST._IExpr _out2628;
            DCOMP._IOwnership _out2629;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2630;
            DCOMP.COMP.GenExpr(_6327_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2628, out _out2629, out _out2630);
            _6328_onExpr = _out2628;
            _6329_onOwned = _out2629;
            _6330_recIdents = _out2630;
            if ((_6324_isDatatype) || (_6325_isConstant)) {
              r = ((_6328_onExpr).Sel(DCOMP.__default.escapeIdent(_6326_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2631;
              DCOMP._IOwnership _out2632;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2631, out _out2632);
              r = _out2631;
              resultingOwnership = _out2632;
            } else {
              Dafny.ISequence<Dafny.Rune> _6331_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6331_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6328_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6326_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2633;
              DCOMP._IOwnership _out2634;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6331_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2633, out _out2634);
              r = _out2633;
              resultingOwnership = _out2634;
            }
            readIdents = _6330_recIdents;
            return ;
          }
        } else if (_source245.is_UnOp) {
          DAST._IUnaryOp _6332___mcc_h126 = _source245.dtor_unOp;
          DAST._IExpression _6333___mcc_h127 = _source245.dtor_expr;
          DAST.Format._IUnOpFormat _6334___mcc_h128 = _source245.dtor_format1;
          bool _6335_isDatatype = _6135___mcc_h51;
          bool _6336_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6337_field = _6133___mcc_h49;
          DAST._IExpression _6338_on = _6132___mcc_h48;
          {
            RAST._IExpr _6339_onExpr;
            DCOMP._IOwnership _6340_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6341_recIdents;
            RAST._IExpr _out2635;
            DCOMP._IOwnership _out2636;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2637;
            DCOMP.COMP.GenExpr(_6338_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2635, out _out2636, out _out2637);
            _6339_onExpr = _out2635;
            _6340_onOwned = _out2636;
            _6341_recIdents = _out2637;
            if ((_6335_isDatatype) || (_6336_isConstant)) {
              r = ((_6339_onExpr).Sel(DCOMP.__default.escapeIdent(_6337_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2638;
              DCOMP._IOwnership _out2639;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2638, out _out2639);
              r = _out2638;
              resultingOwnership = _out2639;
            } else {
              Dafny.ISequence<Dafny.Rune> _6342_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6342_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6339_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6337_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2640;
              DCOMP._IOwnership _out2641;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6342_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2640, out _out2641);
              r = _out2640;
              resultingOwnership = _out2641;
            }
            readIdents = _6341_recIdents;
            return ;
          }
        } else if (_source245.is_BinOp) {
          DAST._IBinOp _6343___mcc_h132 = _source245.dtor_op;
          DAST._IExpression _6344___mcc_h133 = _source245.dtor_left;
          DAST._IExpression _6345___mcc_h134 = _source245.dtor_right;
          DAST.Format._IBinOpFormat _6346___mcc_h135 = _source245.dtor_format2;
          bool _6347_isDatatype = _6135___mcc_h51;
          bool _6348_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6349_field = _6133___mcc_h49;
          DAST._IExpression _6350_on = _6132___mcc_h48;
          {
            RAST._IExpr _6351_onExpr;
            DCOMP._IOwnership _6352_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6353_recIdents;
            RAST._IExpr _out2642;
            DCOMP._IOwnership _out2643;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2644;
            DCOMP.COMP.GenExpr(_6350_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2642, out _out2643, out _out2644);
            _6351_onExpr = _out2642;
            _6352_onOwned = _out2643;
            _6353_recIdents = _out2644;
            if ((_6347_isDatatype) || (_6348_isConstant)) {
              r = ((_6351_onExpr).Sel(DCOMP.__default.escapeIdent(_6349_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2645;
              DCOMP._IOwnership _out2646;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2645, out _out2646);
              r = _out2645;
              resultingOwnership = _out2646;
            } else {
              Dafny.ISequence<Dafny.Rune> _6354_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6354_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6351_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6349_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2647;
              DCOMP._IOwnership _out2648;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6354_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2647, out _out2648);
              r = _out2647;
              resultingOwnership = _out2648;
            }
            readIdents = _6353_recIdents;
            return ;
          }
        } else if (_source245.is_ArrayLen) {
          DAST._IExpression _6355___mcc_h140 = _source245.dtor_expr;
          BigInteger _6356___mcc_h141 = _source245.dtor_dim;
          bool _6357_isDatatype = _6135___mcc_h51;
          bool _6358_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6359_field = _6133___mcc_h49;
          DAST._IExpression _6360_on = _6132___mcc_h48;
          {
            RAST._IExpr _6361_onExpr;
            DCOMP._IOwnership _6362_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6363_recIdents;
            RAST._IExpr _out2649;
            DCOMP._IOwnership _out2650;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2651;
            DCOMP.COMP.GenExpr(_6360_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2649, out _out2650, out _out2651);
            _6361_onExpr = _out2649;
            _6362_onOwned = _out2650;
            _6363_recIdents = _out2651;
            if ((_6357_isDatatype) || (_6358_isConstant)) {
              r = ((_6361_onExpr).Sel(DCOMP.__default.escapeIdent(_6359_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2652;
              DCOMP._IOwnership _out2653;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2652, out _out2653);
              r = _out2652;
              resultingOwnership = _out2653;
            } else {
              Dafny.ISequence<Dafny.Rune> _6364_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6364_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6361_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6359_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2654;
              DCOMP._IOwnership _out2655;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6364_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2654, out _out2655);
              r = _out2654;
              resultingOwnership = _out2655;
            }
            readIdents = _6363_recIdents;
            return ;
          }
        } else if (_source245.is_MapKeys) {
          DAST._IExpression _6365___mcc_h144 = _source245.dtor_expr;
          bool _6366_isDatatype = _6135___mcc_h51;
          bool _6367_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6368_field = _6133___mcc_h49;
          DAST._IExpression _6369_on = _6132___mcc_h48;
          {
            RAST._IExpr _6370_onExpr;
            DCOMP._IOwnership _6371_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6372_recIdents;
            RAST._IExpr _out2656;
            DCOMP._IOwnership _out2657;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2658;
            DCOMP.COMP.GenExpr(_6369_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2656, out _out2657, out _out2658);
            _6370_onExpr = _out2656;
            _6371_onOwned = _out2657;
            _6372_recIdents = _out2658;
            if ((_6366_isDatatype) || (_6367_isConstant)) {
              r = ((_6370_onExpr).Sel(DCOMP.__default.escapeIdent(_6368_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2659;
              DCOMP._IOwnership _out2660;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2659, out _out2660);
              r = _out2659;
              resultingOwnership = _out2660;
            } else {
              Dafny.ISequence<Dafny.Rune> _6373_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6373_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6370_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6368_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2661;
              DCOMP._IOwnership _out2662;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6373_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2661, out _out2662);
              r = _out2661;
              resultingOwnership = _out2662;
            }
            readIdents = _6372_recIdents;
            return ;
          }
        } else if (_source245.is_MapValues) {
          DAST._IExpression _6374___mcc_h146 = _source245.dtor_expr;
          bool _6375_isDatatype = _6135___mcc_h51;
          bool _6376_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6377_field = _6133___mcc_h49;
          DAST._IExpression _6378_on = _6132___mcc_h48;
          {
            RAST._IExpr _6379_onExpr;
            DCOMP._IOwnership _6380_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6381_recIdents;
            RAST._IExpr _out2663;
            DCOMP._IOwnership _out2664;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2665;
            DCOMP.COMP.GenExpr(_6378_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2663, out _out2664, out _out2665);
            _6379_onExpr = _out2663;
            _6380_onOwned = _out2664;
            _6381_recIdents = _out2665;
            if ((_6375_isDatatype) || (_6376_isConstant)) {
              r = ((_6379_onExpr).Sel(DCOMP.__default.escapeIdent(_6377_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2666;
              DCOMP._IOwnership _out2667;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2666, out _out2667);
              r = _out2666;
              resultingOwnership = _out2667;
            } else {
              Dafny.ISequence<Dafny.Rune> _6382_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6382_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6379_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6377_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2668;
              DCOMP._IOwnership _out2669;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6382_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2668, out _out2669);
              r = _out2668;
              resultingOwnership = _out2669;
            }
            readIdents = _6381_recIdents;
            return ;
          }
        } else if (_source245.is_Select) {
          DAST._IExpression _6383___mcc_h148 = _source245.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _6384___mcc_h149 = _source245.dtor_field;
          bool _6385___mcc_h150 = _source245.dtor_isConstant;
          bool _6386___mcc_h151 = _source245.dtor_onDatatype;
          bool _6387_isDatatype = _6135___mcc_h51;
          bool _6388_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6389_field = _6133___mcc_h49;
          DAST._IExpression _6390_on = _6132___mcc_h48;
          {
            RAST._IExpr _6391_onExpr;
            DCOMP._IOwnership _6392_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6393_recIdents;
            RAST._IExpr _out2670;
            DCOMP._IOwnership _out2671;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2672;
            DCOMP.COMP.GenExpr(_6390_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2670, out _out2671, out _out2672);
            _6391_onExpr = _out2670;
            _6392_onOwned = _out2671;
            _6393_recIdents = _out2672;
            if ((_6387_isDatatype) || (_6388_isConstant)) {
              r = ((_6391_onExpr).Sel(DCOMP.__default.escapeIdent(_6389_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2673;
              DCOMP._IOwnership _out2674;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2673, out _out2674);
              r = _out2673;
              resultingOwnership = _out2674;
            } else {
              Dafny.ISequence<Dafny.Rune> _6394_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6394_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6391_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6389_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2675;
              DCOMP._IOwnership _out2676;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6394_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2675, out _out2676);
              r = _out2675;
              resultingOwnership = _out2676;
            }
            readIdents = _6393_recIdents;
            return ;
          }
        } else if (_source245.is_SelectFn) {
          DAST._IExpression _6395___mcc_h156 = _source245.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _6396___mcc_h157 = _source245.dtor_field;
          bool _6397___mcc_h158 = _source245.dtor_onDatatype;
          bool _6398___mcc_h159 = _source245.dtor_isStatic;
          BigInteger _6399___mcc_h160 = _source245.dtor_arity;
          bool _6400_isDatatype = _6135___mcc_h51;
          bool _6401_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6402_field = _6133___mcc_h49;
          DAST._IExpression _6403_on = _6132___mcc_h48;
          {
            RAST._IExpr _6404_onExpr;
            DCOMP._IOwnership _6405_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6406_recIdents;
            RAST._IExpr _out2677;
            DCOMP._IOwnership _out2678;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2679;
            DCOMP.COMP.GenExpr(_6403_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2677, out _out2678, out _out2679);
            _6404_onExpr = _out2677;
            _6405_onOwned = _out2678;
            _6406_recIdents = _out2679;
            if ((_6400_isDatatype) || (_6401_isConstant)) {
              r = ((_6404_onExpr).Sel(DCOMP.__default.escapeIdent(_6402_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2680;
              DCOMP._IOwnership _out2681;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2680, out _out2681);
              r = _out2680;
              resultingOwnership = _out2681;
            } else {
              Dafny.ISequence<Dafny.Rune> _6407_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6407_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6404_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6402_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2682;
              DCOMP._IOwnership _out2683;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6407_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2682, out _out2683);
              r = _out2682;
              resultingOwnership = _out2683;
            }
            readIdents = _6406_recIdents;
            return ;
          }
        } else if (_source245.is_Index) {
          DAST._IExpression _6408___mcc_h166 = _source245.dtor_expr;
          DAST._ICollKind _6409___mcc_h167 = _source245.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _6410___mcc_h168 = _source245.dtor_indices;
          bool _6411_isDatatype = _6135___mcc_h51;
          bool _6412_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6413_field = _6133___mcc_h49;
          DAST._IExpression _6414_on = _6132___mcc_h48;
          {
            RAST._IExpr _6415_onExpr;
            DCOMP._IOwnership _6416_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6417_recIdents;
            RAST._IExpr _out2684;
            DCOMP._IOwnership _out2685;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2686;
            DCOMP.COMP.GenExpr(_6414_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2684, out _out2685, out _out2686);
            _6415_onExpr = _out2684;
            _6416_onOwned = _out2685;
            _6417_recIdents = _out2686;
            if ((_6411_isDatatype) || (_6412_isConstant)) {
              r = ((_6415_onExpr).Sel(DCOMP.__default.escapeIdent(_6413_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2687;
              DCOMP._IOwnership _out2688;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2687, out _out2688);
              r = _out2687;
              resultingOwnership = _out2688;
            } else {
              Dafny.ISequence<Dafny.Rune> _6418_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6418_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6415_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6413_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2689;
              DCOMP._IOwnership _out2690;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6418_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2689, out _out2690);
              r = _out2689;
              resultingOwnership = _out2690;
            }
            readIdents = _6417_recIdents;
            return ;
          }
        } else if (_source245.is_IndexRange) {
          DAST._IExpression _6419___mcc_h172 = _source245.dtor_expr;
          bool _6420___mcc_h173 = _source245.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _6421___mcc_h174 = _source245.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _6422___mcc_h175 = _source245.dtor_high;
          bool _6423_isDatatype = _6135___mcc_h51;
          bool _6424_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6425_field = _6133___mcc_h49;
          DAST._IExpression _6426_on = _6132___mcc_h48;
          {
            RAST._IExpr _6427_onExpr;
            DCOMP._IOwnership _6428_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6429_recIdents;
            RAST._IExpr _out2691;
            DCOMP._IOwnership _out2692;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2693;
            DCOMP.COMP.GenExpr(_6426_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2691, out _out2692, out _out2693);
            _6427_onExpr = _out2691;
            _6428_onOwned = _out2692;
            _6429_recIdents = _out2693;
            if ((_6423_isDatatype) || (_6424_isConstant)) {
              r = ((_6427_onExpr).Sel(DCOMP.__default.escapeIdent(_6425_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2694;
              DCOMP._IOwnership _out2695;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2694, out _out2695);
              r = _out2694;
              resultingOwnership = _out2695;
            } else {
              Dafny.ISequence<Dafny.Rune> _6430_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6430_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6427_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6425_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2696;
              DCOMP._IOwnership _out2697;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6430_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2696, out _out2697);
              r = _out2696;
              resultingOwnership = _out2697;
            }
            readIdents = _6429_recIdents;
            return ;
          }
        } else if (_source245.is_TupleSelect) {
          DAST._IExpression _6431___mcc_h180 = _source245.dtor_expr;
          BigInteger _6432___mcc_h181 = _source245.dtor_index;
          bool _6433_isDatatype = _6135___mcc_h51;
          bool _6434_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6435_field = _6133___mcc_h49;
          DAST._IExpression _6436_on = _6132___mcc_h48;
          {
            RAST._IExpr _6437_onExpr;
            DCOMP._IOwnership _6438_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6439_recIdents;
            RAST._IExpr _out2698;
            DCOMP._IOwnership _out2699;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2700;
            DCOMP.COMP.GenExpr(_6436_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2698, out _out2699, out _out2700);
            _6437_onExpr = _out2698;
            _6438_onOwned = _out2699;
            _6439_recIdents = _out2700;
            if ((_6433_isDatatype) || (_6434_isConstant)) {
              r = ((_6437_onExpr).Sel(DCOMP.__default.escapeIdent(_6435_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2701;
              DCOMP._IOwnership _out2702;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2701, out _out2702);
              r = _out2701;
              resultingOwnership = _out2702;
            } else {
              Dafny.ISequence<Dafny.Rune> _6440_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6440_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6437_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6435_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2703;
              DCOMP._IOwnership _out2704;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6440_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2703, out _out2704);
              r = _out2703;
              resultingOwnership = _out2704;
            }
            readIdents = _6439_recIdents;
            return ;
          }
        } else if (_source245.is_Call) {
          DAST._IExpression _6441___mcc_h184 = _source245.dtor_on;
          DAST._ICallName _6442___mcc_h185 = _source245.dtor_callName;
          Dafny.ISequence<DAST._IType> _6443___mcc_h186 = _source245.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _6444___mcc_h187 = _source245.dtor_args;
          bool _6445_isDatatype = _6135___mcc_h51;
          bool _6446_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6447_field = _6133___mcc_h49;
          DAST._IExpression _6448_on = _6132___mcc_h48;
          {
            RAST._IExpr _6449_onExpr;
            DCOMP._IOwnership _6450_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6451_recIdents;
            RAST._IExpr _out2705;
            DCOMP._IOwnership _out2706;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2707;
            DCOMP.COMP.GenExpr(_6448_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2705, out _out2706, out _out2707);
            _6449_onExpr = _out2705;
            _6450_onOwned = _out2706;
            _6451_recIdents = _out2707;
            if ((_6445_isDatatype) || (_6446_isConstant)) {
              r = ((_6449_onExpr).Sel(DCOMP.__default.escapeIdent(_6447_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2708;
              DCOMP._IOwnership _out2709;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2708, out _out2709);
              r = _out2708;
              resultingOwnership = _out2709;
            } else {
              Dafny.ISequence<Dafny.Rune> _6452_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6452_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6449_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6447_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2710;
              DCOMP._IOwnership _out2711;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6452_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2710, out _out2711);
              r = _out2710;
              resultingOwnership = _out2711;
            }
            readIdents = _6451_recIdents;
            return ;
          }
        } else if (_source245.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _6453___mcc_h192 = _source245.dtor_params;
          DAST._IType _6454___mcc_h193 = _source245.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _6455___mcc_h194 = _source245.dtor_body;
          bool _6456_isDatatype = _6135___mcc_h51;
          bool _6457_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6458_field = _6133___mcc_h49;
          DAST._IExpression _6459_on = _6132___mcc_h48;
          {
            RAST._IExpr _6460_onExpr;
            DCOMP._IOwnership _6461_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6462_recIdents;
            RAST._IExpr _out2712;
            DCOMP._IOwnership _out2713;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2714;
            DCOMP.COMP.GenExpr(_6459_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2712, out _out2713, out _out2714);
            _6460_onExpr = _out2712;
            _6461_onOwned = _out2713;
            _6462_recIdents = _out2714;
            if ((_6456_isDatatype) || (_6457_isConstant)) {
              r = ((_6460_onExpr).Sel(DCOMP.__default.escapeIdent(_6458_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2715;
              DCOMP._IOwnership _out2716;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2715, out _out2716);
              r = _out2715;
              resultingOwnership = _out2716;
            } else {
              Dafny.ISequence<Dafny.Rune> _6463_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6463_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6460_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6458_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2717;
              DCOMP._IOwnership _out2718;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6463_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2717, out _out2718);
              r = _out2717;
              resultingOwnership = _out2718;
            }
            readIdents = _6462_recIdents;
            return ;
          }
        } else if (_source245.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6464___mcc_h198 = _source245.dtor_values;
          DAST._IType _6465___mcc_h199 = _source245.dtor_retType;
          DAST._IExpression _6466___mcc_h200 = _source245.dtor_expr;
          bool _6467_isDatatype = _6135___mcc_h51;
          bool _6468_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6469_field = _6133___mcc_h49;
          DAST._IExpression _6470_on = _6132___mcc_h48;
          {
            RAST._IExpr _6471_onExpr;
            DCOMP._IOwnership _6472_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6473_recIdents;
            RAST._IExpr _out2719;
            DCOMP._IOwnership _out2720;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2721;
            DCOMP.COMP.GenExpr(_6470_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2719, out _out2720, out _out2721);
            _6471_onExpr = _out2719;
            _6472_onOwned = _out2720;
            _6473_recIdents = _out2721;
            if ((_6467_isDatatype) || (_6468_isConstant)) {
              r = ((_6471_onExpr).Sel(DCOMP.__default.escapeIdent(_6469_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2722;
              DCOMP._IOwnership _out2723;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2722, out _out2723);
              r = _out2722;
              resultingOwnership = _out2723;
            } else {
              Dafny.ISequence<Dafny.Rune> _6474_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6474_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6471_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6469_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2724;
              DCOMP._IOwnership _out2725;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6474_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2724, out _out2725);
              r = _out2724;
              resultingOwnership = _out2725;
            }
            readIdents = _6473_recIdents;
            return ;
          }
        } else if (_source245.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _6475___mcc_h204 = _source245.dtor_name;
          DAST._IType _6476___mcc_h205 = _source245.dtor_typ;
          DAST._IExpression _6477___mcc_h206 = _source245.dtor_value;
          DAST._IExpression _6478___mcc_h207 = _source245.dtor_iifeBody;
          bool _6479_isDatatype = _6135___mcc_h51;
          bool _6480_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6481_field = _6133___mcc_h49;
          DAST._IExpression _6482_on = _6132___mcc_h48;
          {
            RAST._IExpr _6483_onExpr;
            DCOMP._IOwnership _6484_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6485_recIdents;
            RAST._IExpr _out2726;
            DCOMP._IOwnership _out2727;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2728;
            DCOMP.COMP.GenExpr(_6482_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2726, out _out2727, out _out2728);
            _6483_onExpr = _out2726;
            _6484_onOwned = _out2727;
            _6485_recIdents = _out2728;
            if ((_6479_isDatatype) || (_6480_isConstant)) {
              r = ((_6483_onExpr).Sel(DCOMP.__default.escapeIdent(_6481_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2729;
              DCOMP._IOwnership _out2730;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2729, out _out2730);
              r = _out2729;
              resultingOwnership = _out2730;
            } else {
              Dafny.ISequence<Dafny.Rune> _6486_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6486_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6483_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6481_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2731;
              DCOMP._IOwnership _out2732;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6486_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2731, out _out2732);
              r = _out2731;
              resultingOwnership = _out2732;
            }
            readIdents = _6485_recIdents;
            return ;
          }
        } else if (_source245.is_Apply) {
          DAST._IExpression _6487___mcc_h212 = _source245.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _6488___mcc_h213 = _source245.dtor_args;
          bool _6489_isDatatype = _6135___mcc_h51;
          bool _6490_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6491_field = _6133___mcc_h49;
          DAST._IExpression _6492_on = _6132___mcc_h48;
          {
            RAST._IExpr _6493_onExpr;
            DCOMP._IOwnership _6494_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6495_recIdents;
            RAST._IExpr _out2733;
            DCOMP._IOwnership _out2734;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2735;
            DCOMP.COMP.GenExpr(_6492_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2733, out _out2734, out _out2735);
            _6493_onExpr = _out2733;
            _6494_onOwned = _out2734;
            _6495_recIdents = _out2735;
            if ((_6489_isDatatype) || (_6490_isConstant)) {
              r = ((_6493_onExpr).Sel(DCOMP.__default.escapeIdent(_6491_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2736;
              DCOMP._IOwnership _out2737;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2736, out _out2737);
              r = _out2736;
              resultingOwnership = _out2737;
            } else {
              Dafny.ISequence<Dafny.Rune> _6496_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6496_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6493_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6491_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2738;
              DCOMP._IOwnership _out2739;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6496_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2738, out _out2739);
              r = _out2738;
              resultingOwnership = _out2739;
            }
            readIdents = _6495_recIdents;
            return ;
          }
        } else if (_source245.is_TypeTest) {
          DAST._IExpression _6497___mcc_h216 = _source245.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6498___mcc_h217 = _source245.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _6499___mcc_h218 = _source245.dtor_variant;
          bool _6500_isDatatype = _6135___mcc_h51;
          bool _6501_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6502_field = _6133___mcc_h49;
          DAST._IExpression _6503_on = _6132___mcc_h48;
          {
            RAST._IExpr _6504_onExpr;
            DCOMP._IOwnership _6505_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6506_recIdents;
            RAST._IExpr _out2740;
            DCOMP._IOwnership _out2741;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2742;
            DCOMP.COMP.GenExpr(_6503_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2740, out _out2741, out _out2742);
            _6504_onExpr = _out2740;
            _6505_onOwned = _out2741;
            _6506_recIdents = _out2742;
            if ((_6500_isDatatype) || (_6501_isConstant)) {
              r = ((_6504_onExpr).Sel(DCOMP.__default.escapeIdent(_6502_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2743;
              DCOMP._IOwnership _out2744;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2743, out _out2744);
              r = _out2743;
              resultingOwnership = _out2744;
            } else {
              Dafny.ISequence<Dafny.Rune> _6507_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6507_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6504_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6502_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2745;
              DCOMP._IOwnership _out2746;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6507_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2745, out _out2746);
              r = _out2745;
              resultingOwnership = _out2746;
            }
            readIdents = _6506_recIdents;
            return ;
          }
        } else if (_source245.is_InitializationValue) {
          DAST._IType _6508___mcc_h222 = _source245.dtor_typ;
          bool _6509_isDatatype = _6135___mcc_h51;
          bool _6510_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6511_field = _6133___mcc_h49;
          DAST._IExpression _6512_on = _6132___mcc_h48;
          {
            RAST._IExpr _6513_onExpr;
            DCOMP._IOwnership _6514_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6515_recIdents;
            RAST._IExpr _out2747;
            DCOMP._IOwnership _out2748;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2749;
            DCOMP.COMP.GenExpr(_6512_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2747, out _out2748, out _out2749);
            _6513_onExpr = _out2747;
            _6514_onOwned = _out2748;
            _6515_recIdents = _out2749;
            if ((_6509_isDatatype) || (_6510_isConstant)) {
              r = ((_6513_onExpr).Sel(DCOMP.__default.escapeIdent(_6511_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2750;
              DCOMP._IOwnership _out2751;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2750, out _out2751);
              r = _out2750;
              resultingOwnership = _out2751;
            } else {
              Dafny.ISequence<Dafny.Rune> _6516_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6516_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6513_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6511_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2752;
              DCOMP._IOwnership _out2753;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6516_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2752, out _out2753);
              r = _out2752;
              resultingOwnership = _out2753;
            }
            readIdents = _6515_recIdents;
            return ;
          }
        } else if (_source245.is_BoolBoundedPool) {
          bool _6517_isDatatype = _6135___mcc_h51;
          bool _6518_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6519_field = _6133___mcc_h49;
          DAST._IExpression _6520_on = _6132___mcc_h48;
          {
            RAST._IExpr _6521_onExpr;
            DCOMP._IOwnership _6522_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6523_recIdents;
            RAST._IExpr _out2754;
            DCOMP._IOwnership _out2755;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2756;
            DCOMP.COMP.GenExpr(_6520_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2754, out _out2755, out _out2756);
            _6521_onExpr = _out2754;
            _6522_onOwned = _out2755;
            _6523_recIdents = _out2756;
            if ((_6517_isDatatype) || (_6518_isConstant)) {
              r = ((_6521_onExpr).Sel(DCOMP.__default.escapeIdent(_6519_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2757;
              DCOMP._IOwnership _out2758;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2757, out _out2758);
              r = _out2757;
              resultingOwnership = _out2758;
            } else {
              Dafny.ISequence<Dafny.Rune> _6524_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6524_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6521_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6519_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2759;
              DCOMP._IOwnership _out2760;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6524_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2759, out _out2760);
              r = _out2759;
              resultingOwnership = _out2760;
            }
            readIdents = _6523_recIdents;
            return ;
          }
        } else if (_source245.is_SetBoundedPool) {
          DAST._IExpression _6525___mcc_h224 = _source245.dtor_of;
          bool _6526_isDatatype = _6135___mcc_h51;
          bool _6527_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6528_field = _6133___mcc_h49;
          DAST._IExpression _6529_on = _6132___mcc_h48;
          {
            RAST._IExpr _6530_onExpr;
            DCOMP._IOwnership _6531_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6532_recIdents;
            RAST._IExpr _out2761;
            DCOMP._IOwnership _out2762;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2763;
            DCOMP.COMP.GenExpr(_6529_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2761, out _out2762, out _out2763);
            _6530_onExpr = _out2761;
            _6531_onOwned = _out2762;
            _6532_recIdents = _out2763;
            if ((_6526_isDatatype) || (_6527_isConstant)) {
              r = ((_6530_onExpr).Sel(DCOMP.__default.escapeIdent(_6528_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2764;
              DCOMP._IOwnership _out2765;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2764, out _out2765);
              r = _out2764;
              resultingOwnership = _out2765;
            } else {
              Dafny.ISequence<Dafny.Rune> _6533_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6533_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6530_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6528_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2766;
              DCOMP._IOwnership _out2767;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6533_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2766, out _out2767);
              r = _out2766;
              resultingOwnership = _out2767;
            }
            readIdents = _6532_recIdents;
            return ;
          }
        } else if (_source245.is_SeqBoundedPool) {
          DAST._IExpression _6534___mcc_h226 = _source245.dtor_of;
          bool _6535___mcc_h227 = _source245.dtor_includeDuplicates;
          bool _6536_isDatatype = _6135___mcc_h51;
          bool _6537_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6538_field = _6133___mcc_h49;
          DAST._IExpression _6539_on = _6132___mcc_h48;
          {
            RAST._IExpr _6540_onExpr;
            DCOMP._IOwnership _6541_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6542_recIdents;
            RAST._IExpr _out2768;
            DCOMP._IOwnership _out2769;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2770;
            DCOMP.COMP.GenExpr(_6539_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2768, out _out2769, out _out2770);
            _6540_onExpr = _out2768;
            _6541_onOwned = _out2769;
            _6542_recIdents = _out2770;
            if ((_6536_isDatatype) || (_6537_isConstant)) {
              r = ((_6540_onExpr).Sel(DCOMP.__default.escapeIdent(_6538_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2771;
              DCOMP._IOwnership _out2772;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2771, out _out2772);
              r = _out2771;
              resultingOwnership = _out2772;
            } else {
              Dafny.ISequence<Dafny.Rune> _6543_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6543_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6540_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6538_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2773;
              DCOMP._IOwnership _out2774;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6543_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2773, out _out2774);
              r = _out2773;
              resultingOwnership = _out2774;
            }
            readIdents = _6542_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _6544___mcc_h230 = _source245.dtor_lo;
          DAST._IExpression _6545___mcc_h231 = _source245.dtor_hi;
          bool _6546_isDatatype = _6135___mcc_h51;
          bool _6547_isConstant = _6134___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _6548_field = _6133___mcc_h49;
          DAST._IExpression _6549_on = _6132___mcc_h48;
          {
            RAST._IExpr _6550_onExpr;
            DCOMP._IOwnership _6551_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6552_recIdents;
            RAST._IExpr _out2775;
            DCOMP._IOwnership _out2776;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2777;
            DCOMP.COMP.GenExpr(_6549_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2775, out _out2776, out _out2777);
            _6550_onExpr = _out2775;
            _6551_onOwned = _out2776;
            _6552_recIdents = _out2777;
            if ((_6546_isDatatype) || (_6547_isConstant)) {
              r = ((_6550_onExpr).Sel(DCOMP.__default.escapeIdent(_6548_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2778;
              DCOMP._IOwnership _out2779;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2778, out _out2779);
              r = _out2778;
              resultingOwnership = _out2779;
            } else {
              Dafny.ISequence<Dafny.Rune> _6553_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _6553_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_6550_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_6548_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2780;
              DCOMP._IOwnership _out2781;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_6553_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2780, out _out2781);
              r = _out2780;
              resultingOwnership = _out2781;
            }
            readIdents = _6552_recIdents;
            return ;
          }
        }
      } else if (_source242.is_SelectFn) {
        DAST._IExpression _6554___mcc_h234 = _source242.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _6555___mcc_h235 = _source242.dtor_field;
        bool _6556___mcc_h236 = _source242.dtor_onDatatype;
        bool _6557___mcc_h237 = _source242.dtor_isStatic;
        BigInteger _6558___mcc_h238 = _source242.dtor_arity;
        BigInteger _6559_arity = _6558___mcc_h238;
        bool _6560_isStatic = _6557___mcc_h237;
        bool _6561_isDatatype = _6556___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _6562_field = _6555___mcc_h235;
        DAST._IExpression _6563_on = _6554___mcc_h234;
        {
          RAST._IExpr _6564_onExpr;
          DCOMP._IOwnership _6565_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6566_recIdents;
          RAST._IExpr _out2782;
          DCOMP._IOwnership _out2783;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2784;
          DCOMP.COMP.GenExpr(_6563_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2782, out _out2783, out _out2784);
          _6564_onExpr = _out2782;
          _6565_onOwned = _out2783;
          _6566_recIdents = _out2784;
          Dafny.ISequence<Dafny.Rune> _6567_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _6568_onString;
          _6568_onString = (_6564_onExpr)._ToString(DCOMP.__default.IND);
          if (_6560_isStatic) {
            _6567_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6568_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_6562_field));
          } else {
            _6567_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _6567_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6567_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _6568_onString), ((object.Equals(_6565_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _6569_args;
            _6569_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _6570_i;
            _6570_i = BigInteger.Zero;
            while ((_6570_i) < (_6559_arity)) {
              if ((_6570_i).Sign == 1) {
                _6569_args = Dafny.Sequence<Dafny.Rune>.Concat(_6569_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _6569_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6569_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_6570_i));
              _6570_i = (_6570_i) + (BigInteger.One);
            }
            _6567_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6567_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _6569_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _6567_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6567_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _6562_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _6569_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _6567_s = Dafny.Sequence<Dafny.Rune>.Concat(_6567_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _6567_s = Dafny.Sequence<Dafny.Rune>.Concat(_6567_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _6571_typeShape;
          _6571_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _6572_i;
          _6572_i = BigInteger.Zero;
          while ((_6572_i) < (_6559_arity)) {
            if ((_6572_i).Sign == 1) {
              _6571_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_6571_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _6571_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_6571_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _6572_i = (_6572_i) + (BigInteger.One);
          }
          _6571_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_6571_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _6567_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _6567_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _6571_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_6567_s);
          RAST._IExpr _out2785;
          DCOMP._IOwnership _out2786;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2785, out _out2786);
          r = _out2785;
          resultingOwnership = _out2786;
          readIdents = _6566_recIdents;
          return ;
        }
      } else if (_source242.is_Index) {
        DAST._IExpression _6573___mcc_h239 = _source242.dtor_expr;
        DAST._ICollKind _6574___mcc_h240 = _source242.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _6575___mcc_h241 = _source242.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _6576_indices = _6575___mcc_h241;
        DAST._ICollKind _6577_collKind = _6574___mcc_h240;
        DAST._IExpression _6578_on = _6573___mcc_h239;
        {
          RAST._IExpr _6579_onExpr;
          DCOMP._IOwnership _6580_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6581_recIdents;
          RAST._IExpr _out2787;
          DCOMP._IOwnership _out2788;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2789;
          DCOMP.COMP.GenExpr(_6578_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2787, out _out2788, out _out2789);
          _6579_onExpr = _out2787;
          _6580_onOwned = _out2788;
          _6581_recIdents = _out2789;
          readIdents = _6581_recIdents;
          r = _6579_onExpr;
          BigInteger _6582_i;
          _6582_i = BigInteger.Zero;
          while ((_6582_i) < (new BigInteger((_6576_indices).Count))) {
            if (object.Equals(_6577_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _6583_idx;
            DCOMP._IOwnership _6584_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6585_recIdentsIdx;
            RAST._IExpr _out2790;
            DCOMP._IOwnership _out2791;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2792;
            DCOMP.COMP.GenExpr((_6576_indices).Select(_6582_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2790, out _out2791, out _out2792);
            _6583_idx = _out2790;
            _6584_idxOwned = _out2791;
            _6585_recIdentsIdx = _out2792;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_6583_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6585_recIdentsIdx);
            _6582_i = (_6582_i) + (BigInteger.One);
          }
          RAST._IExpr _out2793;
          DCOMP._IOwnership _out2794;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2793, out _out2794);
          r = _out2793;
          resultingOwnership = _out2794;
          return ;
        }
      } else if (_source242.is_IndexRange) {
        DAST._IExpression _6586___mcc_h242 = _source242.dtor_expr;
        bool _6587___mcc_h243 = _source242.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _6588___mcc_h244 = _source242.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _6589___mcc_h245 = _source242.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _6590_high = _6589___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _6591_low = _6588___mcc_h244;
        bool _6592_isArray = _6587___mcc_h243;
        DAST._IExpression _6593_on = _6586___mcc_h242;
        {
          RAST._IExpr _6594_onExpr;
          DCOMP._IOwnership _6595_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6596_recIdents;
          RAST._IExpr _out2795;
          DCOMP._IOwnership _out2796;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2797;
          DCOMP.COMP.GenExpr(_6593_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2795, out _out2796, out _out2797);
          _6594_onExpr = _out2795;
          _6595_onOwned = _out2796;
          _6596_recIdents = _out2797;
          readIdents = _6596_recIdents;
          Dafny.ISequence<Dafny.Rune> _6597_methodName;
          _6597_methodName = (((_6591_low).is_Some) ? ((((_6590_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_6590_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _6598_arguments;
          _6598_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source246 = _6591_low;
          if (_source246.is_None) {
          } else {
            DAST._IExpression _6599___mcc_h274 = _source246.dtor_value;
            DAST._IExpression _6600_l = _6599___mcc_h274;
            {
              RAST._IExpr _6601_lExpr;
              DCOMP._IOwnership _6602___v126;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6603_recIdentsL;
              RAST._IExpr _out2798;
              DCOMP._IOwnership _out2799;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2800;
              DCOMP.COMP.GenExpr(_6600_l, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2798, out _out2799, out _out2800);
              _6601_lExpr = _out2798;
              _6602___v126 = _out2799;
              _6603_recIdentsL = _out2800;
              _6598_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_6598_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_6601_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6603_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source247 = _6590_high;
          if (_source247.is_None) {
          } else {
            DAST._IExpression _6604___mcc_h275 = _source247.dtor_value;
            DAST._IExpression _6605_h = _6604___mcc_h275;
            {
              RAST._IExpr _6606_hExpr;
              DCOMP._IOwnership _6607___v127;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6608_recIdentsH;
              RAST._IExpr _out2801;
              DCOMP._IOwnership _out2802;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2803;
              DCOMP.COMP.GenExpr(_6605_h, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2801, out _out2802, out _out2803);
              _6606_hExpr = _out2801;
              _6607___v127 = _out2802;
              _6608_recIdentsH = _out2803;
              _6598_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_6598_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_6606_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6608_recIdentsH);
            }
          }
          r = _6594_onExpr;
          if (_6592_isArray) {
            if (!(_6597_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _6597_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _6597_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _6597_methodName))).Apply(_6598_arguments);
          } else {
            if (!(_6597_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_6597_methodName)).Apply(_6598_arguments);
            }
          }
          RAST._IExpr _out2804;
          DCOMP._IOwnership _out2805;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2804, out _out2805);
          r = _out2804;
          resultingOwnership = _out2805;
          return ;
        }
      } else if (_source242.is_TupleSelect) {
        DAST._IExpression _6609___mcc_h246 = _source242.dtor_expr;
        BigInteger _6610___mcc_h247 = _source242.dtor_index;
        BigInteger _6611_idx = _6610___mcc_h247;
        DAST._IExpression _6612_on = _6609___mcc_h246;
        {
          RAST._IExpr _6613_onExpr;
          DCOMP._IOwnership _6614_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6615_recIdents;
          RAST._IExpr _out2806;
          DCOMP._IOwnership _out2807;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2808;
          DCOMP.COMP.GenExpr(_6612_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2806, out _out2807, out _out2808);
          _6613_onExpr = _out2806;
          _6614_onOwnership = _out2807;
          _6615_recIdents = _out2808;
          r = (_6613_onExpr).Sel(Std.Strings.__default.OfNat(_6611_idx));
          RAST._IExpr _out2809;
          DCOMP._IOwnership _out2810;
          DCOMP.COMP.FromOwnership(r, _6614_onOwnership, expectedOwnership, out _out2809, out _out2810);
          r = _out2809;
          resultingOwnership = _out2810;
          readIdents = _6615_recIdents;
          return ;
        }
      } else if (_source242.is_Call) {
        DAST._IExpression _6616___mcc_h248 = _source242.dtor_on;
        DAST._ICallName _6617___mcc_h249 = _source242.dtor_callName;
        Dafny.ISequence<DAST._IType> _6618___mcc_h250 = _source242.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _6619___mcc_h251 = _source242.dtor_args;
        Dafny.ISequence<DAST._IExpression> _6620_args = _6619___mcc_h251;
        Dafny.ISequence<DAST._IType> _6621_typeArgs = _6618___mcc_h250;
        DAST._ICallName _6622_name = _6617___mcc_h249;
        DAST._IExpression _6623_on = _6616___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _6624_typeExprs;
          _6624_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_6621_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _6625_typeI;
            _6625_typeI = BigInteger.Zero;
            while ((_6625_typeI) < (new BigInteger((_6621_typeArgs).Count))) {
              RAST._IType _6626_typeExpr;
              RAST._IType _out2811;
              _out2811 = DCOMP.COMP.GenType((_6621_typeArgs).Select(_6625_typeI), false, false);
              _6626_typeExpr = _out2811;
              _6624_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_6624_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_6626_typeExpr));
              _6625_typeI = (_6625_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _6627_argExprs;
          _6627_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _6628_i;
          _6628_i = BigInteger.Zero;
          while ((_6628_i) < (new BigInteger((_6620_args).Count))) {
            RAST._IExpr _6629_argExpr;
            DCOMP._IOwnership _6630_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6631_argIdents;
            RAST._IExpr _out2812;
            DCOMP._IOwnership _out2813;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2814;
            DCOMP.COMP.GenExpr((_6620_args).Select(_6628_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2812, out _out2813, out _out2814);
            _6629_argExpr = _out2812;
            _6630_argOwnership = _out2813;
            _6631_argIdents = _out2814;
            _6627_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_6627_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_6629_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6631_argIdents);
            _6628_i = (_6628_i) + (BigInteger.One);
          }
          RAST._IExpr _6632_onExpr;
          DCOMP._IOwnership _6633___v128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6634_recIdents;
          RAST._IExpr _out2815;
          DCOMP._IOwnership _out2816;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2817;
          DCOMP.COMP.GenExpr(_6623_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2815, out _out2816, out _out2817);
          _6632_onExpr = _out2815;
          _6633___v128 = _out2816;
          _6634_recIdents = _out2817;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6634_recIdents);
          Dafny.ISequence<Dafny.Rune> _6635_renderedName;
          _6635_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source248) => {
            if (_source248.is_Name) {
              Dafny.ISequence<Dafny.Rune> _6636___mcc_h276 = _source248.dtor_name;
              Dafny.ISequence<Dafny.Rune> _6637_ident = _6636___mcc_h276;
              return DCOMP.__default.escapeIdent(_6637_ident);
            } else if (_source248.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source248.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source248.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_6622_name);
          DAST._IExpression _source249 = _6623_on;
          if (_source249.is_Literal) {
            DAST._ILiteral _6638___mcc_h277 = _source249.dtor_Literal_a0;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _6639___mcc_h279 = _source249.dtor_Ident_a0;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6640___mcc_h281 = _source249.dtor_Companion_a0;
            {
              _6632_onExpr = (_6632_onExpr).MSel(_6635_renderedName);
            }
          } else if (_source249.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _6641___mcc_h283 = _source249.dtor_Tuple_a0;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6642___mcc_h285 = _source249.dtor_path;
            Dafny.ISequence<DAST._IType> _6643___mcc_h286 = _source249.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6644___mcc_h287 = _source249.dtor_args;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _6645___mcc_h291 = _source249.dtor_dims;
            DAST._IType _6646___mcc_h292 = _source249.dtor_typ;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_DatatypeValue) {
            DAST._IDatatypeType _6647___mcc_h295 = _source249.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _6648___mcc_h296 = _source249.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _6649___mcc_h297 = _source249.dtor_variant;
            bool _6650___mcc_h298 = _source249.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6651___mcc_h299 = _source249.dtor_contents;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Convert) {
            DAST._IExpression _6652___mcc_h305 = _source249.dtor_value;
            DAST._IType _6653___mcc_h306 = _source249.dtor_from;
            DAST._IType _6654___mcc_h307 = _source249.dtor_typ;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_SeqConstruct) {
            DAST._IExpression _6655___mcc_h311 = _source249.dtor_length;
            DAST._IExpression _6656___mcc_h312 = _source249.dtor_elem;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _6657___mcc_h315 = _source249.dtor_elements;
            DAST._IType _6658___mcc_h316 = _source249.dtor_typ;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _6659___mcc_h319 = _source249.dtor_elements;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _6660___mcc_h321 = _source249.dtor_elements;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6661___mcc_h323 = _source249.dtor_mapElems;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_MapBuilder) {
            DAST._IType _6662___mcc_h325 = _source249.dtor_keyType;
            DAST._IType _6663___mcc_h326 = _source249.dtor_valueType;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_SeqUpdate) {
            DAST._IExpression _6664___mcc_h329 = _source249.dtor_expr;
            DAST._IExpression _6665___mcc_h330 = _source249.dtor_indexExpr;
            DAST._IExpression _6666___mcc_h331 = _source249.dtor_value;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_MapUpdate) {
            DAST._IExpression _6667___mcc_h335 = _source249.dtor_expr;
            DAST._IExpression _6668___mcc_h336 = _source249.dtor_indexExpr;
            DAST._IExpression _6669___mcc_h337 = _source249.dtor_value;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_SetBuilder) {
            DAST._IType _6670___mcc_h341 = _source249.dtor_elemType;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_ToMultiset) {
            DAST._IExpression _6671___mcc_h343 = _source249.dtor_ToMultiset_a0;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_This) {
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Ite) {
            DAST._IExpression _6672___mcc_h345 = _source249.dtor_cond;
            DAST._IExpression _6673___mcc_h346 = _source249.dtor_thn;
            DAST._IExpression _6674___mcc_h347 = _source249.dtor_els;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_UnOp) {
            DAST._IUnaryOp _6675___mcc_h351 = _source249.dtor_unOp;
            DAST._IExpression _6676___mcc_h352 = _source249.dtor_expr;
            DAST.Format._IUnOpFormat _6677___mcc_h353 = _source249.dtor_format1;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_BinOp) {
            DAST._IBinOp _6678___mcc_h357 = _source249.dtor_op;
            DAST._IExpression _6679___mcc_h358 = _source249.dtor_left;
            DAST._IExpression _6680___mcc_h359 = _source249.dtor_right;
            DAST.Format._IBinOpFormat _6681___mcc_h360 = _source249.dtor_format2;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_ArrayLen) {
            DAST._IExpression _6682___mcc_h365 = _source249.dtor_expr;
            BigInteger _6683___mcc_h366 = _source249.dtor_dim;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_MapKeys) {
            DAST._IExpression _6684___mcc_h369 = _source249.dtor_expr;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_MapValues) {
            DAST._IExpression _6685___mcc_h371 = _source249.dtor_expr;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Select) {
            DAST._IExpression _6686___mcc_h373 = _source249.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6687___mcc_h374 = _source249.dtor_field;
            bool _6688___mcc_h375 = _source249.dtor_isConstant;
            bool _6689___mcc_h376 = _source249.dtor_onDatatype;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_SelectFn) {
            DAST._IExpression _6690___mcc_h381 = _source249.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6691___mcc_h382 = _source249.dtor_field;
            bool _6692___mcc_h383 = _source249.dtor_onDatatype;
            bool _6693___mcc_h384 = _source249.dtor_isStatic;
            BigInteger _6694___mcc_h385 = _source249.dtor_arity;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Index) {
            DAST._IExpression _6695___mcc_h391 = _source249.dtor_expr;
            DAST._ICollKind _6696___mcc_h392 = _source249.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _6697___mcc_h393 = _source249.dtor_indices;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_IndexRange) {
            DAST._IExpression _6698___mcc_h397 = _source249.dtor_expr;
            bool _6699___mcc_h398 = _source249.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _6700___mcc_h399 = _source249.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _6701___mcc_h400 = _source249.dtor_high;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_TupleSelect) {
            DAST._IExpression _6702___mcc_h405 = _source249.dtor_expr;
            BigInteger _6703___mcc_h406 = _source249.dtor_index;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Call) {
            DAST._IExpression _6704___mcc_h409 = _source249.dtor_on;
            DAST._ICallName _6705___mcc_h410 = _source249.dtor_callName;
            Dafny.ISequence<DAST._IType> _6706___mcc_h411 = _source249.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6707___mcc_h412 = _source249.dtor_args;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _6708___mcc_h417 = _source249.dtor_params;
            DAST._IType _6709___mcc_h418 = _source249.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _6710___mcc_h419 = _source249.dtor_body;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6711___mcc_h423 = _source249.dtor_values;
            DAST._IType _6712___mcc_h424 = _source249.dtor_retType;
            DAST._IExpression _6713___mcc_h425 = _source249.dtor_expr;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _6714___mcc_h429 = _source249.dtor_name;
            DAST._IType _6715___mcc_h430 = _source249.dtor_typ;
            DAST._IExpression _6716___mcc_h431 = _source249.dtor_value;
            DAST._IExpression _6717___mcc_h432 = _source249.dtor_iifeBody;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_Apply) {
            DAST._IExpression _6718___mcc_h437 = _source249.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _6719___mcc_h438 = _source249.dtor_args;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_TypeTest) {
            DAST._IExpression _6720___mcc_h441 = _source249.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6721___mcc_h442 = _source249.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _6722___mcc_h443 = _source249.dtor_variant;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_InitializationValue) {
            DAST._IType _6723___mcc_h447 = _source249.dtor_typ;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_BoolBoundedPool) {
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_SetBoundedPool) {
            DAST._IExpression _6724___mcc_h449 = _source249.dtor_of;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else if (_source249.is_SeqBoundedPool) {
            DAST._IExpression _6725___mcc_h451 = _source249.dtor_of;
            bool _6726___mcc_h452 = _source249.dtor_includeDuplicates;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          } else {
            DAST._IExpression _6727___mcc_h455 = _source249.dtor_lo;
            DAST._IExpression _6728___mcc_h456 = _source249.dtor_hi;
            {
              _6632_onExpr = (_6632_onExpr).Sel(_6635_renderedName);
            }
          }
          r = _6632_onExpr;
          if ((new BigInteger((_6624_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_6624_typeExprs);
          }
          r = (r).Apply(_6627_argExprs);
          RAST._IExpr _out2818;
          DCOMP._IOwnership _out2819;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2818, out _out2819);
          r = _out2818;
          resultingOwnership = _out2819;
          return ;
        }
      } else if (_source242.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _6729___mcc_h252 = _source242.dtor_params;
        DAST._IType _6730___mcc_h253 = _source242.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _6731___mcc_h254 = _source242.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6732_body = _6731___mcc_h254;
        DAST._IType _6733_retType = _6730___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _6734_params = _6729___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6735_paramNames;
          _6735_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _6736_paramOwnerships;
          _6736_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
          BigInteger _6737_i;
          _6737_i = BigInteger.Zero;
          while ((_6737_i) < (new BigInteger((_6734_params).Count))) {
            Dafny.ISequence<Dafny.Rune> _6738_name;
            _6738_name = ((_6734_params).Select(_6737_i)).dtor_name;
            _6735_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_6735_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6738_name));
            _6736_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_6736_paramOwnerships, _6738_name, DCOMP.Ownership.create_OwnershipBorrowed());
            _6737_i = (_6737_i) + (BigInteger.One);
          }
          DCOMP._IEnvironment _6739_env;
          _6739_env = DCOMP.Environment.create(_6735_paramNames, _6736_paramOwnerships);
          RAST._IExpr _6740_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6741_recIdents;
          RAST._IExpr _out2820;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2821;
          DCOMP.COMP.GenStmts(_6732_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _6739_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out2820, out _out2821);
          _6740_recursiveGen = _out2820;
          _6741_recIdents = _out2821;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6742_allReadCloned;
          _6742_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_6741_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _6743_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_6741_recIdents).Elements) {
              _6743_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_6741_recIdents).Contains(_6743_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3299)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_6743_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _6742_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_6742_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_6735_paramNames).Contains(_6743_next))) {
              _6742_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6742_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_6743_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_6743_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6743_next));
            }
            _6741_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6741_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6743_next));
          }
          Dafny.ISequence<Dafny.Rune> _6744_paramsString;
          _6744_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _6745_paramTypes;
          _6745_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _6737_i = BigInteger.Zero;
          while ((_6737_i) < (new BigInteger((_6734_params).Count))) {
            if ((_6737_i).Sign == 1) {
              _6744_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_6744_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _6745_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_6745_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _6746_typStr;
            RAST._IType _out2822;
            _out2822 = DCOMP.COMP.GenType(((_6734_params).Select(_6737_i)).dtor_typ, false, true);
            _6746_typStr = _out2822;
            _6744_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6744_paramsString, DCOMP.__default.escapeIdent(((_6734_params).Select(_6737_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_6746_typStr))._ToString(DCOMP.__default.IND));
            _6745_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_6745_paramTypes, (RAST.Type.create_Borrowed(_6746_typStr))._ToString(DCOMP.__default.IND));
            _6737_i = (_6737_i) + (BigInteger.One);
          }
          RAST._IType _6747_retTypeGen;
          RAST._IType _out2823;
          _out2823 = DCOMP.COMP.GenType(_6733_retType, false, true);
          _6747_retTypeGen = _out2823;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _6745_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_6747_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _6742_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _6744_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_6747_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_6740_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out2824;
          DCOMP._IOwnership _out2825;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2824, out _out2825);
          r = _out2824;
          resultingOwnership = _out2825;
          return ;
        }
      } else if (_source242.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6748___mcc_h255 = _source242.dtor_values;
        DAST._IType _6749___mcc_h256 = _source242.dtor_retType;
        DAST._IExpression _6750___mcc_h257 = _source242.dtor_expr;
        DAST._IExpression _6751_expr = _6750___mcc_h257;
        DAST._IType _6752_retType = _6749___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6753_values = _6748___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6754_paramNames;
          _6754_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _6755_paramOwnerships;
          _6755_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6756_paramNamesSet;
          _6756_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6757_i;
          _6757_i = BigInteger.Zero;
          while ((_6757_i) < (new BigInteger((_6753_values).Count))) {
            Dafny.ISequence<Dafny.Rune> _6758_name;
            _6758_name = (((_6753_values).Select(_6757_i)).dtor__0).dtor_name;
            _6754_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_6754_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6758_name));
            _6755_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_6755_paramOwnerships, _6758_name, DCOMP.Ownership.create_OwnershipBorrowed());
            _6756_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6756_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6758_name));
            _6757_i = (_6757_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6759_s;
          _6759_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _6760_paramsString;
          _6760_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _6757_i = BigInteger.Zero;
          while ((_6757_i) < (new BigInteger((_6753_values).Count))) {
            if ((_6757_i).Sign == 1) {
              _6760_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_6760_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _6761_typStr;
            RAST._IType _out2826;
            _out2826 = DCOMP.COMP.GenType((((_6753_values).Select(_6757_i)).dtor__0).dtor_typ, false, true);
            _6761_typStr = _out2826;
            RAST._IExpr _6762_valueGen;
            DCOMP._IOwnership _6763___v131;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6764_recIdents;
            RAST._IExpr _out2827;
            DCOMP._IOwnership _out2828;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2829;
            DCOMP.COMP.GenExpr(((_6753_values).Select(_6757_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2827, out _out2828, out _out2829);
            _6762_valueGen = _out2827;
            _6763___v131 = _out2828;
            _6764_recIdents = _out2829;
            _6759_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6759_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_6753_values).Select(_6757_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_6761_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6764_recIdents);
            _6759_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6759_s, (_6762_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _6757_i = (_6757_i) + (BigInteger.One);
          }
          DCOMP._IEnvironment _6765_newEnv;
          _6765_newEnv = DCOMP.Environment.create(_6754_paramNames, _6755_paramOwnerships);
          RAST._IExpr _6766_recGen;
          DCOMP._IOwnership _6767_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6768_recIdents;
          RAST._IExpr _out2830;
          DCOMP._IOwnership _out2831;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2832;
          DCOMP.COMP.GenExpr(_6751_expr, selfIdent, _6765_newEnv, expectedOwnership, out _out2830, out _out2831, out _out2832);
          _6766_recGen = _out2830;
          _6767_recOwned = _out2831;
          _6768_recIdents = _out2832;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6768_recIdents, _6756_paramNamesSet);
          _6759_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6759_s, (_6766_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_6759_s);
          RAST._IExpr _out2833;
          DCOMP._IOwnership _out2834;
          DCOMP.COMP.FromOwnership(r, _6767_recOwned, expectedOwnership, out _out2833, out _out2834);
          r = _out2833;
          resultingOwnership = _out2834;
          return ;
        }
      } else if (_source242.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _6769___mcc_h258 = _source242.dtor_name;
        DAST._IType _6770___mcc_h259 = _source242.dtor_typ;
        DAST._IExpression _6771___mcc_h260 = _source242.dtor_value;
        DAST._IExpression _6772___mcc_h261 = _source242.dtor_iifeBody;
        DAST._IExpression _6773_iifeBody = _6772___mcc_h261;
        DAST._IExpression _6774_value = _6771___mcc_h260;
        DAST._IType _6775_tpe = _6770___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _6776_name = _6769___mcc_h258;
        {
          RAST._IExpr _6777_valueGen;
          DCOMP._IOwnership _6778___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6779_recIdents;
          RAST._IExpr _out2835;
          DCOMP._IOwnership _out2836;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2837;
          DCOMP.COMP.GenExpr(_6774_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2835, out _out2836, out _out2837);
          _6777_valueGen = _out2835;
          _6778___v132 = _out2836;
          _6779_recIdents = _out2837;
          readIdents = _6779_recIdents;
          RAST._IType _6780_valueTypeGen;
          RAST._IType _out2838;
          _out2838 = DCOMP.COMP.GenType(_6775_tpe, false, true);
          _6780_valueTypeGen = _out2838;
          RAST._IExpr _6781_bodyGen;
          DCOMP._IOwnership _6782___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6783_bodyIdents;
          RAST._IExpr _out2839;
          DCOMP._IOwnership _out2840;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2841;
          DCOMP.COMP.GenExpr(_6773_iifeBody, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2839, out _out2840, out _out2841);
          _6781_bodyGen = _out2839;
          _6782___v133 = _out2840;
          _6783_bodyIdents = _out2841;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6783_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_6776_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_6776_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_6780_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_6777_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_6781_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out2842;
          DCOMP._IOwnership _out2843;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2842, out _out2843);
          r = _out2842;
          resultingOwnership = _out2843;
          return ;
        }
      } else if (_source242.is_Apply) {
        DAST._IExpression _6784___mcc_h262 = _source242.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _6785___mcc_h263 = _source242.dtor_args;
        Dafny.ISequence<DAST._IExpression> _6786_args = _6785___mcc_h263;
        DAST._IExpression _6787_func = _6784___mcc_h262;
        {
          RAST._IExpr _6788_funcExpr;
          DCOMP._IOwnership _6789___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6790_recIdents;
          RAST._IExpr _out2844;
          DCOMP._IOwnership _out2845;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2846;
          DCOMP.COMP.GenExpr(_6787_func, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2844, out _out2845, out _out2846);
          _6788_funcExpr = _out2844;
          _6789___v134 = _out2845;
          _6790_recIdents = _out2846;
          readIdents = _6790_recIdents;
          Dafny.ISequence<Dafny.Rune> _6791_argString;
          _6791_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _6792_i;
          _6792_i = BigInteger.Zero;
          while ((_6792_i) < (new BigInteger((_6786_args).Count))) {
            if ((_6792_i).Sign == 1) {
              _6791_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6791_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _6793_argExpr;
            DCOMP._IOwnership _6794_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6795_argIdents;
            RAST._IExpr _out2847;
            DCOMP._IOwnership _out2848;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2849;
            DCOMP.COMP.GenExpr((_6786_args).Select(_6792_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2847, out _out2848, out _out2849);
            _6793_argExpr = _out2847;
            _6794_argOwned = _out2848;
            _6795_argIdents = _out2849;
            Dafny.ISequence<Dafny.Rune> _6796_argExprString;
            _6796_argExprString = (_6793_argExpr)._ToString(DCOMP.__default.IND);
            if (object.Equals(_6794_argOwned, DCOMP.Ownership.create_OwnershipOwned())) {
              _6796_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _6796_argExprString);
            }
            _6791_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6791_argString, _6796_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6795_argIdents);
            _6792_i = (_6792_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_6788_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _6791_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out2850;
          DCOMP._IOwnership _out2851;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2850, out _out2851);
          r = _out2850;
          resultingOwnership = _out2851;
          return ;
        }
      } else if (_source242.is_TypeTest) {
        DAST._IExpression _6797___mcc_h264 = _source242.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6798___mcc_h265 = _source242.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _6799___mcc_h266 = _source242.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _6800_variant = _6799___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6801_dType = _6798___mcc_h265;
        DAST._IExpression _6802_on = _6797___mcc_h264;
        {
          RAST._IExpr _6803_exprGen;
          DCOMP._IOwnership _6804___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6805_recIdents;
          RAST._IExpr _out2852;
          DCOMP._IOwnership _out2853;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2854;
          DCOMP.COMP.GenExpr(_6802_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2852, out _out2853, out _out2854);
          _6803_exprGen = _out2852;
          _6804___v135 = _out2853;
          _6805_recIdents = _out2854;
          RAST._IType _6806_dTypePath;
          RAST._IType _out2855;
          _out2855 = DCOMP.COMP.GenPath(_6801_dType);
          _6806_dTypePath = _out2855;
          r = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(((_6803_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(((_6806_dTypePath).MSel(DCOMP.__default.escapeIdent(_6800_variant)))._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. }")))));
          RAST._IExpr _out2856;
          DCOMP._IOwnership _out2857;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2856, out _out2857);
          r = _out2856;
          resultingOwnership = _out2857;
          readIdents = _6805_recIdents;
          return ;
        }
      } else if (_source242.is_InitializationValue) {
        DAST._IType _6807___mcc_h267 = _source242.dtor_typ;
        DAST._IType _6808_typ = _6807___mcc_h267;
        {
          RAST._IType _6809_typExpr;
          RAST._IType _out2858;
          _out2858 = DCOMP.COMP.GenType(_6808_typ, false, false);
          _6809_typExpr = _out2858;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_6809_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out2859;
          DCOMP._IOwnership _out2860;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2859, out _out2860);
          r = _out2859;
          resultingOwnership = _out2860;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source242.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out2861;
          DCOMP._IOwnership _out2862;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2861, out _out2862);
          r = _out2861;
          resultingOwnership = _out2862;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source242.is_SetBoundedPool) {
        DAST._IExpression _6810___mcc_h268 = _source242.dtor_of;
        DAST._IExpression _6811_of = _6810___mcc_h268;
        {
          RAST._IExpr _6812_exprGen;
          DCOMP._IOwnership _6813___v136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6814_recIdents;
          RAST._IExpr _out2863;
          DCOMP._IOwnership _out2864;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2865;
          DCOMP.COMP.GenExpr(_6811_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2863, out _out2864, out _out2865);
          _6812_exprGen = _out2863;
          _6813___v136 = _out2864;
          _6814_recIdents = _out2865;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6812_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out2866;
          DCOMP._IOwnership _out2867;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2866, out _out2867);
          r = _out2866;
          resultingOwnership = _out2867;
          readIdents = _6814_recIdents;
          return ;
        }
      } else if (_source242.is_SeqBoundedPool) {
        DAST._IExpression _6815___mcc_h269 = _source242.dtor_of;
        bool _6816___mcc_h270 = _source242.dtor_includeDuplicates;
        bool _6817_includeDuplicates = _6816___mcc_h270;
        DAST._IExpression _6818_of = _6815___mcc_h269;
        {
          RAST._IExpr _6819_exprGen;
          DCOMP._IOwnership _6820___v137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6821_recIdents;
          RAST._IExpr _out2868;
          DCOMP._IOwnership _out2869;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2870;
          DCOMP.COMP.GenExpr(_6818_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2868, out _out2869, out _out2870);
          _6819_exprGen = _out2868;
          _6820___v137 = _out2869;
          _6821_recIdents = _out2870;
          Dafny.ISequence<Dafny.Rune> _6822_s;
          _6822_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6819_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_6817_includeDuplicates)) {
            _6822_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _6822_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_6822_s);
          RAST._IExpr _out2871;
          DCOMP._IOwnership _out2872;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2871, out _out2872);
          r = _out2871;
          resultingOwnership = _out2872;
          readIdents = _6821_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _6823___mcc_h271 = _source242.dtor_lo;
        DAST._IExpression _6824___mcc_h272 = _source242.dtor_hi;
        DAST._IExpression _6825_hi = _6824___mcc_h272;
        DAST._IExpression _6826_lo = _6823___mcc_h271;
        {
          RAST._IExpr _6827_lo;
          DCOMP._IOwnership _6828___v138;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6829_recIdentsLo;
          RAST._IExpr _out2873;
          DCOMP._IOwnership _out2874;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2875;
          DCOMP.COMP.GenExpr(_6826_lo, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2873, out _out2874, out _out2875);
          _6827_lo = _out2873;
          _6828___v138 = _out2874;
          _6829_recIdentsLo = _out2875;
          RAST._IExpr _6830_hi;
          DCOMP._IOwnership _6831___v139;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6832_recIdentsHi;
          RAST._IExpr _out2876;
          DCOMP._IOwnership _out2877;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2878;
          DCOMP.COMP.GenExpr(_6825_hi, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2876, out _out2877, out _out2878);
          _6830_hi = _out2876;
          _6831___v139 = _out2877;
          _6832_recIdentsHi = _out2878;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_6827_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_6830_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out2879;
          DCOMP._IOwnership _out2880;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2879, out _out2880);
          r = _out2879;
          resultingOwnership = _out2880;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6829_recIdentsLo, _6832_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _6833_i;
      _6833_i = BigInteger.Zero;
      while ((_6833_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _6834_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _6835_m;
        RAST._IMod _out2881;
        _out2881 = DCOMP.COMP.GenModule((p).Select(_6833_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _6835_m = _out2881;
        _6834_generated = (_6835_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_6833_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _6834_generated);
        _6833_i = (_6833_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _6836_i;
      _6836_i = BigInteger.Zero;
      while ((_6836_i) < (new BigInteger((fullName).Count))) {
        if ((_6836_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_6836_i)));
        _6836_i = (_6836_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP
namespace DCOMPUTF16 {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in119 = (i).Drop(new BigInteger(2));
            i = _in119;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in120 = (i).Drop(BigInteger.One);
        i = _in120;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _6837___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_6837___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _6837___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_6837___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in121 = (i).Drop(new BigInteger(2));
        i = _in121;
        goto TAIL_CALL_START;
      } else {
        _6837___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_6837___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in122 = (i).Drop(BigInteger.One);
        i = _in122;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _6838___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_6838___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _6838___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_6838___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in123 = (i).Drop(BigInteger.One);
        i = _in123;
        goto TAIL_CALL_START;
      } else {
        _6838___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_6838___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in124 = (i).Drop(BigInteger.One);
        i = _in124;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMPUTF16.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMPUTF16.__default.has__special(i)))) && (!(DCOMPUTF16.__default.reserved__rust).Contains(i))) && (!(DCOMPUTF16.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMPUTF16.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMPUTF16.__default.is__tuple__builder(i)) {
        return DCOMPUTF16.__default.better__tuple__builder__name(i);
      } else if ((DCOMPUTF16.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMPUTF16.__default.is__idiomatic__rust__id(i)) {
        return DCOMPUTF16.__default.idiomatic__rust(i);
      } else if (DCOMPUTF16.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _6839_r = DCOMPUTF16.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _6839_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static bool UnicodeChars { get {
      return false;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMPUTF16.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static RAST._IType DafnyCharUnderlying { get {
      if (DCOMPUTF16.__default.UnicodeChars) {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"));
      } else {
        return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"));
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMPUTF16._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMPUTF16._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IOwnership>(DCOMPUTF16.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> dtor_ownerships { get; }
    _IEnvironment DowncastClone();
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMPUTF16._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMPUTF16._IOwnership ownership);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _ownerships;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      this._names = names;
      this._ownerships = ownerships;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_names, _ownerships);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Environment;
      return oth != null && object.Equals(this._names, oth._names) && object.Equals(this._ownerships, oth._ownerships);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ownerships));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ownerships);
      s += ")";
      return s;
    }
    private static readonly DCOMPUTF16._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Empty);
    public static DCOMPUTF16._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment>(DCOMPUTF16.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      return new Environment(names, ownerships);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      return create(names, ownerships);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> dtor_ownerships {
      get {
        return this._ownerships;
      }
    }
    public static DCOMPUTF16._IEnvironment Empty() {
      return DCOMPUTF16.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements());
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Select((this).dtor_ownerships,name), DCOMPUTF16.Ownership.create_OwnershipBorrowed()));
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Select((this).dtor_ownerships,name), DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()));
    }
    public DCOMPUTF16._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMPUTF16._IOwnership ownership)
    {
      return DCOMPUTF16.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update((this).dtor_ownerships, name, ownership));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _6840_body;
      Dafny.ISequence<RAST._IModDecl> _out2882;
      _out2882 = DCOMPUTF16.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _6840_body = _out2882;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name), _6840_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _6841_i;
      _6841_i = BigInteger.Zero;
      while ((_6841_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _6842_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source250 = (body).Select(_6841_i);
        if (_source250.is_Module) {
          DAST._IModule _6843___mcc_h0 = _source250.dtor_Module_a0;
          DAST._IModule _6844_m = _6843___mcc_h0;
          RAST._IMod _6845_mm;
          RAST._IMod _out2883;
          _out2883 = DCOMPUTF16.COMP.GenModule(_6844_m, containingPath);
          _6845_mm = _out2883;
          _6842_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_6845_mm));
        } else if (_source250.is_Class) {
          DAST._IClass _6846___mcc_h1 = _source250.dtor_Class_a0;
          DAST._IClass _6847_c = _6846___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out2884;
          _out2884 = DCOMPUTF16.COMP.GenClass(_6847_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_6847_c).dtor_name)));
          _6842_generated = _out2884;
        } else if (_source250.is_Trait) {
          DAST._ITrait _6848___mcc_h2 = _source250.dtor_Trait_a0;
          DAST._ITrait _6849_t = _6848___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _6850_tt;
          Dafny.ISequence<Dafny.Rune> _out2885;
          _out2885 = DCOMPUTF16.COMP.GenTrait(_6849_t, containingPath);
          _6850_tt = _out2885;
          _6842_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_6850_tt));
        } else if (_source250.is_Newtype) {
          DAST._INewtype _6851___mcc_h3 = _source250.dtor_Newtype_a0;
          DAST._INewtype _6852_n = _6851___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out2886;
          _out2886 = DCOMPUTF16.COMP.GenNewtype(_6852_n);
          _6842_generated = _out2886;
        } else {
          DAST._IDatatype _6853___mcc_h4 = _source250.dtor_Datatype_a0;
          DAST._IDatatype _6854_d = _6853___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out2887;
          _out2887 = DCOMPUTF16.COMP.GenDatatype(_6854_d);
          _6842_generated = _out2887;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _6842_generated);
        _6841_i = (_6841_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _6855_tpI;
      _6855_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_6855_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _6856_tp;
          _6856_tp = (@params).Select(_6855_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_6856_tp));
          RAST._IType _6857_genTp;
          RAST._IType _out2888;
          _out2888 = DCOMPUTF16.COMP.GenType(_6856_tp, false, false);
          _6857_genTp = _out2888;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_6857_genTp)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _6855_tpI = (_6855_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _6858_baseConstraints;
      _6858_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _6858_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _6859_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _6860_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _6861_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _6862_whereConstraints;
      Dafny.ISet<DAST._IType> _out2889;
      Dafny.ISequence<RAST._ITypeParam> _out2890;
      Dafny.ISequence<RAST._ITypeParam> _out2891;
      Dafny.ISequence<Dafny.Rune> _out2892;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2889, out _out2890, out _out2891, out _out2892);
      _6859_typeParamsSet = _out2889;
      _6860_sTypeParams = _out2890;
      _6861_sConstrainedTypeParams = _out2891;
      _6862_whereConstraints = _out2892;
      Dafny.ISequence<Dafny.Rune> _6863_constrainedTypeParams;
      _6863_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_6861_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _6864_fields;
      _6864_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _6865_fieldInits;
      _6865_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _6866_fieldI;
      _6866_fieldI = BigInteger.Zero;
      while ((_6866_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _6867_field;
        _6867_field = ((c).dtor_fields).Select(_6866_fieldI);
        RAST._IType _6868_fieldType;
        RAST._IType _out2893;
        _out2893 = DCOMPUTF16.COMP.GenType(((_6867_field).dtor_formal).dtor_typ, false, false);
        _6868_fieldType = _out2893;
        _6864_fields = Dafny.Sequence<RAST._IFormal>.Concat(_6864_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMPUTF16.__default.escapeIdent(((_6867_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_6868_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source251 = (_6867_field).dtor_defaultValue;
        if (_source251.is_None) {
          {
            RAST._IExpr _6869_RefCellNew;
            _6869_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            RAST._IExpr _6870_default;
            _6870_default = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"));
            _6865_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6865_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_6867_field).dtor_formal).dtor_name), (_6869_RefCellNew).Apply1((_6870_default).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())))));
          }
        } else {
          DAST._IExpression _6871___mcc_h0 = _source251.dtor_value;
          DAST._IExpression _6872_e = _6871___mcc_h0;
          {
            RAST._IExpr _6873_expr;
            DCOMPUTF16._IOwnership _6874___v37;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6875___v38;
            RAST._IExpr _out2894;
            DCOMPUTF16._IOwnership _out2895;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2896;
            DCOMPUTF16.COMP.GenExpr(_6872_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2894, out _out2895, out _out2896);
            _6873_expr = _out2894;
            _6874___v37 = _out2895;
            _6875___v38 = _out2896;
            RAST._IExpr _6876_RefCellNew;
            _6876_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            _6865_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6865_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_6867_field).dtor_formal).dtor_name), (_6876_RefCellNew).Apply1(_6873_expr))));
          }
        }
        _6866_fieldI = (_6866_fieldI) + (BigInteger.One);
      }
      BigInteger _6877_typeParamI;
      _6877_typeParamI = BigInteger.Zero;
      while ((_6877_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _6878_tpeGen;
        RAST._IType _out2897;
        _out2897 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_6877_typeParamI), false, false);
        _6878_tpeGen = _out2897;
        _6864_fields = Dafny.Sequence<RAST._IFormal>.Concat(_6864_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_6877_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_6878_tpeGen)))));
        _6865_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6865_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_6877_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _6877_typeParamI = (_6877_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _6879_datatypeName;
      _6879_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      RAST._IStruct _6880_struct;
      _6880_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _6879_datatypeName, _6860_sTypeParams, RAST.Formals.create_NamedFormals(_6864_fields));
      Dafny.ISequence<RAST._IType> _6881_typeParamsAsTypes;
      _6881_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_6882_typeParam) => {
        return RAST.__default.RawType((_6882_typeParam).dtor_content);
      })), _6860_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_6880_struct));
      Dafny.ISequence<RAST._IImplMember> _6883_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _6884_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2898;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2899;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _6859_typeParamsSet, out _out2898, out _out2899);
      _6883_implBodyRaw = _out2898;
      _6884_traitBodies = _out2899;
      Dafny.ISequence<RAST._IImplMember> _6885_implBody;
      _6885_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(RAST.Expr.create_Identifier(_6879_datatypeName), _6865_fieldInits))))), _6883_implBodyRaw);
      RAST._IImpl _6886_i;
      _6886_i = RAST.Impl.create_Impl(_6861_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6879_datatypeName), _6881_typeParamsAsTypes), _6862_whereConstraints, _6885_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_6886_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _6887_i;
        _6887_i = BigInteger.Zero;
        while ((_6887_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _6888_superClass;
          _6888_superClass = ((c).dtor_superClasses).Select(_6887_i);
          DAST._IType _source252 = _6888_superClass;
          if (_source252.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6889___mcc_h1 = _source252.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6890___mcc_h2 = _source252.dtor_typeArgs;
            DAST._IResolvedType _6891___mcc_h3 = _source252.dtor_resolved;
            DAST._IResolvedType _source253 = _6891___mcc_h3;
            if (_source253.is_Datatype) {
              DAST._IDatatypeType _6892___mcc_h7 = _source253.dtor_datatypeType;
            } else if (_source253.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6893___mcc_h9 = _source253.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _6894___mcc_h10 = _source253.dtor_attributes;
              Dafny.ISequence<DAST._IType> _6895_typeArgs = _6890___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6896_traitPath = _6889___mcc_h1;
              {
                RAST._IType _6897_pathStr;
                RAST._IType _out2900;
                _out2900 = DCOMPUTF16.COMP.GenPath(_6896_traitPath);
                _6897_pathStr = _out2900;
                Dafny.ISequence<RAST._IType> _6898_typeArgs;
                Dafny.ISequence<RAST._IType> _out2901;
                _out2901 = DCOMPUTF16.COMP.GenTypeArgs(_6895_typeArgs, false, false);
                _6898_typeArgs = _out2901;
                Dafny.ISequence<RAST._IImplMember> _6899_body;
                _6899_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_6884_traitBodies).Contains(_6896_traitPath)) {
                  _6899_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_6884_traitBodies,_6896_traitPath);
                }
                RAST._IType _6900_genSelfPath;
                RAST._IType _out2902;
                _out2902 = DCOMPUTF16.COMP.GenPath(path);
                _6900_genSelfPath = _out2902;
                RAST._IModDecl _6901_x;
                _6901_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6861_sConstrainedTypeParams, RAST.Type.create_TypeApp(_6897_pathStr, _6898_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_6900_genSelfPath, _6881_typeParamsAsTypes)), _6862_whereConstraints, _6899_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_6901_x));
              }
            } else {
              DAST._IType _6902___mcc_h13 = _source253.dtor_baseType;
              DAST._INewtypeRange _6903___mcc_h14 = _source253.dtor_range;
              bool _6904___mcc_h15 = _source253.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _6905___mcc_h16 = _source253.dtor_attributes;
            }
          } else if (_source252.is_Nullable) {
            DAST._IType _6906___mcc_h21 = _source252.dtor_Nullable_a0;
          } else if (_source252.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6907___mcc_h23 = _source252.dtor_Tuple_a0;
          } else if (_source252.is_Array) {
            DAST._IType _6908___mcc_h25 = _source252.dtor_element;
            BigInteger _6909___mcc_h26 = _source252.dtor_dims;
          } else if (_source252.is_Seq) {
            DAST._IType _6910___mcc_h29 = _source252.dtor_element;
          } else if (_source252.is_Set) {
            DAST._IType _6911___mcc_h31 = _source252.dtor_element;
          } else if (_source252.is_Multiset) {
            DAST._IType _6912___mcc_h33 = _source252.dtor_element;
          } else if (_source252.is_Map) {
            DAST._IType _6913___mcc_h35 = _source252.dtor_key;
            DAST._IType _6914___mcc_h36 = _source252.dtor_value;
          } else if (_source252.is_SetBuilder) {
            DAST._IType _6915___mcc_h39 = _source252.dtor_element;
          } else if (_source252.is_MapBuilder) {
            DAST._IType _6916___mcc_h41 = _source252.dtor_key;
            DAST._IType _6917___mcc_h42 = _source252.dtor_value;
          } else if (_source252.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6918___mcc_h45 = _source252.dtor_args;
            DAST._IType _6919___mcc_h46 = _source252.dtor_result;
          } else if (_source252.is_Primitive) {
            DAST._IPrimitive _6920___mcc_h49 = _source252.dtor_Primitive_a0;
          } else if (_source252.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6921___mcc_h51 = _source252.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _6922___mcc_h53 = _source252.dtor_TypeArg_a0;
          }
          _6887_i = (_6887_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _6923_d;
      _6923_d = RAST.Impl.create_ImplFor(_6861_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6879_datatypeName), _6881_typeParamsAsTypes), _6862_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(_6879_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _6924_defaultImpl;
      _6924_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_6923_d));
      RAST._IImpl _6925_p;
      _6925_p = RAST.Impl.create_ImplFor(_6861_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6879_datatypeName), _6881_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _6926_printImpl;
      _6926_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_6925_p));
      RAST._IImpl _6927_pp;
      _6927_pp = RAST.Impl.create_ImplFor(_6860_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6879_datatypeName), _6881_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.SelfBorrowed)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _6928_ptrPartialEqImpl;
      _6928_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_6927_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _6924_defaultImpl), _6926_printImpl), _6928_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _6929_typeParamsSet;
      _6929_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _6930_typeParams;
      _6930_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _6931_tpI;
      _6931_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_6931_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _6932_tp;
          _6932_tp = ((t).dtor_typeParams).Select(_6931_tpI);
          _6929_typeParamsSet = Dafny.Set<DAST._IType>.Union(_6929_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_6932_tp));
          RAST._IType _6933_genTp;
          RAST._IType _out2903;
          _out2903 = DCOMPUTF16.COMP.GenType(_6932_tp, false, false);
          _6933_genTp = _out2903;
          _6930_typeParams = Dafny.Sequence<RAST._IType>.Concat(_6930_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_6933_genTp));
          _6931_tpI = (_6931_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6934_fullPath;
      _6934_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _6935_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _6936___v42;
      Dafny.ISequence<RAST._IImplMember> _out2904;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2905;
      DCOMPUTF16.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_6934_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_6934_fullPath, (t).dtor_attributes)), _6929_typeParamsSet, out _out2904, out _out2905);
      _6935_implBody = _out2904;
      _6936___v42 = _out2905;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((t).dtor_name)), _6930_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _6935_implBody)))._ToString(DCOMPUTF16.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _6937_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _6938_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _6939_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _6940_whereConstraints;
      Dafny.ISet<DAST._IType> _out2906;
      Dafny.ISequence<RAST._ITypeParam> _out2907;
      Dafny.ISequence<RAST._ITypeParam> _out2908;
      Dafny.ISequence<Dafny.Rune> _out2909;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2906, out _out2907, out _out2908, out _out2909);
      _6937_typeParamsSet = _out2906;
      _6938_sTypeParams = _out2907;
      _6939_sConstrainedTypeParams = _out2908;
      _6940_whereConstraints = _out2909;
      Dafny.ISequence<RAST._IType> _6941_typeParamsAsTypes;
      _6941_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_6942_t) => {
        return RAST.__default.RawType((_6942_t).dtor_content);
      })), _6938_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _6943_constrainedTypeParams;
      _6943_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_6939_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _6944_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source254 = DCOMPUTF16.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source254.is_None) {
        RAST._IType _out2910;
        _out2910 = DCOMPUTF16.COMP.GenType((c).dtor_base, false, false);
        _6944_underlyingType = _out2910;
      } else {
        RAST._IType _6945___mcc_h0 = _source254.dtor_value;
        RAST._IType _6946_v = _6945___mcc_h0;
        _6944_underlyingType = _6946_v;
      }
      Dafny.ISequence<Dafny.Rune> _6947_datatypeName;
      _6947_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), _6947_datatypeName, _6938_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _6944_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _6948_fnBody;
      _6948_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source255 = (c).dtor_witnessExpr;
      if (_source255.is_None) {
        {
          _6948_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6948_fnBody, _6947_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _6949___mcc_h1 = _source255.dtor_value;
        DAST._IExpression _6950_e = _6949___mcc_h1;
        {
          RAST._IExpr _6951_eStr;
          DCOMPUTF16._IOwnership _6952___v43;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6953___v44;
          RAST._IExpr _out2911;
          DCOMPUTF16._IOwnership _out2912;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2913;
          DCOMPUTF16.COMP.GenExpr(_6950_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2911, out _out2912, out _out2913);
          _6951_eStr = _out2911;
          _6952___v43 = _out2912;
          _6953___v44 = _out2913;
          _6948_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6948_fnBody, _6947_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6951_eStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _6954_body;
      _6954_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_6948_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6939_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6947_datatypeName), _6941_typeParamsAsTypes), _6940_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_6954_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6939_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6947_datatypeName), _6941_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6939_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6947_datatypeName), _6941_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_6944_underlyingType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some((RAST.__default.SelfBorrowed).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _6955_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _6956_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _6957_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _6958_whereConstraints;
      Dafny.ISet<DAST._IType> _out2914;
      Dafny.ISequence<RAST._ITypeParam> _out2915;
      Dafny.ISequence<RAST._ITypeParam> _out2916;
      Dafny.ISequence<Dafny.Rune> _out2917;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2914, out _out2915, out _out2916, out _out2917);
      _6955_typeParamsSet = _out2914;
      _6956_sTypeParams = _out2915;
      _6957_sConstrainedTypeParams = _out2916;
      _6958_whereConstraints = _out2917;
      Dafny.ISequence<RAST._IType> _6959_typeParamsAsTypes;
      _6959_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_6960_t) => {
        return RAST.__default.RawType((_6960_t).dtor_content);
      })), _6956_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _6961_constrainedTypeParams;
      _6961_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_6957_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.IND, DCOMPUTF16.__default.IND));
      Dafny.ISequence<Dafny.Rune> _6962_datatypeName;
      _6962_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      Dafny.ISequence<RAST._IEnumCase> _6963_ctors;
      _6963_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _6964_i;
      _6964_i = BigInteger.Zero;
      while ((_6964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _6965_ctor;
        _6965_ctor = ((c).dtor_ctors).Select(_6964_i);
        Dafny.ISequence<RAST._IFormal> _6966_ctorArgs;
        _6966_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _6967_j;
        _6967_j = BigInteger.Zero;
        while ((_6967_j) < (new BigInteger(((_6965_ctor).dtor_args).Count))) {
          DAST._IFormal _6968_formal;
          _6968_formal = ((_6965_ctor).dtor_args).Select(_6967_j);
          RAST._IType _6969_formalType;
          RAST._IType _out2918;
          _out2918 = DCOMPUTF16.COMP.GenType((_6968_formal).dtor_typ, false, false);
          _6969_formalType = _out2918;
          if ((c).dtor_isCo) {
            _6966_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_6966_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_6968_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_6969_formalType)))));
          } else {
            _6966_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_6966_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_6968_formal).dtor_name), _6969_formalType)));
          }
          _6967_j = (_6967_j) + (BigInteger.One);
        }
        _6963_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_6963_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMPUTF16.__default.escapeIdent((_6965_ctor).dtor_name), RAST.Formals.create_NamedFormals(_6966_ctorArgs))));
        _6964_i = (_6964_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6970_selfPath;
      _6970_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _6971_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _6972_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2919;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2920;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_6970_selfPath, (c).dtor_attributes))), _6955_typeParamsSet, out _out2919, out _out2920);
      _6971_implBodyRaw = _out2919;
      _6972_traitBodies = _out2920;
      Dafny.ISequence<RAST._IImplMember> _6973_implBody;
      _6973_implBody = _6971_implBodyRaw;
      _6964_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6974_emittedFields;
      _6974_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_6964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _6975_ctor;
        _6975_ctor = ((c).dtor_ctors).Select(_6964_i);
        BigInteger _6976_j;
        _6976_j = BigInteger.Zero;
        while ((_6976_j) < (new BigInteger(((_6975_ctor).dtor_args).Count))) {
          DAST._IFormal _6977_formal;
          _6977_formal = ((_6975_ctor).dtor_args).Select(_6976_j);
          if (!((_6974_emittedFields).Contains((_6977_formal).dtor_name))) {
            _6974_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6974_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_6977_formal).dtor_name));
            RAST._IType _6978_formalType;
            RAST._IType _out2921;
            _out2921 = DCOMPUTF16.COMP.GenType((_6977_formal).dtor_typ, false, false);
            _6978_formalType = _out2921;
            Dafny.ISequence<RAST._IMatchCase> _6979_cases;
            _6979_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _6980_k;
            _6980_k = BigInteger.Zero;
            while ((_6980_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _6981_ctor2;
              _6981_ctor2 = ((c).dtor_ctors).Select(_6980_k);
              Dafny.ISequence<Dafny.Rune> _6982_pattern;
              _6982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6962_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent((_6981_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _6983_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _6984_l;
              _6984_l = BigInteger.Zero;
              bool _6985_hasMatchingField;
              _6985_hasMatchingField = false;
              while ((_6984_l) < (new BigInteger(((_6981_ctor2).dtor_args).Count))) {
                DAST._IFormal _6986_formal2;
                _6986_formal2 = ((_6981_ctor2).dtor_args).Select(_6984_l);
                if (((_6977_formal).dtor_name).Equals((_6986_formal2).dtor_name)) {
                  _6985_hasMatchingField = true;
                }
                _6982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6982_pattern, DCOMPUTF16.__default.escapeIdent((_6986_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _6984_l = (_6984_l) + (BigInteger.One);
              }
              _6982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_6982_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_6985_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _6983_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMPUTF16.__default.escapeIdent((_6977_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _6983_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_6977_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _6983_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _6987_ctorMatch;
              _6987_ctorMatch = RAST.MatchCase.create(_6982_pattern, RAST.Expr.create_RawExpr(_6983_rhs));
              _6979_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_6979_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_6987_ctorMatch));
              _6980_k = (_6980_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _6979_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_6979_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_6962_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _6988_methodBody;
            _6988_methodBody = RAST.Expr.create_Match(RAST.__default.self, _6979_cases);
            _6973_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_6973_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMPUTF16.__default.escapeIdent((_6977_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_6978_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6988_methodBody)))));
          }
          _6976_j = (_6976_j) + (BigInteger.One);
        }
        _6964_i = (_6964_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _6989_typeI;
        _6989_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _6990_types;
        _6990_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_6989_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _6991_genTp;
          RAST._IType _out2922;
          _out2922 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_6989_typeI), false, false);
          _6991_genTp = _out2922;
          _6990_types = Dafny.Sequence<RAST._IType>.Concat(_6990_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_6991_genTp))));
          _6989_typeI = (_6989_typeI) + (BigInteger.One);
        }
        _6963_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_6963_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_6992_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _6992_tpe);
})), _6990_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _6993_enumBody;
      _6993_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq, Clone)]")), _6962_datatypeName, _6956_sTypeParams, _6963_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_6957_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6962_datatypeName), _6959_typeParamsAsTypes), _6958_whereConstraints, _6973_implBody)));
      _6964_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _6994_printImplBodyCases;
      _6994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_6964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _6995_ctor;
        _6995_ctor = ((c).dtor_ctors).Select(_6964_i);
        Dafny.ISequence<Dafny.Rune> _6996_ctorMatch;
        _6996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_6995_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _6997_modulePrefix;
        _6997_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _6998_printRhs;
        _6998_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _6997_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent((_6995_ctor).dtor_name)), (((_6995_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _6999_j;
        _6999_j = BigInteger.Zero;
        while ((_6999_j) < (new BigInteger(((_6995_ctor).dtor_args).Count))) {
          DAST._IFormal _7000_formal;
          _7000_formal = ((_6995_ctor).dtor_args).Select(_6999_j);
          _6996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6996_ctorMatch, DCOMPUTF16.__default.escapeIdent((_7000_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_6999_j).Sign == 1) {
            _6998_printRhs = (_6998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _6998_printRhs = (_6998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMPUTF16.__default.escapeIdent((_7000_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _6999_j = (_6999_j) + (BigInteger.One);
        }
        _6996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_6996_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_6995_ctor).dtor_hasAnyArgs) {
          _6998_printRhs = (_6998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _6998_printRhs = (_6998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _6994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_6994_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6962_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _6996_ctorMatch), RAST.Expr.create_Block(_6998_printRhs))));
        _6964_i = (_6964_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _6994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_6994_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_6962_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _7001_printImplBody;
      _7001_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _6994_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _7002_printImpl;
      _7002_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6957_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6962_datatypeName), _6959_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_7001_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _7003_defaultImpl;
      _7003_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      Dafny.ISequence<RAST._IModDecl> _7004_asRefImpl;
      _7004_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _6964_i = BigInteger.Zero;
        RAST._IExpr _7005_structName;
        _7005_structName = (RAST.Expr.create_Identifier(_6962_datatypeName)).MSel(DCOMPUTF16.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _7006_structAssignments;
        _7006_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_6964_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _7007_formal;
          _7007_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_6964_i);
          _7006_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_7006_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent((_7007_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _6964_i = (_6964_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _7008_defaultConstrainedTypeParams;
        _7008_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_6956_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        RAST._IType _7009_fullType;
        _7009_fullType = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6962_datatypeName), _6959_typeParamsAsTypes);
        _7003_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7008_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, _7009_fullType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_7009_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_7005_structName, _7006_structAssignments))))))));
        _7004_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_7008_defaultConstrainedTypeParams, (((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("convert"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AsRef"))).Apply1(_7009_fullType), RAST.Type.create_Borrowed(_7009_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.self)))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_6993_enumBody, _7002_printImpl), _7003_defaultImpl), _7004_asRefImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi10 = new BigInteger((p).Count);
        for (BigInteger _7010_i = BigInteger.Zero; _7010_i < _hi10; _7010_i++) {
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(((p).Select(_7010_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi11 = new BigInteger((p).Count);
        for (BigInteger _7011_i = BigInteger.Zero; _7011_i < _hi11; _7011_i++) {
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(((p).Select(_7011_i))));
        }
      }
      return r;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _7012_i;
        _7012_i = BigInteger.Zero;
        while ((_7012_i) < (new BigInteger((args).Count))) {
          RAST._IType _7013_genTp;
          RAST._IType _out2923;
          _out2923 = DCOMPUTF16.COMP.GenType((args).Select(_7012_i), inBinding, inFn);
          _7013_genTp = _out2923;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_7013_genTp));
          _7012_i = (_7012_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source256 = c;
      if (_source256.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7014___mcc_h0 = _source256.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _7015___mcc_h1 = _source256.dtor_typeArgs;
        DAST._IResolvedType _7016___mcc_h2 = _source256.dtor_resolved;
        DAST._IResolvedType _7017_resolved = _7016___mcc_h2;
        Dafny.ISequence<DAST._IType> _7018_args = _7015___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7019_p = _7014___mcc_h0;
        {
          RAST._IType _7020_t;
          RAST._IType _out2924;
          _out2924 = DCOMPUTF16.COMP.GenPath(_7019_p);
          _7020_t = _out2924;
          Dafny.ISequence<RAST._IType> _7021_typeArgs;
          Dafny.ISequence<RAST._IType> _out2925;
          _out2925 = DCOMPUTF16.COMP.GenTypeArgs(_7018_args, inBinding, inFn);
          _7021_typeArgs = _out2925;
          s = RAST.Type.create_TypeApp(_7020_t, _7021_typeArgs);
          DAST._IResolvedType _source257 = _7017_resolved;
          if (_source257.is_Datatype) {
            DAST._IDatatypeType _7022___mcc_h21 = _source257.dtor_datatypeType;
            DAST._IDatatypeType _source258 = _7022___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7023___mcc_h22 = _source258.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _7024___mcc_h23 = _source258.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _7025_attributes = _7024___mcc_h23;
            {
              if (DCOMPUTF16.COMP.IsRcWrapped(_7025_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source257.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7026___mcc_h24 = _source257.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _7027___mcc_h25 = _source257.dtor_attributes;
            {
              if ((_7019_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::any::Any")));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _7028___mcc_h26 = _source257.dtor_baseType;
            DAST._INewtypeRange _7029___mcc_h27 = _source257.dtor_range;
            bool _7030___mcc_h28 = _source257.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _7031___mcc_h29 = _source257.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _7032_attributes = _7031___mcc_h29;
            bool _7033_erased = _7030___mcc_h28;
            DAST._INewtypeRange _7034_range = _7029___mcc_h27;
            DAST._IType _7035_t = _7028___mcc_h26;
            {
              if (_7033_erased) {
                Std.Wrappers._IOption<RAST._IType> _source259 = DCOMPUTF16.COMP.NewtypeToRustType(_7035_t, _7034_range);
                if (_source259.is_None) {
                } else {
                  RAST._IType _7036___mcc_h30 = _source259.dtor_value;
                  RAST._IType _7037_v = _7036___mcc_h30;
                  s = _7037_v;
                }
              }
            }
          }
        }
      } else if (_source256.is_Nullable) {
        DAST._IType _7038___mcc_h3 = _source256.dtor_Nullable_a0;
        DAST._IType _7039_inner = _7038___mcc_h3;
        {
          RAST._IType _7040_innerExpr;
          RAST._IType _out2926;
          _out2926 = DCOMPUTF16.COMP.GenType(_7039_inner, inBinding, inFn);
          _7040_innerExpr = _out2926;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_7040_innerExpr));
        }
      } else if (_source256.is_Tuple) {
        Dafny.ISequence<DAST._IType> _7041___mcc_h4 = _source256.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _7042_types = _7041___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _7043_args;
          _7043_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _7044_i;
          _7044_i = BigInteger.Zero;
          while ((_7044_i) < (new BigInteger((_7042_types).Count))) {
            RAST._IType _7045_generated;
            RAST._IType _out2927;
            _out2927 = DCOMPUTF16.COMP.GenType((_7042_types).Select(_7044_i), inBinding, inFn);
            _7045_generated = _out2927;
            _7043_args = Dafny.Sequence<RAST._IType>.Concat(_7043_args, Dafny.Sequence<RAST._IType>.FromElements(_7045_generated));
            _7044_i = (_7044_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_7043_args);
        }
      } else if (_source256.is_Array) {
        DAST._IType _7046___mcc_h5 = _source256.dtor_element;
        BigInteger _7047___mcc_h6 = _source256.dtor_dims;
        BigInteger _7048_dims = _7047___mcc_h6;
        DAST._IType _7049_element = _7046___mcc_h5;
        {
          RAST._IType _7050_elem;
          RAST._IType _out2928;
          _out2928 = DCOMPUTF16.COMP.GenType(_7049_element, inBinding, inFn);
          _7050_elem = _out2928;
          s = _7050_elem;
          BigInteger _7051_i;
          _7051_i = BigInteger.Zero;
          while ((_7051_i) < (_7048_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _7051_i = (_7051_i) + (BigInteger.One);
          }
        }
      } else if (_source256.is_Seq) {
        DAST._IType _7052___mcc_h7 = _source256.dtor_element;
        DAST._IType _7053_element = _7052___mcc_h7;
        {
          RAST._IType _7054_elem;
          RAST._IType _out2929;
          _out2929 = DCOMPUTF16.COMP.GenType(_7053_element, inBinding, inFn);
          _7054_elem = _out2929;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_7054_elem));
        }
      } else if (_source256.is_Set) {
        DAST._IType _7055___mcc_h8 = _source256.dtor_element;
        DAST._IType _7056_element = _7055___mcc_h8;
        {
          RAST._IType _7057_elem;
          RAST._IType _out2930;
          _out2930 = DCOMPUTF16.COMP.GenType(_7056_element, inBinding, inFn);
          _7057_elem = _out2930;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_7057_elem));
        }
      } else if (_source256.is_Multiset) {
        DAST._IType _7058___mcc_h9 = _source256.dtor_element;
        DAST._IType _7059_element = _7058___mcc_h9;
        {
          RAST._IType _7060_elem;
          RAST._IType _out2931;
          _out2931 = DCOMPUTF16.COMP.GenType(_7059_element, inBinding, inFn);
          _7060_elem = _out2931;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_7060_elem));
        }
      } else if (_source256.is_Map) {
        DAST._IType _7061___mcc_h10 = _source256.dtor_key;
        DAST._IType _7062___mcc_h11 = _source256.dtor_value;
        DAST._IType _7063_value = _7062___mcc_h11;
        DAST._IType _7064_key = _7061___mcc_h10;
        {
          RAST._IType _7065_keyType;
          RAST._IType _out2932;
          _out2932 = DCOMPUTF16.COMP.GenType(_7064_key, inBinding, inFn);
          _7065_keyType = _out2932;
          RAST._IType _7066_valueType;
          RAST._IType _out2933;
          _out2933 = DCOMPUTF16.COMP.GenType(_7063_value, inBinding, inFn);
          _7066_valueType = _out2933;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_7065_keyType, _7066_valueType));
        }
      } else if (_source256.is_SetBuilder) {
        DAST._IType _7067___mcc_h12 = _source256.dtor_element;
        DAST._IType _7068_elem = _7067___mcc_h12;
        {
          RAST._IType _7069_elemType;
          RAST._IType _out2934;
          _out2934 = DCOMPUTF16.COMP.GenType(_7068_elem, inBinding, inFn);
          _7069_elemType = _out2934;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_7069_elemType));
        }
      } else if (_source256.is_MapBuilder) {
        DAST._IType _7070___mcc_h13 = _source256.dtor_key;
        DAST._IType _7071___mcc_h14 = _source256.dtor_value;
        DAST._IType _7072_value = _7071___mcc_h14;
        DAST._IType _7073_key = _7070___mcc_h13;
        {
          RAST._IType _7074_keyType;
          RAST._IType _out2935;
          _out2935 = DCOMPUTF16.COMP.GenType(_7073_key, inBinding, inFn);
          _7074_keyType = _out2935;
          RAST._IType _7075_valueType;
          RAST._IType _out2936;
          _out2936 = DCOMPUTF16.COMP.GenType(_7072_value, inBinding, inFn);
          _7075_valueType = _out2936;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_7074_keyType, _7075_valueType));
        }
      } else if (_source256.is_Arrow) {
        Dafny.ISequence<DAST._IType> _7076___mcc_h15 = _source256.dtor_args;
        DAST._IType _7077___mcc_h16 = _source256.dtor_result;
        DAST._IType _7078_result = _7077___mcc_h16;
        Dafny.ISequence<DAST._IType> _7079_args = _7076___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _7080_argTypes;
          _7080_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _7081_i;
          _7081_i = BigInteger.Zero;
          while ((_7081_i) < (new BigInteger((_7079_args).Count))) {
            RAST._IType _7082_generated;
            RAST._IType _out2937;
            _out2937 = DCOMPUTF16.COMP.GenType((_7079_args).Select(_7081_i), inBinding, true);
            _7082_generated = _out2937;
            _7080_argTypes = Dafny.Sequence<RAST._IType>.Concat(_7080_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_7082_generated)));
            _7081_i = (_7081_i) + (BigInteger.One);
          }
          RAST._IType _7083_resultType;
          RAST._IType _out2938;
          _out2938 = DCOMPUTF16.COMP.GenType(_7078_result, inBinding, (inFn) || (inBinding));
          _7083_resultType = _out2938;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_7080_argTypes, RAST.Type.create_IntersectionType(_7083_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source256.is_Primitive) {
        DAST._IPrimitive _7084___mcc_h17 = _source256.dtor_Primitive_a0;
        DAST._IPrimitive _7085_p = _7084___mcc_h17;
        {
          DAST._IPrimitive _source260 = _7085_p;
          if (_source260.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source260.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source260.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar)));
          } else if (_source260.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar);
          }
        }
      } else if (_source256.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _7086___mcc_h18 = _source256.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _7087_v = _7086___mcc_h18;
        s = RAST.__default.RawType(_7087_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _7088___mcc_h19 = _source256.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source261 = _7088___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _7089___mcc_h20 = _source261;
        Dafny.ISequence<Dafny.Rune> _7090_name = _7089___mcc_h20;
        s = RAST.__default.RawType(DCOMPUTF16.__default.escapeIdent(_7090_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _7091_i;
      _7091_i = BigInteger.Zero;
      while ((_7091_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source262 = (body).Select(_7091_i);
        DAST._IMethod _7092___mcc_h0 = _source262;
        DAST._IMethod _7093_m = _7092___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source263 = (_7093_m).dtor_overridingPath;
          if (_source263.is_None) {
            {
              RAST._IImplMember _7094_generated;
              RAST._IImplMember _out2939;
              _out2939 = DCOMPUTF16.COMP.GenMethod(_7093_m, forTrait, enclosingType, enclosingTypeParams);
              _7094_generated = _out2939;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_7094_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7095___mcc_h1 = _source263.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7096_p = _7095___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _7097_existing;
              _7097_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_7096_p)) {
                _7097_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_7096_p);
              }
              RAST._IImplMember _7098_genMethod;
              RAST._IImplMember _out2940;
              _out2940 = DCOMPUTF16.COMP.GenMethod(_7093_m, true, enclosingType, enclosingTypeParams);
              _7098_genMethod = _out2940;
              _7097_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_7097_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_7098_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_7096_p, _7097_existing)));
            }
          }
        }
        _7091_i = (_7091_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _7099_i;
      _7099_i = BigInteger.Zero;
      while ((_7099_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _7100_param;
        _7100_param = (@params).Select(_7099_i);
        RAST._IType _7101_paramType;
        RAST._IType _out2941;
        _out2941 = DCOMPUTF16.COMP.GenType((_7100_param).dtor_typ, false, false);
        _7101_paramType = _out2941;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_7100_param).dtor_name), RAST.Type.create_Borrowed(_7101_paramType))));
        _7099_i = (_7099_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _7102_params;
      Dafny.ISequence<RAST._IFormal> _out2942;
      _out2942 = DCOMPUTF16.COMP.GenParams((m).dtor_params);
      _7102_params = _out2942;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7103_paramNames;
      _7103_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _7104_paramOwnerships;
      _7104_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
      BigInteger _7105_paramI;
      _7105_paramI = BigInteger.Zero;
      while ((_7105_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        Dafny.ISequence<Dafny.Rune> _7106_name;
        _7106_name = (((m).dtor_params).Select(_7105_paramI)).dtor_name;
        _7103_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_7103_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_7106_name));
        _7104_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_7104_paramOwnerships, _7106_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
        _7105_paramI = (_7105_paramI) + (BigInteger.One);
      }
      DCOMPUTF16._IEnvironment _7107_env;
      _7107_env = DCOMPUTF16.Environment.create(_7103_paramNames, _7104_paramOwnerships);
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _7102_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), _7102_params);
        } else {
          RAST._IType _7108_tpe;
          RAST._IType _out2943;
          _out2943 = DCOMPUTF16.COMP.GenType(enclosingType, false, false);
          _7108_tpe = _out2943;
          _7102_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_7108_tpe))), _7102_params);
        }
      }
      Dafny.ISequence<RAST._IType> _7109_retTypeArgs;
      _7109_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _7110_typeI;
      _7110_typeI = BigInteger.Zero;
      while ((_7110_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _7111_typeExpr;
        RAST._IType _out2944;
        _out2944 = DCOMPUTF16.COMP.GenType(((m).dtor_outTypes).Select(_7110_typeI), false, false);
        _7111_typeExpr = _out2944;
        _7109_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_7109_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_7111_typeExpr));
        _7110_typeI = (_7110_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _7112_visibility;
      _7112_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _7113_fnName;
      _7113_fnName = DCOMPUTF16.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _7114_typeParamsFiltered;
      _7114_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _7115_typeParamI;
      _7115_typeParamI = BigInteger.Zero;
      while ((_7115_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _7116_typeParam;
        _7116_typeParam = ((m).dtor_typeParams).Select(_7115_typeParamI);
        if (!((enclosingTypeParams).Contains(_7116_typeParam))) {
          _7114_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_7114_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_7116_typeParam));
        }
        _7115_typeParamI = (_7115_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _7117_whereClauses;
      _7117_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _7118_typeParams;
      _7118_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_7114_typeParamsFiltered).Count)).Sign == 1) {
        _7117_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_7117_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _7119_i;
        _7119_i = BigInteger.Zero;
        while ((_7119_i) < (new BigInteger((_7114_typeParamsFiltered).Count))) {
          RAST._IType _7120_typeExpr;
          RAST._IType _out2945;
          _out2945 = DCOMPUTF16.COMP.GenType((_7114_typeParamsFiltered).Select(_7119_i), false, false);
          _7120_typeExpr = _out2945;
          _7118_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_7118_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_7120_typeExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _7119_i = (_7119_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _7121_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _7122_earlyReturn;
        _7122_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source264 = (m).dtor_outVars;
        if (_source264.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7123___mcc_h0 = _source264.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7124_outVars = _7123___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _7125_tupleArgs;
            _7125_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _7126_outI;
            _7126_outI = BigInteger.Zero;
            while ((_7126_outI) < (new BigInteger((_7124_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _7127_outVar;
              _7127_outVar = (_7124_outVars).Select(_7126_outI);
              _7125_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_7125_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent((_7127_outVar)))));
              _7126_outI = (_7126_outI) + (BigInteger.One);
            }
            _7122_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_7125_tupleArgs)));
          }
        }
        RAST._IExpr _7128_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7129___v48;
        RAST._IExpr _out2946;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2947;
        DCOMPUTF16.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _7107_env, true, _7122_earlyReturn, out _out2946, out _out2947);
        _7128_body = _out2946;
        _7129___v48 = _out2947;
        _7121_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_7128_body);
      } else {
        _7121_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_7112_visibility, RAST.Fn.create(_7113_fnName, _7118_typeParams, _7102_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_7109_retTypeArgs).Count)) == (BigInteger.One)) ? ((_7109_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_7109_retTypeArgs)))), _7117_whereClauses, _7121_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7130_declarations;
      _7130_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _7131_i;
      _7131_i = BigInteger.Zero;
      while ((_7131_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _7132_stmt;
        _7132_stmt = (stmts).Select(_7131_i);
        RAST._IExpr _7133_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7134_recIdents;
        RAST._IExpr _out2948;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2949;
        DCOMPUTF16.COMP.GenStmt(_7132_stmt, selfIdent, env, (isLast) && ((_7131_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out2948, out _out2949);
        _7133_stmtExpr = _out2948;
        _7134_recIdents = _out2949;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_7134_recIdents, _7130_declarations));
        DAST._IStatement _source265 = _7132_stmt;
        if (_source265.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _7135___mcc_h0 = _source265.dtor_name;
          DAST._IType _7136___mcc_h1 = _source265.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _7137___mcc_h2 = _source265.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _7138_name = _7135___mcc_h0;
          {
            _7130_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_7130_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_7138_name));
          }
        } else if (_source265.is_Assign) {
          DAST._IAssignLhs _7139___mcc_h6 = _source265.dtor_lhs;
          DAST._IExpression _7140___mcc_h7 = _source265.dtor_value;
        } else if (_source265.is_If) {
          DAST._IExpression _7141___mcc_h10 = _source265.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _7142___mcc_h11 = _source265.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _7143___mcc_h12 = _source265.dtor_els;
        } else if (_source265.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _7144___mcc_h16 = _source265.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _7145___mcc_h17 = _source265.dtor_body;
        } else if (_source265.is_While) {
          DAST._IExpression _7146___mcc_h20 = _source265.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _7147___mcc_h21 = _source265.dtor_body;
        } else if (_source265.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _7148___mcc_h24 = _source265.dtor_boundName;
          DAST._IType _7149___mcc_h25 = _source265.dtor_boundType;
          DAST._IExpression _7150___mcc_h26 = _source265.dtor_over;
          Dafny.ISequence<DAST._IStatement> _7151___mcc_h27 = _source265.dtor_body;
        } else if (_source265.is_Call) {
          DAST._IExpression _7152___mcc_h32 = _source265.dtor_on;
          DAST._ICallName _7153___mcc_h33 = _source265.dtor_callName;
          Dafny.ISequence<DAST._IType> _7154___mcc_h34 = _source265.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _7155___mcc_h35 = _source265.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _7156___mcc_h36 = _source265.dtor_outs;
        } else if (_source265.is_Return) {
          DAST._IExpression _7157___mcc_h42 = _source265.dtor_expr;
        } else if (_source265.is_EarlyReturn) {
        } else if (_source265.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7158___mcc_h44 = _source265.dtor_toLabel;
        } else if (_source265.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _7159___mcc_h46 = _source265.dtor_body;
        } else if (_source265.is_JumpTailCallStart) {
        } else if (_source265.is_Halt) {
        } else {
          DAST._IExpression _7160___mcc_h48 = _source265.dtor_Print_a0;
        }
        generated = (generated).Then(_7133_stmtExpr);
        _7131_i = (_7131_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source266 = lhs;
      if (_source266.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _7161___mcc_h0 = _source266.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source267 = _7161___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _7162___mcc_h1 = _source267;
        Dafny.ISequence<Dafny.Rune> _7163_id = _7162___mcc_h1;
        {
          if (((env).IsBorrowed(_7163_id)) || ((env).IsBorrowedMut(_7163_id))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMPUTF16.__default.escapeIdent(_7163_id));
          } else {
            generated = DCOMPUTF16.__default.escapeIdent(_7163_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_7163_id);
          needsIIFE = false;
        }
      } else if (_source266.is_Select) {
        DAST._IExpression _7164___mcc_h2 = _source266.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _7165___mcc_h3 = _source266.dtor_field;
        Dafny.ISequence<Dafny.Rune> _7166_field = _7165___mcc_h3;
        DAST._IExpression _7167_on = _7164___mcc_h2;
        {
          RAST._IExpr _7168_onExpr;
          DCOMPUTF16._IOwnership _7169_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7170_recIdents;
          RAST._IExpr _out2950;
          DCOMPUTF16._IOwnership _out2951;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2952;
          DCOMPUTF16.COMP.GenExpr(_7167_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2950, out _out2951, out _out2952);
          _7168_onExpr = _out2950;
          _7169_onOwned = _out2951;
          _7170_recIdents = _out2952;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_7168_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _7166_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _7170_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _7171___mcc_h4 = _source266.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _7172___mcc_h5 = _source266.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _7173_indices = _7172___mcc_h5;
        DAST._IExpression _7174_on = _7171___mcc_h4;
        {
          RAST._IExpr _7175_onExpr;
          DCOMPUTF16._IOwnership _7176_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7177_recIdents;
          RAST._IExpr _out2953;
          DCOMPUTF16._IOwnership _out2954;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2955;
          DCOMPUTF16.COMP.GenExpr(_7174_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2953, out _out2954, out _out2955);
          _7175_onExpr = _out2953;
          _7176_onOwned = _out2954;
          _7177_recIdents = _out2955;
          readIdents = _7177_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _7178_i;
          _7178_i = BigInteger.Zero;
          while ((_7178_i) < (new BigInteger((_7173_indices).Count))) {
            RAST._IExpr _7179_idx;
            DCOMPUTF16._IOwnership _7180___v52;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7181_recIdentsIdx;
            RAST._IExpr _out2956;
            DCOMPUTF16._IOwnership _out2957;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2958;
            DCOMPUTF16.COMP.GenExpr((_7173_indices).Select(_7178_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2956, out _out2957, out _out2958);
            _7179_idx = _out2956;
            _7180___v52 = _out2957;
            _7181_recIdentsIdx = _out2958;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_7178_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_7179_idx)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7181_recIdentsIdx);
            _7178_i = (_7178_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_7175_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _7178_i = BigInteger.Zero;
          while ((_7178_i) < (new BigInteger((_7173_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_7178_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _7178_i = (_7178_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source268 = stmt;
      if (_source268.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _7182___mcc_h0 = _source268.dtor_name;
        DAST._IType _7183___mcc_h1 = _source268.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _7184___mcc_h2 = _source268.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source269 = _7184___mcc_h2;
        if (_source269.is_None) {
          DAST._IType _7185_typ = _7183___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _7186_name = _7182___mcc_h0;
          {
            RAST._IType _7187_typeString;
            RAST._IType _out2959;
            _out2959 = DCOMPUTF16.COMP.GenType(_7185_typ, true, false);
            _7187_typeString = _out2959;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_7186_name), Std.Wrappers.Option<RAST._IType>.create_Some(_7187_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _7188___mcc_h3 = _source269.dtor_value;
          DAST._IExpression _7189_expression = _7188___mcc_h3;
          DAST._IType _7190_typ = _7183___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _7191_name = _7182___mcc_h0;
          {
            RAST._IType _7192_typeString;
            RAST._IType _out2960;
            _out2960 = DCOMPUTF16.COMP.GenType(_7190_typ, true, false);
            _7192_typeString = _out2960;
            RAST._IExpr _7193_expr;
            DCOMPUTF16._IOwnership _7194___v53;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7195_recIdents;
            RAST._IExpr _out2961;
            DCOMPUTF16._IOwnership _out2962;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2963;
            DCOMPUTF16.COMP.GenExpr(_7189_expression, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2961, out _out2962, out _out2963);
            _7193_expr = _out2961;
            _7194___v53 = _out2962;
            _7195_recIdents = _out2963;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_7191_name), Std.Wrappers.Option<RAST._IType>.create_Some(_7192_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_7193_expr));
            readIdents = _7195_recIdents;
          }
        }
      } else if (_source268.is_Assign) {
        DAST._IAssignLhs _7196___mcc_h4 = _source268.dtor_lhs;
        DAST._IExpression _7197___mcc_h5 = _source268.dtor_value;
        DAST._IExpression _7198_expression = _7197___mcc_h5;
        DAST._IAssignLhs _7199_lhs = _7196___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _7200_lhsGen;
          bool _7201_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7202_recIdents;
          Dafny.ISequence<Dafny.Rune> _out2964;
          bool _out2965;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2966;
          DCOMPUTF16.COMP.GenAssignLhs(_7199_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, env, out _out2964, out _out2965, out _out2966);
          _7200_lhsGen = _out2964;
          _7201_needsIIFE = _out2965;
          _7202_recIdents = _out2966;
          RAST._IExpr _7203_exprGen;
          DCOMPUTF16._IOwnership _7204___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7205_exprIdents;
          RAST._IExpr _out2967;
          DCOMPUTF16._IOwnership _out2968;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2969;
          DCOMPUTF16.COMP.GenExpr(_7198_expression, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2967, out _out2968, out _out2969);
          _7203_exprGen = _out2967;
          _7204___v54 = _out2968;
          _7205_exprIdents = _out2969;
          if (_7201_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_7203_exprGen)), RAST.Expr.create_RawExpr(_7200_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_7200_lhsGen, _7203_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_7202_recIdents, _7205_exprIdents);
        }
      } else if (_source268.is_If) {
        DAST._IExpression _7206___mcc_h6 = _source268.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _7207___mcc_h7 = _source268.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _7208___mcc_h8 = _source268.dtor_els;
        Dafny.ISequence<DAST._IStatement> _7209_els = _7208___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _7210_thn = _7207___mcc_h7;
        DAST._IExpression _7211_cond = _7206___mcc_h6;
        {
          RAST._IExpr _7212_cond;
          DCOMPUTF16._IOwnership _7213___v55;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7214_recIdents;
          RAST._IExpr _out2970;
          DCOMPUTF16._IOwnership _out2971;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2972;
          DCOMPUTF16.COMP.GenExpr(_7211_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2970, out _out2971, out _out2972);
          _7212_cond = _out2970;
          _7213___v55 = _out2971;
          _7214_recIdents = _out2972;
          Dafny.ISequence<Dafny.Rune> _7215_condString;
          _7215_condString = (_7212_cond)._ToString(DCOMPUTF16.__default.IND);
          readIdents = _7214_recIdents;
          RAST._IExpr _7216_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7217_thnIdents;
          RAST._IExpr _out2973;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2974;
          DCOMPUTF16.COMP.GenStmts(_7210_thn, selfIdent, env, isLast, earlyReturn, out _out2973, out _out2974);
          _7216_thn = _out2973;
          _7217_thnIdents = _out2974;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7217_thnIdents);
          RAST._IExpr _7218_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7219_elsIdents;
          RAST._IExpr _out2975;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2976;
          DCOMPUTF16.COMP.GenStmts(_7209_els, selfIdent, env, isLast, earlyReturn, out _out2975, out _out2976);
          _7218_els = _out2975;
          _7219_elsIdents = _out2976;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7219_elsIdents);
          generated = RAST.Expr.create_IfExpr(_7212_cond, _7216_thn, _7218_els);
        }
      } else if (_source268.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _7220___mcc_h9 = _source268.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _7221___mcc_h10 = _source268.dtor_body;
        Dafny.ISequence<DAST._IStatement> _7222_body = _7221___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _7223_lbl = _7220___mcc_h9;
        {
          RAST._IExpr _7224_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7225_bodyIdents;
          RAST._IExpr _out2977;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2978;
          DCOMPUTF16.COMP.GenStmts(_7222_body, selfIdent, env, isLast, earlyReturn, out _out2977, out _out2978);
          _7224_body = _out2977;
          _7225_bodyIdents = _out2978;
          readIdents = _7225_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _7223_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_7224_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source268.is_While) {
        DAST._IExpression _7226___mcc_h11 = _source268.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _7227___mcc_h12 = _source268.dtor_body;
        Dafny.ISequence<DAST._IStatement> _7228_body = _7227___mcc_h12;
        DAST._IExpression _7229_cond = _7226___mcc_h11;
        {
          RAST._IExpr _7230_cond;
          DCOMPUTF16._IOwnership _7231___v56;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7232_recIdents;
          RAST._IExpr _out2979;
          DCOMPUTF16._IOwnership _out2980;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2981;
          DCOMPUTF16.COMP.GenExpr(_7229_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2979, out _out2980, out _out2981);
          _7230_cond = _out2979;
          _7231___v56 = _out2980;
          _7232_recIdents = _out2981;
          readIdents = _7232_recIdents;
          RAST._IExpr _7233_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7234_bodyIdents;
          RAST._IExpr _out2982;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2983;
          DCOMPUTF16.COMP.GenStmts(_7228_body, selfIdent, env, false, earlyReturn, out _out2982, out _out2983);
          _7233_body = _out2982;
          _7234_bodyIdents = _out2983;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7234_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_7230_cond), _7233_body);
        }
      } else if (_source268.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _7235___mcc_h13 = _source268.dtor_boundName;
        DAST._IType _7236___mcc_h14 = _source268.dtor_boundType;
        DAST._IExpression _7237___mcc_h15 = _source268.dtor_over;
        Dafny.ISequence<DAST._IStatement> _7238___mcc_h16 = _source268.dtor_body;
        Dafny.ISequence<DAST._IStatement> _7239_body = _7238___mcc_h16;
        DAST._IExpression _7240_over = _7237___mcc_h15;
        DAST._IType _7241_boundType = _7236___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _7242_boundName = _7235___mcc_h13;
        {
          RAST._IExpr _7243_over;
          DCOMPUTF16._IOwnership _7244___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7245_recIdents;
          RAST._IExpr _out2984;
          DCOMPUTF16._IOwnership _out2985;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2986;
          DCOMPUTF16.COMP.GenExpr(_7240_over, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2984, out _out2985, out _out2986);
          _7243_over = _out2984;
          _7244___v57 = _out2985;
          _7245_recIdents = _out2986;
          RAST._IType _7246_boundTypeStr;
          RAST._IType _out2987;
          _out2987 = DCOMPUTF16.COMP.GenType(_7241_boundType, false, false);
          _7246_boundTypeStr = _out2987;
          readIdents = _7245_recIdents;
          RAST._IExpr _7247_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7248_bodyIdents;
          RAST._IExpr _out2988;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2989;
          DCOMPUTF16.COMP.GenStmts(_7239_body, selfIdent, (env).Add(_7242_boundName, DCOMPUTF16.Ownership.create_OwnershipBorrowed()), false, earlyReturn, out _out2988, out _out2989);
          _7247_body = _out2988;
          _7248_bodyIdents = _out2989;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7248_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_7242_boundName));
          generated = RAST.Expr.create_For(DCOMPUTF16.__default.escapeIdent(_7242_boundName), _7243_over, _7247_body);
        }
      } else if (_source268.is_Call) {
        DAST._IExpression _7249___mcc_h17 = _source268.dtor_on;
        DAST._ICallName _7250___mcc_h18 = _source268.dtor_callName;
        Dafny.ISequence<DAST._IType> _7251___mcc_h19 = _source268.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _7252___mcc_h20 = _source268.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _7253___mcc_h21 = _source268.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _7254_maybeOutVars = _7253___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _7255_args = _7252___mcc_h20;
        Dafny.ISequence<DAST._IType> _7256_typeArgs = _7251___mcc_h19;
        DAST._ICallName _7257_name = _7250___mcc_h18;
        DAST._IExpression _7258_on = _7249___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _7259_typeArgString;
          _7259_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_7256_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _7260_typeI;
            _7260_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _7261_typeArgsR;
            _7261_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_7260_typeI) < (new BigInteger((_7256_typeArgs).Count))) {
              RAST._IType _7262_tpe;
              RAST._IType _out2990;
              _out2990 = DCOMPUTF16.COMP.GenType((_7256_typeArgs).Select(_7260_typeI), false, false);
              _7262_tpe = _out2990;
              _7261_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_7261_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_7262_tpe));
              _7260_typeI = (_7260_typeI) + (BigInteger.One);
            }
            _7259_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _7261_typeArgsR))._ToString(DCOMPUTF16.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _7263_argString;
          _7263_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _7264_i;
          _7264_i = BigInteger.Zero;
          while ((_7264_i) < (new BigInteger((_7255_args).Count))) {
            if ((_7264_i).Sign == 1) {
              _7263_argString = Dafny.Sequence<Dafny.Rune>.Concat(_7263_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _7265_argExpr;
            DCOMPUTF16._IOwnership _7266_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7267_argIdents;
            RAST._IExpr _out2991;
            DCOMPUTF16._IOwnership _out2992;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2993;
            DCOMPUTF16.COMP.GenExpr((_7255_args).Select(_7264_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2991, out _out2992, out _out2993);
            _7265_argExpr = _out2991;
            _7266_ownership = _out2992;
            _7267_argIdents = _out2993;
            Dafny.ISequence<Dafny.Rune> _7268_argExprString;
            _7268_argExprString = (_7265_argExpr)._ToString(DCOMPUTF16.__default.IND);
            _7263_argString = Dafny.Sequence<Dafny.Rune>.Concat(_7263_argString, _7268_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7267_argIdents);
            _7264_i = (_7264_i) + (BigInteger.One);
          }
          RAST._IExpr _7269_onExpr;
          DCOMPUTF16._IOwnership _7270___v58;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7271_enclosingIdents;
          RAST._IExpr _out2994;
          DCOMPUTF16._IOwnership _out2995;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2996;
          DCOMPUTF16.COMP.GenExpr(_7258_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out2994, out _out2995, out _out2996);
          _7269_onExpr = _out2994;
          _7270___v58 = _out2995;
          _7271_enclosingIdents = _out2996;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _7271_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _7272_enclosingString;
          _7272_enclosingString = (_7269_onExpr)._ToString(DCOMPUTF16.__default.IND);
          DAST._IExpression _source270 = _7258_on;
          if (_source270.is_Literal) {
            DAST._ILiteral _7273___mcc_h26 = _source270.dtor_Literal_a0;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _7274___mcc_h28 = _source270.dtor_Ident_a0;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7275___mcc_h30 = _source270.dtor_Companion_a0;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_7272_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source270.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _7276___mcc_h32 = _source270.dtor_Tuple_a0;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7277___mcc_h34 = _source270.dtor_path;
            Dafny.ISequence<DAST._IType> _7278___mcc_h35 = _source270.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _7279___mcc_h36 = _source270.dtor_args;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _7280___mcc_h40 = _source270.dtor_dims;
            DAST._IType _7281___mcc_h41 = _source270.dtor_typ;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_DatatypeValue) {
            DAST._IDatatypeType _7282___mcc_h44 = _source270.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _7283___mcc_h45 = _source270.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _7284___mcc_h46 = _source270.dtor_variant;
            bool _7285___mcc_h47 = _source270.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _7286___mcc_h48 = _source270.dtor_contents;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Convert) {
            DAST._IExpression _7287___mcc_h54 = _source270.dtor_value;
            DAST._IType _7288___mcc_h55 = _source270.dtor_from;
            DAST._IType _7289___mcc_h56 = _source270.dtor_typ;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_SeqConstruct) {
            DAST._IExpression _7290___mcc_h60 = _source270.dtor_length;
            DAST._IExpression _7291___mcc_h61 = _source270.dtor_elem;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _7292___mcc_h64 = _source270.dtor_elements;
            DAST._IType _7293___mcc_h65 = _source270.dtor_typ;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _7294___mcc_h68 = _source270.dtor_elements;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _7295___mcc_h70 = _source270.dtor_elements;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _7296___mcc_h72 = _source270.dtor_mapElems;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_MapBuilder) {
            DAST._IType _7297___mcc_h74 = _source270.dtor_keyType;
            DAST._IType _7298___mcc_h75 = _source270.dtor_valueType;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_SeqUpdate) {
            DAST._IExpression _7299___mcc_h78 = _source270.dtor_expr;
            DAST._IExpression _7300___mcc_h79 = _source270.dtor_indexExpr;
            DAST._IExpression _7301___mcc_h80 = _source270.dtor_value;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_MapUpdate) {
            DAST._IExpression _7302___mcc_h84 = _source270.dtor_expr;
            DAST._IExpression _7303___mcc_h85 = _source270.dtor_indexExpr;
            DAST._IExpression _7304___mcc_h86 = _source270.dtor_value;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_SetBuilder) {
            DAST._IType _7305___mcc_h90 = _source270.dtor_elemType;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_ToMultiset) {
            DAST._IExpression _7306___mcc_h92 = _source270.dtor_ToMultiset_a0;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_This) {
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Ite) {
            DAST._IExpression _7307___mcc_h94 = _source270.dtor_cond;
            DAST._IExpression _7308___mcc_h95 = _source270.dtor_thn;
            DAST._IExpression _7309___mcc_h96 = _source270.dtor_els;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_UnOp) {
            DAST._IUnaryOp _7310___mcc_h100 = _source270.dtor_unOp;
            DAST._IExpression _7311___mcc_h101 = _source270.dtor_expr;
            DAST.Format._IUnOpFormat _7312___mcc_h102 = _source270.dtor_format1;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_BinOp) {
            DAST._IBinOp _7313___mcc_h106 = _source270.dtor_op;
            DAST._IExpression _7314___mcc_h107 = _source270.dtor_left;
            DAST._IExpression _7315___mcc_h108 = _source270.dtor_right;
            DAST.Format._IBinOpFormat _7316___mcc_h109 = _source270.dtor_format2;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_ArrayLen) {
            DAST._IExpression _7317___mcc_h114 = _source270.dtor_expr;
            BigInteger _7318___mcc_h115 = _source270.dtor_dim;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_MapKeys) {
            DAST._IExpression _7319___mcc_h118 = _source270.dtor_expr;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_MapValues) {
            DAST._IExpression _7320___mcc_h120 = _source270.dtor_expr;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Select) {
            DAST._IExpression _7321___mcc_h122 = _source270.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _7322___mcc_h123 = _source270.dtor_field;
            bool _7323___mcc_h124 = _source270.dtor_isConstant;
            bool _7324___mcc_h125 = _source270.dtor_onDatatype;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_SelectFn) {
            DAST._IExpression _7325___mcc_h130 = _source270.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _7326___mcc_h131 = _source270.dtor_field;
            bool _7327___mcc_h132 = _source270.dtor_onDatatype;
            bool _7328___mcc_h133 = _source270.dtor_isStatic;
            BigInteger _7329___mcc_h134 = _source270.dtor_arity;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Index) {
            DAST._IExpression _7330___mcc_h140 = _source270.dtor_expr;
            DAST._ICollKind _7331___mcc_h141 = _source270.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _7332___mcc_h142 = _source270.dtor_indices;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_IndexRange) {
            DAST._IExpression _7333___mcc_h146 = _source270.dtor_expr;
            bool _7334___mcc_h147 = _source270.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _7335___mcc_h148 = _source270.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _7336___mcc_h149 = _source270.dtor_high;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_TupleSelect) {
            DAST._IExpression _7337___mcc_h154 = _source270.dtor_expr;
            BigInteger _7338___mcc_h155 = _source270.dtor_index;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Call) {
            DAST._IExpression _7339___mcc_h158 = _source270.dtor_on;
            DAST._ICallName _7340___mcc_h159 = _source270.dtor_callName;
            Dafny.ISequence<DAST._IType> _7341___mcc_h160 = _source270.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _7342___mcc_h161 = _source270.dtor_args;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _7343___mcc_h166 = _source270.dtor_params;
            DAST._IType _7344___mcc_h167 = _source270.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _7345___mcc_h168 = _source270.dtor_body;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _7346___mcc_h172 = _source270.dtor_values;
            DAST._IType _7347___mcc_h173 = _source270.dtor_retType;
            DAST._IExpression _7348___mcc_h174 = _source270.dtor_expr;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _7349___mcc_h178 = _source270.dtor_name;
            DAST._IType _7350___mcc_h179 = _source270.dtor_typ;
            DAST._IExpression _7351___mcc_h180 = _source270.dtor_value;
            DAST._IExpression _7352___mcc_h181 = _source270.dtor_iifeBody;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_Apply) {
            DAST._IExpression _7353___mcc_h186 = _source270.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _7354___mcc_h187 = _source270.dtor_args;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_TypeTest) {
            DAST._IExpression _7355___mcc_h190 = _source270.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7356___mcc_h191 = _source270.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _7357___mcc_h192 = _source270.dtor_variant;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_InitializationValue) {
            DAST._IType _7358___mcc_h196 = _source270.dtor_typ;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_BoolBoundedPool) {
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_SetBoundedPool) {
            DAST._IExpression _7359___mcc_h198 = _source270.dtor_of;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source270.is_SeqBoundedPool) {
            DAST._IExpression _7360___mcc_h200 = _source270.dtor_of;
            bool _7361___mcc_h201 = _source270.dtor_includeDuplicates;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _7362___mcc_h204 = _source270.dtor_lo;
            DAST._IExpression _7363___mcc_h205 = _source270.dtor_hi;
            {
              _7272_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7272_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _7364_receiver;
          _7364_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source271 = _7254_maybeOutVars;
          if (_source271.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7365___mcc_h208 = _source271.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7366_outVars = _7365___mcc_h208;
            {
              if ((new BigInteger((_7366_outVars).Count)) > (BigInteger.One)) {
                _7364_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _7367_outI;
              _7367_outI = BigInteger.Zero;
              while ((_7367_outI) < (new BigInteger((_7366_outVars).Count))) {
                if ((_7367_outI).Sign == 1) {
                  _7364_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_7364_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _7368_outVar;
                _7368_outVar = (_7366_outVars).Select(_7367_outI);
                _7364_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_7364_receiver, (_7368_outVar));
                _7367_outI = (_7367_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_7366_outVars).Count)) > (BigInteger.One)) {
                _7364_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_7364_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _7369_renderedName;
          _7369_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source272) => {
            if (_source272.is_Name) {
              Dafny.ISequence<Dafny.Rune> _7370___mcc_h209 = _source272.dtor_name;
              Dafny.ISequence<Dafny.Rune> _7371_name = _7370___mcc_h209;
              return DCOMPUTF16.__default.escapeIdent(_7371_name);
            } else if (_source272.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source272.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source272.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_7257_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_7364_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_7364_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _7272_enclosingString), _7369_renderedName), _7259_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _7263_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source268.is_Return) {
        DAST._IExpression _7372___mcc_h22 = _source268.dtor_expr;
        DAST._IExpression _7373_expr = _7372___mcc_h22;
        {
          RAST._IExpr _7374_expr;
          DCOMPUTF16._IOwnership _7375___v61;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7376_recIdents;
          RAST._IExpr _out2997;
          DCOMPUTF16._IOwnership _out2998;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2999;
          DCOMPUTF16.COMP.GenExpr(_7373_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2997, out _out2998, out _out2999);
          _7374_expr = _out2997;
          _7375___v61 = _out2998;
          _7376_recIdents = _out2999;
          readIdents = _7376_recIdents;
          if (isLast) {
            generated = _7374_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_7374_expr));
          }
        }
      } else if (_source268.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source268.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7377___mcc_h23 = _source268.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _7378_toLabel = _7377___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source273 = _7378_toLabel;
          if (_source273.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7379___mcc_h210 = _source273.dtor_value;
            Dafny.ISequence<Dafny.Rune> _7380_lbl = _7379___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _7380_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source268.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _7381___mcc_h24 = _source268.dtor_body;
        Dafny.ISequence<DAST._IStatement> _7382_body = _7381___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _7383_paramI;
          _7383_paramI = BigInteger.Zero;
          while ((_7383_paramI) < (new BigInteger(((env).dtor_names).Count))) {
            Dafny.ISequence<Dafny.Rune> _7384_param;
            _7384_param = ((env).dtor_names).Select(_7383_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_7384_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_7384_param))))));
            _7383_paramI = (_7383_paramI) + (BigInteger.One);
          }
          RAST._IExpr _7385_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7386_bodyIdents;
          RAST._IExpr _out3000;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3001;
          DCOMPUTF16.COMP.GenStmts(_7382_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), DCOMPUTF16.Environment.Empty(), false, earlyReturn, out _out3000, out _out3001);
          _7385_body = _out3000;
          _7386_bodyIdents = _out3001;
          readIdents = _7386_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _7385_body)));
        }
      } else if (_source268.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source268.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _7387___mcc_h25 = _source268.dtor_Print_a0;
        DAST._IExpression _7388_e = _7387___mcc_h25;
        {
          RAST._IExpr _7389_printedExpr;
          DCOMPUTF16._IOwnership _7390_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7391_recIdents;
          RAST._IExpr _out3002;
          DCOMPUTF16._IOwnership _out3003;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3004;
          DCOMPUTF16.COMP.GenExpr(_7388_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out3002, out _out3003, out _out3004);
          _7389_printedExpr = _out3002;
          _7390_recOwnership = _out3003;
          _7391_recIdents = _out3004;
          Dafny.ISequence<Dafny.Rune> _7392_printedExprString;
          _7392_printedExprString = (_7389_printedExpr)._ToString(DCOMPUTF16.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _7392_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _7391_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source274 = range;
      if (_source274.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source274.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source274.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source274.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source274.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source274.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source274.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source274.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source274.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source274.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source274.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMPUTF16._IOwnership ownership, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out3005;
        DCOMPUTF16._IOwnership _out3006;
        DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3005, out _out3006);
        @out = _out3005;
        resultingOwnership = _out3006;
        return ;
      } else if ((object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source275 = e;
      DAST._ILiteral _7393___mcc_h0 = _source275.dtor_Literal_a0;
      DAST._ILiteral _source276 = _7393___mcc_h0;
      if (_source276.is_BoolLiteral) {
        bool _7394___mcc_h1 = _source276.dtor_BoolLiteral_a0;
        if ((_7394___mcc_h1) == (false)) {
          {
            RAST._IExpr _out3007;
            DCOMPUTF16._IOwnership _out3008;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out3007, out _out3008);
            r = _out3007;
            resultingOwnership = _out3008;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out3009;
            DCOMPUTF16._IOwnership _out3010;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out3009, out _out3010);
            r = _out3009;
            resultingOwnership = _out3010;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source276.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _7395___mcc_h2 = _source276.dtor_IntLiteral_a0;
        DAST._IType _7396___mcc_h3 = _source276.dtor_IntLiteral_a1;
        DAST._IType _7397_t = _7396___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _7398_i = _7395___mcc_h2;
        {
          DAST._IType _source277 = _7397_t;
          if (_source277.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7399___mcc_h100 = _source277.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7400___mcc_h101 = _source277.dtor_typeArgs;
            DAST._IResolvedType _7401___mcc_h102 = _source277.dtor_resolved;
            DAST._IType _7402_o = _7397_t;
            {
              RAST._IType _7403_genType;
              RAST._IType _out3011;
              _out3011 = DCOMPUTF16.COMP.GenType(_7402_o, false, false);
              _7403_genType = _out3011;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7403_genType);
            }
          } else if (_source277.is_Nullable) {
            DAST._IType _7404___mcc_h106 = _source277.dtor_Nullable_a0;
            DAST._IType _7405_o = _7397_t;
            {
              RAST._IType _7406_genType;
              RAST._IType _out3012;
              _out3012 = DCOMPUTF16.COMP.GenType(_7405_o, false, false);
              _7406_genType = _out3012;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7406_genType);
            }
          } else if (_source277.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7407___mcc_h108 = _source277.dtor_Tuple_a0;
            DAST._IType _7408_o = _7397_t;
            {
              RAST._IType _7409_genType;
              RAST._IType _out3013;
              _out3013 = DCOMPUTF16.COMP.GenType(_7408_o, false, false);
              _7409_genType = _out3013;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7409_genType);
            }
          } else if (_source277.is_Array) {
            DAST._IType _7410___mcc_h110 = _source277.dtor_element;
            BigInteger _7411___mcc_h111 = _source277.dtor_dims;
            DAST._IType _7412_o = _7397_t;
            {
              RAST._IType _7413_genType;
              RAST._IType _out3014;
              _out3014 = DCOMPUTF16.COMP.GenType(_7412_o, false, false);
              _7413_genType = _out3014;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7413_genType);
            }
          } else if (_source277.is_Seq) {
            DAST._IType _7414___mcc_h114 = _source277.dtor_element;
            DAST._IType _7415_o = _7397_t;
            {
              RAST._IType _7416_genType;
              RAST._IType _out3015;
              _out3015 = DCOMPUTF16.COMP.GenType(_7415_o, false, false);
              _7416_genType = _out3015;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7416_genType);
            }
          } else if (_source277.is_Set) {
            DAST._IType _7417___mcc_h116 = _source277.dtor_element;
            DAST._IType _7418_o = _7397_t;
            {
              RAST._IType _7419_genType;
              RAST._IType _out3016;
              _out3016 = DCOMPUTF16.COMP.GenType(_7418_o, false, false);
              _7419_genType = _out3016;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7419_genType);
            }
          } else if (_source277.is_Multiset) {
            DAST._IType _7420___mcc_h118 = _source277.dtor_element;
            DAST._IType _7421_o = _7397_t;
            {
              RAST._IType _7422_genType;
              RAST._IType _out3017;
              _out3017 = DCOMPUTF16.COMP.GenType(_7421_o, false, false);
              _7422_genType = _out3017;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7422_genType);
            }
          } else if (_source277.is_Map) {
            DAST._IType _7423___mcc_h120 = _source277.dtor_key;
            DAST._IType _7424___mcc_h121 = _source277.dtor_value;
            DAST._IType _7425_o = _7397_t;
            {
              RAST._IType _7426_genType;
              RAST._IType _out3018;
              _out3018 = DCOMPUTF16.COMP.GenType(_7425_o, false, false);
              _7426_genType = _out3018;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7426_genType);
            }
          } else if (_source277.is_SetBuilder) {
            DAST._IType _7427___mcc_h124 = _source277.dtor_element;
            DAST._IType _7428_o = _7397_t;
            {
              RAST._IType _7429_genType;
              RAST._IType _out3019;
              _out3019 = DCOMPUTF16.COMP.GenType(_7428_o, false, false);
              _7429_genType = _out3019;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7429_genType);
            }
          } else if (_source277.is_MapBuilder) {
            DAST._IType _7430___mcc_h126 = _source277.dtor_key;
            DAST._IType _7431___mcc_h127 = _source277.dtor_value;
            DAST._IType _7432_o = _7397_t;
            {
              RAST._IType _7433_genType;
              RAST._IType _out3020;
              _out3020 = DCOMPUTF16.COMP.GenType(_7432_o, false, false);
              _7433_genType = _out3020;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7433_genType);
            }
          } else if (_source277.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7434___mcc_h130 = _source277.dtor_args;
            DAST._IType _7435___mcc_h131 = _source277.dtor_result;
            DAST._IType _7436_o = _7397_t;
            {
              RAST._IType _7437_genType;
              RAST._IType _out3021;
              _out3021 = DCOMPUTF16.COMP.GenType(_7436_o, false, false);
              _7437_genType = _out3021;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7437_genType);
            }
          } else if (_source277.is_Primitive) {
            DAST._IPrimitive _7438___mcc_h134 = _source277.dtor_Primitive_a0;
            DAST._IPrimitive _source278 = _7438___mcc_h134;
            if (_source278.is_Int) {
              {
                if ((new BigInteger((_7398_i).Count)) <= (new BigInteger(4))) {
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(RAST.Expr.create_LiteralInt(_7398_i));
                } else {
                  r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("int!"))).Apply1(RAST.Expr.create_LiteralString(_7398_i, true));
                }
              }
            } else if (_source278.is_Real) {
              DAST._IType _7439_o = _7397_t;
              {
                RAST._IType _7440_genType;
                RAST._IType _out3022;
                _out3022 = DCOMPUTF16.COMP.GenType(_7439_o, false, false);
                _7440_genType = _out3022;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7440_genType);
              }
            } else if (_source278.is_String) {
              DAST._IType _7441_o = _7397_t;
              {
                RAST._IType _7442_genType;
                RAST._IType _out3023;
                _out3023 = DCOMPUTF16.COMP.GenType(_7441_o, false, false);
                _7442_genType = _out3023;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7442_genType);
              }
            } else if (_source278.is_Bool) {
              DAST._IType _7443_o = _7397_t;
              {
                RAST._IType _7444_genType;
                RAST._IType _out3024;
                _out3024 = DCOMPUTF16.COMP.GenType(_7443_o, false, false);
                _7444_genType = _out3024;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7444_genType);
              }
            } else {
              DAST._IType _7445_o = _7397_t;
              {
                RAST._IType _7446_genType;
                RAST._IType _out3025;
                _out3025 = DCOMPUTF16.COMP.GenType(_7445_o, false, false);
                _7446_genType = _out3025;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7446_genType);
              }
            }
          } else if (_source277.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7447___mcc_h136 = _source277.dtor_Passthrough_a0;
            DAST._IType _7448_o = _7397_t;
            {
              RAST._IType _7449_genType;
              RAST._IType _out3026;
              _out3026 = DCOMPUTF16.COMP.GenType(_7448_o, false, false);
              _7449_genType = _out3026;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7449_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7450___mcc_h138 = _source277.dtor_TypeArg_a0;
            DAST._IType _7451_o = _7397_t;
            {
              RAST._IType _7452_genType;
              RAST._IType _out3027;
              _out3027 = DCOMPUTF16.COMP.GenType(_7451_o, false, false);
              _7452_genType = _out3027;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_7398_i), _7452_genType);
            }
          }
          RAST._IExpr _out3028;
          DCOMPUTF16._IOwnership _out3029;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3028, out _out3029);
          r = _out3028;
          resultingOwnership = _out3029;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source276.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _7453___mcc_h4 = _source276.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _7454___mcc_h5 = _source276.dtor_DecLiteral_a1;
        DAST._IType _7455___mcc_h6 = _source276.dtor_DecLiteral_a2;
        DAST._IType _7456_t = _7455___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _7457_d = _7454___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _7458_n = _7453___mcc_h4;
        {
          DAST._IType _source279 = _7456_t;
          if (_source279.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7459___mcc_h140 = _source279.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7460___mcc_h141 = _source279.dtor_typeArgs;
            DAST._IResolvedType _7461___mcc_h142 = _source279.dtor_resolved;
            DAST._IType _7462_o = _7456_t;
            {
              RAST._IType _7463_genType;
              RAST._IType _out3030;
              _out3030 = DCOMPUTF16.COMP.GenType(_7462_o, false, false);
              _7463_genType = _out3030;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7463_genType);
            }
          } else if (_source279.is_Nullable) {
            DAST._IType _7464___mcc_h146 = _source279.dtor_Nullable_a0;
            DAST._IType _7465_o = _7456_t;
            {
              RAST._IType _7466_genType;
              RAST._IType _out3031;
              _out3031 = DCOMPUTF16.COMP.GenType(_7465_o, false, false);
              _7466_genType = _out3031;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7466_genType);
            }
          } else if (_source279.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7467___mcc_h148 = _source279.dtor_Tuple_a0;
            DAST._IType _7468_o = _7456_t;
            {
              RAST._IType _7469_genType;
              RAST._IType _out3032;
              _out3032 = DCOMPUTF16.COMP.GenType(_7468_o, false, false);
              _7469_genType = _out3032;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7469_genType);
            }
          } else if (_source279.is_Array) {
            DAST._IType _7470___mcc_h150 = _source279.dtor_element;
            BigInteger _7471___mcc_h151 = _source279.dtor_dims;
            DAST._IType _7472_o = _7456_t;
            {
              RAST._IType _7473_genType;
              RAST._IType _out3033;
              _out3033 = DCOMPUTF16.COMP.GenType(_7472_o, false, false);
              _7473_genType = _out3033;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7473_genType);
            }
          } else if (_source279.is_Seq) {
            DAST._IType _7474___mcc_h154 = _source279.dtor_element;
            DAST._IType _7475_o = _7456_t;
            {
              RAST._IType _7476_genType;
              RAST._IType _out3034;
              _out3034 = DCOMPUTF16.COMP.GenType(_7475_o, false, false);
              _7476_genType = _out3034;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7476_genType);
            }
          } else if (_source279.is_Set) {
            DAST._IType _7477___mcc_h156 = _source279.dtor_element;
            DAST._IType _7478_o = _7456_t;
            {
              RAST._IType _7479_genType;
              RAST._IType _out3035;
              _out3035 = DCOMPUTF16.COMP.GenType(_7478_o, false, false);
              _7479_genType = _out3035;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7479_genType);
            }
          } else if (_source279.is_Multiset) {
            DAST._IType _7480___mcc_h158 = _source279.dtor_element;
            DAST._IType _7481_o = _7456_t;
            {
              RAST._IType _7482_genType;
              RAST._IType _out3036;
              _out3036 = DCOMPUTF16.COMP.GenType(_7481_o, false, false);
              _7482_genType = _out3036;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7482_genType);
            }
          } else if (_source279.is_Map) {
            DAST._IType _7483___mcc_h160 = _source279.dtor_key;
            DAST._IType _7484___mcc_h161 = _source279.dtor_value;
            DAST._IType _7485_o = _7456_t;
            {
              RAST._IType _7486_genType;
              RAST._IType _out3037;
              _out3037 = DCOMPUTF16.COMP.GenType(_7485_o, false, false);
              _7486_genType = _out3037;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7486_genType);
            }
          } else if (_source279.is_SetBuilder) {
            DAST._IType _7487___mcc_h164 = _source279.dtor_element;
            DAST._IType _7488_o = _7456_t;
            {
              RAST._IType _7489_genType;
              RAST._IType _out3038;
              _out3038 = DCOMPUTF16.COMP.GenType(_7488_o, false, false);
              _7489_genType = _out3038;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7489_genType);
            }
          } else if (_source279.is_MapBuilder) {
            DAST._IType _7490___mcc_h166 = _source279.dtor_key;
            DAST._IType _7491___mcc_h167 = _source279.dtor_value;
            DAST._IType _7492_o = _7456_t;
            {
              RAST._IType _7493_genType;
              RAST._IType _out3039;
              _out3039 = DCOMPUTF16.COMP.GenType(_7492_o, false, false);
              _7493_genType = _out3039;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7493_genType);
            }
          } else if (_source279.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7494___mcc_h170 = _source279.dtor_args;
            DAST._IType _7495___mcc_h171 = _source279.dtor_result;
            DAST._IType _7496_o = _7456_t;
            {
              RAST._IType _7497_genType;
              RAST._IType _out3040;
              _out3040 = DCOMPUTF16.COMP.GenType(_7496_o, false, false);
              _7497_genType = _out3040;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7497_genType);
            }
          } else if (_source279.is_Primitive) {
            DAST._IPrimitive _7498___mcc_h174 = _source279.dtor_Primitive_a0;
            DAST._IPrimitive _source280 = _7498___mcc_h174;
            if (_source280.is_Int) {
              DAST._IType _7499_o = _7456_t;
              {
                RAST._IType _7500_genType;
                RAST._IType _out3041;
                _out3041 = DCOMPUTF16.COMP.GenType(_7499_o, false, false);
                _7500_genType = _out3041;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7500_genType);
              }
            } else if (_source280.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source280.is_String) {
              DAST._IType _7501_o = _7456_t;
              {
                RAST._IType _7502_genType;
                RAST._IType _out3042;
                _out3042 = DCOMPUTF16.COMP.GenType(_7501_o, false, false);
                _7502_genType = _out3042;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7502_genType);
              }
            } else if (_source280.is_Bool) {
              DAST._IType _7503_o = _7456_t;
              {
                RAST._IType _7504_genType;
                RAST._IType _out3043;
                _out3043 = DCOMPUTF16.COMP.GenType(_7503_o, false, false);
                _7504_genType = _out3043;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7504_genType);
              }
            } else {
              DAST._IType _7505_o = _7456_t;
              {
                RAST._IType _7506_genType;
                RAST._IType _out3044;
                _out3044 = DCOMPUTF16.COMP.GenType(_7505_o, false, false);
                _7506_genType = _out3044;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7506_genType);
              }
            }
          } else if (_source279.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7507___mcc_h176 = _source279.dtor_Passthrough_a0;
            DAST._IType _7508_o = _7456_t;
            {
              RAST._IType _7509_genType;
              RAST._IType _out3045;
              _out3045 = DCOMPUTF16.COMP.GenType(_7508_o, false, false);
              _7509_genType = _out3045;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7509_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7510___mcc_h178 = _source279.dtor_TypeArg_a0;
            DAST._IType _7511_o = _7456_t;
            {
              RAST._IType _7512_genType;
              RAST._IType _out3046;
              _out3046 = DCOMPUTF16.COMP.GenType(_7511_o, false, false);
              _7512_genType = _out3046;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _7458_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _7457_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _7512_genType);
            }
          }
          RAST._IExpr _out3047;
          DCOMPUTF16._IOwnership _out3048;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3047, out _out3048);
          r = _out3047;
          resultingOwnership = _out3048;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source276.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _7513___mcc_h7 = _source276.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _7514_l = _7513___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_7514_l, false));
          RAST._IExpr _out3049;
          DCOMPUTF16._IOwnership _out3050;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3049, out _out3050);
          r = _out3049;
          resultingOwnership = _out3050;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source276.is_CharLiteral) {
        Dafny.Rune _7515___mcc_h8 = _source276.dtor_CharLiteral_a0;
        Dafny.Rune _7516_c = _7515___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_7516_c).Value)));
          r = RAST.Expr.create_TypeAscription(r, DCOMPUTF16.__default.DafnyCharUnderlying);
          r = ((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out3051;
          DCOMPUTF16._IOwnership _out3052;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3051, out _out3052);
          r = _out3051;
          resultingOwnership = _out3052;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _7517___mcc_h9 = _source276.dtor_Null_a0;
        DAST._IType _7518_tpe = _7517___mcc_h9;
        {
          RAST._IType _7519_tpeGen;
          RAST._IType _out3053;
          _out3053 = DCOMPUTF16.COMP.GenType(_7518_tpe, false, false);
          _7519_tpeGen = _out3053;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _7519_tpeGen);
          RAST._IExpr _out3054;
          DCOMPUTF16._IOwnership _out3055;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3054, out _out3055);
          r = _out3054;
          resultingOwnership = _out3055;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs53 = e;
      DAST._IBinOp _7520_op = _let_tmp_rhs53.dtor_op;
      DAST._IExpression _7521_lExpr = _let_tmp_rhs53.dtor_left;
      DAST._IExpression _7522_rExpr = _let_tmp_rhs53.dtor_right;
      DAST.Format._IBinOpFormat _7523_format = _let_tmp_rhs53.dtor_format2;
      bool _7524_becomesLeftCallsRight;
      _7524_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source281) => {
        if (_source281.is_Eq) {
          bool _7525___mcc_h0 = _source281.dtor_referential;
          bool _7526___mcc_h1 = _source281.dtor_nullable;
          return false;
        } else if (_source281.is_Div) {
          return false;
        } else if (_source281.is_EuclidianDiv) {
          return false;
        } else if (_source281.is_Mod) {
          return false;
        } else if (_source281.is_EuclidianMod) {
          return false;
        } else if (_source281.is_Lt) {
          return false;
        } else if (_source281.is_LtChar) {
          return false;
        } else if (_source281.is_Plus) {
          return false;
        } else if (_source281.is_Minus) {
          return false;
        } else if (_source281.is_Times) {
          return false;
        } else if (_source281.is_BitwiseAnd) {
          return false;
        } else if (_source281.is_BitwiseOr) {
          return false;
        } else if (_source281.is_BitwiseXor) {
          return false;
        } else if (_source281.is_BitwiseShiftRight) {
          return false;
        } else if (_source281.is_BitwiseShiftLeft) {
          return false;
        } else if (_source281.is_And) {
          return false;
        } else if (_source281.is_Or) {
          return false;
        } else if (_source281.is_In) {
          return false;
        } else if (_source281.is_SeqProperPrefix) {
          return false;
        } else if (_source281.is_SeqPrefix) {
          return false;
        } else if (_source281.is_SetMerge) {
          return true;
        } else if (_source281.is_SetSubtraction) {
          return true;
        } else if (_source281.is_SetIntersection) {
          return true;
        } else if (_source281.is_Subset) {
          return false;
        } else if (_source281.is_ProperSubset) {
          return false;
        } else if (_source281.is_SetDisjoint) {
          return true;
        } else if (_source281.is_MapMerge) {
          return true;
        } else if (_source281.is_MapSubtraction) {
          return true;
        } else if (_source281.is_MultisetMerge) {
          return true;
        } else if (_source281.is_MultisetSubtraction) {
          return true;
        } else if (_source281.is_MultisetIntersection) {
          return true;
        } else if (_source281.is_Submultiset) {
          return false;
        } else if (_source281.is_ProperSubmultiset) {
          return false;
        } else if (_source281.is_MultisetDisjoint) {
          return true;
        } else if (_source281.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _7527___mcc_h4 = _source281.dtor_Passthrough_a0;
          return false;
        }
      }))(_7520_op);
      bool _7528_becomesRightCallsLeft;
      _7528_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source282) => {
        if (_source282.is_Eq) {
          bool _7529___mcc_h6 = _source282.dtor_referential;
          bool _7530___mcc_h7 = _source282.dtor_nullable;
          return false;
        } else if (_source282.is_Div) {
          return false;
        } else if (_source282.is_EuclidianDiv) {
          return false;
        } else if (_source282.is_Mod) {
          return false;
        } else if (_source282.is_EuclidianMod) {
          return false;
        } else if (_source282.is_Lt) {
          return false;
        } else if (_source282.is_LtChar) {
          return false;
        } else if (_source282.is_Plus) {
          return false;
        } else if (_source282.is_Minus) {
          return false;
        } else if (_source282.is_Times) {
          return false;
        } else if (_source282.is_BitwiseAnd) {
          return false;
        } else if (_source282.is_BitwiseOr) {
          return false;
        } else if (_source282.is_BitwiseXor) {
          return false;
        } else if (_source282.is_BitwiseShiftRight) {
          return false;
        } else if (_source282.is_BitwiseShiftLeft) {
          return false;
        } else if (_source282.is_And) {
          return false;
        } else if (_source282.is_Or) {
          return false;
        } else if (_source282.is_In) {
          return true;
        } else if (_source282.is_SeqProperPrefix) {
          return false;
        } else if (_source282.is_SeqPrefix) {
          return false;
        } else if (_source282.is_SetMerge) {
          return false;
        } else if (_source282.is_SetSubtraction) {
          return false;
        } else if (_source282.is_SetIntersection) {
          return false;
        } else if (_source282.is_Subset) {
          return false;
        } else if (_source282.is_ProperSubset) {
          return false;
        } else if (_source282.is_SetDisjoint) {
          return false;
        } else if (_source282.is_MapMerge) {
          return false;
        } else if (_source282.is_MapSubtraction) {
          return false;
        } else if (_source282.is_MultisetMerge) {
          return false;
        } else if (_source282.is_MultisetSubtraction) {
          return false;
        } else if (_source282.is_MultisetIntersection) {
          return false;
        } else if (_source282.is_Submultiset) {
          return false;
        } else if (_source282.is_ProperSubmultiset) {
          return false;
        } else if (_source282.is_MultisetDisjoint) {
          return false;
        } else if (_source282.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _7531___mcc_h10 = _source282.dtor_Passthrough_a0;
          return false;
        }
      }))(_7520_op);
      bool _7532_becomesCallLeftRight;
      _7532_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source283) => {
        if (_source283.is_Eq) {
          bool _7533___mcc_h12 = _source283.dtor_referential;
          bool _7534___mcc_h13 = _source283.dtor_nullable;
          if ((_7533___mcc_h12) == (true)) {
            if ((_7534___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source283.is_Div) {
          return false;
        } else if (_source283.is_EuclidianDiv) {
          return false;
        } else if (_source283.is_Mod) {
          return false;
        } else if (_source283.is_EuclidianMod) {
          return false;
        } else if (_source283.is_Lt) {
          return false;
        } else if (_source283.is_LtChar) {
          return false;
        } else if (_source283.is_Plus) {
          return false;
        } else if (_source283.is_Minus) {
          return false;
        } else if (_source283.is_Times) {
          return false;
        } else if (_source283.is_BitwiseAnd) {
          return false;
        } else if (_source283.is_BitwiseOr) {
          return false;
        } else if (_source283.is_BitwiseXor) {
          return false;
        } else if (_source283.is_BitwiseShiftRight) {
          return false;
        } else if (_source283.is_BitwiseShiftLeft) {
          return false;
        } else if (_source283.is_And) {
          return false;
        } else if (_source283.is_Or) {
          return false;
        } else if (_source283.is_In) {
          return false;
        } else if (_source283.is_SeqProperPrefix) {
          return false;
        } else if (_source283.is_SeqPrefix) {
          return false;
        } else if (_source283.is_SetMerge) {
          return false;
        } else if (_source283.is_SetSubtraction) {
          return false;
        } else if (_source283.is_SetIntersection) {
          return false;
        } else if (_source283.is_Subset) {
          return false;
        } else if (_source283.is_ProperSubset) {
          return false;
        } else if (_source283.is_SetDisjoint) {
          return false;
        } else if (_source283.is_MapMerge) {
          return false;
        } else if (_source283.is_MapSubtraction) {
          return false;
        } else if (_source283.is_MultisetMerge) {
          return false;
        } else if (_source283.is_MultisetSubtraction) {
          return false;
        } else if (_source283.is_MultisetIntersection) {
          return false;
        } else if (_source283.is_Submultiset) {
          return false;
        } else if (_source283.is_ProperSubmultiset) {
          return false;
        } else if (_source283.is_MultisetDisjoint) {
          return false;
        } else if (_source283.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _7535___mcc_h16 = _source283.dtor_Passthrough_a0;
          return false;
        }
      }))(_7520_op);
      DCOMPUTF16._IOwnership _7536_expectedLeftOwnership;
      _7536_expectedLeftOwnership = ((_7524_becomesLeftCallsRight) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : ((((_7528_becomesRightCallsLeft) || (_7532_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      DCOMPUTF16._IOwnership _7537_expectedRightOwnership;
      _7537_expectedRightOwnership = (((_7524_becomesLeftCallsRight) || (_7532_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (((_7528_becomesRightCallsLeft) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _7538_left;
      DCOMPUTF16._IOwnership _7539___v66;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7540_recIdentsL;
      RAST._IExpr _out3056;
      DCOMPUTF16._IOwnership _out3057;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3058;
      DCOMPUTF16.COMP.GenExpr(_7521_lExpr, selfIdent, env, _7536_expectedLeftOwnership, out _out3056, out _out3057, out _out3058);
      _7538_left = _out3056;
      _7539___v66 = _out3057;
      _7540_recIdentsL = _out3058;
      RAST._IExpr _7541_right;
      DCOMPUTF16._IOwnership _7542___v67;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7543_recIdentsR;
      RAST._IExpr _out3059;
      DCOMPUTF16._IOwnership _out3060;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3061;
      DCOMPUTF16.COMP.GenExpr(_7522_rExpr, selfIdent, env, _7537_expectedRightOwnership, out _out3059, out _out3060, out _out3061);
      _7541_right = _out3059;
      _7542___v67 = _out3060;
      _7543_recIdentsR = _out3061;
      DAST._IBinOp _source284 = _7520_op;
      if (_source284.is_Eq) {
        bool _7544___mcc_h18 = _source284.dtor_referential;
        bool _7545___mcc_h19 = _source284.dtor_nullable;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source285 = _7520_op;
            if (_source285.is_Eq) {
              bool _7546___mcc_h24 = _source285.dtor_referential;
              bool _7547___mcc_h25 = _source285.dtor_nullable;
              bool _7548_nullable = _7547___mcc_h25;
              bool _7549_referential = _7546___mcc_h24;
              {
                if (_7549_referential) {
                  if (_7548_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source285.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source285.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7550___mcc_h26 = _source285.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7551_op = _7550___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_7551_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_Div) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source286 = _7520_op;
            if (_source286.is_Eq) {
              bool _7552___mcc_h27 = _source286.dtor_referential;
              bool _7553___mcc_h28 = _source286.dtor_nullable;
              bool _7554_nullable = _7553___mcc_h28;
              bool _7555_referential = _7552___mcc_h27;
              {
                if (_7555_referential) {
                  if (_7554_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source286.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source286.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7556___mcc_h29 = _source286.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7557_op = _7556___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_7557_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_EuclidianDiv) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source287 = _7520_op;
            if (_source287.is_Eq) {
              bool _7558___mcc_h30 = _source287.dtor_referential;
              bool _7559___mcc_h31 = _source287.dtor_nullable;
              bool _7560_nullable = _7559___mcc_h31;
              bool _7561_referential = _7558___mcc_h30;
              {
                if (_7561_referential) {
                  if (_7560_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source287.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source287.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7562___mcc_h32 = _source287.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7563_op = _7562___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_7563_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_Mod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source288 = _7520_op;
            if (_source288.is_Eq) {
              bool _7564___mcc_h33 = _source288.dtor_referential;
              bool _7565___mcc_h34 = _source288.dtor_nullable;
              bool _7566_nullable = _7565___mcc_h34;
              bool _7567_referential = _7564___mcc_h33;
              {
                if (_7567_referential) {
                  if (_7566_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source288.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source288.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7568___mcc_h35 = _source288.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7569_op = _7568___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_7569_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_EuclidianMod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source289 = _7520_op;
            if (_source289.is_Eq) {
              bool _7570___mcc_h36 = _source289.dtor_referential;
              bool _7571___mcc_h37 = _source289.dtor_nullable;
              bool _7572_nullable = _7571___mcc_h37;
              bool _7573_referential = _7570___mcc_h36;
              {
                if (_7573_referential) {
                  if (_7572_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source289.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source289.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7574___mcc_h38 = _source289.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7575_op = _7574___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_7575_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_Lt) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source290 = _7520_op;
            if (_source290.is_Eq) {
              bool _7576___mcc_h39 = _source290.dtor_referential;
              bool _7577___mcc_h40 = _source290.dtor_nullable;
              bool _7578_nullable = _7577___mcc_h40;
              bool _7579_referential = _7576___mcc_h39;
              {
                if (_7579_referential) {
                  if (_7578_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source290.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source290.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7580___mcc_h41 = _source290.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7581_op = _7580___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_7581_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_LtChar) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source291 = _7520_op;
            if (_source291.is_Eq) {
              bool _7582___mcc_h42 = _source291.dtor_referential;
              bool _7583___mcc_h43 = _source291.dtor_nullable;
              bool _7584_nullable = _7583___mcc_h43;
              bool _7585_referential = _7582___mcc_h42;
              {
                if (_7585_referential) {
                  if (_7584_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source291.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source291.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7586___mcc_h44 = _source291.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7587_op = _7586___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_7587_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_Plus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source292 = _7520_op;
            if (_source292.is_Eq) {
              bool _7588___mcc_h45 = _source292.dtor_referential;
              bool _7589___mcc_h46 = _source292.dtor_nullable;
              bool _7590_nullable = _7589___mcc_h46;
              bool _7591_referential = _7588___mcc_h45;
              {
                if (_7591_referential) {
                  if (_7590_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source292.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source292.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7592___mcc_h47 = _source292.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7593_op = _7592___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_7593_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_Minus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source293 = _7520_op;
            if (_source293.is_Eq) {
              bool _7594___mcc_h48 = _source293.dtor_referential;
              bool _7595___mcc_h49 = _source293.dtor_nullable;
              bool _7596_nullable = _7595___mcc_h49;
              bool _7597_referential = _7594___mcc_h48;
              {
                if (_7597_referential) {
                  if (_7596_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source293.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source293.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7598___mcc_h50 = _source293.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7599_op = _7598___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_7599_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_Times) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source294 = _7520_op;
            if (_source294.is_Eq) {
              bool _7600___mcc_h51 = _source294.dtor_referential;
              bool _7601___mcc_h52 = _source294.dtor_nullable;
              bool _7602_nullable = _7601___mcc_h52;
              bool _7603_referential = _7600___mcc_h51;
              {
                if (_7603_referential) {
                  if (_7602_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source294.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source294.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7604___mcc_h53 = _source294.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7605_op = _7604___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_7605_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_BitwiseAnd) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source295 = _7520_op;
            if (_source295.is_Eq) {
              bool _7606___mcc_h54 = _source295.dtor_referential;
              bool _7607___mcc_h55 = _source295.dtor_nullable;
              bool _7608_nullable = _7607___mcc_h55;
              bool _7609_referential = _7606___mcc_h54;
              {
                if (_7609_referential) {
                  if (_7608_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source295.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source295.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7610___mcc_h56 = _source295.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7611_op = _7610___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_7611_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_BitwiseOr) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source296 = _7520_op;
            if (_source296.is_Eq) {
              bool _7612___mcc_h57 = _source296.dtor_referential;
              bool _7613___mcc_h58 = _source296.dtor_nullable;
              bool _7614_nullable = _7613___mcc_h58;
              bool _7615_referential = _7612___mcc_h57;
              {
                if (_7615_referential) {
                  if (_7614_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source296.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source296.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7616___mcc_h59 = _source296.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7617_op = _7616___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_7617_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_BitwiseXor) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source297 = _7520_op;
            if (_source297.is_Eq) {
              bool _7618___mcc_h60 = _source297.dtor_referential;
              bool _7619___mcc_h61 = _source297.dtor_nullable;
              bool _7620_nullable = _7619___mcc_h61;
              bool _7621_referential = _7618___mcc_h60;
              {
                if (_7621_referential) {
                  if (_7620_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source297.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source297.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7622___mcc_h62 = _source297.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7623_op = _7622___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_7623_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_BitwiseShiftRight) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source298 = _7520_op;
            if (_source298.is_Eq) {
              bool _7624___mcc_h63 = _source298.dtor_referential;
              bool _7625___mcc_h64 = _source298.dtor_nullable;
              bool _7626_nullable = _7625___mcc_h64;
              bool _7627_referential = _7624___mcc_h63;
              {
                if (_7627_referential) {
                  if (_7626_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source298.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source298.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7628___mcc_h65 = _source298.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7629_op = _7628___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_7629_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_BitwiseShiftLeft) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source299 = _7520_op;
            if (_source299.is_Eq) {
              bool _7630___mcc_h66 = _source299.dtor_referential;
              bool _7631___mcc_h67 = _source299.dtor_nullable;
              bool _7632_nullable = _7631___mcc_h67;
              bool _7633_referential = _7630___mcc_h66;
              {
                if (_7633_referential) {
                  if (_7632_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source299.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source299.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7634___mcc_h68 = _source299.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7635_op = _7634___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_7635_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_And) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source300 = _7520_op;
            if (_source300.is_Eq) {
              bool _7636___mcc_h69 = _source300.dtor_referential;
              bool _7637___mcc_h70 = _source300.dtor_nullable;
              bool _7638_nullable = _7637___mcc_h70;
              bool _7639_referential = _7636___mcc_h69;
              {
                if (_7639_referential) {
                  if (_7638_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source300.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source300.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7640___mcc_h71 = _source300.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7641_op = _7640___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_7641_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_Or) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source301 = _7520_op;
            if (_source301.is_Eq) {
              bool _7642___mcc_h72 = _source301.dtor_referential;
              bool _7643___mcc_h73 = _source301.dtor_nullable;
              bool _7644_nullable = _7643___mcc_h73;
              bool _7645_referential = _7642___mcc_h72;
              {
                if (_7645_referential) {
                  if (_7644_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source301.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source301.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7646___mcc_h74 = _source301.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7647_op = _7646___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_7647_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      } else if (_source284.is_In) {
        {
          r = ((_7541_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_7538_left);
        }
      } else if (_source284.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _7538_left, _7541_right, _7523_format);
      } else if (_source284.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _7538_left, _7541_right, _7523_format);
      } else if (_source284.is_SetMerge) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_7541_right);
        }
      } else if (_source284.is_SetSubtraction) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_7541_right);
        }
      } else if (_source284.is_SetIntersection) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_7541_right);
        }
      } else if (_source284.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _7538_left, _7541_right, _7523_format);
        }
      } else if (_source284.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _7538_left, _7541_right, _7523_format);
        }
      } else if (_source284.is_SetDisjoint) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_7541_right);
        }
      } else if (_source284.is_MapMerge) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_7541_right);
        }
      } else if (_source284.is_MapSubtraction) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_7541_right);
        }
      } else if (_source284.is_MultisetMerge) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_7541_right);
        }
      } else if (_source284.is_MultisetSubtraction) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_7541_right);
        }
      } else if (_source284.is_MultisetIntersection) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_7541_right);
        }
      } else if (_source284.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _7538_left, _7541_right, _7523_format);
        }
      } else if (_source284.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _7538_left, _7541_right, _7523_format);
        }
      } else if (_source284.is_MultisetDisjoint) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_7541_right);
        }
      } else if (_source284.is_Concat) {
        {
          r = ((_7538_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_7541_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _7648___mcc_h22 = _source284.dtor_Passthrough_a0;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_7520_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_7520_op), _7538_left, _7541_right, _7523_format);
          } else {
            DAST._IBinOp _source302 = _7520_op;
            if (_source302.is_Eq) {
              bool _7649___mcc_h75 = _source302.dtor_referential;
              bool _7650___mcc_h76 = _source302.dtor_nullable;
              bool _7651_nullable = _7650___mcc_h76;
              bool _7652_referential = _7649___mcc_h75;
              {
                if (_7652_referential) {
                  if (_7651_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _7538_left, _7541_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source302.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else if (_source302.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7538_left, _7541_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7653___mcc_h77 = _source302.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _7654_op = _7653___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_7654_op, _7538_left, _7541_right, _7523_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out3062;
      DCOMPUTF16._IOwnership _out3063;
      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3062, out _out3063);
      r = _out3062;
      resultingOwnership = _out3063;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_7540_recIdentsL, _7543_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs54 = e;
      DAST._IExpression _7655_expr = _let_tmp_rhs54.dtor_value;
      DAST._IType _7656_fromTpe = _let_tmp_rhs54.dtor_from;
      DAST._IType _7657_toTpe = _let_tmp_rhs54.dtor_typ;
      if (object.Equals(_7656_fromTpe, _7657_toTpe)) {
        RAST._IExpr _7658_recursiveGen;
        DCOMPUTF16._IOwnership _7659_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7660_recIdents;
        RAST._IExpr _out3064;
        DCOMPUTF16._IOwnership _out3065;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3066;
        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3064, out _out3065, out _out3066);
        _7658_recursiveGen = _out3064;
        _7659_recOwned = _out3065;
        _7660_recIdents = _out3066;
        r = _7658_recursiveGen;
        RAST._IExpr _out3067;
        DCOMPUTF16._IOwnership _out3068;
        DCOMPUTF16.COMP.FromOwnership(r, _7659_recOwned, expectedOwnership, out _out3067, out _out3068);
        r = _out3067;
        resultingOwnership = _out3068;
        readIdents = _7660_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source303 = _System.Tuple2<DAST._IType, DAST._IType>.create(_7656_fromTpe, _7657_toTpe);
        DAST._IType _7661___mcc_h0 = _source303.dtor__0;
        DAST._IType _7662___mcc_h1 = _source303.dtor__1;
        DAST._IType _source304 = _7661___mcc_h0;
        if (_source304.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7663___mcc_h4 = _source304.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _7664___mcc_h5 = _source304.dtor_typeArgs;
          DAST._IResolvedType _7665___mcc_h6 = _source304.dtor_resolved;
          DAST._IResolvedType _source305 = _7665___mcc_h6;
          if (_source305.is_Datatype) {
            DAST._IDatatypeType _7666___mcc_h16 = _source305.dtor_datatypeType;
            DAST._IType _source306 = _7662___mcc_h1;
            if (_source306.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7667___mcc_h20 = _source306.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7668___mcc_h21 = _source306.dtor_typeArgs;
              DAST._IResolvedType _7669___mcc_h22 = _source306.dtor_resolved;
              DAST._IResolvedType _source307 = _7669___mcc_h22;
              if (_source307.is_Datatype) {
                DAST._IDatatypeType _7670___mcc_h26 = _source307.dtor_datatypeType;
                {
                  RAST._IExpr _7671_recursiveGen;
                  DCOMPUTF16._IOwnership _7672_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7673_recIdents;
                  RAST._IExpr _out3069;
                  DCOMPUTF16._IOwnership _out3070;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3071;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3069, out _out3070, out _out3071);
                  _7671_recursiveGen = _out3069;
                  _7672_recOwned = _out3070;
                  _7673_recIdents = _out3071;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7671_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3072;
                  DCOMPUTF16._IOwnership _out3073;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3072, out _out3073);
                  r = _out3072;
                  resultingOwnership = _out3073;
                  readIdents = _7673_recIdents;
                }
              } else if (_source307.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7674___mcc_h28 = _source307.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7675___mcc_h29 = _source307.dtor_attributes;
                {
                  RAST._IExpr _7676_recursiveGen;
                  DCOMPUTF16._IOwnership _7677_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7678_recIdents;
                  RAST._IExpr _out3074;
                  DCOMPUTF16._IOwnership _out3075;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3076;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3074, out _out3075, out _out3076);
                  _7676_recursiveGen = _out3074;
                  _7677_recOwned = _out3075;
                  _7678_recIdents = _out3076;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7676_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3077;
                  DCOMPUTF16._IOwnership _out3078;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3077, out _out3078);
                  r = _out3077;
                  resultingOwnership = _out3078;
                  readIdents = _7678_recIdents;
                }
              } else {
                DAST._IType _7679___mcc_h32 = _source307.dtor_baseType;
                DAST._INewtypeRange _7680___mcc_h33 = _source307.dtor_range;
                bool _7681___mcc_h34 = _source307.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7682___mcc_h35 = _source307.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7683_attributes = _7682___mcc_h35;
                bool _7684_erase = _7681___mcc_h34;
                DAST._INewtypeRange _7685_range = _7680___mcc_h33;
                DAST._IType _7686_b = _7679___mcc_h32;
                {
                  Std.Wrappers._IOption<RAST._IType> _7687_nativeToType;
                  _7687_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_7686_b, _7685_range);
                  if (object.Equals(_7656_fromTpe, _7686_b)) {
                    RAST._IExpr _7688_recursiveGen;
                    DCOMPUTF16._IOwnership _7689_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7690_recIdents;
                    RAST._IExpr _out3079;
                    DCOMPUTF16._IOwnership _out3080;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3081;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3079, out _out3080, out _out3081);
                    _7688_recursiveGen = _out3079;
                    _7689_recOwned = _out3080;
                    _7690_recIdents = _out3081;
                    readIdents = _7690_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source308 = _7687_nativeToType;
                    if (_source308.is_None) {
                      if (_7684_erase) {
                        r = _7688_recursiveGen;
                      } else {
                        RAST._IType _7691_rhsType;
                        RAST._IType _out3082;
                        _out3082 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                        _7691_rhsType = _out3082;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7691_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7688_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3083;
                      DCOMPUTF16._IOwnership _out3084;
                      DCOMPUTF16.COMP.FromOwnership(r, _7689_recOwned, expectedOwnership, out _out3083, out _out3084);
                      r = _out3083;
                      resultingOwnership = _out3084;
                    } else {
                      RAST._IType _7692___mcc_h1246 = _source308.dtor_value;
                      RAST._IType _7693_v = _7692___mcc_h1246;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7688_recursiveGen, RAST.Expr.create_ExprFromType(_7693_v)));
                      RAST._IExpr _out3085;
                      DCOMPUTF16._IOwnership _out3086;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3085, out _out3086);
                      r = _out3085;
                      resultingOwnership = _out3086;
                    }
                  } else {
                    if ((_7687_nativeToType).is_Some) {
                      DAST._IType _source309 = _7656_fromTpe;
                      if (_source309.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7694___mcc_h1247 = _source309.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _7695___mcc_h1248 = _source309.dtor_typeArgs;
                        DAST._IResolvedType _7696___mcc_h1249 = _source309.dtor_resolved;
                        DAST._IResolvedType _source310 = _7696___mcc_h1249;
                        if (_source310.is_Datatype) {
                          DAST._IDatatypeType _7697___mcc_h1253 = _source310.dtor_datatypeType;
                        } else if (_source310.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7698___mcc_h1255 = _source310.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _7699___mcc_h1256 = _source310.dtor_attributes;
                        } else {
                          DAST._IType _7700___mcc_h1259 = _source310.dtor_baseType;
                          DAST._INewtypeRange _7701___mcc_h1260 = _source310.dtor_range;
                          bool _7702___mcc_h1261 = _source310.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _7703___mcc_h1262 = _source310.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _7704_attributes0 = _7703___mcc_h1262;
                          bool _7705_erase0 = _7702___mcc_h1261;
                          DAST._INewtypeRange _7706_range0 = _7701___mcc_h1260;
                          DAST._IType _7707_b0 = _7700___mcc_h1259;
                          {
                            Std.Wrappers._IOption<RAST._IType> _7708_nativeFromType;
                            _7708_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_7707_b0, _7706_range0);
                            if ((_7708_nativeFromType).is_Some) {
                              RAST._IExpr _7709_recursiveGen;
                              DCOMPUTF16._IOwnership _7710_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7711_recIdents;
                              RAST._IExpr _out3087;
                              DCOMPUTF16._IOwnership _out3088;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3089;
                              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3087, out _out3088, out _out3089);
                              _7709_recursiveGen = _out3087;
                              _7710_recOwned = _out3088;
                              _7711_recIdents = _out3089;
                              RAST._IExpr _out3090;
                              DCOMPUTF16._IOwnership _out3091;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_7709_recursiveGen, (_7687_nativeToType).dtor_value), _7710_recOwned, expectedOwnership, out _out3090, out _out3091);
                              r = _out3090;
                              resultingOwnership = _out3091;
                              readIdents = _7711_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source309.is_Nullable) {
                        DAST._IType _7712___mcc_h1267 = _source309.dtor_Nullable_a0;
                      } else if (_source309.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _7713___mcc_h1269 = _source309.dtor_Tuple_a0;
                      } else if (_source309.is_Array) {
                        DAST._IType _7714___mcc_h1271 = _source309.dtor_element;
                        BigInteger _7715___mcc_h1272 = _source309.dtor_dims;
                      } else if (_source309.is_Seq) {
                        DAST._IType _7716___mcc_h1275 = _source309.dtor_element;
                      } else if (_source309.is_Set) {
                        DAST._IType _7717___mcc_h1277 = _source309.dtor_element;
                      } else if (_source309.is_Multiset) {
                        DAST._IType _7718___mcc_h1279 = _source309.dtor_element;
                      } else if (_source309.is_Map) {
                        DAST._IType _7719___mcc_h1281 = _source309.dtor_key;
                        DAST._IType _7720___mcc_h1282 = _source309.dtor_value;
                      } else if (_source309.is_SetBuilder) {
                        DAST._IType _7721___mcc_h1285 = _source309.dtor_element;
                      } else if (_source309.is_MapBuilder) {
                        DAST._IType _7722___mcc_h1287 = _source309.dtor_key;
                        DAST._IType _7723___mcc_h1288 = _source309.dtor_value;
                      } else if (_source309.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _7724___mcc_h1291 = _source309.dtor_args;
                        DAST._IType _7725___mcc_h1292 = _source309.dtor_result;
                      } else if (_source309.is_Primitive) {
                        DAST._IPrimitive _7726___mcc_h1295 = _source309.dtor_Primitive_a0;
                      } else if (_source309.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _7727___mcc_h1297 = _source309.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _7728___mcc_h1299 = _source309.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _7729_recursiveGen;
                        DCOMPUTF16._IOwnership _7730_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7731_recIdents;
                        RAST._IExpr _out3092;
                        DCOMPUTF16._IOwnership _out3093;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3094;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3092, out _out3093, out _out3094);
                        _7729_recursiveGen = _out3092;
                        _7730_recOwned = _out3093;
                        _7731_recIdents = _out3094;
                        RAST._IExpr _out3095;
                        DCOMPUTF16._IOwnership _out3096;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_7729_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_7687_nativeToType).dtor_value), _7730_recOwned, expectedOwnership, out _out3095, out _out3096);
                        r = _out3095;
                        resultingOwnership = _out3096;
                        readIdents = _7731_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3097;
                    DCOMPUTF16._IOwnership _out3098;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3099;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _7686_b), _7686_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3097, out _out3098, out _out3099);
                    r = _out3097;
                    resultingOwnership = _out3098;
                    readIdents = _out3099;
                  }
                }
              }
            } else if (_source306.is_Nullable) {
              DAST._IType _7732___mcc_h40 = _source306.dtor_Nullable_a0;
              {
                RAST._IExpr _7733_recursiveGen;
                DCOMPUTF16._IOwnership _7734_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7735_recIdents;
                RAST._IExpr _out3100;
                DCOMPUTF16._IOwnership _out3101;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3102;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3100, out _out3101, out _out3102);
                _7733_recursiveGen = _out3100;
                _7734_recOwned = _out3101;
                _7735_recIdents = _out3102;
                r = _7733_recursiveGen;
                if (object.Equals(_7734_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out3103;
                DCOMPUTF16._IOwnership _out3104;
                DCOMPUTF16.COMP.FromOwnership(r, _7734_recOwned, expectedOwnership, out _out3103, out _out3104);
                r = _out3103;
                resultingOwnership = _out3104;
                readIdents = _7735_recIdents;
              }
            } else if (_source306.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7736___mcc_h42 = _source306.dtor_Tuple_a0;
              {
                RAST._IExpr _7737_recursiveGen;
                DCOMPUTF16._IOwnership _7738_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7739_recIdents;
                RAST._IExpr _out3105;
                DCOMPUTF16._IOwnership _out3106;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3107;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3105, out _out3106, out _out3107);
                _7737_recursiveGen = _out3105;
                _7738_recOwned = _out3106;
                _7739_recIdents = _out3107;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7737_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3108;
                DCOMPUTF16._IOwnership _out3109;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3108, out _out3109);
                r = _out3108;
                resultingOwnership = _out3109;
                readIdents = _7739_recIdents;
              }
            } else if (_source306.is_Array) {
              DAST._IType _7740___mcc_h44 = _source306.dtor_element;
              BigInteger _7741___mcc_h45 = _source306.dtor_dims;
              {
                RAST._IExpr _7742_recursiveGen;
                DCOMPUTF16._IOwnership _7743_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7744_recIdents;
                RAST._IExpr _out3110;
                DCOMPUTF16._IOwnership _out3111;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3112;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3110, out _out3111, out _out3112);
                _7742_recursiveGen = _out3110;
                _7743_recOwned = _out3111;
                _7744_recIdents = _out3112;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7742_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3113;
                DCOMPUTF16._IOwnership _out3114;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3113, out _out3114);
                r = _out3113;
                resultingOwnership = _out3114;
                readIdents = _7744_recIdents;
              }
            } else if (_source306.is_Seq) {
              DAST._IType _7745___mcc_h48 = _source306.dtor_element;
              {
                RAST._IExpr _7746_recursiveGen;
                DCOMPUTF16._IOwnership _7747_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7748_recIdents;
                RAST._IExpr _out3115;
                DCOMPUTF16._IOwnership _out3116;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3117;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3115, out _out3116, out _out3117);
                _7746_recursiveGen = _out3115;
                _7747_recOwned = _out3116;
                _7748_recIdents = _out3117;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7746_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3118;
                DCOMPUTF16._IOwnership _out3119;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3118, out _out3119);
                r = _out3118;
                resultingOwnership = _out3119;
                readIdents = _7748_recIdents;
              }
            } else if (_source306.is_Set) {
              DAST._IType _7749___mcc_h50 = _source306.dtor_element;
              {
                RAST._IExpr _7750_recursiveGen;
                DCOMPUTF16._IOwnership _7751_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7752_recIdents;
                RAST._IExpr _out3120;
                DCOMPUTF16._IOwnership _out3121;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3122;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3120, out _out3121, out _out3122);
                _7750_recursiveGen = _out3120;
                _7751_recOwned = _out3121;
                _7752_recIdents = _out3122;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7750_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3123;
                DCOMPUTF16._IOwnership _out3124;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3123, out _out3124);
                r = _out3123;
                resultingOwnership = _out3124;
                readIdents = _7752_recIdents;
              }
            } else if (_source306.is_Multiset) {
              DAST._IType _7753___mcc_h52 = _source306.dtor_element;
              {
                RAST._IExpr _7754_recursiveGen;
                DCOMPUTF16._IOwnership _7755_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7756_recIdents;
                RAST._IExpr _out3125;
                DCOMPUTF16._IOwnership _out3126;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3127;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3125, out _out3126, out _out3127);
                _7754_recursiveGen = _out3125;
                _7755_recOwned = _out3126;
                _7756_recIdents = _out3127;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7754_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3128;
                DCOMPUTF16._IOwnership _out3129;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3128, out _out3129);
                r = _out3128;
                resultingOwnership = _out3129;
                readIdents = _7756_recIdents;
              }
            } else if (_source306.is_Map) {
              DAST._IType _7757___mcc_h54 = _source306.dtor_key;
              DAST._IType _7758___mcc_h55 = _source306.dtor_value;
              {
                RAST._IExpr _7759_recursiveGen;
                DCOMPUTF16._IOwnership _7760_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7761_recIdents;
                RAST._IExpr _out3130;
                DCOMPUTF16._IOwnership _out3131;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3132;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3130, out _out3131, out _out3132);
                _7759_recursiveGen = _out3130;
                _7760_recOwned = _out3131;
                _7761_recIdents = _out3132;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7759_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3133;
                DCOMPUTF16._IOwnership _out3134;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3133, out _out3134);
                r = _out3133;
                resultingOwnership = _out3134;
                readIdents = _7761_recIdents;
              }
            } else if (_source306.is_SetBuilder) {
              DAST._IType _7762___mcc_h58 = _source306.dtor_element;
              {
                RAST._IExpr _7763_recursiveGen;
                DCOMPUTF16._IOwnership _7764_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7765_recIdents;
                RAST._IExpr _out3135;
                DCOMPUTF16._IOwnership _out3136;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3137;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3135, out _out3136, out _out3137);
                _7763_recursiveGen = _out3135;
                _7764_recOwned = _out3136;
                _7765_recIdents = _out3137;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7763_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3138;
                DCOMPUTF16._IOwnership _out3139;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3138, out _out3139);
                r = _out3138;
                resultingOwnership = _out3139;
                readIdents = _7765_recIdents;
              }
            } else if (_source306.is_MapBuilder) {
              DAST._IType _7766___mcc_h60 = _source306.dtor_key;
              DAST._IType _7767___mcc_h61 = _source306.dtor_value;
              {
                RAST._IExpr _7768_recursiveGen;
                DCOMPUTF16._IOwnership _7769_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7770_recIdents;
                RAST._IExpr _out3140;
                DCOMPUTF16._IOwnership _out3141;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3142;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3140, out _out3141, out _out3142);
                _7768_recursiveGen = _out3140;
                _7769_recOwned = _out3141;
                _7770_recIdents = _out3142;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7768_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3143;
                DCOMPUTF16._IOwnership _out3144;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3143, out _out3144);
                r = _out3143;
                resultingOwnership = _out3144;
                readIdents = _7770_recIdents;
              }
            } else if (_source306.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7771___mcc_h64 = _source306.dtor_args;
              DAST._IType _7772___mcc_h65 = _source306.dtor_result;
              {
                RAST._IExpr _7773_recursiveGen;
                DCOMPUTF16._IOwnership _7774_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7775_recIdents;
                RAST._IExpr _out3145;
                DCOMPUTF16._IOwnership _out3146;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3147;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3145, out _out3146, out _out3147);
                _7773_recursiveGen = _out3145;
                _7774_recOwned = _out3146;
                _7775_recIdents = _out3147;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7773_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3148;
                DCOMPUTF16._IOwnership _out3149;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3148, out _out3149);
                r = _out3148;
                resultingOwnership = _out3149;
                readIdents = _7775_recIdents;
              }
            } else if (_source306.is_Primitive) {
              DAST._IPrimitive _7776___mcc_h68 = _source306.dtor_Primitive_a0;
              {
                RAST._IExpr _7777_recursiveGen;
                DCOMPUTF16._IOwnership _7778_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7779_recIdents;
                RAST._IExpr _out3150;
                DCOMPUTF16._IOwnership _out3151;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3152;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3150, out _out3151, out _out3152);
                _7777_recursiveGen = _out3150;
                _7778_recOwned = _out3151;
                _7779_recIdents = _out3152;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7777_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3153;
                DCOMPUTF16._IOwnership _out3154;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3153, out _out3154);
                r = _out3153;
                resultingOwnership = _out3154;
                readIdents = _7779_recIdents;
              }
            } else if (_source306.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7780___mcc_h70 = _source306.dtor_Passthrough_a0;
              {
                RAST._IExpr _7781_recursiveGen;
                DCOMPUTF16._IOwnership _7782_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7783_recIdents;
                RAST._IExpr _out3155;
                DCOMPUTF16._IOwnership _out3156;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3157;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3155, out _out3156, out _out3157);
                _7781_recursiveGen = _out3155;
                _7782_recOwned = _out3156;
                _7783_recIdents = _out3157;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7781_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3158;
                DCOMPUTF16._IOwnership _out3159;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3158, out _out3159);
                r = _out3158;
                resultingOwnership = _out3159;
                readIdents = _7783_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7784___mcc_h72 = _source306.dtor_TypeArg_a0;
              {
                RAST._IExpr _7785_recursiveGen;
                DCOMPUTF16._IOwnership _7786_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7787_recIdents;
                RAST._IExpr _out3160;
                DCOMPUTF16._IOwnership _out3161;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3162;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3160, out _out3161, out _out3162);
                _7785_recursiveGen = _out3160;
                _7786_recOwned = _out3161;
                _7787_recIdents = _out3162;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7785_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3163;
                DCOMPUTF16._IOwnership _out3164;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3163, out _out3164);
                r = _out3163;
                resultingOwnership = _out3164;
                readIdents = _7787_recIdents;
              }
            }
          } else if (_source305.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7788___mcc_h74 = _source305.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _7789___mcc_h75 = _source305.dtor_attributes;
            DAST._IType _source311 = _7662___mcc_h1;
            if (_source311.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7790___mcc_h82 = _source311.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7791___mcc_h83 = _source311.dtor_typeArgs;
              DAST._IResolvedType _7792___mcc_h84 = _source311.dtor_resolved;
              DAST._IResolvedType _source312 = _7792___mcc_h84;
              if (_source312.is_Datatype) {
                DAST._IDatatypeType _7793___mcc_h88 = _source312.dtor_datatypeType;
                {
                  RAST._IExpr _7794_recursiveGen;
                  DCOMPUTF16._IOwnership _7795_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7796_recIdents;
                  RAST._IExpr _out3165;
                  DCOMPUTF16._IOwnership _out3166;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3167;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3165, out _out3166, out _out3167);
                  _7794_recursiveGen = _out3165;
                  _7795_recOwned = _out3166;
                  _7796_recIdents = _out3167;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7794_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3168;
                  DCOMPUTF16._IOwnership _out3169;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3168, out _out3169);
                  r = _out3168;
                  resultingOwnership = _out3169;
                  readIdents = _7796_recIdents;
                }
              } else if (_source312.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7797___mcc_h90 = _source312.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7798___mcc_h91 = _source312.dtor_attributes;
                {
                  RAST._IExpr _7799_recursiveGen;
                  DCOMPUTF16._IOwnership _7800_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7801_recIdents;
                  RAST._IExpr _out3170;
                  DCOMPUTF16._IOwnership _out3171;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3172;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3170, out _out3171, out _out3172);
                  _7799_recursiveGen = _out3170;
                  _7800_recOwned = _out3171;
                  _7801_recIdents = _out3172;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7799_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3173;
                  DCOMPUTF16._IOwnership _out3174;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3173, out _out3174);
                  r = _out3173;
                  resultingOwnership = _out3174;
                  readIdents = _7801_recIdents;
                }
              } else {
                DAST._IType _7802___mcc_h94 = _source312.dtor_baseType;
                DAST._INewtypeRange _7803___mcc_h95 = _source312.dtor_range;
                bool _7804___mcc_h96 = _source312.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7805___mcc_h97 = _source312.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7806_attributes = _7805___mcc_h97;
                bool _7807_erase = _7804___mcc_h96;
                DAST._INewtypeRange _7808_range = _7803___mcc_h95;
                DAST._IType _7809_b = _7802___mcc_h94;
                {
                  Std.Wrappers._IOption<RAST._IType> _7810_nativeToType;
                  _7810_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_7809_b, _7808_range);
                  if (object.Equals(_7656_fromTpe, _7809_b)) {
                    RAST._IExpr _7811_recursiveGen;
                    DCOMPUTF16._IOwnership _7812_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7813_recIdents;
                    RAST._IExpr _out3175;
                    DCOMPUTF16._IOwnership _out3176;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3177;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3175, out _out3176, out _out3177);
                    _7811_recursiveGen = _out3175;
                    _7812_recOwned = _out3176;
                    _7813_recIdents = _out3177;
                    readIdents = _7813_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source313 = _7810_nativeToType;
                    if (_source313.is_None) {
                      if (_7807_erase) {
                        r = _7811_recursiveGen;
                      } else {
                        RAST._IType _7814_rhsType;
                        RAST._IType _out3178;
                        _out3178 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                        _7814_rhsType = _out3178;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7814_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7811_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3179;
                      DCOMPUTF16._IOwnership _out3180;
                      DCOMPUTF16.COMP.FromOwnership(r, _7812_recOwned, expectedOwnership, out _out3179, out _out3180);
                      r = _out3179;
                      resultingOwnership = _out3180;
                    } else {
                      RAST._IType _7815___mcc_h1301 = _source313.dtor_value;
                      RAST._IType _7816_v = _7815___mcc_h1301;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7811_recursiveGen, RAST.Expr.create_ExprFromType(_7816_v)));
                      RAST._IExpr _out3181;
                      DCOMPUTF16._IOwnership _out3182;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3181, out _out3182);
                      r = _out3181;
                      resultingOwnership = _out3182;
                    }
                  } else {
                    if ((_7810_nativeToType).is_Some) {
                      DAST._IType _source314 = _7656_fromTpe;
                      if (_source314.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7817___mcc_h1302 = _source314.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _7818___mcc_h1303 = _source314.dtor_typeArgs;
                        DAST._IResolvedType _7819___mcc_h1304 = _source314.dtor_resolved;
                        DAST._IResolvedType _source315 = _7819___mcc_h1304;
                        if (_source315.is_Datatype) {
                          DAST._IDatatypeType _7820___mcc_h1308 = _source315.dtor_datatypeType;
                        } else if (_source315.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7821___mcc_h1310 = _source315.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _7822___mcc_h1311 = _source315.dtor_attributes;
                        } else {
                          DAST._IType _7823___mcc_h1314 = _source315.dtor_baseType;
                          DAST._INewtypeRange _7824___mcc_h1315 = _source315.dtor_range;
                          bool _7825___mcc_h1316 = _source315.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _7826___mcc_h1317 = _source315.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _7827_attributes0 = _7826___mcc_h1317;
                          bool _7828_erase0 = _7825___mcc_h1316;
                          DAST._INewtypeRange _7829_range0 = _7824___mcc_h1315;
                          DAST._IType _7830_b0 = _7823___mcc_h1314;
                          {
                            Std.Wrappers._IOption<RAST._IType> _7831_nativeFromType;
                            _7831_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_7830_b0, _7829_range0);
                            if ((_7831_nativeFromType).is_Some) {
                              RAST._IExpr _7832_recursiveGen;
                              DCOMPUTF16._IOwnership _7833_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7834_recIdents;
                              RAST._IExpr _out3183;
                              DCOMPUTF16._IOwnership _out3184;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3185;
                              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3183, out _out3184, out _out3185);
                              _7832_recursiveGen = _out3183;
                              _7833_recOwned = _out3184;
                              _7834_recIdents = _out3185;
                              RAST._IExpr _out3186;
                              DCOMPUTF16._IOwnership _out3187;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_7832_recursiveGen, (_7810_nativeToType).dtor_value), _7833_recOwned, expectedOwnership, out _out3186, out _out3187);
                              r = _out3186;
                              resultingOwnership = _out3187;
                              readIdents = _7834_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source314.is_Nullable) {
                        DAST._IType _7835___mcc_h1322 = _source314.dtor_Nullable_a0;
                      } else if (_source314.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _7836___mcc_h1324 = _source314.dtor_Tuple_a0;
                      } else if (_source314.is_Array) {
                        DAST._IType _7837___mcc_h1326 = _source314.dtor_element;
                        BigInteger _7838___mcc_h1327 = _source314.dtor_dims;
                      } else if (_source314.is_Seq) {
                        DAST._IType _7839___mcc_h1330 = _source314.dtor_element;
                      } else if (_source314.is_Set) {
                        DAST._IType _7840___mcc_h1332 = _source314.dtor_element;
                      } else if (_source314.is_Multiset) {
                        DAST._IType _7841___mcc_h1334 = _source314.dtor_element;
                      } else if (_source314.is_Map) {
                        DAST._IType _7842___mcc_h1336 = _source314.dtor_key;
                        DAST._IType _7843___mcc_h1337 = _source314.dtor_value;
                      } else if (_source314.is_SetBuilder) {
                        DAST._IType _7844___mcc_h1340 = _source314.dtor_element;
                      } else if (_source314.is_MapBuilder) {
                        DAST._IType _7845___mcc_h1342 = _source314.dtor_key;
                        DAST._IType _7846___mcc_h1343 = _source314.dtor_value;
                      } else if (_source314.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _7847___mcc_h1346 = _source314.dtor_args;
                        DAST._IType _7848___mcc_h1347 = _source314.dtor_result;
                      } else if (_source314.is_Primitive) {
                        DAST._IPrimitive _7849___mcc_h1350 = _source314.dtor_Primitive_a0;
                      } else if (_source314.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _7850___mcc_h1352 = _source314.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _7851___mcc_h1354 = _source314.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _7852_recursiveGen;
                        DCOMPUTF16._IOwnership _7853_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7854_recIdents;
                        RAST._IExpr _out3188;
                        DCOMPUTF16._IOwnership _out3189;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3190;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3188, out _out3189, out _out3190);
                        _7852_recursiveGen = _out3188;
                        _7853_recOwned = _out3189;
                        _7854_recIdents = _out3190;
                        RAST._IExpr _out3191;
                        DCOMPUTF16._IOwnership _out3192;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_7852_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_7810_nativeToType).dtor_value), _7853_recOwned, expectedOwnership, out _out3191, out _out3192);
                        r = _out3191;
                        resultingOwnership = _out3192;
                        readIdents = _7854_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3193;
                    DCOMPUTF16._IOwnership _out3194;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3195;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _7809_b), _7809_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3193, out _out3194, out _out3195);
                    r = _out3193;
                    resultingOwnership = _out3194;
                    readIdents = _out3195;
                  }
                }
              }
            } else if (_source311.is_Nullable) {
              DAST._IType _7855___mcc_h102 = _source311.dtor_Nullable_a0;
              {
                RAST._IExpr _7856_recursiveGen;
                DCOMPUTF16._IOwnership _7857_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7858_recIdents;
                RAST._IExpr _out3196;
                DCOMPUTF16._IOwnership _out3197;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3198;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3196, out _out3197, out _out3198);
                _7856_recursiveGen = _out3196;
                _7857_recOwned = _out3197;
                _7858_recIdents = _out3198;
                r = _7856_recursiveGen;
                if (object.Equals(_7857_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out3199;
                DCOMPUTF16._IOwnership _out3200;
                DCOMPUTF16.COMP.FromOwnership(r, _7857_recOwned, expectedOwnership, out _out3199, out _out3200);
                r = _out3199;
                resultingOwnership = _out3200;
                readIdents = _7858_recIdents;
              }
            } else if (_source311.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7859___mcc_h104 = _source311.dtor_Tuple_a0;
              {
                RAST._IExpr _7860_recursiveGen;
                DCOMPUTF16._IOwnership _7861_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7862_recIdents;
                RAST._IExpr _out3201;
                DCOMPUTF16._IOwnership _out3202;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3203;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3201, out _out3202, out _out3203);
                _7860_recursiveGen = _out3201;
                _7861_recOwned = _out3202;
                _7862_recIdents = _out3203;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7860_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3204;
                DCOMPUTF16._IOwnership _out3205;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3204, out _out3205);
                r = _out3204;
                resultingOwnership = _out3205;
                readIdents = _7862_recIdents;
              }
            } else if (_source311.is_Array) {
              DAST._IType _7863___mcc_h106 = _source311.dtor_element;
              BigInteger _7864___mcc_h107 = _source311.dtor_dims;
              {
                RAST._IExpr _7865_recursiveGen;
                DCOMPUTF16._IOwnership _7866_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7867_recIdents;
                RAST._IExpr _out3206;
                DCOMPUTF16._IOwnership _out3207;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3208;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3206, out _out3207, out _out3208);
                _7865_recursiveGen = _out3206;
                _7866_recOwned = _out3207;
                _7867_recIdents = _out3208;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7865_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3209;
                DCOMPUTF16._IOwnership _out3210;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3209, out _out3210);
                r = _out3209;
                resultingOwnership = _out3210;
                readIdents = _7867_recIdents;
              }
            } else if (_source311.is_Seq) {
              DAST._IType _7868___mcc_h110 = _source311.dtor_element;
              {
                RAST._IExpr _7869_recursiveGen;
                DCOMPUTF16._IOwnership _7870_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7871_recIdents;
                RAST._IExpr _out3211;
                DCOMPUTF16._IOwnership _out3212;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3213;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3211, out _out3212, out _out3213);
                _7869_recursiveGen = _out3211;
                _7870_recOwned = _out3212;
                _7871_recIdents = _out3213;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7869_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3214;
                DCOMPUTF16._IOwnership _out3215;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3214, out _out3215);
                r = _out3214;
                resultingOwnership = _out3215;
                readIdents = _7871_recIdents;
              }
            } else if (_source311.is_Set) {
              DAST._IType _7872___mcc_h112 = _source311.dtor_element;
              {
                RAST._IExpr _7873_recursiveGen;
                DCOMPUTF16._IOwnership _7874_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7875_recIdents;
                RAST._IExpr _out3216;
                DCOMPUTF16._IOwnership _out3217;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3218;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3216, out _out3217, out _out3218);
                _7873_recursiveGen = _out3216;
                _7874_recOwned = _out3217;
                _7875_recIdents = _out3218;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7873_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3219;
                DCOMPUTF16._IOwnership _out3220;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3219, out _out3220);
                r = _out3219;
                resultingOwnership = _out3220;
                readIdents = _7875_recIdents;
              }
            } else if (_source311.is_Multiset) {
              DAST._IType _7876___mcc_h114 = _source311.dtor_element;
              {
                RAST._IExpr _7877_recursiveGen;
                DCOMPUTF16._IOwnership _7878_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7879_recIdents;
                RAST._IExpr _out3221;
                DCOMPUTF16._IOwnership _out3222;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3223;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3221, out _out3222, out _out3223);
                _7877_recursiveGen = _out3221;
                _7878_recOwned = _out3222;
                _7879_recIdents = _out3223;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7877_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3224;
                DCOMPUTF16._IOwnership _out3225;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3224, out _out3225);
                r = _out3224;
                resultingOwnership = _out3225;
                readIdents = _7879_recIdents;
              }
            } else if (_source311.is_Map) {
              DAST._IType _7880___mcc_h116 = _source311.dtor_key;
              DAST._IType _7881___mcc_h117 = _source311.dtor_value;
              {
                RAST._IExpr _7882_recursiveGen;
                DCOMPUTF16._IOwnership _7883_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7884_recIdents;
                RAST._IExpr _out3226;
                DCOMPUTF16._IOwnership _out3227;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3228;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3226, out _out3227, out _out3228);
                _7882_recursiveGen = _out3226;
                _7883_recOwned = _out3227;
                _7884_recIdents = _out3228;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7882_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3229;
                DCOMPUTF16._IOwnership _out3230;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3229, out _out3230);
                r = _out3229;
                resultingOwnership = _out3230;
                readIdents = _7884_recIdents;
              }
            } else if (_source311.is_SetBuilder) {
              DAST._IType _7885___mcc_h120 = _source311.dtor_element;
              {
                RAST._IExpr _7886_recursiveGen;
                DCOMPUTF16._IOwnership _7887_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7888_recIdents;
                RAST._IExpr _out3231;
                DCOMPUTF16._IOwnership _out3232;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3233;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3231, out _out3232, out _out3233);
                _7886_recursiveGen = _out3231;
                _7887_recOwned = _out3232;
                _7888_recIdents = _out3233;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7886_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3234;
                DCOMPUTF16._IOwnership _out3235;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3234, out _out3235);
                r = _out3234;
                resultingOwnership = _out3235;
                readIdents = _7888_recIdents;
              }
            } else if (_source311.is_MapBuilder) {
              DAST._IType _7889___mcc_h122 = _source311.dtor_key;
              DAST._IType _7890___mcc_h123 = _source311.dtor_value;
              {
                RAST._IExpr _7891_recursiveGen;
                DCOMPUTF16._IOwnership _7892_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7893_recIdents;
                RAST._IExpr _out3236;
                DCOMPUTF16._IOwnership _out3237;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3238;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3236, out _out3237, out _out3238);
                _7891_recursiveGen = _out3236;
                _7892_recOwned = _out3237;
                _7893_recIdents = _out3238;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7891_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3239;
                DCOMPUTF16._IOwnership _out3240;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3239, out _out3240);
                r = _out3239;
                resultingOwnership = _out3240;
                readIdents = _7893_recIdents;
              }
            } else if (_source311.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7894___mcc_h126 = _source311.dtor_args;
              DAST._IType _7895___mcc_h127 = _source311.dtor_result;
              {
                RAST._IExpr _7896_recursiveGen;
                DCOMPUTF16._IOwnership _7897_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7898_recIdents;
                RAST._IExpr _out3241;
                DCOMPUTF16._IOwnership _out3242;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3243;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3241, out _out3242, out _out3243);
                _7896_recursiveGen = _out3241;
                _7897_recOwned = _out3242;
                _7898_recIdents = _out3243;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7896_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3244;
                DCOMPUTF16._IOwnership _out3245;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3244, out _out3245);
                r = _out3244;
                resultingOwnership = _out3245;
                readIdents = _7898_recIdents;
              }
            } else if (_source311.is_Primitive) {
              DAST._IPrimitive _7899___mcc_h130 = _source311.dtor_Primitive_a0;
              {
                RAST._IExpr _7900_recursiveGen;
                DCOMPUTF16._IOwnership _7901_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7902_recIdents;
                RAST._IExpr _out3246;
                DCOMPUTF16._IOwnership _out3247;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3248;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3246, out _out3247, out _out3248);
                _7900_recursiveGen = _out3246;
                _7901_recOwned = _out3247;
                _7902_recIdents = _out3248;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7900_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3249;
                DCOMPUTF16._IOwnership _out3250;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3249, out _out3250);
                r = _out3249;
                resultingOwnership = _out3250;
                readIdents = _7902_recIdents;
              }
            } else if (_source311.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7903___mcc_h132 = _source311.dtor_Passthrough_a0;
              {
                RAST._IExpr _7904_recursiveGen;
                DCOMPUTF16._IOwnership _7905_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7906_recIdents;
                RAST._IExpr _out3251;
                DCOMPUTF16._IOwnership _out3252;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3253;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3251, out _out3252, out _out3253);
                _7904_recursiveGen = _out3251;
                _7905_recOwned = _out3252;
                _7906_recIdents = _out3253;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7904_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3254;
                DCOMPUTF16._IOwnership _out3255;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3254, out _out3255);
                r = _out3254;
                resultingOwnership = _out3255;
                readIdents = _7906_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7907___mcc_h134 = _source311.dtor_TypeArg_a0;
              {
                RAST._IExpr _7908_recursiveGen;
                DCOMPUTF16._IOwnership _7909_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7910_recIdents;
                RAST._IExpr _out3256;
                DCOMPUTF16._IOwnership _out3257;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3258;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3256, out _out3257, out _out3258);
                _7908_recursiveGen = _out3256;
                _7909_recOwned = _out3257;
                _7910_recIdents = _out3258;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7908_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3259;
                DCOMPUTF16._IOwnership _out3260;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3259, out _out3260);
                r = _out3259;
                resultingOwnership = _out3260;
                readIdents = _7910_recIdents;
              }
            }
          } else {
            DAST._IType _7911___mcc_h136 = _source305.dtor_baseType;
            DAST._INewtypeRange _7912___mcc_h137 = _source305.dtor_range;
            bool _7913___mcc_h138 = _source305.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _7914___mcc_h139 = _source305.dtor_attributes;
            DAST._IType _source316 = _7662___mcc_h1;
            if (_source316.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7915___mcc_h152 = _source316.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7916___mcc_h153 = _source316.dtor_typeArgs;
              DAST._IResolvedType _7917___mcc_h154 = _source316.dtor_resolved;
              DAST._IResolvedType _source317 = _7917___mcc_h154;
              if (_source317.is_Datatype) {
                DAST._IDatatypeType _7918___mcc_h161 = _source317.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _7919_attributes = _7914___mcc_h139;
                bool _7920_erase = _7913___mcc_h138;
                DAST._INewtypeRange _7921_range = _7912___mcc_h137;
                DAST._IType _7922_b = _7911___mcc_h136;
                {
                  Std.Wrappers._IOption<RAST._IType> _7923_nativeFromType;
                  _7923_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_7922_b, _7921_range);
                  if (object.Equals(_7922_b, _7657_toTpe)) {
                    RAST._IExpr _7924_recursiveGen;
                    DCOMPUTF16._IOwnership _7925_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7926_recIdents;
                    RAST._IExpr _out3261;
                    DCOMPUTF16._IOwnership _out3262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3263;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3261, out _out3262, out _out3263);
                    _7924_recursiveGen = _out3261;
                    _7925_recOwned = _out3262;
                    _7926_recIdents = _out3263;
                    readIdents = _7926_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source318 = _7923_nativeFromType;
                    if (_source318.is_None) {
                      if (_7920_erase) {
                        r = _7924_recursiveGen;
                      } else {
                        r = (_7924_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                      }
                      RAST._IExpr _out3264;
                      DCOMPUTF16._IOwnership _out3265;
                      DCOMPUTF16.COMP.FromOwnership(r, _7925_recOwned, expectedOwnership, out _out3264, out _out3265);
                      r = _out3264;
                      resultingOwnership = _out3265;
                    } else {
                      RAST._IType _7927___mcc_h1356 = _source318.dtor_value;
                      RAST._IType _7928_v = _7927___mcc_h1356;
                      RAST._IType _7929_toTpeRust;
                      RAST._IType _out3266;
                      _out3266 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                      _7929_toTpeRust = _out3266;
                      r = (((_7924_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_7929_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out3267;
                      DCOMPUTF16._IOwnership _out3268;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3267, out _out3268);
                      r = _out3267;
                      resultingOwnership = _out3268;
                    }
                  } else {
                    if ((_7923_nativeFromType).is_Some) {
                      if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _7930_recursiveGen;
                        DCOMPUTF16._IOwnership _7931_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7932_recIdents;
                        RAST._IExpr _out3269;
                        DCOMPUTF16._IOwnership _out3270;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3271;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3269, out _out3270, out _out3271);
                        _7930_recursiveGen = _out3269;
                        _7931_recOwned = _out3270;
                        _7932_recIdents = _out3271;
                        RAST._IExpr _out3272;
                        DCOMPUTF16._IOwnership _out3273;
                        DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_7930_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _7931_recOwned, expectedOwnership, out _out3272, out _out3273);
                        r = _out3272;
                        resultingOwnership = _out3273;
                        readIdents = _7932_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3274;
                    DCOMPUTF16._IOwnership _out3275;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3276;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _7922_b), _7922_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3274, out _out3275, out _out3276);
                    r = _out3274;
                    resultingOwnership = _out3275;
                    readIdents = _out3276;
                  }
                }
              } else if (_source317.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7933___mcc_h164 = _source317.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7934___mcc_h165 = _source317.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7935_attributes = _7914___mcc_h139;
                bool _7936_erase = _7913___mcc_h138;
                DAST._INewtypeRange _7937_range = _7912___mcc_h137;
                DAST._IType _7938_b = _7911___mcc_h136;
                {
                  Std.Wrappers._IOption<RAST._IType> _7939_nativeFromType;
                  _7939_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_7938_b, _7937_range);
                  if (object.Equals(_7938_b, _7657_toTpe)) {
                    RAST._IExpr _7940_recursiveGen;
                    DCOMPUTF16._IOwnership _7941_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7942_recIdents;
                    RAST._IExpr _out3277;
                    DCOMPUTF16._IOwnership _out3278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3279;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3277, out _out3278, out _out3279);
                    _7940_recursiveGen = _out3277;
                    _7941_recOwned = _out3278;
                    _7942_recIdents = _out3279;
                    readIdents = _7942_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source319 = _7939_nativeFromType;
                    if (_source319.is_None) {
                      if (_7936_erase) {
                        r = _7940_recursiveGen;
                      } else {
                        r = (_7940_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                      }
                      RAST._IExpr _out3280;
                      DCOMPUTF16._IOwnership _out3281;
                      DCOMPUTF16.COMP.FromOwnership(r, _7941_recOwned, expectedOwnership, out _out3280, out _out3281);
                      r = _out3280;
                      resultingOwnership = _out3281;
                    } else {
                      RAST._IType _7943___mcc_h1357 = _source319.dtor_value;
                      RAST._IType _7944_v = _7943___mcc_h1357;
                      RAST._IType _7945_toTpeRust;
                      RAST._IType _out3282;
                      _out3282 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                      _7945_toTpeRust = _out3282;
                      r = (((_7940_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_7945_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                      RAST._IExpr _out3283;
                      DCOMPUTF16._IOwnership _out3284;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3283, out _out3284);
                      r = _out3283;
                      resultingOwnership = _out3284;
                    }
                  } else {
                    if ((_7939_nativeFromType).is_Some) {
                      if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _7946_recursiveGen;
                        DCOMPUTF16._IOwnership _7947_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7948_recIdents;
                        RAST._IExpr _out3285;
                        DCOMPUTF16._IOwnership _out3286;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3287;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3285, out _out3286, out _out3287);
                        _7946_recursiveGen = _out3285;
                        _7947_recOwned = _out3286;
                        _7948_recIdents = _out3287;
                        RAST._IExpr _out3288;
                        DCOMPUTF16._IOwnership _out3289;
                        DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_7946_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _7947_recOwned, expectedOwnership, out _out3288, out _out3289);
                        r = _out3288;
                        resultingOwnership = _out3289;
                        readIdents = _7948_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3290;
                    DCOMPUTF16._IOwnership _out3291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3292;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _7938_b), _7938_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3290, out _out3291, out _out3292);
                    r = _out3290;
                    resultingOwnership = _out3291;
                    readIdents = _out3292;
                  }
                }
              } else {
                DAST._IType _7949___mcc_h170 = _source317.dtor_baseType;
                DAST._INewtypeRange _7950___mcc_h171 = _source317.dtor_range;
                bool _7951___mcc_h172 = _source317.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7952___mcc_h173 = _source317.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7953_attributes = _7952___mcc_h173;
                bool _7954_erase = _7951___mcc_h172;
                DAST._INewtypeRange _7955_range = _7950___mcc_h171;
                DAST._IType _7956_b = _7949___mcc_h170;
                {
                  Std.Wrappers._IOption<RAST._IType> _7957_nativeToType;
                  _7957_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_7956_b, _7955_range);
                  if (object.Equals(_7656_fromTpe, _7956_b)) {
                    RAST._IExpr _7958_recursiveGen;
                    DCOMPUTF16._IOwnership _7959_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7960_recIdents;
                    RAST._IExpr _out3293;
                    DCOMPUTF16._IOwnership _out3294;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3295;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3293, out _out3294, out _out3295);
                    _7958_recursiveGen = _out3293;
                    _7959_recOwned = _out3294;
                    _7960_recIdents = _out3295;
                    readIdents = _7960_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source320 = _7957_nativeToType;
                    if (_source320.is_None) {
                      if (_7954_erase) {
                        r = _7958_recursiveGen;
                      } else {
                        RAST._IType _7961_rhsType;
                        RAST._IType _out3296;
                        _out3296 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                        _7961_rhsType = _out3296;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7961_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7958_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3297;
                      DCOMPUTF16._IOwnership _out3298;
                      DCOMPUTF16.COMP.FromOwnership(r, _7959_recOwned, expectedOwnership, out _out3297, out _out3298);
                      r = _out3297;
                      resultingOwnership = _out3298;
                    } else {
                      RAST._IType _7962___mcc_h1358 = _source320.dtor_value;
                      RAST._IType _7963_v = _7962___mcc_h1358;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_7958_recursiveGen, RAST.Expr.create_ExprFromType(_7963_v)));
                      RAST._IExpr _out3299;
                      DCOMPUTF16._IOwnership _out3300;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3299, out _out3300);
                      r = _out3299;
                      resultingOwnership = _out3300;
                    }
                  } else {
                    if ((_7957_nativeToType).is_Some) {
                      DAST._IType _source321 = _7656_fromTpe;
                      if (_source321.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7964___mcc_h1359 = _source321.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _7965___mcc_h1360 = _source321.dtor_typeArgs;
                        DAST._IResolvedType _7966___mcc_h1361 = _source321.dtor_resolved;
                        DAST._IResolvedType _source322 = _7966___mcc_h1361;
                        if (_source322.is_Datatype) {
                          DAST._IDatatypeType _7967___mcc_h1365 = _source322.dtor_datatypeType;
                        } else if (_source322.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7968___mcc_h1367 = _source322.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _7969___mcc_h1368 = _source322.dtor_attributes;
                        } else {
                          DAST._IType _7970___mcc_h1371 = _source322.dtor_baseType;
                          DAST._INewtypeRange _7971___mcc_h1372 = _source322.dtor_range;
                          bool _7972___mcc_h1373 = _source322.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _7973___mcc_h1374 = _source322.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _7974_attributes0 = _7973___mcc_h1374;
                          bool _7975_erase0 = _7972___mcc_h1373;
                          DAST._INewtypeRange _7976_range0 = _7971___mcc_h1372;
                          DAST._IType _7977_b0 = _7970___mcc_h1371;
                          {
                            Std.Wrappers._IOption<RAST._IType> _7978_nativeFromType;
                            _7978_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_7977_b0, _7976_range0);
                            if ((_7978_nativeFromType).is_Some) {
                              RAST._IExpr _7979_recursiveGen;
                              DCOMPUTF16._IOwnership _7980_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7981_recIdents;
                              RAST._IExpr _out3301;
                              DCOMPUTF16._IOwnership _out3302;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3303;
                              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3301, out _out3302, out _out3303);
                              _7979_recursiveGen = _out3301;
                              _7980_recOwned = _out3302;
                              _7981_recIdents = _out3303;
                              RAST._IExpr _out3304;
                              DCOMPUTF16._IOwnership _out3305;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_7979_recursiveGen, (_7957_nativeToType).dtor_value), _7980_recOwned, expectedOwnership, out _out3304, out _out3305);
                              r = _out3304;
                              resultingOwnership = _out3305;
                              readIdents = _7981_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source321.is_Nullable) {
                        DAST._IType _7982___mcc_h1379 = _source321.dtor_Nullable_a0;
                      } else if (_source321.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _7983___mcc_h1381 = _source321.dtor_Tuple_a0;
                      } else if (_source321.is_Array) {
                        DAST._IType _7984___mcc_h1383 = _source321.dtor_element;
                        BigInteger _7985___mcc_h1384 = _source321.dtor_dims;
                      } else if (_source321.is_Seq) {
                        DAST._IType _7986___mcc_h1387 = _source321.dtor_element;
                      } else if (_source321.is_Set) {
                        DAST._IType _7987___mcc_h1389 = _source321.dtor_element;
                      } else if (_source321.is_Multiset) {
                        DAST._IType _7988___mcc_h1391 = _source321.dtor_element;
                      } else if (_source321.is_Map) {
                        DAST._IType _7989___mcc_h1393 = _source321.dtor_key;
                        DAST._IType _7990___mcc_h1394 = _source321.dtor_value;
                      } else if (_source321.is_SetBuilder) {
                        DAST._IType _7991___mcc_h1397 = _source321.dtor_element;
                      } else if (_source321.is_MapBuilder) {
                        DAST._IType _7992___mcc_h1399 = _source321.dtor_key;
                        DAST._IType _7993___mcc_h1400 = _source321.dtor_value;
                      } else if (_source321.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _7994___mcc_h1403 = _source321.dtor_args;
                        DAST._IType _7995___mcc_h1404 = _source321.dtor_result;
                      } else if (_source321.is_Primitive) {
                        DAST._IPrimitive _7996___mcc_h1407 = _source321.dtor_Primitive_a0;
                      } else if (_source321.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _7997___mcc_h1409 = _source321.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _7998___mcc_h1411 = _source321.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _7999_recursiveGen;
                        DCOMPUTF16._IOwnership _8000_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8001_recIdents;
                        RAST._IExpr _out3306;
                        DCOMPUTF16._IOwnership _out3307;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3308;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3306, out _out3307, out _out3308);
                        _7999_recursiveGen = _out3306;
                        _8000_recOwned = _out3307;
                        _8001_recIdents = _out3308;
                        RAST._IExpr _out3309;
                        DCOMPUTF16._IOwnership _out3310;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_7999_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_7957_nativeToType).dtor_value), _8000_recOwned, expectedOwnership, out _out3309, out _out3310);
                        r = _out3309;
                        resultingOwnership = _out3310;
                        readIdents = _8001_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out3311;
                    DCOMPUTF16._IOwnership _out3312;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3313;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _7956_b), _7956_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3311, out _out3312, out _out3313);
                    r = _out3311;
                    resultingOwnership = _out3312;
                    readIdents = _out3313;
                  }
                }
              }
            } else if (_source316.is_Nullable) {
              DAST._IType _8002___mcc_h182 = _source316.dtor_Nullable_a0;
              {
                RAST._IExpr _8003_recursiveGen;
                DCOMPUTF16._IOwnership _8004_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8005_recIdents;
                RAST._IExpr _out3314;
                DCOMPUTF16._IOwnership _out3315;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3316;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3314, out _out3315, out _out3316);
                _8003_recursiveGen = _out3314;
                _8004_recOwned = _out3315;
                _8005_recIdents = _out3316;
                r = _8003_recursiveGen;
                if (object.Equals(_8004_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out3317;
                DCOMPUTF16._IOwnership _out3318;
                DCOMPUTF16.COMP.FromOwnership(r, _8004_recOwned, expectedOwnership, out _out3317, out _out3318);
                r = _out3317;
                resultingOwnership = _out3318;
                readIdents = _8005_recIdents;
              }
            } else if (_source316.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8006___mcc_h185 = _source316.dtor_Tuple_a0;
              Dafny.ISequence<DAST._IAttribute> _8007_attributes = _7914___mcc_h139;
              bool _8008_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8009_range = _7912___mcc_h137;
              DAST._IType _8010_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8011_nativeFromType;
                _8011_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8010_b, _8009_range);
                if (object.Equals(_8010_b, _7657_toTpe)) {
                  RAST._IExpr _8012_recursiveGen;
                  DCOMPUTF16._IOwnership _8013_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8014_recIdents;
                  RAST._IExpr _out3319;
                  DCOMPUTF16._IOwnership _out3320;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3321;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3319, out _out3320, out _out3321);
                  _8012_recursiveGen = _out3319;
                  _8013_recOwned = _out3320;
                  _8014_recIdents = _out3321;
                  readIdents = _8014_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source323 = _8011_nativeFromType;
                  if (_source323.is_None) {
                    if (_8008_erase) {
                      r = _8012_recursiveGen;
                    } else {
                      r = (_8012_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3322;
                    DCOMPUTF16._IOwnership _out3323;
                    DCOMPUTF16.COMP.FromOwnership(r, _8013_recOwned, expectedOwnership, out _out3322, out _out3323);
                    r = _out3322;
                    resultingOwnership = _out3323;
                  } else {
                    RAST._IType _8015___mcc_h1413 = _source323.dtor_value;
                    RAST._IType _8016_v = _8015___mcc_h1413;
                    RAST._IType _8017_toTpeRust;
                    RAST._IType _out3324;
                    _out3324 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8017_toTpeRust = _out3324;
                    r = (((_8012_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8017_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3325;
                    DCOMPUTF16._IOwnership _out3326;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3325, out _out3326);
                    r = _out3325;
                    resultingOwnership = _out3326;
                  }
                } else {
                  if ((_8011_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8018_recursiveGen;
                      DCOMPUTF16._IOwnership _8019_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8020_recIdents;
                      RAST._IExpr _out3327;
                      DCOMPUTF16._IOwnership _out3328;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3329;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3327, out _out3328, out _out3329);
                      _8018_recursiveGen = _out3327;
                      _8019_recOwned = _out3328;
                      _8020_recIdents = _out3329;
                      RAST._IExpr _out3330;
                      DCOMPUTF16._IOwnership _out3331;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8018_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8019_recOwned, expectedOwnership, out _out3330, out _out3331);
                      r = _out3330;
                      resultingOwnership = _out3331;
                      readIdents = _8020_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3332;
                  DCOMPUTF16._IOwnership _out3333;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3334;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8010_b), _8010_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3332, out _out3333, out _out3334);
                  r = _out3332;
                  resultingOwnership = _out3333;
                  readIdents = _out3334;
                }
              }
            } else if (_source316.is_Array) {
              DAST._IType _8021___mcc_h188 = _source316.dtor_element;
              BigInteger _8022___mcc_h189 = _source316.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _8023_attributes = _7914___mcc_h139;
              bool _8024_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8025_range = _7912___mcc_h137;
              DAST._IType _8026_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8027_nativeFromType;
                _8027_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8026_b, _8025_range);
                if (object.Equals(_8026_b, _7657_toTpe)) {
                  RAST._IExpr _8028_recursiveGen;
                  DCOMPUTF16._IOwnership _8029_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8030_recIdents;
                  RAST._IExpr _out3335;
                  DCOMPUTF16._IOwnership _out3336;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3337;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3335, out _out3336, out _out3337);
                  _8028_recursiveGen = _out3335;
                  _8029_recOwned = _out3336;
                  _8030_recIdents = _out3337;
                  readIdents = _8030_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source324 = _8027_nativeFromType;
                  if (_source324.is_None) {
                    if (_8024_erase) {
                      r = _8028_recursiveGen;
                    } else {
                      r = (_8028_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3338;
                    DCOMPUTF16._IOwnership _out3339;
                    DCOMPUTF16.COMP.FromOwnership(r, _8029_recOwned, expectedOwnership, out _out3338, out _out3339);
                    r = _out3338;
                    resultingOwnership = _out3339;
                  } else {
                    RAST._IType _8031___mcc_h1414 = _source324.dtor_value;
                    RAST._IType _8032_v = _8031___mcc_h1414;
                    RAST._IType _8033_toTpeRust;
                    RAST._IType _out3340;
                    _out3340 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8033_toTpeRust = _out3340;
                    r = (((_8028_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8033_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3341;
                    DCOMPUTF16._IOwnership _out3342;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3341, out _out3342);
                    r = _out3341;
                    resultingOwnership = _out3342;
                  }
                } else {
                  if ((_8027_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8034_recursiveGen;
                      DCOMPUTF16._IOwnership _8035_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8036_recIdents;
                      RAST._IExpr _out3343;
                      DCOMPUTF16._IOwnership _out3344;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3345;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3343, out _out3344, out _out3345);
                      _8034_recursiveGen = _out3343;
                      _8035_recOwned = _out3344;
                      _8036_recIdents = _out3345;
                      RAST._IExpr _out3346;
                      DCOMPUTF16._IOwnership _out3347;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8034_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8035_recOwned, expectedOwnership, out _out3346, out _out3347);
                      r = _out3346;
                      resultingOwnership = _out3347;
                      readIdents = _8036_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3348;
                  DCOMPUTF16._IOwnership _out3349;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3350;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8026_b), _8026_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3348, out _out3349, out _out3350);
                  r = _out3348;
                  resultingOwnership = _out3349;
                  readIdents = _out3350;
                }
              }
            } else if (_source316.is_Seq) {
              DAST._IType _8037___mcc_h194 = _source316.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _8038_attributes = _7914___mcc_h139;
              bool _8039_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8040_range = _7912___mcc_h137;
              DAST._IType _8041_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8042_nativeFromType;
                _8042_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8041_b, _8040_range);
                if (object.Equals(_8041_b, _7657_toTpe)) {
                  RAST._IExpr _8043_recursiveGen;
                  DCOMPUTF16._IOwnership _8044_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8045_recIdents;
                  RAST._IExpr _out3351;
                  DCOMPUTF16._IOwnership _out3352;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3353;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3351, out _out3352, out _out3353);
                  _8043_recursiveGen = _out3351;
                  _8044_recOwned = _out3352;
                  _8045_recIdents = _out3353;
                  readIdents = _8045_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source325 = _8042_nativeFromType;
                  if (_source325.is_None) {
                    if (_8039_erase) {
                      r = _8043_recursiveGen;
                    } else {
                      r = (_8043_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3354;
                    DCOMPUTF16._IOwnership _out3355;
                    DCOMPUTF16.COMP.FromOwnership(r, _8044_recOwned, expectedOwnership, out _out3354, out _out3355);
                    r = _out3354;
                    resultingOwnership = _out3355;
                  } else {
                    RAST._IType _8046___mcc_h1415 = _source325.dtor_value;
                    RAST._IType _8047_v = _8046___mcc_h1415;
                    RAST._IType _8048_toTpeRust;
                    RAST._IType _out3356;
                    _out3356 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8048_toTpeRust = _out3356;
                    r = (((_8043_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8048_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3357;
                    DCOMPUTF16._IOwnership _out3358;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3357, out _out3358);
                    r = _out3357;
                    resultingOwnership = _out3358;
                  }
                } else {
                  if ((_8042_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8049_recursiveGen;
                      DCOMPUTF16._IOwnership _8050_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8051_recIdents;
                      RAST._IExpr _out3359;
                      DCOMPUTF16._IOwnership _out3360;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3361;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3359, out _out3360, out _out3361);
                      _8049_recursiveGen = _out3359;
                      _8050_recOwned = _out3360;
                      _8051_recIdents = _out3361;
                      RAST._IExpr _out3362;
                      DCOMPUTF16._IOwnership _out3363;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8049_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8050_recOwned, expectedOwnership, out _out3362, out _out3363);
                      r = _out3362;
                      resultingOwnership = _out3363;
                      readIdents = _8051_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3364;
                  DCOMPUTF16._IOwnership _out3365;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3366;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8041_b), _8041_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3364, out _out3365, out _out3366);
                  r = _out3364;
                  resultingOwnership = _out3365;
                  readIdents = _out3366;
                }
              }
            } else if (_source316.is_Set) {
              DAST._IType _8052___mcc_h197 = _source316.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _8053_attributes = _7914___mcc_h139;
              bool _8054_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8055_range = _7912___mcc_h137;
              DAST._IType _8056_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8057_nativeFromType;
                _8057_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8056_b, _8055_range);
                if (object.Equals(_8056_b, _7657_toTpe)) {
                  RAST._IExpr _8058_recursiveGen;
                  DCOMPUTF16._IOwnership _8059_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8060_recIdents;
                  RAST._IExpr _out3367;
                  DCOMPUTF16._IOwnership _out3368;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3369;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3367, out _out3368, out _out3369);
                  _8058_recursiveGen = _out3367;
                  _8059_recOwned = _out3368;
                  _8060_recIdents = _out3369;
                  readIdents = _8060_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source326 = _8057_nativeFromType;
                  if (_source326.is_None) {
                    if (_8054_erase) {
                      r = _8058_recursiveGen;
                    } else {
                      r = (_8058_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3370;
                    DCOMPUTF16._IOwnership _out3371;
                    DCOMPUTF16.COMP.FromOwnership(r, _8059_recOwned, expectedOwnership, out _out3370, out _out3371);
                    r = _out3370;
                    resultingOwnership = _out3371;
                  } else {
                    RAST._IType _8061___mcc_h1416 = _source326.dtor_value;
                    RAST._IType _8062_v = _8061___mcc_h1416;
                    RAST._IType _8063_toTpeRust;
                    RAST._IType _out3372;
                    _out3372 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8063_toTpeRust = _out3372;
                    r = (((_8058_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8063_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3373;
                    DCOMPUTF16._IOwnership _out3374;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3373, out _out3374);
                    r = _out3373;
                    resultingOwnership = _out3374;
                  }
                } else {
                  if ((_8057_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8064_recursiveGen;
                      DCOMPUTF16._IOwnership _8065_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8066_recIdents;
                      RAST._IExpr _out3375;
                      DCOMPUTF16._IOwnership _out3376;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3377;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3375, out _out3376, out _out3377);
                      _8064_recursiveGen = _out3375;
                      _8065_recOwned = _out3376;
                      _8066_recIdents = _out3377;
                      RAST._IExpr _out3378;
                      DCOMPUTF16._IOwnership _out3379;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8064_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8065_recOwned, expectedOwnership, out _out3378, out _out3379);
                      r = _out3378;
                      resultingOwnership = _out3379;
                      readIdents = _8066_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3380;
                  DCOMPUTF16._IOwnership _out3381;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3382;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8056_b), _8056_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3380, out _out3381, out _out3382);
                  r = _out3380;
                  resultingOwnership = _out3381;
                  readIdents = _out3382;
                }
              }
            } else if (_source316.is_Multiset) {
              DAST._IType _8067___mcc_h200 = _source316.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _8068_attributes = _7914___mcc_h139;
              bool _8069_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8070_range = _7912___mcc_h137;
              DAST._IType _8071_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8072_nativeFromType;
                _8072_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8071_b, _8070_range);
                if (object.Equals(_8071_b, _7657_toTpe)) {
                  RAST._IExpr _8073_recursiveGen;
                  DCOMPUTF16._IOwnership _8074_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8075_recIdents;
                  RAST._IExpr _out3383;
                  DCOMPUTF16._IOwnership _out3384;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3385;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3383, out _out3384, out _out3385);
                  _8073_recursiveGen = _out3383;
                  _8074_recOwned = _out3384;
                  _8075_recIdents = _out3385;
                  readIdents = _8075_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source327 = _8072_nativeFromType;
                  if (_source327.is_None) {
                    if (_8069_erase) {
                      r = _8073_recursiveGen;
                    } else {
                      r = (_8073_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3386;
                    DCOMPUTF16._IOwnership _out3387;
                    DCOMPUTF16.COMP.FromOwnership(r, _8074_recOwned, expectedOwnership, out _out3386, out _out3387);
                    r = _out3386;
                    resultingOwnership = _out3387;
                  } else {
                    RAST._IType _8076___mcc_h1417 = _source327.dtor_value;
                    RAST._IType _8077_v = _8076___mcc_h1417;
                    RAST._IType _8078_toTpeRust;
                    RAST._IType _out3388;
                    _out3388 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8078_toTpeRust = _out3388;
                    r = (((_8073_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8078_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3389;
                    DCOMPUTF16._IOwnership _out3390;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3389, out _out3390);
                    r = _out3389;
                    resultingOwnership = _out3390;
                  }
                } else {
                  if ((_8072_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8079_recursiveGen;
                      DCOMPUTF16._IOwnership _8080_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8081_recIdents;
                      RAST._IExpr _out3391;
                      DCOMPUTF16._IOwnership _out3392;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3393;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3391, out _out3392, out _out3393);
                      _8079_recursiveGen = _out3391;
                      _8080_recOwned = _out3392;
                      _8081_recIdents = _out3393;
                      RAST._IExpr _out3394;
                      DCOMPUTF16._IOwnership _out3395;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8079_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8080_recOwned, expectedOwnership, out _out3394, out _out3395);
                      r = _out3394;
                      resultingOwnership = _out3395;
                      readIdents = _8081_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3396;
                  DCOMPUTF16._IOwnership _out3397;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3398;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8071_b), _8071_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3396, out _out3397, out _out3398);
                  r = _out3396;
                  resultingOwnership = _out3397;
                  readIdents = _out3398;
                }
              }
            } else if (_source316.is_Map) {
              DAST._IType _8082___mcc_h203 = _source316.dtor_key;
              DAST._IType _8083___mcc_h204 = _source316.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _8084_attributes = _7914___mcc_h139;
              bool _8085_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8086_range = _7912___mcc_h137;
              DAST._IType _8087_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8088_nativeFromType;
                _8088_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8087_b, _8086_range);
                if (object.Equals(_8087_b, _7657_toTpe)) {
                  RAST._IExpr _8089_recursiveGen;
                  DCOMPUTF16._IOwnership _8090_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8091_recIdents;
                  RAST._IExpr _out3399;
                  DCOMPUTF16._IOwnership _out3400;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3401;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3399, out _out3400, out _out3401);
                  _8089_recursiveGen = _out3399;
                  _8090_recOwned = _out3400;
                  _8091_recIdents = _out3401;
                  readIdents = _8091_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source328 = _8088_nativeFromType;
                  if (_source328.is_None) {
                    if (_8085_erase) {
                      r = _8089_recursiveGen;
                    } else {
                      r = (_8089_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3402;
                    DCOMPUTF16._IOwnership _out3403;
                    DCOMPUTF16.COMP.FromOwnership(r, _8090_recOwned, expectedOwnership, out _out3402, out _out3403);
                    r = _out3402;
                    resultingOwnership = _out3403;
                  } else {
                    RAST._IType _8092___mcc_h1418 = _source328.dtor_value;
                    RAST._IType _8093_v = _8092___mcc_h1418;
                    RAST._IType _8094_toTpeRust;
                    RAST._IType _out3404;
                    _out3404 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8094_toTpeRust = _out3404;
                    r = (((_8089_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8094_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3405;
                    DCOMPUTF16._IOwnership _out3406;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3405, out _out3406);
                    r = _out3405;
                    resultingOwnership = _out3406;
                  }
                } else {
                  if ((_8088_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8095_recursiveGen;
                      DCOMPUTF16._IOwnership _8096_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8097_recIdents;
                      RAST._IExpr _out3407;
                      DCOMPUTF16._IOwnership _out3408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3409;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3407, out _out3408, out _out3409);
                      _8095_recursiveGen = _out3407;
                      _8096_recOwned = _out3408;
                      _8097_recIdents = _out3409;
                      RAST._IExpr _out3410;
                      DCOMPUTF16._IOwnership _out3411;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8095_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8096_recOwned, expectedOwnership, out _out3410, out _out3411);
                      r = _out3410;
                      resultingOwnership = _out3411;
                      readIdents = _8097_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3412;
                  DCOMPUTF16._IOwnership _out3413;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3414;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8087_b), _8087_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3412, out _out3413, out _out3414);
                  r = _out3412;
                  resultingOwnership = _out3413;
                  readIdents = _out3414;
                }
              }
            } else if (_source316.is_SetBuilder) {
              DAST._IType _8098___mcc_h209 = _source316.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _8099_attributes = _7914___mcc_h139;
              bool _8100_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8101_range = _7912___mcc_h137;
              DAST._IType _8102_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8103_nativeFromType;
                _8103_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8102_b, _8101_range);
                if (object.Equals(_8102_b, _7657_toTpe)) {
                  RAST._IExpr _8104_recursiveGen;
                  DCOMPUTF16._IOwnership _8105_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8106_recIdents;
                  RAST._IExpr _out3415;
                  DCOMPUTF16._IOwnership _out3416;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3417;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3415, out _out3416, out _out3417);
                  _8104_recursiveGen = _out3415;
                  _8105_recOwned = _out3416;
                  _8106_recIdents = _out3417;
                  readIdents = _8106_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source329 = _8103_nativeFromType;
                  if (_source329.is_None) {
                    if (_8100_erase) {
                      r = _8104_recursiveGen;
                    } else {
                      r = (_8104_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3418;
                    DCOMPUTF16._IOwnership _out3419;
                    DCOMPUTF16.COMP.FromOwnership(r, _8105_recOwned, expectedOwnership, out _out3418, out _out3419);
                    r = _out3418;
                    resultingOwnership = _out3419;
                  } else {
                    RAST._IType _8107___mcc_h1419 = _source329.dtor_value;
                    RAST._IType _8108_v = _8107___mcc_h1419;
                    RAST._IType _8109_toTpeRust;
                    RAST._IType _out3420;
                    _out3420 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8109_toTpeRust = _out3420;
                    r = (((_8104_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8109_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3421;
                    DCOMPUTF16._IOwnership _out3422;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3421, out _out3422);
                    r = _out3421;
                    resultingOwnership = _out3422;
                  }
                } else {
                  if ((_8103_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8110_recursiveGen;
                      DCOMPUTF16._IOwnership _8111_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8112_recIdents;
                      RAST._IExpr _out3423;
                      DCOMPUTF16._IOwnership _out3424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3425;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3423, out _out3424, out _out3425);
                      _8110_recursiveGen = _out3423;
                      _8111_recOwned = _out3424;
                      _8112_recIdents = _out3425;
                      RAST._IExpr _out3426;
                      DCOMPUTF16._IOwnership _out3427;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8110_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8111_recOwned, expectedOwnership, out _out3426, out _out3427);
                      r = _out3426;
                      resultingOwnership = _out3427;
                      readIdents = _8112_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3428;
                  DCOMPUTF16._IOwnership _out3429;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3430;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8102_b), _8102_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3428, out _out3429, out _out3430);
                  r = _out3428;
                  resultingOwnership = _out3429;
                  readIdents = _out3430;
                }
              }
            } else if (_source316.is_MapBuilder) {
              DAST._IType _8113___mcc_h212 = _source316.dtor_key;
              DAST._IType _8114___mcc_h213 = _source316.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _8115_attributes = _7914___mcc_h139;
              bool _8116_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8117_range = _7912___mcc_h137;
              DAST._IType _8118_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8119_nativeFromType;
                _8119_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8118_b, _8117_range);
                if (object.Equals(_8118_b, _7657_toTpe)) {
                  RAST._IExpr _8120_recursiveGen;
                  DCOMPUTF16._IOwnership _8121_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8122_recIdents;
                  RAST._IExpr _out3431;
                  DCOMPUTF16._IOwnership _out3432;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3433;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3431, out _out3432, out _out3433);
                  _8120_recursiveGen = _out3431;
                  _8121_recOwned = _out3432;
                  _8122_recIdents = _out3433;
                  readIdents = _8122_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source330 = _8119_nativeFromType;
                  if (_source330.is_None) {
                    if (_8116_erase) {
                      r = _8120_recursiveGen;
                    } else {
                      r = (_8120_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3434;
                    DCOMPUTF16._IOwnership _out3435;
                    DCOMPUTF16.COMP.FromOwnership(r, _8121_recOwned, expectedOwnership, out _out3434, out _out3435);
                    r = _out3434;
                    resultingOwnership = _out3435;
                  } else {
                    RAST._IType _8123___mcc_h1420 = _source330.dtor_value;
                    RAST._IType _8124_v = _8123___mcc_h1420;
                    RAST._IType _8125_toTpeRust;
                    RAST._IType _out3436;
                    _out3436 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8125_toTpeRust = _out3436;
                    r = (((_8120_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8125_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3437;
                    DCOMPUTF16._IOwnership _out3438;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3437, out _out3438);
                    r = _out3437;
                    resultingOwnership = _out3438;
                  }
                } else {
                  if ((_8119_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8126_recursiveGen;
                      DCOMPUTF16._IOwnership _8127_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8128_recIdents;
                      RAST._IExpr _out3439;
                      DCOMPUTF16._IOwnership _out3440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3441;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3439, out _out3440, out _out3441);
                      _8126_recursiveGen = _out3439;
                      _8127_recOwned = _out3440;
                      _8128_recIdents = _out3441;
                      RAST._IExpr _out3442;
                      DCOMPUTF16._IOwnership _out3443;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8126_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8127_recOwned, expectedOwnership, out _out3442, out _out3443);
                      r = _out3442;
                      resultingOwnership = _out3443;
                      readIdents = _8128_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3444;
                  DCOMPUTF16._IOwnership _out3445;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3446;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8118_b), _8118_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3444, out _out3445, out _out3446);
                  r = _out3444;
                  resultingOwnership = _out3445;
                  readIdents = _out3446;
                }
              }
            } else if (_source316.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8129___mcc_h218 = _source316.dtor_args;
              DAST._IType _8130___mcc_h219 = _source316.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _8131_attributes = _7914___mcc_h139;
              bool _8132_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8133_range = _7912___mcc_h137;
              DAST._IType _8134_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8135_nativeFromType;
                _8135_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8134_b, _8133_range);
                if (object.Equals(_8134_b, _7657_toTpe)) {
                  RAST._IExpr _8136_recursiveGen;
                  DCOMPUTF16._IOwnership _8137_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8138_recIdents;
                  RAST._IExpr _out3447;
                  DCOMPUTF16._IOwnership _out3448;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3449;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3447, out _out3448, out _out3449);
                  _8136_recursiveGen = _out3447;
                  _8137_recOwned = _out3448;
                  _8138_recIdents = _out3449;
                  readIdents = _8138_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source331 = _8135_nativeFromType;
                  if (_source331.is_None) {
                    if (_8132_erase) {
                      r = _8136_recursiveGen;
                    } else {
                      r = (_8136_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3450;
                    DCOMPUTF16._IOwnership _out3451;
                    DCOMPUTF16.COMP.FromOwnership(r, _8137_recOwned, expectedOwnership, out _out3450, out _out3451);
                    r = _out3450;
                    resultingOwnership = _out3451;
                  } else {
                    RAST._IType _8139___mcc_h1421 = _source331.dtor_value;
                    RAST._IType _8140_v = _8139___mcc_h1421;
                    RAST._IType _8141_toTpeRust;
                    RAST._IType _out3452;
                    _out3452 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8141_toTpeRust = _out3452;
                    r = (((_8136_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8141_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3453;
                    DCOMPUTF16._IOwnership _out3454;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3453, out _out3454);
                    r = _out3453;
                    resultingOwnership = _out3454;
                  }
                } else {
                  if ((_8135_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8142_recursiveGen;
                      DCOMPUTF16._IOwnership _8143_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8144_recIdents;
                      RAST._IExpr _out3455;
                      DCOMPUTF16._IOwnership _out3456;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3457;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3455, out _out3456, out _out3457);
                      _8142_recursiveGen = _out3455;
                      _8143_recOwned = _out3456;
                      _8144_recIdents = _out3457;
                      RAST._IExpr _out3458;
                      DCOMPUTF16._IOwnership _out3459;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8142_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8143_recOwned, expectedOwnership, out _out3458, out _out3459);
                      r = _out3458;
                      resultingOwnership = _out3459;
                      readIdents = _8144_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3460;
                  DCOMPUTF16._IOwnership _out3461;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3462;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8134_b), _8134_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3460, out _out3461, out _out3462);
                  r = _out3460;
                  resultingOwnership = _out3461;
                  readIdents = _out3462;
                }
              }
            } else if (_source316.is_Primitive) {
              DAST._IPrimitive _8145___mcc_h224 = _source316.dtor_Primitive_a0;
              Dafny.ISequence<DAST._IAttribute> _8146_attributes = _7914___mcc_h139;
              bool _8147_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8148_range = _7912___mcc_h137;
              DAST._IType _8149_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8150_nativeFromType;
                _8150_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8149_b, _8148_range);
                if (object.Equals(_8149_b, _7657_toTpe)) {
                  RAST._IExpr _8151_recursiveGen;
                  DCOMPUTF16._IOwnership _8152_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8153_recIdents;
                  RAST._IExpr _out3463;
                  DCOMPUTF16._IOwnership _out3464;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3465;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3463, out _out3464, out _out3465);
                  _8151_recursiveGen = _out3463;
                  _8152_recOwned = _out3464;
                  _8153_recIdents = _out3465;
                  readIdents = _8153_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source332 = _8150_nativeFromType;
                  if (_source332.is_None) {
                    if (_8147_erase) {
                      r = _8151_recursiveGen;
                    } else {
                      r = (_8151_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3466;
                    DCOMPUTF16._IOwnership _out3467;
                    DCOMPUTF16.COMP.FromOwnership(r, _8152_recOwned, expectedOwnership, out _out3466, out _out3467);
                    r = _out3466;
                    resultingOwnership = _out3467;
                  } else {
                    RAST._IType _8154___mcc_h1422 = _source332.dtor_value;
                    RAST._IType _8155_v = _8154___mcc_h1422;
                    RAST._IType _8156_toTpeRust;
                    RAST._IType _out3468;
                    _out3468 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8156_toTpeRust = _out3468;
                    r = (((_8151_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8156_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3469;
                    DCOMPUTF16._IOwnership _out3470;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3469, out _out3470);
                    r = _out3469;
                    resultingOwnership = _out3470;
                  }
                } else {
                  if ((_8150_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8157_recursiveGen;
                      DCOMPUTF16._IOwnership _8158_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8159_recIdents;
                      RAST._IExpr _out3471;
                      DCOMPUTF16._IOwnership _out3472;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3473;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3471, out _out3472, out _out3473);
                      _8157_recursiveGen = _out3471;
                      _8158_recOwned = _out3472;
                      _8159_recIdents = _out3473;
                      RAST._IExpr _out3474;
                      DCOMPUTF16._IOwnership _out3475;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8157_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8158_recOwned, expectedOwnership, out _out3474, out _out3475);
                      r = _out3474;
                      resultingOwnership = _out3475;
                      readIdents = _8159_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3476;
                  DCOMPUTF16._IOwnership _out3477;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3478;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8149_b), _8149_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3476, out _out3477, out _out3478);
                  r = _out3476;
                  resultingOwnership = _out3477;
                  readIdents = _out3478;
                }
              }
            } else if (_source316.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8160___mcc_h227 = _source316.dtor_Passthrough_a0;
              Dafny.ISequence<DAST._IAttribute> _8161_attributes = _7914___mcc_h139;
              bool _8162_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8163_range = _7912___mcc_h137;
              DAST._IType _8164_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8165_nativeFromType;
                _8165_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8164_b, _8163_range);
                if (object.Equals(_8164_b, _7657_toTpe)) {
                  RAST._IExpr _8166_recursiveGen;
                  DCOMPUTF16._IOwnership _8167_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8168_recIdents;
                  RAST._IExpr _out3479;
                  DCOMPUTF16._IOwnership _out3480;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3481;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3479, out _out3480, out _out3481);
                  _8166_recursiveGen = _out3479;
                  _8167_recOwned = _out3480;
                  _8168_recIdents = _out3481;
                  readIdents = _8168_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source333 = _8165_nativeFromType;
                  if (_source333.is_None) {
                    if (_8162_erase) {
                      r = _8166_recursiveGen;
                    } else {
                      r = (_8166_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3482;
                    DCOMPUTF16._IOwnership _out3483;
                    DCOMPUTF16.COMP.FromOwnership(r, _8167_recOwned, expectedOwnership, out _out3482, out _out3483);
                    r = _out3482;
                    resultingOwnership = _out3483;
                  } else {
                    RAST._IType _8169___mcc_h1423 = _source333.dtor_value;
                    RAST._IType _8170_v = _8169___mcc_h1423;
                    RAST._IType _8171_toTpeRust;
                    RAST._IType _out3484;
                    _out3484 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8171_toTpeRust = _out3484;
                    r = (((_8166_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8171_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3485;
                    DCOMPUTF16._IOwnership _out3486;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3485, out _out3486);
                    r = _out3485;
                    resultingOwnership = _out3486;
                  }
                } else {
                  if ((_8165_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8172_recursiveGen;
                      DCOMPUTF16._IOwnership _8173_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8174_recIdents;
                      RAST._IExpr _out3487;
                      DCOMPUTF16._IOwnership _out3488;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3489;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3487, out _out3488, out _out3489);
                      _8172_recursiveGen = _out3487;
                      _8173_recOwned = _out3488;
                      _8174_recIdents = _out3489;
                      RAST._IExpr _out3490;
                      DCOMPUTF16._IOwnership _out3491;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8172_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8173_recOwned, expectedOwnership, out _out3490, out _out3491);
                      r = _out3490;
                      resultingOwnership = _out3491;
                      readIdents = _8174_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3492;
                  DCOMPUTF16._IOwnership _out3493;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3494;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8164_b), _8164_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3492, out _out3493, out _out3494);
                  r = _out3492;
                  resultingOwnership = _out3493;
                  readIdents = _out3494;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8175___mcc_h230 = _source316.dtor_TypeArg_a0;
              Dafny.ISequence<DAST._IAttribute> _8176_attributes = _7914___mcc_h139;
              bool _8177_erase = _7913___mcc_h138;
              DAST._INewtypeRange _8178_range = _7912___mcc_h137;
              DAST._IType _8179_b = _7911___mcc_h136;
              {
                Std.Wrappers._IOption<RAST._IType> _8180_nativeFromType;
                _8180_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8179_b, _8178_range);
                if (object.Equals(_8179_b, _7657_toTpe)) {
                  RAST._IExpr _8181_recursiveGen;
                  DCOMPUTF16._IOwnership _8182_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8183_recIdents;
                  RAST._IExpr _out3495;
                  DCOMPUTF16._IOwnership _out3496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3497;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3495, out _out3496, out _out3497);
                  _8181_recursiveGen = _out3495;
                  _8182_recOwned = _out3496;
                  _8183_recIdents = _out3497;
                  readIdents = _8183_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source334 = _8180_nativeFromType;
                  if (_source334.is_None) {
                    if (_8177_erase) {
                      r = _8181_recursiveGen;
                    } else {
                      r = (_8181_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out3498;
                    DCOMPUTF16._IOwnership _out3499;
                    DCOMPUTF16.COMP.FromOwnership(r, _8182_recOwned, expectedOwnership, out _out3498, out _out3499);
                    r = _out3498;
                    resultingOwnership = _out3499;
                  } else {
                    RAST._IType _8184___mcc_h1424 = _source334.dtor_value;
                    RAST._IType _8185_v = _8184___mcc_h1424;
                    RAST._IType _8186_toTpeRust;
                    RAST._IType _out3500;
                    _out3500 = DCOMPUTF16.COMP.GenType(_7657_toTpe, false, false);
                    _8186_toTpeRust = _out3500;
                    r = (((_8181_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("into"))).ApplyType(Dafny.Sequence<RAST._IType>.FromElements(_8186_toTpeRust))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                    RAST._IExpr _out3501;
                    DCOMPUTF16._IOwnership _out3502;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3501, out _out3502);
                    r = _out3501;
                    resultingOwnership = _out3502;
                  }
                } else {
                  if ((_8180_nativeFromType).is_Some) {
                    if (object.Equals(_7657_toTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8187_recursiveGen;
                      DCOMPUTF16._IOwnership _8188_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8189_recIdents;
                      RAST._IExpr _out3503;
                      DCOMPUTF16._IOwnership _out3504;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3505;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3503, out _out3504, out _out3505);
                      _8187_recursiveGen = _out3503;
                      _8188_recOwned = _out3504;
                      _8189_recIdents = _out3505;
                      RAST._IExpr _out3506;
                      DCOMPUTF16._IOwnership _out3507;
                      DCOMPUTF16.COMP.FromOwnership(((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(RAST.Expr.create_TypeAscription(_8187_recursiveGen, DCOMPUTF16.__default.DafnyCharUnderlying)), _8188_recOwned, expectedOwnership, out _out3506, out _out3507);
                      r = _out3506;
                      resultingOwnership = _out3507;
                      readIdents = _8189_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3508;
                  DCOMPUTF16._IOwnership _out3509;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3510;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8179_b), _8179_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3508, out _out3509, out _out3510);
                  r = _out3508;
                  resultingOwnership = _out3509;
                  readIdents = _out3510;
                }
              }
            }
          }
        } else if (_source304.is_Nullable) {
          DAST._IType _8190___mcc_h233 = _source304.dtor_Nullable_a0;
          DAST._IType _source335 = _7662___mcc_h1;
          if (_source335.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8191___mcc_h237 = _source335.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8192___mcc_h238 = _source335.dtor_typeArgs;
            DAST._IResolvedType _8193___mcc_h239 = _source335.dtor_resolved;
            DAST._IResolvedType _source336 = _8193___mcc_h239;
            if (_source336.is_Datatype) {
              DAST._IDatatypeType _8194___mcc_h246 = _source336.dtor_datatypeType;
              {
                RAST._IExpr _8195_recursiveGen;
                DCOMPUTF16._IOwnership _8196_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8197_recIdents;
                RAST._IExpr _out3511;
                DCOMPUTF16._IOwnership _out3512;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3513;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3511, out _out3512, out _out3513);
                _8195_recursiveGen = _out3511;
                _8196_recOwned = _out3512;
                _8197_recIdents = _out3513;
                r = _8195_recursiveGen;
                if (object.Equals(_8196_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3514;
                DCOMPUTF16._IOwnership _out3515;
                DCOMPUTF16.COMP.FromOwnership(r, _8196_recOwned, expectedOwnership, out _out3514, out _out3515);
                r = _out3514;
                resultingOwnership = _out3515;
                readIdents = _8197_recIdents;
              }
            } else if (_source336.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8198___mcc_h249 = _source336.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8199___mcc_h250 = _source336.dtor_attributes;
              {
                RAST._IExpr _8200_recursiveGen;
                DCOMPUTF16._IOwnership _8201_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8202_recIdents;
                RAST._IExpr _out3516;
                DCOMPUTF16._IOwnership _out3517;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3518;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3516, out _out3517, out _out3518);
                _8200_recursiveGen = _out3516;
                _8201_recOwned = _out3517;
                _8202_recIdents = _out3518;
                r = _8200_recursiveGen;
                if (object.Equals(_8201_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3519;
                DCOMPUTF16._IOwnership _out3520;
                DCOMPUTF16.COMP.FromOwnership(r, _8201_recOwned, expectedOwnership, out _out3519, out _out3520);
                r = _out3519;
                resultingOwnership = _out3520;
                readIdents = _8202_recIdents;
              }
            } else {
              DAST._IType _8203___mcc_h255 = _source336.dtor_baseType;
              DAST._INewtypeRange _8204___mcc_h256 = _source336.dtor_range;
              bool _8205___mcc_h257 = _source336.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8206___mcc_h258 = _source336.dtor_attributes;
              {
                RAST._IExpr _8207_recursiveGen;
                DCOMPUTF16._IOwnership _8208_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8209_recIdents;
                RAST._IExpr _out3521;
                DCOMPUTF16._IOwnership _out3522;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3523;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3521, out _out3522, out _out3523);
                _8207_recursiveGen = _out3521;
                _8208_recOwned = _out3522;
                _8209_recIdents = _out3523;
                r = _8207_recursiveGen;
                if (object.Equals(_8208_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3524;
                DCOMPUTF16._IOwnership _out3525;
                DCOMPUTF16.COMP.FromOwnership(r, _8208_recOwned, expectedOwnership, out _out3524, out _out3525);
                r = _out3524;
                resultingOwnership = _out3525;
                readIdents = _8209_recIdents;
              }
            }
          } else if (_source335.is_Nullable) {
            DAST._IType _8210___mcc_h267 = _source335.dtor_Nullable_a0;
            {
              RAST._IExpr _8211_recursiveGen;
              DCOMPUTF16._IOwnership _8212_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8213_recIdents;
              RAST._IExpr _out3526;
              DCOMPUTF16._IOwnership _out3527;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3528;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3526, out _out3527, out _out3528);
              _8211_recursiveGen = _out3526;
              _8212_recOwned = _out3527;
              _8213_recIdents = _out3528;
              r = _8211_recursiveGen;
              if (object.Equals(_8212_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3529;
              DCOMPUTF16._IOwnership _out3530;
              DCOMPUTF16.COMP.FromOwnership(r, _8212_recOwned, expectedOwnership, out _out3529, out _out3530);
              r = _out3529;
              resultingOwnership = _out3530;
              readIdents = _8213_recIdents;
            }
          } else if (_source335.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8214___mcc_h270 = _source335.dtor_Tuple_a0;
            {
              RAST._IExpr _8215_recursiveGen;
              DCOMPUTF16._IOwnership _8216_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8217_recIdents;
              RAST._IExpr _out3531;
              DCOMPUTF16._IOwnership _out3532;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3533;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3531, out _out3532, out _out3533);
              _8215_recursiveGen = _out3531;
              _8216_recOwned = _out3532;
              _8217_recIdents = _out3533;
              r = _8215_recursiveGen;
              if (object.Equals(_8216_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3534;
              DCOMPUTF16._IOwnership _out3535;
              DCOMPUTF16.COMP.FromOwnership(r, _8216_recOwned, expectedOwnership, out _out3534, out _out3535);
              r = _out3534;
              resultingOwnership = _out3535;
              readIdents = _8217_recIdents;
            }
          } else if (_source335.is_Array) {
            DAST._IType _8218___mcc_h273 = _source335.dtor_element;
            BigInteger _8219___mcc_h274 = _source335.dtor_dims;
            {
              RAST._IExpr _8220_recursiveGen;
              DCOMPUTF16._IOwnership _8221_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8222_recIdents;
              RAST._IExpr _out3536;
              DCOMPUTF16._IOwnership _out3537;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3538;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3536, out _out3537, out _out3538);
              _8220_recursiveGen = _out3536;
              _8221_recOwned = _out3537;
              _8222_recIdents = _out3538;
              r = _8220_recursiveGen;
              if (object.Equals(_8221_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3539;
              DCOMPUTF16._IOwnership _out3540;
              DCOMPUTF16.COMP.FromOwnership(r, _8221_recOwned, expectedOwnership, out _out3539, out _out3540);
              r = _out3539;
              resultingOwnership = _out3540;
              readIdents = _8222_recIdents;
            }
          } else if (_source335.is_Seq) {
            DAST._IType _8223___mcc_h279 = _source335.dtor_element;
            {
              RAST._IExpr _8224_recursiveGen;
              DCOMPUTF16._IOwnership _8225_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8226_recIdents;
              RAST._IExpr _out3541;
              DCOMPUTF16._IOwnership _out3542;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3543;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3541, out _out3542, out _out3543);
              _8224_recursiveGen = _out3541;
              _8225_recOwned = _out3542;
              _8226_recIdents = _out3543;
              r = _8224_recursiveGen;
              if (object.Equals(_8225_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3544;
              DCOMPUTF16._IOwnership _out3545;
              DCOMPUTF16.COMP.FromOwnership(r, _8225_recOwned, expectedOwnership, out _out3544, out _out3545);
              r = _out3544;
              resultingOwnership = _out3545;
              readIdents = _8226_recIdents;
            }
          } else if (_source335.is_Set) {
            DAST._IType _8227___mcc_h282 = _source335.dtor_element;
            {
              RAST._IExpr _8228_recursiveGen;
              DCOMPUTF16._IOwnership _8229_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8230_recIdents;
              RAST._IExpr _out3546;
              DCOMPUTF16._IOwnership _out3547;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3548;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3546, out _out3547, out _out3548);
              _8228_recursiveGen = _out3546;
              _8229_recOwned = _out3547;
              _8230_recIdents = _out3548;
              r = _8228_recursiveGen;
              if (object.Equals(_8229_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3549;
              DCOMPUTF16._IOwnership _out3550;
              DCOMPUTF16.COMP.FromOwnership(r, _8229_recOwned, expectedOwnership, out _out3549, out _out3550);
              r = _out3549;
              resultingOwnership = _out3550;
              readIdents = _8230_recIdents;
            }
          } else if (_source335.is_Multiset) {
            DAST._IType _8231___mcc_h285 = _source335.dtor_element;
            {
              RAST._IExpr _8232_recursiveGen;
              DCOMPUTF16._IOwnership _8233_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8234_recIdents;
              RAST._IExpr _out3551;
              DCOMPUTF16._IOwnership _out3552;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3553;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3551, out _out3552, out _out3553);
              _8232_recursiveGen = _out3551;
              _8233_recOwned = _out3552;
              _8234_recIdents = _out3553;
              r = _8232_recursiveGen;
              if (object.Equals(_8233_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3554;
              DCOMPUTF16._IOwnership _out3555;
              DCOMPUTF16.COMP.FromOwnership(r, _8233_recOwned, expectedOwnership, out _out3554, out _out3555);
              r = _out3554;
              resultingOwnership = _out3555;
              readIdents = _8234_recIdents;
            }
          } else if (_source335.is_Map) {
            DAST._IType _8235___mcc_h288 = _source335.dtor_key;
            DAST._IType _8236___mcc_h289 = _source335.dtor_value;
            {
              RAST._IExpr _8237_recursiveGen;
              DCOMPUTF16._IOwnership _8238_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8239_recIdents;
              RAST._IExpr _out3556;
              DCOMPUTF16._IOwnership _out3557;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3558;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3556, out _out3557, out _out3558);
              _8237_recursiveGen = _out3556;
              _8238_recOwned = _out3557;
              _8239_recIdents = _out3558;
              r = _8237_recursiveGen;
              if (object.Equals(_8238_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3559;
              DCOMPUTF16._IOwnership _out3560;
              DCOMPUTF16.COMP.FromOwnership(r, _8238_recOwned, expectedOwnership, out _out3559, out _out3560);
              r = _out3559;
              resultingOwnership = _out3560;
              readIdents = _8239_recIdents;
            }
          } else if (_source335.is_SetBuilder) {
            DAST._IType _8240___mcc_h294 = _source335.dtor_element;
            {
              RAST._IExpr _8241_recursiveGen;
              DCOMPUTF16._IOwnership _8242_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8243_recIdents;
              RAST._IExpr _out3561;
              DCOMPUTF16._IOwnership _out3562;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3563;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3561, out _out3562, out _out3563);
              _8241_recursiveGen = _out3561;
              _8242_recOwned = _out3562;
              _8243_recIdents = _out3563;
              r = _8241_recursiveGen;
              if (object.Equals(_8242_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3564;
              DCOMPUTF16._IOwnership _out3565;
              DCOMPUTF16.COMP.FromOwnership(r, _8242_recOwned, expectedOwnership, out _out3564, out _out3565);
              r = _out3564;
              resultingOwnership = _out3565;
              readIdents = _8243_recIdents;
            }
          } else if (_source335.is_MapBuilder) {
            DAST._IType _8244___mcc_h297 = _source335.dtor_key;
            DAST._IType _8245___mcc_h298 = _source335.dtor_value;
            {
              RAST._IExpr _8246_recursiveGen;
              DCOMPUTF16._IOwnership _8247_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8248_recIdents;
              RAST._IExpr _out3566;
              DCOMPUTF16._IOwnership _out3567;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3568;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3566, out _out3567, out _out3568);
              _8246_recursiveGen = _out3566;
              _8247_recOwned = _out3567;
              _8248_recIdents = _out3568;
              r = _8246_recursiveGen;
              if (object.Equals(_8247_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3569;
              DCOMPUTF16._IOwnership _out3570;
              DCOMPUTF16.COMP.FromOwnership(r, _8247_recOwned, expectedOwnership, out _out3569, out _out3570);
              r = _out3569;
              resultingOwnership = _out3570;
              readIdents = _8248_recIdents;
            }
          } else if (_source335.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8249___mcc_h303 = _source335.dtor_args;
            DAST._IType _8250___mcc_h304 = _source335.dtor_result;
            {
              RAST._IExpr _8251_recursiveGen;
              DCOMPUTF16._IOwnership _8252_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8253_recIdents;
              RAST._IExpr _out3571;
              DCOMPUTF16._IOwnership _out3572;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3573;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3571, out _out3572, out _out3573);
              _8251_recursiveGen = _out3571;
              _8252_recOwned = _out3572;
              _8253_recIdents = _out3573;
              r = _8251_recursiveGen;
              if (object.Equals(_8252_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3574;
              DCOMPUTF16._IOwnership _out3575;
              DCOMPUTF16.COMP.FromOwnership(r, _8252_recOwned, expectedOwnership, out _out3574, out _out3575);
              r = _out3574;
              resultingOwnership = _out3575;
              readIdents = _8253_recIdents;
            }
          } else if (_source335.is_Primitive) {
            DAST._IPrimitive _8254___mcc_h309 = _source335.dtor_Primitive_a0;
            {
              RAST._IExpr _8255_recursiveGen;
              DCOMPUTF16._IOwnership _8256_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8257_recIdents;
              RAST._IExpr _out3576;
              DCOMPUTF16._IOwnership _out3577;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3578;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3576, out _out3577, out _out3578);
              _8255_recursiveGen = _out3576;
              _8256_recOwned = _out3577;
              _8257_recIdents = _out3578;
              r = _8255_recursiveGen;
              if (object.Equals(_8256_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3579;
              DCOMPUTF16._IOwnership _out3580;
              DCOMPUTF16.COMP.FromOwnership(r, _8256_recOwned, expectedOwnership, out _out3579, out _out3580);
              r = _out3579;
              resultingOwnership = _out3580;
              readIdents = _8257_recIdents;
            }
          } else if (_source335.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8258___mcc_h312 = _source335.dtor_Passthrough_a0;
            {
              RAST._IExpr _8259_recursiveGen;
              DCOMPUTF16._IOwnership _8260_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8261_recIdents;
              RAST._IExpr _out3581;
              DCOMPUTF16._IOwnership _out3582;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3583;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3581, out _out3582, out _out3583);
              _8259_recursiveGen = _out3581;
              _8260_recOwned = _out3582;
              _8261_recIdents = _out3583;
              r = _8259_recursiveGen;
              if (object.Equals(_8260_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3584;
              DCOMPUTF16._IOwnership _out3585;
              DCOMPUTF16.COMP.FromOwnership(r, _8260_recOwned, expectedOwnership, out _out3584, out _out3585);
              r = _out3584;
              resultingOwnership = _out3585;
              readIdents = _8261_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8262___mcc_h315 = _source335.dtor_TypeArg_a0;
            {
              RAST._IExpr _8263_recursiveGen;
              DCOMPUTF16._IOwnership _8264_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8265_recIdents;
              RAST._IExpr _out3586;
              DCOMPUTF16._IOwnership _out3587;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3588;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3586, out _out3587, out _out3588);
              _8263_recursiveGen = _out3586;
              _8264_recOwned = _out3587;
              _8265_recIdents = _out3588;
              r = _8263_recursiveGen;
              if (object.Equals(_8264_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3589;
              DCOMPUTF16._IOwnership _out3590;
              DCOMPUTF16.COMP.FromOwnership(r, _8264_recOwned, expectedOwnership, out _out3589, out _out3590);
              r = _out3589;
              resultingOwnership = _out3590;
              readIdents = _8265_recIdents;
            }
          }
        } else if (_source304.is_Tuple) {
          Dafny.ISequence<DAST._IType> _8266___mcc_h318 = _source304.dtor_Tuple_a0;
          DAST._IType _source337 = _7662___mcc_h1;
          if (_source337.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8267___mcc_h322 = _source337.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8268___mcc_h323 = _source337.dtor_typeArgs;
            DAST._IResolvedType _8269___mcc_h324 = _source337.dtor_resolved;
            DAST._IResolvedType _source338 = _8269___mcc_h324;
            if (_source338.is_Datatype) {
              DAST._IDatatypeType _8270___mcc_h328 = _source338.dtor_datatypeType;
              {
                RAST._IExpr _8271_recursiveGen;
                DCOMPUTF16._IOwnership _8272_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8273_recIdents;
                RAST._IExpr _out3591;
                DCOMPUTF16._IOwnership _out3592;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3593;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3591, out _out3592, out _out3593);
                _8271_recursiveGen = _out3591;
                _8272_recOwned = _out3592;
                _8273_recIdents = _out3593;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8271_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3594;
                DCOMPUTF16._IOwnership _out3595;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3594, out _out3595);
                r = _out3594;
                resultingOwnership = _out3595;
                readIdents = _8273_recIdents;
              }
            } else if (_source338.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8274___mcc_h330 = _source338.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8275___mcc_h331 = _source338.dtor_attributes;
              {
                RAST._IExpr _8276_recursiveGen;
                DCOMPUTF16._IOwnership _8277_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8278_recIdents;
                RAST._IExpr _out3596;
                DCOMPUTF16._IOwnership _out3597;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3598;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3596, out _out3597, out _out3598);
                _8276_recursiveGen = _out3596;
                _8277_recOwned = _out3597;
                _8278_recIdents = _out3598;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8276_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3599;
                DCOMPUTF16._IOwnership _out3600;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3599, out _out3600);
                r = _out3599;
                resultingOwnership = _out3600;
                readIdents = _8278_recIdents;
              }
            } else {
              DAST._IType _8279___mcc_h334 = _source338.dtor_baseType;
              DAST._INewtypeRange _8280___mcc_h335 = _source338.dtor_range;
              bool _8281___mcc_h336 = _source338.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8282___mcc_h337 = _source338.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8283_attributes = _8282___mcc_h337;
              bool _8284_erase = _8281___mcc_h336;
              DAST._INewtypeRange _8285_range = _8280___mcc_h335;
              DAST._IType _8286_b = _8279___mcc_h334;
              {
                Std.Wrappers._IOption<RAST._IType> _8287_nativeToType;
                _8287_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8286_b, _8285_range);
                if (object.Equals(_7656_fromTpe, _8286_b)) {
                  RAST._IExpr _8288_recursiveGen;
                  DCOMPUTF16._IOwnership _8289_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8290_recIdents;
                  RAST._IExpr _out3601;
                  DCOMPUTF16._IOwnership _out3602;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3603;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3601, out _out3602, out _out3603);
                  _8288_recursiveGen = _out3601;
                  _8289_recOwned = _out3602;
                  _8290_recIdents = _out3603;
                  readIdents = _8290_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source339 = _8287_nativeToType;
                  if (_source339.is_None) {
                    if (_8284_erase) {
                      r = _8288_recursiveGen;
                    } else {
                      RAST._IType _8291_rhsType;
                      RAST._IType _out3604;
                      _out3604 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _8291_rhsType = _out3604;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8291_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8288_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3605;
                    DCOMPUTF16._IOwnership _out3606;
                    DCOMPUTF16.COMP.FromOwnership(r, _8289_recOwned, expectedOwnership, out _out3605, out _out3606);
                    r = _out3605;
                    resultingOwnership = _out3606;
                  } else {
                    RAST._IType _8292___mcc_h1425 = _source339.dtor_value;
                    RAST._IType _8293_v = _8292___mcc_h1425;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8288_recursiveGen, RAST.Expr.create_ExprFromType(_8293_v)));
                    RAST._IExpr _out3607;
                    DCOMPUTF16._IOwnership _out3608;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3607, out _out3608);
                    r = _out3607;
                    resultingOwnership = _out3608;
                  }
                } else {
                  if ((_8287_nativeToType).is_Some) {
                    DAST._IType _source340 = _7656_fromTpe;
                    if (_source340.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8294___mcc_h1426 = _source340.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8295___mcc_h1427 = _source340.dtor_typeArgs;
                      DAST._IResolvedType _8296___mcc_h1428 = _source340.dtor_resolved;
                      DAST._IResolvedType _source341 = _8296___mcc_h1428;
                      if (_source341.is_Datatype) {
                        DAST._IDatatypeType _8297___mcc_h1432 = _source341.dtor_datatypeType;
                      } else if (_source341.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8298___mcc_h1434 = _source341.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8299___mcc_h1435 = _source341.dtor_attributes;
                      } else {
                        DAST._IType _8300___mcc_h1438 = _source341.dtor_baseType;
                        DAST._INewtypeRange _8301___mcc_h1439 = _source341.dtor_range;
                        bool _8302___mcc_h1440 = _source341.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8303___mcc_h1441 = _source341.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8304_attributes0 = _8303___mcc_h1441;
                        bool _8305_erase0 = _8302___mcc_h1440;
                        DAST._INewtypeRange _8306_range0 = _8301___mcc_h1439;
                        DAST._IType _8307_b0 = _8300___mcc_h1438;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8308_nativeFromType;
                          _8308_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8307_b0, _8306_range0);
                          if ((_8308_nativeFromType).is_Some) {
                            RAST._IExpr _8309_recursiveGen;
                            DCOMPUTF16._IOwnership _8310_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8311_recIdents;
                            RAST._IExpr _out3609;
                            DCOMPUTF16._IOwnership _out3610;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3611;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3609, out _out3610, out _out3611);
                            _8309_recursiveGen = _out3609;
                            _8310_recOwned = _out3610;
                            _8311_recIdents = _out3611;
                            RAST._IExpr _out3612;
                            DCOMPUTF16._IOwnership _out3613;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8309_recursiveGen, (_8287_nativeToType).dtor_value), _8310_recOwned, expectedOwnership, out _out3612, out _out3613);
                            r = _out3612;
                            resultingOwnership = _out3613;
                            readIdents = _8311_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source340.is_Nullable) {
                      DAST._IType _8312___mcc_h1446 = _source340.dtor_Nullable_a0;
                    } else if (_source340.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8313___mcc_h1448 = _source340.dtor_Tuple_a0;
                    } else if (_source340.is_Array) {
                      DAST._IType _8314___mcc_h1450 = _source340.dtor_element;
                      BigInteger _8315___mcc_h1451 = _source340.dtor_dims;
                    } else if (_source340.is_Seq) {
                      DAST._IType _8316___mcc_h1454 = _source340.dtor_element;
                    } else if (_source340.is_Set) {
                      DAST._IType _8317___mcc_h1456 = _source340.dtor_element;
                    } else if (_source340.is_Multiset) {
                      DAST._IType _8318___mcc_h1458 = _source340.dtor_element;
                    } else if (_source340.is_Map) {
                      DAST._IType _8319___mcc_h1460 = _source340.dtor_key;
                      DAST._IType _8320___mcc_h1461 = _source340.dtor_value;
                    } else if (_source340.is_SetBuilder) {
                      DAST._IType _8321___mcc_h1464 = _source340.dtor_element;
                    } else if (_source340.is_MapBuilder) {
                      DAST._IType _8322___mcc_h1466 = _source340.dtor_key;
                      DAST._IType _8323___mcc_h1467 = _source340.dtor_value;
                    } else if (_source340.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8324___mcc_h1470 = _source340.dtor_args;
                      DAST._IType _8325___mcc_h1471 = _source340.dtor_result;
                    } else if (_source340.is_Primitive) {
                      DAST._IPrimitive _8326___mcc_h1474 = _source340.dtor_Primitive_a0;
                    } else if (_source340.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8327___mcc_h1476 = _source340.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8328___mcc_h1478 = _source340.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8329_recursiveGen;
                      DCOMPUTF16._IOwnership _8330_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8331_recIdents;
                      RAST._IExpr _out3614;
                      DCOMPUTF16._IOwnership _out3615;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3616;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3614, out _out3615, out _out3616);
                      _8329_recursiveGen = _out3614;
                      _8330_recOwned = _out3615;
                      _8331_recIdents = _out3616;
                      RAST._IExpr _out3617;
                      DCOMPUTF16._IOwnership _out3618;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8329_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8287_nativeToType).dtor_value), _8330_recOwned, expectedOwnership, out _out3617, out _out3618);
                      r = _out3617;
                      resultingOwnership = _out3618;
                      readIdents = _8331_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3619;
                  DCOMPUTF16._IOwnership _out3620;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3621;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8286_b), _8286_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3619, out _out3620, out _out3621);
                  r = _out3619;
                  resultingOwnership = _out3620;
                  readIdents = _out3621;
                }
              }
            }
          } else if (_source337.is_Nullable) {
            DAST._IType _8332___mcc_h342 = _source337.dtor_Nullable_a0;
            {
              RAST._IExpr _8333_recursiveGen;
              DCOMPUTF16._IOwnership _8334_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8335_recIdents;
              RAST._IExpr _out3622;
              DCOMPUTF16._IOwnership _out3623;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3624;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3622, out _out3623, out _out3624);
              _8333_recursiveGen = _out3622;
              _8334_recOwned = _out3623;
              _8335_recIdents = _out3624;
              r = _8333_recursiveGen;
              if (object.Equals(_8334_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3625;
              DCOMPUTF16._IOwnership _out3626;
              DCOMPUTF16.COMP.FromOwnership(r, _8334_recOwned, expectedOwnership, out _out3625, out _out3626);
              r = _out3625;
              resultingOwnership = _out3626;
              readIdents = _8335_recIdents;
            }
          } else if (_source337.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8336___mcc_h344 = _source337.dtor_Tuple_a0;
            {
              RAST._IExpr _8337_recursiveGen;
              DCOMPUTF16._IOwnership _8338_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8339_recIdents;
              RAST._IExpr _out3627;
              DCOMPUTF16._IOwnership _out3628;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3629;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3627, out _out3628, out _out3629);
              _8337_recursiveGen = _out3627;
              _8338_recOwned = _out3628;
              _8339_recIdents = _out3629;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8337_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3630;
              DCOMPUTF16._IOwnership _out3631;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3630, out _out3631);
              r = _out3630;
              resultingOwnership = _out3631;
              readIdents = _8339_recIdents;
            }
          } else if (_source337.is_Array) {
            DAST._IType _8340___mcc_h346 = _source337.dtor_element;
            BigInteger _8341___mcc_h347 = _source337.dtor_dims;
            {
              RAST._IExpr _8342_recursiveGen;
              DCOMPUTF16._IOwnership _8343_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8344_recIdents;
              RAST._IExpr _out3632;
              DCOMPUTF16._IOwnership _out3633;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3634;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3632, out _out3633, out _out3634);
              _8342_recursiveGen = _out3632;
              _8343_recOwned = _out3633;
              _8344_recIdents = _out3634;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8342_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3635;
              DCOMPUTF16._IOwnership _out3636;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3635, out _out3636);
              r = _out3635;
              resultingOwnership = _out3636;
              readIdents = _8344_recIdents;
            }
          } else if (_source337.is_Seq) {
            DAST._IType _8345___mcc_h350 = _source337.dtor_element;
            {
              RAST._IExpr _8346_recursiveGen;
              DCOMPUTF16._IOwnership _8347_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8348_recIdents;
              RAST._IExpr _out3637;
              DCOMPUTF16._IOwnership _out3638;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3639;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3637, out _out3638, out _out3639);
              _8346_recursiveGen = _out3637;
              _8347_recOwned = _out3638;
              _8348_recIdents = _out3639;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8346_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3640;
              DCOMPUTF16._IOwnership _out3641;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3640, out _out3641);
              r = _out3640;
              resultingOwnership = _out3641;
              readIdents = _8348_recIdents;
            }
          } else if (_source337.is_Set) {
            DAST._IType _8349___mcc_h352 = _source337.dtor_element;
            {
              RAST._IExpr _8350_recursiveGen;
              DCOMPUTF16._IOwnership _8351_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8352_recIdents;
              RAST._IExpr _out3642;
              DCOMPUTF16._IOwnership _out3643;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3644;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3642, out _out3643, out _out3644);
              _8350_recursiveGen = _out3642;
              _8351_recOwned = _out3643;
              _8352_recIdents = _out3644;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8350_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3645;
              DCOMPUTF16._IOwnership _out3646;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3645, out _out3646);
              r = _out3645;
              resultingOwnership = _out3646;
              readIdents = _8352_recIdents;
            }
          } else if (_source337.is_Multiset) {
            DAST._IType _8353___mcc_h354 = _source337.dtor_element;
            {
              RAST._IExpr _8354_recursiveGen;
              DCOMPUTF16._IOwnership _8355_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8356_recIdents;
              RAST._IExpr _out3647;
              DCOMPUTF16._IOwnership _out3648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3649;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3647, out _out3648, out _out3649);
              _8354_recursiveGen = _out3647;
              _8355_recOwned = _out3648;
              _8356_recIdents = _out3649;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8354_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3650;
              DCOMPUTF16._IOwnership _out3651;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3650, out _out3651);
              r = _out3650;
              resultingOwnership = _out3651;
              readIdents = _8356_recIdents;
            }
          } else if (_source337.is_Map) {
            DAST._IType _8357___mcc_h356 = _source337.dtor_key;
            DAST._IType _8358___mcc_h357 = _source337.dtor_value;
            {
              RAST._IExpr _8359_recursiveGen;
              DCOMPUTF16._IOwnership _8360_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8361_recIdents;
              RAST._IExpr _out3652;
              DCOMPUTF16._IOwnership _out3653;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3654;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3652, out _out3653, out _out3654);
              _8359_recursiveGen = _out3652;
              _8360_recOwned = _out3653;
              _8361_recIdents = _out3654;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8359_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3655;
              DCOMPUTF16._IOwnership _out3656;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3655, out _out3656);
              r = _out3655;
              resultingOwnership = _out3656;
              readIdents = _8361_recIdents;
            }
          } else if (_source337.is_SetBuilder) {
            DAST._IType _8362___mcc_h360 = _source337.dtor_element;
            {
              RAST._IExpr _8363_recursiveGen;
              DCOMPUTF16._IOwnership _8364_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8365_recIdents;
              RAST._IExpr _out3657;
              DCOMPUTF16._IOwnership _out3658;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3659;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3657, out _out3658, out _out3659);
              _8363_recursiveGen = _out3657;
              _8364_recOwned = _out3658;
              _8365_recIdents = _out3659;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8363_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3660;
              DCOMPUTF16._IOwnership _out3661;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3660, out _out3661);
              r = _out3660;
              resultingOwnership = _out3661;
              readIdents = _8365_recIdents;
            }
          } else if (_source337.is_MapBuilder) {
            DAST._IType _8366___mcc_h362 = _source337.dtor_key;
            DAST._IType _8367___mcc_h363 = _source337.dtor_value;
            {
              RAST._IExpr _8368_recursiveGen;
              DCOMPUTF16._IOwnership _8369_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8370_recIdents;
              RAST._IExpr _out3662;
              DCOMPUTF16._IOwnership _out3663;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3664;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3662, out _out3663, out _out3664);
              _8368_recursiveGen = _out3662;
              _8369_recOwned = _out3663;
              _8370_recIdents = _out3664;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8368_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3665;
              DCOMPUTF16._IOwnership _out3666;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3665, out _out3666);
              r = _out3665;
              resultingOwnership = _out3666;
              readIdents = _8370_recIdents;
            }
          } else if (_source337.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8371___mcc_h366 = _source337.dtor_args;
            DAST._IType _8372___mcc_h367 = _source337.dtor_result;
            {
              RAST._IExpr _8373_recursiveGen;
              DCOMPUTF16._IOwnership _8374_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8375_recIdents;
              RAST._IExpr _out3667;
              DCOMPUTF16._IOwnership _out3668;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3669;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3667, out _out3668, out _out3669);
              _8373_recursiveGen = _out3667;
              _8374_recOwned = _out3668;
              _8375_recIdents = _out3669;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8373_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3670;
              DCOMPUTF16._IOwnership _out3671;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3670, out _out3671);
              r = _out3670;
              resultingOwnership = _out3671;
              readIdents = _8375_recIdents;
            }
          } else if (_source337.is_Primitive) {
            DAST._IPrimitive _8376___mcc_h370 = _source337.dtor_Primitive_a0;
            {
              RAST._IExpr _8377_recursiveGen;
              DCOMPUTF16._IOwnership _8378_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8379_recIdents;
              RAST._IExpr _out3672;
              DCOMPUTF16._IOwnership _out3673;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3674;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3672, out _out3673, out _out3674);
              _8377_recursiveGen = _out3672;
              _8378_recOwned = _out3673;
              _8379_recIdents = _out3674;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8377_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3675;
              DCOMPUTF16._IOwnership _out3676;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3675, out _out3676);
              r = _out3675;
              resultingOwnership = _out3676;
              readIdents = _8379_recIdents;
            }
          } else if (_source337.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8380___mcc_h372 = _source337.dtor_Passthrough_a0;
            {
              RAST._IExpr _8381_recursiveGen;
              DCOMPUTF16._IOwnership _8382_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8383_recIdents;
              RAST._IExpr _out3677;
              DCOMPUTF16._IOwnership _out3678;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3679;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3677, out _out3678, out _out3679);
              _8381_recursiveGen = _out3677;
              _8382_recOwned = _out3678;
              _8383_recIdents = _out3679;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8381_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3680;
              DCOMPUTF16._IOwnership _out3681;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3680, out _out3681);
              r = _out3680;
              resultingOwnership = _out3681;
              readIdents = _8383_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8384___mcc_h374 = _source337.dtor_TypeArg_a0;
            {
              RAST._IExpr _8385_recursiveGen;
              DCOMPUTF16._IOwnership _8386_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8387_recIdents;
              RAST._IExpr _out3682;
              DCOMPUTF16._IOwnership _out3683;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3684;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3682, out _out3683, out _out3684);
              _8385_recursiveGen = _out3682;
              _8386_recOwned = _out3683;
              _8387_recIdents = _out3684;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8385_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3685;
              DCOMPUTF16._IOwnership _out3686;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3685, out _out3686);
              r = _out3685;
              resultingOwnership = _out3686;
              readIdents = _8387_recIdents;
            }
          }
        } else if (_source304.is_Array) {
          DAST._IType _8388___mcc_h376 = _source304.dtor_element;
          BigInteger _8389___mcc_h377 = _source304.dtor_dims;
          DAST._IType _source342 = _7662___mcc_h1;
          if (_source342.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8390___mcc_h384 = _source342.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8391___mcc_h385 = _source342.dtor_typeArgs;
            DAST._IResolvedType _8392___mcc_h386 = _source342.dtor_resolved;
            DAST._IResolvedType _source343 = _8392___mcc_h386;
            if (_source343.is_Datatype) {
              DAST._IDatatypeType _8393___mcc_h390 = _source343.dtor_datatypeType;
              {
                RAST._IExpr _8394_recursiveGen;
                DCOMPUTF16._IOwnership _8395_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8396_recIdents;
                RAST._IExpr _out3687;
                DCOMPUTF16._IOwnership _out3688;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3689;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3687, out _out3688, out _out3689);
                _8394_recursiveGen = _out3687;
                _8395_recOwned = _out3688;
                _8396_recIdents = _out3689;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8394_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3690;
                DCOMPUTF16._IOwnership _out3691;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3690, out _out3691);
                r = _out3690;
                resultingOwnership = _out3691;
                readIdents = _8396_recIdents;
              }
            } else if (_source343.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8397___mcc_h392 = _source343.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8398___mcc_h393 = _source343.dtor_attributes;
              {
                RAST._IExpr _8399_recursiveGen;
                DCOMPUTF16._IOwnership _8400_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8401_recIdents;
                RAST._IExpr _out3692;
                DCOMPUTF16._IOwnership _out3693;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3694;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3692, out _out3693, out _out3694);
                _8399_recursiveGen = _out3692;
                _8400_recOwned = _out3693;
                _8401_recIdents = _out3694;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8399_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3695;
                DCOMPUTF16._IOwnership _out3696;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3695, out _out3696);
                r = _out3695;
                resultingOwnership = _out3696;
                readIdents = _8401_recIdents;
              }
            } else {
              DAST._IType _8402___mcc_h396 = _source343.dtor_baseType;
              DAST._INewtypeRange _8403___mcc_h397 = _source343.dtor_range;
              bool _8404___mcc_h398 = _source343.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8405___mcc_h399 = _source343.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8406_attributes = _8405___mcc_h399;
              bool _8407_erase = _8404___mcc_h398;
              DAST._INewtypeRange _8408_range = _8403___mcc_h397;
              DAST._IType _8409_b = _8402___mcc_h396;
              {
                Std.Wrappers._IOption<RAST._IType> _8410_nativeToType;
                _8410_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8409_b, _8408_range);
                if (object.Equals(_7656_fromTpe, _8409_b)) {
                  RAST._IExpr _8411_recursiveGen;
                  DCOMPUTF16._IOwnership _8412_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8413_recIdents;
                  RAST._IExpr _out3697;
                  DCOMPUTF16._IOwnership _out3698;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3699;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3697, out _out3698, out _out3699);
                  _8411_recursiveGen = _out3697;
                  _8412_recOwned = _out3698;
                  _8413_recIdents = _out3699;
                  readIdents = _8413_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source344 = _8410_nativeToType;
                  if (_source344.is_None) {
                    if (_8407_erase) {
                      r = _8411_recursiveGen;
                    } else {
                      RAST._IType _8414_rhsType;
                      RAST._IType _out3700;
                      _out3700 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _8414_rhsType = _out3700;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8414_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8411_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3701;
                    DCOMPUTF16._IOwnership _out3702;
                    DCOMPUTF16.COMP.FromOwnership(r, _8412_recOwned, expectedOwnership, out _out3701, out _out3702);
                    r = _out3701;
                    resultingOwnership = _out3702;
                  } else {
                    RAST._IType _8415___mcc_h1480 = _source344.dtor_value;
                    RAST._IType _8416_v = _8415___mcc_h1480;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8411_recursiveGen, RAST.Expr.create_ExprFromType(_8416_v)));
                    RAST._IExpr _out3703;
                    DCOMPUTF16._IOwnership _out3704;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3703, out _out3704);
                    r = _out3703;
                    resultingOwnership = _out3704;
                  }
                } else {
                  if ((_8410_nativeToType).is_Some) {
                    DAST._IType _source345 = _7656_fromTpe;
                    if (_source345.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8417___mcc_h1481 = _source345.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8418___mcc_h1482 = _source345.dtor_typeArgs;
                      DAST._IResolvedType _8419___mcc_h1483 = _source345.dtor_resolved;
                      DAST._IResolvedType _source346 = _8419___mcc_h1483;
                      if (_source346.is_Datatype) {
                        DAST._IDatatypeType _8420___mcc_h1487 = _source346.dtor_datatypeType;
                      } else if (_source346.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8421___mcc_h1489 = _source346.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8422___mcc_h1490 = _source346.dtor_attributes;
                      } else {
                        DAST._IType _8423___mcc_h1493 = _source346.dtor_baseType;
                        DAST._INewtypeRange _8424___mcc_h1494 = _source346.dtor_range;
                        bool _8425___mcc_h1495 = _source346.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8426___mcc_h1496 = _source346.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8427_attributes0 = _8426___mcc_h1496;
                        bool _8428_erase0 = _8425___mcc_h1495;
                        DAST._INewtypeRange _8429_range0 = _8424___mcc_h1494;
                        DAST._IType _8430_b0 = _8423___mcc_h1493;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8431_nativeFromType;
                          _8431_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8430_b0, _8429_range0);
                          if ((_8431_nativeFromType).is_Some) {
                            RAST._IExpr _8432_recursiveGen;
                            DCOMPUTF16._IOwnership _8433_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8434_recIdents;
                            RAST._IExpr _out3705;
                            DCOMPUTF16._IOwnership _out3706;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3707;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3705, out _out3706, out _out3707);
                            _8432_recursiveGen = _out3705;
                            _8433_recOwned = _out3706;
                            _8434_recIdents = _out3707;
                            RAST._IExpr _out3708;
                            DCOMPUTF16._IOwnership _out3709;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8432_recursiveGen, (_8410_nativeToType).dtor_value), _8433_recOwned, expectedOwnership, out _out3708, out _out3709);
                            r = _out3708;
                            resultingOwnership = _out3709;
                            readIdents = _8434_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source345.is_Nullable) {
                      DAST._IType _8435___mcc_h1501 = _source345.dtor_Nullable_a0;
                    } else if (_source345.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8436___mcc_h1503 = _source345.dtor_Tuple_a0;
                    } else if (_source345.is_Array) {
                      DAST._IType _8437___mcc_h1505 = _source345.dtor_element;
                      BigInteger _8438___mcc_h1506 = _source345.dtor_dims;
                    } else if (_source345.is_Seq) {
                      DAST._IType _8439___mcc_h1509 = _source345.dtor_element;
                    } else if (_source345.is_Set) {
                      DAST._IType _8440___mcc_h1511 = _source345.dtor_element;
                    } else if (_source345.is_Multiset) {
                      DAST._IType _8441___mcc_h1513 = _source345.dtor_element;
                    } else if (_source345.is_Map) {
                      DAST._IType _8442___mcc_h1515 = _source345.dtor_key;
                      DAST._IType _8443___mcc_h1516 = _source345.dtor_value;
                    } else if (_source345.is_SetBuilder) {
                      DAST._IType _8444___mcc_h1519 = _source345.dtor_element;
                    } else if (_source345.is_MapBuilder) {
                      DAST._IType _8445___mcc_h1521 = _source345.dtor_key;
                      DAST._IType _8446___mcc_h1522 = _source345.dtor_value;
                    } else if (_source345.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8447___mcc_h1525 = _source345.dtor_args;
                      DAST._IType _8448___mcc_h1526 = _source345.dtor_result;
                    } else if (_source345.is_Primitive) {
                      DAST._IPrimitive _8449___mcc_h1529 = _source345.dtor_Primitive_a0;
                    } else if (_source345.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8450___mcc_h1531 = _source345.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8451___mcc_h1533 = _source345.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8452_recursiveGen;
                      DCOMPUTF16._IOwnership _8453_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8454_recIdents;
                      RAST._IExpr _out3710;
                      DCOMPUTF16._IOwnership _out3711;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3712;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3710, out _out3711, out _out3712);
                      _8452_recursiveGen = _out3710;
                      _8453_recOwned = _out3711;
                      _8454_recIdents = _out3712;
                      RAST._IExpr _out3713;
                      DCOMPUTF16._IOwnership _out3714;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8452_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8410_nativeToType).dtor_value), _8453_recOwned, expectedOwnership, out _out3713, out _out3714);
                      r = _out3713;
                      resultingOwnership = _out3714;
                      readIdents = _8454_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3715;
                  DCOMPUTF16._IOwnership _out3716;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3717;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8409_b), _8409_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3715, out _out3716, out _out3717);
                  r = _out3715;
                  resultingOwnership = _out3716;
                  readIdents = _out3717;
                }
              }
            }
          } else if (_source342.is_Nullable) {
            DAST._IType _8455___mcc_h404 = _source342.dtor_Nullable_a0;
            {
              RAST._IExpr _8456_recursiveGen;
              DCOMPUTF16._IOwnership _8457_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8458_recIdents;
              RAST._IExpr _out3718;
              DCOMPUTF16._IOwnership _out3719;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3720;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3718, out _out3719, out _out3720);
              _8456_recursiveGen = _out3718;
              _8457_recOwned = _out3719;
              _8458_recIdents = _out3720;
              r = _8456_recursiveGen;
              if (object.Equals(_8457_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3721;
              DCOMPUTF16._IOwnership _out3722;
              DCOMPUTF16.COMP.FromOwnership(r, _8457_recOwned, expectedOwnership, out _out3721, out _out3722);
              r = _out3721;
              resultingOwnership = _out3722;
              readIdents = _8458_recIdents;
            }
          } else if (_source342.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8459___mcc_h406 = _source342.dtor_Tuple_a0;
            {
              RAST._IExpr _8460_recursiveGen;
              DCOMPUTF16._IOwnership _8461_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8462_recIdents;
              RAST._IExpr _out3723;
              DCOMPUTF16._IOwnership _out3724;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3725;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3723, out _out3724, out _out3725);
              _8460_recursiveGen = _out3723;
              _8461_recOwned = _out3724;
              _8462_recIdents = _out3725;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8460_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3726;
              DCOMPUTF16._IOwnership _out3727;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3726, out _out3727);
              r = _out3726;
              resultingOwnership = _out3727;
              readIdents = _8462_recIdents;
            }
          } else if (_source342.is_Array) {
            DAST._IType _8463___mcc_h408 = _source342.dtor_element;
            BigInteger _8464___mcc_h409 = _source342.dtor_dims;
            {
              RAST._IExpr _8465_recursiveGen;
              DCOMPUTF16._IOwnership _8466_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8467_recIdents;
              RAST._IExpr _out3728;
              DCOMPUTF16._IOwnership _out3729;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3730;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3728, out _out3729, out _out3730);
              _8465_recursiveGen = _out3728;
              _8466_recOwned = _out3729;
              _8467_recIdents = _out3730;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8465_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3731;
              DCOMPUTF16._IOwnership _out3732;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3731, out _out3732);
              r = _out3731;
              resultingOwnership = _out3732;
              readIdents = _8467_recIdents;
            }
          } else if (_source342.is_Seq) {
            DAST._IType _8468___mcc_h412 = _source342.dtor_element;
            {
              RAST._IExpr _8469_recursiveGen;
              DCOMPUTF16._IOwnership _8470_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8471_recIdents;
              RAST._IExpr _out3733;
              DCOMPUTF16._IOwnership _out3734;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3735;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3733, out _out3734, out _out3735);
              _8469_recursiveGen = _out3733;
              _8470_recOwned = _out3734;
              _8471_recIdents = _out3735;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8469_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3736;
              DCOMPUTF16._IOwnership _out3737;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3736, out _out3737);
              r = _out3736;
              resultingOwnership = _out3737;
              readIdents = _8471_recIdents;
            }
          } else if (_source342.is_Set) {
            DAST._IType _8472___mcc_h414 = _source342.dtor_element;
            {
              RAST._IExpr _8473_recursiveGen;
              DCOMPUTF16._IOwnership _8474_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8475_recIdents;
              RAST._IExpr _out3738;
              DCOMPUTF16._IOwnership _out3739;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3740;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3738, out _out3739, out _out3740);
              _8473_recursiveGen = _out3738;
              _8474_recOwned = _out3739;
              _8475_recIdents = _out3740;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8473_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3741;
              DCOMPUTF16._IOwnership _out3742;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3741, out _out3742);
              r = _out3741;
              resultingOwnership = _out3742;
              readIdents = _8475_recIdents;
            }
          } else if (_source342.is_Multiset) {
            DAST._IType _8476___mcc_h416 = _source342.dtor_element;
            {
              RAST._IExpr _8477_recursiveGen;
              DCOMPUTF16._IOwnership _8478_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8479_recIdents;
              RAST._IExpr _out3743;
              DCOMPUTF16._IOwnership _out3744;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3745;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3743, out _out3744, out _out3745);
              _8477_recursiveGen = _out3743;
              _8478_recOwned = _out3744;
              _8479_recIdents = _out3745;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8477_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3746;
              DCOMPUTF16._IOwnership _out3747;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3746, out _out3747);
              r = _out3746;
              resultingOwnership = _out3747;
              readIdents = _8479_recIdents;
            }
          } else if (_source342.is_Map) {
            DAST._IType _8480___mcc_h418 = _source342.dtor_key;
            DAST._IType _8481___mcc_h419 = _source342.dtor_value;
            {
              RAST._IExpr _8482_recursiveGen;
              DCOMPUTF16._IOwnership _8483_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8484_recIdents;
              RAST._IExpr _out3748;
              DCOMPUTF16._IOwnership _out3749;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3750;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3748, out _out3749, out _out3750);
              _8482_recursiveGen = _out3748;
              _8483_recOwned = _out3749;
              _8484_recIdents = _out3750;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8482_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3751;
              DCOMPUTF16._IOwnership _out3752;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3751, out _out3752);
              r = _out3751;
              resultingOwnership = _out3752;
              readIdents = _8484_recIdents;
            }
          } else if (_source342.is_SetBuilder) {
            DAST._IType _8485___mcc_h422 = _source342.dtor_element;
            {
              RAST._IExpr _8486_recursiveGen;
              DCOMPUTF16._IOwnership _8487_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8488_recIdents;
              RAST._IExpr _out3753;
              DCOMPUTF16._IOwnership _out3754;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3755;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3753, out _out3754, out _out3755);
              _8486_recursiveGen = _out3753;
              _8487_recOwned = _out3754;
              _8488_recIdents = _out3755;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8486_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3756;
              DCOMPUTF16._IOwnership _out3757;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3756, out _out3757);
              r = _out3756;
              resultingOwnership = _out3757;
              readIdents = _8488_recIdents;
            }
          } else if (_source342.is_MapBuilder) {
            DAST._IType _8489___mcc_h424 = _source342.dtor_key;
            DAST._IType _8490___mcc_h425 = _source342.dtor_value;
            {
              RAST._IExpr _8491_recursiveGen;
              DCOMPUTF16._IOwnership _8492_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8493_recIdents;
              RAST._IExpr _out3758;
              DCOMPUTF16._IOwnership _out3759;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3760;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3758, out _out3759, out _out3760);
              _8491_recursiveGen = _out3758;
              _8492_recOwned = _out3759;
              _8493_recIdents = _out3760;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8491_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3761;
              DCOMPUTF16._IOwnership _out3762;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3761, out _out3762);
              r = _out3761;
              resultingOwnership = _out3762;
              readIdents = _8493_recIdents;
            }
          } else if (_source342.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8494___mcc_h428 = _source342.dtor_args;
            DAST._IType _8495___mcc_h429 = _source342.dtor_result;
            {
              RAST._IExpr _8496_recursiveGen;
              DCOMPUTF16._IOwnership _8497_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8498_recIdents;
              RAST._IExpr _out3763;
              DCOMPUTF16._IOwnership _out3764;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3765;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3763, out _out3764, out _out3765);
              _8496_recursiveGen = _out3763;
              _8497_recOwned = _out3764;
              _8498_recIdents = _out3765;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8496_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3766;
              DCOMPUTF16._IOwnership _out3767;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3766, out _out3767);
              r = _out3766;
              resultingOwnership = _out3767;
              readIdents = _8498_recIdents;
            }
          } else if (_source342.is_Primitive) {
            DAST._IPrimitive _8499___mcc_h432 = _source342.dtor_Primitive_a0;
            {
              RAST._IExpr _8500_recursiveGen;
              DCOMPUTF16._IOwnership _8501_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8502_recIdents;
              RAST._IExpr _out3768;
              DCOMPUTF16._IOwnership _out3769;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3770;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3768, out _out3769, out _out3770);
              _8500_recursiveGen = _out3768;
              _8501_recOwned = _out3769;
              _8502_recIdents = _out3770;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8500_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3771;
              DCOMPUTF16._IOwnership _out3772;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3771, out _out3772);
              r = _out3771;
              resultingOwnership = _out3772;
              readIdents = _8502_recIdents;
            }
          } else if (_source342.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8503___mcc_h434 = _source342.dtor_Passthrough_a0;
            {
              RAST._IExpr _8504_recursiveGen;
              DCOMPUTF16._IOwnership _8505_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8506_recIdents;
              RAST._IExpr _out3773;
              DCOMPUTF16._IOwnership _out3774;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3775;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3773, out _out3774, out _out3775);
              _8504_recursiveGen = _out3773;
              _8505_recOwned = _out3774;
              _8506_recIdents = _out3775;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8504_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3776;
              DCOMPUTF16._IOwnership _out3777;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3776, out _out3777);
              r = _out3776;
              resultingOwnership = _out3777;
              readIdents = _8506_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8507___mcc_h436 = _source342.dtor_TypeArg_a0;
            {
              RAST._IExpr _8508_recursiveGen;
              DCOMPUTF16._IOwnership _8509_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8510_recIdents;
              RAST._IExpr _out3778;
              DCOMPUTF16._IOwnership _out3779;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3780;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3778, out _out3779, out _out3780);
              _8508_recursiveGen = _out3778;
              _8509_recOwned = _out3779;
              _8510_recIdents = _out3780;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8508_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3781;
              DCOMPUTF16._IOwnership _out3782;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3781, out _out3782);
              r = _out3781;
              resultingOwnership = _out3782;
              readIdents = _8510_recIdents;
            }
          }
        } else if (_source304.is_Seq) {
          DAST._IType _8511___mcc_h438 = _source304.dtor_element;
          DAST._IType _source347 = _7662___mcc_h1;
          if (_source347.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8512___mcc_h442 = _source347.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8513___mcc_h443 = _source347.dtor_typeArgs;
            DAST._IResolvedType _8514___mcc_h444 = _source347.dtor_resolved;
            DAST._IResolvedType _source348 = _8514___mcc_h444;
            if (_source348.is_Datatype) {
              DAST._IDatatypeType _8515___mcc_h448 = _source348.dtor_datatypeType;
              {
                RAST._IExpr _8516_recursiveGen;
                DCOMPUTF16._IOwnership _8517_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8518_recIdents;
                RAST._IExpr _out3783;
                DCOMPUTF16._IOwnership _out3784;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3785;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3783, out _out3784, out _out3785);
                _8516_recursiveGen = _out3783;
                _8517_recOwned = _out3784;
                _8518_recIdents = _out3785;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8516_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3786;
                DCOMPUTF16._IOwnership _out3787;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3786, out _out3787);
                r = _out3786;
                resultingOwnership = _out3787;
                readIdents = _8518_recIdents;
              }
            } else if (_source348.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8519___mcc_h450 = _source348.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8520___mcc_h451 = _source348.dtor_attributes;
              {
                RAST._IExpr _8521_recursiveGen;
                DCOMPUTF16._IOwnership _8522_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8523_recIdents;
                RAST._IExpr _out3788;
                DCOMPUTF16._IOwnership _out3789;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3790;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3788, out _out3789, out _out3790);
                _8521_recursiveGen = _out3788;
                _8522_recOwned = _out3789;
                _8523_recIdents = _out3790;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8521_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3791;
                DCOMPUTF16._IOwnership _out3792;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3791, out _out3792);
                r = _out3791;
                resultingOwnership = _out3792;
                readIdents = _8523_recIdents;
              }
            } else {
              DAST._IType _8524___mcc_h454 = _source348.dtor_baseType;
              DAST._INewtypeRange _8525___mcc_h455 = _source348.dtor_range;
              bool _8526___mcc_h456 = _source348.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8527___mcc_h457 = _source348.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8528_attributes = _8527___mcc_h457;
              bool _8529_erase = _8526___mcc_h456;
              DAST._INewtypeRange _8530_range = _8525___mcc_h455;
              DAST._IType _8531_b = _8524___mcc_h454;
              {
                Std.Wrappers._IOption<RAST._IType> _8532_nativeToType;
                _8532_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8531_b, _8530_range);
                if (object.Equals(_7656_fromTpe, _8531_b)) {
                  RAST._IExpr _8533_recursiveGen;
                  DCOMPUTF16._IOwnership _8534_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8535_recIdents;
                  RAST._IExpr _out3793;
                  DCOMPUTF16._IOwnership _out3794;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3795;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3793, out _out3794, out _out3795);
                  _8533_recursiveGen = _out3793;
                  _8534_recOwned = _out3794;
                  _8535_recIdents = _out3795;
                  readIdents = _8535_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source349 = _8532_nativeToType;
                  if (_source349.is_None) {
                    if (_8529_erase) {
                      r = _8533_recursiveGen;
                    } else {
                      RAST._IType _8536_rhsType;
                      RAST._IType _out3796;
                      _out3796 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _8536_rhsType = _out3796;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8536_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8533_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3797;
                    DCOMPUTF16._IOwnership _out3798;
                    DCOMPUTF16.COMP.FromOwnership(r, _8534_recOwned, expectedOwnership, out _out3797, out _out3798);
                    r = _out3797;
                    resultingOwnership = _out3798;
                  } else {
                    RAST._IType _8537___mcc_h1535 = _source349.dtor_value;
                    RAST._IType _8538_v = _8537___mcc_h1535;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8533_recursiveGen, RAST.Expr.create_ExprFromType(_8538_v)));
                    RAST._IExpr _out3799;
                    DCOMPUTF16._IOwnership _out3800;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3799, out _out3800);
                    r = _out3799;
                    resultingOwnership = _out3800;
                  }
                } else {
                  if ((_8532_nativeToType).is_Some) {
                    DAST._IType _source350 = _7656_fromTpe;
                    if (_source350.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8539___mcc_h1536 = _source350.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8540___mcc_h1537 = _source350.dtor_typeArgs;
                      DAST._IResolvedType _8541___mcc_h1538 = _source350.dtor_resolved;
                      DAST._IResolvedType _source351 = _8541___mcc_h1538;
                      if (_source351.is_Datatype) {
                        DAST._IDatatypeType _8542___mcc_h1542 = _source351.dtor_datatypeType;
                      } else if (_source351.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8543___mcc_h1544 = _source351.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8544___mcc_h1545 = _source351.dtor_attributes;
                      } else {
                        DAST._IType _8545___mcc_h1548 = _source351.dtor_baseType;
                        DAST._INewtypeRange _8546___mcc_h1549 = _source351.dtor_range;
                        bool _8547___mcc_h1550 = _source351.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8548___mcc_h1551 = _source351.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8549_attributes0 = _8548___mcc_h1551;
                        bool _8550_erase0 = _8547___mcc_h1550;
                        DAST._INewtypeRange _8551_range0 = _8546___mcc_h1549;
                        DAST._IType _8552_b0 = _8545___mcc_h1548;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8553_nativeFromType;
                          _8553_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8552_b0, _8551_range0);
                          if ((_8553_nativeFromType).is_Some) {
                            RAST._IExpr _8554_recursiveGen;
                            DCOMPUTF16._IOwnership _8555_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8556_recIdents;
                            RAST._IExpr _out3801;
                            DCOMPUTF16._IOwnership _out3802;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3803;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3801, out _out3802, out _out3803);
                            _8554_recursiveGen = _out3801;
                            _8555_recOwned = _out3802;
                            _8556_recIdents = _out3803;
                            RAST._IExpr _out3804;
                            DCOMPUTF16._IOwnership _out3805;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8554_recursiveGen, (_8532_nativeToType).dtor_value), _8555_recOwned, expectedOwnership, out _out3804, out _out3805);
                            r = _out3804;
                            resultingOwnership = _out3805;
                            readIdents = _8556_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source350.is_Nullable) {
                      DAST._IType _8557___mcc_h1556 = _source350.dtor_Nullable_a0;
                    } else if (_source350.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8558___mcc_h1558 = _source350.dtor_Tuple_a0;
                    } else if (_source350.is_Array) {
                      DAST._IType _8559___mcc_h1560 = _source350.dtor_element;
                      BigInteger _8560___mcc_h1561 = _source350.dtor_dims;
                    } else if (_source350.is_Seq) {
                      DAST._IType _8561___mcc_h1564 = _source350.dtor_element;
                    } else if (_source350.is_Set) {
                      DAST._IType _8562___mcc_h1566 = _source350.dtor_element;
                    } else if (_source350.is_Multiset) {
                      DAST._IType _8563___mcc_h1568 = _source350.dtor_element;
                    } else if (_source350.is_Map) {
                      DAST._IType _8564___mcc_h1570 = _source350.dtor_key;
                      DAST._IType _8565___mcc_h1571 = _source350.dtor_value;
                    } else if (_source350.is_SetBuilder) {
                      DAST._IType _8566___mcc_h1574 = _source350.dtor_element;
                    } else if (_source350.is_MapBuilder) {
                      DAST._IType _8567___mcc_h1576 = _source350.dtor_key;
                      DAST._IType _8568___mcc_h1577 = _source350.dtor_value;
                    } else if (_source350.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8569___mcc_h1580 = _source350.dtor_args;
                      DAST._IType _8570___mcc_h1581 = _source350.dtor_result;
                    } else if (_source350.is_Primitive) {
                      DAST._IPrimitive _8571___mcc_h1584 = _source350.dtor_Primitive_a0;
                    } else if (_source350.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8572___mcc_h1586 = _source350.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8573___mcc_h1588 = _source350.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8574_recursiveGen;
                      DCOMPUTF16._IOwnership _8575_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8576_recIdents;
                      RAST._IExpr _out3806;
                      DCOMPUTF16._IOwnership _out3807;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3808;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3806, out _out3807, out _out3808);
                      _8574_recursiveGen = _out3806;
                      _8575_recOwned = _out3807;
                      _8576_recIdents = _out3808;
                      RAST._IExpr _out3809;
                      DCOMPUTF16._IOwnership _out3810;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8574_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8532_nativeToType).dtor_value), _8575_recOwned, expectedOwnership, out _out3809, out _out3810);
                      r = _out3809;
                      resultingOwnership = _out3810;
                      readIdents = _8576_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3811;
                  DCOMPUTF16._IOwnership _out3812;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3813;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8531_b), _8531_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3811, out _out3812, out _out3813);
                  r = _out3811;
                  resultingOwnership = _out3812;
                  readIdents = _out3813;
                }
              }
            }
          } else if (_source347.is_Nullable) {
            DAST._IType _8577___mcc_h462 = _source347.dtor_Nullable_a0;
            {
              RAST._IExpr _8578_recursiveGen;
              DCOMPUTF16._IOwnership _8579_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8580_recIdents;
              RAST._IExpr _out3814;
              DCOMPUTF16._IOwnership _out3815;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3816;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3814, out _out3815, out _out3816);
              _8578_recursiveGen = _out3814;
              _8579_recOwned = _out3815;
              _8580_recIdents = _out3816;
              r = _8578_recursiveGen;
              if (object.Equals(_8579_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3817;
              DCOMPUTF16._IOwnership _out3818;
              DCOMPUTF16.COMP.FromOwnership(r, _8579_recOwned, expectedOwnership, out _out3817, out _out3818);
              r = _out3817;
              resultingOwnership = _out3818;
              readIdents = _8580_recIdents;
            }
          } else if (_source347.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8581___mcc_h464 = _source347.dtor_Tuple_a0;
            {
              RAST._IExpr _8582_recursiveGen;
              DCOMPUTF16._IOwnership _8583_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8584_recIdents;
              RAST._IExpr _out3819;
              DCOMPUTF16._IOwnership _out3820;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3821;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3819, out _out3820, out _out3821);
              _8582_recursiveGen = _out3819;
              _8583_recOwned = _out3820;
              _8584_recIdents = _out3821;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8582_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3822;
              DCOMPUTF16._IOwnership _out3823;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3822, out _out3823);
              r = _out3822;
              resultingOwnership = _out3823;
              readIdents = _8584_recIdents;
            }
          } else if (_source347.is_Array) {
            DAST._IType _8585___mcc_h466 = _source347.dtor_element;
            BigInteger _8586___mcc_h467 = _source347.dtor_dims;
            {
              RAST._IExpr _8587_recursiveGen;
              DCOMPUTF16._IOwnership _8588_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8589_recIdents;
              RAST._IExpr _out3824;
              DCOMPUTF16._IOwnership _out3825;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3826;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3824, out _out3825, out _out3826);
              _8587_recursiveGen = _out3824;
              _8588_recOwned = _out3825;
              _8589_recIdents = _out3826;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8587_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3827;
              DCOMPUTF16._IOwnership _out3828;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3827, out _out3828);
              r = _out3827;
              resultingOwnership = _out3828;
              readIdents = _8589_recIdents;
            }
          } else if (_source347.is_Seq) {
            DAST._IType _8590___mcc_h470 = _source347.dtor_element;
            {
              RAST._IExpr _8591_recursiveGen;
              DCOMPUTF16._IOwnership _8592_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8593_recIdents;
              RAST._IExpr _out3829;
              DCOMPUTF16._IOwnership _out3830;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3831;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3829, out _out3830, out _out3831);
              _8591_recursiveGen = _out3829;
              _8592_recOwned = _out3830;
              _8593_recIdents = _out3831;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8591_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3832;
              DCOMPUTF16._IOwnership _out3833;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3832, out _out3833);
              r = _out3832;
              resultingOwnership = _out3833;
              readIdents = _8593_recIdents;
            }
          } else if (_source347.is_Set) {
            DAST._IType _8594___mcc_h472 = _source347.dtor_element;
            {
              RAST._IExpr _8595_recursiveGen;
              DCOMPUTF16._IOwnership _8596_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8597_recIdents;
              RAST._IExpr _out3834;
              DCOMPUTF16._IOwnership _out3835;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3836;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3834, out _out3835, out _out3836);
              _8595_recursiveGen = _out3834;
              _8596_recOwned = _out3835;
              _8597_recIdents = _out3836;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8595_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3837;
              DCOMPUTF16._IOwnership _out3838;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3837, out _out3838);
              r = _out3837;
              resultingOwnership = _out3838;
              readIdents = _8597_recIdents;
            }
          } else if (_source347.is_Multiset) {
            DAST._IType _8598___mcc_h474 = _source347.dtor_element;
            {
              RAST._IExpr _8599_recursiveGen;
              DCOMPUTF16._IOwnership _8600_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8601_recIdents;
              RAST._IExpr _out3839;
              DCOMPUTF16._IOwnership _out3840;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3841;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3839, out _out3840, out _out3841);
              _8599_recursiveGen = _out3839;
              _8600_recOwned = _out3840;
              _8601_recIdents = _out3841;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8599_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3842;
              DCOMPUTF16._IOwnership _out3843;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3842, out _out3843);
              r = _out3842;
              resultingOwnership = _out3843;
              readIdents = _8601_recIdents;
            }
          } else if (_source347.is_Map) {
            DAST._IType _8602___mcc_h476 = _source347.dtor_key;
            DAST._IType _8603___mcc_h477 = _source347.dtor_value;
            {
              RAST._IExpr _8604_recursiveGen;
              DCOMPUTF16._IOwnership _8605_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8606_recIdents;
              RAST._IExpr _out3844;
              DCOMPUTF16._IOwnership _out3845;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3846;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3844, out _out3845, out _out3846);
              _8604_recursiveGen = _out3844;
              _8605_recOwned = _out3845;
              _8606_recIdents = _out3846;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8604_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3847;
              DCOMPUTF16._IOwnership _out3848;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3847, out _out3848);
              r = _out3847;
              resultingOwnership = _out3848;
              readIdents = _8606_recIdents;
            }
          } else if (_source347.is_SetBuilder) {
            DAST._IType _8607___mcc_h480 = _source347.dtor_element;
            {
              RAST._IExpr _8608_recursiveGen;
              DCOMPUTF16._IOwnership _8609_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8610_recIdents;
              RAST._IExpr _out3849;
              DCOMPUTF16._IOwnership _out3850;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3851;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3849, out _out3850, out _out3851);
              _8608_recursiveGen = _out3849;
              _8609_recOwned = _out3850;
              _8610_recIdents = _out3851;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8608_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3852;
              DCOMPUTF16._IOwnership _out3853;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3852, out _out3853);
              r = _out3852;
              resultingOwnership = _out3853;
              readIdents = _8610_recIdents;
            }
          } else if (_source347.is_MapBuilder) {
            DAST._IType _8611___mcc_h482 = _source347.dtor_key;
            DAST._IType _8612___mcc_h483 = _source347.dtor_value;
            {
              RAST._IExpr _8613_recursiveGen;
              DCOMPUTF16._IOwnership _8614_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8615_recIdents;
              RAST._IExpr _out3854;
              DCOMPUTF16._IOwnership _out3855;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3856;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3854, out _out3855, out _out3856);
              _8613_recursiveGen = _out3854;
              _8614_recOwned = _out3855;
              _8615_recIdents = _out3856;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8613_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3857;
              DCOMPUTF16._IOwnership _out3858;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3857, out _out3858);
              r = _out3857;
              resultingOwnership = _out3858;
              readIdents = _8615_recIdents;
            }
          } else if (_source347.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8616___mcc_h486 = _source347.dtor_args;
            DAST._IType _8617___mcc_h487 = _source347.dtor_result;
            {
              RAST._IExpr _8618_recursiveGen;
              DCOMPUTF16._IOwnership _8619_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8620_recIdents;
              RAST._IExpr _out3859;
              DCOMPUTF16._IOwnership _out3860;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3861;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3859, out _out3860, out _out3861);
              _8618_recursiveGen = _out3859;
              _8619_recOwned = _out3860;
              _8620_recIdents = _out3861;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8618_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3862;
              DCOMPUTF16._IOwnership _out3863;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3862, out _out3863);
              r = _out3862;
              resultingOwnership = _out3863;
              readIdents = _8620_recIdents;
            }
          } else if (_source347.is_Primitive) {
            DAST._IPrimitive _8621___mcc_h490 = _source347.dtor_Primitive_a0;
            {
              RAST._IExpr _8622_recursiveGen;
              DCOMPUTF16._IOwnership _8623_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8624_recIdents;
              RAST._IExpr _out3864;
              DCOMPUTF16._IOwnership _out3865;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3866;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3864, out _out3865, out _out3866);
              _8622_recursiveGen = _out3864;
              _8623_recOwned = _out3865;
              _8624_recIdents = _out3866;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8622_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3867;
              DCOMPUTF16._IOwnership _out3868;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3867, out _out3868);
              r = _out3867;
              resultingOwnership = _out3868;
              readIdents = _8624_recIdents;
            }
          } else if (_source347.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8625___mcc_h492 = _source347.dtor_Passthrough_a0;
            {
              RAST._IExpr _8626_recursiveGen;
              DCOMPUTF16._IOwnership _8627_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8628_recIdents;
              RAST._IExpr _out3869;
              DCOMPUTF16._IOwnership _out3870;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3871;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3869, out _out3870, out _out3871);
              _8626_recursiveGen = _out3869;
              _8627_recOwned = _out3870;
              _8628_recIdents = _out3871;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8626_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3872;
              DCOMPUTF16._IOwnership _out3873;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3872, out _out3873);
              r = _out3872;
              resultingOwnership = _out3873;
              readIdents = _8628_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8629___mcc_h494 = _source347.dtor_TypeArg_a0;
            {
              RAST._IExpr _8630_recursiveGen;
              DCOMPUTF16._IOwnership _8631_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8632_recIdents;
              RAST._IExpr _out3874;
              DCOMPUTF16._IOwnership _out3875;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3876;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3874, out _out3875, out _out3876);
              _8630_recursiveGen = _out3874;
              _8631_recOwned = _out3875;
              _8632_recIdents = _out3876;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8630_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3877;
              DCOMPUTF16._IOwnership _out3878;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3877, out _out3878);
              r = _out3877;
              resultingOwnership = _out3878;
              readIdents = _8632_recIdents;
            }
          }
        } else if (_source304.is_Set) {
          DAST._IType _8633___mcc_h496 = _source304.dtor_element;
          DAST._IType _source352 = _7662___mcc_h1;
          if (_source352.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8634___mcc_h500 = _source352.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8635___mcc_h501 = _source352.dtor_typeArgs;
            DAST._IResolvedType _8636___mcc_h502 = _source352.dtor_resolved;
            DAST._IResolvedType _source353 = _8636___mcc_h502;
            if (_source353.is_Datatype) {
              DAST._IDatatypeType _8637___mcc_h506 = _source353.dtor_datatypeType;
              {
                RAST._IExpr _8638_recursiveGen;
                DCOMPUTF16._IOwnership _8639_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8640_recIdents;
                RAST._IExpr _out3879;
                DCOMPUTF16._IOwnership _out3880;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3881;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3879, out _out3880, out _out3881);
                _8638_recursiveGen = _out3879;
                _8639_recOwned = _out3880;
                _8640_recIdents = _out3881;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8638_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3882;
                DCOMPUTF16._IOwnership _out3883;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3882, out _out3883);
                r = _out3882;
                resultingOwnership = _out3883;
                readIdents = _8640_recIdents;
              }
            } else if (_source353.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8641___mcc_h508 = _source353.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8642___mcc_h509 = _source353.dtor_attributes;
              {
                RAST._IExpr _8643_recursiveGen;
                DCOMPUTF16._IOwnership _8644_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8645_recIdents;
                RAST._IExpr _out3884;
                DCOMPUTF16._IOwnership _out3885;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3886;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3884, out _out3885, out _out3886);
                _8643_recursiveGen = _out3884;
                _8644_recOwned = _out3885;
                _8645_recIdents = _out3886;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8643_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3887;
                DCOMPUTF16._IOwnership _out3888;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3887, out _out3888);
                r = _out3887;
                resultingOwnership = _out3888;
                readIdents = _8645_recIdents;
              }
            } else {
              DAST._IType _8646___mcc_h512 = _source353.dtor_baseType;
              DAST._INewtypeRange _8647___mcc_h513 = _source353.dtor_range;
              bool _8648___mcc_h514 = _source353.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8649___mcc_h515 = _source353.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8650_attributes = _8649___mcc_h515;
              bool _8651_erase = _8648___mcc_h514;
              DAST._INewtypeRange _8652_range = _8647___mcc_h513;
              DAST._IType _8653_b = _8646___mcc_h512;
              {
                Std.Wrappers._IOption<RAST._IType> _8654_nativeToType;
                _8654_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8653_b, _8652_range);
                if (object.Equals(_7656_fromTpe, _8653_b)) {
                  RAST._IExpr _8655_recursiveGen;
                  DCOMPUTF16._IOwnership _8656_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8657_recIdents;
                  RAST._IExpr _out3889;
                  DCOMPUTF16._IOwnership _out3890;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3891;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3889, out _out3890, out _out3891);
                  _8655_recursiveGen = _out3889;
                  _8656_recOwned = _out3890;
                  _8657_recIdents = _out3891;
                  readIdents = _8657_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source354 = _8654_nativeToType;
                  if (_source354.is_None) {
                    if (_8651_erase) {
                      r = _8655_recursiveGen;
                    } else {
                      RAST._IType _8658_rhsType;
                      RAST._IType _out3892;
                      _out3892 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _8658_rhsType = _out3892;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8658_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8655_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3893;
                    DCOMPUTF16._IOwnership _out3894;
                    DCOMPUTF16.COMP.FromOwnership(r, _8656_recOwned, expectedOwnership, out _out3893, out _out3894);
                    r = _out3893;
                    resultingOwnership = _out3894;
                  } else {
                    RAST._IType _8659___mcc_h1590 = _source354.dtor_value;
                    RAST._IType _8660_v = _8659___mcc_h1590;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8655_recursiveGen, RAST.Expr.create_ExprFromType(_8660_v)));
                    RAST._IExpr _out3895;
                    DCOMPUTF16._IOwnership _out3896;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3895, out _out3896);
                    r = _out3895;
                    resultingOwnership = _out3896;
                  }
                } else {
                  if ((_8654_nativeToType).is_Some) {
                    DAST._IType _source355 = _7656_fromTpe;
                    if (_source355.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8661___mcc_h1591 = _source355.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8662___mcc_h1592 = _source355.dtor_typeArgs;
                      DAST._IResolvedType _8663___mcc_h1593 = _source355.dtor_resolved;
                      DAST._IResolvedType _source356 = _8663___mcc_h1593;
                      if (_source356.is_Datatype) {
                        DAST._IDatatypeType _8664___mcc_h1597 = _source356.dtor_datatypeType;
                      } else if (_source356.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8665___mcc_h1599 = _source356.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8666___mcc_h1600 = _source356.dtor_attributes;
                      } else {
                        DAST._IType _8667___mcc_h1603 = _source356.dtor_baseType;
                        DAST._INewtypeRange _8668___mcc_h1604 = _source356.dtor_range;
                        bool _8669___mcc_h1605 = _source356.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8670___mcc_h1606 = _source356.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8671_attributes0 = _8670___mcc_h1606;
                        bool _8672_erase0 = _8669___mcc_h1605;
                        DAST._INewtypeRange _8673_range0 = _8668___mcc_h1604;
                        DAST._IType _8674_b0 = _8667___mcc_h1603;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8675_nativeFromType;
                          _8675_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8674_b0, _8673_range0);
                          if ((_8675_nativeFromType).is_Some) {
                            RAST._IExpr _8676_recursiveGen;
                            DCOMPUTF16._IOwnership _8677_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8678_recIdents;
                            RAST._IExpr _out3897;
                            DCOMPUTF16._IOwnership _out3898;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3899;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3897, out _out3898, out _out3899);
                            _8676_recursiveGen = _out3897;
                            _8677_recOwned = _out3898;
                            _8678_recIdents = _out3899;
                            RAST._IExpr _out3900;
                            DCOMPUTF16._IOwnership _out3901;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8676_recursiveGen, (_8654_nativeToType).dtor_value), _8677_recOwned, expectedOwnership, out _out3900, out _out3901);
                            r = _out3900;
                            resultingOwnership = _out3901;
                            readIdents = _8678_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source355.is_Nullable) {
                      DAST._IType _8679___mcc_h1611 = _source355.dtor_Nullable_a0;
                    } else if (_source355.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8680___mcc_h1613 = _source355.dtor_Tuple_a0;
                    } else if (_source355.is_Array) {
                      DAST._IType _8681___mcc_h1615 = _source355.dtor_element;
                      BigInteger _8682___mcc_h1616 = _source355.dtor_dims;
                    } else if (_source355.is_Seq) {
                      DAST._IType _8683___mcc_h1619 = _source355.dtor_element;
                    } else if (_source355.is_Set) {
                      DAST._IType _8684___mcc_h1621 = _source355.dtor_element;
                    } else if (_source355.is_Multiset) {
                      DAST._IType _8685___mcc_h1623 = _source355.dtor_element;
                    } else if (_source355.is_Map) {
                      DAST._IType _8686___mcc_h1625 = _source355.dtor_key;
                      DAST._IType _8687___mcc_h1626 = _source355.dtor_value;
                    } else if (_source355.is_SetBuilder) {
                      DAST._IType _8688___mcc_h1629 = _source355.dtor_element;
                    } else if (_source355.is_MapBuilder) {
                      DAST._IType _8689___mcc_h1631 = _source355.dtor_key;
                      DAST._IType _8690___mcc_h1632 = _source355.dtor_value;
                    } else if (_source355.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8691___mcc_h1635 = _source355.dtor_args;
                      DAST._IType _8692___mcc_h1636 = _source355.dtor_result;
                    } else if (_source355.is_Primitive) {
                      DAST._IPrimitive _8693___mcc_h1639 = _source355.dtor_Primitive_a0;
                    } else if (_source355.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8694___mcc_h1641 = _source355.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8695___mcc_h1643 = _source355.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8696_recursiveGen;
                      DCOMPUTF16._IOwnership _8697_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8698_recIdents;
                      RAST._IExpr _out3902;
                      DCOMPUTF16._IOwnership _out3903;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3904;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3902, out _out3903, out _out3904);
                      _8696_recursiveGen = _out3902;
                      _8697_recOwned = _out3903;
                      _8698_recIdents = _out3904;
                      RAST._IExpr _out3905;
                      DCOMPUTF16._IOwnership _out3906;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8696_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8654_nativeToType).dtor_value), _8697_recOwned, expectedOwnership, out _out3905, out _out3906);
                      r = _out3905;
                      resultingOwnership = _out3906;
                      readIdents = _8698_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out3907;
                  DCOMPUTF16._IOwnership _out3908;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3909;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8653_b), _8653_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out3907, out _out3908, out _out3909);
                  r = _out3907;
                  resultingOwnership = _out3908;
                  readIdents = _out3909;
                }
              }
            }
          } else if (_source352.is_Nullable) {
            DAST._IType _8699___mcc_h520 = _source352.dtor_Nullable_a0;
            {
              RAST._IExpr _8700_recursiveGen;
              DCOMPUTF16._IOwnership _8701_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8702_recIdents;
              RAST._IExpr _out3910;
              DCOMPUTF16._IOwnership _out3911;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3912;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3910, out _out3911, out _out3912);
              _8700_recursiveGen = _out3910;
              _8701_recOwned = _out3911;
              _8702_recIdents = _out3912;
              r = _8700_recursiveGen;
              if (object.Equals(_8701_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3913;
              DCOMPUTF16._IOwnership _out3914;
              DCOMPUTF16.COMP.FromOwnership(r, _8701_recOwned, expectedOwnership, out _out3913, out _out3914);
              r = _out3913;
              resultingOwnership = _out3914;
              readIdents = _8702_recIdents;
            }
          } else if (_source352.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8703___mcc_h522 = _source352.dtor_Tuple_a0;
            {
              RAST._IExpr _8704_recursiveGen;
              DCOMPUTF16._IOwnership _8705_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8706_recIdents;
              RAST._IExpr _out3915;
              DCOMPUTF16._IOwnership _out3916;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3917;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3915, out _out3916, out _out3917);
              _8704_recursiveGen = _out3915;
              _8705_recOwned = _out3916;
              _8706_recIdents = _out3917;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8704_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3918;
              DCOMPUTF16._IOwnership _out3919;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3918, out _out3919);
              r = _out3918;
              resultingOwnership = _out3919;
              readIdents = _8706_recIdents;
            }
          } else if (_source352.is_Array) {
            DAST._IType _8707___mcc_h524 = _source352.dtor_element;
            BigInteger _8708___mcc_h525 = _source352.dtor_dims;
            {
              RAST._IExpr _8709_recursiveGen;
              DCOMPUTF16._IOwnership _8710_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8711_recIdents;
              RAST._IExpr _out3920;
              DCOMPUTF16._IOwnership _out3921;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3922;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3920, out _out3921, out _out3922);
              _8709_recursiveGen = _out3920;
              _8710_recOwned = _out3921;
              _8711_recIdents = _out3922;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8709_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3923;
              DCOMPUTF16._IOwnership _out3924;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3923, out _out3924);
              r = _out3923;
              resultingOwnership = _out3924;
              readIdents = _8711_recIdents;
            }
          } else if (_source352.is_Seq) {
            DAST._IType _8712___mcc_h528 = _source352.dtor_element;
            {
              RAST._IExpr _8713_recursiveGen;
              DCOMPUTF16._IOwnership _8714_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8715_recIdents;
              RAST._IExpr _out3925;
              DCOMPUTF16._IOwnership _out3926;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3927;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3925, out _out3926, out _out3927);
              _8713_recursiveGen = _out3925;
              _8714_recOwned = _out3926;
              _8715_recIdents = _out3927;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8713_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3928;
              DCOMPUTF16._IOwnership _out3929;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3928, out _out3929);
              r = _out3928;
              resultingOwnership = _out3929;
              readIdents = _8715_recIdents;
            }
          } else if (_source352.is_Set) {
            DAST._IType _8716___mcc_h530 = _source352.dtor_element;
            {
              RAST._IExpr _8717_recursiveGen;
              DCOMPUTF16._IOwnership _8718_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8719_recIdents;
              RAST._IExpr _out3930;
              DCOMPUTF16._IOwnership _out3931;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3932;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3930, out _out3931, out _out3932);
              _8717_recursiveGen = _out3930;
              _8718_recOwned = _out3931;
              _8719_recIdents = _out3932;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8717_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3933;
              DCOMPUTF16._IOwnership _out3934;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3933, out _out3934);
              r = _out3933;
              resultingOwnership = _out3934;
              readIdents = _8719_recIdents;
            }
          } else if (_source352.is_Multiset) {
            DAST._IType _8720___mcc_h532 = _source352.dtor_element;
            {
              RAST._IExpr _8721_recursiveGen;
              DCOMPUTF16._IOwnership _8722_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8723_recIdents;
              RAST._IExpr _out3935;
              DCOMPUTF16._IOwnership _out3936;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3937;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3935, out _out3936, out _out3937);
              _8721_recursiveGen = _out3935;
              _8722_recOwned = _out3936;
              _8723_recIdents = _out3937;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8721_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3938;
              DCOMPUTF16._IOwnership _out3939;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3938, out _out3939);
              r = _out3938;
              resultingOwnership = _out3939;
              readIdents = _8723_recIdents;
            }
          } else if (_source352.is_Map) {
            DAST._IType _8724___mcc_h534 = _source352.dtor_key;
            DAST._IType _8725___mcc_h535 = _source352.dtor_value;
            {
              RAST._IExpr _8726_recursiveGen;
              DCOMPUTF16._IOwnership _8727_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8728_recIdents;
              RAST._IExpr _out3940;
              DCOMPUTF16._IOwnership _out3941;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3942;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3940, out _out3941, out _out3942);
              _8726_recursiveGen = _out3940;
              _8727_recOwned = _out3941;
              _8728_recIdents = _out3942;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8726_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3943;
              DCOMPUTF16._IOwnership _out3944;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3943, out _out3944);
              r = _out3943;
              resultingOwnership = _out3944;
              readIdents = _8728_recIdents;
            }
          } else if (_source352.is_SetBuilder) {
            DAST._IType _8729___mcc_h538 = _source352.dtor_element;
            {
              RAST._IExpr _8730_recursiveGen;
              DCOMPUTF16._IOwnership _8731_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8732_recIdents;
              RAST._IExpr _out3945;
              DCOMPUTF16._IOwnership _out3946;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3947;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3945, out _out3946, out _out3947);
              _8730_recursiveGen = _out3945;
              _8731_recOwned = _out3946;
              _8732_recIdents = _out3947;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8730_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3948;
              DCOMPUTF16._IOwnership _out3949;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3948, out _out3949);
              r = _out3948;
              resultingOwnership = _out3949;
              readIdents = _8732_recIdents;
            }
          } else if (_source352.is_MapBuilder) {
            DAST._IType _8733___mcc_h540 = _source352.dtor_key;
            DAST._IType _8734___mcc_h541 = _source352.dtor_value;
            {
              RAST._IExpr _8735_recursiveGen;
              DCOMPUTF16._IOwnership _8736_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8737_recIdents;
              RAST._IExpr _out3950;
              DCOMPUTF16._IOwnership _out3951;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3952;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3950, out _out3951, out _out3952);
              _8735_recursiveGen = _out3950;
              _8736_recOwned = _out3951;
              _8737_recIdents = _out3952;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8735_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3953;
              DCOMPUTF16._IOwnership _out3954;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3953, out _out3954);
              r = _out3953;
              resultingOwnership = _out3954;
              readIdents = _8737_recIdents;
            }
          } else if (_source352.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8738___mcc_h544 = _source352.dtor_args;
            DAST._IType _8739___mcc_h545 = _source352.dtor_result;
            {
              RAST._IExpr _8740_recursiveGen;
              DCOMPUTF16._IOwnership _8741_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8742_recIdents;
              RAST._IExpr _out3955;
              DCOMPUTF16._IOwnership _out3956;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3957;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3955, out _out3956, out _out3957);
              _8740_recursiveGen = _out3955;
              _8741_recOwned = _out3956;
              _8742_recIdents = _out3957;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8740_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3958;
              DCOMPUTF16._IOwnership _out3959;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3958, out _out3959);
              r = _out3958;
              resultingOwnership = _out3959;
              readIdents = _8742_recIdents;
            }
          } else if (_source352.is_Primitive) {
            DAST._IPrimitive _8743___mcc_h548 = _source352.dtor_Primitive_a0;
            {
              RAST._IExpr _8744_recursiveGen;
              DCOMPUTF16._IOwnership _8745_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8746_recIdents;
              RAST._IExpr _out3960;
              DCOMPUTF16._IOwnership _out3961;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3962;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3960, out _out3961, out _out3962);
              _8744_recursiveGen = _out3960;
              _8745_recOwned = _out3961;
              _8746_recIdents = _out3962;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8744_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3963;
              DCOMPUTF16._IOwnership _out3964;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3963, out _out3964);
              r = _out3963;
              resultingOwnership = _out3964;
              readIdents = _8746_recIdents;
            }
          } else if (_source352.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8747___mcc_h550 = _source352.dtor_Passthrough_a0;
            {
              RAST._IExpr _8748_recursiveGen;
              DCOMPUTF16._IOwnership _8749_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8750_recIdents;
              RAST._IExpr _out3965;
              DCOMPUTF16._IOwnership _out3966;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3967;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3965, out _out3966, out _out3967);
              _8748_recursiveGen = _out3965;
              _8749_recOwned = _out3966;
              _8750_recIdents = _out3967;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8748_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3968;
              DCOMPUTF16._IOwnership _out3969;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3968, out _out3969);
              r = _out3968;
              resultingOwnership = _out3969;
              readIdents = _8750_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8751___mcc_h552 = _source352.dtor_TypeArg_a0;
            {
              RAST._IExpr _8752_recursiveGen;
              DCOMPUTF16._IOwnership _8753_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8754_recIdents;
              RAST._IExpr _out3970;
              DCOMPUTF16._IOwnership _out3971;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3972;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3970, out _out3971, out _out3972);
              _8752_recursiveGen = _out3970;
              _8753_recOwned = _out3971;
              _8754_recIdents = _out3972;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8752_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3973;
              DCOMPUTF16._IOwnership _out3974;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3973, out _out3974);
              r = _out3973;
              resultingOwnership = _out3974;
              readIdents = _8754_recIdents;
            }
          }
        } else if (_source304.is_Multiset) {
          DAST._IType _8755___mcc_h554 = _source304.dtor_element;
          DAST._IType _source357 = _7662___mcc_h1;
          if (_source357.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8756___mcc_h558 = _source357.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8757___mcc_h559 = _source357.dtor_typeArgs;
            DAST._IResolvedType _8758___mcc_h560 = _source357.dtor_resolved;
            DAST._IResolvedType _source358 = _8758___mcc_h560;
            if (_source358.is_Datatype) {
              DAST._IDatatypeType _8759___mcc_h564 = _source358.dtor_datatypeType;
              {
                RAST._IExpr _8760_recursiveGen;
                DCOMPUTF16._IOwnership _8761_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8762_recIdents;
                RAST._IExpr _out3975;
                DCOMPUTF16._IOwnership _out3976;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3977;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3975, out _out3976, out _out3977);
                _8760_recursiveGen = _out3975;
                _8761_recOwned = _out3976;
                _8762_recIdents = _out3977;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8760_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3978;
                DCOMPUTF16._IOwnership _out3979;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3978, out _out3979);
                r = _out3978;
                resultingOwnership = _out3979;
                readIdents = _8762_recIdents;
              }
            } else if (_source358.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8763___mcc_h566 = _source358.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8764___mcc_h567 = _source358.dtor_attributes;
              {
                RAST._IExpr _8765_recursiveGen;
                DCOMPUTF16._IOwnership _8766_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8767_recIdents;
                RAST._IExpr _out3980;
                DCOMPUTF16._IOwnership _out3981;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3982;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3980, out _out3981, out _out3982);
                _8765_recursiveGen = _out3980;
                _8766_recOwned = _out3981;
                _8767_recIdents = _out3982;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8765_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3983;
                DCOMPUTF16._IOwnership _out3984;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3983, out _out3984);
                r = _out3983;
                resultingOwnership = _out3984;
                readIdents = _8767_recIdents;
              }
            } else {
              DAST._IType _8768___mcc_h570 = _source358.dtor_baseType;
              DAST._INewtypeRange _8769___mcc_h571 = _source358.dtor_range;
              bool _8770___mcc_h572 = _source358.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8771___mcc_h573 = _source358.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8772_attributes = _8771___mcc_h573;
              bool _8773_erase = _8770___mcc_h572;
              DAST._INewtypeRange _8774_range = _8769___mcc_h571;
              DAST._IType _8775_b = _8768___mcc_h570;
              {
                Std.Wrappers._IOption<RAST._IType> _8776_nativeToType;
                _8776_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8775_b, _8774_range);
                if (object.Equals(_7656_fromTpe, _8775_b)) {
                  RAST._IExpr _8777_recursiveGen;
                  DCOMPUTF16._IOwnership _8778_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8779_recIdents;
                  RAST._IExpr _out3985;
                  DCOMPUTF16._IOwnership _out3986;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3987;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3985, out _out3986, out _out3987);
                  _8777_recursiveGen = _out3985;
                  _8778_recOwned = _out3986;
                  _8779_recIdents = _out3987;
                  readIdents = _8779_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source359 = _8776_nativeToType;
                  if (_source359.is_None) {
                    if (_8773_erase) {
                      r = _8777_recursiveGen;
                    } else {
                      RAST._IType _8780_rhsType;
                      RAST._IType _out3988;
                      _out3988 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _8780_rhsType = _out3988;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8780_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8777_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3989;
                    DCOMPUTF16._IOwnership _out3990;
                    DCOMPUTF16.COMP.FromOwnership(r, _8778_recOwned, expectedOwnership, out _out3989, out _out3990);
                    r = _out3989;
                    resultingOwnership = _out3990;
                  } else {
                    RAST._IType _8781___mcc_h1645 = _source359.dtor_value;
                    RAST._IType _8782_v = _8781___mcc_h1645;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8777_recursiveGen, RAST.Expr.create_ExprFromType(_8782_v)));
                    RAST._IExpr _out3991;
                    DCOMPUTF16._IOwnership _out3992;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3991, out _out3992);
                    r = _out3991;
                    resultingOwnership = _out3992;
                  }
                } else {
                  if ((_8776_nativeToType).is_Some) {
                    DAST._IType _source360 = _7656_fromTpe;
                    if (_source360.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8783___mcc_h1646 = _source360.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8784___mcc_h1647 = _source360.dtor_typeArgs;
                      DAST._IResolvedType _8785___mcc_h1648 = _source360.dtor_resolved;
                      DAST._IResolvedType _source361 = _8785___mcc_h1648;
                      if (_source361.is_Datatype) {
                        DAST._IDatatypeType _8786___mcc_h1652 = _source361.dtor_datatypeType;
                      } else if (_source361.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8787___mcc_h1654 = _source361.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8788___mcc_h1655 = _source361.dtor_attributes;
                      } else {
                        DAST._IType _8789___mcc_h1658 = _source361.dtor_baseType;
                        DAST._INewtypeRange _8790___mcc_h1659 = _source361.dtor_range;
                        bool _8791___mcc_h1660 = _source361.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8792___mcc_h1661 = _source361.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8793_attributes0 = _8792___mcc_h1661;
                        bool _8794_erase0 = _8791___mcc_h1660;
                        DAST._INewtypeRange _8795_range0 = _8790___mcc_h1659;
                        DAST._IType _8796_b0 = _8789___mcc_h1658;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8797_nativeFromType;
                          _8797_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8796_b0, _8795_range0);
                          if ((_8797_nativeFromType).is_Some) {
                            RAST._IExpr _8798_recursiveGen;
                            DCOMPUTF16._IOwnership _8799_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8800_recIdents;
                            RAST._IExpr _out3993;
                            DCOMPUTF16._IOwnership _out3994;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3995;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3993, out _out3994, out _out3995);
                            _8798_recursiveGen = _out3993;
                            _8799_recOwned = _out3994;
                            _8800_recIdents = _out3995;
                            RAST._IExpr _out3996;
                            DCOMPUTF16._IOwnership _out3997;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8798_recursiveGen, (_8776_nativeToType).dtor_value), _8799_recOwned, expectedOwnership, out _out3996, out _out3997);
                            r = _out3996;
                            resultingOwnership = _out3997;
                            readIdents = _8800_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source360.is_Nullable) {
                      DAST._IType _8801___mcc_h1666 = _source360.dtor_Nullable_a0;
                    } else if (_source360.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8802___mcc_h1668 = _source360.dtor_Tuple_a0;
                    } else if (_source360.is_Array) {
                      DAST._IType _8803___mcc_h1670 = _source360.dtor_element;
                      BigInteger _8804___mcc_h1671 = _source360.dtor_dims;
                    } else if (_source360.is_Seq) {
                      DAST._IType _8805___mcc_h1674 = _source360.dtor_element;
                    } else if (_source360.is_Set) {
                      DAST._IType _8806___mcc_h1676 = _source360.dtor_element;
                    } else if (_source360.is_Multiset) {
                      DAST._IType _8807___mcc_h1678 = _source360.dtor_element;
                    } else if (_source360.is_Map) {
                      DAST._IType _8808___mcc_h1680 = _source360.dtor_key;
                      DAST._IType _8809___mcc_h1681 = _source360.dtor_value;
                    } else if (_source360.is_SetBuilder) {
                      DAST._IType _8810___mcc_h1684 = _source360.dtor_element;
                    } else if (_source360.is_MapBuilder) {
                      DAST._IType _8811___mcc_h1686 = _source360.dtor_key;
                      DAST._IType _8812___mcc_h1687 = _source360.dtor_value;
                    } else if (_source360.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8813___mcc_h1690 = _source360.dtor_args;
                      DAST._IType _8814___mcc_h1691 = _source360.dtor_result;
                    } else if (_source360.is_Primitive) {
                      DAST._IPrimitive _8815___mcc_h1694 = _source360.dtor_Primitive_a0;
                    } else if (_source360.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8816___mcc_h1696 = _source360.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8817___mcc_h1698 = _source360.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8818_recursiveGen;
                      DCOMPUTF16._IOwnership _8819_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8820_recIdents;
                      RAST._IExpr _out3998;
                      DCOMPUTF16._IOwnership _out3999;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4000;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out3998, out _out3999, out _out4000);
                      _8818_recursiveGen = _out3998;
                      _8819_recOwned = _out3999;
                      _8820_recIdents = _out4000;
                      RAST._IExpr _out4001;
                      DCOMPUTF16._IOwnership _out4002;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8818_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8776_nativeToType).dtor_value), _8819_recOwned, expectedOwnership, out _out4001, out _out4002);
                      r = _out4001;
                      resultingOwnership = _out4002;
                      readIdents = _8820_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4003;
                  DCOMPUTF16._IOwnership _out4004;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4005;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8775_b), _8775_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4003, out _out4004, out _out4005);
                  r = _out4003;
                  resultingOwnership = _out4004;
                  readIdents = _out4005;
                }
              }
            }
          } else if (_source357.is_Nullable) {
            DAST._IType _8821___mcc_h578 = _source357.dtor_Nullable_a0;
            {
              RAST._IExpr _8822_recursiveGen;
              DCOMPUTF16._IOwnership _8823_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8824_recIdents;
              RAST._IExpr _out4006;
              DCOMPUTF16._IOwnership _out4007;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4008;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4006, out _out4007, out _out4008);
              _8822_recursiveGen = _out4006;
              _8823_recOwned = _out4007;
              _8824_recIdents = _out4008;
              r = _8822_recursiveGen;
              if (object.Equals(_8823_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4009;
              DCOMPUTF16._IOwnership _out4010;
              DCOMPUTF16.COMP.FromOwnership(r, _8823_recOwned, expectedOwnership, out _out4009, out _out4010);
              r = _out4009;
              resultingOwnership = _out4010;
              readIdents = _8824_recIdents;
            }
          } else if (_source357.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8825___mcc_h580 = _source357.dtor_Tuple_a0;
            {
              RAST._IExpr _8826_recursiveGen;
              DCOMPUTF16._IOwnership _8827_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8828_recIdents;
              RAST._IExpr _out4011;
              DCOMPUTF16._IOwnership _out4012;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4013;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4011, out _out4012, out _out4013);
              _8826_recursiveGen = _out4011;
              _8827_recOwned = _out4012;
              _8828_recIdents = _out4013;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8826_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4014;
              DCOMPUTF16._IOwnership _out4015;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4014, out _out4015);
              r = _out4014;
              resultingOwnership = _out4015;
              readIdents = _8828_recIdents;
            }
          } else if (_source357.is_Array) {
            DAST._IType _8829___mcc_h582 = _source357.dtor_element;
            BigInteger _8830___mcc_h583 = _source357.dtor_dims;
            {
              RAST._IExpr _8831_recursiveGen;
              DCOMPUTF16._IOwnership _8832_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8833_recIdents;
              RAST._IExpr _out4016;
              DCOMPUTF16._IOwnership _out4017;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4018;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4016, out _out4017, out _out4018);
              _8831_recursiveGen = _out4016;
              _8832_recOwned = _out4017;
              _8833_recIdents = _out4018;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8831_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4019;
              DCOMPUTF16._IOwnership _out4020;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4019, out _out4020);
              r = _out4019;
              resultingOwnership = _out4020;
              readIdents = _8833_recIdents;
            }
          } else if (_source357.is_Seq) {
            DAST._IType _8834___mcc_h586 = _source357.dtor_element;
            {
              RAST._IExpr _8835_recursiveGen;
              DCOMPUTF16._IOwnership _8836_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8837_recIdents;
              RAST._IExpr _out4021;
              DCOMPUTF16._IOwnership _out4022;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4023;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4021, out _out4022, out _out4023);
              _8835_recursiveGen = _out4021;
              _8836_recOwned = _out4022;
              _8837_recIdents = _out4023;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8835_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4024;
              DCOMPUTF16._IOwnership _out4025;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4024, out _out4025);
              r = _out4024;
              resultingOwnership = _out4025;
              readIdents = _8837_recIdents;
            }
          } else if (_source357.is_Set) {
            DAST._IType _8838___mcc_h588 = _source357.dtor_element;
            {
              RAST._IExpr _8839_recursiveGen;
              DCOMPUTF16._IOwnership _8840_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8841_recIdents;
              RAST._IExpr _out4026;
              DCOMPUTF16._IOwnership _out4027;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4028;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4026, out _out4027, out _out4028);
              _8839_recursiveGen = _out4026;
              _8840_recOwned = _out4027;
              _8841_recIdents = _out4028;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8839_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4029;
              DCOMPUTF16._IOwnership _out4030;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4029, out _out4030);
              r = _out4029;
              resultingOwnership = _out4030;
              readIdents = _8841_recIdents;
            }
          } else if (_source357.is_Multiset) {
            DAST._IType _8842___mcc_h590 = _source357.dtor_element;
            {
              RAST._IExpr _8843_recursiveGen;
              DCOMPUTF16._IOwnership _8844_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8845_recIdents;
              RAST._IExpr _out4031;
              DCOMPUTF16._IOwnership _out4032;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4033;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4031, out _out4032, out _out4033);
              _8843_recursiveGen = _out4031;
              _8844_recOwned = _out4032;
              _8845_recIdents = _out4033;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8843_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4034;
              DCOMPUTF16._IOwnership _out4035;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4034, out _out4035);
              r = _out4034;
              resultingOwnership = _out4035;
              readIdents = _8845_recIdents;
            }
          } else if (_source357.is_Map) {
            DAST._IType _8846___mcc_h592 = _source357.dtor_key;
            DAST._IType _8847___mcc_h593 = _source357.dtor_value;
            {
              RAST._IExpr _8848_recursiveGen;
              DCOMPUTF16._IOwnership _8849_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8850_recIdents;
              RAST._IExpr _out4036;
              DCOMPUTF16._IOwnership _out4037;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4038;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4036, out _out4037, out _out4038);
              _8848_recursiveGen = _out4036;
              _8849_recOwned = _out4037;
              _8850_recIdents = _out4038;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8848_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4039;
              DCOMPUTF16._IOwnership _out4040;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4039, out _out4040);
              r = _out4039;
              resultingOwnership = _out4040;
              readIdents = _8850_recIdents;
            }
          } else if (_source357.is_SetBuilder) {
            DAST._IType _8851___mcc_h596 = _source357.dtor_element;
            {
              RAST._IExpr _8852_recursiveGen;
              DCOMPUTF16._IOwnership _8853_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8854_recIdents;
              RAST._IExpr _out4041;
              DCOMPUTF16._IOwnership _out4042;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4043;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4041, out _out4042, out _out4043);
              _8852_recursiveGen = _out4041;
              _8853_recOwned = _out4042;
              _8854_recIdents = _out4043;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8852_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4044;
              DCOMPUTF16._IOwnership _out4045;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4044, out _out4045);
              r = _out4044;
              resultingOwnership = _out4045;
              readIdents = _8854_recIdents;
            }
          } else if (_source357.is_MapBuilder) {
            DAST._IType _8855___mcc_h598 = _source357.dtor_key;
            DAST._IType _8856___mcc_h599 = _source357.dtor_value;
            {
              RAST._IExpr _8857_recursiveGen;
              DCOMPUTF16._IOwnership _8858_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8859_recIdents;
              RAST._IExpr _out4046;
              DCOMPUTF16._IOwnership _out4047;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4048;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4046, out _out4047, out _out4048);
              _8857_recursiveGen = _out4046;
              _8858_recOwned = _out4047;
              _8859_recIdents = _out4048;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8857_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4049;
              DCOMPUTF16._IOwnership _out4050;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4049, out _out4050);
              r = _out4049;
              resultingOwnership = _out4050;
              readIdents = _8859_recIdents;
            }
          } else if (_source357.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8860___mcc_h602 = _source357.dtor_args;
            DAST._IType _8861___mcc_h603 = _source357.dtor_result;
            {
              RAST._IExpr _8862_recursiveGen;
              DCOMPUTF16._IOwnership _8863_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8864_recIdents;
              RAST._IExpr _out4051;
              DCOMPUTF16._IOwnership _out4052;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4053;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4051, out _out4052, out _out4053);
              _8862_recursiveGen = _out4051;
              _8863_recOwned = _out4052;
              _8864_recIdents = _out4053;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8862_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4054;
              DCOMPUTF16._IOwnership _out4055;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4054, out _out4055);
              r = _out4054;
              resultingOwnership = _out4055;
              readIdents = _8864_recIdents;
            }
          } else if (_source357.is_Primitive) {
            DAST._IPrimitive _8865___mcc_h606 = _source357.dtor_Primitive_a0;
            {
              RAST._IExpr _8866_recursiveGen;
              DCOMPUTF16._IOwnership _8867_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8868_recIdents;
              RAST._IExpr _out4056;
              DCOMPUTF16._IOwnership _out4057;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4058;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4056, out _out4057, out _out4058);
              _8866_recursiveGen = _out4056;
              _8867_recOwned = _out4057;
              _8868_recIdents = _out4058;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8866_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4059;
              DCOMPUTF16._IOwnership _out4060;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4059, out _out4060);
              r = _out4059;
              resultingOwnership = _out4060;
              readIdents = _8868_recIdents;
            }
          } else if (_source357.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8869___mcc_h608 = _source357.dtor_Passthrough_a0;
            {
              RAST._IExpr _8870_recursiveGen;
              DCOMPUTF16._IOwnership _8871_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8872_recIdents;
              RAST._IExpr _out4061;
              DCOMPUTF16._IOwnership _out4062;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4063;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4061, out _out4062, out _out4063);
              _8870_recursiveGen = _out4061;
              _8871_recOwned = _out4062;
              _8872_recIdents = _out4063;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8870_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4064;
              DCOMPUTF16._IOwnership _out4065;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4064, out _out4065);
              r = _out4064;
              resultingOwnership = _out4065;
              readIdents = _8872_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8873___mcc_h610 = _source357.dtor_TypeArg_a0;
            {
              RAST._IExpr _8874_recursiveGen;
              DCOMPUTF16._IOwnership _8875_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8876_recIdents;
              RAST._IExpr _out4066;
              DCOMPUTF16._IOwnership _out4067;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4068;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4066, out _out4067, out _out4068);
              _8874_recursiveGen = _out4066;
              _8875_recOwned = _out4067;
              _8876_recIdents = _out4068;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8874_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4069;
              DCOMPUTF16._IOwnership _out4070;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4069, out _out4070);
              r = _out4069;
              resultingOwnership = _out4070;
              readIdents = _8876_recIdents;
            }
          }
        } else if (_source304.is_Map) {
          DAST._IType _8877___mcc_h612 = _source304.dtor_key;
          DAST._IType _8878___mcc_h613 = _source304.dtor_value;
          DAST._IType _source362 = _7662___mcc_h1;
          if (_source362.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8879___mcc_h620 = _source362.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8880___mcc_h621 = _source362.dtor_typeArgs;
            DAST._IResolvedType _8881___mcc_h622 = _source362.dtor_resolved;
            DAST._IResolvedType _source363 = _8881___mcc_h622;
            if (_source363.is_Datatype) {
              DAST._IDatatypeType _8882___mcc_h626 = _source363.dtor_datatypeType;
              {
                RAST._IExpr _8883_recursiveGen;
                DCOMPUTF16._IOwnership _8884_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8885_recIdents;
                RAST._IExpr _out4071;
                DCOMPUTF16._IOwnership _out4072;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4073;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4071, out _out4072, out _out4073);
                _8883_recursiveGen = _out4071;
                _8884_recOwned = _out4072;
                _8885_recIdents = _out4073;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8883_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4074;
                DCOMPUTF16._IOwnership _out4075;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4074, out _out4075);
                r = _out4074;
                resultingOwnership = _out4075;
                readIdents = _8885_recIdents;
              }
            } else if (_source363.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8886___mcc_h628 = _source363.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8887___mcc_h629 = _source363.dtor_attributes;
              {
                RAST._IExpr _8888_recursiveGen;
                DCOMPUTF16._IOwnership _8889_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8890_recIdents;
                RAST._IExpr _out4076;
                DCOMPUTF16._IOwnership _out4077;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4078;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4076, out _out4077, out _out4078);
                _8888_recursiveGen = _out4076;
                _8889_recOwned = _out4077;
                _8890_recIdents = _out4078;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8888_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4079;
                DCOMPUTF16._IOwnership _out4080;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4079, out _out4080);
                r = _out4079;
                resultingOwnership = _out4080;
                readIdents = _8890_recIdents;
              }
            } else {
              DAST._IType _8891___mcc_h632 = _source363.dtor_baseType;
              DAST._INewtypeRange _8892___mcc_h633 = _source363.dtor_range;
              bool _8893___mcc_h634 = _source363.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8894___mcc_h635 = _source363.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8895_attributes = _8894___mcc_h635;
              bool _8896_erase = _8893___mcc_h634;
              DAST._INewtypeRange _8897_range = _8892___mcc_h633;
              DAST._IType _8898_b = _8891___mcc_h632;
              {
                Std.Wrappers._IOption<RAST._IType> _8899_nativeToType;
                _8899_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_8898_b, _8897_range);
                if (object.Equals(_7656_fromTpe, _8898_b)) {
                  RAST._IExpr _8900_recursiveGen;
                  DCOMPUTF16._IOwnership _8901_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8902_recIdents;
                  RAST._IExpr _out4081;
                  DCOMPUTF16._IOwnership _out4082;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4083;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4081, out _out4082, out _out4083);
                  _8900_recursiveGen = _out4081;
                  _8901_recOwned = _out4082;
                  _8902_recIdents = _out4083;
                  readIdents = _8902_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source364 = _8899_nativeToType;
                  if (_source364.is_None) {
                    if (_8896_erase) {
                      r = _8900_recursiveGen;
                    } else {
                      RAST._IType _8903_rhsType;
                      RAST._IType _out4084;
                      _out4084 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _8903_rhsType = _out4084;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8903_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8900_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4085;
                    DCOMPUTF16._IOwnership _out4086;
                    DCOMPUTF16.COMP.FromOwnership(r, _8901_recOwned, expectedOwnership, out _out4085, out _out4086);
                    r = _out4085;
                    resultingOwnership = _out4086;
                  } else {
                    RAST._IType _8904___mcc_h1700 = _source364.dtor_value;
                    RAST._IType _8905_v = _8904___mcc_h1700;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8900_recursiveGen, RAST.Expr.create_ExprFromType(_8905_v)));
                    RAST._IExpr _out4087;
                    DCOMPUTF16._IOwnership _out4088;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4087, out _out4088);
                    r = _out4087;
                    resultingOwnership = _out4088;
                  }
                } else {
                  if ((_8899_nativeToType).is_Some) {
                    DAST._IType _source365 = _7656_fromTpe;
                    if (_source365.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8906___mcc_h1701 = _source365.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _8907___mcc_h1702 = _source365.dtor_typeArgs;
                      DAST._IResolvedType _8908___mcc_h1703 = _source365.dtor_resolved;
                      DAST._IResolvedType _source366 = _8908___mcc_h1703;
                      if (_source366.is_Datatype) {
                        DAST._IDatatypeType _8909___mcc_h1707 = _source366.dtor_datatypeType;
                      } else if (_source366.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8910___mcc_h1709 = _source366.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _8911___mcc_h1710 = _source366.dtor_attributes;
                      } else {
                        DAST._IType _8912___mcc_h1713 = _source366.dtor_baseType;
                        DAST._INewtypeRange _8913___mcc_h1714 = _source366.dtor_range;
                        bool _8914___mcc_h1715 = _source366.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _8915___mcc_h1716 = _source366.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _8916_attributes0 = _8915___mcc_h1716;
                        bool _8917_erase0 = _8914___mcc_h1715;
                        DAST._INewtypeRange _8918_range0 = _8913___mcc_h1714;
                        DAST._IType _8919_b0 = _8912___mcc_h1713;
                        {
                          Std.Wrappers._IOption<RAST._IType> _8920_nativeFromType;
                          _8920_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_8919_b0, _8918_range0);
                          if ((_8920_nativeFromType).is_Some) {
                            RAST._IExpr _8921_recursiveGen;
                            DCOMPUTF16._IOwnership _8922_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8923_recIdents;
                            RAST._IExpr _out4089;
                            DCOMPUTF16._IOwnership _out4090;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4091;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4089, out _out4090, out _out4091);
                            _8921_recursiveGen = _out4089;
                            _8922_recOwned = _out4090;
                            _8923_recIdents = _out4091;
                            RAST._IExpr _out4092;
                            DCOMPUTF16._IOwnership _out4093;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_8921_recursiveGen, (_8899_nativeToType).dtor_value), _8922_recOwned, expectedOwnership, out _out4092, out _out4093);
                            r = _out4092;
                            resultingOwnership = _out4093;
                            readIdents = _8923_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source365.is_Nullable) {
                      DAST._IType _8924___mcc_h1721 = _source365.dtor_Nullable_a0;
                    } else if (_source365.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _8925___mcc_h1723 = _source365.dtor_Tuple_a0;
                    } else if (_source365.is_Array) {
                      DAST._IType _8926___mcc_h1725 = _source365.dtor_element;
                      BigInteger _8927___mcc_h1726 = _source365.dtor_dims;
                    } else if (_source365.is_Seq) {
                      DAST._IType _8928___mcc_h1729 = _source365.dtor_element;
                    } else if (_source365.is_Set) {
                      DAST._IType _8929___mcc_h1731 = _source365.dtor_element;
                    } else if (_source365.is_Multiset) {
                      DAST._IType _8930___mcc_h1733 = _source365.dtor_element;
                    } else if (_source365.is_Map) {
                      DAST._IType _8931___mcc_h1735 = _source365.dtor_key;
                      DAST._IType _8932___mcc_h1736 = _source365.dtor_value;
                    } else if (_source365.is_SetBuilder) {
                      DAST._IType _8933___mcc_h1739 = _source365.dtor_element;
                    } else if (_source365.is_MapBuilder) {
                      DAST._IType _8934___mcc_h1741 = _source365.dtor_key;
                      DAST._IType _8935___mcc_h1742 = _source365.dtor_value;
                    } else if (_source365.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _8936___mcc_h1745 = _source365.dtor_args;
                      DAST._IType _8937___mcc_h1746 = _source365.dtor_result;
                    } else if (_source365.is_Primitive) {
                      DAST._IPrimitive _8938___mcc_h1749 = _source365.dtor_Primitive_a0;
                    } else if (_source365.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _8939___mcc_h1751 = _source365.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _8940___mcc_h1753 = _source365.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _8941_recursiveGen;
                      DCOMPUTF16._IOwnership _8942_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8943_recIdents;
                      RAST._IExpr _out4094;
                      DCOMPUTF16._IOwnership _out4095;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4096;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4094, out _out4095, out _out4096);
                      _8941_recursiveGen = _out4094;
                      _8942_recOwned = _out4095;
                      _8943_recIdents = _out4096;
                      RAST._IExpr _out4097;
                      DCOMPUTF16._IOwnership _out4098;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_8941_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_8899_nativeToType).dtor_value), _8942_recOwned, expectedOwnership, out _out4097, out _out4098);
                      r = _out4097;
                      resultingOwnership = _out4098;
                      readIdents = _8943_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4099;
                  DCOMPUTF16._IOwnership _out4100;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4101;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _8898_b), _8898_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4099, out _out4100, out _out4101);
                  r = _out4099;
                  resultingOwnership = _out4100;
                  readIdents = _out4101;
                }
              }
            }
          } else if (_source362.is_Nullable) {
            DAST._IType _8944___mcc_h640 = _source362.dtor_Nullable_a0;
            {
              RAST._IExpr _8945_recursiveGen;
              DCOMPUTF16._IOwnership _8946_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8947_recIdents;
              RAST._IExpr _out4102;
              DCOMPUTF16._IOwnership _out4103;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4104;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4102, out _out4103, out _out4104);
              _8945_recursiveGen = _out4102;
              _8946_recOwned = _out4103;
              _8947_recIdents = _out4104;
              r = _8945_recursiveGen;
              if (object.Equals(_8946_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4105;
              DCOMPUTF16._IOwnership _out4106;
              DCOMPUTF16.COMP.FromOwnership(r, _8946_recOwned, expectedOwnership, out _out4105, out _out4106);
              r = _out4105;
              resultingOwnership = _out4106;
              readIdents = _8947_recIdents;
            }
          } else if (_source362.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8948___mcc_h642 = _source362.dtor_Tuple_a0;
            {
              RAST._IExpr _8949_recursiveGen;
              DCOMPUTF16._IOwnership _8950_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8951_recIdents;
              RAST._IExpr _out4107;
              DCOMPUTF16._IOwnership _out4108;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4109;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4107, out _out4108, out _out4109);
              _8949_recursiveGen = _out4107;
              _8950_recOwned = _out4108;
              _8951_recIdents = _out4109;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8949_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4110;
              DCOMPUTF16._IOwnership _out4111;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4110, out _out4111);
              r = _out4110;
              resultingOwnership = _out4111;
              readIdents = _8951_recIdents;
            }
          } else if (_source362.is_Array) {
            DAST._IType _8952___mcc_h644 = _source362.dtor_element;
            BigInteger _8953___mcc_h645 = _source362.dtor_dims;
            {
              RAST._IExpr _8954_recursiveGen;
              DCOMPUTF16._IOwnership _8955_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8956_recIdents;
              RAST._IExpr _out4112;
              DCOMPUTF16._IOwnership _out4113;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4114;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4112, out _out4113, out _out4114);
              _8954_recursiveGen = _out4112;
              _8955_recOwned = _out4113;
              _8956_recIdents = _out4114;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8954_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4115;
              DCOMPUTF16._IOwnership _out4116;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4115, out _out4116);
              r = _out4115;
              resultingOwnership = _out4116;
              readIdents = _8956_recIdents;
            }
          } else if (_source362.is_Seq) {
            DAST._IType _8957___mcc_h648 = _source362.dtor_element;
            {
              RAST._IExpr _8958_recursiveGen;
              DCOMPUTF16._IOwnership _8959_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8960_recIdents;
              RAST._IExpr _out4117;
              DCOMPUTF16._IOwnership _out4118;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4119;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4117, out _out4118, out _out4119);
              _8958_recursiveGen = _out4117;
              _8959_recOwned = _out4118;
              _8960_recIdents = _out4119;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8958_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4120;
              DCOMPUTF16._IOwnership _out4121;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4120, out _out4121);
              r = _out4120;
              resultingOwnership = _out4121;
              readIdents = _8960_recIdents;
            }
          } else if (_source362.is_Set) {
            DAST._IType _8961___mcc_h650 = _source362.dtor_element;
            {
              RAST._IExpr _8962_recursiveGen;
              DCOMPUTF16._IOwnership _8963_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8964_recIdents;
              RAST._IExpr _out4122;
              DCOMPUTF16._IOwnership _out4123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4124;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4122, out _out4123, out _out4124);
              _8962_recursiveGen = _out4122;
              _8963_recOwned = _out4123;
              _8964_recIdents = _out4124;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8962_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4125;
              DCOMPUTF16._IOwnership _out4126;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4125, out _out4126);
              r = _out4125;
              resultingOwnership = _out4126;
              readIdents = _8964_recIdents;
            }
          } else if (_source362.is_Multiset) {
            DAST._IType _8965___mcc_h652 = _source362.dtor_element;
            {
              RAST._IExpr _8966_recursiveGen;
              DCOMPUTF16._IOwnership _8967_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8968_recIdents;
              RAST._IExpr _out4127;
              DCOMPUTF16._IOwnership _out4128;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4129;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4127, out _out4128, out _out4129);
              _8966_recursiveGen = _out4127;
              _8967_recOwned = _out4128;
              _8968_recIdents = _out4129;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8966_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4130;
              DCOMPUTF16._IOwnership _out4131;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4130, out _out4131);
              r = _out4130;
              resultingOwnership = _out4131;
              readIdents = _8968_recIdents;
            }
          } else if (_source362.is_Map) {
            DAST._IType _8969___mcc_h654 = _source362.dtor_key;
            DAST._IType _8970___mcc_h655 = _source362.dtor_value;
            {
              RAST._IExpr _8971_recursiveGen;
              DCOMPUTF16._IOwnership _8972_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8973_recIdents;
              RAST._IExpr _out4132;
              DCOMPUTF16._IOwnership _out4133;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4134;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4132, out _out4133, out _out4134);
              _8971_recursiveGen = _out4132;
              _8972_recOwned = _out4133;
              _8973_recIdents = _out4134;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8971_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4135;
              DCOMPUTF16._IOwnership _out4136;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4135, out _out4136);
              r = _out4135;
              resultingOwnership = _out4136;
              readIdents = _8973_recIdents;
            }
          } else if (_source362.is_SetBuilder) {
            DAST._IType _8974___mcc_h658 = _source362.dtor_element;
            {
              RAST._IExpr _8975_recursiveGen;
              DCOMPUTF16._IOwnership _8976_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8977_recIdents;
              RAST._IExpr _out4137;
              DCOMPUTF16._IOwnership _out4138;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4139;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4137, out _out4138, out _out4139);
              _8975_recursiveGen = _out4137;
              _8976_recOwned = _out4138;
              _8977_recIdents = _out4139;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8975_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4140;
              DCOMPUTF16._IOwnership _out4141;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4140, out _out4141);
              r = _out4140;
              resultingOwnership = _out4141;
              readIdents = _8977_recIdents;
            }
          } else if (_source362.is_MapBuilder) {
            DAST._IType _8978___mcc_h660 = _source362.dtor_key;
            DAST._IType _8979___mcc_h661 = _source362.dtor_value;
            {
              RAST._IExpr _8980_recursiveGen;
              DCOMPUTF16._IOwnership _8981_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8982_recIdents;
              RAST._IExpr _out4142;
              DCOMPUTF16._IOwnership _out4143;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4144;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4142, out _out4143, out _out4144);
              _8980_recursiveGen = _out4142;
              _8981_recOwned = _out4143;
              _8982_recIdents = _out4144;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8980_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4145;
              DCOMPUTF16._IOwnership _out4146;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4145, out _out4146);
              r = _out4145;
              resultingOwnership = _out4146;
              readIdents = _8982_recIdents;
            }
          } else if (_source362.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8983___mcc_h664 = _source362.dtor_args;
            DAST._IType _8984___mcc_h665 = _source362.dtor_result;
            {
              RAST._IExpr _8985_recursiveGen;
              DCOMPUTF16._IOwnership _8986_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8987_recIdents;
              RAST._IExpr _out4147;
              DCOMPUTF16._IOwnership _out4148;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4149;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4147, out _out4148, out _out4149);
              _8985_recursiveGen = _out4147;
              _8986_recOwned = _out4148;
              _8987_recIdents = _out4149;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8985_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4150;
              DCOMPUTF16._IOwnership _out4151;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4150, out _out4151);
              r = _out4150;
              resultingOwnership = _out4151;
              readIdents = _8987_recIdents;
            }
          } else if (_source362.is_Primitive) {
            DAST._IPrimitive _8988___mcc_h668 = _source362.dtor_Primitive_a0;
            {
              RAST._IExpr _8989_recursiveGen;
              DCOMPUTF16._IOwnership _8990_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8991_recIdents;
              RAST._IExpr _out4152;
              DCOMPUTF16._IOwnership _out4153;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4154;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4152, out _out4153, out _out4154);
              _8989_recursiveGen = _out4152;
              _8990_recOwned = _out4153;
              _8991_recIdents = _out4154;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8989_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4155;
              DCOMPUTF16._IOwnership _out4156;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4155, out _out4156);
              r = _out4155;
              resultingOwnership = _out4156;
              readIdents = _8991_recIdents;
            }
          } else if (_source362.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8992___mcc_h670 = _source362.dtor_Passthrough_a0;
            {
              RAST._IExpr _8993_recursiveGen;
              DCOMPUTF16._IOwnership _8994_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8995_recIdents;
              RAST._IExpr _out4157;
              DCOMPUTF16._IOwnership _out4158;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4159;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4157, out _out4158, out _out4159);
              _8993_recursiveGen = _out4157;
              _8994_recOwned = _out4158;
              _8995_recIdents = _out4159;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8993_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4160;
              DCOMPUTF16._IOwnership _out4161;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4160, out _out4161);
              r = _out4160;
              resultingOwnership = _out4161;
              readIdents = _8995_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8996___mcc_h672 = _source362.dtor_TypeArg_a0;
            {
              RAST._IExpr _8997_recursiveGen;
              DCOMPUTF16._IOwnership _8998_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8999_recIdents;
              RAST._IExpr _out4162;
              DCOMPUTF16._IOwnership _out4163;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4164;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4162, out _out4163, out _out4164);
              _8997_recursiveGen = _out4162;
              _8998_recOwned = _out4163;
              _8999_recIdents = _out4164;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8997_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4165;
              DCOMPUTF16._IOwnership _out4166;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4165, out _out4166);
              r = _out4165;
              resultingOwnership = _out4166;
              readIdents = _8999_recIdents;
            }
          }
        } else if (_source304.is_SetBuilder) {
          DAST._IType _9000___mcc_h674 = _source304.dtor_element;
          DAST._IType _source367 = _7662___mcc_h1;
          if (_source367.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9001___mcc_h678 = _source367.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _9002___mcc_h679 = _source367.dtor_typeArgs;
            DAST._IResolvedType _9003___mcc_h680 = _source367.dtor_resolved;
            DAST._IResolvedType _source368 = _9003___mcc_h680;
            if (_source368.is_Datatype) {
              DAST._IDatatypeType _9004___mcc_h684 = _source368.dtor_datatypeType;
              {
                RAST._IExpr _9005_recursiveGen;
                DCOMPUTF16._IOwnership _9006_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9007_recIdents;
                RAST._IExpr _out4167;
                DCOMPUTF16._IOwnership _out4168;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4169;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4167, out _out4168, out _out4169);
                _9005_recursiveGen = _out4167;
                _9006_recOwned = _out4168;
                _9007_recIdents = _out4169;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9005_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4170;
                DCOMPUTF16._IOwnership _out4171;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4170, out _out4171);
                r = _out4170;
                resultingOwnership = _out4171;
                readIdents = _9007_recIdents;
              }
            } else if (_source368.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9008___mcc_h686 = _source368.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _9009___mcc_h687 = _source368.dtor_attributes;
              {
                RAST._IExpr _9010_recursiveGen;
                DCOMPUTF16._IOwnership _9011_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9012_recIdents;
                RAST._IExpr _out4172;
                DCOMPUTF16._IOwnership _out4173;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4174;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4172, out _out4173, out _out4174);
                _9010_recursiveGen = _out4172;
                _9011_recOwned = _out4173;
                _9012_recIdents = _out4174;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9010_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4175;
                DCOMPUTF16._IOwnership _out4176;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4175, out _out4176);
                r = _out4175;
                resultingOwnership = _out4176;
                readIdents = _9012_recIdents;
              }
            } else {
              DAST._IType _9013___mcc_h690 = _source368.dtor_baseType;
              DAST._INewtypeRange _9014___mcc_h691 = _source368.dtor_range;
              bool _9015___mcc_h692 = _source368.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _9016___mcc_h693 = _source368.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _9017_attributes = _9016___mcc_h693;
              bool _9018_erase = _9015___mcc_h692;
              DAST._INewtypeRange _9019_range = _9014___mcc_h691;
              DAST._IType _9020_b = _9013___mcc_h690;
              {
                Std.Wrappers._IOption<RAST._IType> _9021_nativeToType;
                _9021_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9020_b, _9019_range);
                if (object.Equals(_7656_fromTpe, _9020_b)) {
                  RAST._IExpr _9022_recursiveGen;
                  DCOMPUTF16._IOwnership _9023_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9024_recIdents;
                  RAST._IExpr _out4177;
                  DCOMPUTF16._IOwnership _out4178;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4179;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4177, out _out4178, out _out4179);
                  _9022_recursiveGen = _out4177;
                  _9023_recOwned = _out4178;
                  _9024_recIdents = _out4179;
                  readIdents = _9024_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source369 = _9021_nativeToType;
                  if (_source369.is_None) {
                    if (_9018_erase) {
                      r = _9022_recursiveGen;
                    } else {
                      RAST._IType _9025_rhsType;
                      RAST._IType _out4180;
                      _out4180 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _9025_rhsType = _out4180;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9025_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9022_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4181;
                    DCOMPUTF16._IOwnership _out4182;
                    DCOMPUTF16.COMP.FromOwnership(r, _9023_recOwned, expectedOwnership, out _out4181, out _out4182);
                    r = _out4181;
                    resultingOwnership = _out4182;
                  } else {
                    RAST._IType _9026___mcc_h1755 = _source369.dtor_value;
                    RAST._IType _9027_v = _9026___mcc_h1755;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_9022_recursiveGen, RAST.Expr.create_ExprFromType(_9027_v)));
                    RAST._IExpr _out4183;
                    DCOMPUTF16._IOwnership _out4184;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4183, out _out4184);
                    r = _out4183;
                    resultingOwnership = _out4184;
                  }
                } else {
                  if ((_9021_nativeToType).is_Some) {
                    DAST._IType _source370 = _7656_fromTpe;
                    if (_source370.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9028___mcc_h1756 = _source370.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _9029___mcc_h1757 = _source370.dtor_typeArgs;
                      DAST._IResolvedType _9030___mcc_h1758 = _source370.dtor_resolved;
                      DAST._IResolvedType _source371 = _9030___mcc_h1758;
                      if (_source371.is_Datatype) {
                        DAST._IDatatypeType _9031___mcc_h1762 = _source371.dtor_datatypeType;
                      } else if (_source371.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9032___mcc_h1764 = _source371.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _9033___mcc_h1765 = _source371.dtor_attributes;
                      } else {
                        DAST._IType _9034___mcc_h1768 = _source371.dtor_baseType;
                        DAST._INewtypeRange _9035___mcc_h1769 = _source371.dtor_range;
                        bool _9036___mcc_h1770 = _source371.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _9037___mcc_h1771 = _source371.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _9038_attributes0 = _9037___mcc_h1771;
                        bool _9039_erase0 = _9036___mcc_h1770;
                        DAST._INewtypeRange _9040_range0 = _9035___mcc_h1769;
                        DAST._IType _9041_b0 = _9034___mcc_h1768;
                        {
                          Std.Wrappers._IOption<RAST._IType> _9042_nativeFromType;
                          _9042_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9041_b0, _9040_range0);
                          if ((_9042_nativeFromType).is_Some) {
                            RAST._IExpr _9043_recursiveGen;
                            DCOMPUTF16._IOwnership _9044_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9045_recIdents;
                            RAST._IExpr _out4185;
                            DCOMPUTF16._IOwnership _out4186;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4187;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4185, out _out4186, out _out4187);
                            _9043_recursiveGen = _out4185;
                            _9044_recOwned = _out4186;
                            _9045_recIdents = _out4187;
                            RAST._IExpr _out4188;
                            DCOMPUTF16._IOwnership _out4189;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9043_recursiveGen, (_9021_nativeToType).dtor_value), _9044_recOwned, expectedOwnership, out _out4188, out _out4189);
                            r = _out4188;
                            resultingOwnership = _out4189;
                            readIdents = _9045_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source370.is_Nullable) {
                      DAST._IType _9046___mcc_h1776 = _source370.dtor_Nullable_a0;
                    } else if (_source370.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _9047___mcc_h1778 = _source370.dtor_Tuple_a0;
                    } else if (_source370.is_Array) {
                      DAST._IType _9048___mcc_h1780 = _source370.dtor_element;
                      BigInteger _9049___mcc_h1781 = _source370.dtor_dims;
                    } else if (_source370.is_Seq) {
                      DAST._IType _9050___mcc_h1784 = _source370.dtor_element;
                    } else if (_source370.is_Set) {
                      DAST._IType _9051___mcc_h1786 = _source370.dtor_element;
                    } else if (_source370.is_Multiset) {
                      DAST._IType _9052___mcc_h1788 = _source370.dtor_element;
                    } else if (_source370.is_Map) {
                      DAST._IType _9053___mcc_h1790 = _source370.dtor_key;
                      DAST._IType _9054___mcc_h1791 = _source370.dtor_value;
                    } else if (_source370.is_SetBuilder) {
                      DAST._IType _9055___mcc_h1794 = _source370.dtor_element;
                    } else if (_source370.is_MapBuilder) {
                      DAST._IType _9056___mcc_h1796 = _source370.dtor_key;
                      DAST._IType _9057___mcc_h1797 = _source370.dtor_value;
                    } else if (_source370.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _9058___mcc_h1800 = _source370.dtor_args;
                      DAST._IType _9059___mcc_h1801 = _source370.dtor_result;
                    } else if (_source370.is_Primitive) {
                      DAST._IPrimitive _9060___mcc_h1804 = _source370.dtor_Primitive_a0;
                    } else if (_source370.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _9061___mcc_h1806 = _source370.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _9062___mcc_h1808 = _source370.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _9063_recursiveGen;
                      DCOMPUTF16._IOwnership _9064_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9065_recIdents;
                      RAST._IExpr _out4190;
                      DCOMPUTF16._IOwnership _out4191;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4192;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4190, out _out4191, out _out4192);
                      _9063_recursiveGen = _out4190;
                      _9064_recOwned = _out4191;
                      _9065_recIdents = _out4192;
                      RAST._IExpr _out4193;
                      DCOMPUTF16._IOwnership _out4194;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9063_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9021_nativeToType).dtor_value), _9064_recOwned, expectedOwnership, out _out4193, out _out4194);
                      r = _out4193;
                      resultingOwnership = _out4194;
                      readIdents = _9065_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4195;
                  DCOMPUTF16._IOwnership _out4196;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4197;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _9020_b), _9020_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4195, out _out4196, out _out4197);
                  r = _out4195;
                  resultingOwnership = _out4196;
                  readIdents = _out4197;
                }
              }
            }
          } else if (_source367.is_Nullable) {
            DAST._IType _9066___mcc_h698 = _source367.dtor_Nullable_a0;
            {
              RAST._IExpr _9067_recursiveGen;
              DCOMPUTF16._IOwnership _9068_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9069_recIdents;
              RAST._IExpr _out4198;
              DCOMPUTF16._IOwnership _out4199;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4200;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4198, out _out4199, out _out4200);
              _9067_recursiveGen = _out4198;
              _9068_recOwned = _out4199;
              _9069_recIdents = _out4200;
              r = _9067_recursiveGen;
              if (object.Equals(_9068_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4201;
              DCOMPUTF16._IOwnership _out4202;
              DCOMPUTF16.COMP.FromOwnership(r, _9068_recOwned, expectedOwnership, out _out4201, out _out4202);
              r = _out4201;
              resultingOwnership = _out4202;
              readIdents = _9069_recIdents;
            }
          } else if (_source367.is_Tuple) {
            Dafny.ISequence<DAST._IType> _9070___mcc_h700 = _source367.dtor_Tuple_a0;
            {
              RAST._IExpr _9071_recursiveGen;
              DCOMPUTF16._IOwnership _9072_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9073_recIdents;
              RAST._IExpr _out4203;
              DCOMPUTF16._IOwnership _out4204;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4205;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4203, out _out4204, out _out4205);
              _9071_recursiveGen = _out4203;
              _9072_recOwned = _out4204;
              _9073_recIdents = _out4205;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9071_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4206;
              DCOMPUTF16._IOwnership _out4207;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4206, out _out4207);
              r = _out4206;
              resultingOwnership = _out4207;
              readIdents = _9073_recIdents;
            }
          } else if (_source367.is_Array) {
            DAST._IType _9074___mcc_h702 = _source367.dtor_element;
            BigInteger _9075___mcc_h703 = _source367.dtor_dims;
            {
              RAST._IExpr _9076_recursiveGen;
              DCOMPUTF16._IOwnership _9077_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9078_recIdents;
              RAST._IExpr _out4208;
              DCOMPUTF16._IOwnership _out4209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4210;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4208, out _out4209, out _out4210);
              _9076_recursiveGen = _out4208;
              _9077_recOwned = _out4209;
              _9078_recIdents = _out4210;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9076_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4211;
              DCOMPUTF16._IOwnership _out4212;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4211, out _out4212);
              r = _out4211;
              resultingOwnership = _out4212;
              readIdents = _9078_recIdents;
            }
          } else if (_source367.is_Seq) {
            DAST._IType _9079___mcc_h706 = _source367.dtor_element;
            {
              RAST._IExpr _9080_recursiveGen;
              DCOMPUTF16._IOwnership _9081_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9082_recIdents;
              RAST._IExpr _out4213;
              DCOMPUTF16._IOwnership _out4214;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4215;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4213, out _out4214, out _out4215);
              _9080_recursiveGen = _out4213;
              _9081_recOwned = _out4214;
              _9082_recIdents = _out4215;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9080_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4216;
              DCOMPUTF16._IOwnership _out4217;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4216, out _out4217);
              r = _out4216;
              resultingOwnership = _out4217;
              readIdents = _9082_recIdents;
            }
          } else if (_source367.is_Set) {
            DAST._IType _9083___mcc_h708 = _source367.dtor_element;
            {
              RAST._IExpr _9084_recursiveGen;
              DCOMPUTF16._IOwnership _9085_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9086_recIdents;
              RAST._IExpr _out4218;
              DCOMPUTF16._IOwnership _out4219;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4220;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4218, out _out4219, out _out4220);
              _9084_recursiveGen = _out4218;
              _9085_recOwned = _out4219;
              _9086_recIdents = _out4220;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9084_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4221;
              DCOMPUTF16._IOwnership _out4222;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4221, out _out4222);
              r = _out4221;
              resultingOwnership = _out4222;
              readIdents = _9086_recIdents;
            }
          } else if (_source367.is_Multiset) {
            DAST._IType _9087___mcc_h710 = _source367.dtor_element;
            {
              RAST._IExpr _9088_recursiveGen;
              DCOMPUTF16._IOwnership _9089_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9090_recIdents;
              RAST._IExpr _out4223;
              DCOMPUTF16._IOwnership _out4224;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4225;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4223, out _out4224, out _out4225);
              _9088_recursiveGen = _out4223;
              _9089_recOwned = _out4224;
              _9090_recIdents = _out4225;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9088_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4226;
              DCOMPUTF16._IOwnership _out4227;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4226, out _out4227);
              r = _out4226;
              resultingOwnership = _out4227;
              readIdents = _9090_recIdents;
            }
          } else if (_source367.is_Map) {
            DAST._IType _9091___mcc_h712 = _source367.dtor_key;
            DAST._IType _9092___mcc_h713 = _source367.dtor_value;
            {
              RAST._IExpr _9093_recursiveGen;
              DCOMPUTF16._IOwnership _9094_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9095_recIdents;
              RAST._IExpr _out4228;
              DCOMPUTF16._IOwnership _out4229;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4230;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4228, out _out4229, out _out4230);
              _9093_recursiveGen = _out4228;
              _9094_recOwned = _out4229;
              _9095_recIdents = _out4230;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9093_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4231;
              DCOMPUTF16._IOwnership _out4232;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4231, out _out4232);
              r = _out4231;
              resultingOwnership = _out4232;
              readIdents = _9095_recIdents;
            }
          } else if (_source367.is_SetBuilder) {
            DAST._IType _9096___mcc_h716 = _source367.dtor_element;
            {
              RAST._IExpr _9097_recursiveGen;
              DCOMPUTF16._IOwnership _9098_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9099_recIdents;
              RAST._IExpr _out4233;
              DCOMPUTF16._IOwnership _out4234;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4235;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4233, out _out4234, out _out4235);
              _9097_recursiveGen = _out4233;
              _9098_recOwned = _out4234;
              _9099_recIdents = _out4235;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9097_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4236;
              DCOMPUTF16._IOwnership _out4237;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4236, out _out4237);
              r = _out4236;
              resultingOwnership = _out4237;
              readIdents = _9099_recIdents;
            }
          } else if (_source367.is_MapBuilder) {
            DAST._IType _9100___mcc_h718 = _source367.dtor_key;
            DAST._IType _9101___mcc_h719 = _source367.dtor_value;
            {
              RAST._IExpr _9102_recursiveGen;
              DCOMPUTF16._IOwnership _9103_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9104_recIdents;
              RAST._IExpr _out4238;
              DCOMPUTF16._IOwnership _out4239;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4240;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4238, out _out4239, out _out4240);
              _9102_recursiveGen = _out4238;
              _9103_recOwned = _out4239;
              _9104_recIdents = _out4240;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9102_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4241;
              DCOMPUTF16._IOwnership _out4242;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4241, out _out4242);
              r = _out4241;
              resultingOwnership = _out4242;
              readIdents = _9104_recIdents;
            }
          } else if (_source367.is_Arrow) {
            Dafny.ISequence<DAST._IType> _9105___mcc_h722 = _source367.dtor_args;
            DAST._IType _9106___mcc_h723 = _source367.dtor_result;
            {
              RAST._IExpr _9107_recursiveGen;
              DCOMPUTF16._IOwnership _9108_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9109_recIdents;
              RAST._IExpr _out4243;
              DCOMPUTF16._IOwnership _out4244;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4245;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4243, out _out4244, out _out4245);
              _9107_recursiveGen = _out4243;
              _9108_recOwned = _out4244;
              _9109_recIdents = _out4245;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9107_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4246;
              DCOMPUTF16._IOwnership _out4247;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4246, out _out4247);
              r = _out4246;
              resultingOwnership = _out4247;
              readIdents = _9109_recIdents;
            }
          } else if (_source367.is_Primitive) {
            DAST._IPrimitive _9110___mcc_h726 = _source367.dtor_Primitive_a0;
            {
              RAST._IExpr _9111_recursiveGen;
              DCOMPUTF16._IOwnership _9112_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9113_recIdents;
              RAST._IExpr _out4248;
              DCOMPUTF16._IOwnership _out4249;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4250;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4248, out _out4249, out _out4250);
              _9111_recursiveGen = _out4248;
              _9112_recOwned = _out4249;
              _9113_recIdents = _out4250;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9111_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4251;
              DCOMPUTF16._IOwnership _out4252;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4251, out _out4252);
              r = _out4251;
              resultingOwnership = _out4252;
              readIdents = _9113_recIdents;
            }
          } else if (_source367.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _9114___mcc_h728 = _source367.dtor_Passthrough_a0;
            {
              RAST._IExpr _9115_recursiveGen;
              DCOMPUTF16._IOwnership _9116_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9117_recIdents;
              RAST._IExpr _out4253;
              DCOMPUTF16._IOwnership _out4254;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4255;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4253, out _out4254, out _out4255);
              _9115_recursiveGen = _out4253;
              _9116_recOwned = _out4254;
              _9117_recIdents = _out4255;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9115_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4256;
              DCOMPUTF16._IOwnership _out4257;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4256, out _out4257);
              r = _out4256;
              resultingOwnership = _out4257;
              readIdents = _9117_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _9118___mcc_h730 = _source367.dtor_TypeArg_a0;
            {
              RAST._IExpr _9119_recursiveGen;
              DCOMPUTF16._IOwnership _9120_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9121_recIdents;
              RAST._IExpr _out4258;
              DCOMPUTF16._IOwnership _out4259;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4260;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4258, out _out4259, out _out4260);
              _9119_recursiveGen = _out4258;
              _9120_recOwned = _out4259;
              _9121_recIdents = _out4260;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9119_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4261;
              DCOMPUTF16._IOwnership _out4262;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4261, out _out4262);
              r = _out4261;
              resultingOwnership = _out4262;
              readIdents = _9121_recIdents;
            }
          }
        } else if (_source304.is_MapBuilder) {
          DAST._IType _9122___mcc_h732 = _source304.dtor_key;
          DAST._IType _9123___mcc_h733 = _source304.dtor_value;
          DAST._IType _source372 = _7662___mcc_h1;
          if (_source372.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9124___mcc_h740 = _source372.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _9125___mcc_h741 = _source372.dtor_typeArgs;
            DAST._IResolvedType _9126___mcc_h742 = _source372.dtor_resolved;
            DAST._IResolvedType _source373 = _9126___mcc_h742;
            if (_source373.is_Datatype) {
              DAST._IDatatypeType _9127___mcc_h746 = _source373.dtor_datatypeType;
              {
                RAST._IExpr _9128_recursiveGen;
                DCOMPUTF16._IOwnership _9129_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9130_recIdents;
                RAST._IExpr _out4263;
                DCOMPUTF16._IOwnership _out4264;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4265;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4263, out _out4264, out _out4265);
                _9128_recursiveGen = _out4263;
                _9129_recOwned = _out4264;
                _9130_recIdents = _out4265;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9128_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4266;
                DCOMPUTF16._IOwnership _out4267;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4266, out _out4267);
                r = _out4266;
                resultingOwnership = _out4267;
                readIdents = _9130_recIdents;
              }
            } else if (_source373.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9131___mcc_h748 = _source373.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _9132___mcc_h749 = _source373.dtor_attributes;
              {
                RAST._IExpr _9133_recursiveGen;
                DCOMPUTF16._IOwnership _9134_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9135_recIdents;
                RAST._IExpr _out4268;
                DCOMPUTF16._IOwnership _out4269;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4270;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4268, out _out4269, out _out4270);
                _9133_recursiveGen = _out4268;
                _9134_recOwned = _out4269;
                _9135_recIdents = _out4270;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9133_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4271;
                DCOMPUTF16._IOwnership _out4272;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4271, out _out4272);
                r = _out4271;
                resultingOwnership = _out4272;
                readIdents = _9135_recIdents;
              }
            } else {
              DAST._IType _9136___mcc_h752 = _source373.dtor_baseType;
              DAST._INewtypeRange _9137___mcc_h753 = _source373.dtor_range;
              bool _9138___mcc_h754 = _source373.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _9139___mcc_h755 = _source373.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _9140_attributes = _9139___mcc_h755;
              bool _9141_erase = _9138___mcc_h754;
              DAST._INewtypeRange _9142_range = _9137___mcc_h753;
              DAST._IType _9143_b = _9136___mcc_h752;
              {
                Std.Wrappers._IOption<RAST._IType> _9144_nativeToType;
                _9144_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9143_b, _9142_range);
                if (object.Equals(_7656_fromTpe, _9143_b)) {
                  RAST._IExpr _9145_recursiveGen;
                  DCOMPUTF16._IOwnership _9146_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9147_recIdents;
                  RAST._IExpr _out4273;
                  DCOMPUTF16._IOwnership _out4274;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4275;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4273, out _out4274, out _out4275);
                  _9145_recursiveGen = _out4273;
                  _9146_recOwned = _out4274;
                  _9147_recIdents = _out4275;
                  readIdents = _9147_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source374 = _9144_nativeToType;
                  if (_source374.is_None) {
                    if (_9141_erase) {
                      r = _9145_recursiveGen;
                    } else {
                      RAST._IType _9148_rhsType;
                      RAST._IType _out4276;
                      _out4276 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _9148_rhsType = _out4276;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9148_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9145_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4277;
                    DCOMPUTF16._IOwnership _out4278;
                    DCOMPUTF16.COMP.FromOwnership(r, _9146_recOwned, expectedOwnership, out _out4277, out _out4278);
                    r = _out4277;
                    resultingOwnership = _out4278;
                  } else {
                    RAST._IType _9149___mcc_h1810 = _source374.dtor_value;
                    RAST._IType _9150_v = _9149___mcc_h1810;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_9145_recursiveGen, RAST.Expr.create_ExprFromType(_9150_v)));
                    RAST._IExpr _out4279;
                    DCOMPUTF16._IOwnership _out4280;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4279, out _out4280);
                    r = _out4279;
                    resultingOwnership = _out4280;
                  }
                } else {
                  if ((_9144_nativeToType).is_Some) {
                    DAST._IType _source375 = _7656_fromTpe;
                    if (_source375.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9151___mcc_h1811 = _source375.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _9152___mcc_h1812 = _source375.dtor_typeArgs;
                      DAST._IResolvedType _9153___mcc_h1813 = _source375.dtor_resolved;
                      DAST._IResolvedType _source376 = _9153___mcc_h1813;
                      if (_source376.is_Datatype) {
                        DAST._IDatatypeType _9154___mcc_h1817 = _source376.dtor_datatypeType;
                      } else if (_source376.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9155___mcc_h1819 = _source376.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _9156___mcc_h1820 = _source376.dtor_attributes;
                      } else {
                        DAST._IType _9157___mcc_h1823 = _source376.dtor_baseType;
                        DAST._INewtypeRange _9158___mcc_h1824 = _source376.dtor_range;
                        bool _9159___mcc_h1825 = _source376.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _9160___mcc_h1826 = _source376.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _9161_attributes0 = _9160___mcc_h1826;
                        bool _9162_erase0 = _9159___mcc_h1825;
                        DAST._INewtypeRange _9163_range0 = _9158___mcc_h1824;
                        DAST._IType _9164_b0 = _9157___mcc_h1823;
                        {
                          Std.Wrappers._IOption<RAST._IType> _9165_nativeFromType;
                          _9165_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9164_b0, _9163_range0);
                          if ((_9165_nativeFromType).is_Some) {
                            RAST._IExpr _9166_recursiveGen;
                            DCOMPUTF16._IOwnership _9167_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9168_recIdents;
                            RAST._IExpr _out4281;
                            DCOMPUTF16._IOwnership _out4282;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4283;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4281, out _out4282, out _out4283);
                            _9166_recursiveGen = _out4281;
                            _9167_recOwned = _out4282;
                            _9168_recIdents = _out4283;
                            RAST._IExpr _out4284;
                            DCOMPUTF16._IOwnership _out4285;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9166_recursiveGen, (_9144_nativeToType).dtor_value), _9167_recOwned, expectedOwnership, out _out4284, out _out4285);
                            r = _out4284;
                            resultingOwnership = _out4285;
                            readIdents = _9168_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source375.is_Nullable) {
                      DAST._IType _9169___mcc_h1831 = _source375.dtor_Nullable_a0;
                    } else if (_source375.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _9170___mcc_h1833 = _source375.dtor_Tuple_a0;
                    } else if (_source375.is_Array) {
                      DAST._IType _9171___mcc_h1835 = _source375.dtor_element;
                      BigInteger _9172___mcc_h1836 = _source375.dtor_dims;
                    } else if (_source375.is_Seq) {
                      DAST._IType _9173___mcc_h1839 = _source375.dtor_element;
                    } else if (_source375.is_Set) {
                      DAST._IType _9174___mcc_h1841 = _source375.dtor_element;
                    } else if (_source375.is_Multiset) {
                      DAST._IType _9175___mcc_h1843 = _source375.dtor_element;
                    } else if (_source375.is_Map) {
                      DAST._IType _9176___mcc_h1845 = _source375.dtor_key;
                      DAST._IType _9177___mcc_h1846 = _source375.dtor_value;
                    } else if (_source375.is_SetBuilder) {
                      DAST._IType _9178___mcc_h1849 = _source375.dtor_element;
                    } else if (_source375.is_MapBuilder) {
                      DAST._IType _9179___mcc_h1851 = _source375.dtor_key;
                      DAST._IType _9180___mcc_h1852 = _source375.dtor_value;
                    } else if (_source375.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _9181___mcc_h1855 = _source375.dtor_args;
                      DAST._IType _9182___mcc_h1856 = _source375.dtor_result;
                    } else if (_source375.is_Primitive) {
                      DAST._IPrimitive _9183___mcc_h1859 = _source375.dtor_Primitive_a0;
                    } else if (_source375.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _9184___mcc_h1861 = _source375.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _9185___mcc_h1863 = _source375.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _9186_recursiveGen;
                      DCOMPUTF16._IOwnership _9187_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9188_recIdents;
                      RAST._IExpr _out4286;
                      DCOMPUTF16._IOwnership _out4287;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4288;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4286, out _out4287, out _out4288);
                      _9186_recursiveGen = _out4286;
                      _9187_recOwned = _out4287;
                      _9188_recIdents = _out4288;
                      RAST._IExpr _out4289;
                      DCOMPUTF16._IOwnership _out4290;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9186_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9144_nativeToType).dtor_value), _9187_recOwned, expectedOwnership, out _out4289, out _out4290);
                      r = _out4289;
                      resultingOwnership = _out4290;
                      readIdents = _9188_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4291;
                  DCOMPUTF16._IOwnership _out4292;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4293;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _9143_b), _9143_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4291, out _out4292, out _out4293);
                  r = _out4291;
                  resultingOwnership = _out4292;
                  readIdents = _out4293;
                }
              }
            }
          } else if (_source372.is_Nullable) {
            DAST._IType _9189___mcc_h760 = _source372.dtor_Nullable_a0;
            {
              RAST._IExpr _9190_recursiveGen;
              DCOMPUTF16._IOwnership _9191_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9192_recIdents;
              RAST._IExpr _out4294;
              DCOMPUTF16._IOwnership _out4295;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4296;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4294, out _out4295, out _out4296);
              _9190_recursiveGen = _out4294;
              _9191_recOwned = _out4295;
              _9192_recIdents = _out4296;
              r = _9190_recursiveGen;
              if (object.Equals(_9191_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4297;
              DCOMPUTF16._IOwnership _out4298;
              DCOMPUTF16.COMP.FromOwnership(r, _9191_recOwned, expectedOwnership, out _out4297, out _out4298);
              r = _out4297;
              resultingOwnership = _out4298;
              readIdents = _9192_recIdents;
            }
          } else if (_source372.is_Tuple) {
            Dafny.ISequence<DAST._IType> _9193___mcc_h762 = _source372.dtor_Tuple_a0;
            {
              RAST._IExpr _9194_recursiveGen;
              DCOMPUTF16._IOwnership _9195_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9196_recIdents;
              RAST._IExpr _out4299;
              DCOMPUTF16._IOwnership _out4300;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4301;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4299, out _out4300, out _out4301);
              _9194_recursiveGen = _out4299;
              _9195_recOwned = _out4300;
              _9196_recIdents = _out4301;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9194_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4302;
              DCOMPUTF16._IOwnership _out4303;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4302, out _out4303);
              r = _out4302;
              resultingOwnership = _out4303;
              readIdents = _9196_recIdents;
            }
          } else if (_source372.is_Array) {
            DAST._IType _9197___mcc_h764 = _source372.dtor_element;
            BigInteger _9198___mcc_h765 = _source372.dtor_dims;
            {
              RAST._IExpr _9199_recursiveGen;
              DCOMPUTF16._IOwnership _9200_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9201_recIdents;
              RAST._IExpr _out4304;
              DCOMPUTF16._IOwnership _out4305;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4306;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4304, out _out4305, out _out4306);
              _9199_recursiveGen = _out4304;
              _9200_recOwned = _out4305;
              _9201_recIdents = _out4306;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9199_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4307;
              DCOMPUTF16._IOwnership _out4308;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4307, out _out4308);
              r = _out4307;
              resultingOwnership = _out4308;
              readIdents = _9201_recIdents;
            }
          } else if (_source372.is_Seq) {
            DAST._IType _9202___mcc_h768 = _source372.dtor_element;
            {
              RAST._IExpr _9203_recursiveGen;
              DCOMPUTF16._IOwnership _9204_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9205_recIdents;
              RAST._IExpr _out4309;
              DCOMPUTF16._IOwnership _out4310;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4311;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4309, out _out4310, out _out4311);
              _9203_recursiveGen = _out4309;
              _9204_recOwned = _out4310;
              _9205_recIdents = _out4311;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9203_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4312;
              DCOMPUTF16._IOwnership _out4313;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4312, out _out4313);
              r = _out4312;
              resultingOwnership = _out4313;
              readIdents = _9205_recIdents;
            }
          } else if (_source372.is_Set) {
            DAST._IType _9206___mcc_h770 = _source372.dtor_element;
            {
              RAST._IExpr _9207_recursiveGen;
              DCOMPUTF16._IOwnership _9208_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9209_recIdents;
              RAST._IExpr _out4314;
              DCOMPUTF16._IOwnership _out4315;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4316;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4314, out _out4315, out _out4316);
              _9207_recursiveGen = _out4314;
              _9208_recOwned = _out4315;
              _9209_recIdents = _out4316;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9207_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4317;
              DCOMPUTF16._IOwnership _out4318;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4317, out _out4318);
              r = _out4317;
              resultingOwnership = _out4318;
              readIdents = _9209_recIdents;
            }
          } else if (_source372.is_Multiset) {
            DAST._IType _9210___mcc_h772 = _source372.dtor_element;
            {
              RAST._IExpr _9211_recursiveGen;
              DCOMPUTF16._IOwnership _9212_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9213_recIdents;
              RAST._IExpr _out4319;
              DCOMPUTF16._IOwnership _out4320;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4321;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4319, out _out4320, out _out4321);
              _9211_recursiveGen = _out4319;
              _9212_recOwned = _out4320;
              _9213_recIdents = _out4321;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9211_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4322;
              DCOMPUTF16._IOwnership _out4323;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4322, out _out4323);
              r = _out4322;
              resultingOwnership = _out4323;
              readIdents = _9213_recIdents;
            }
          } else if (_source372.is_Map) {
            DAST._IType _9214___mcc_h774 = _source372.dtor_key;
            DAST._IType _9215___mcc_h775 = _source372.dtor_value;
            {
              RAST._IExpr _9216_recursiveGen;
              DCOMPUTF16._IOwnership _9217_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9218_recIdents;
              RAST._IExpr _out4324;
              DCOMPUTF16._IOwnership _out4325;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4326;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4324, out _out4325, out _out4326);
              _9216_recursiveGen = _out4324;
              _9217_recOwned = _out4325;
              _9218_recIdents = _out4326;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9216_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4327;
              DCOMPUTF16._IOwnership _out4328;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4327, out _out4328);
              r = _out4327;
              resultingOwnership = _out4328;
              readIdents = _9218_recIdents;
            }
          } else if (_source372.is_SetBuilder) {
            DAST._IType _9219___mcc_h778 = _source372.dtor_element;
            {
              RAST._IExpr _9220_recursiveGen;
              DCOMPUTF16._IOwnership _9221_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9222_recIdents;
              RAST._IExpr _out4329;
              DCOMPUTF16._IOwnership _out4330;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4331;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4329, out _out4330, out _out4331);
              _9220_recursiveGen = _out4329;
              _9221_recOwned = _out4330;
              _9222_recIdents = _out4331;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9220_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4332;
              DCOMPUTF16._IOwnership _out4333;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4332, out _out4333);
              r = _out4332;
              resultingOwnership = _out4333;
              readIdents = _9222_recIdents;
            }
          } else if (_source372.is_MapBuilder) {
            DAST._IType _9223___mcc_h780 = _source372.dtor_key;
            DAST._IType _9224___mcc_h781 = _source372.dtor_value;
            {
              RAST._IExpr _9225_recursiveGen;
              DCOMPUTF16._IOwnership _9226_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9227_recIdents;
              RAST._IExpr _out4334;
              DCOMPUTF16._IOwnership _out4335;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4336;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4334, out _out4335, out _out4336);
              _9225_recursiveGen = _out4334;
              _9226_recOwned = _out4335;
              _9227_recIdents = _out4336;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9225_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4337;
              DCOMPUTF16._IOwnership _out4338;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4337, out _out4338);
              r = _out4337;
              resultingOwnership = _out4338;
              readIdents = _9227_recIdents;
            }
          } else if (_source372.is_Arrow) {
            Dafny.ISequence<DAST._IType> _9228___mcc_h784 = _source372.dtor_args;
            DAST._IType _9229___mcc_h785 = _source372.dtor_result;
            {
              RAST._IExpr _9230_recursiveGen;
              DCOMPUTF16._IOwnership _9231_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9232_recIdents;
              RAST._IExpr _out4339;
              DCOMPUTF16._IOwnership _out4340;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4341;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4339, out _out4340, out _out4341);
              _9230_recursiveGen = _out4339;
              _9231_recOwned = _out4340;
              _9232_recIdents = _out4341;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9230_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4342;
              DCOMPUTF16._IOwnership _out4343;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4342, out _out4343);
              r = _out4342;
              resultingOwnership = _out4343;
              readIdents = _9232_recIdents;
            }
          } else if (_source372.is_Primitive) {
            DAST._IPrimitive _9233___mcc_h788 = _source372.dtor_Primitive_a0;
            {
              RAST._IExpr _9234_recursiveGen;
              DCOMPUTF16._IOwnership _9235_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9236_recIdents;
              RAST._IExpr _out4344;
              DCOMPUTF16._IOwnership _out4345;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4346;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4344, out _out4345, out _out4346);
              _9234_recursiveGen = _out4344;
              _9235_recOwned = _out4345;
              _9236_recIdents = _out4346;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9234_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4347;
              DCOMPUTF16._IOwnership _out4348;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4347, out _out4348);
              r = _out4347;
              resultingOwnership = _out4348;
              readIdents = _9236_recIdents;
            }
          } else if (_source372.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _9237___mcc_h790 = _source372.dtor_Passthrough_a0;
            {
              RAST._IExpr _9238_recursiveGen;
              DCOMPUTF16._IOwnership _9239_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9240_recIdents;
              RAST._IExpr _out4349;
              DCOMPUTF16._IOwnership _out4350;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4351;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4349, out _out4350, out _out4351);
              _9238_recursiveGen = _out4349;
              _9239_recOwned = _out4350;
              _9240_recIdents = _out4351;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9238_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4352;
              DCOMPUTF16._IOwnership _out4353;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4352, out _out4353);
              r = _out4352;
              resultingOwnership = _out4353;
              readIdents = _9240_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _9241___mcc_h792 = _source372.dtor_TypeArg_a0;
            {
              RAST._IExpr _9242_recursiveGen;
              DCOMPUTF16._IOwnership _9243_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9244_recIdents;
              RAST._IExpr _out4354;
              DCOMPUTF16._IOwnership _out4355;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4356;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4354, out _out4355, out _out4356);
              _9242_recursiveGen = _out4354;
              _9243_recOwned = _out4355;
              _9244_recIdents = _out4356;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9242_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4357;
              DCOMPUTF16._IOwnership _out4358;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4357, out _out4358);
              r = _out4357;
              resultingOwnership = _out4358;
              readIdents = _9244_recIdents;
            }
          }
        } else if (_source304.is_Arrow) {
          Dafny.ISequence<DAST._IType> _9245___mcc_h794 = _source304.dtor_args;
          DAST._IType _9246___mcc_h795 = _source304.dtor_result;
          DAST._IType _source377 = _7662___mcc_h1;
          if (_source377.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9247___mcc_h802 = _source377.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _9248___mcc_h803 = _source377.dtor_typeArgs;
            DAST._IResolvedType _9249___mcc_h804 = _source377.dtor_resolved;
            DAST._IResolvedType _source378 = _9249___mcc_h804;
            if (_source378.is_Datatype) {
              DAST._IDatatypeType _9250___mcc_h808 = _source378.dtor_datatypeType;
              {
                RAST._IExpr _9251_recursiveGen;
                DCOMPUTF16._IOwnership _9252_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9253_recIdents;
                RAST._IExpr _out4359;
                DCOMPUTF16._IOwnership _out4360;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4361;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4359, out _out4360, out _out4361);
                _9251_recursiveGen = _out4359;
                _9252_recOwned = _out4360;
                _9253_recIdents = _out4361;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9251_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4362;
                DCOMPUTF16._IOwnership _out4363;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4362, out _out4363);
                r = _out4362;
                resultingOwnership = _out4363;
                readIdents = _9253_recIdents;
              }
            } else if (_source378.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9254___mcc_h810 = _source378.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _9255___mcc_h811 = _source378.dtor_attributes;
              {
                RAST._IExpr _9256_recursiveGen;
                DCOMPUTF16._IOwnership _9257_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9258_recIdents;
                RAST._IExpr _out4364;
                DCOMPUTF16._IOwnership _out4365;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4366;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4364, out _out4365, out _out4366);
                _9256_recursiveGen = _out4364;
                _9257_recOwned = _out4365;
                _9258_recIdents = _out4366;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9256_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4367;
                DCOMPUTF16._IOwnership _out4368;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4367, out _out4368);
                r = _out4367;
                resultingOwnership = _out4368;
                readIdents = _9258_recIdents;
              }
            } else {
              DAST._IType _9259___mcc_h814 = _source378.dtor_baseType;
              DAST._INewtypeRange _9260___mcc_h815 = _source378.dtor_range;
              bool _9261___mcc_h816 = _source378.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _9262___mcc_h817 = _source378.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _9263_attributes = _9262___mcc_h817;
              bool _9264_erase = _9261___mcc_h816;
              DAST._INewtypeRange _9265_range = _9260___mcc_h815;
              DAST._IType _9266_b = _9259___mcc_h814;
              {
                Std.Wrappers._IOption<RAST._IType> _9267_nativeToType;
                _9267_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9266_b, _9265_range);
                if (object.Equals(_7656_fromTpe, _9266_b)) {
                  RAST._IExpr _9268_recursiveGen;
                  DCOMPUTF16._IOwnership _9269_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9270_recIdents;
                  RAST._IExpr _out4369;
                  DCOMPUTF16._IOwnership _out4370;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4371;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4369, out _out4370, out _out4371);
                  _9268_recursiveGen = _out4369;
                  _9269_recOwned = _out4370;
                  _9270_recIdents = _out4371;
                  readIdents = _9270_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source379 = _9267_nativeToType;
                  if (_source379.is_None) {
                    if (_9264_erase) {
                      r = _9268_recursiveGen;
                    } else {
                      RAST._IType _9271_rhsType;
                      RAST._IType _out4372;
                      _out4372 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _9271_rhsType = _out4372;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9271_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9268_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4373;
                    DCOMPUTF16._IOwnership _out4374;
                    DCOMPUTF16.COMP.FromOwnership(r, _9269_recOwned, expectedOwnership, out _out4373, out _out4374);
                    r = _out4373;
                    resultingOwnership = _out4374;
                  } else {
                    RAST._IType _9272___mcc_h1865 = _source379.dtor_value;
                    RAST._IType _9273_v = _9272___mcc_h1865;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_9268_recursiveGen, RAST.Expr.create_ExprFromType(_9273_v)));
                    RAST._IExpr _out4375;
                    DCOMPUTF16._IOwnership _out4376;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4375, out _out4376);
                    r = _out4375;
                    resultingOwnership = _out4376;
                  }
                } else {
                  if ((_9267_nativeToType).is_Some) {
                    DAST._IType _source380 = _7656_fromTpe;
                    if (_source380.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9274___mcc_h1866 = _source380.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _9275___mcc_h1867 = _source380.dtor_typeArgs;
                      DAST._IResolvedType _9276___mcc_h1868 = _source380.dtor_resolved;
                      DAST._IResolvedType _source381 = _9276___mcc_h1868;
                      if (_source381.is_Datatype) {
                        DAST._IDatatypeType _9277___mcc_h1872 = _source381.dtor_datatypeType;
                      } else if (_source381.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9278___mcc_h1874 = _source381.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _9279___mcc_h1875 = _source381.dtor_attributes;
                      } else {
                        DAST._IType _9280___mcc_h1878 = _source381.dtor_baseType;
                        DAST._INewtypeRange _9281___mcc_h1879 = _source381.dtor_range;
                        bool _9282___mcc_h1880 = _source381.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _9283___mcc_h1881 = _source381.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _9284_attributes0 = _9283___mcc_h1881;
                        bool _9285_erase0 = _9282___mcc_h1880;
                        DAST._INewtypeRange _9286_range0 = _9281___mcc_h1879;
                        DAST._IType _9287_b0 = _9280___mcc_h1878;
                        {
                          Std.Wrappers._IOption<RAST._IType> _9288_nativeFromType;
                          _9288_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9287_b0, _9286_range0);
                          if ((_9288_nativeFromType).is_Some) {
                            RAST._IExpr _9289_recursiveGen;
                            DCOMPUTF16._IOwnership _9290_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9291_recIdents;
                            RAST._IExpr _out4377;
                            DCOMPUTF16._IOwnership _out4378;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4379;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4377, out _out4378, out _out4379);
                            _9289_recursiveGen = _out4377;
                            _9290_recOwned = _out4378;
                            _9291_recIdents = _out4379;
                            RAST._IExpr _out4380;
                            DCOMPUTF16._IOwnership _out4381;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9289_recursiveGen, (_9267_nativeToType).dtor_value), _9290_recOwned, expectedOwnership, out _out4380, out _out4381);
                            r = _out4380;
                            resultingOwnership = _out4381;
                            readIdents = _9291_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source380.is_Nullable) {
                      DAST._IType _9292___mcc_h1886 = _source380.dtor_Nullable_a0;
                    } else if (_source380.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _9293___mcc_h1888 = _source380.dtor_Tuple_a0;
                    } else if (_source380.is_Array) {
                      DAST._IType _9294___mcc_h1890 = _source380.dtor_element;
                      BigInteger _9295___mcc_h1891 = _source380.dtor_dims;
                    } else if (_source380.is_Seq) {
                      DAST._IType _9296___mcc_h1894 = _source380.dtor_element;
                    } else if (_source380.is_Set) {
                      DAST._IType _9297___mcc_h1896 = _source380.dtor_element;
                    } else if (_source380.is_Multiset) {
                      DAST._IType _9298___mcc_h1898 = _source380.dtor_element;
                    } else if (_source380.is_Map) {
                      DAST._IType _9299___mcc_h1900 = _source380.dtor_key;
                      DAST._IType _9300___mcc_h1901 = _source380.dtor_value;
                    } else if (_source380.is_SetBuilder) {
                      DAST._IType _9301___mcc_h1904 = _source380.dtor_element;
                    } else if (_source380.is_MapBuilder) {
                      DAST._IType _9302___mcc_h1906 = _source380.dtor_key;
                      DAST._IType _9303___mcc_h1907 = _source380.dtor_value;
                    } else if (_source380.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _9304___mcc_h1910 = _source380.dtor_args;
                      DAST._IType _9305___mcc_h1911 = _source380.dtor_result;
                    } else if (_source380.is_Primitive) {
                      DAST._IPrimitive _9306___mcc_h1914 = _source380.dtor_Primitive_a0;
                    } else if (_source380.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _9307___mcc_h1916 = _source380.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _9308___mcc_h1918 = _source380.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _9309_recursiveGen;
                      DCOMPUTF16._IOwnership _9310_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9311_recIdents;
                      RAST._IExpr _out4382;
                      DCOMPUTF16._IOwnership _out4383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4384;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4382, out _out4383, out _out4384);
                      _9309_recursiveGen = _out4382;
                      _9310_recOwned = _out4383;
                      _9311_recIdents = _out4384;
                      RAST._IExpr _out4385;
                      DCOMPUTF16._IOwnership _out4386;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9309_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9267_nativeToType).dtor_value), _9310_recOwned, expectedOwnership, out _out4385, out _out4386);
                      r = _out4385;
                      resultingOwnership = _out4386;
                      readIdents = _9311_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out4387;
                  DCOMPUTF16._IOwnership _out4388;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4389;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _9266_b), _9266_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4387, out _out4388, out _out4389);
                  r = _out4387;
                  resultingOwnership = _out4388;
                  readIdents = _out4389;
                }
              }
            }
          } else if (_source377.is_Nullable) {
            DAST._IType _9312___mcc_h822 = _source377.dtor_Nullable_a0;
            {
              RAST._IExpr _9313_recursiveGen;
              DCOMPUTF16._IOwnership _9314_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9315_recIdents;
              RAST._IExpr _out4390;
              DCOMPUTF16._IOwnership _out4391;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4392;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4390, out _out4391, out _out4392);
              _9313_recursiveGen = _out4390;
              _9314_recOwned = _out4391;
              _9315_recIdents = _out4392;
              r = _9313_recursiveGen;
              if (object.Equals(_9314_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4393;
              DCOMPUTF16._IOwnership _out4394;
              DCOMPUTF16.COMP.FromOwnership(r, _9314_recOwned, expectedOwnership, out _out4393, out _out4394);
              r = _out4393;
              resultingOwnership = _out4394;
              readIdents = _9315_recIdents;
            }
          } else if (_source377.is_Tuple) {
            Dafny.ISequence<DAST._IType> _9316___mcc_h824 = _source377.dtor_Tuple_a0;
            {
              RAST._IExpr _9317_recursiveGen;
              DCOMPUTF16._IOwnership _9318_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9319_recIdents;
              RAST._IExpr _out4395;
              DCOMPUTF16._IOwnership _out4396;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4397;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4395, out _out4396, out _out4397);
              _9317_recursiveGen = _out4395;
              _9318_recOwned = _out4396;
              _9319_recIdents = _out4397;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9317_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4398;
              DCOMPUTF16._IOwnership _out4399;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4398, out _out4399);
              r = _out4398;
              resultingOwnership = _out4399;
              readIdents = _9319_recIdents;
            }
          } else if (_source377.is_Array) {
            DAST._IType _9320___mcc_h826 = _source377.dtor_element;
            BigInteger _9321___mcc_h827 = _source377.dtor_dims;
            {
              RAST._IExpr _9322_recursiveGen;
              DCOMPUTF16._IOwnership _9323_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9324_recIdents;
              RAST._IExpr _out4400;
              DCOMPUTF16._IOwnership _out4401;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4402;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4400, out _out4401, out _out4402);
              _9322_recursiveGen = _out4400;
              _9323_recOwned = _out4401;
              _9324_recIdents = _out4402;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9322_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4403;
              DCOMPUTF16._IOwnership _out4404;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4403, out _out4404);
              r = _out4403;
              resultingOwnership = _out4404;
              readIdents = _9324_recIdents;
            }
          } else if (_source377.is_Seq) {
            DAST._IType _9325___mcc_h830 = _source377.dtor_element;
            {
              RAST._IExpr _9326_recursiveGen;
              DCOMPUTF16._IOwnership _9327_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9328_recIdents;
              RAST._IExpr _out4405;
              DCOMPUTF16._IOwnership _out4406;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4407;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4405, out _out4406, out _out4407);
              _9326_recursiveGen = _out4405;
              _9327_recOwned = _out4406;
              _9328_recIdents = _out4407;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9326_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4408;
              DCOMPUTF16._IOwnership _out4409;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4408, out _out4409);
              r = _out4408;
              resultingOwnership = _out4409;
              readIdents = _9328_recIdents;
            }
          } else if (_source377.is_Set) {
            DAST._IType _9329___mcc_h832 = _source377.dtor_element;
            {
              RAST._IExpr _9330_recursiveGen;
              DCOMPUTF16._IOwnership _9331_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9332_recIdents;
              RAST._IExpr _out4410;
              DCOMPUTF16._IOwnership _out4411;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4412;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4410, out _out4411, out _out4412);
              _9330_recursiveGen = _out4410;
              _9331_recOwned = _out4411;
              _9332_recIdents = _out4412;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9330_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4413;
              DCOMPUTF16._IOwnership _out4414;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4413, out _out4414);
              r = _out4413;
              resultingOwnership = _out4414;
              readIdents = _9332_recIdents;
            }
          } else if (_source377.is_Multiset) {
            DAST._IType _9333___mcc_h834 = _source377.dtor_element;
            {
              RAST._IExpr _9334_recursiveGen;
              DCOMPUTF16._IOwnership _9335_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9336_recIdents;
              RAST._IExpr _out4415;
              DCOMPUTF16._IOwnership _out4416;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4417;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4415, out _out4416, out _out4417);
              _9334_recursiveGen = _out4415;
              _9335_recOwned = _out4416;
              _9336_recIdents = _out4417;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9334_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4418;
              DCOMPUTF16._IOwnership _out4419;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4418, out _out4419);
              r = _out4418;
              resultingOwnership = _out4419;
              readIdents = _9336_recIdents;
            }
          } else if (_source377.is_Map) {
            DAST._IType _9337___mcc_h836 = _source377.dtor_key;
            DAST._IType _9338___mcc_h837 = _source377.dtor_value;
            {
              RAST._IExpr _9339_recursiveGen;
              DCOMPUTF16._IOwnership _9340_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9341_recIdents;
              RAST._IExpr _out4420;
              DCOMPUTF16._IOwnership _out4421;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4422;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4420, out _out4421, out _out4422);
              _9339_recursiveGen = _out4420;
              _9340_recOwned = _out4421;
              _9341_recIdents = _out4422;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9339_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4423;
              DCOMPUTF16._IOwnership _out4424;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4423, out _out4424);
              r = _out4423;
              resultingOwnership = _out4424;
              readIdents = _9341_recIdents;
            }
          } else if (_source377.is_SetBuilder) {
            DAST._IType _9342___mcc_h840 = _source377.dtor_element;
            {
              RAST._IExpr _9343_recursiveGen;
              DCOMPUTF16._IOwnership _9344_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9345_recIdents;
              RAST._IExpr _out4425;
              DCOMPUTF16._IOwnership _out4426;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4427;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4425, out _out4426, out _out4427);
              _9343_recursiveGen = _out4425;
              _9344_recOwned = _out4426;
              _9345_recIdents = _out4427;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9343_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4428;
              DCOMPUTF16._IOwnership _out4429;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4428, out _out4429);
              r = _out4428;
              resultingOwnership = _out4429;
              readIdents = _9345_recIdents;
            }
          } else if (_source377.is_MapBuilder) {
            DAST._IType _9346___mcc_h842 = _source377.dtor_key;
            DAST._IType _9347___mcc_h843 = _source377.dtor_value;
            {
              RAST._IExpr _9348_recursiveGen;
              DCOMPUTF16._IOwnership _9349_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9350_recIdents;
              RAST._IExpr _out4430;
              DCOMPUTF16._IOwnership _out4431;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4432;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4430, out _out4431, out _out4432);
              _9348_recursiveGen = _out4430;
              _9349_recOwned = _out4431;
              _9350_recIdents = _out4432;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9348_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4433;
              DCOMPUTF16._IOwnership _out4434;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4433, out _out4434);
              r = _out4433;
              resultingOwnership = _out4434;
              readIdents = _9350_recIdents;
            }
          } else if (_source377.is_Arrow) {
            Dafny.ISequence<DAST._IType> _9351___mcc_h846 = _source377.dtor_args;
            DAST._IType _9352___mcc_h847 = _source377.dtor_result;
            {
              RAST._IExpr _9353_recursiveGen;
              DCOMPUTF16._IOwnership _9354_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9355_recIdents;
              RAST._IExpr _out4435;
              DCOMPUTF16._IOwnership _out4436;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4437;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4435, out _out4436, out _out4437);
              _9353_recursiveGen = _out4435;
              _9354_recOwned = _out4436;
              _9355_recIdents = _out4437;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9353_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4438;
              DCOMPUTF16._IOwnership _out4439;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4438, out _out4439);
              r = _out4438;
              resultingOwnership = _out4439;
              readIdents = _9355_recIdents;
            }
          } else if (_source377.is_Primitive) {
            DAST._IPrimitive _9356___mcc_h850 = _source377.dtor_Primitive_a0;
            {
              RAST._IExpr _9357_recursiveGen;
              DCOMPUTF16._IOwnership _9358_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9359_recIdents;
              RAST._IExpr _out4440;
              DCOMPUTF16._IOwnership _out4441;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4442;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4440, out _out4441, out _out4442);
              _9357_recursiveGen = _out4440;
              _9358_recOwned = _out4441;
              _9359_recIdents = _out4442;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9357_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4443;
              DCOMPUTF16._IOwnership _out4444;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4443, out _out4444);
              r = _out4443;
              resultingOwnership = _out4444;
              readIdents = _9359_recIdents;
            }
          } else if (_source377.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _9360___mcc_h852 = _source377.dtor_Passthrough_a0;
            {
              RAST._IExpr _9361_recursiveGen;
              DCOMPUTF16._IOwnership _9362_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9363_recIdents;
              RAST._IExpr _out4445;
              DCOMPUTF16._IOwnership _out4446;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4447;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4445, out _out4446, out _out4447);
              _9361_recursiveGen = _out4445;
              _9362_recOwned = _out4446;
              _9363_recIdents = _out4447;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9361_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4448;
              DCOMPUTF16._IOwnership _out4449;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4448, out _out4449);
              r = _out4448;
              resultingOwnership = _out4449;
              readIdents = _9363_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _9364___mcc_h854 = _source377.dtor_TypeArg_a0;
            {
              RAST._IExpr _9365_recursiveGen;
              DCOMPUTF16._IOwnership _9366_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9367_recIdents;
              RAST._IExpr _out4450;
              DCOMPUTF16._IOwnership _out4451;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4452;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4450, out _out4451, out _out4452);
              _9365_recursiveGen = _out4450;
              _9366_recOwned = _out4451;
              _9367_recIdents = _out4452;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9365_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4453;
              DCOMPUTF16._IOwnership _out4454;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4453, out _out4454);
              r = _out4453;
              resultingOwnership = _out4454;
              readIdents = _9367_recIdents;
            }
          }
        } else if (_source304.is_Primitive) {
          DAST._IPrimitive _9368___mcc_h856 = _source304.dtor_Primitive_a0;
          DAST._IPrimitive _source382 = _9368___mcc_h856;
          if (_source382.is_Int) {
            DAST._IType _source383 = _7662___mcc_h1;
            if (_source383.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9369___mcc_h860 = _source383.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9370___mcc_h861 = _source383.dtor_typeArgs;
              DAST._IResolvedType _9371___mcc_h862 = _source383.dtor_resolved;
              DAST._IResolvedType _source384 = _9371___mcc_h862;
              if (_source384.is_Datatype) {
                DAST._IDatatypeType _9372___mcc_h866 = _source384.dtor_datatypeType;
                {
                  RAST._IExpr _9373_recursiveGen;
                  DCOMPUTF16._IOwnership _9374_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9375_recIdents;
                  RAST._IExpr _out4455;
                  DCOMPUTF16._IOwnership _out4456;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4457;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4455, out _out4456, out _out4457);
                  _9373_recursiveGen = _out4455;
                  _9374_recOwned = _out4456;
                  _9375_recIdents = _out4457;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9373_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4458;
                  DCOMPUTF16._IOwnership _out4459;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4458, out _out4459);
                  r = _out4458;
                  resultingOwnership = _out4459;
                  readIdents = _9375_recIdents;
                }
              } else if (_source384.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9376___mcc_h868 = _source384.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9377___mcc_h869 = _source384.dtor_attributes;
                {
                  RAST._IExpr _9378_recursiveGen;
                  DCOMPUTF16._IOwnership _9379_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9380_recIdents;
                  RAST._IExpr _out4460;
                  DCOMPUTF16._IOwnership _out4461;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4462;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4460, out _out4461, out _out4462);
                  _9378_recursiveGen = _out4460;
                  _9379_recOwned = _out4461;
                  _9380_recIdents = _out4462;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9378_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4463;
                  DCOMPUTF16._IOwnership _out4464;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4463, out _out4464);
                  r = _out4463;
                  resultingOwnership = _out4464;
                  readIdents = _9380_recIdents;
                }
              } else {
                DAST._IType _9381___mcc_h872 = _source384.dtor_baseType;
                DAST._INewtypeRange _9382___mcc_h873 = _source384.dtor_range;
                bool _9383___mcc_h874 = _source384.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9384___mcc_h875 = _source384.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9385_attributes = _9384___mcc_h875;
                bool _9386_erase = _9383___mcc_h874;
                DAST._INewtypeRange _9387_range = _9382___mcc_h873;
                DAST._IType _9388_b = _9381___mcc_h872;
                {
                  Std.Wrappers._IOption<RAST._IType> _9389_nativeToType;
                  _9389_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9388_b, _9387_range);
                  if (object.Equals(_7656_fromTpe, _9388_b)) {
                    RAST._IExpr _9390_recursiveGen;
                    DCOMPUTF16._IOwnership _9391_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9392_recIdents;
                    RAST._IExpr _out4465;
                    DCOMPUTF16._IOwnership _out4466;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4467;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4465, out _out4466, out _out4467);
                    _9390_recursiveGen = _out4465;
                    _9391_recOwned = _out4466;
                    _9392_recIdents = _out4467;
                    readIdents = _9392_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source385 = _9389_nativeToType;
                    if (_source385.is_None) {
                      if (_9386_erase) {
                        r = _9390_recursiveGen;
                      } else {
                        RAST._IType _9393_rhsType;
                        RAST._IType _out4468;
                        _out4468 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                        _9393_rhsType = _out4468;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9393_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9390_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4469;
                      DCOMPUTF16._IOwnership _out4470;
                      DCOMPUTF16.COMP.FromOwnership(r, _9391_recOwned, expectedOwnership, out _out4469, out _out4470);
                      r = _out4469;
                      resultingOwnership = _out4470;
                    } else {
                      RAST._IType _9394___mcc_h1920 = _source385.dtor_value;
                      RAST._IType _9395_v = _9394___mcc_h1920;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_9390_recursiveGen, RAST.Expr.create_ExprFromType(_9395_v)));
                      RAST._IExpr _out4471;
                      DCOMPUTF16._IOwnership _out4472;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4471, out _out4472);
                      r = _out4471;
                      resultingOwnership = _out4472;
                    }
                  } else {
                    if ((_9389_nativeToType).is_Some) {
                      DAST._IType _source386 = _7656_fromTpe;
                      if (_source386.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9396___mcc_h1921 = _source386.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9397___mcc_h1922 = _source386.dtor_typeArgs;
                        DAST._IResolvedType _9398___mcc_h1923 = _source386.dtor_resolved;
                        DAST._IResolvedType _source387 = _9398___mcc_h1923;
                        if (_source387.is_Datatype) {
                          DAST._IDatatypeType _9399___mcc_h1927 = _source387.dtor_datatypeType;
                        } else if (_source387.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9400___mcc_h1929 = _source387.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9401___mcc_h1930 = _source387.dtor_attributes;
                        } else {
                          DAST._IType _9402___mcc_h1933 = _source387.dtor_baseType;
                          DAST._INewtypeRange _9403___mcc_h1934 = _source387.dtor_range;
                          bool _9404___mcc_h1935 = _source387.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9405___mcc_h1936 = _source387.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9406_attributes0 = _9405___mcc_h1936;
                          bool _9407_erase0 = _9404___mcc_h1935;
                          DAST._INewtypeRange _9408_range0 = _9403___mcc_h1934;
                          DAST._IType _9409_b0 = _9402___mcc_h1933;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9410_nativeFromType;
                            _9410_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9409_b0, _9408_range0);
                            if ((_9410_nativeFromType).is_Some) {
                              RAST._IExpr _9411_recursiveGen;
                              DCOMPUTF16._IOwnership _9412_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9413_recIdents;
                              RAST._IExpr _out4473;
                              DCOMPUTF16._IOwnership _out4474;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4475;
                              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4473, out _out4474, out _out4475);
                              _9411_recursiveGen = _out4473;
                              _9412_recOwned = _out4474;
                              _9413_recIdents = _out4475;
                              RAST._IExpr _out4476;
                              DCOMPUTF16._IOwnership _out4477;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9411_recursiveGen, (_9389_nativeToType).dtor_value), _9412_recOwned, expectedOwnership, out _out4476, out _out4477);
                              r = _out4476;
                              resultingOwnership = _out4477;
                              readIdents = _9413_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source386.is_Nullable) {
                        DAST._IType _9414___mcc_h1941 = _source386.dtor_Nullable_a0;
                      } else if (_source386.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9415___mcc_h1943 = _source386.dtor_Tuple_a0;
                      } else if (_source386.is_Array) {
                        DAST._IType _9416___mcc_h1945 = _source386.dtor_element;
                        BigInteger _9417___mcc_h1946 = _source386.dtor_dims;
                      } else if (_source386.is_Seq) {
                        DAST._IType _9418___mcc_h1949 = _source386.dtor_element;
                      } else if (_source386.is_Set) {
                        DAST._IType _9419___mcc_h1951 = _source386.dtor_element;
                      } else if (_source386.is_Multiset) {
                        DAST._IType _9420___mcc_h1953 = _source386.dtor_element;
                      } else if (_source386.is_Map) {
                        DAST._IType _9421___mcc_h1955 = _source386.dtor_key;
                        DAST._IType _9422___mcc_h1956 = _source386.dtor_value;
                      } else if (_source386.is_SetBuilder) {
                        DAST._IType _9423___mcc_h1959 = _source386.dtor_element;
                      } else if (_source386.is_MapBuilder) {
                        DAST._IType _9424___mcc_h1961 = _source386.dtor_key;
                        DAST._IType _9425___mcc_h1962 = _source386.dtor_value;
                      } else if (_source386.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9426___mcc_h1965 = _source386.dtor_args;
                        DAST._IType _9427___mcc_h1966 = _source386.dtor_result;
                      } else if (_source386.is_Primitive) {
                        DAST._IPrimitive _9428___mcc_h1969 = _source386.dtor_Primitive_a0;
                      } else if (_source386.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9429___mcc_h1971 = _source386.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9430___mcc_h1973 = _source386.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9431_recursiveGen;
                        DCOMPUTF16._IOwnership _9432_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9433_recIdents;
                        RAST._IExpr _out4478;
                        DCOMPUTF16._IOwnership _out4479;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4480;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4478, out _out4479, out _out4480);
                        _9431_recursiveGen = _out4478;
                        _9432_recOwned = _out4479;
                        _9433_recIdents = _out4480;
                        RAST._IExpr _out4481;
                        DCOMPUTF16._IOwnership _out4482;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9431_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9389_nativeToType).dtor_value), _9432_recOwned, expectedOwnership, out _out4481, out _out4482);
                        r = _out4481;
                        resultingOwnership = _out4482;
                        readIdents = _9433_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4483;
                    DCOMPUTF16._IOwnership _out4484;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4485;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _9388_b), _9388_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4483, out _out4484, out _out4485);
                    r = _out4483;
                    resultingOwnership = _out4484;
                    readIdents = _out4485;
                  }
                }
              }
            } else if (_source383.is_Nullable) {
              DAST._IType _9434___mcc_h880 = _source383.dtor_Nullable_a0;
              {
                RAST._IExpr _9435_recursiveGen;
                DCOMPUTF16._IOwnership _9436_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9437_recIdents;
                RAST._IExpr _out4486;
                DCOMPUTF16._IOwnership _out4487;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4488;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4486, out _out4487, out _out4488);
                _9435_recursiveGen = _out4486;
                _9436_recOwned = _out4487;
                _9437_recIdents = _out4488;
                r = _9435_recursiveGen;
                if (object.Equals(_9436_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4489;
                DCOMPUTF16._IOwnership _out4490;
                DCOMPUTF16.COMP.FromOwnership(r, _9436_recOwned, expectedOwnership, out _out4489, out _out4490);
                r = _out4489;
                resultingOwnership = _out4490;
                readIdents = _9437_recIdents;
              }
            } else if (_source383.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9438___mcc_h882 = _source383.dtor_Tuple_a0;
              {
                RAST._IExpr _9439_recursiveGen;
                DCOMPUTF16._IOwnership _9440_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9441_recIdents;
                RAST._IExpr _out4491;
                DCOMPUTF16._IOwnership _out4492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4493;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4491, out _out4492, out _out4493);
                _9439_recursiveGen = _out4491;
                _9440_recOwned = _out4492;
                _9441_recIdents = _out4493;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9439_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4494;
                DCOMPUTF16._IOwnership _out4495;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4494, out _out4495);
                r = _out4494;
                resultingOwnership = _out4495;
                readIdents = _9441_recIdents;
              }
            } else if (_source383.is_Array) {
              DAST._IType _9442___mcc_h884 = _source383.dtor_element;
              BigInteger _9443___mcc_h885 = _source383.dtor_dims;
              {
                RAST._IExpr _9444_recursiveGen;
                DCOMPUTF16._IOwnership _9445_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9446_recIdents;
                RAST._IExpr _out4496;
                DCOMPUTF16._IOwnership _out4497;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4498;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4496, out _out4497, out _out4498);
                _9444_recursiveGen = _out4496;
                _9445_recOwned = _out4497;
                _9446_recIdents = _out4498;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9444_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4499;
                DCOMPUTF16._IOwnership _out4500;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4499, out _out4500);
                r = _out4499;
                resultingOwnership = _out4500;
                readIdents = _9446_recIdents;
              }
            } else if (_source383.is_Seq) {
              DAST._IType _9447___mcc_h888 = _source383.dtor_element;
              {
                RAST._IExpr _9448_recursiveGen;
                DCOMPUTF16._IOwnership _9449_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9450_recIdents;
                RAST._IExpr _out4501;
                DCOMPUTF16._IOwnership _out4502;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4503;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4501, out _out4502, out _out4503);
                _9448_recursiveGen = _out4501;
                _9449_recOwned = _out4502;
                _9450_recIdents = _out4503;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9448_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4504;
                DCOMPUTF16._IOwnership _out4505;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4504, out _out4505);
                r = _out4504;
                resultingOwnership = _out4505;
                readIdents = _9450_recIdents;
              }
            } else if (_source383.is_Set) {
              DAST._IType _9451___mcc_h890 = _source383.dtor_element;
              {
                RAST._IExpr _9452_recursiveGen;
                DCOMPUTF16._IOwnership _9453_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9454_recIdents;
                RAST._IExpr _out4506;
                DCOMPUTF16._IOwnership _out4507;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4508;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4506, out _out4507, out _out4508);
                _9452_recursiveGen = _out4506;
                _9453_recOwned = _out4507;
                _9454_recIdents = _out4508;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9452_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4509;
                DCOMPUTF16._IOwnership _out4510;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4509, out _out4510);
                r = _out4509;
                resultingOwnership = _out4510;
                readIdents = _9454_recIdents;
              }
            } else if (_source383.is_Multiset) {
              DAST._IType _9455___mcc_h892 = _source383.dtor_element;
              {
                RAST._IExpr _9456_recursiveGen;
                DCOMPUTF16._IOwnership _9457_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9458_recIdents;
                RAST._IExpr _out4511;
                DCOMPUTF16._IOwnership _out4512;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4513;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4511, out _out4512, out _out4513);
                _9456_recursiveGen = _out4511;
                _9457_recOwned = _out4512;
                _9458_recIdents = _out4513;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9456_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4514;
                DCOMPUTF16._IOwnership _out4515;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4514, out _out4515);
                r = _out4514;
                resultingOwnership = _out4515;
                readIdents = _9458_recIdents;
              }
            } else if (_source383.is_Map) {
              DAST._IType _9459___mcc_h894 = _source383.dtor_key;
              DAST._IType _9460___mcc_h895 = _source383.dtor_value;
              {
                RAST._IExpr _9461_recursiveGen;
                DCOMPUTF16._IOwnership _9462_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9463_recIdents;
                RAST._IExpr _out4516;
                DCOMPUTF16._IOwnership _out4517;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4518;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4516, out _out4517, out _out4518);
                _9461_recursiveGen = _out4516;
                _9462_recOwned = _out4517;
                _9463_recIdents = _out4518;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9461_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4519;
                DCOMPUTF16._IOwnership _out4520;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4519, out _out4520);
                r = _out4519;
                resultingOwnership = _out4520;
                readIdents = _9463_recIdents;
              }
            } else if (_source383.is_SetBuilder) {
              DAST._IType _9464___mcc_h898 = _source383.dtor_element;
              {
                RAST._IExpr _9465_recursiveGen;
                DCOMPUTF16._IOwnership _9466_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9467_recIdents;
                RAST._IExpr _out4521;
                DCOMPUTF16._IOwnership _out4522;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4523;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4521, out _out4522, out _out4523);
                _9465_recursiveGen = _out4521;
                _9466_recOwned = _out4522;
                _9467_recIdents = _out4523;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9465_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4524;
                DCOMPUTF16._IOwnership _out4525;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4524, out _out4525);
                r = _out4524;
                resultingOwnership = _out4525;
                readIdents = _9467_recIdents;
              }
            } else if (_source383.is_MapBuilder) {
              DAST._IType _9468___mcc_h900 = _source383.dtor_key;
              DAST._IType _9469___mcc_h901 = _source383.dtor_value;
              {
                RAST._IExpr _9470_recursiveGen;
                DCOMPUTF16._IOwnership _9471_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9472_recIdents;
                RAST._IExpr _out4526;
                DCOMPUTF16._IOwnership _out4527;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4528;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4526, out _out4527, out _out4528);
                _9470_recursiveGen = _out4526;
                _9471_recOwned = _out4527;
                _9472_recIdents = _out4528;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9470_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4529;
                DCOMPUTF16._IOwnership _out4530;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4529, out _out4530);
                r = _out4529;
                resultingOwnership = _out4530;
                readIdents = _9472_recIdents;
              }
            } else if (_source383.is_Arrow) {
              Dafny.ISequence<DAST._IType> _9473___mcc_h904 = _source383.dtor_args;
              DAST._IType _9474___mcc_h905 = _source383.dtor_result;
              {
                RAST._IExpr _9475_recursiveGen;
                DCOMPUTF16._IOwnership _9476_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9477_recIdents;
                RAST._IExpr _out4531;
                DCOMPUTF16._IOwnership _out4532;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4533;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4531, out _out4532, out _out4533);
                _9475_recursiveGen = _out4531;
                _9476_recOwned = _out4532;
                _9477_recIdents = _out4533;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9475_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4534;
                DCOMPUTF16._IOwnership _out4535;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4534, out _out4535);
                r = _out4534;
                resultingOwnership = _out4535;
                readIdents = _9477_recIdents;
              }
            } else if (_source383.is_Primitive) {
              DAST._IPrimitive _9478___mcc_h908 = _source383.dtor_Primitive_a0;
              DAST._IPrimitive _source388 = _9478___mcc_h908;
              if (_source388.is_Int) {
                {
                  RAST._IExpr _9479_recursiveGen;
                  DCOMPUTF16._IOwnership _9480_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9481_recIdents;
                  RAST._IExpr _out4536;
                  DCOMPUTF16._IOwnership _out4537;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4538;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4536, out _out4537, out _out4538);
                  _9479_recursiveGen = _out4536;
                  _9480_recOwned = _out4537;
                  _9481_recIdents = _out4538;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9479_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4539;
                  DCOMPUTF16._IOwnership _out4540;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4539, out _out4540);
                  r = _out4539;
                  resultingOwnership = _out4540;
                  readIdents = _9481_recIdents;
                }
              } else if (_source388.is_Real) {
                {
                  RAST._IExpr _9482_recursiveGen;
                  DCOMPUTF16._IOwnership _9483___v82;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9484_recIdents;
                  RAST._IExpr _out4541;
                  DCOMPUTF16._IOwnership _out4542;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4543;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4541, out _out4542, out _out4543);
                  _9482_recursiveGen = _out4541;
                  _9483___v82 = _out4542;
                  _9484_recIdents = _out4543;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_9482_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out4544;
                  DCOMPUTF16._IOwnership _out4545;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4544, out _out4545);
                  r = _out4544;
                  resultingOwnership = _out4545;
                  readIdents = _9484_recIdents;
                }
              } else if (_source388.is_String) {
                {
                  RAST._IExpr _9485_recursiveGen;
                  DCOMPUTF16._IOwnership _9486_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9487_recIdents;
                  RAST._IExpr _out4546;
                  DCOMPUTF16._IOwnership _out4547;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4548;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4546, out _out4547, out _out4548);
                  _9485_recursiveGen = _out4546;
                  _9486_recOwned = _out4547;
                  _9487_recIdents = _out4548;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9485_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4549;
                  DCOMPUTF16._IOwnership _out4550;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4549, out _out4550);
                  r = _out4549;
                  resultingOwnership = _out4550;
                  readIdents = _9487_recIdents;
                }
              } else if (_source388.is_Bool) {
                {
                  RAST._IExpr _9488_recursiveGen;
                  DCOMPUTF16._IOwnership _9489_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9490_recIdents;
                  RAST._IExpr _out4551;
                  DCOMPUTF16._IOwnership _out4552;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4553;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4551, out _out4552, out _out4553);
                  _9488_recursiveGen = _out4551;
                  _9489_recOwned = _out4552;
                  _9490_recIdents = _out4553;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9488_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4554;
                  DCOMPUTF16._IOwnership _out4555;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4554, out _out4555);
                  r = _out4554;
                  resultingOwnership = _out4555;
                  readIdents = _9490_recIdents;
                }
              } else {
                {
                  RAST._IType _9491_rhsType;
                  RAST._IType _out4556;
                  _out4556 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                  _9491_rhsType = _out4556;
                  RAST._IExpr _9492_recursiveGen;
                  DCOMPUTF16._IOwnership _9493___v88;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9494_recIdents;
                  RAST._IExpr _out4557;
                  DCOMPUTF16._IOwnership _out4558;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4559;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4557, out _out4558, out _out4559);
                  _9492_recursiveGen = _out4557;
                  _9493___v88 = _out4558;
                  _9494_recIdents = _out4559;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_9492_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out4560;
                  DCOMPUTF16._IOwnership _out4561;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4560, out _out4561);
                  r = _out4560;
                  resultingOwnership = _out4561;
                  readIdents = _9494_recIdents;
                }
              }
            } else if (_source383.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _9495___mcc_h910 = _source383.dtor_Passthrough_a0;
              {
                RAST._IType _9496_rhsType;
                RAST._IType _out4562;
                _out4562 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                _9496_rhsType = _out4562;
                RAST._IExpr _9497_recursiveGen;
                DCOMPUTF16._IOwnership _9498___v85;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9499_recIdents;
                RAST._IExpr _out4563;
                DCOMPUTF16._IOwnership _out4564;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4565;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4563, out _out4564, out _out4565);
                _9497_recursiveGen = _out4563;
                _9498___v85 = _out4564;
                _9499_recIdents = _out4565;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_9496_rhsType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_9497_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out4566;
                DCOMPUTF16._IOwnership _out4567;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4566, out _out4567);
                r = _out4566;
                resultingOwnership = _out4567;
                readIdents = _9499_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _9500___mcc_h912 = _source383.dtor_TypeArg_a0;
              {
                RAST._IExpr _9501_recursiveGen;
                DCOMPUTF16._IOwnership _9502_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9503_recIdents;
                RAST._IExpr _out4568;
                DCOMPUTF16._IOwnership _out4569;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4570;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4568, out _out4569, out _out4570);
                _9501_recursiveGen = _out4568;
                _9502_recOwned = _out4569;
                _9503_recIdents = _out4570;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9501_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4571;
                DCOMPUTF16._IOwnership _out4572;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4571, out _out4572);
                r = _out4571;
                resultingOwnership = _out4572;
                readIdents = _9503_recIdents;
              }
            }
          } else if (_source382.is_Real) {
            DAST._IType _source389 = _7662___mcc_h1;
            if (_source389.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9504___mcc_h914 = _source389.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9505___mcc_h915 = _source389.dtor_typeArgs;
              DAST._IResolvedType _9506___mcc_h916 = _source389.dtor_resolved;
              DAST._IResolvedType _source390 = _9506___mcc_h916;
              if (_source390.is_Datatype) {
                DAST._IDatatypeType _9507___mcc_h920 = _source390.dtor_datatypeType;
                {
                  RAST._IExpr _9508_recursiveGen;
                  DCOMPUTF16._IOwnership _9509_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9510_recIdents;
                  RAST._IExpr _out4573;
                  DCOMPUTF16._IOwnership _out4574;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4575;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4573, out _out4574, out _out4575);
                  _9508_recursiveGen = _out4573;
                  _9509_recOwned = _out4574;
                  _9510_recIdents = _out4575;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9508_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4576;
                  DCOMPUTF16._IOwnership _out4577;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4576, out _out4577);
                  r = _out4576;
                  resultingOwnership = _out4577;
                  readIdents = _9510_recIdents;
                }
              } else if (_source390.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9511___mcc_h922 = _source390.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9512___mcc_h923 = _source390.dtor_attributes;
                {
                  RAST._IExpr _9513_recursiveGen;
                  DCOMPUTF16._IOwnership _9514_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9515_recIdents;
                  RAST._IExpr _out4578;
                  DCOMPUTF16._IOwnership _out4579;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4580;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4578, out _out4579, out _out4580);
                  _9513_recursiveGen = _out4578;
                  _9514_recOwned = _out4579;
                  _9515_recIdents = _out4580;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9513_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4581;
                  DCOMPUTF16._IOwnership _out4582;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4581, out _out4582);
                  r = _out4581;
                  resultingOwnership = _out4582;
                  readIdents = _9515_recIdents;
                }
              } else {
                DAST._IType _9516___mcc_h926 = _source390.dtor_baseType;
                DAST._INewtypeRange _9517___mcc_h927 = _source390.dtor_range;
                bool _9518___mcc_h928 = _source390.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9519___mcc_h929 = _source390.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9520_attributes = _9519___mcc_h929;
                bool _9521_erase = _9518___mcc_h928;
                DAST._INewtypeRange _9522_range = _9517___mcc_h927;
                DAST._IType _9523_b = _9516___mcc_h926;
                {
                  Std.Wrappers._IOption<RAST._IType> _9524_nativeToType;
                  _9524_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9523_b, _9522_range);
                  if (object.Equals(_7656_fromTpe, _9523_b)) {
                    RAST._IExpr _9525_recursiveGen;
                    DCOMPUTF16._IOwnership _9526_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9527_recIdents;
                    RAST._IExpr _out4583;
                    DCOMPUTF16._IOwnership _out4584;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4585;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4583, out _out4584, out _out4585);
                    _9525_recursiveGen = _out4583;
                    _9526_recOwned = _out4584;
                    _9527_recIdents = _out4585;
                    readIdents = _9527_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source391 = _9524_nativeToType;
                    if (_source391.is_None) {
                      if (_9521_erase) {
                        r = _9525_recursiveGen;
                      } else {
                        RAST._IType _9528_rhsType;
                        RAST._IType _out4586;
                        _out4586 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                        _9528_rhsType = _out4586;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9528_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9525_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4587;
                      DCOMPUTF16._IOwnership _out4588;
                      DCOMPUTF16.COMP.FromOwnership(r, _9526_recOwned, expectedOwnership, out _out4587, out _out4588);
                      r = _out4587;
                      resultingOwnership = _out4588;
                    } else {
                      RAST._IType _9529___mcc_h1975 = _source391.dtor_value;
                      RAST._IType _9530_v = _9529___mcc_h1975;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_9525_recursiveGen, RAST.Expr.create_ExprFromType(_9530_v)));
                      RAST._IExpr _out4589;
                      DCOMPUTF16._IOwnership _out4590;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4589, out _out4590);
                      r = _out4589;
                      resultingOwnership = _out4590;
                    }
                  } else {
                    if ((_9524_nativeToType).is_Some) {
                      DAST._IType _source392 = _7656_fromTpe;
                      if (_source392.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9531___mcc_h1976 = _source392.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9532___mcc_h1977 = _source392.dtor_typeArgs;
                        DAST._IResolvedType _9533___mcc_h1978 = _source392.dtor_resolved;
                        DAST._IResolvedType _source393 = _9533___mcc_h1978;
                        if (_source393.is_Datatype) {
                          DAST._IDatatypeType _9534___mcc_h1982 = _source393.dtor_datatypeType;
                        } else if (_source393.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9535___mcc_h1984 = _source393.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9536___mcc_h1985 = _source393.dtor_attributes;
                        } else {
                          DAST._IType _9537___mcc_h1988 = _source393.dtor_baseType;
                          DAST._INewtypeRange _9538___mcc_h1989 = _source393.dtor_range;
                          bool _9539___mcc_h1990 = _source393.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9540___mcc_h1991 = _source393.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9541_attributes0 = _9540___mcc_h1991;
                          bool _9542_erase0 = _9539___mcc_h1990;
                          DAST._INewtypeRange _9543_range0 = _9538___mcc_h1989;
                          DAST._IType _9544_b0 = _9537___mcc_h1988;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9545_nativeFromType;
                            _9545_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9544_b0, _9543_range0);
                            if ((_9545_nativeFromType).is_Some) {
                              RAST._IExpr _9546_recursiveGen;
                              DCOMPUTF16._IOwnership _9547_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9548_recIdents;
                              RAST._IExpr _out4591;
                              DCOMPUTF16._IOwnership _out4592;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4593;
                              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4591, out _out4592, out _out4593);
                              _9546_recursiveGen = _out4591;
                              _9547_recOwned = _out4592;
                              _9548_recIdents = _out4593;
                              RAST._IExpr _out4594;
                              DCOMPUTF16._IOwnership _out4595;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9546_recursiveGen, (_9524_nativeToType).dtor_value), _9547_recOwned, expectedOwnership, out _out4594, out _out4595);
                              r = _out4594;
                              resultingOwnership = _out4595;
                              readIdents = _9548_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source392.is_Nullable) {
                        DAST._IType _9549___mcc_h1996 = _source392.dtor_Nullable_a0;
                      } else if (_source392.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9550___mcc_h1998 = _source392.dtor_Tuple_a0;
                      } else if (_source392.is_Array) {
                        DAST._IType _9551___mcc_h2000 = _source392.dtor_element;
                        BigInteger _9552___mcc_h2001 = _source392.dtor_dims;
                      } else if (_source392.is_Seq) {
                        DAST._IType _9553___mcc_h2004 = _source392.dtor_element;
                      } else if (_source392.is_Set) {
                        DAST._IType _9554___mcc_h2006 = _source392.dtor_element;
                      } else if (_source392.is_Multiset) {
                        DAST._IType _9555___mcc_h2008 = _source392.dtor_element;
                      } else if (_source392.is_Map) {
                        DAST._IType _9556___mcc_h2010 = _source392.dtor_key;
                        DAST._IType _9557___mcc_h2011 = _source392.dtor_value;
                      } else if (_source392.is_SetBuilder) {
                        DAST._IType _9558___mcc_h2014 = _source392.dtor_element;
                      } else if (_source392.is_MapBuilder) {
                        DAST._IType _9559___mcc_h2016 = _source392.dtor_key;
                        DAST._IType _9560___mcc_h2017 = _source392.dtor_value;
                      } else if (_source392.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9561___mcc_h2020 = _source392.dtor_args;
                        DAST._IType _9562___mcc_h2021 = _source392.dtor_result;
                      } else if (_source392.is_Primitive) {
                        DAST._IPrimitive _9563___mcc_h2024 = _source392.dtor_Primitive_a0;
                      } else if (_source392.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9564___mcc_h2026 = _source392.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9565___mcc_h2028 = _source392.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9566_recursiveGen;
                        DCOMPUTF16._IOwnership _9567_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9568_recIdents;
                        RAST._IExpr _out4596;
                        DCOMPUTF16._IOwnership _out4597;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4598;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4596, out _out4597, out _out4598);
                        _9566_recursiveGen = _out4596;
                        _9567_recOwned = _out4597;
                        _9568_recIdents = _out4598;
                        RAST._IExpr _out4599;
                        DCOMPUTF16._IOwnership _out4600;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9566_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9524_nativeToType).dtor_value), _9567_recOwned, expectedOwnership, out _out4599, out _out4600);
                        r = _out4599;
                        resultingOwnership = _out4600;
                        readIdents = _9568_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4601;
                    DCOMPUTF16._IOwnership _out4602;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4603;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _9523_b), _9523_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4601, out _out4602, out _out4603);
                    r = _out4601;
                    resultingOwnership = _out4602;
                    readIdents = _out4603;
                  }
                }
              }
            } else if (_source389.is_Nullable) {
              DAST._IType _9569___mcc_h934 = _source389.dtor_Nullable_a0;
              {
                RAST._IExpr _9570_recursiveGen;
                DCOMPUTF16._IOwnership _9571_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9572_recIdents;
                RAST._IExpr _out4604;
                DCOMPUTF16._IOwnership _out4605;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4606;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4604, out _out4605, out _out4606);
                _9570_recursiveGen = _out4604;
                _9571_recOwned = _out4605;
                _9572_recIdents = _out4606;
                r = _9570_recursiveGen;
                if (object.Equals(_9571_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4607;
                DCOMPUTF16._IOwnership _out4608;
                DCOMPUTF16.COMP.FromOwnership(r, _9571_recOwned, expectedOwnership, out _out4607, out _out4608);
                r = _out4607;
                resultingOwnership = _out4608;
                readIdents = _9572_recIdents;
              }
            } else if (_source389.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9573___mcc_h936 = _source389.dtor_Tuple_a0;
              {
                RAST._IExpr _9574_recursiveGen;
                DCOMPUTF16._IOwnership _9575_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9576_recIdents;
                RAST._IExpr _out4609;
                DCOMPUTF16._IOwnership _out4610;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4611;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4609, out _out4610, out _out4611);
                _9574_recursiveGen = _out4609;
                _9575_recOwned = _out4610;
                _9576_recIdents = _out4611;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9574_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4612;
                DCOMPUTF16._IOwnership _out4613;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4612, out _out4613);
                r = _out4612;
                resultingOwnership = _out4613;
                readIdents = _9576_recIdents;
              }
            } else if (_source389.is_Array) {
              DAST._IType _9577___mcc_h938 = _source389.dtor_element;
              BigInteger _9578___mcc_h939 = _source389.dtor_dims;
              {
                RAST._IExpr _9579_recursiveGen;
                DCOMPUTF16._IOwnership _9580_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9581_recIdents;
                RAST._IExpr _out4614;
                DCOMPUTF16._IOwnership _out4615;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4616;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4614, out _out4615, out _out4616);
                _9579_recursiveGen = _out4614;
                _9580_recOwned = _out4615;
                _9581_recIdents = _out4616;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9579_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4617;
                DCOMPUTF16._IOwnership _out4618;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4617, out _out4618);
                r = _out4617;
                resultingOwnership = _out4618;
                readIdents = _9581_recIdents;
              }
            } else if (_source389.is_Seq) {
              DAST._IType _9582___mcc_h942 = _source389.dtor_element;
              {
                RAST._IExpr _9583_recursiveGen;
                DCOMPUTF16._IOwnership _9584_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9585_recIdents;
                RAST._IExpr _out4619;
                DCOMPUTF16._IOwnership _out4620;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4621;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4619, out _out4620, out _out4621);
                _9583_recursiveGen = _out4619;
                _9584_recOwned = _out4620;
                _9585_recIdents = _out4621;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9583_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4622;
                DCOMPUTF16._IOwnership _out4623;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4622, out _out4623);
                r = _out4622;
                resultingOwnership = _out4623;
                readIdents = _9585_recIdents;
              }
            } else if (_source389.is_Set) {
              DAST._IType _9586___mcc_h944 = _source389.dtor_element;
              {
                RAST._IExpr _9587_recursiveGen;
                DCOMPUTF16._IOwnership _9588_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9589_recIdents;
                RAST._IExpr _out4624;
                DCOMPUTF16._IOwnership _out4625;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4626;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4624, out _out4625, out _out4626);
                _9587_recursiveGen = _out4624;
                _9588_recOwned = _out4625;
                _9589_recIdents = _out4626;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9587_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4627;
                DCOMPUTF16._IOwnership _out4628;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4627, out _out4628);
                r = _out4627;
                resultingOwnership = _out4628;
                readIdents = _9589_recIdents;
              }
            } else if (_source389.is_Multiset) {
              DAST._IType _9590___mcc_h946 = _source389.dtor_element;
              {
                RAST._IExpr _9591_recursiveGen;
                DCOMPUTF16._IOwnership _9592_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9593_recIdents;
                RAST._IExpr _out4629;
                DCOMPUTF16._IOwnership _out4630;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4631;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4629, out _out4630, out _out4631);
                _9591_recursiveGen = _out4629;
                _9592_recOwned = _out4630;
                _9593_recIdents = _out4631;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9591_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4632;
                DCOMPUTF16._IOwnership _out4633;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4632, out _out4633);
                r = _out4632;
                resultingOwnership = _out4633;
                readIdents = _9593_recIdents;
              }
            } else if (_source389.is_Map) {
              DAST._IType _9594___mcc_h948 = _source389.dtor_key;
              DAST._IType _9595___mcc_h949 = _source389.dtor_value;
              {
                RAST._IExpr _9596_recursiveGen;
                DCOMPUTF16._IOwnership _9597_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9598_recIdents;
                RAST._IExpr _out4634;
                DCOMPUTF16._IOwnership _out4635;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4636;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4634, out _out4635, out _out4636);
                _9596_recursiveGen = _out4634;
                _9597_recOwned = _out4635;
                _9598_recIdents = _out4636;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9596_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4637;
                DCOMPUTF16._IOwnership _out4638;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4637, out _out4638);
                r = _out4637;
                resultingOwnership = _out4638;
                readIdents = _9598_recIdents;
              }
            } else if (_source389.is_SetBuilder) {
              DAST._IType _9599___mcc_h952 = _source389.dtor_element;
              {
                RAST._IExpr _9600_recursiveGen;
                DCOMPUTF16._IOwnership _9601_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9602_recIdents;
                RAST._IExpr _out4639;
                DCOMPUTF16._IOwnership _out4640;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4641;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4639, out _out4640, out _out4641);
                _9600_recursiveGen = _out4639;
                _9601_recOwned = _out4640;
                _9602_recIdents = _out4641;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9600_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4642;
                DCOMPUTF16._IOwnership _out4643;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4642, out _out4643);
                r = _out4642;
                resultingOwnership = _out4643;
                readIdents = _9602_recIdents;
              }
            } else if (_source389.is_MapBuilder) {
              DAST._IType _9603___mcc_h954 = _source389.dtor_key;
              DAST._IType _9604___mcc_h955 = _source389.dtor_value;
              {
                RAST._IExpr _9605_recursiveGen;
                DCOMPUTF16._IOwnership _9606_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9607_recIdents;
                RAST._IExpr _out4644;
                DCOMPUTF16._IOwnership _out4645;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4646;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4644, out _out4645, out _out4646);
                _9605_recursiveGen = _out4644;
                _9606_recOwned = _out4645;
                _9607_recIdents = _out4646;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9605_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4647;
                DCOMPUTF16._IOwnership _out4648;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4647, out _out4648);
                r = _out4647;
                resultingOwnership = _out4648;
                readIdents = _9607_recIdents;
              }
            } else if (_source389.is_Arrow) {
              Dafny.ISequence<DAST._IType> _9608___mcc_h958 = _source389.dtor_args;
              DAST._IType _9609___mcc_h959 = _source389.dtor_result;
              {
                RAST._IExpr _9610_recursiveGen;
                DCOMPUTF16._IOwnership _9611_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9612_recIdents;
                RAST._IExpr _out4649;
                DCOMPUTF16._IOwnership _out4650;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4651;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4649, out _out4650, out _out4651);
                _9610_recursiveGen = _out4649;
                _9611_recOwned = _out4650;
                _9612_recIdents = _out4651;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9610_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4652;
                DCOMPUTF16._IOwnership _out4653;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4652, out _out4653);
                r = _out4652;
                resultingOwnership = _out4653;
                readIdents = _9612_recIdents;
              }
            } else if (_source389.is_Primitive) {
              DAST._IPrimitive _9613___mcc_h962 = _source389.dtor_Primitive_a0;
              DAST._IPrimitive _source394 = _9613___mcc_h962;
              if (_source394.is_Int) {
                {
                  RAST._IExpr _9614_recursiveGen;
                  DCOMPUTF16._IOwnership _9615___v83;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9616_recIdents;
                  RAST._IExpr _out4654;
                  DCOMPUTF16._IOwnership _out4655;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4656;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4654, out _out4655, out _out4656);
                  _9614_recursiveGen = _out4654;
                  _9615___v83 = _out4655;
                  _9616_recIdents = _out4656;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_9614_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out4657;
                  DCOMPUTF16._IOwnership _out4658;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4657, out _out4658);
                  r = _out4657;
                  resultingOwnership = _out4658;
                  readIdents = _9616_recIdents;
                }
              } else if (_source394.is_Real) {
                {
                  RAST._IExpr _9617_recursiveGen;
                  DCOMPUTF16._IOwnership _9618_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9619_recIdents;
                  RAST._IExpr _out4659;
                  DCOMPUTF16._IOwnership _out4660;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4661;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4659, out _out4660, out _out4661);
                  _9617_recursiveGen = _out4659;
                  _9618_recOwned = _out4660;
                  _9619_recIdents = _out4661;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9617_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4662;
                  DCOMPUTF16._IOwnership _out4663;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4662, out _out4663);
                  r = _out4662;
                  resultingOwnership = _out4663;
                  readIdents = _9619_recIdents;
                }
              } else if (_source394.is_String) {
                {
                  RAST._IExpr _9620_recursiveGen;
                  DCOMPUTF16._IOwnership _9621_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9622_recIdents;
                  RAST._IExpr _out4664;
                  DCOMPUTF16._IOwnership _out4665;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4666;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4664, out _out4665, out _out4666);
                  _9620_recursiveGen = _out4664;
                  _9621_recOwned = _out4665;
                  _9622_recIdents = _out4666;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9620_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4667;
                  DCOMPUTF16._IOwnership _out4668;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4667, out _out4668);
                  r = _out4667;
                  resultingOwnership = _out4668;
                  readIdents = _9622_recIdents;
                }
              } else if (_source394.is_Bool) {
                {
                  RAST._IExpr _9623_recursiveGen;
                  DCOMPUTF16._IOwnership _9624_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9625_recIdents;
                  RAST._IExpr _out4669;
                  DCOMPUTF16._IOwnership _out4670;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4671;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4669, out _out4670, out _out4671);
                  _9623_recursiveGen = _out4669;
                  _9624_recOwned = _out4670;
                  _9625_recIdents = _out4671;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9623_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4672;
                  DCOMPUTF16._IOwnership _out4673;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4672, out _out4673);
                  r = _out4672;
                  resultingOwnership = _out4673;
                  readIdents = _9625_recIdents;
                }
              } else {
                {
                  RAST._IExpr _9626_recursiveGen;
                  DCOMPUTF16._IOwnership _9627_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9628_recIdents;
                  RAST._IExpr _out4674;
                  DCOMPUTF16._IOwnership _out4675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4676;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4674, out _out4675, out _out4676);
                  _9626_recursiveGen = _out4674;
                  _9627_recOwned = _out4675;
                  _9628_recIdents = _out4676;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9626_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4677;
                  DCOMPUTF16._IOwnership _out4678;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4677, out _out4678);
                  r = _out4677;
                  resultingOwnership = _out4678;
                  readIdents = _9628_recIdents;
                }
              }
            } else if (_source389.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _9629___mcc_h964 = _source389.dtor_Passthrough_a0;
              {
                RAST._IExpr _9630_recursiveGen;
                DCOMPUTF16._IOwnership _9631_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9632_recIdents;
                RAST._IExpr _out4679;
                DCOMPUTF16._IOwnership _out4680;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4681;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4679, out _out4680, out _out4681);
                _9630_recursiveGen = _out4679;
                _9631_recOwned = _out4680;
                _9632_recIdents = _out4681;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9630_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4682;
                DCOMPUTF16._IOwnership _out4683;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4682, out _out4683);
                r = _out4682;
                resultingOwnership = _out4683;
                readIdents = _9632_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _9633___mcc_h966 = _source389.dtor_TypeArg_a0;
              {
                RAST._IExpr _9634_recursiveGen;
                DCOMPUTF16._IOwnership _9635_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9636_recIdents;
                RAST._IExpr _out4684;
                DCOMPUTF16._IOwnership _out4685;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4686;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4684, out _out4685, out _out4686);
                _9634_recursiveGen = _out4684;
                _9635_recOwned = _out4685;
                _9636_recIdents = _out4686;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9634_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4687;
                DCOMPUTF16._IOwnership _out4688;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4687, out _out4688);
                r = _out4687;
                resultingOwnership = _out4688;
                readIdents = _9636_recIdents;
              }
            }
          } else if (_source382.is_String) {
            DAST._IType _source395 = _7662___mcc_h1;
            if (_source395.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9637___mcc_h968 = _source395.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9638___mcc_h969 = _source395.dtor_typeArgs;
              DAST._IResolvedType _9639___mcc_h970 = _source395.dtor_resolved;
              DAST._IResolvedType _source396 = _9639___mcc_h970;
              if (_source396.is_Datatype) {
                DAST._IDatatypeType _9640___mcc_h974 = _source396.dtor_datatypeType;
                {
                  RAST._IExpr _9641_recursiveGen;
                  DCOMPUTF16._IOwnership _9642_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9643_recIdents;
                  RAST._IExpr _out4689;
                  DCOMPUTF16._IOwnership _out4690;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4691;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4689, out _out4690, out _out4691);
                  _9641_recursiveGen = _out4689;
                  _9642_recOwned = _out4690;
                  _9643_recIdents = _out4691;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9641_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4692;
                  DCOMPUTF16._IOwnership _out4693;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4692, out _out4693);
                  r = _out4692;
                  resultingOwnership = _out4693;
                  readIdents = _9643_recIdents;
                }
              } else if (_source396.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9644___mcc_h976 = _source396.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9645___mcc_h977 = _source396.dtor_attributes;
                {
                  RAST._IExpr _9646_recursiveGen;
                  DCOMPUTF16._IOwnership _9647_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9648_recIdents;
                  RAST._IExpr _out4694;
                  DCOMPUTF16._IOwnership _out4695;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4696;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4694, out _out4695, out _out4696);
                  _9646_recursiveGen = _out4694;
                  _9647_recOwned = _out4695;
                  _9648_recIdents = _out4696;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9646_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4697;
                  DCOMPUTF16._IOwnership _out4698;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4697, out _out4698);
                  r = _out4697;
                  resultingOwnership = _out4698;
                  readIdents = _9648_recIdents;
                }
              } else {
                DAST._IType _9649___mcc_h980 = _source396.dtor_baseType;
                DAST._INewtypeRange _9650___mcc_h981 = _source396.dtor_range;
                bool _9651___mcc_h982 = _source396.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9652___mcc_h983 = _source396.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9653_attributes = _9652___mcc_h983;
                bool _9654_erase = _9651___mcc_h982;
                DAST._INewtypeRange _9655_range = _9650___mcc_h981;
                DAST._IType _9656_b = _9649___mcc_h980;
                {
                  Std.Wrappers._IOption<RAST._IType> _9657_nativeToType;
                  _9657_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9656_b, _9655_range);
                  if (object.Equals(_7656_fromTpe, _9656_b)) {
                    RAST._IExpr _9658_recursiveGen;
                    DCOMPUTF16._IOwnership _9659_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9660_recIdents;
                    RAST._IExpr _out4699;
                    DCOMPUTF16._IOwnership _out4700;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4701;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4699, out _out4700, out _out4701);
                    _9658_recursiveGen = _out4699;
                    _9659_recOwned = _out4700;
                    _9660_recIdents = _out4701;
                    readIdents = _9660_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source397 = _9657_nativeToType;
                    if (_source397.is_None) {
                      if (_9654_erase) {
                        r = _9658_recursiveGen;
                      } else {
                        RAST._IType _9661_rhsType;
                        RAST._IType _out4702;
                        _out4702 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                        _9661_rhsType = _out4702;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9661_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9658_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4703;
                      DCOMPUTF16._IOwnership _out4704;
                      DCOMPUTF16.COMP.FromOwnership(r, _9659_recOwned, expectedOwnership, out _out4703, out _out4704);
                      r = _out4703;
                      resultingOwnership = _out4704;
                    } else {
                      RAST._IType _9662___mcc_h2030 = _source397.dtor_value;
                      RAST._IType _9663_v = _9662___mcc_h2030;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_9658_recursiveGen, RAST.Expr.create_ExprFromType(_9663_v)));
                      RAST._IExpr _out4705;
                      DCOMPUTF16._IOwnership _out4706;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4705, out _out4706);
                      r = _out4705;
                      resultingOwnership = _out4706;
                    }
                  } else {
                    if ((_9657_nativeToType).is_Some) {
                      DAST._IType _source398 = _7656_fromTpe;
                      if (_source398.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9664___mcc_h2031 = _source398.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9665___mcc_h2032 = _source398.dtor_typeArgs;
                        DAST._IResolvedType _9666___mcc_h2033 = _source398.dtor_resolved;
                        DAST._IResolvedType _source399 = _9666___mcc_h2033;
                        if (_source399.is_Datatype) {
                          DAST._IDatatypeType _9667___mcc_h2037 = _source399.dtor_datatypeType;
                        } else if (_source399.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9668___mcc_h2039 = _source399.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9669___mcc_h2040 = _source399.dtor_attributes;
                        } else {
                          DAST._IType _9670___mcc_h2043 = _source399.dtor_baseType;
                          DAST._INewtypeRange _9671___mcc_h2044 = _source399.dtor_range;
                          bool _9672___mcc_h2045 = _source399.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9673___mcc_h2046 = _source399.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9674_attributes0 = _9673___mcc_h2046;
                          bool _9675_erase0 = _9672___mcc_h2045;
                          DAST._INewtypeRange _9676_range0 = _9671___mcc_h2044;
                          DAST._IType _9677_b0 = _9670___mcc_h2043;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9678_nativeFromType;
                            _9678_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9677_b0, _9676_range0);
                            if ((_9678_nativeFromType).is_Some) {
                              RAST._IExpr _9679_recursiveGen;
                              DCOMPUTF16._IOwnership _9680_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9681_recIdents;
                              RAST._IExpr _out4707;
                              DCOMPUTF16._IOwnership _out4708;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4709;
                              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4707, out _out4708, out _out4709);
                              _9679_recursiveGen = _out4707;
                              _9680_recOwned = _out4708;
                              _9681_recIdents = _out4709;
                              RAST._IExpr _out4710;
                              DCOMPUTF16._IOwnership _out4711;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9679_recursiveGen, (_9657_nativeToType).dtor_value), _9680_recOwned, expectedOwnership, out _out4710, out _out4711);
                              r = _out4710;
                              resultingOwnership = _out4711;
                              readIdents = _9681_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source398.is_Nullable) {
                        DAST._IType _9682___mcc_h2051 = _source398.dtor_Nullable_a0;
                      } else if (_source398.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9683___mcc_h2053 = _source398.dtor_Tuple_a0;
                      } else if (_source398.is_Array) {
                        DAST._IType _9684___mcc_h2055 = _source398.dtor_element;
                        BigInteger _9685___mcc_h2056 = _source398.dtor_dims;
                      } else if (_source398.is_Seq) {
                        DAST._IType _9686___mcc_h2059 = _source398.dtor_element;
                      } else if (_source398.is_Set) {
                        DAST._IType _9687___mcc_h2061 = _source398.dtor_element;
                      } else if (_source398.is_Multiset) {
                        DAST._IType _9688___mcc_h2063 = _source398.dtor_element;
                      } else if (_source398.is_Map) {
                        DAST._IType _9689___mcc_h2065 = _source398.dtor_key;
                        DAST._IType _9690___mcc_h2066 = _source398.dtor_value;
                      } else if (_source398.is_SetBuilder) {
                        DAST._IType _9691___mcc_h2069 = _source398.dtor_element;
                      } else if (_source398.is_MapBuilder) {
                        DAST._IType _9692___mcc_h2071 = _source398.dtor_key;
                        DAST._IType _9693___mcc_h2072 = _source398.dtor_value;
                      } else if (_source398.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9694___mcc_h2075 = _source398.dtor_args;
                        DAST._IType _9695___mcc_h2076 = _source398.dtor_result;
                      } else if (_source398.is_Primitive) {
                        DAST._IPrimitive _9696___mcc_h2079 = _source398.dtor_Primitive_a0;
                      } else if (_source398.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9697___mcc_h2081 = _source398.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9698___mcc_h2083 = _source398.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9699_recursiveGen;
                        DCOMPUTF16._IOwnership _9700_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9701_recIdents;
                        RAST._IExpr _out4712;
                        DCOMPUTF16._IOwnership _out4713;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4714;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4712, out _out4713, out _out4714);
                        _9699_recursiveGen = _out4712;
                        _9700_recOwned = _out4713;
                        _9701_recIdents = _out4714;
                        RAST._IExpr _out4715;
                        DCOMPUTF16._IOwnership _out4716;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9699_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9657_nativeToType).dtor_value), _9700_recOwned, expectedOwnership, out _out4715, out _out4716);
                        r = _out4715;
                        resultingOwnership = _out4716;
                        readIdents = _9701_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4717;
                    DCOMPUTF16._IOwnership _out4718;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4719;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _9656_b), _9656_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4717, out _out4718, out _out4719);
                    r = _out4717;
                    resultingOwnership = _out4718;
                    readIdents = _out4719;
                  }
                }
              }
            } else if (_source395.is_Nullable) {
              DAST._IType _9702___mcc_h988 = _source395.dtor_Nullable_a0;
              {
                RAST._IExpr _9703_recursiveGen;
                DCOMPUTF16._IOwnership _9704_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9705_recIdents;
                RAST._IExpr _out4720;
                DCOMPUTF16._IOwnership _out4721;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4722;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4720, out _out4721, out _out4722);
                _9703_recursiveGen = _out4720;
                _9704_recOwned = _out4721;
                _9705_recIdents = _out4722;
                r = _9703_recursiveGen;
                if (object.Equals(_9704_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4723;
                DCOMPUTF16._IOwnership _out4724;
                DCOMPUTF16.COMP.FromOwnership(r, _9704_recOwned, expectedOwnership, out _out4723, out _out4724);
                r = _out4723;
                resultingOwnership = _out4724;
                readIdents = _9705_recIdents;
              }
            } else if (_source395.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9706___mcc_h990 = _source395.dtor_Tuple_a0;
              {
                RAST._IExpr _9707_recursiveGen;
                DCOMPUTF16._IOwnership _9708_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9709_recIdents;
                RAST._IExpr _out4725;
                DCOMPUTF16._IOwnership _out4726;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4727;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4725, out _out4726, out _out4727);
                _9707_recursiveGen = _out4725;
                _9708_recOwned = _out4726;
                _9709_recIdents = _out4727;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9707_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4728;
                DCOMPUTF16._IOwnership _out4729;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4728, out _out4729);
                r = _out4728;
                resultingOwnership = _out4729;
                readIdents = _9709_recIdents;
              }
            } else if (_source395.is_Array) {
              DAST._IType _9710___mcc_h992 = _source395.dtor_element;
              BigInteger _9711___mcc_h993 = _source395.dtor_dims;
              {
                RAST._IExpr _9712_recursiveGen;
                DCOMPUTF16._IOwnership _9713_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9714_recIdents;
                RAST._IExpr _out4730;
                DCOMPUTF16._IOwnership _out4731;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4732;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4730, out _out4731, out _out4732);
                _9712_recursiveGen = _out4730;
                _9713_recOwned = _out4731;
                _9714_recIdents = _out4732;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9712_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4733;
                DCOMPUTF16._IOwnership _out4734;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4733, out _out4734);
                r = _out4733;
                resultingOwnership = _out4734;
                readIdents = _9714_recIdents;
              }
            } else if (_source395.is_Seq) {
              DAST._IType _9715___mcc_h996 = _source395.dtor_element;
              {
                RAST._IExpr _9716_recursiveGen;
                DCOMPUTF16._IOwnership _9717_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9718_recIdents;
                RAST._IExpr _out4735;
                DCOMPUTF16._IOwnership _out4736;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4737;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4735, out _out4736, out _out4737);
                _9716_recursiveGen = _out4735;
                _9717_recOwned = _out4736;
                _9718_recIdents = _out4737;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9716_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4738;
                DCOMPUTF16._IOwnership _out4739;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4738, out _out4739);
                r = _out4738;
                resultingOwnership = _out4739;
                readIdents = _9718_recIdents;
              }
            } else if (_source395.is_Set) {
              DAST._IType _9719___mcc_h998 = _source395.dtor_element;
              {
                RAST._IExpr _9720_recursiveGen;
                DCOMPUTF16._IOwnership _9721_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9722_recIdents;
                RAST._IExpr _out4740;
                DCOMPUTF16._IOwnership _out4741;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4742;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4740, out _out4741, out _out4742);
                _9720_recursiveGen = _out4740;
                _9721_recOwned = _out4741;
                _9722_recIdents = _out4742;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9720_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4743;
                DCOMPUTF16._IOwnership _out4744;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4743, out _out4744);
                r = _out4743;
                resultingOwnership = _out4744;
                readIdents = _9722_recIdents;
              }
            } else if (_source395.is_Multiset) {
              DAST._IType _9723___mcc_h1000 = _source395.dtor_element;
              {
                RAST._IExpr _9724_recursiveGen;
                DCOMPUTF16._IOwnership _9725_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9726_recIdents;
                RAST._IExpr _out4745;
                DCOMPUTF16._IOwnership _out4746;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4747;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4745, out _out4746, out _out4747);
                _9724_recursiveGen = _out4745;
                _9725_recOwned = _out4746;
                _9726_recIdents = _out4747;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9724_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4748;
                DCOMPUTF16._IOwnership _out4749;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4748, out _out4749);
                r = _out4748;
                resultingOwnership = _out4749;
                readIdents = _9726_recIdents;
              }
            } else if (_source395.is_Map) {
              DAST._IType _9727___mcc_h1002 = _source395.dtor_key;
              DAST._IType _9728___mcc_h1003 = _source395.dtor_value;
              {
                RAST._IExpr _9729_recursiveGen;
                DCOMPUTF16._IOwnership _9730_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9731_recIdents;
                RAST._IExpr _out4750;
                DCOMPUTF16._IOwnership _out4751;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4752;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4750, out _out4751, out _out4752);
                _9729_recursiveGen = _out4750;
                _9730_recOwned = _out4751;
                _9731_recIdents = _out4752;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9729_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4753;
                DCOMPUTF16._IOwnership _out4754;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4753, out _out4754);
                r = _out4753;
                resultingOwnership = _out4754;
                readIdents = _9731_recIdents;
              }
            } else if (_source395.is_SetBuilder) {
              DAST._IType _9732___mcc_h1006 = _source395.dtor_element;
              {
                RAST._IExpr _9733_recursiveGen;
                DCOMPUTF16._IOwnership _9734_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9735_recIdents;
                RAST._IExpr _out4755;
                DCOMPUTF16._IOwnership _out4756;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4757;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4755, out _out4756, out _out4757);
                _9733_recursiveGen = _out4755;
                _9734_recOwned = _out4756;
                _9735_recIdents = _out4757;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9733_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4758;
                DCOMPUTF16._IOwnership _out4759;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4758, out _out4759);
                r = _out4758;
                resultingOwnership = _out4759;
                readIdents = _9735_recIdents;
              }
            } else if (_source395.is_MapBuilder) {
              DAST._IType _9736___mcc_h1008 = _source395.dtor_key;
              DAST._IType _9737___mcc_h1009 = _source395.dtor_value;
              {
                RAST._IExpr _9738_recursiveGen;
                DCOMPUTF16._IOwnership _9739_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9740_recIdents;
                RAST._IExpr _out4760;
                DCOMPUTF16._IOwnership _out4761;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4762;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4760, out _out4761, out _out4762);
                _9738_recursiveGen = _out4760;
                _9739_recOwned = _out4761;
                _9740_recIdents = _out4762;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9738_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4763;
                DCOMPUTF16._IOwnership _out4764;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4763, out _out4764);
                r = _out4763;
                resultingOwnership = _out4764;
                readIdents = _9740_recIdents;
              }
            } else if (_source395.is_Arrow) {
              Dafny.ISequence<DAST._IType> _9741___mcc_h1012 = _source395.dtor_args;
              DAST._IType _9742___mcc_h1013 = _source395.dtor_result;
              {
                RAST._IExpr _9743_recursiveGen;
                DCOMPUTF16._IOwnership _9744_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9745_recIdents;
                RAST._IExpr _out4765;
                DCOMPUTF16._IOwnership _out4766;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4767;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4765, out _out4766, out _out4767);
                _9743_recursiveGen = _out4765;
                _9744_recOwned = _out4766;
                _9745_recIdents = _out4767;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9743_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4768;
                DCOMPUTF16._IOwnership _out4769;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4768, out _out4769);
                r = _out4768;
                resultingOwnership = _out4769;
                readIdents = _9745_recIdents;
              }
            } else if (_source395.is_Primitive) {
              DAST._IPrimitive _9746___mcc_h1016 = _source395.dtor_Primitive_a0;
              {
                RAST._IExpr _9747_recursiveGen;
                DCOMPUTF16._IOwnership _9748_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9749_recIdents;
                RAST._IExpr _out4770;
                DCOMPUTF16._IOwnership _out4771;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4772;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4770, out _out4771, out _out4772);
                _9747_recursiveGen = _out4770;
                _9748_recOwned = _out4771;
                _9749_recIdents = _out4772;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9747_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4773;
                DCOMPUTF16._IOwnership _out4774;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4773, out _out4774);
                r = _out4773;
                resultingOwnership = _out4774;
                readIdents = _9749_recIdents;
              }
            } else if (_source395.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _9750___mcc_h1018 = _source395.dtor_Passthrough_a0;
              {
                RAST._IExpr _9751_recursiveGen;
                DCOMPUTF16._IOwnership _9752_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9753_recIdents;
                RAST._IExpr _out4775;
                DCOMPUTF16._IOwnership _out4776;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4777;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4775, out _out4776, out _out4777);
                _9751_recursiveGen = _out4775;
                _9752_recOwned = _out4776;
                _9753_recIdents = _out4777;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9751_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4778;
                DCOMPUTF16._IOwnership _out4779;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4778, out _out4779);
                r = _out4778;
                resultingOwnership = _out4779;
                readIdents = _9753_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _9754___mcc_h1020 = _source395.dtor_TypeArg_a0;
              {
                RAST._IExpr _9755_recursiveGen;
                DCOMPUTF16._IOwnership _9756_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9757_recIdents;
                RAST._IExpr _out4780;
                DCOMPUTF16._IOwnership _out4781;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4782;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4780, out _out4781, out _out4782);
                _9755_recursiveGen = _out4780;
                _9756_recOwned = _out4781;
                _9757_recIdents = _out4782;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9755_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4783;
                DCOMPUTF16._IOwnership _out4784;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4783, out _out4784);
                r = _out4783;
                resultingOwnership = _out4784;
                readIdents = _9757_recIdents;
              }
            }
          } else if (_source382.is_Bool) {
            DAST._IType _source400 = _7662___mcc_h1;
            if (_source400.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9758___mcc_h1022 = _source400.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9759___mcc_h1023 = _source400.dtor_typeArgs;
              DAST._IResolvedType _9760___mcc_h1024 = _source400.dtor_resolved;
              DAST._IResolvedType _source401 = _9760___mcc_h1024;
              if (_source401.is_Datatype) {
                DAST._IDatatypeType _9761___mcc_h1028 = _source401.dtor_datatypeType;
                {
                  RAST._IExpr _9762_recursiveGen;
                  DCOMPUTF16._IOwnership _9763_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9764_recIdents;
                  RAST._IExpr _out4785;
                  DCOMPUTF16._IOwnership _out4786;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4787;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4785, out _out4786, out _out4787);
                  _9762_recursiveGen = _out4785;
                  _9763_recOwned = _out4786;
                  _9764_recIdents = _out4787;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9762_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4788;
                  DCOMPUTF16._IOwnership _out4789;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4788, out _out4789);
                  r = _out4788;
                  resultingOwnership = _out4789;
                  readIdents = _9764_recIdents;
                }
              } else if (_source401.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9765___mcc_h1030 = _source401.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9766___mcc_h1031 = _source401.dtor_attributes;
                {
                  RAST._IExpr _9767_recursiveGen;
                  DCOMPUTF16._IOwnership _9768_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9769_recIdents;
                  RAST._IExpr _out4790;
                  DCOMPUTF16._IOwnership _out4791;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4792;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4790, out _out4791, out _out4792);
                  _9767_recursiveGen = _out4790;
                  _9768_recOwned = _out4791;
                  _9769_recIdents = _out4792;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9767_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4793;
                  DCOMPUTF16._IOwnership _out4794;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4793, out _out4794);
                  r = _out4793;
                  resultingOwnership = _out4794;
                  readIdents = _9769_recIdents;
                }
              } else {
                DAST._IType _9770___mcc_h1034 = _source401.dtor_baseType;
                DAST._INewtypeRange _9771___mcc_h1035 = _source401.dtor_range;
                bool _9772___mcc_h1036 = _source401.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9773___mcc_h1037 = _source401.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9774_attributes = _9773___mcc_h1037;
                bool _9775_erase = _9772___mcc_h1036;
                DAST._INewtypeRange _9776_range = _9771___mcc_h1035;
                DAST._IType _9777_b = _9770___mcc_h1034;
                {
                  Std.Wrappers._IOption<RAST._IType> _9778_nativeToType;
                  _9778_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9777_b, _9776_range);
                  if (object.Equals(_7656_fromTpe, _9777_b)) {
                    RAST._IExpr _9779_recursiveGen;
                    DCOMPUTF16._IOwnership _9780_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9781_recIdents;
                    RAST._IExpr _out4795;
                    DCOMPUTF16._IOwnership _out4796;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4797;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4795, out _out4796, out _out4797);
                    _9779_recursiveGen = _out4795;
                    _9780_recOwned = _out4796;
                    _9781_recIdents = _out4797;
                    readIdents = _9781_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source402 = _9778_nativeToType;
                    if (_source402.is_None) {
                      if (_9775_erase) {
                        r = _9779_recursiveGen;
                      } else {
                        RAST._IType _9782_rhsType;
                        RAST._IType _out4798;
                        _out4798 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                        _9782_rhsType = _out4798;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9782_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9779_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4799;
                      DCOMPUTF16._IOwnership _out4800;
                      DCOMPUTF16.COMP.FromOwnership(r, _9780_recOwned, expectedOwnership, out _out4799, out _out4800);
                      r = _out4799;
                      resultingOwnership = _out4800;
                    } else {
                      RAST._IType _9783___mcc_h2085 = _source402.dtor_value;
                      RAST._IType _9784_v = _9783___mcc_h2085;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_9779_recursiveGen, RAST.Expr.create_ExprFromType(_9784_v)));
                      RAST._IExpr _out4801;
                      DCOMPUTF16._IOwnership _out4802;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4801, out _out4802);
                      r = _out4801;
                      resultingOwnership = _out4802;
                    }
                  } else {
                    if ((_9778_nativeToType).is_Some) {
                      DAST._IType _source403 = _7656_fromTpe;
                      if (_source403.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9785___mcc_h2086 = _source403.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9786___mcc_h2087 = _source403.dtor_typeArgs;
                        DAST._IResolvedType _9787___mcc_h2088 = _source403.dtor_resolved;
                        DAST._IResolvedType _source404 = _9787___mcc_h2088;
                        if (_source404.is_Datatype) {
                          DAST._IDatatypeType _9788___mcc_h2092 = _source404.dtor_datatypeType;
                        } else if (_source404.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9789___mcc_h2094 = _source404.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9790___mcc_h2095 = _source404.dtor_attributes;
                        } else {
                          DAST._IType _9791___mcc_h2098 = _source404.dtor_baseType;
                          DAST._INewtypeRange _9792___mcc_h2099 = _source404.dtor_range;
                          bool _9793___mcc_h2100 = _source404.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9794___mcc_h2101 = _source404.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9795_attributes0 = _9794___mcc_h2101;
                          bool _9796_erase0 = _9793___mcc_h2100;
                          DAST._INewtypeRange _9797_range0 = _9792___mcc_h2099;
                          DAST._IType _9798_b0 = _9791___mcc_h2098;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9799_nativeFromType;
                            _9799_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9798_b0, _9797_range0);
                            if ((_9799_nativeFromType).is_Some) {
                              RAST._IExpr _9800_recursiveGen;
                              DCOMPUTF16._IOwnership _9801_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9802_recIdents;
                              RAST._IExpr _out4803;
                              DCOMPUTF16._IOwnership _out4804;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4805;
                              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4803, out _out4804, out _out4805);
                              _9800_recursiveGen = _out4803;
                              _9801_recOwned = _out4804;
                              _9802_recIdents = _out4805;
                              RAST._IExpr _out4806;
                              DCOMPUTF16._IOwnership _out4807;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9800_recursiveGen, (_9778_nativeToType).dtor_value), _9801_recOwned, expectedOwnership, out _out4806, out _out4807);
                              r = _out4806;
                              resultingOwnership = _out4807;
                              readIdents = _9802_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source403.is_Nullable) {
                        DAST._IType _9803___mcc_h2106 = _source403.dtor_Nullable_a0;
                      } else if (_source403.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9804___mcc_h2108 = _source403.dtor_Tuple_a0;
                      } else if (_source403.is_Array) {
                        DAST._IType _9805___mcc_h2110 = _source403.dtor_element;
                        BigInteger _9806___mcc_h2111 = _source403.dtor_dims;
                      } else if (_source403.is_Seq) {
                        DAST._IType _9807___mcc_h2114 = _source403.dtor_element;
                      } else if (_source403.is_Set) {
                        DAST._IType _9808___mcc_h2116 = _source403.dtor_element;
                      } else if (_source403.is_Multiset) {
                        DAST._IType _9809___mcc_h2118 = _source403.dtor_element;
                      } else if (_source403.is_Map) {
                        DAST._IType _9810___mcc_h2120 = _source403.dtor_key;
                        DAST._IType _9811___mcc_h2121 = _source403.dtor_value;
                      } else if (_source403.is_SetBuilder) {
                        DAST._IType _9812___mcc_h2124 = _source403.dtor_element;
                      } else if (_source403.is_MapBuilder) {
                        DAST._IType _9813___mcc_h2126 = _source403.dtor_key;
                        DAST._IType _9814___mcc_h2127 = _source403.dtor_value;
                      } else if (_source403.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9815___mcc_h2130 = _source403.dtor_args;
                        DAST._IType _9816___mcc_h2131 = _source403.dtor_result;
                      } else if (_source403.is_Primitive) {
                        DAST._IPrimitive _9817___mcc_h2134 = _source403.dtor_Primitive_a0;
                      } else if (_source403.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9818___mcc_h2136 = _source403.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9819___mcc_h2138 = _source403.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9820_recursiveGen;
                        DCOMPUTF16._IOwnership _9821_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9822_recIdents;
                        RAST._IExpr _out4808;
                        DCOMPUTF16._IOwnership _out4809;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4810;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4808, out _out4809, out _out4810);
                        _9820_recursiveGen = _out4808;
                        _9821_recOwned = _out4809;
                        _9822_recIdents = _out4810;
                        RAST._IExpr _out4811;
                        DCOMPUTF16._IOwnership _out4812;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9820_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9778_nativeToType).dtor_value), _9821_recOwned, expectedOwnership, out _out4811, out _out4812);
                        r = _out4811;
                        resultingOwnership = _out4812;
                        readIdents = _9822_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4813;
                    DCOMPUTF16._IOwnership _out4814;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4815;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _9777_b), _9777_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4813, out _out4814, out _out4815);
                    r = _out4813;
                    resultingOwnership = _out4814;
                    readIdents = _out4815;
                  }
                }
              }
            } else if (_source400.is_Nullable) {
              DAST._IType _9823___mcc_h1042 = _source400.dtor_Nullable_a0;
              {
                RAST._IExpr _9824_recursiveGen;
                DCOMPUTF16._IOwnership _9825_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9826_recIdents;
                RAST._IExpr _out4816;
                DCOMPUTF16._IOwnership _out4817;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4818;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4816, out _out4817, out _out4818);
                _9824_recursiveGen = _out4816;
                _9825_recOwned = _out4817;
                _9826_recIdents = _out4818;
                r = _9824_recursiveGen;
                if (object.Equals(_9825_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4819;
                DCOMPUTF16._IOwnership _out4820;
                DCOMPUTF16.COMP.FromOwnership(r, _9825_recOwned, expectedOwnership, out _out4819, out _out4820);
                r = _out4819;
                resultingOwnership = _out4820;
                readIdents = _9826_recIdents;
              }
            } else if (_source400.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9827___mcc_h1044 = _source400.dtor_Tuple_a0;
              {
                RAST._IExpr _9828_recursiveGen;
                DCOMPUTF16._IOwnership _9829_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9830_recIdents;
                RAST._IExpr _out4821;
                DCOMPUTF16._IOwnership _out4822;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4823;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4821, out _out4822, out _out4823);
                _9828_recursiveGen = _out4821;
                _9829_recOwned = _out4822;
                _9830_recIdents = _out4823;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9828_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4824;
                DCOMPUTF16._IOwnership _out4825;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4824, out _out4825);
                r = _out4824;
                resultingOwnership = _out4825;
                readIdents = _9830_recIdents;
              }
            } else if (_source400.is_Array) {
              DAST._IType _9831___mcc_h1046 = _source400.dtor_element;
              BigInteger _9832___mcc_h1047 = _source400.dtor_dims;
              {
                RAST._IExpr _9833_recursiveGen;
                DCOMPUTF16._IOwnership _9834_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9835_recIdents;
                RAST._IExpr _out4826;
                DCOMPUTF16._IOwnership _out4827;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4828;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4826, out _out4827, out _out4828);
                _9833_recursiveGen = _out4826;
                _9834_recOwned = _out4827;
                _9835_recIdents = _out4828;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9833_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4829;
                DCOMPUTF16._IOwnership _out4830;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4829, out _out4830);
                r = _out4829;
                resultingOwnership = _out4830;
                readIdents = _9835_recIdents;
              }
            } else if (_source400.is_Seq) {
              DAST._IType _9836___mcc_h1050 = _source400.dtor_element;
              {
                RAST._IExpr _9837_recursiveGen;
                DCOMPUTF16._IOwnership _9838_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9839_recIdents;
                RAST._IExpr _out4831;
                DCOMPUTF16._IOwnership _out4832;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4833;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4831, out _out4832, out _out4833);
                _9837_recursiveGen = _out4831;
                _9838_recOwned = _out4832;
                _9839_recIdents = _out4833;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9837_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4834;
                DCOMPUTF16._IOwnership _out4835;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4834, out _out4835);
                r = _out4834;
                resultingOwnership = _out4835;
                readIdents = _9839_recIdents;
              }
            } else if (_source400.is_Set) {
              DAST._IType _9840___mcc_h1052 = _source400.dtor_element;
              {
                RAST._IExpr _9841_recursiveGen;
                DCOMPUTF16._IOwnership _9842_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9843_recIdents;
                RAST._IExpr _out4836;
                DCOMPUTF16._IOwnership _out4837;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4838;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4836, out _out4837, out _out4838);
                _9841_recursiveGen = _out4836;
                _9842_recOwned = _out4837;
                _9843_recIdents = _out4838;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9841_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4839;
                DCOMPUTF16._IOwnership _out4840;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4839, out _out4840);
                r = _out4839;
                resultingOwnership = _out4840;
                readIdents = _9843_recIdents;
              }
            } else if (_source400.is_Multiset) {
              DAST._IType _9844___mcc_h1054 = _source400.dtor_element;
              {
                RAST._IExpr _9845_recursiveGen;
                DCOMPUTF16._IOwnership _9846_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9847_recIdents;
                RAST._IExpr _out4841;
                DCOMPUTF16._IOwnership _out4842;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4843;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4841, out _out4842, out _out4843);
                _9845_recursiveGen = _out4841;
                _9846_recOwned = _out4842;
                _9847_recIdents = _out4843;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9845_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4844;
                DCOMPUTF16._IOwnership _out4845;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4844, out _out4845);
                r = _out4844;
                resultingOwnership = _out4845;
                readIdents = _9847_recIdents;
              }
            } else if (_source400.is_Map) {
              DAST._IType _9848___mcc_h1056 = _source400.dtor_key;
              DAST._IType _9849___mcc_h1057 = _source400.dtor_value;
              {
                RAST._IExpr _9850_recursiveGen;
                DCOMPUTF16._IOwnership _9851_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9852_recIdents;
                RAST._IExpr _out4846;
                DCOMPUTF16._IOwnership _out4847;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4848;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4846, out _out4847, out _out4848);
                _9850_recursiveGen = _out4846;
                _9851_recOwned = _out4847;
                _9852_recIdents = _out4848;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9850_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4849;
                DCOMPUTF16._IOwnership _out4850;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4849, out _out4850);
                r = _out4849;
                resultingOwnership = _out4850;
                readIdents = _9852_recIdents;
              }
            } else if (_source400.is_SetBuilder) {
              DAST._IType _9853___mcc_h1060 = _source400.dtor_element;
              {
                RAST._IExpr _9854_recursiveGen;
                DCOMPUTF16._IOwnership _9855_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9856_recIdents;
                RAST._IExpr _out4851;
                DCOMPUTF16._IOwnership _out4852;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4853;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4851, out _out4852, out _out4853);
                _9854_recursiveGen = _out4851;
                _9855_recOwned = _out4852;
                _9856_recIdents = _out4853;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9854_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4854;
                DCOMPUTF16._IOwnership _out4855;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4854, out _out4855);
                r = _out4854;
                resultingOwnership = _out4855;
                readIdents = _9856_recIdents;
              }
            } else if (_source400.is_MapBuilder) {
              DAST._IType _9857___mcc_h1062 = _source400.dtor_key;
              DAST._IType _9858___mcc_h1063 = _source400.dtor_value;
              {
                RAST._IExpr _9859_recursiveGen;
                DCOMPUTF16._IOwnership _9860_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9861_recIdents;
                RAST._IExpr _out4856;
                DCOMPUTF16._IOwnership _out4857;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4858;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4856, out _out4857, out _out4858);
                _9859_recursiveGen = _out4856;
                _9860_recOwned = _out4857;
                _9861_recIdents = _out4858;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9859_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4859;
                DCOMPUTF16._IOwnership _out4860;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4859, out _out4860);
                r = _out4859;
                resultingOwnership = _out4860;
                readIdents = _9861_recIdents;
              }
            } else if (_source400.is_Arrow) {
              Dafny.ISequence<DAST._IType> _9862___mcc_h1066 = _source400.dtor_args;
              DAST._IType _9863___mcc_h1067 = _source400.dtor_result;
              {
                RAST._IExpr _9864_recursiveGen;
                DCOMPUTF16._IOwnership _9865_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9866_recIdents;
                RAST._IExpr _out4861;
                DCOMPUTF16._IOwnership _out4862;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4863;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4861, out _out4862, out _out4863);
                _9864_recursiveGen = _out4861;
                _9865_recOwned = _out4862;
                _9866_recIdents = _out4863;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9864_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4864;
                DCOMPUTF16._IOwnership _out4865;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4864, out _out4865);
                r = _out4864;
                resultingOwnership = _out4865;
                readIdents = _9866_recIdents;
              }
            } else if (_source400.is_Primitive) {
              DAST._IPrimitive _9867___mcc_h1070 = _source400.dtor_Primitive_a0;
              {
                RAST._IExpr _9868_recursiveGen;
                DCOMPUTF16._IOwnership _9869_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9870_recIdents;
                RAST._IExpr _out4866;
                DCOMPUTF16._IOwnership _out4867;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4868;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4866, out _out4867, out _out4868);
                _9868_recursiveGen = _out4866;
                _9869_recOwned = _out4867;
                _9870_recIdents = _out4868;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9868_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4869;
                DCOMPUTF16._IOwnership _out4870;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4869, out _out4870);
                r = _out4869;
                resultingOwnership = _out4870;
                readIdents = _9870_recIdents;
              }
            } else if (_source400.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _9871___mcc_h1072 = _source400.dtor_Passthrough_a0;
              {
                RAST._IExpr _9872_recursiveGen;
                DCOMPUTF16._IOwnership _9873_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9874_recIdents;
                RAST._IExpr _out4871;
                DCOMPUTF16._IOwnership _out4872;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4873;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4871, out _out4872, out _out4873);
                _9872_recursiveGen = _out4871;
                _9873_recOwned = _out4872;
                _9874_recIdents = _out4873;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9872_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4874;
                DCOMPUTF16._IOwnership _out4875;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4874, out _out4875);
                r = _out4874;
                resultingOwnership = _out4875;
                readIdents = _9874_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _9875___mcc_h1074 = _source400.dtor_TypeArg_a0;
              {
                RAST._IExpr _9876_recursiveGen;
                DCOMPUTF16._IOwnership _9877_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9878_recIdents;
                RAST._IExpr _out4876;
                DCOMPUTF16._IOwnership _out4877;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4878;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4876, out _out4877, out _out4878);
                _9876_recursiveGen = _out4876;
                _9877_recOwned = _out4877;
                _9878_recIdents = _out4878;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9876_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4879;
                DCOMPUTF16._IOwnership _out4880;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4879, out _out4880);
                r = _out4879;
                resultingOwnership = _out4880;
                readIdents = _9878_recIdents;
              }
            }
          } else {
            DAST._IType _source405 = _7662___mcc_h1;
            if (_source405.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9879___mcc_h1076 = _source405.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _9880___mcc_h1077 = _source405.dtor_typeArgs;
              DAST._IResolvedType _9881___mcc_h1078 = _source405.dtor_resolved;
              DAST._IResolvedType _source406 = _9881___mcc_h1078;
              if (_source406.is_Datatype) {
                DAST._IDatatypeType _9882___mcc_h1082 = _source406.dtor_datatypeType;
                {
                  RAST._IExpr _9883_recursiveGen;
                  DCOMPUTF16._IOwnership _9884_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9885_recIdents;
                  RAST._IExpr _out4881;
                  DCOMPUTF16._IOwnership _out4882;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4883;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4881, out _out4882, out _out4883);
                  _9883_recursiveGen = _out4881;
                  _9884_recOwned = _out4882;
                  _9885_recIdents = _out4883;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9883_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4884;
                  DCOMPUTF16._IOwnership _out4885;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4884, out _out4885);
                  r = _out4884;
                  resultingOwnership = _out4885;
                  readIdents = _9885_recIdents;
                }
              } else if (_source406.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9886___mcc_h1084 = _source406.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _9887___mcc_h1085 = _source406.dtor_attributes;
                {
                  RAST._IExpr _9888_recursiveGen;
                  DCOMPUTF16._IOwnership _9889_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9890_recIdents;
                  RAST._IExpr _out4886;
                  DCOMPUTF16._IOwnership _out4887;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4888;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4886, out _out4887, out _out4888);
                  _9888_recursiveGen = _out4886;
                  _9889_recOwned = _out4887;
                  _9890_recIdents = _out4888;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9888_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4889;
                  DCOMPUTF16._IOwnership _out4890;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4889, out _out4890);
                  r = _out4889;
                  resultingOwnership = _out4890;
                  readIdents = _9890_recIdents;
                }
              } else {
                DAST._IType _9891___mcc_h1088 = _source406.dtor_baseType;
                DAST._INewtypeRange _9892___mcc_h1089 = _source406.dtor_range;
                bool _9893___mcc_h1090 = _source406.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _9894___mcc_h1091 = _source406.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _9895_attributes = _9894___mcc_h1091;
                bool _9896_erase = _9893___mcc_h1090;
                DAST._INewtypeRange _9897_range = _9892___mcc_h1089;
                DAST._IType _9898_b = _9891___mcc_h1088;
                {
                  Std.Wrappers._IOption<RAST._IType> _9899_nativeToType;
                  _9899_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_9898_b, _9897_range);
                  if (object.Equals(_7656_fromTpe, _9898_b)) {
                    RAST._IExpr _9900_recursiveGen;
                    DCOMPUTF16._IOwnership _9901_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9902_recIdents;
                    RAST._IExpr _out4891;
                    DCOMPUTF16._IOwnership _out4892;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4893;
                    DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4891, out _out4892, out _out4893);
                    _9900_recursiveGen = _out4891;
                    _9901_recOwned = _out4892;
                    _9902_recIdents = _out4893;
                    readIdents = _9902_recIdents;
                    Std.Wrappers._IOption<RAST._IType> _source407 = _9899_nativeToType;
                    if (_source407.is_None) {
                      if (_9896_erase) {
                        r = _9900_recursiveGen;
                      } else {
                        RAST._IType _9903_rhsType;
                        RAST._IType _out4894;
                        _out4894 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                        _9903_rhsType = _out4894;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9903_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_9900_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4895;
                      DCOMPUTF16._IOwnership _out4896;
                      DCOMPUTF16.COMP.FromOwnership(r, _9901_recOwned, expectedOwnership, out _out4895, out _out4896);
                      r = _out4895;
                      resultingOwnership = _out4896;
                    } else {
                      RAST._IType _9904___mcc_h2140 = _source407.dtor_value;
                      RAST._IType _9905_v = _9904___mcc_h2140;
                      r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_9900_recursiveGen, RAST.Expr.create_ExprFromType(_9905_v)));
                      RAST._IExpr _out4897;
                      DCOMPUTF16._IOwnership _out4898;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4897, out _out4898);
                      r = _out4897;
                      resultingOwnership = _out4898;
                    }
                  } else {
                    if ((_9899_nativeToType).is_Some) {
                      DAST._IType _source408 = _7656_fromTpe;
                      if (_source408.is_Path) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9906___mcc_h2141 = _source408.dtor_Path_a0;
                        Dafny.ISequence<DAST._IType> _9907___mcc_h2142 = _source408.dtor_typeArgs;
                        DAST._IResolvedType _9908___mcc_h2143 = _source408.dtor_resolved;
                        DAST._IResolvedType _source409 = _9908___mcc_h2143;
                        if (_source409.is_Datatype) {
                          DAST._IDatatypeType _9909___mcc_h2147 = _source409.dtor_datatypeType;
                        } else if (_source409.is_Trait) {
                          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9910___mcc_h2149 = _source409.dtor_path;
                          Dafny.ISequence<DAST._IAttribute> _9911___mcc_h2150 = _source409.dtor_attributes;
                        } else {
                          DAST._IType _9912___mcc_h2153 = _source409.dtor_baseType;
                          DAST._INewtypeRange _9913___mcc_h2154 = _source409.dtor_range;
                          bool _9914___mcc_h2155 = _source409.dtor_erase;
                          Dafny.ISequence<DAST._IAttribute> _9915___mcc_h2156 = _source409.dtor_attributes;
                          Dafny.ISequence<DAST._IAttribute> _9916_attributes0 = _9915___mcc_h2156;
                          bool _9917_erase0 = _9914___mcc_h2155;
                          DAST._INewtypeRange _9918_range0 = _9913___mcc_h2154;
                          DAST._IType _9919_b0 = _9912___mcc_h2153;
                          {
                            Std.Wrappers._IOption<RAST._IType> _9920_nativeFromType;
                            _9920_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_9919_b0, _9918_range0);
                            if ((_9920_nativeFromType).is_Some) {
                              RAST._IExpr _9921_recursiveGen;
                              DCOMPUTF16._IOwnership _9922_recOwned;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9923_recIdents;
                              RAST._IExpr _out4899;
                              DCOMPUTF16._IOwnership _out4900;
                              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4901;
                              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4899, out _out4900, out _out4901);
                              _9921_recursiveGen = _out4899;
                              _9922_recOwned = _out4900;
                              _9923_recIdents = _out4901;
                              RAST._IExpr _out4902;
                              DCOMPUTF16._IOwnership _out4903;
                              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_9921_recursiveGen, (_9899_nativeToType).dtor_value), _9922_recOwned, expectedOwnership, out _out4902, out _out4903);
                              r = _out4902;
                              resultingOwnership = _out4903;
                              readIdents = _9923_recIdents;
                              return ;
                            }
                          }
                        }
                      } else if (_source408.is_Nullable) {
                        DAST._IType _9924___mcc_h2161 = _source408.dtor_Nullable_a0;
                      } else if (_source408.is_Tuple) {
                        Dafny.ISequence<DAST._IType> _9925___mcc_h2163 = _source408.dtor_Tuple_a0;
                      } else if (_source408.is_Array) {
                        DAST._IType _9926___mcc_h2165 = _source408.dtor_element;
                        BigInteger _9927___mcc_h2166 = _source408.dtor_dims;
                      } else if (_source408.is_Seq) {
                        DAST._IType _9928___mcc_h2169 = _source408.dtor_element;
                      } else if (_source408.is_Set) {
                        DAST._IType _9929___mcc_h2171 = _source408.dtor_element;
                      } else if (_source408.is_Multiset) {
                        DAST._IType _9930___mcc_h2173 = _source408.dtor_element;
                      } else if (_source408.is_Map) {
                        DAST._IType _9931___mcc_h2175 = _source408.dtor_key;
                        DAST._IType _9932___mcc_h2176 = _source408.dtor_value;
                      } else if (_source408.is_SetBuilder) {
                        DAST._IType _9933___mcc_h2179 = _source408.dtor_element;
                      } else if (_source408.is_MapBuilder) {
                        DAST._IType _9934___mcc_h2181 = _source408.dtor_key;
                        DAST._IType _9935___mcc_h2182 = _source408.dtor_value;
                      } else if (_source408.is_Arrow) {
                        Dafny.ISequence<DAST._IType> _9936___mcc_h2185 = _source408.dtor_args;
                        DAST._IType _9937___mcc_h2186 = _source408.dtor_result;
                      } else if (_source408.is_Primitive) {
                        DAST._IPrimitive _9938___mcc_h2189 = _source408.dtor_Primitive_a0;
                      } else if (_source408.is_Passthrough) {
                        Dafny.ISequence<Dafny.Rune> _9939___mcc_h2191 = _source408.dtor_Passthrough_a0;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _9940___mcc_h2193 = _source408.dtor_TypeArg_a0;
                      }
                      if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                        RAST._IExpr _9941_recursiveGen;
                        DCOMPUTF16._IOwnership _9942_recOwned;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9943_recIdents;
                        RAST._IExpr _out4904;
                        DCOMPUTF16._IOwnership _out4905;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4906;
                        DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4904, out _out4905, out _out4906);
                        _9941_recursiveGen = _out4904;
                        _9942_recOwned = _out4905;
                        _9943_recIdents = _out4906;
                        RAST._IExpr _out4907;
                        DCOMPUTF16._IOwnership _out4908;
                        DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_9941_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_9899_nativeToType).dtor_value), _9942_recOwned, expectedOwnership, out _out4907, out _out4908);
                        r = _out4907;
                        resultingOwnership = _out4908;
                        readIdents = _9943_recIdents;
                        return ;
                      }
                    }
                    RAST._IExpr _out4909;
                    DCOMPUTF16._IOwnership _out4910;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4911;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _9898_b), _9898_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out4909, out _out4910, out _out4911);
                    r = _out4909;
                    resultingOwnership = _out4910;
                    readIdents = _out4911;
                  }
                }
              }
            } else if (_source405.is_Nullable) {
              DAST._IType _9944___mcc_h1096 = _source405.dtor_Nullable_a0;
              {
                RAST._IExpr _9945_recursiveGen;
                DCOMPUTF16._IOwnership _9946_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9947_recIdents;
                RAST._IExpr _out4912;
                DCOMPUTF16._IOwnership _out4913;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4914;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4912, out _out4913, out _out4914);
                _9945_recursiveGen = _out4912;
                _9946_recOwned = _out4913;
                _9947_recIdents = _out4914;
                r = _9945_recursiveGen;
                if (object.Equals(_9946_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4915;
                DCOMPUTF16._IOwnership _out4916;
                DCOMPUTF16.COMP.FromOwnership(r, _9946_recOwned, expectedOwnership, out _out4915, out _out4916);
                r = _out4915;
                resultingOwnership = _out4916;
                readIdents = _9947_recIdents;
              }
            } else if (_source405.is_Tuple) {
              Dafny.ISequence<DAST._IType> _9948___mcc_h1098 = _source405.dtor_Tuple_a0;
              {
                RAST._IExpr _9949_recursiveGen;
                DCOMPUTF16._IOwnership _9950_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9951_recIdents;
                RAST._IExpr _out4917;
                DCOMPUTF16._IOwnership _out4918;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4919;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4917, out _out4918, out _out4919);
                _9949_recursiveGen = _out4917;
                _9950_recOwned = _out4918;
                _9951_recIdents = _out4919;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9949_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4920;
                DCOMPUTF16._IOwnership _out4921;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4920, out _out4921);
                r = _out4920;
                resultingOwnership = _out4921;
                readIdents = _9951_recIdents;
              }
            } else if (_source405.is_Array) {
              DAST._IType _9952___mcc_h1100 = _source405.dtor_element;
              BigInteger _9953___mcc_h1101 = _source405.dtor_dims;
              {
                RAST._IExpr _9954_recursiveGen;
                DCOMPUTF16._IOwnership _9955_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9956_recIdents;
                RAST._IExpr _out4922;
                DCOMPUTF16._IOwnership _out4923;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4924;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4922, out _out4923, out _out4924);
                _9954_recursiveGen = _out4922;
                _9955_recOwned = _out4923;
                _9956_recIdents = _out4924;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9954_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4925;
                DCOMPUTF16._IOwnership _out4926;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4925, out _out4926);
                r = _out4925;
                resultingOwnership = _out4926;
                readIdents = _9956_recIdents;
              }
            } else if (_source405.is_Seq) {
              DAST._IType _9957___mcc_h1104 = _source405.dtor_element;
              {
                RAST._IExpr _9958_recursiveGen;
                DCOMPUTF16._IOwnership _9959_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9960_recIdents;
                RAST._IExpr _out4927;
                DCOMPUTF16._IOwnership _out4928;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4929;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4927, out _out4928, out _out4929);
                _9958_recursiveGen = _out4927;
                _9959_recOwned = _out4928;
                _9960_recIdents = _out4929;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9958_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4930;
                DCOMPUTF16._IOwnership _out4931;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4930, out _out4931);
                r = _out4930;
                resultingOwnership = _out4931;
                readIdents = _9960_recIdents;
              }
            } else if (_source405.is_Set) {
              DAST._IType _9961___mcc_h1106 = _source405.dtor_element;
              {
                RAST._IExpr _9962_recursiveGen;
                DCOMPUTF16._IOwnership _9963_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9964_recIdents;
                RAST._IExpr _out4932;
                DCOMPUTF16._IOwnership _out4933;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4934;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4932, out _out4933, out _out4934);
                _9962_recursiveGen = _out4932;
                _9963_recOwned = _out4933;
                _9964_recIdents = _out4934;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9962_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4935;
                DCOMPUTF16._IOwnership _out4936;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4935, out _out4936);
                r = _out4935;
                resultingOwnership = _out4936;
                readIdents = _9964_recIdents;
              }
            } else if (_source405.is_Multiset) {
              DAST._IType _9965___mcc_h1108 = _source405.dtor_element;
              {
                RAST._IExpr _9966_recursiveGen;
                DCOMPUTF16._IOwnership _9967_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9968_recIdents;
                RAST._IExpr _out4937;
                DCOMPUTF16._IOwnership _out4938;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4939;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4937, out _out4938, out _out4939);
                _9966_recursiveGen = _out4937;
                _9967_recOwned = _out4938;
                _9968_recIdents = _out4939;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9966_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4940;
                DCOMPUTF16._IOwnership _out4941;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4940, out _out4941);
                r = _out4940;
                resultingOwnership = _out4941;
                readIdents = _9968_recIdents;
              }
            } else if (_source405.is_Map) {
              DAST._IType _9969___mcc_h1110 = _source405.dtor_key;
              DAST._IType _9970___mcc_h1111 = _source405.dtor_value;
              {
                RAST._IExpr _9971_recursiveGen;
                DCOMPUTF16._IOwnership _9972_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9973_recIdents;
                RAST._IExpr _out4942;
                DCOMPUTF16._IOwnership _out4943;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4944;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4942, out _out4943, out _out4944);
                _9971_recursiveGen = _out4942;
                _9972_recOwned = _out4943;
                _9973_recIdents = _out4944;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9971_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4945;
                DCOMPUTF16._IOwnership _out4946;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4945, out _out4946);
                r = _out4945;
                resultingOwnership = _out4946;
                readIdents = _9973_recIdents;
              }
            } else if (_source405.is_SetBuilder) {
              DAST._IType _9974___mcc_h1114 = _source405.dtor_element;
              {
                RAST._IExpr _9975_recursiveGen;
                DCOMPUTF16._IOwnership _9976_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9977_recIdents;
                RAST._IExpr _out4947;
                DCOMPUTF16._IOwnership _out4948;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4949;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4947, out _out4948, out _out4949);
                _9975_recursiveGen = _out4947;
                _9976_recOwned = _out4948;
                _9977_recIdents = _out4949;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9975_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4950;
                DCOMPUTF16._IOwnership _out4951;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4950, out _out4951);
                r = _out4950;
                resultingOwnership = _out4951;
                readIdents = _9977_recIdents;
              }
            } else if (_source405.is_MapBuilder) {
              DAST._IType _9978___mcc_h1116 = _source405.dtor_key;
              DAST._IType _9979___mcc_h1117 = _source405.dtor_value;
              {
                RAST._IExpr _9980_recursiveGen;
                DCOMPUTF16._IOwnership _9981_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9982_recIdents;
                RAST._IExpr _out4952;
                DCOMPUTF16._IOwnership _out4953;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4954;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4952, out _out4953, out _out4954);
                _9980_recursiveGen = _out4952;
                _9981_recOwned = _out4953;
                _9982_recIdents = _out4954;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9980_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4955;
                DCOMPUTF16._IOwnership _out4956;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4955, out _out4956);
                r = _out4955;
                resultingOwnership = _out4956;
                readIdents = _9982_recIdents;
              }
            } else if (_source405.is_Arrow) {
              Dafny.ISequence<DAST._IType> _9983___mcc_h1120 = _source405.dtor_args;
              DAST._IType _9984___mcc_h1121 = _source405.dtor_result;
              {
                RAST._IExpr _9985_recursiveGen;
                DCOMPUTF16._IOwnership _9986_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9987_recIdents;
                RAST._IExpr _out4957;
                DCOMPUTF16._IOwnership _out4958;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4959;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4957, out _out4958, out _out4959);
                _9985_recursiveGen = _out4957;
                _9986_recOwned = _out4958;
                _9987_recIdents = _out4959;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9985_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4960;
                DCOMPUTF16._IOwnership _out4961;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4960, out _out4961);
                r = _out4960;
                resultingOwnership = _out4961;
                readIdents = _9987_recIdents;
              }
            } else if (_source405.is_Primitive) {
              DAST._IPrimitive _9988___mcc_h1124 = _source405.dtor_Primitive_a0;
              DAST._IPrimitive _source410 = _9988___mcc_h1124;
              if (_source410.is_Int) {
                {
                  RAST._IType _9989_rhsType;
                  RAST._IType _out4962;
                  _out4962 = DCOMPUTF16.COMP.GenType(_7656_fromTpe, true, false);
                  _9989_rhsType = _out4962;
                  RAST._IExpr _9990_recursiveGen;
                  DCOMPUTF16._IOwnership _9991___v89;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9992_recIdents;
                  RAST._IExpr _out4963;
                  DCOMPUTF16._IOwnership _out4964;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4965;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4963, out _out4964, out _out4965);
                  _9990_recursiveGen = _out4963;
                  _9991___v89 = _out4964;
                  _9992_recIdents = _out4965;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_9990_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out4966;
                  DCOMPUTF16._IOwnership _out4967;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4966, out _out4967);
                  r = _out4966;
                  resultingOwnership = _out4967;
                  readIdents = _9992_recIdents;
                }
              } else if (_source410.is_Real) {
                {
                  RAST._IExpr _9993_recursiveGen;
                  DCOMPUTF16._IOwnership _9994_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9995_recIdents;
                  RAST._IExpr _out4968;
                  DCOMPUTF16._IOwnership _out4969;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4970;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4968, out _out4969, out _out4970);
                  _9993_recursiveGen = _out4968;
                  _9994_recOwned = _out4969;
                  _9995_recIdents = _out4970;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9993_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4971;
                  DCOMPUTF16._IOwnership _out4972;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4971, out _out4972);
                  r = _out4971;
                  resultingOwnership = _out4972;
                  readIdents = _9995_recIdents;
                }
              } else if (_source410.is_String) {
                {
                  RAST._IExpr _9996_recursiveGen;
                  DCOMPUTF16._IOwnership _9997_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9998_recIdents;
                  RAST._IExpr _out4973;
                  DCOMPUTF16._IOwnership _out4974;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4975;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4973, out _out4974, out _out4975);
                  _9996_recursiveGen = _out4973;
                  _9997_recOwned = _out4974;
                  _9998_recIdents = _out4975;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9996_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4976;
                  DCOMPUTF16._IOwnership _out4977;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4976, out _out4977);
                  r = _out4976;
                  resultingOwnership = _out4977;
                  readIdents = _9998_recIdents;
                }
              } else if (_source410.is_Bool) {
                {
                  RAST._IExpr _9999_recursiveGen;
                  DCOMPUTF16._IOwnership _10000_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10001_recIdents;
                  RAST._IExpr _out4978;
                  DCOMPUTF16._IOwnership _out4979;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4980;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4978, out _out4979, out _out4980);
                  _9999_recursiveGen = _out4978;
                  _10000_recOwned = _out4979;
                  _10001_recIdents = _out4980;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9999_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4981;
                  DCOMPUTF16._IOwnership _out4982;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4981, out _out4982);
                  r = _out4981;
                  resultingOwnership = _out4982;
                  readIdents = _10001_recIdents;
                }
              } else {
                {
                  RAST._IExpr _10002_recursiveGen;
                  DCOMPUTF16._IOwnership _10003_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10004_recIdents;
                  RAST._IExpr _out4983;
                  DCOMPUTF16._IOwnership _out4984;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4985;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4983, out _out4984, out _out4985);
                  _10002_recursiveGen = _out4983;
                  _10003_recOwned = _out4984;
                  _10004_recIdents = _out4985;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10002_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4986;
                  DCOMPUTF16._IOwnership _out4987;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4986, out _out4987);
                  r = _out4986;
                  resultingOwnership = _out4987;
                  readIdents = _10004_recIdents;
                }
              }
            } else if (_source405.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _10005___mcc_h1126 = _source405.dtor_Passthrough_a0;
              {
                RAST._IExpr _10006_recursiveGen;
                DCOMPUTF16._IOwnership _10007_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10008_recIdents;
                RAST._IExpr _out4988;
                DCOMPUTF16._IOwnership _out4989;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4990;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4988, out _out4989, out _out4990);
                _10006_recursiveGen = _out4988;
                _10007_recOwned = _out4989;
                _10008_recIdents = _out4990;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10006_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4991;
                DCOMPUTF16._IOwnership _out4992;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4991, out _out4992);
                r = _out4991;
                resultingOwnership = _out4992;
                readIdents = _10008_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _10009___mcc_h1128 = _source405.dtor_TypeArg_a0;
              {
                RAST._IExpr _10010_recursiveGen;
                DCOMPUTF16._IOwnership _10011_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10012_recIdents;
                RAST._IExpr _out4993;
                DCOMPUTF16._IOwnership _out4994;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4995;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4993, out _out4994, out _out4995);
                _10010_recursiveGen = _out4993;
                _10011_recOwned = _out4994;
                _10012_recIdents = _out4995;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10010_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4996;
                DCOMPUTF16._IOwnership _out4997;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4996, out _out4997);
                r = _out4996;
                resultingOwnership = _out4997;
                readIdents = _10012_recIdents;
              }
            }
          }
        } else if (_source304.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _10013___mcc_h1130 = _source304.dtor_Passthrough_a0;
          DAST._IType _source411 = _7662___mcc_h1;
          if (_source411.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10014___mcc_h1134 = _source411.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _10015___mcc_h1135 = _source411.dtor_typeArgs;
            DAST._IResolvedType _10016___mcc_h1136 = _source411.dtor_resolved;
            DAST._IResolvedType _source412 = _10016___mcc_h1136;
            if (_source412.is_Datatype) {
              DAST._IDatatypeType _10017___mcc_h1140 = _source412.dtor_datatypeType;
              {
                RAST._IExpr _10018_recursiveGen;
                DCOMPUTF16._IOwnership _10019_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10020_recIdents;
                RAST._IExpr _out4998;
                DCOMPUTF16._IOwnership _out4999;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5000;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out4998, out _out4999, out _out5000);
                _10018_recursiveGen = _out4998;
                _10019_recOwned = _out4999;
                _10020_recIdents = _out5000;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10018_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5001;
                DCOMPUTF16._IOwnership _out5002;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5001, out _out5002);
                r = _out5001;
                resultingOwnership = _out5002;
                readIdents = _10020_recIdents;
              }
            } else if (_source412.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10021___mcc_h1142 = _source412.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _10022___mcc_h1143 = _source412.dtor_attributes;
              {
                RAST._IExpr _10023_recursiveGen;
                DCOMPUTF16._IOwnership _10024_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10025_recIdents;
                RAST._IExpr _out5003;
                DCOMPUTF16._IOwnership _out5004;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5005;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5003, out _out5004, out _out5005);
                _10023_recursiveGen = _out5003;
                _10024_recOwned = _out5004;
                _10025_recIdents = _out5005;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10023_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5006;
                DCOMPUTF16._IOwnership _out5007;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5006, out _out5007);
                r = _out5006;
                resultingOwnership = _out5007;
                readIdents = _10025_recIdents;
              }
            } else {
              DAST._IType _10026___mcc_h1146 = _source412.dtor_baseType;
              DAST._INewtypeRange _10027___mcc_h1147 = _source412.dtor_range;
              bool _10028___mcc_h1148 = _source412.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _10029___mcc_h1149 = _source412.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _10030_attributes = _10029___mcc_h1149;
              bool _10031_erase = _10028___mcc_h1148;
              DAST._INewtypeRange _10032_range = _10027___mcc_h1147;
              DAST._IType _10033_b = _10026___mcc_h1146;
              {
                Std.Wrappers._IOption<RAST._IType> _10034_nativeToType;
                _10034_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_10033_b, _10032_range);
                if (object.Equals(_7656_fromTpe, _10033_b)) {
                  RAST._IExpr _10035_recursiveGen;
                  DCOMPUTF16._IOwnership _10036_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10037_recIdents;
                  RAST._IExpr _out5008;
                  DCOMPUTF16._IOwnership _out5009;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5010;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5008, out _out5009, out _out5010);
                  _10035_recursiveGen = _out5008;
                  _10036_recOwned = _out5009;
                  _10037_recIdents = _out5010;
                  readIdents = _10037_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source413 = _10034_nativeToType;
                  if (_source413.is_None) {
                    if (_10031_erase) {
                      r = _10035_recursiveGen;
                    } else {
                      RAST._IType _10038_rhsType;
                      RAST._IType _out5011;
                      _out5011 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _10038_rhsType = _out5011;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_10038_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_10035_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out5012;
                    DCOMPUTF16._IOwnership _out5013;
                    DCOMPUTF16.COMP.FromOwnership(r, _10036_recOwned, expectedOwnership, out _out5012, out _out5013);
                    r = _out5012;
                    resultingOwnership = _out5013;
                  } else {
                    RAST._IType _10039___mcc_h2195 = _source413.dtor_value;
                    RAST._IType _10040_v = _10039___mcc_h2195;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_10035_recursiveGen, RAST.Expr.create_ExprFromType(_10040_v)));
                    RAST._IExpr _out5014;
                    DCOMPUTF16._IOwnership _out5015;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5014, out _out5015);
                    r = _out5014;
                    resultingOwnership = _out5015;
                  }
                } else {
                  if ((_10034_nativeToType).is_Some) {
                    DAST._IType _source414 = _7656_fromTpe;
                    if (_source414.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10041___mcc_h2196 = _source414.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _10042___mcc_h2197 = _source414.dtor_typeArgs;
                      DAST._IResolvedType _10043___mcc_h2198 = _source414.dtor_resolved;
                      DAST._IResolvedType _source415 = _10043___mcc_h2198;
                      if (_source415.is_Datatype) {
                        DAST._IDatatypeType _10044___mcc_h2202 = _source415.dtor_datatypeType;
                      } else if (_source415.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10045___mcc_h2204 = _source415.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _10046___mcc_h2205 = _source415.dtor_attributes;
                      } else {
                        DAST._IType _10047___mcc_h2208 = _source415.dtor_baseType;
                        DAST._INewtypeRange _10048___mcc_h2209 = _source415.dtor_range;
                        bool _10049___mcc_h2210 = _source415.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _10050___mcc_h2211 = _source415.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _10051_attributes0 = _10050___mcc_h2211;
                        bool _10052_erase0 = _10049___mcc_h2210;
                        DAST._INewtypeRange _10053_range0 = _10048___mcc_h2209;
                        DAST._IType _10054_b0 = _10047___mcc_h2208;
                        {
                          Std.Wrappers._IOption<RAST._IType> _10055_nativeFromType;
                          _10055_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_10054_b0, _10053_range0);
                          if ((_10055_nativeFromType).is_Some) {
                            RAST._IExpr _10056_recursiveGen;
                            DCOMPUTF16._IOwnership _10057_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10058_recIdents;
                            RAST._IExpr _out5016;
                            DCOMPUTF16._IOwnership _out5017;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5018;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5016, out _out5017, out _out5018);
                            _10056_recursiveGen = _out5016;
                            _10057_recOwned = _out5017;
                            _10058_recIdents = _out5018;
                            RAST._IExpr _out5019;
                            DCOMPUTF16._IOwnership _out5020;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_10056_recursiveGen, (_10034_nativeToType).dtor_value), _10057_recOwned, expectedOwnership, out _out5019, out _out5020);
                            r = _out5019;
                            resultingOwnership = _out5020;
                            readIdents = _10058_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source414.is_Nullable) {
                      DAST._IType _10059___mcc_h2216 = _source414.dtor_Nullable_a0;
                    } else if (_source414.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _10060___mcc_h2218 = _source414.dtor_Tuple_a0;
                    } else if (_source414.is_Array) {
                      DAST._IType _10061___mcc_h2220 = _source414.dtor_element;
                      BigInteger _10062___mcc_h2221 = _source414.dtor_dims;
                    } else if (_source414.is_Seq) {
                      DAST._IType _10063___mcc_h2224 = _source414.dtor_element;
                    } else if (_source414.is_Set) {
                      DAST._IType _10064___mcc_h2226 = _source414.dtor_element;
                    } else if (_source414.is_Multiset) {
                      DAST._IType _10065___mcc_h2228 = _source414.dtor_element;
                    } else if (_source414.is_Map) {
                      DAST._IType _10066___mcc_h2230 = _source414.dtor_key;
                      DAST._IType _10067___mcc_h2231 = _source414.dtor_value;
                    } else if (_source414.is_SetBuilder) {
                      DAST._IType _10068___mcc_h2234 = _source414.dtor_element;
                    } else if (_source414.is_MapBuilder) {
                      DAST._IType _10069___mcc_h2236 = _source414.dtor_key;
                      DAST._IType _10070___mcc_h2237 = _source414.dtor_value;
                    } else if (_source414.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _10071___mcc_h2240 = _source414.dtor_args;
                      DAST._IType _10072___mcc_h2241 = _source414.dtor_result;
                    } else if (_source414.is_Primitive) {
                      DAST._IPrimitive _10073___mcc_h2244 = _source414.dtor_Primitive_a0;
                    } else if (_source414.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _10074___mcc_h2246 = _source414.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _10075___mcc_h2248 = _source414.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _10076_recursiveGen;
                      DCOMPUTF16._IOwnership _10077_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10078_recIdents;
                      RAST._IExpr _out5021;
                      DCOMPUTF16._IOwnership _out5022;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5023;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5021, out _out5022, out _out5023);
                      _10076_recursiveGen = _out5021;
                      _10077_recOwned = _out5022;
                      _10078_recIdents = _out5023;
                      RAST._IExpr _out5024;
                      DCOMPUTF16._IOwnership _out5025;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_10076_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_10034_nativeToType).dtor_value), _10077_recOwned, expectedOwnership, out _out5024, out _out5025);
                      r = _out5024;
                      resultingOwnership = _out5025;
                      readIdents = _10078_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out5026;
                  DCOMPUTF16._IOwnership _out5027;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5028;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _10033_b), _10033_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out5026, out _out5027, out _out5028);
                  r = _out5026;
                  resultingOwnership = _out5027;
                  readIdents = _out5028;
                }
              }
            }
          } else if (_source411.is_Nullable) {
            DAST._IType _10079___mcc_h1154 = _source411.dtor_Nullable_a0;
            {
              RAST._IExpr _10080_recursiveGen;
              DCOMPUTF16._IOwnership _10081_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10082_recIdents;
              RAST._IExpr _out5029;
              DCOMPUTF16._IOwnership _out5030;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5031;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5029, out _out5030, out _out5031);
              _10080_recursiveGen = _out5029;
              _10081_recOwned = _out5030;
              _10082_recIdents = _out5031;
              r = _10080_recursiveGen;
              if (object.Equals(_10081_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out5032;
              DCOMPUTF16._IOwnership _out5033;
              DCOMPUTF16.COMP.FromOwnership(r, _10081_recOwned, expectedOwnership, out _out5032, out _out5033);
              r = _out5032;
              resultingOwnership = _out5033;
              readIdents = _10082_recIdents;
            }
          } else if (_source411.is_Tuple) {
            Dafny.ISequence<DAST._IType> _10083___mcc_h1156 = _source411.dtor_Tuple_a0;
            {
              RAST._IExpr _10084_recursiveGen;
              DCOMPUTF16._IOwnership _10085_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10086_recIdents;
              RAST._IExpr _out5034;
              DCOMPUTF16._IOwnership _out5035;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5036;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5034, out _out5035, out _out5036);
              _10084_recursiveGen = _out5034;
              _10085_recOwned = _out5035;
              _10086_recIdents = _out5036;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10084_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5037;
              DCOMPUTF16._IOwnership _out5038;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5037, out _out5038);
              r = _out5037;
              resultingOwnership = _out5038;
              readIdents = _10086_recIdents;
            }
          } else if (_source411.is_Array) {
            DAST._IType _10087___mcc_h1158 = _source411.dtor_element;
            BigInteger _10088___mcc_h1159 = _source411.dtor_dims;
            {
              RAST._IExpr _10089_recursiveGen;
              DCOMPUTF16._IOwnership _10090_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10091_recIdents;
              RAST._IExpr _out5039;
              DCOMPUTF16._IOwnership _out5040;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5041;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5039, out _out5040, out _out5041);
              _10089_recursiveGen = _out5039;
              _10090_recOwned = _out5040;
              _10091_recIdents = _out5041;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10089_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5042;
              DCOMPUTF16._IOwnership _out5043;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5042, out _out5043);
              r = _out5042;
              resultingOwnership = _out5043;
              readIdents = _10091_recIdents;
            }
          } else if (_source411.is_Seq) {
            DAST._IType _10092___mcc_h1162 = _source411.dtor_element;
            {
              RAST._IExpr _10093_recursiveGen;
              DCOMPUTF16._IOwnership _10094_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10095_recIdents;
              RAST._IExpr _out5044;
              DCOMPUTF16._IOwnership _out5045;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5046;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5044, out _out5045, out _out5046);
              _10093_recursiveGen = _out5044;
              _10094_recOwned = _out5045;
              _10095_recIdents = _out5046;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10093_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5047;
              DCOMPUTF16._IOwnership _out5048;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5047, out _out5048);
              r = _out5047;
              resultingOwnership = _out5048;
              readIdents = _10095_recIdents;
            }
          } else if (_source411.is_Set) {
            DAST._IType _10096___mcc_h1164 = _source411.dtor_element;
            {
              RAST._IExpr _10097_recursiveGen;
              DCOMPUTF16._IOwnership _10098_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10099_recIdents;
              RAST._IExpr _out5049;
              DCOMPUTF16._IOwnership _out5050;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5051;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5049, out _out5050, out _out5051);
              _10097_recursiveGen = _out5049;
              _10098_recOwned = _out5050;
              _10099_recIdents = _out5051;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10097_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5052;
              DCOMPUTF16._IOwnership _out5053;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5052, out _out5053);
              r = _out5052;
              resultingOwnership = _out5053;
              readIdents = _10099_recIdents;
            }
          } else if (_source411.is_Multiset) {
            DAST._IType _10100___mcc_h1166 = _source411.dtor_element;
            {
              RAST._IExpr _10101_recursiveGen;
              DCOMPUTF16._IOwnership _10102_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10103_recIdents;
              RAST._IExpr _out5054;
              DCOMPUTF16._IOwnership _out5055;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5056;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5054, out _out5055, out _out5056);
              _10101_recursiveGen = _out5054;
              _10102_recOwned = _out5055;
              _10103_recIdents = _out5056;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10101_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5057;
              DCOMPUTF16._IOwnership _out5058;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5057, out _out5058);
              r = _out5057;
              resultingOwnership = _out5058;
              readIdents = _10103_recIdents;
            }
          } else if (_source411.is_Map) {
            DAST._IType _10104___mcc_h1168 = _source411.dtor_key;
            DAST._IType _10105___mcc_h1169 = _source411.dtor_value;
            {
              RAST._IExpr _10106_recursiveGen;
              DCOMPUTF16._IOwnership _10107_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10108_recIdents;
              RAST._IExpr _out5059;
              DCOMPUTF16._IOwnership _out5060;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5061;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5059, out _out5060, out _out5061);
              _10106_recursiveGen = _out5059;
              _10107_recOwned = _out5060;
              _10108_recIdents = _out5061;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10106_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5062;
              DCOMPUTF16._IOwnership _out5063;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5062, out _out5063);
              r = _out5062;
              resultingOwnership = _out5063;
              readIdents = _10108_recIdents;
            }
          } else if (_source411.is_SetBuilder) {
            DAST._IType _10109___mcc_h1172 = _source411.dtor_element;
            {
              RAST._IExpr _10110_recursiveGen;
              DCOMPUTF16._IOwnership _10111_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10112_recIdents;
              RAST._IExpr _out5064;
              DCOMPUTF16._IOwnership _out5065;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5066;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5064, out _out5065, out _out5066);
              _10110_recursiveGen = _out5064;
              _10111_recOwned = _out5065;
              _10112_recIdents = _out5066;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10110_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5067;
              DCOMPUTF16._IOwnership _out5068;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5067, out _out5068);
              r = _out5067;
              resultingOwnership = _out5068;
              readIdents = _10112_recIdents;
            }
          } else if (_source411.is_MapBuilder) {
            DAST._IType _10113___mcc_h1174 = _source411.dtor_key;
            DAST._IType _10114___mcc_h1175 = _source411.dtor_value;
            {
              RAST._IExpr _10115_recursiveGen;
              DCOMPUTF16._IOwnership _10116_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10117_recIdents;
              RAST._IExpr _out5069;
              DCOMPUTF16._IOwnership _out5070;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5071;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5069, out _out5070, out _out5071);
              _10115_recursiveGen = _out5069;
              _10116_recOwned = _out5070;
              _10117_recIdents = _out5071;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10115_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5072;
              DCOMPUTF16._IOwnership _out5073;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5072, out _out5073);
              r = _out5072;
              resultingOwnership = _out5073;
              readIdents = _10117_recIdents;
            }
          } else if (_source411.is_Arrow) {
            Dafny.ISequence<DAST._IType> _10118___mcc_h1178 = _source411.dtor_args;
            DAST._IType _10119___mcc_h1179 = _source411.dtor_result;
            {
              RAST._IExpr _10120_recursiveGen;
              DCOMPUTF16._IOwnership _10121_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10122_recIdents;
              RAST._IExpr _out5074;
              DCOMPUTF16._IOwnership _out5075;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5076;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5074, out _out5075, out _out5076);
              _10120_recursiveGen = _out5074;
              _10121_recOwned = _out5075;
              _10122_recIdents = _out5076;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10120_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5077;
              DCOMPUTF16._IOwnership _out5078;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5077, out _out5078);
              r = _out5077;
              resultingOwnership = _out5078;
              readIdents = _10122_recIdents;
            }
          } else if (_source411.is_Primitive) {
            DAST._IPrimitive _10123___mcc_h1182 = _source411.dtor_Primitive_a0;
            DAST._IPrimitive _source416 = _10123___mcc_h1182;
            if (_source416.is_Int) {
              {
                RAST._IType _10124_rhsType;
                RAST._IType _out5079;
                _out5079 = DCOMPUTF16.COMP.GenType(_7656_fromTpe, true, false);
                _10124_rhsType = _out5079;
                RAST._IExpr _10125_recursiveGen;
                DCOMPUTF16._IOwnership _10126___v87;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10127_recIdents;
                RAST._IExpr _out5080;
                DCOMPUTF16._IOwnership _out5081;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5082;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5080, out _out5081, out _out5082);
                _10125_recursiveGen = _out5080;
                _10126___v87 = _out5081;
                _10127_recIdents = _out5082;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_10125_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out5083;
                DCOMPUTF16._IOwnership _out5084;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5083, out _out5084);
                r = _out5083;
                resultingOwnership = _out5084;
                readIdents = _10127_recIdents;
              }
            } else if (_source416.is_Real) {
              {
                RAST._IExpr _10128_recursiveGen;
                DCOMPUTF16._IOwnership _10129_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10130_recIdents;
                RAST._IExpr _out5085;
                DCOMPUTF16._IOwnership _out5086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5087;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5085, out _out5086, out _out5087);
                _10128_recursiveGen = _out5085;
                _10129_recOwned = _out5086;
                _10130_recIdents = _out5087;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10128_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5088;
                DCOMPUTF16._IOwnership _out5089;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5088, out _out5089);
                r = _out5088;
                resultingOwnership = _out5089;
                readIdents = _10130_recIdents;
              }
            } else if (_source416.is_String) {
              {
                RAST._IExpr _10131_recursiveGen;
                DCOMPUTF16._IOwnership _10132_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10133_recIdents;
                RAST._IExpr _out5090;
                DCOMPUTF16._IOwnership _out5091;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5092;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5090, out _out5091, out _out5092);
                _10131_recursiveGen = _out5090;
                _10132_recOwned = _out5091;
                _10133_recIdents = _out5092;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10131_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5093;
                DCOMPUTF16._IOwnership _out5094;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5093, out _out5094);
                r = _out5093;
                resultingOwnership = _out5094;
                readIdents = _10133_recIdents;
              }
            } else if (_source416.is_Bool) {
              {
                RAST._IExpr _10134_recursiveGen;
                DCOMPUTF16._IOwnership _10135_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10136_recIdents;
                RAST._IExpr _out5095;
                DCOMPUTF16._IOwnership _out5096;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5097;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5095, out _out5096, out _out5097);
                _10134_recursiveGen = _out5095;
                _10135_recOwned = _out5096;
                _10136_recIdents = _out5097;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10134_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5098;
                DCOMPUTF16._IOwnership _out5099;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5098, out _out5099);
                r = _out5098;
                resultingOwnership = _out5099;
                readIdents = _10136_recIdents;
              }
            } else {
              {
                RAST._IExpr _10137_recursiveGen;
                DCOMPUTF16._IOwnership _10138_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10139_recIdents;
                RAST._IExpr _out5100;
                DCOMPUTF16._IOwnership _out5101;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5102;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5100, out _out5101, out _out5102);
                _10137_recursiveGen = _out5100;
                _10138_recOwned = _out5101;
                _10139_recIdents = _out5102;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10137_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5103;
                DCOMPUTF16._IOwnership _out5104;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5103, out _out5104);
                r = _out5103;
                resultingOwnership = _out5104;
                readIdents = _10139_recIdents;
              }
            }
          } else if (_source411.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _10140___mcc_h1184 = _source411.dtor_Passthrough_a0;
            {
              RAST._IExpr _10141_recursiveGen;
              DCOMPUTF16._IOwnership _10142___v92;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10143_recIdents;
              RAST._IExpr _out5105;
              DCOMPUTF16._IOwnership _out5106;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5107;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5105, out _out5106, out _out5107);
              _10141_recursiveGen = _out5105;
              _10142___v92 = _out5106;
              _10143_recIdents = _out5107;
              RAST._IType _10144_toTpeGen;
              RAST._IType _out5108;
              _out5108 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
              _10144_toTpeGen = _out5108;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_10141_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_10144_toTpeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out5109;
              DCOMPUTF16._IOwnership _out5110;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5109, out _out5110);
              r = _out5109;
              resultingOwnership = _out5110;
              readIdents = _10143_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _10145___mcc_h1186 = _source411.dtor_TypeArg_a0;
            {
              RAST._IExpr _10146_recursiveGen;
              DCOMPUTF16._IOwnership _10147_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10148_recIdents;
              RAST._IExpr _out5111;
              DCOMPUTF16._IOwnership _out5112;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5113;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5111, out _out5112, out _out5113);
              _10146_recursiveGen = _out5111;
              _10147_recOwned = _out5112;
              _10148_recIdents = _out5113;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10146_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5114;
              DCOMPUTF16._IOwnership _out5115;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5114, out _out5115);
              r = _out5114;
              resultingOwnership = _out5115;
              readIdents = _10148_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _10149___mcc_h1188 = _source304.dtor_TypeArg_a0;
          DAST._IType _source417 = _7662___mcc_h1;
          if (_source417.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10150___mcc_h1192 = _source417.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _10151___mcc_h1193 = _source417.dtor_typeArgs;
            DAST._IResolvedType _10152___mcc_h1194 = _source417.dtor_resolved;
            DAST._IResolvedType _source418 = _10152___mcc_h1194;
            if (_source418.is_Datatype) {
              DAST._IDatatypeType _10153___mcc_h1198 = _source418.dtor_datatypeType;
              {
                RAST._IExpr _10154_recursiveGen;
                DCOMPUTF16._IOwnership _10155_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10156_recIdents;
                RAST._IExpr _out5116;
                DCOMPUTF16._IOwnership _out5117;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5118;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5116, out _out5117, out _out5118);
                _10154_recursiveGen = _out5116;
                _10155_recOwned = _out5117;
                _10156_recIdents = _out5118;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10154_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5119;
                DCOMPUTF16._IOwnership _out5120;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5119, out _out5120);
                r = _out5119;
                resultingOwnership = _out5120;
                readIdents = _10156_recIdents;
              }
            } else if (_source418.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10157___mcc_h1200 = _source418.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _10158___mcc_h1201 = _source418.dtor_attributes;
              {
                RAST._IExpr _10159_recursiveGen;
                DCOMPUTF16._IOwnership _10160_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10161_recIdents;
                RAST._IExpr _out5121;
                DCOMPUTF16._IOwnership _out5122;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5123;
                DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5121, out _out5122, out _out5123);
                _10159_recursiveGen = _out5121;
                _10160_recOwned = _out5122;
                _10161_recIdents = _out5123;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10159_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out5124;
                DCOMPUTF16._IOwnership _out5125;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5124, out _out5125);
                r = _out5124;
                resultingOwnership = _out5125;
                readIdents = _10161_recIdents;
              }
            } else {
              DAST._IType _10162___mcc_h1204 = _source418.dtor_baseType;
              DAST._INewtypeRange _10163___mcc_h1205 = _source418.dtor_range;
              bool _10164___mcc_h1206 = _source418.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _10165___mcc_h1207 = _source418.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _10166_attributes = _10165___mcc_h1207;
              bool _10167_erase = _10164___mcc_h1206;
              DAST._INewtypeRange _10168_range = _10163___mcc_h1205;
              DAST._IType _10169_b = _10162___mcc_h1204;
              {
                Std.Wrappers._IOption<RAST._IType> _10170_nativeToType;
                _10170_nativeToType = DCOMPUTF16.COMP.NewtypeToRustType(_10169_b, _10168_range);
                if (object.Equals(_7656_fromTpe, _10169_b)) {
                  RAST._IExpr _10171_recursiveGen;
                  DCOMPUTF16._IOwnership _10172_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10173_recIdents;
                  RAST._IExpr _out5126;
                  DCOMPUTF16._IOwnership _out5127;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5128;
                  DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5126, out _out5127, out _out5128);
                  _10171_recursiveGen = _out5126;
                  _10172_recOwned = _out5127;
                  _10173_recIdents = _out5128;
                  readIdents = _10173_recIdents;
                  Std.Wrappers._IOption<RAST._IType> _source419 = _10170_nativeToType;
                  if (_source419.is_None) {
                    if (_10167_erase) {
                      r = _10171_recursiveGen;
                    } else {
                      RAST._IType _10174_rhsType;
                      RAST._IType _out5129;
                      _out5129 = DCOMPUTF16.COMP.GenType(_7657_toTpe, true, false);
                      _10174_rhsType = _out5129;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_10174_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_10171_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out5130;
                    DCOMPUTF16._IOwnership _out5131;
                    DCOMPUTF16.COMP.FromOwnership(r, _10172_recOwned, expectedOwnership, out _out5130, out _out5131);
                    r = _out5130;
                    resultingOwnership = _out5131;
                  } else {
                    RAST._IType _10175___mcc_h2250 = _source419.dtor_value;
                    RAST._IType _10176_v = _10175___mcc_h2250;
                    r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("truncate!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_10171_recursiveGen, RAST.Expr.create_ExprFromType(_10176_v)));
                    RAST._IExpr _out5132;
                    DCOMPUTF16._IOwnership _out5133;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5132, out _out5133);
                    r = _out5132;
                    resultingOwnership = _out5133;
                  }
                } else {
                  if ((_10170_nativeToType).is_Some) {
                    DAST._IType _source420 = _7656_fromTpe;
                    if (_source420.is_Path) {
                      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10177___mcc_h2251 = _source420.dtor_Path_a0;
                      Dafny.ISequence<DAST._IType> _10178___mcc_h2252 = _source420.dtor_typeArgs;
                      DAST._IResolvedType _10179___mcc_h2253 = _source420.dtor_resolved;
                      DAST._IResolvedType _source421 = _10179___mcc_h2253;
                      if (_source421.is_Datatype) {
                        DAST._IDatatypeType _10180___mcc_h2257 = _source421.dtor_datatypeType;
                      } else if (_source421.is_Trait) {
                        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10181___mcc_h2259 = _source421.dtor_path;
                        Dafny.ISequence<DAST._IAttribute> _10182___mcc_h2260 = _source421.dtor_attributes;
                      } else {
                        DAST._IType _10183___mcc_h2263 = _source421.dtor_baseType;
                        DAST._INewtypeRange _10184___mcc_h2264 = _source421.dtor_range;
                        bool _10185___mcc_h2265 = _source421.dtor_erase;
                        Dafny.ISequence<DAST._IAttribute> _10186___mcc_h2266 = _source421.dtor_attributes;
                        Dafny.ISequence<DAST._IAttribute> _10187_attributes0 = _10186___mcc_h2266;
                        bool _10188_erase0 = _10185___mcc_h2265;
                        DAST._INewtypeRange _10189_range0 = _10184___mcc_h2264;
                        DAST._IType _10190_b0 = _10183___mcc_h2263;
                        {
                          Std.Wrappers._IOption<RAST._IType> _10191_nativeFromType;
                          _10191_nativeFromType = DCOMPUTF16.COMP.NewtypeToRustType(_10190_b0, _10189_range0);
                          if ((_10191_nativeFromType).is_Some) {
                            RAST._IExpr _10192_recursiveGen;
                            DCOMPUTF16._IOwnership _10193_recOwned;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10194_recIdents;
                            RAST._IExpr _out5134;
                            DCOMPUTF16._IOwnership _out5135;
                            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5136;
                            DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5134, out _out5135, out _out5136);
                            _10192_recursiveGen = _out5134;
                            _10193_recOwned = _out5135;
                            _10194_recIdents = _out5136;
                            RAST._IExpr _out5137;
                            DCOMPUTF16._IOwnership _out5138;
                            DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription(_10192_recursiveGen, (_10170_nativeToType).dtor_value), _10193_recOwned, expectedOwnership, out _out5137, out _out5138);
                            r = _out5137;
                            resultingOwnership = _out5138;
                            readIdents = _10194_recIdents;
                            return ;
                          }
                        }
                      }
                    } else if (_source420.is_Nullable) {
                      DAST._IType _10195___mcc_h2271 = _source420.dtor_Nullable_a0;
                    } else if (_source420.is_Tuple) {
                      Dafny.ISequence<DAST._IType> _10196___mcc_h2273 = _source420.dtor_Tuple_a0;
                    } else if (_source420.is_Array) {
                      DAST._IType _10197___mcc_h2275 = _source420.dtor_element;
                      BigInteger _10198___mcc_h2276 = _source420.dtor_dims;
                    } else if (_source420.is_Seq) {
                      DAST._IType _10199___mcc_h2279 = _source420.dtor_element;
                    } else if (_source420.is_Set) {
                      DAST._IType _10200___mcc_h2281 = _source420.dtor_element;
                    } else if (_source420.is_Multiset) {
                      DAST._IType _10201___mcc_h2283 = _source420.dtor_element;
                    } else if (_source420.is_Map) {
                      DAST._IType _10202___mcc_h2285 = _source420.dtor_key;
                      DAST._IType _10203___mcc_h2286 = _source420.dtor_value;
                    } else if (_source420.is_SetBuilder) {
                      DAST._IType _10204___mcc_h2289 = _source420.dtor_element;
                    } else if (_source420.is_MapBuilder) {
                      DAST._IType _10205___mcc_h2291 = _source420.dtor_key;
                      DAST._IType _10206___mcc_h2292 = _source420.dtor_value;
                    } else if (_source420.is_Arrow) {
                      Dafny.ISequence<DAST._IType> _10207___mcc_h2295 = _source420.dtor_args;
                      DAST._IType _10208___mcc_h2296 = _source420.dtor_result;
                    } else if (_source420.is_Primitive) {
                      DAST._IPrimitive _10209___mcc_h2299 = _source420.dtor_Primitive_a0;
                    } else if (_source420.is_Passthrough) {
                      Dafny.ISequence<Dafny.Rune> _10210___mcc_h2301 = _source420.dtor_Passthrough_a0;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _10211___mcc_h2303 = _source420.dtor_TypeArg_a0;
                    }
                    if (object.Equals(_7656_fromTpe, DAST.Type.create_Primitive(DAST.Primitive.create_Char()))) {
                      RAST._IExpr _10212_recursiveGen;
                      DCOMPUTF16._IOwnership _10213_recOwned;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10214_recIdents;
                      RAST._IExpr _out5139;
                      DCOMPUTF16._IOwnership _out5140;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5141;
                      DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5139, out _out5140, out _out5141);
                      _10212_recursiveGen = _out5139;
                      _10213_recOwned = _out5140;
                      _10214_recIdents = _out5141;
                      RAST._IExpr _out5142;
                      DCOMPUTF16._IOwnership _out5143;
                      DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_TypeAscription((_10212_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0")), (_10170_nativeToType).dtor_value), _10213_recOwned, expectedOwnership, out _out5142, out _out5143);
                      r = _out5142;
                      resultingOwnership = _out5143;
                      readIdents = _10214_recIdents;
                      return ;
                    }
                  }
                  RAST._IExpr _out5144;
                  DCOMPUTF16._IOwnership _out5145;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5146;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_7655_expr, _7656_fromTpe, _10169_b), _10169_b, _7657_toTpe), selfIdent, env, expectedOwnership, out _out5144, out _out5145, out _out5146);
                  r = _out5144;
                  resultingOwnership = _out5145;
                  readIdents = _out5146;
                }
              }
            }
          } else if (_source417.is_Nullable) {
            DAST._IType _10215___mcc_h1212 = _source417.dtor_Nullable_a0;
            {
              RAST._IExpr _10216_recursiveGen;
              DCOMPUTF16._IOwnership _10217_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10218_recIdents;
              RAST._IExpr _out5147;
              DCOMPUTF16._IOwnership _out5148;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5149;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5147, out _out5148, out _out5149);
              _10216_recursiveGen = _out5147;
              _10217_recOwned = _out5148;
              _10218_recIdents = _out5149;
              r = _10216_recursiveGen;
              if (object.Equals(_10217_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out5150;
              DCOMPUTF16._IOwnership _out5151;
              DCOMPUTF16.COMP.FromOwnership(r, _10217_recOwned, expectedOwnership, out _out5150, out _out5151);
              r = _out5150;
              resultingOwnership = _out5151;
              readIdents = _10218_recIdents;
            }
          } else if (_source417.is_Tuple) {
            Dafny.ISequence<DAST._IType> _10219___mcc_h1214 = _source417.dtor_Tuple_a0;
            {
              RAST._IExpr _10220_recursiveGen;
              DCOMPUTF16._IOwnership _10221_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10222_recIdents;
              RAST._IExpr _out5152;
              DCOMPUTF16._IOwnership _out5153;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5154;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5152, out _out5153, out _out5154);
              _10220_recursiveGen = _out5152;
              _10221_recOwned = _out5153;
              _10222_recIdents = _out5154;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10220_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5155;
              DCOMPUTF16._IOwnership _out5156;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5155, out _out5156);
              r = _out5155;
              resultingOwnership = _out5156;
              readIdents = _10222_recIdents;
            }
          } else if (_source417.is_Array) {
            DAST._IType _10223___mcc_h1216 = _source417.dtor_element;
            BigInteger _10224___mcc_h1217 = _source417.dtor_dims;
            {
              RAST._IExpr _10225_recursiveGen;
              DCOMPUTF16._IOwnership _10226_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10227_recIdents;
              RAST._IExpr _out5157;
              DCOMPUTF16._IOwnership _out5158;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5159;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5157, out _out5158, out _out5159);
              _10225_recursiveGen = _out5157;
              _10226_recOwned = _out5158;
              _10227_recIdents = _out5159;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10225_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5160;
              DCOMPUTF16._IOwnership _out5161;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5160, out _out5161);
              r = _out5160;
              resultingOwnership = _out5161;
              readIdents = _10227_recIdents;
            }
          } else if (_source417.is_Seq) {
            DAST._IType _10228___mcc_h1220 = _source417.dtor_element;
            {
              RAST._IExpr _10229_recursiveGen;
              DCOMPUTF16._IOwnership _10230_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10231_recIdents;
              RAST._IExpr _out5162;
              DCOMPUTF16._IOwnership _out5163;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5164;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5162, out _out5163, out _out5164);
              _10229_recursiveGen = _out5162;
              _10230_recOwned = _out5163;
              _10231_recIdents = _out5164;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10229_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5165;
              DCOMPUTF16._IOwnership _out5166;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5165, out _out5166);
              r = _out5165;
              resultingOwnership = _out5166;
              readIdents = _10231_recIdents;
            }
          } else if (_source417.is_Set) {
            DAST._IType _10232___mcc_h1222 = _source417.dtor_element;
            {
              RAST._IExpr _10233_recursiveGen;
              DCOMPUTF16._IOwnership _10234_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10235_recIdents;
              RAST._IExpr _out5167;
              DCOMPUTF16._IOwnership _out5168;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5169;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5167, out _out5168, out _out5169);
              _10233_recursiveGen = _out5167;
              _10234_recOwned = _out5168;
              _10235_recIdents = _out5169;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10233_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5170;
              DCOMPUTF16._IOwnership _out5171;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5170, out _out5171);
              r = _out5170;
              resultingOwnership = _out5171;
              readIdents = _10235_recIdents;
            }
          } else if (_source417.is_Multiset) {
            DAST._IType _10236___mcc_h1224 = _source417.dtor_element;
            {
              RAST._IExpr _10237_recursiveGen;
              DCOMPUTF16._IOwnership _10238_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10239_recIdents;
              RAST._IExpr _out5172;
              DCOMPUTF16._IOwnership _out5173;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5174;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5172, out _out5173, out _out5174);
              _10237_recursiveGen = _out5172;
              _10238_recOwned = _out5173;
              _10239_recIdents = _out5174;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10237_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5175;
              DCOMPUTF16._IOwnership _out5176;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5175, out _out5176);
              r = _out5175;
              resultingOwnership = _out5176;
              readIdents = _10239_recIdents;
            }
          } else if (_source417.is_Map) {
            DAST._IType _10240___mcc_h1226 = _source417.dtor_key;
            DAST._IType _10241___mcc_h1227 = _source417.dtor_value;
            {
              RAST._IExpr _10242_recursiveGen;
              DCOMPUTF16._IOwnership _10243_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10244_recIdents;
              RAST._IExpr _out5177;
              DCOMPUTF16._IOwnership _out5178;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5179;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5177, out _out5178, out _out5179);
              _10242_recursiveGen = _out5177;
              _10243_recOwned = _out5178;
              _10244_recIdents = _out5179;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10242_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5180;
              DCOMPUTF16._IOwnership _out5181;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5180, out _out5181);
              r = _out5180;
              resultingOwnership = _out5181;
              readIdents = _10244_recIdents;
            }
          } else if (_source417.is_SetBuilder) {
            DAST._IType _10245___mcc_h1230 = _source417.dtor_element;
            {
              RAST._IExpr _10246_recursiveGen;
              DCOMPUTF16._IOwnership _10247_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10248_recIdents;
              RAST._IExpr _out5182;
              DCOMPUTF16._IOwnership _out5183;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5184;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5182, out _out5183, out _out5184);
              _10246_recursiveGen = _out5182;
              _10247_recOwned = _out5183;
              _10248_recIdents = _out5184;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10246_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5185;
              DCOMPUTF16._IOwnership _out5186;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5185, out _out5186);
              r = _out5185;
              resultingOwnership = _out5186;
              readIdents = _10248_recIdents;
            }
          } else if (_source417.is_MapBuilder) {
            DAST._IType _10249___mcc_h1232 = _source417.dtor_key;
            DAST._IType _10250___mcc_h1233 = _source417.dtor_value;
            {
              RAST._IExpr _10251_recursiveGen;
              DCOMPUTF16._IOwnership _10252_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10253_recIdents;
              RAST._IExpr _out5187;
              DCOMPUTF16._IOwnership _out5188;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5189;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5187, out _out5188, out _out5189);
              _10251_recursiveGen = _out5187;
              _10252_recOwned = _out5188;
              _10253_recIdents = _out5189;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10251_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5190;
              DCOMPUTF16._IOwnership _out5191;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5190, out _out5191);
              r = _out5190;
              resultingOwnership = _out5191;
              readIdents = _10253_recIdents;
            }
          } else if (_source417.is_Arrow) {
            Dafny.ISequence<DAST._IType> _10254___mcc_h1236 = _source417.dtor_args;
            DAST._IType _10255___mcc_h1237 = _source417.dtor_result;
            {
              RAST._IExpr _10256_recursiveGen;
              DCOMPUTF16._IOwnership _10257_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10258_recIdents;
              RAST._IExpr _out5192;
              DCOMPUTF16._IOwnership _out5193;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5194;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5192, out _out5193, out _out5194);
              _10256_recursiveGen = _out5192;
              _10257_recOwned = _out5193;
              _10258_recIdents = _out5194;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10256_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5195;
              DCOMPUTF16._IOwnership _out5196;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5195, out _out5196);
              r = _out5195;
              resultingOwnership = _out5196;
              readIdents = _10258_recIdents;
            }
          } else if (_source417.is_Primitive) {
            DAST._IPrimitive _10259___mcc_h1240 = _source417.dtor_Primitive_a0;
            {
              RAST._IExpr _10260_recursiveGen;
              DCOMPUTF16._IOwnership _10261_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10262_recIdents;
              RAST._IExpr _out5197;
              DCOMPUTF16._IOwnership _out5198;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5199;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5197, out _out5198, out _out5199);
              _10260_recursiveGen = _out5197;
              _10261_recOwned = _out5198;
              _10262_recIdents = _out5199;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10260_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5200;
              DCOMPUTF16._IOwnership _out5201;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5200, out _out5201);
              r = _out5200;
              resultingOwnership = _out5201;
              readIdents = _10262_recIdents;
            }
          } else if (_source417.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _10263___mcc_h1242 = _source417.dtor_Passthrough_a0;
            {
              RAST._IExpr _10264_recursiveGen;
              DCOMPUTF16._IOwnership _10265_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10266_recIdents;
              RAST._IExpr _out5202;
              DCOMPUTF16._IOwnership _out5203;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5204;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5202, out _out5203, out _out5204);
              _10264_recursiveGen = _out5202;
              _10265_recOwned = _out5203;
              _10266_recIdents = _out5204;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10264_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5205;
              DCOMPUTF16._IOwnership _out5206;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5205, out _out5206);
              r = _out5205;
              resultingOwnership = _out5206;
              readIdents = _10266_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _10267___mcc_h1244 = _source417.dtor_TypeArg_a0;
            {
              RAST._IExpr _10268_recursiveGen;
              DCOMPUTF16._IOwnership _10269_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10270_recIdents;
              RAST._IExpr _out5207;
              DCOMPUTF16._IOwnership _out5208;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5209;
              DCOMPUTF16.COMP.GenExpr(_7655_expr, selfIdent, env, expectedOwnership, out _out5207, out _out5208, out _out5209);
              _10268_recursiveGen = _out5207;
              _10269_recOwned = _out5208;
              _10270_recIdents = _out5209;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10268_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out5210;
              DCOMPUTF16._IOwnership _out5211;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5210, out _out5211);
              r = _out5210;
              resultingOwnership = _out5211;
              readIdents = _10270_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source422 = e;
      if (_source422.is_Literal) {
        DAST._ILiteral _10271___mcc_h0 = _source422.dtor_Literal_a0;
        RAST._IExpr _out5212;
        DCOMPUTF16._IOwnership _out5213;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5214;
        DCOMPUTF16.COMP.GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out5212, out _out5213, out _out5214);
        r = _out5212;
        resultingOwnership = _out5213;
        readIdents = _out5214;
      } else if (_source422.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _10272___mcc_h1 = _source422.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _10273_name = _10272___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_10273_name));
          bool _10274_currentlyBorrowed;
          _10274_currentlyBorrowed = (env).IsBorrowed(_10273_name);
          if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (_10274_currentlyBorrowed) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_10273_name);
          return ;
        }
      } else if (_source422.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10275___mcc_h2 = _source422.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10276_path = _10275___mcc_h2;
        {
          RAST._IExpr _out5215;
          _out5215 = DCOMPUTF16.COMP.GenPathExpr(_10276_path);
          r = _out5215;
          RAST._IExpr _out5216;
          DCOMPUTF16._IOwnership _out5217;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5216, out _out5217);
          r = _out5216;
          resultingOwnership = _out5217;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source422.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _10277___mcc_h3 = _source422.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _10278_values = _10277___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _10279_s;
          _10279_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _10280_i;
          _10280_i = BigInteger.Zero;
          while ((_10280_i) < (new BigInteger((_10278_values).Count))) {
            if ((_10280_i).Sign == 1) {
              _10279_s = Dafny.Sequence<Dafny.Rune>.Concat(_10279_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _10281_recursiveGen;
            DCOMPUTF16._IOwnership _10282___v95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10283_recIdents;
            RAST._IExpr _out5218;
            DCOMPUTF16._IOwnership _out5219;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5220;
            DCOMPUTF16.COMP.GenExpr((_10278_values).Select(_10280_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5218, out _out5219, out _out5220);
            _10281_recursiveGen = _out5218;
            _10282___v95 = _out5219;
            _10283_recIdents = _out5220;
            _10279_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10279_s, (_10281_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10283_recIdents);
            _10280_i = (_10280_i) + (BigInteger.One);
          }
          _10279_s = Dafny.Sequence<Dafny.Rune>.Concat(_10279_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_10279_s);
          RAST._IExpr _out5221;
          DCOMPUTF16._IOwnership _out5222;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5221, out _out5222);
          r = _out5221;
          resultingOwnership = _out5222;
          return ;
        }
      } else if (_source422.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10284___mcc_h4 = _source422.dtor_path;
        Dafny.ISequence<DAST._IType> _10285___mcc_h5 = _source422.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _10286___mcc_h6 = _source422.dtor_args;
        Dafny.ISequence<DAST._IExpression> _10287_args = _10286___mcc_h6;
        Dafny.ISequence<DAST._IType> _10288_typeArgs = _10285___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10289_path = _10284___mcc_h4;
        {
          RAST._IExpr _out5223;
          _out5223 = DCOMPUTF16.COMP.GenPathExpr(_10289_path);
          r = _out5223;
          if ((new BigInteger((_10288_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _10290_typeExprs;
            _10290_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi12 = new BigInteger((_10288_typeArgs).Count);
            for (BigInteger _10291_i = BigInteger.Zero; _10291_i < _hi12; _10291_i++) {
              RAST._IType _10292_typeExpr;
              RAST._IType _out5224;
              _out5224 = DCOMPUTF16.COMP.GenType((_10288_typeArgs).Select(_10291_i), false, false);
              _10292_typeExpr = _out5224;
              _10290_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_10290_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_10292_typeExpr));
            }
            r = (r).ApplyType(_10290_typeExprs);
          }
          r = (r).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _10293_arguments;
          _10293_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi13 = new BigInteger((_10287_args).Count);
          for (BigInteger _10294_i = BigInteger.Zero; _10294_i < _hi13; _10294_i++) {
            RAST._IExpr _10295_recursiveGen;
            DCOMPUTF16._IOwnership _10296___v96;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10297_recIdents;
            RAST._IExpr _out5225;
            DCOMPUTF16._IOwnership _out5226;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5227;
            DCOMPUTF16.COMP.GenExpr((_10287_args).Select(_10294_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5225, out _out5226, out _out5227);
            _10295_recursiveGen = _out5225;
            _10296___v96 = _out5226;
            _10297_recIdents = _out5227;
            _10293_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10293_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_10295_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10297_recIdents);
          }
          r = (r).Apply(_10293_arguments);
          r = RAST.__default.RcNew(r);
          RAST._IExpr _out5228;
          DCOMPUTF16._IOwnership _out5229;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5228, out _out5229);
          r = _out5228;
          resultingOwnership = _out5229;
          return ;
        }
      } else if (_source422.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _10298___mcc_h7 = _source422.dtor_dims;
        DAST._IType _10299___mcc_h8 = _source422.dtor_typ;
        DAST._IType _10300_typ = _10299___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _10301_dims = _10298___mcc_h7;
        {
          BigInteger _10302_i;
          _10302_i = (new BigInteger((_10301_dims).Count)) - (BigInteger.One);
          RAST._IType _10303_genTyp;
          RAST._IType _out5230;
          _out5230 = DCOMPUTF16.COMP.GenType(_10300_typ, false, false);
          _10303_genTyp = _out5230;
          Dafny.ISequence<Dafny.Rune> _10304_s;
          _10304_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_10303_genTyp)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_10302_i).Sign != -1) {
            RAST._IExpr _10305_recursiveGen;
            DCOMPUTF16._IOwnership _10306___v97;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10307_recIdents;
            RAST._IExpr _out5231;
            DCOMPUTF16._IOwnership _out5232;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5233;
            DCOMPUTF16.COMP.GenExpr((_10301_dims).Select(_10302_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5231, out _out5232, out _out5233);
            _10305_recursiveGen = _out5231;
            _10306___v97 = _out5232;
            _10307_recIdents = _out5233;
            _10304_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _10304_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_10305_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10307_recIdents);
            _10302_i = (_10302_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_10304_s);
          RAST._IExpr _out5234;
          DCOMPUTF16._IOwnership _out5235;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5234, out _out5235);
          r = _out5234;
          resultingOwnership = _out5235;
          return ;
        }
      } else if (_source422.is_DatatypeValue) {
        DAST._IDatatypeType _10308___mcc_h9 = _source422.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _10309___mcc_h10 = _source422.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _10310___mcc_h11 = _source422.dtor_variant;
        bool _10311___mcc_h12 = _source422.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _10312___mcc_h13 = _source422.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _10313_values = _10312___mcc_h13;
        bool _10314_isCo = _10311___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _10315_variant = _10310___mcc_h11;
        Dafny.ISequence<DAST._IType> _10316_typeArgs = _10309___mcc_h10;
        DAST._IDatatypeType _10317_datatypeType = _10308___mcc_h9;
        {
          RAST._IExpr _out5236;
          _out5236 = DCOMPUTF16.COMP.GenPathExpr((_10317_datatypeType).dtor_path);
          r = _out5236;
          Dafny.ISequence<RAST._IType> _10318_genTypeArgs;
          _10318_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi14 = new BigInteger((_10316_typeArgs).Count);
          for (BigInteger _10319_i = BigInteger.Zero; _10319_i < _hi14; _10319_i++) {
            RAST._IType _10320_typeExpr;
            RAST._IType _out5237;
            _out5237 = DCOMPUTF16.COMP.GenType((_10316_typeArgs).Select(_10319_i), false, false);
            _10320_typeExpr = _out5237;
            _10318_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_10318_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_10320_typeExpr));
          }
          if ((new BigInteger((_10316_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_10318_genTypeArgs);
          }
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(_10315_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _10321_assignments;
          _10321_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi15 = new BigInteger((_10313_values).Count);
          for (BigInteger _10322_i = BigInteger.Zero; _10322_i < _hi15; _10322_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs55 = (_10313_values).Select(_10322_i);
            Dafny.ISequence<Dafny.Rune> _10323_name = _let_tmp_rhs55.dtor__0;
            DAST._IExpression _10324_value = _let_tmp_rhs55.dtor__1;
            if (_10314_isCo) {
              RAST._IExpr _10325_recursiveGen;
              DCOMPUTF16._IOwnership _10326___v98;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10327_recIdents;
              RAST._IExpr _out5238;
              DCOMPUTF16._IOwnership _out5239;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5240;
              DCOMPUTF16.COMP.GenExpr(_10324_value, selfIdent, DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5238, out _out5239, out _out5240);
              _10325_recursiveGen = _out5238;
              _10326___v98 = _out5239;
              _10327_recIdents = _out5240;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10327_recIdents);
              Dafny.ISequence<Dafny.Rune> _10328_allReadCloned;
              _10328_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_10327_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _10329_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_4 in (_10327_recIdents).Elements) {
                  _10329_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_4;
                  if ((_10327_recIdents).Contains(_10329_next)) {
                    goto after__ASSIGN_SUCH_THAT_4;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2859)");
              after__ASSIGN_SUCH_THAT_4: ;
                _10328_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10328_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_10329_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_10329_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _10327_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_10327_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_10329_next));
              }
              Dafny.ISequence<Dafny.Rune> _10330_assigned;
              _10330_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _10328_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_10325_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _10321_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_10321_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(_10323_name), RAST.Expr.create_RawExpr(_10330_assigned))));
            } else {
              RAST._IExpr _10331_recursiveGen;
              DCOMPUTF16._IOwnership _10332___v99;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10333_recIdents;
              RAST._IExpr _out5241;
              DCOMPUTF16._IOwnership _out5242;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5243;
              DCOMPUTF16.COMP.GenExpr(_10324_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5241, out _out5242, out _out5243);
              _10331_recursiveGen = _out5241;
              _10332___v99 = _out5242;
              _10333_recIdents = _out5243;
              _10321_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_10321_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(_10323_name), _10331_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10333_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _10321_assignments);
          if (DCOMPUTF16.COMP.IsRcWrapped((_10317_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out5244;
          DCOMPUTF16._IOwnership _out5245;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5244, out _out5245);
          r = _out5244;
          resultingOwnership = _out5245;
          return ;
        }
      } else if (_source422.is_Convert) {
        DAST._IExpression _10334___mcc_h14 = _source422.dtor_value;
        DAST._IType _10335___mcc_h15 = _source422.dtor_from;
        DAST._IType _10336___mcc_h16 = _source422.dtor_typ;
        {
          RAST._IExpr _out5246;
          DCOMPUTF16._IOwnership _out5247;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5248;
          DCOMPUTF16.COMP.GenExprConvert(e, selfIdent, env, expectedOwnership, out _out5246, out _out5247, out _out5248);
          r = _out5246;
          resultingOwnership = _out5247;
          readIdents = _out5248;
        }
      } else if (_source422.is_SeqConstruct) {
        DAST._IExpression _10337___mcc_h17 = _source422.dtor_length;
        DAST._IExpression _10338___mcc_h18 = _source422.dtor_elem;
        DAST._IExpression _10339_expr = _10338___mcc_h18;
        DAST._IExpression _10340_length = _10337___mcc_h17;
        {
          RAST._IExpr _10341_recursiveGen;
          DCOMPUTF16._IOwnership _10342___v103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10343_recIdents;
          RAST._IExpr _out5249;
          DCOMPUTF16._IOwnership _out5250;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5251;
          DCOMPUTF16.COMP.GenExpr(_10339_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5249, out _out5250, out _out5251);
          _10341_recursiveGen = _out5249;
          _10342___v103 = _out5250;
          _10343_recIdents = _out5251;
          RAST._IExpr _10344_lengthGen;
          DCOMPUTF16._IOwnership _10345___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10346_lengthIdents;
          RAST._IExpr _out5252;
          DCOMPUTF16._IOwnership _out5253;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5254;
          DCOMPUTF16.COMP.GenExpr(_10340_length, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5252, out _out5253, out _out5254);
          _10344_lengthGen = _out5252;
          _10345___v104 = _out5253;
          _10346_lengthIdents = _out5254;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_10341_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_10344_lengthGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_10343_recIdents, _10346_lengthIdents);
          RAST._IExpr _out5255;
          DCOMPUTF16._IOwnership _out5256;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5255, out _out5256);
          r = _out5255;
          resultingOwnership = _out5256;
          return ;
        }
      } else if (_source422.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _10347___mcc_h19 = _source422.dtor_elements;
        DAST._IType _10348___mcc_h20 = _source422.dtor_typ;
        DAST._IType _10349_typ = _10348___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _10350_exprs = _10347___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _10351_genTpe;
          RAST._IType _out5257;
          _out5257 = DCOMPUTF16.COMP.GenType(_10349_typ, false, false);
          _10351_genTpe = _out5257;
          BigInteger _10352_i;
          _10352_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _10353_args;
          _10353_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_10352_i) < (new BigInteger((_10350_exprs).Count))) {
            RAST._IExpr _10354_recursiveGen;
            DCOMPUTF16._IOwnership _10355___v105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10356_recIdents;
            RAST._IExpr _out5258;
            DCOMPUTF16._IOwnership _out5259;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5260;
            DCOMPUTF16.COMP.GenExpr((_10350_exprs).Select(_10352_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5258, out _out5259, out _out5260);
            _10354_recursiveGen = _out5258;
            _10355___v105 = _out5259;
            _10356_recIdents = _out5260;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10356_recIdents);
            _10353_args = Dafny.Sequence<RAST._IExpr>.Concat(_10353_args, Dafny.Sequence<RAST._IExpr>.FromElements(_10354_recursiveGen));
            _10352_i = (_10352_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_10353_args);
          if ((new BigInteger((_10353_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_10351_genTpe));
          }
          RAST._IExpr _out5261;
          DCOMPUTF16._IOwnership _out5262;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5261, out _out5262);
          r = _out5261;
          resultingOwnership = _out5262;
          return ;
        }
      } else if (_source422.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _10357___mcc_h21 = _source422.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _10358_exprs = _10357___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _10359_generatedValues;
          _10359_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _10360_i;
          _10360_i = BigInteger.Zero;
          while ((_10360_i) < (new BigInteger((_10358_exprs).Count))) {
            RAST._IExpr _10361_recursiveGen;
            DCOMPUTF16._IOwnership _10362___v106;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10363_recIdents;
            RAST._IExpr _out5263;
            DCOMPUTF16._IOwnership _out5264;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5265;
            DCOMPUTF16.COMP.GenExpr((_10358_exprs).Select(_10360_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5263, out _out5264, out _out5265);
            _10361_recursiveGen = _out5263;
            _10362___v106 = _out5264;
            _10363_recIdents = _out5265;
            _10359_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_10359_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_10361_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10363_recIdents);
            _10360_i = (_10360_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_10359_generatedValues);
          RAST._IExpr _out5266;
          DCOMPUTF16._IOwnership _out5267;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5266, out _out5267);
          r = _out5266;
          resultingOwnership = _out5267;
          return ;
        }
      } else if (_source422.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _10364___mcc_h22 = _source422.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _10365_exprs = _10364___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _10366_generatedValues;
          _10366_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _10367_i;
          _10367_i = BigInteger.Zero;
          while ((_10367_i) < (new BigInteger((_10365_exprs).Count))) {
            RAST._IExpr _10368_recursiveGen;
            DCOMPUTF16._IOwnership _10369___v107;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10370_recIdents;
            RAST._IExpr _out5268;
            DCOMPUTF16._IOwnership _out5269;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5270;
            DCOMPUTF16.COMP.GenExpr((_10365_exprs).Select(_10367_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5268, out _out5269, out _out5270);
            _10368_recursiveGen = _out5268;
            _10369___v107 = _out5269;
            _10370_recIdents = _out5270;
            _10366_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_10366_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_10368_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10370_recIdents);
            _10367_i = (_10367_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_10366_generatedValues);
          RAST._IExpr _out5271;
          DCOMPUTF16._IOwnership _out5272;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5271, out _out5272);
          r = _out5271;
          resultingOwnership = _out5272;
          return ;
        }
      } else if (_source422.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _10371___mcc_h23 = _source422.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _10372_mapElems = _10371___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _10373_generatedValues;
          _10373_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _10374_i;
          _10374_i = BigInteger.Zero;
          while ((_10374_i) < (new BigInteger((_10372_mapElems).Count))) {
            RAST._IExpr _10375_recursiveGenKey;
            DCOMPUTF16._IOwnership _10376___v109;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10377_recIdentsKey;
            RAST._IExpr _out5273;
            DCOMPUTF16._IOwnership _out5274;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5275;
            DCOMPUTF16.COMP.GenExpr(((_10372_mapElems).Select(_10374_i)).dtor__0, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5273, out _out5274, out _out5275);
            _10375_recursiveGenKey = _out5273;
            _10376___v109 = _out5274;
            _10377_recIdentsKey = _out5275;
            RAST._IExpr _10378_recursiveGenValue;
            DCOMPUTF16._IOwnership _10379___v110;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10380_recIdentsValue;
            RAST._IExpr _out5276;
            DCOMPUTF16._IOwnership _out5277;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5278;
            DCOMPUTF16.COMP.GenExpr(((_10372_mapElems).Select(_10374_i)).dtor__1, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5276, out _out5277, out _out5278);
            _10378_recursiveGenValue = _out5276;
            _10379___v110 = _out5277;
            _10380_recIdentsValue = _out5278;
            _10373_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_10373_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_10375_recursiveGenKey, _10378_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10377_recIdentsKey), _10380_recIdentsValue);
            _10374_i = (_10374_i) + (BigInteger.One);
          }
          _10374_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _10381_arguments;
          _10381_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_10374_i) < (new BigInteger((_10373_generatedValues).Count))) {
            RAST._IExpr _10382_genKey;
            _10382_genKey = ((_10373_generatedValues).Select(_10374_i)).dtor__0;
            RAST._IExpr _10383_genValue;
            _10383_genValue = ((_10373_generatedValues).Select(_10374_i)).dtor__1;
            _10381_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10381_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _10382_genKey, _10383_genValue, DAST.Format.BinOpFormat.create_NoFormat())));
            _10374_i = (_10374_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_10381_arguments);
          RAST._IExpr _out5279;
          DCOMPUTF16._IOwnership _out5280;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5279, out _out5280);
          r = _out5279;
          resultingOwnership = _out5280;
          return ;
        }
      } else if (_source422.is_MapBuilder) {
        DAST._IType _10384___mcc_h24 = _source422.dtor_keyType;
        DAST._IType _10385___mcc_h25 = _source422.dtor_valueType;
        DAST._IType _10386_valueType = _10385___mcc_h25;
        DAST._IType _10387_keyType = _10384___mcc_h24;
        {
          RAST._IType _10388_kType;
          RAST._IType _out5281;
          _out5281 = DCOMPUTF16.COMP.GenType(_10387_keyType, false, false);
          _10388_kType = _out5281;
          RAST._IType _10389_vType;
          RAST._IType _out5282;
          _out5282 = DCOMPUTF16.COMP.GenType(_10386_valueType, false, false);
          _10389_vType = _out5282;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_10388_kType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_10389_vType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out5283;
          DCOMPUTF16._IOwnership _out5284;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5283, out _out5284);
          r = _out5283;
          resultingOwnership = _out5284;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source422.is_SeqUpdate) {
        DAST._IExpression _10390___mcc_h26 = _source422.dtor_expr;
        DAST._IExpression _10391___mcc_h27 = _source422.dtor_indexExpr;
        DAST._IExpression _10392___mcc_h28 = _source422.dtor_value;
        DAST._IExpression _10393_value = _10392___mcc_h28;
        DAST._IExpression _10394_index = _10391___mcc_h27;
        DAST._IExpression _10395_expr = _10390___mcc_h26;
        {
          RAST._IExpr _10396_exprR;
          DCOMPUTF16._IOwnership _10397___v111;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10398_exprIdents;
          RAST._IExpr _out5285;
          DCOMPUTF16._IOwnership _out5286;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5287;
          DCOMPUTF16.COMP.GenExpr(_10395_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5285, out _out5286, out _out5287);
          _10396_exprR = _out5285;
          _10397___v111 = _out5286;
          _10398_exprIdents = _out5287;
          RAST._IExpr _10399_indexR;
          DCOMPUTF16._IOwnership _10400_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10401_indexIdents;
          RAST._IExpr _out5288;
          DCOMPUTF16._IOwnership _out5289;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5290;
          DCOMPUTF16.COMP.GenExpr(_10394_index, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5288, out _out5289, out _out5290);
          _10399_indexR = _out5288;
          _10400_indexOwnership = _out5289;
          _10401_indexIdents = _out5290;
          RAST._IExpr _10402_valueR;
          DCOMPUTF16._IOwnership _10403_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10404_valueIdents;
          RAST._IExpr _out5291;
          DCOMPUTF16._IOwnership _out5292;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5293;
          DCOMPUTF16.COMP.GenExpr(_10393_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5291, out _out5292, out _out5293);
          _10402_valueR = _out5291;
          _10403_valueOwnership = _out5292;
          _10404_valueIdents = _out5293;
          r = ((_10396_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_10399_indexR, _10402_valueR));
          RAST._IExpr _out5294;
          DCOMPUTF16._IOwnership _out5295;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5294, out _out5295);
          r = _out5294;
          resultingOwnership = _out5295;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_10398_exprIdents, _10401_indexIdents), _10404_valueIdents);
          return ;
        }
      } else if (_source422.is_MapUpdate) {
        DAST._IExpression _10405___mcc_h29 = _source422.dtor_expr;
        DAST._IExpression _10406___mcc_h30 = _source422.dtor_indexExpr;
        DAST._IExpression _10407___mcc_h31 = _source422.dtor_value;
        DAST._IExpression _10408_value = _10407___mcc_h31;
        DAST._IExpression _10409_index = _10406___mcc_h30;
        DAST._IExpression _10410_expr = _10405___mcc_h29;
        {
          RAST._IExpr _10411_exprR;
          DCOMPUTF16._IOwnership _10412___v112;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10413_exprIdents;
          RAST._IExpr _out5296;
          DCOMPUTF16._IOwnership _out5297;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5298;
          DCOMPUTF16.COMP.GenExpr(_10410_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5296, out _out5297, out _out5298);
          _10411_exprR = _out5296;
          _10412___v112 = _out5297;
          _10413_exprIdents = _out5298;
          RAST._IExpr _10414_indexR;
          DCOMPUTF16._IOwnership _10415_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10416_indexIdents;
          RAST._IExpr _out5299;
          DCOMPUTF16._IOwnership _out5300;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5301;
          DCOMPUTF16.COMP.GenExpr(_10409_index, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5299, out _out5300, out _out5301);
          _10414_indexR = _out5299;
          _10415_indexOwnership = _out5300;
          _10416_indexIdents = _out5301;
          RAST._IExpr _10417_valueR;
          DCOMPUTF16._IOwnership _10418_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10419_valueIdents;
          RAST._IExpr _out5302;
          DCOMPUTF16._IOwnership _out5303;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5304;
          DCOMPUTF16.COMP.GenExpr(_10408_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5302, out _out5303, out _out5304);
          _10417_valueR = _out5302;
          _10418_valueOwnership = _out5303;
          _10419_valueIdents = _out5304;
          r = ((_10411_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_10414_indexR, _10417_valueR));
          RAST._IExpr _out5305;
          DCOMPUTF16._IOwnership _out5306;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5305, out _out5306);
          r = _out5305;
          resultingOwnership = _out5306;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_10413_exprIdents, _10416_indexIdents), _10419_valueIdents);
          return ;
        }
      } else if (_source422.is_SetBuilder) {
        DAST._IType _10420___mcc_h32 = _source422.dtor_elemType;
        DAST._IType _10421_elemType = _10420___mcc_h32;
        {
          RAST._IType _10422_eType;
          RAST._IType _out5307;
          _out5307 = DCOMPUTF16.COMP.GenType(_10421_elemType, false, false);
          _10422_eType = _out5307;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_10422_eType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out5308;
          DCOMPUTF16._IOwnership _out5309;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5308, out _out5309);
          r = _out5308;
          resultingOwnership = _out5309;
          return ;
        }
      } else if (_source422.is_ToMultiset) {
        DAST._IExpression _10423___mcc_h33 = _source422.dtor_ToMultiset_a0;
        DAST._IExpression _10424_expr = _10423___mcc_h33;
        {
          RAST._IExpr _10425_recursiveGen;
          DCOMPUTF16._IOwnership _10426___v108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10427_recIdents;
          RAST._IExpr _out5310;
          DCOMPUTF16._IOwnership _out5311;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5312;
          DCOMPUTF16.COMP.GenExpr(_10424_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5310, out _out5311, out _out5312);
          _10425_recursiveGen = _out5310;
          _10426___v108 = _out5311;
          _10427_recIdents = _out5312;
          r = ((_10425_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _10427_recIdents;
          RAST._IExpr _out5313;
          DCOMPUTF16._IOwnership _out5314;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5313, out _out5314);
          r = _out5313;
          resultingOwnership = _out5314;
          return ;
        }
      } else if (_source422.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source423 = selfIdent;
          if (_source423.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out5315;
              DCOMPUTF16._IOwnership _out5316;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5315, out _out5316);
              r = _out5315;
              resultingOwnership = _out5316;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _10428___mcc_h273 = _source423.dtor_value;
            Dafny.ISequence<Dafny.Rune> _10429_id = _10428___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_10429_id);
              if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_10429_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_10429_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_10429_id);
            }
          }
          return ;
        }
      } else if (_source422.is_Ite) {
        DAST._IExpression _10430___mcc_h34 = _source422.dtor_cond;
        DAST._IExpression _10431___mcc_h35 = _source422.dtor_thn;
        DAST._IExpression _10432___mcc_h36 = _source422.dtor_els;
        DAST._IExpression _10433_f = _10432___mcc_h36;
        DAST._IExpression _10434_t = _10431___mcc_h35;
        DAST._IExpression _10435_cond = _10430___mcc_h34;
        {
          RAST._IExpr _10436_cond;
          DCOMPUTF16._IOwnership _10437___v113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10438_recIdentsCond;
          RAST._IExpr _out5317;
          DCOMPUTF16._IOwnership _out5318;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5319;
          DCOMPUTF16.COMP.GenExpr(_10435_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5317, out _out5318, out _out5319);
          _10436_cond = _out5317;
          _10437___v113 = _out5318;
          _10438_recIdentsCond = _out5319;
          Dafny.ISequence<Dafny.Rune> _10439_condString;
          _10439_condString = (_10436_cond)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _10440___v114;
          DCOMPUTF16._IOwnership _10441_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10442___v115;
          RAST._IExpr _out5320;
          DCOMPUTF16._IOwnership _out5321;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5322;
          DCOMPUTF16.COMP.GenExpr(_10434_t, selfIdent, env, expectedOwnership, out _out5320, out _out5321, out _out5322);
          _10440___v114 = _out5320;
          _10441_tHasToBeOwned = _out5321;
          _10442___v115 = _out5322;
          RAST._IExpr _10443_fExpr;
          DCOMPUTF16._IOwnership _10444_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10445_recIdentsF;
          RAST._IExpr _out5323;
          DCOMPUTF16._IOwnership _out5324;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5325;
          DCOMPUTF16.COMP.GenExpr(_10433_f, selfIdent, env, _10441_tHasToBeOwned, out _out5323, out _out5324, out _out5325);
          _10443_fExpr = _out5323;
          _10444_fOwned = _out5324;
          _10445_recIdentsF = _out5325;
          Dafny.ISequence<Dafny.Rune> _10446_fString;
          _10446_fString = (_10443_fExpr)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _10447_tExpr;
          DCOMPUTF16._IOwnership _10448___v116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10449_recIdentsT;
          RAST._IExpr _out5326;
          DCOMPUTF16._IOwnership _out5327;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5328;
          DCOMPUTF16.COMP.GenExpr(_10434_t, selfIdent, env, _10444_fOwned, out _out5326, out _out5327, out _out5328);
          _10447_tExpr = _out5326;
          _10448___v116 = _out5327;
          _10449_recIdentsT = _out5328;
          Dafny.ISequence<Dafny.Rune> _10450_tString;
          _10450_tString = (_10447_tExpr)._ToString(DCOMPUTF16.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _10439_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _10450_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _10446_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out5329;
          DCOMPUTF16._IOwnership _out5330;
          DCOMPUTF16.COMP.FromOwnership(r, _10444_fOwned, expectedOwnership, out _out5329, out _out5330);
          r = _out5329;
          resultingOwnership = _out5330;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_10438_recIdentsCond, _10449_recIdentsT), _10445_recIdentsF);
          return ;
        }
      } else if (_source422.is_UnOp) {
        DAST._IUnaryOp _10451___mcc_h37 = _source422.dtor_unOp;
        DAST._IExpression _10452___mcc_h38 = _source422.dtor_expr;
        DAST.Format._IUnOpFormat _10453___mcc_h39 = _source422.dtor_format1;
        DAST._IUnaryOp _source424 = _10451___mcc_h37;
        if (_source424.is_Not) {
          DAST.Format._IUnOpFormat _10454_format = _10453___mcc_h39;
          DAST._IExpression _10455_e = _10452___mcc_h38;
          {
            RAST._IExpr _10456_recursiveGen;
            DCOMPUTF16._IOwnership _10457___v117;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10458_recIdents;
            RAST._IExpr _out5331;
            DCOMPUTF16._IOwnership _out5332;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5333;
            DCOMPUTF16.COMP.GenExpr(_10455_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5331, out _out5332, out _out5333);
            _10456_recursiveGen = _out5331;
            _10457___v117 = _out5332;
            _10458_recIdents = _out5333;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _10456_recursiveGen, _10454_format);
            RAST._IExpr _out5334;
            DCOMPUTF16._IOwnership _out5335;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5334, out _out5335);
            r = _out5334;
            resultingOwnership = _out5335;
            readIdents = _10458_recIdents;
            return ;
          }
        } else if (_source424.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _10459_format = _10453___mcc_h39;
          DAST._IExpression _10460_e = _10452___mcc_h38;
          {
            RAST._IExpr _10461_recursiveGen;
            DCOMPUTF16._IOwnership _10462___v118;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10463_recIdents;
            RAST._IExpr _out5336;
            DCOMPUTF16._IOwnership _out5337;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5338;
            DCOMPUTF16.COMP.GenExpr(_10460_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5336, out _out5337, out _out5338);
            _10461_recursiveGen = _out5336;
            _10462___v118 = _out5337;
            _10463_recIdents = _out5338;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _10461_recursiveGen, _10459_format);
            RAST._IExpr _out5339;
            DCOMPUTF16._IOwnership _out5340;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5339, out _out5340);
            r = _out5339;
            resultingOwnership = _out5340;
            readIdents = _10463_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnOpFormat _10464_format = _10453___mcc_h39;
          DAST._IExpression _10465_e = _10452___mcc_h38;
          {
            RAST._IExpr _10466_recursiveGen;
            DCOMPUTF16._IOwnership _10467_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10468_recIdents;
            RAST._IExpr _out5341;
            DCOMPUTF16._IOwnership _out5342;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5343;
            DCOMPUTF16.COMP.GenExpr(_10465_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5341, out _out5342, out _out5343);
            _10466_recursiveGen = _out5341;
            _10467_recOwned = _out5342;
            _10468_recIdents = _out5343;
            r = ((_10466_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out5344;
            DCOMPUTF16._IOwnership _out5345;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5344, out _out5345);
            r = _out5344;
            resultingOwnership = _out5345;
            readIdents = _10468_recIdents;
            return ;
          }
        }
      } else if (_source422.is_BinOp) {
        DAST._IBinOp _10469___mcc_h40 = _source422.dtor_op;
        DAST._IExpression _10470___mcc_h41 = _source422.dtor_left;
        DAST._IExpression _10471___mcc_h42 = _source422.dtor_right;
        DAST.Format._IBinOpFormat _10472___mcc_h43 = _source422.dtor_format2;
        RAST._IExpr _out5346;
        DCOMPUTF16._IOwnership _out5347;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5348;
        DCOMPUTF16.COMP.GenExprBinary(e, selfIdent, env, expectedOwnership, out _out5346, out _out5347, out _out5348);
        r = _out5346;
        resultingOwnership = _out5347;
        readIdents = _out5348;
      } else if (_source422.is_ArrayLen) {
        DAST._IExpression _10473___mcc_h44 = _source422.dtor_expr;
        BigInteger _10474___mcc_h45 = _source422.dtor_dim;
        BigInteger _10475_dim = _10474___mcc_h45;
        DAST._IExpression _10476_expr = _10473___mcc_h44;
        {
          RAST._IExpr _10477_recursiveGen;
          DCOMPUTF16._IOwnership _10478___v123;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10479_recIdents;
          RAST._IExpr _out5349;
          DCOMPUTF16._IOwnership _out5350;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5351;
          DCOMPUTF16.COMP.GenExpr(_10476_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5349, out _out5350, out _out5351);
          _10477_recursiveGen = _out5349;
          _10478___v123 = _out5350;
          _10479_recIdents = _out5351;
          if ((_10475_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_10477_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _10480_s;
            _10480_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMPUTF16.__default.IND);
            BigInteger _10481_i;
            _10481_i = BigInteger.One;
            while ((_10481_i) < (_10475_dim)) {
              _10480_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _10480_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _10481_i = (_10481_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_10477_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _10480_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out5352;
          DCOMPUTF16._IOwnership _out5353;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5352, out _out5353);
          r = _out5352;
          resultingOwnership = _out5353;
          readIdents = _10479_recIdents;
          return ;
        }
      } else if (_source422.is_MapKeys) {
        DAST._IExpression _10482___mcc_h46 = _source422.dtor_expr;
        DAST._IExpression _10483_expr = _10482___mcc_h46;
        {
          RAST._IExpr _10484_recursiveGen;
          DCOMPUTF16._IOwnership _10485___v124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10486_recIdents;
          RAST._IExpr _out5354;
          DCOMPUTF16._IOwnership _out5355;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5356;
          DCOMPUTF16.COMP.GenExpr(_10483_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5354, out _out5355, out _out5356);
          _10484_recursiveGen = _out5354;
          _10485___v124 = _out5355;
          _10486_recIdents = _out5356;
          readIdents = _10486_recIdents;
          r = ((_10484_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out5357;
          DCOMPUTF16._IOwnership _out5358;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5357, out _out5358);
          r = _out5357;
          resultingOwnership = _out5358;
          return ;
        }
      } else if (_source422.is_MapValues) {
        DAST._IExpression _10487___mcc_h47 = _source422.dtor_expr;
        DAST._IExpression _10488_expr = _10487___mcc_h47;
        {
          RAST._IExpr _10489_recursiveGen;
          DCOMPUTF16._IOwnership _10490___v125;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10491_recIdents;
          RAST._IExpr _out5359;
          DCOMPUTF16._IOwnership _out5360;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5361;
          DCOMPUTF16.COMP.GenExpr(_10488_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5359, out _out5360, out _out5361);
          _10489_recursiveGen = _out5359;
          _10490___v125 = _out5360;
          _10491_recIdents = _out5361;
          readIdents = _10491_recIdents;
          r = ((_10489_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out5362;
          DCOMPUTF16._IOwnership _out5363;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5362, out _out5363);
          r = _out5362;
          resultingOwnership = _out5363;
          return ;
        }
      } else if (_source422.is_Select) {
        DAST._IExpression _10492___mcc_h48 = _source422.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _10493___mcc_h49 = _source422.dtor_field;
        bool _10494___mcc_h50 = _source422.dtor_isConstant;
        bool _10495___mcc_h51 = _source422.dtor_onDatatype;
        DAST._IExpression _source425 = _10492___mcc_h48;
        if (_source425.is_Literal) {
          DAST._ILiteral _10496___mcc_h52 = _source425.dtor_Literal_a0;
          bool _10497_isDatatype = _10495___mcc_h51;
          bool _10498_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10499_field = _10493___mcc_h49;
          DAST._IExpression _10500_on = _10492___mcc_h48;
          {
            RAST._IExpr _10501_onExpr;
            DCOMPUTF16._IOwnership _10502_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10503_recIdents;
            RAST._IExpr _out5364;
            DCOMPUTF16._IOwnership _out5365;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5366;
            DCOMPUTF16.COMP.GenExpr(_10500_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5364, out _out5365, out _out5366);
            _10501_onExpr = _out5364;
            _10502_onOwned = _out5365;
            _10503_recIdents = _out5366;
            if ((_10497_isDatatype) || (_10498_isConstant)) {
              r = ((_10501_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10499_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5367;
              DCOMPUTF16._IOwnership _out5368;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5367, out _out5368);
              r = _out5367;
              resultingOwnership = _out5368;
            } else {
              Dafny.ISequence<Dafny.Rune> _10504_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10504_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10501_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10499_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5369;
              DCOMPUTF16._IOwnership _out5370;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10504_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5369, out _out5370);
              r = _out5369;
              resultingOwnership = _out5370;
            }
            readIdents = _10503_recIdents;
            return ;
          }
        } else if (_source425.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _10505___mcc_h54 = _source425.dtor_Ident_a0;
          bool _10506_isDatatype = _10495___mcc_h51;
          bool _10507_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10508_field = _10493___mcc_h49;
          DAST._IExpression _10509_on = _10492___mcc_h48;
          {
            RAST._IExpr _10510_onExpr;
            DCOMPUTF16._IOwnership _10511_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10512_recIdents;
            RAST._IExpr _out5371;
            DCOMPUTF16._IOwnership _out5372;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5373;
            DCOMPUTF16.COMP.GenExpr(_10509_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5371, out _out5372, out _out5373);
            _10510_onExpr = _out5371;
            _10511_onOwned = _out5372;
            _10512_recIdents = _out5373;
            if ((_10506_isDatatype) || (_10507_isConstant)) {
              r = ((_10510_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10508_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5374;
              DCOMPUTF16._IOwnership _out5375;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5374, out _out5375);
              r = _out5374;
              resultingOwnership = _out5375;
            } else {
              Dafny.ISequence<Dafny.Rune> _10513_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10513_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10510_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10508_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5376;
              DCOMPUTF16._IOwnership _out5377;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10513_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5376, out _out5377);
              r = _out5376;
              resultingOwnership = _out5377;
            }
            readIdents = _10512_recIdents;
            return ;
          }
        } else if (_source425.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10514___mcc_h56 = _source425.dtor_Companion_a0;
          bool _10515_isDatatype = _10495___mcc_h51;
          bool _10516_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10517_field = _10493___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10518_c = _10514___mcc_h56;
          {
            RAST._IExpr _10519_onExpr;
            DCOMPUTF16._IOwnership _10520_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10521_recIdents;
            RAST._IExpr _out5378;
            DCOMPUTF16._IOwnership _out5379;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5380;
            DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Companion(_10518_c), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5378, out _out5379, out _out5380);
            _10519_onExpr = _out5378;
            _10520_onOwned = _out5379;
            _10521_recIdents = _out5380;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_10519_onExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_10517_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out5381;
            DCOMPUTF16._IOwnership _out5382;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5381, out _out5382);
            r = _out5381;
            resultingOwnership = _out5382;
            readIdents = _10521_recIdents;
            return ;
          }
        } else if (_source425.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _10522___mcc_h58 = _source425.dtor_Tuple_a0;
          bool _10523_isDatatype = _10495___mcc_h51;
          bool _10524_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10525_field = _10493___mcc_h49;
          DAST._IExpression _10526_on = _10492___mcc_h48;
          {
            RAST._IExpr _10527_onExpr;
            DCOMPUTF16._IOwnership _10528_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10529_recIdents;
            RAST._IExpr _out5383;
            DCOMPUTF16._IOwnership _out5384;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5385;
            DCOMPUTF16.COMP.GenExpr(_10526_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5383, out _out5384, out _out5385);
            _10527_onExpr = _out5383;
            _10528_onOwned = _out5384;
            _10529_recIdents = _out5385;
            if ((_10523_isDatatype) || (_10524_isConstant)) {
              r = ((_10527_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10525_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5386;
              DCOMPUTF16._IOwnership _out5387;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5386, out _out5387);
              r = _out5386;
              resultingOwnership = _out5387;
            } else {
              Dafny.ISequence<Dafny.Rune> _10530_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10530_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10527_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10525_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5388;
              DCOMPUTF16._IOwnership _out5389;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10530_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5388, out _out5389);
              r = _out5388;
              resultingOwnership = _out5389;
            }
            readIdents = _10529_recIdents;
            return ;
          }
        } else if (_source425.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10531___mcc_h60 = _source425.dtor_path;
          Dafny.ISequence<DAST._IType> _10532___mcc_h61 = _source425.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _10533___mcc_h62 = _source425.dtor_args;
          bool _10534_isDatatype = _10495___mcc_h51;
          bool _10535_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10536_field = _10493___mcc_h49;
          DAST._IExpression _10537_on = _10492___mcc_h48;
          {
            RAST._IExpr _10538_onExpr;
            DCOMPUTF16._IOwnership _10539_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10540_recIdents;
            RAST._IExpr _out5390;
            DCOMPUTF16._IOwnership _out5391;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5392;
            DCOMPUTF16.COMP.GenExpr(_10537_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5390, out _out5391, out _out5392);
            _10538_onExpr = _out5390;
            _10539_onOwned = _out5391;
            _10540_recIdents = _out5392;
            if ((_10534_isDatatype) || (_10535_isConstant)) {
              r = ((_10538_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10536_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5393;
              DCOMPUTF16._IOwnership _out5394;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5393, out _out5394);
              r = _out5393;
              resultingOwnership = _out5394;
            } else {
              Dafny.ISequence<Dafny.Rune> _10541_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10541_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10538_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10536_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5395;
              DCOMPUTF16._IOwnership _out5396;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10541_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5395, out _out5396);
              r = _out5395;
              resultingOwnership = _out5396;
            }
            readIdents = _10540_recIdents;
            return ;
          }
        } else if (_source425.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _10542___mcc_h66 = _source425.dtor_dims;
          DAST._IType _10543___mcc_h67 = _source425.dtor_typ;
          bool _10544_isDatatype = _10495___mcc_h51;
          bool _10545_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10546_field = _10493___mcc_h49;
          DAST._IExpression _10547_on = _10492___mcc_h48;
          {
            RAST._IExpr _10548_onExpr;
            DCOMPUTF16._IOwnership _10549_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10550_recIdents;
            RAST._IExpr _out5397;
            DCOMPUTF16._IOwnership _out5398;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5399;
            DCOMPUTF16.COMP.GenExpr(_10547_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5397, out _out5398, out _out5399);
            _10548_onExpr = _out5397;
            _10549_onOwned = _out5398;
            _10550_recIdents = _out5399;
            if ((_10544_isDatatype) || (_10545_isConstant)) {
              r = ((_10548_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10546_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5400;
              DCOMPUTF16._IOwnership _out5401;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5400, out _out5401);
              r = _out5400;
              resultingOwnership = _out5401;
            } else {
              Dafny.ISequence<Dafny.Rune> _10551_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10551_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10548_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10546_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5402;
              DCOMPUTF16._IOwnership _out5403;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10551_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5402, out _out5403);
              r = _out5402;
              resultingOwnership = _out5403;
            }
            readIdents = _10550_recIdents;
            return ;
          }
        } else if (_source425.is_DatatypeValue) {
          DAST._IDatatypeType _10552___mcc_h70 = _source425.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _10553___mcc_h71 = _source425.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _10554___mcc_h72 = _source425.dtor_variant;
          bool _10555___mcc_h73 = _source425.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _10556___mcc_h74 = _source425.dtor_contents;
          bool _10557_isDatatype = _10495___mcc_h51;
          bool _10558_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10559_field = _10493___mcc_h49;
          DAST._IExpression _10560_on = _10492___mcc_h48;
          {
            RAST._IExpr _10561_onExpr;
            DCOMPUTF16._IOwnership _10562_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10563_recIdents;
            RAST._IExpr _out5404;
            DCOMPUTF16._IOwnership _out5405;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5406;
            DCOMPUTF16.COMP.GenExpr(_10560_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5404, out _out5405, out _out5406);
            _10561_onExpr = _out5404;
            _10562_onOwned = _out5405;
            _10563_recIdents = _out5406;
            if ((_10557_isDatatype) || (_10558_isConstant)) {
              r = ((_10561_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10559_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5407;
              DCOMPUTF16._IOwnership _out5408;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5407, out _out5408);
              r = _out5407;
              resultingOwnership = _out5408;
            } else {
              Dafny.ISequence<Dafny.Rune> _10564_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10564_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10561_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10559_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5409;
              DCOMPUTF16._IOwnership _out5410;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10564_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5409, out _out5410);
              r = _out5409;
              resultingOwnership = _out5410;
            }
            readIdents = _10563_recIdents;
            return ;
          }
        } else if (_source425.is_Convert) {
          DAST._IExpression _10565___mcc_h80 = _source425.dtor_value;
          DAST._IType _10566___mcc_h81 = _source425.dtor_from;
          DAST._IType _10567___mcc_h82 = _source425.dtor_typ;
          bool _10568_isDatatype = _10495___mcc_h51;
          bool _10569_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10570_field = _10493___mcc_h49;
          DAST._IExpression _10571_on = _10492___mcc_h48;
          {
            RAST._IExpr _10572_onExpr;
            DCOMPUTF16._IOwnership _10573_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10574_recIdents;
            RAST._IExpr _out5411;
            DCOMPUTF16._IOwnership _out5412;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5413;
            DCOMPUTF16.COMP.GenExpr(_10571_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5411, out _out5412, out _out5413);
            _10572_onExpr = _out5411;
            _10573_onOwned = _out5412;
            _10574_recIdents = _out5413;
            if ((_10568_isDatatype) || (_10569_isConstant)) {
              r = ((_10572_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10570_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5414;
              DCOMPUTF16._IOwnership _out5415;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5414, out _out5415);
              r = _out5414;
              resultingOwnership = _out5415;
            } else {
              Dafny.ISequence<Dafny.Rune> _10575_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10575_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10572_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10570_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5416;
              DCOMPUTF16._IOwnership _out5417;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10575_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5416, out _out5417);
              r = _out5416;
              resultingOwnership = _out5417;
            }
            readIdents = _10574_recIdents;
            return ;
          }
        } else if (_source425.is_SeqConstruct) {
          DAST._IExpression _10576___mcc_h86 = _source425.dtor_length;
          DAST._IExpression _10577___mcc_h87 = _source425.dtor_elem;
          bool _10578_isDatatype = _10495___mcc_h51;
          bool _10579_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10580_field = _10493___mcc_h49;
          DAST._IExpression _10581_on = _10492___mcc_h48;
          {
            RAST._IExpr _10582_onExpr;
            DCOMPUTF16._IOwnership _10583_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10584_recIdents;
            RAST._IExpr _out5418;
            DCOMPUTF16._IOwnership _out5419;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5420;
            DCOMPUTF16.COMP.GenExpr(_10581_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5418, out _out5419, out _out5420);
            _10582_onExpr = _out5418;
            _10583_onOwned = _out5419;
            _10584_recIdents = _out5420;
            if ((_10578_isDatatype) || (_10579_isConstant)) {
              r = ((_10582_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10580_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5421;
              DCOMPUTF16._IOwnership _out5422;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5421, out _out5422);
              r = _out5421;
              resultingOwnership = _out5422;
            } else {
              Dafny.ISequence<Dafny.Rune> _10585_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10585_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10582_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10580_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5423;
              DCOMPUTF16._IOwnership _out5424;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10585_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5423, out _out5424);
              r = _out5423;
              resultingOwnership = _out5424;
            }
            readIdents = _10584_recIdents;
            return ;
          }
        } else if (_source425.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _10586___mcc_h90 = _source425.dtor_elements;
          DAST._IType _10587___mcc_h91 = _source425.dtor_typ;
          bool _10588_isDatatype = _10495___mcc_h51;
          bool _10589_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10590_field = _10493___mcc_h49;
          DAST._IExpression _10591_on = _10492___mcc_h48;
          {
            RAST._IExpr _10592_onExpr;
            DCOMPUTF16._IOwnership _10593_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10594_recIdents;
            RAST._IExpr _out5425;
            DCOMPUTF16._IOwnership _out5426;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5427;
            DCOMPUTF16.COMP.GenExpr(_10591_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5425, out _out5426, out _out5427);
            _10592_onExpr = _out5425;
            _10593_onOwned = _out5426;
            _10594_recIdents = _out5427;
            if ((_10588_isDatatype) || (_10589_isConstant)) {
              r = ((_10592_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10590_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5428;
              DCOMPUTF16._IOwnership _out5429;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5428, out _out5429);
              r = _out5428;
              resultingOwnership = _out5429;
            } else {
              Dafny.ISequence<Dafny.Rune> _10595_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10595_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10592_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10590_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5430;
              DCOMPUTF16._IOwnership _out5431;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10595_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5430, out _out5431);
              r = _out5430;
              resultingOwnership = _out5431;
            }
            readIdents = _10594_recIdents;
            return ;
          }
        } else if (_source425.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _10596___mcc_h94 = _source425.dtor_elements;
          bool _10597_isDatatype = _10495___mcc_h51;
          bool _10598_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10599_field = _10493___mcc_h49;
          DAST._IExpression _10600_on = _10492___mcc_h48;
          {
            RAST._IExpr _10601_onExpr;
            DCOMPUTF16._IOwnership _10602_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10603_recIdents;
            RAST._IExpr _out5432;
            DCOMPUTF16._IOwnership _out5433;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5434;
            DCOMPUTF16.COMP.GenExpr(_10600_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5432, out _out5433, out _out5434);
            _10601_onExpr = _out5432;
            _10602_onOwned = _out5433;
            _10603_recIdents = _out5434;
            if ((_10597_isDatatype) || (_10598_isConstant)) {
              r = ((_10601_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10599_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5435;
              DCOMPUTF16._IOwnership _out5436;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5435, out _out5436);
              r = _out5435;
              resultingOwnership = _out5436;
            } else {
              Dafny.ISequence<Dafny.Rune> _10604_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10604_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10601_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10599_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5437;
              DCOMPUTF16._IOwnership _out5438;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10604_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5437, out _out5438);
              r = _out5437;
              resultingOwnership = _out5438;
            }
            readIdents = _10603_recIdents;
            return ;
          }
        } else if (_source425.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _10605___mcc_h96 = _source425.dtor_elements;
          bool _10606_isDatatype = _10495___mcc_h51;
          bool _10607_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10608_field = _10493___mcc_h49;
          DAST._IExpression _10609_on = _10492___mcc_h48;
          {
            RAST._IExpr _10610_onExpr;
            DCOMPUTF16._IOwnership _10611_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10612_recIdents;
            RAST._IExpr _out5439;
            DCOMPUTF16._IOwnership _out5440;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5441;
            DCOMPUTF16.COMP.GenExpr(_10609_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5439, out _out5440, out _out5441);
            _10610_onExpr = _out5439;
            _10611_onOwned = _out5440;
            _10612_recIdents = _out5441;
            if ((_10606_isDatatype) || (_10607_isConstant)) {
              r = ((_10610_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10608_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5442;
              DCOMPUTF16._IOwnership _out5443;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5442, out _out5443);
              r = _out5442;
              resultingOwnership = _out5443;
            } else {
              Dafny.ISequence<Dafny.Rune> _10613_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10613_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10610_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10608_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5444;
              DCOMPUTF16._IOwnership _out5445;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10613_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5444, out _out5445);
              r = _out5444;
              resultingOwnership = _out5445;
            }
            readIdents = _10612_recIdents;
            return ;
          }
        } else if (_source425.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _10614___mcc_h98 = _source425.dtor_mapElems;
          bool _10615_isDatatype = _10495___mcc_h51;
          bool _10616_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10617_field = _10493___mcc_h49;
          DAST._IExpression _10618_on = _10492___mcc_h48;
          {
            RAST._IExpr _10619_onExpr;
            DCOMPUTF16._IOwnership _10620_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10621_recIdents;
            RAST._IExpr _out5446;
            DCOMPUTF16._IOwnership _out5447;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5448;
            DCOMPUTF16.COMP.GenExpr(_10618_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5446, out _out5447, out _out5448);
            _10619_onExpr = _out5446;
            _10620_onOwned = _out5447;
            _10621_recIdents = _out5448;
            if ((_10615_isDatatype) || (_10616_isConstant)) {
              r = ((_10619_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10617_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5449;
              DCOMPUTF16._IOwnership _out5450;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5449, out _out5450);
              r = _out5449;
              resultingOwnership = _out5450;
            } else {
              Dafny.ISequence<Dafny.Rune> _10622_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10622_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10619_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10617_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5451;
              DCOMPUTF16._IOwnership _out5452;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10622_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5451, out _out5452);
              r = _out5451;
              resultingOwnership = _out5452;
            }
            readIdents = _10621_recIdents;
            return ;
          }
        } else if (_source425.is_MapBuilder) {
          DAST._IType _10623___mcc_h100 = _source425.dtor_keyType;
          DAST._IType _10624___mcc_h101 = _source425.dtor_valueType;
          bool _10625_isDatatype = _10495___mcc_h51;
          bool _10626_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10627_field = _10493___mcc_h49;
          DAST._IExpression _10628_on = _10492___mcc_h48;
          {
            RAST._IExpr _10629_onExpr;
            DCOMPUTF16._IOwnership _10630_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10631_recIdents;
            RAST._IExpr _out5453;
            DCOMPUTF16._IOwnership _out5454;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5455;
            DCOMPUTF16.COMP.GenExpr(_10628_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5453, out _out5454, out _out5455);
            _10629_onExpr = _out5453;
            _10630_onOwned = _out5454;
            _10631_recIdents = _out5455;
            if ((_10625_isDatatype) || (_10626_isConstant)) {
              r = ((_10629_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10627_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5456;
              DCOMPUTF16._IOwnership _out5457;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5456, out _out5457);
              r = _out5456;
              resultingOwnership = _out5457;
            } else {
              Dafny.ISequence<Dafny.Rune> _10632_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10632_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10629_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10627_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5458;
              DCOMPUTF16._IOwnership _out5459;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10632_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5458, out _out5459);
              r = _out5458;
              resultingOwnership = _out5459;
            }
            readIdents = _10631_recIdents;
            return ;
          }
        } else if (_source425.is_SeqUpdate) {
          DAST._IExpression _10633___mcc_h104 = _source425.dtor_expr;
          DAST._IExpression _10634___mcc_h105 = _source425.dtor_indexExpr;
          DAST._IExpression _10635___mcc_h106 = _source425.dtor_value;
          bool _10636_isDatatype = _10495___mcc_h51;
          bool _10637_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10638_field = _10493___mcc_h49;
          DAST._IExpression _10639_on = _10492___mcc_h48;
          {
            RAST._IExpr _10640_onExpr;
            DCOMPUTF16._IOwnership _10641_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10642_recIdents;
            RAST._IExpr _out5460;
            DCOMPUTF16._IOwnership _out5461;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5462;
            DCOMPUTF16.COMP.GenExpr(_10639_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5460, out _out5461, out _out5462);
            _10640_onExpr = _out5460;
            _10641_onOwned = _out5461;
            _10642_recIdents = _out5462;
            if ((_10636_isDatatype) || (_10637_isConstant)) {
              r = ((_10640_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10638_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5463;
              DCOMPUTF16._IOwnership _out5464;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5463, out _out5464);
              r = _out5463;
              resultingOwnership = _out5464;
            } else {
              Dafny.ISequence<Dafny.Rune> _10643_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10643_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10640_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10638_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5465;
              DCOMPUTF16._IOwnership _out5466;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10643_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5465, out _out5466);
              r = _out5465;
              resultingOwnership = _out5466;
            }
            readIdents = _10642_recIdents;
            return ;
          }
        } else if (_source425.is_MapUpdate) {
          DAST._IExpression _10644___mcc_h110 = _source425.dtor_expr;
          DAST._IExpression _10645___mcc_h111 = _source425.dtor_indexExpr;
          DAST._IExpression _10646___mcc_h112 = _source425.dtor_value;
          bool _10647_isDatatype = _10495___mcc_h51;
          bool _10648_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10649_field = _10493___mcc_h49;
          DAST._IExpression _10650_on = _10492___mcc_h48;
          {
            RAST._IExpr _10651_onExpr;
            DCOMPUTF16._IOwnership _10652_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10653_recIdents;
            RAST._IExpr _out5467;
            DCOMPUTF16._IOwnership _out5468;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5469;
            DCOMPUTF16.COMP.GenExpr(_10650_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5467, out _out5468, out _out5469);
            _10651_onExpr = _out5467;
            _10652_onOwned = _out5468;
            _10653_recIdents = _out5469;
            if ((_10647_isDatatype) || (_10648_isConstant)) {
              r = ((_10651_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10649_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5470;
              DCOMPUTF16._IOwnership _out5471;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5470, out _out5471);
              r = _out5470;
              resultingOwnership = _out5471;
            } else {
              Dafny.ISequence<Dafny.Rune> _10654_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10654_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10651_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10649_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5472;
              DCOMPUTF16._IOwnership _out5473;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10654_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5472, out _out5473);
              r = _out5472;
              resultingOwnership = _out5473;
            }
            readIdents = _10653_recIdents;
            return ;
          }
        } else if (_source425.is_SetBuilder) {
          DAST._IType _10655___mcc_h116 = _source425.dtor_elemType;
          bool _10656_isDatatype = _10495___mcc_h51;
          bool _10657_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10658_field = _10493___mcc_h49;
          DAST._IExpression _10659_on = _10492___mcc_h48;
          {
            RAST._IExpr _10660_onExpr;
            DCOMPUTF16._IOwnership _10661_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10662_recIdents;
            RAST._IExpr _out5474;
            DCOMPUTF16._IOwnership _out5475;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5476;
            DCOMPUTF16.COMP.GenExpr(_10659_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5474, out _out5475, out _out5476);
            _10660_onExpr = _out5474;
            _10661_onOwned = _out5475;
            _10662_recIdents = _out5476;
            if ((_10656_isDatatype) || (_10657_isConstant)) {
              r = ((_10660_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10658_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5477;
              DCOMPUTF16._IOwnership _out5478;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5477, out _out5478);
              r = _out5477;
              resultingOwnership = _out5478;
            } else {
              Dafny.ISequence<Dafny.Rune> _10663_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10663_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10660_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10658_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5479;
              DCOMPUTF16._IOwnership _out5480;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10663_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5479, out _out5480);
              r = _out5479;
              resultingOwnership = _out5480;
            }
            readIdents = _10662_recIdents;
            return ;
          }
        } else if (_source425.is_ToMultiset) {
          DAST._IExpression _10664___mcc_h118 = _source425.dtor_ToMultiset_a0;
          bool _10665_isDatatype = _10495___mcc_h51;
          bool _10666_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10667_field = _10493___mcc_h49;
          DAST._IExpression _10668_on = _10492___mcc_h48;
          {
            RAST._IExpr _10669_onExpr;
            DCOMPUTF16._IOwnership _10670_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10671_recIdents;
            RAST._IExpr _out5481;
            DCOMPUTF16._IOwnership _out5482;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5483;
            DCOMPUTF16.COMP.GenExpr(_10668_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5481, out _out5482, out _out5483);
            _10669_onExpr = _out5481;
            _10670_onOwned = _out5482;
            _10671_recIdents = _out5483;
            if ((_10665_isDatatype) || (_10666_isConstant)) {
              r = ((_10669_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10667_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5484;
              DCOMPUTF16._IOwnership _out5485;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5484, out _out5485);
              r = _out5484;
              resultingOwnership = _out5485;
            } else {
              Dafny.ISequence<Dafny.Rune> _10672_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10672_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10669_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10667_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5486;
              DCOMPUTF16._IOwnership _out5487;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10672_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5486, out _out5487);
              r = _out5486;
              resultingOwnership = _out5487;
            }
            readIdents = _10671_recIdents;
            return ;
          }
        } else if (_source425.is_This) {
          bool _10673_isDatatype = _10495___mcc_h51;
          bool _10674_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10675_field = _10493___mcc_h49;
          DAST._IExpression _10676_on = _10492___mcc_h48;
          {
            RAST._IExpr _10677_onExpr;
            DCOMPUTF16._IOwnership _10678_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10679_recIdents;
            RAST._IExpr _out5488;
            DCOMPUTF16._IOwnership _out5489;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5490;
            DCOMPUTF16.COMP.GenExpr(_10676_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5488, out _out5489, out _out5490);
            _10677_onExpr = _out5488;
            _10678_onOwned = _out5489;
            _10679_recIdents = _out5490;
            if ((_10673_isDatatype) || (_10674_isConstant)) {
              r = ((_10677_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10675_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5491;
              DCOMPUTF16._IOwnership _out5492;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5491, out _out5492);
              r = _out5491;
              resultingOwnership = _out5492;
            } else {
              Dafny.ISequence<Dafny.Rune> _10680_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10680_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10677_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10675_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5493;
              DCOMPUTF16._IOwnership _out5494;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10680_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5493, out _out5494);
              r = _out5493;
              resultingOwnership = _out5494;
            }
            readIdents = _10679_recIdents;
            return ;
          }
        } else if (_source425.is_Ite) {
          DAST._IExpression _10681___mcc_h120 = _source425.dtor_cond;
          DAST._IExpression _10682___mcc_h121 = _source425.dtor_thn;
          DAST._IExpression _10683___mcc_h122 = _source425.dtor_els;
          bool _10684_isDatatype = _10495___mcc_h51;
          bool _10685_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10686_field = _10493___mcc_h49;
          DAST._IExpression _10687_on = _10492___mcc_h48;
          {
            RAST._IExpr _10688_onExpr;
            DCOMPUTF16._IOwnership _10689_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10690_recIdents;
            RAST._IExpr _out5495;
            DCOMPUTF16._IOwnership _out5496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5497;
            DCOMPUTF16.COMP.GenExpr(_10687_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5495, out _out5496, out _out5497);
            _10688_onExpr = _out5495;
            _10689_onOwned = _out5496;
            _10690_recIdents = _out5497;
            if ((_10684_isDatatype) || (_10685_isConstant)) {
              r = ((_10688_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10686_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5498;
              DCOMPUTF16._IOwnership _out5499;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5498, out _out5499);
              r = _out5498;
              resultingOwnership = _out5499;
            } else {
              Dafny.ISequence<Dafny.Rune> _10691_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10691_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10688_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10686_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5500;
              DCOMPUTF16._IOwnership _out5501;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10691_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5500, out _out5501);
              r = _out5500;
              resultingOwnership = _out5501;
            }
            readIdents = _10690_recIdents;
            return ;
          }
        } else if (_source425.is_UnOp) {
          DAST._IUnaryOp _10692___mcc_h126 = _source425.dtor_unOp;
          DAST._IExpression _10693___mcc_h127 = _source425.dtor_expr;
          DAST.Format._IUnOpFormat _10694___mcc_h128 = _source425.dtor_format1;
          bool _10695_isDatatype = _10495___mcc_h51;
          bool _10696_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10697_field = _10493___mcc_h49;
          DAST._IExpression _10698_on = _10492___mcc_h48;
          {
            RAST._IExpr _10699_onExpr;
            DCOMPUTF16._IOwnership _10700_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10701_recIdents;
            RAST._IExpr _out5502;
            DCOMPUTF16._IOwnership _out5503;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5504;
            DCOMPUTF16.COMP.GenExpr(_10698_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5502, out _out5503, out _out5504);
            _10699_onExpr = _out5502;
            _10700_onOwned = _out5503;
            _10701_recIdents = _out5504;
            if ((_10695_isDatatype) || (_10696_isConstant)) {
              r = ((_10699_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10697_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5505;
              DCOMPUTF16._IOwnership _out5506;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5505, out _out5506);
              r = _out5505;
              resultingOwnership = _out5506;
            } else {
              Dafny.ISequence<Dafny.Rune> _10702_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10702_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10699_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10697_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5507;
              DCOMPUTF16._IOwnership _out5508;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10702_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5507, out _out5508);
              r = _out5507;
              resultingOwnership = _out5508;
            }
            readIdents = _10701_recIdents;
            return ;
          }
        } else if (_source425.is_BinOp) {
          DAST._IBinOp _10703___mcc_h132 = _source425.dtor_op;
          DAST._IExpression _10704___mcc_h133 = _source425.dtor_left;
          DAST._IExpression _10705___mcc_h134 = _source425.dtor_right;
          DAST.Format._IBinOpFormat _10706___mcc_h135 = _source425.dtor_format2;
          bool _10707_isDatatype = _10495___mcc_h51;
          bool _10708_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10709_field = _10493___mcc_h49;
          DAST._IExpression _10710_on = _10492___mcc_h48;
          {
            RAST._IExpr _10711_onExpr;
            DCOMPUTF16._IOwnership _10712_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10713_recIdents;
            RAST._IExpr _out5509;
            DCOMPUTF16._IOwnership _out5510;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5511;
            DCOMPUTF16.COMP.GenExpr(_10710_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5509, out _out5510, out _out5511);
            _10711_onExpr = _out5509;
            _10712_onOwned = _out5510;
            _10713_recIdents = _out5511;
            if ((_10707_isDatatype) || (_10708_isConstant)) {
              r = ((_10711_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10709_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5512;
              DCOMPUTF16._IOwnership _out5513;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5512, out _out5513);
              r = _out5512;
              resultingOwnership = _out5513;
            } else {
              Dafny.ISequence<Dafny.Rune> _10714_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10714_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10711_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10709_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5514;
              DCOMPUTF16._IOwnership _out5515;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10714_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5514, out _out5515);
              r = _out5514;
              resultingOwnership = _out5515;
            }
            readIdents = _10713_recIdents;
            return ;
          }
        } else if (_source425.is_ArrayLen) {
          DAST._IExpression _10715___mcc_h140 = _source425.dtor_expr;
          BigInteger _10716___mcc_h141 = _source425.dtor_dim;
          bool _10717_isDatatype = _10495___mcc_h51;
          bool _10718_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10719_field = _10493___mcc_h49;
          DAST._IExpression _10720_on = _10492___mcc_h48;
          {
            RAST._IExpr _10721_onExpr;
            DCOMPUTF16._IOwnership _10722_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10723_recIdents;
            RAST._IExpr _out5516;
            DCOMPUTF16._IOwnership _out5517;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5518;
            DCOMPUTF16.COMP.GenExpr(_10720_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5516, out _out5517, out _out5518);
            _10721_onExpr = _out5516;
            _10722_onOwned = _out5517;
            _10723_recIdents = _out5518;
            if ((_10717_isDatatype) || (_10718_isConstant)) {
              r = ((_10721_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10719_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5519;
              DCOMPUTF16._IOwnership _out5520;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5519, out _out5520);
              r = _out5519;
              resultingOwnership = _out5520;
            } else {
              Dafny.ISequence<Dafny.Rune> _10724_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10724_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10721_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10719_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5521;
              DCOMPUTF16._IOwnership _out5522;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10724_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5521, out _out5522);
              r = _out5521;
              resultingOwnership = _out5522;
            }
            readIdents = _10723_recIdents;
            return ;
          }
        } else if (_source425.is_MapKeys) {
          DAST._IExpression _10725___mcc_h144 = _source425.dtor_expr;
          bool _10726_isDatatype = _10495___mcc_h51;
          bool _10727_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10728_field = _10493___mcc_h49;
          DAST._IExpression _10729_on = _10492___mcc_h48;
          {
            RAST._IExpr _10730_onExpr;
            DCOMPUTF16._IOwnership _10731_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10732_recIdents;
            RAST._IExpr _out5523;
            DCOMPUTF16._IOwnership _out5524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5525;
            DCOMPUTF16.COMP.GenExpr(_10729_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5523, out _out5524, out _out5525);
            _10730_onExpr = _out5523;
            _10731_onOwned = _out5524;
            _10732_recIdents = _out5525;
            if ((_10726_isDatatype) || (_10727_isConstant)) {
              r = ((_10730_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10728_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5526;
              DCOMPUTF16._IOwnership _out5527;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5526, out _out5527);
              r = _out5526;
              resultingOwnership = _out5527;
            } else {
              Dafny.ISequence<Dafny.Rune> _10733_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10733_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10730_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10728_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5528;
              DCOMPUTF16._IOwnership _out5529;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10733_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5528, out _out5529);
              r = _out5528;
              resultingOwnership = _out5529;
            }
            readIdents = _10732_recIdents;
            return ;
          }
        } else if (_source425.is_MapValues) {
          DAST._IExpression _10734___mcc_h146 = _source425.dtor_expr;
          bool _10735_isDatatype = _10495___mcc_h51;
          bool _10736_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10737_field = _10493___mcc_h49;
          DAST._IExpression _10738_on = _10492___mcc_h48;
          {
            RAST._IExpr _10739_onExpr;
            DCOMPUTF16._IOwnership _10740_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10741_recIdents;
            RAST._IExpr _out5530;
            DCOMPUTF16._IOwnership _out5531;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5532;
            DCOMPUTF16.COMP.GenExpr(_10738_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5530, out _out5531, out _out5532);
            _10739_onExpr = _out5530;
            _10740_onOwned = _out5531;
            _10741_recIdents = _out5532;
            if ((_10735_isDatatype) || (_10736_isConstant)) {
              r = ((_10739_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10737_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5533;
              DCOMPUTF16._IOwnership _out5534;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5533, out _out5534);
              r = _out5533;
              resultingOwnership = _out5534;
            } else {
              Dafny.ISequence<Dafny.Rune> _10742_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10742_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10739_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10737_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5535;
              DCOMPUTF16._IOwnership _out5536;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10742_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5535, out _out5536);
              r = _out5535;
              resultingOwnership = _out5536;
            }
            readIdents = _10741_recIdents;
            return ;
          }
        } else if (_source425.is_Select) {
          DAST._IExpression _10743___mcc_h148 = _source425.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _10744___mcc_h149 = _source425.dtor_field;
          bool _10745___mcc_h150 = _source425.dtor_isConstant;
          bool _10746___mcc_h151 = _source425.dtor_onDatatype;
          bool _10747_isDatatype = _10495___mcc_h51;
          bool _10748_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10749_field = _10493___mcc_h49;
          DAST._IExpression _10750_on = _10492___mcc_h48;
          {
            RAST._IExpr _10751_onExpr;
            DCOMPUTF16._IOwnership _10752_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10753_recIdents;
            RAST._IExpr _out5537;
            DCOMPUTF16._IOwnership _out5538;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5539;
            DCOMPUTF16.COMP.GenExpr(_10750_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5537, out _out5538, out _out5539);
            _10751_onExpr = _out5537;
            _10752_onOwned = _out5538;
            _10753_recIdents = _out5539;
            if ((_10747_isDatatype) || (_10748_isConstant)) {
              r = ((_10751_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10749_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5540;
              DCOMPUTF16._IOwnership _out5541;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5540, out _out5541);
              r = _out5540;
              resultingOwnership = _out5541;
            } else {
              Dafny.ISequence<Dafny.Rune> _10754_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10754_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10751_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10749_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5542;
              DCOMPUTF16._IOwnership _out5543;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10754_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5542, out _out5543);
              r = _out5542;
              resultingOwnership = _out5543;
            }
            readIdents = _10753_recIdents;
            return ;
          }
        } else if (_source425.is_SelectFn) {
          DAST._IExpression _10755___mcc_h156 = _source425.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _10756___mcc_h157 = _source425.dtor_field;
          bool _10757___mcc_h158 = _source425.dtor_onDatatype;
          bool _10758___mcc_h159 = _source425.dtor_isStatic;
          BigInteger _10759___mcc_h160 = _source425.dtor_arity;
          bool _10760_isDatatype = _10495___mcc_h51;
          bool _10761_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10762_field = _10493___mcc_h49;
          DAST._IExpression _10763_on = _10492___mcc_h48;
          {
            RAST._IExpr _10764_onExpr;
            DCOMPUTF16._IOwnership _10765_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10766_recIdents;
            RAST._IExpr _out5544;
            DCOMPUTF16._IOwnership _out5545;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5546;
            DCOMPUTF16.COMP.GenExpr(_10763_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5544, out _out5545, out _out5546);
            _10764_onExpr = _out5544;
            _10765_onOwned = _out5545;
            _10766_recIdents = _out5546;
            if ((_10760_isDatatype) || (_10761_isConstant)) {
              r = ((_10764_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10762_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5547;
              DCOMPUTF16._IOwnership _out5548;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5547, out _out5548);
              r = _out5547;
              resultingOwnership = _out5548;
            } else {
              Dafny.ISequence<Dafny.Rune> _10767_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10767_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10764_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10762_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5549;
              DCOMPUTF16._IOwnership _out5550;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10767_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5549, out _out5550);
              r = _out5549;
              resultingOwnership = _out5550;
            }
            readIdents = _10766_recIdents;
            return ;
          }
        } else if (_source425.is_Index) {
          DAST._IExpression _10768___mcc_h166 = _source425.dtor_expr;
          DAST._ICollKind _10769___mcc_h167 = _source425.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _10770___mcc_h168 = _source425.dtor_indices;
          bool _10771_isDatatype = _10495___mcc_h51;
          bool _10772_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10773_field = _10493___mcc_h49;
          DAST._IExpression _10774_on = _10492___mcc_h48;
          {
            RAST._IExpr _10775_onExpr;
            DCOMPUTF16._IOwnership _10776_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10777_recIdents;
            RAST._IExpr _out5551;
            DCOMPUTF16._IOwnership _out5552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5553;
            DCOMPUTF16.COMP.GenExpr(_10774_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5551, out _out5552, out _out5553);
            _10775_onExpr = _out5551;
            _10776_onOwned = _out5552;
            _10777_recIdents = _out5553;
            if ((_10771_isDatatype) || (_10772_isConstant)) {
              r = ((_10775_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10773_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5554;
              DCOMPUTF16._IOwnership _out5555;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5554, out _out5555);
              r = _out5554;
              resultingOwnership = _out5555;
            } else {
              Dafny.ISequence<Dafny.Rune> _10778_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10778_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10775_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10773_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5556;
              DCOMPUTF16._IOwnership _out5557;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10778_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5556, out _out5557);
              r = _out5556;
              resultingOwnership = _out5557;
            }
            readIdents = _10777_recIdents;
            return ;
          }
        } else if (_source425.is_IndexRange) {
          DAST._IExpression _10779___mcc_h172 = _source425.dtor_expr;
          bool _10780___mcc_h173 = _source425.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _10781___mcc_h174 = _source425.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _10782___mcc_h175 = _source425.dtor_high;
          bool _10783_isDatatype = _10495___mcc_h51;
          bool _10784_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10785_field = _10493___mcc_h49;
          DAST._IExpression _10786_on = _10492___mcc_h48;
          {
            RAST._IExpr _10787_onExpr;
            DCOMPUTF16._IOwnership _10788_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10789_recIdents;
            RAST._IExpr _out5558;
            DCOMPUTF16._IOwnership _out5559;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5560;
            DCOMPUTF16.COMP.GenExpr(_10786_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5558, out _out5559, out _out5560);
            _10787_onExpr = _out5558;
            _10788_onOwned = _out5559;
            _10789_recIdents = _out5560;
            if ((_10783_isDatatype) || (_10784_isConstant)) {
              r = ((_10787_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10785_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5561;
              DCOMPUTF16._IOwnership _out5562;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5561, out _out5562);
              r = _out5561;
              resultingOwnership = _out5562;
            } else {
              Dafny.ISequence<Dafny.Rune> _10790_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10790_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10787_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10785_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5563;
              DCOMPUTF16._IOwnership _out5564;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10790_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5563, out _out5564);
              r = _out5563;
              resultingOwnership = _out5564;
            }
            readIdents = _10789_recIdents;
            return ;
          }
        } else if (_source425.is_TupleSelect) {
          DAST._IExpression _10791___mcc_h180 = _source425.dtor_expr;
          BigInteger _10792___mcc_h181 = _source425.dtor_index;
          bool _10793_isDatatype = _10495___mcc_h51;
          bool _10794_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10795_field = _10493___mcc_h49;
          DAST._IExpression _10796_on = _10492___mcc_h48;
          {
            RAST._IExpr _10797_onExpr;
            DCOMPUTF16._IOwnership _10798_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10799_recIdents;
            RAST._IExpr _out5565;
            DCOMPUTF16._IOwnership _out5566;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5567;
            DCOMPUTF16.COMP.GenExpr(_10796_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5565, out _out5566, out _out5567);
            _10797_onExpr = _out5565;
            _10798_onOwned = _out5566;
            _10799_recIdents = _out5567;
            if ((_10793_isDatatype) || (_10794_isConstant)) {
              r = ((_10797_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10795_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5568;
              DCOMPUTF16._IOwnership _out5569;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5568, out _out5569);
              r = _out5568;
              resultingOwnership = _out5569;
            } else {
              Dafny.ISequence<Dafny.Rune> _10800_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10800_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10797_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10795_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5570;
              DCOMPUTF16._IOwnership _out5571;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10800_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5570, out _out5571);
              r = _out5570;
              resultingOwnership = _out5571;
            }
            readIdents = _10799_recIdents;
            return ;
          }
        } else if (_source425.is_Call) {
          DAST._IExpression _10801___mcc_h184 = _source425.dtor_on;
          DAST._ICallName _10802___mcc_h185 = _source425.dtor_callName;
          Dafny.ISequence<DAST._IType> _10803___mcc_h186 = _source425.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _10804___mcc_h187 = _source425.dtor_args;
          bool _10805_isDatatype = _10495___mcc_h51;
          bool _10806_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10807_field = _10493___mcc_h49;
          DAST._IExpression _10808_on = _10492___mcc_h48;
          {
            RAST._IExpr _10809_onExpr;
            DCOMPUTF16._IOwnership _10810_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10811_recIdents;
            RAST._IExpr _out5572;
            DCOMPUTF16._IOwnership _out5573;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5574;
            DCOMPUTF16.COMP.GenExpr(_10808_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5572, out _out5573, out _out5574);
            _10809_onExpr = _out5572;
            _10810_onOwned = _out5573;
            _10811_recIdents = _out5574;
            if ((_10805_isDatatype) || (_10806_isConstant)) {
              r = ((_10809_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10807_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5575;
              DCOMPUTF16._IOwnership _out5576;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5575, out _out5576);
              r = _out5575;
              resultingOwnership = _out5576;
            } else {
              Dafny.ISequence<Dafny.Rune> _10812_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10812_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10809_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10807_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5577;
              DCOMPUTF16._IOwnership _out5578;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10812_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5577, out _out5578);
              r = _out5577;
              resultingOwnership = _out5578;
            }
            readIdents = _10811_recIdents;
            return ;
          }
        } else if (_source425.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _10813___mcc_h192 = _source425.dtor_params;
          DAST._IType _10814___mcc_h193 = _source425.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _10815___mcc_h194 = _source425.dtor_body;
          bool _10816_isDatatype = _10495___mcc_h51;
          bool _10817_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10818_field = _10493___mcc_h49;
          DAST._IExpression _10819_on = _10492___mcc_h48;
          {
            RAST._IExpr _10820_onExpr;
            DCOMPUTF16._IOwnership _10821_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10822_recIdents;
            RAST._IExpr _out5579;
            DCOMPUTF16._IOwnership _out5580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5581;
            DCOMPUTF16.COMP.GenExpr(_10819_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5579, out _out5580, out _out5581);
            _10820_onExpr = _out5579;
            _10821_onOwned = _out5580;
            _10822_recIdents = _out5581;
            if ((_10816_isDatatype) || (_10817_isConstant)) {
              r = ((_10820_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10818_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5582;
              DCOMPUTF16._IOwnership _out5583;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5582, out _out5583);
              r = _out5582;
              resultingOwnership = _out5583;
            } else {
              Dafny.ISequence<Dafny.Rune> _10823_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10823_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10820_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10818_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5584;
              DCOMPUTF16._IOwnership _out5585;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10823_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5584, out _out5585);
              r = _out5584;
              resultingOwnership = _out5585;
            }
            readIdents = _10822_recIdents;
            return ;
          }
        } else if (_source425.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _10824___mcc_h198 = _source425.dtor_values;
          DAST._IType _10825___mcc_h199 = _source425.dtor_retType;
          DAST._IExpression _10826___mcc_h200 = _source425.dtor_expr;
          bool _10827_isDatatype = _10495___mcc_h51;
          bool _10828_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10829_field = _10493___mcc_h49;
          DAST._IExpression _10830_on = _10492___mcc_h48;
          {
            RAST._IExpr _10831_onExpr;
            DCOMPUTF16._IOwnership _10832_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10833_recIdents;
            RAST._IExpr _out5586;
            DCOMPUTF16._IOwnership _out5587;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5588;
            DCOMPUTF16.COMP.GenExpr(_10830_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5586, out _out5587, out _out5588);
            _10831_onExpr = _out5586;
            _10832_onOwned = _out5587;
            _10833_recIdents = _out5588;
            if ((_10827_isDatatype) || (_10828_isConstant)) {
              r = ((_10831_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10829_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5589;
              DCOMPUTF16._IOwnership _out5590;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5589, out _out5590);
              r = _out5589;
              resultingOwnership = _out5590;
            } else {
              Dafny.ISequence<Dafny.Rune> _10834_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10834_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10831_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10829_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5591;
              DCOMPUTF16._IOwnership _out5592;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10834_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5591, out _out5592);
              r = _out5591;
              resultingOwnership = _out5592;
            }
            readIdents = _10833_recIdents;
            return ;
          }
        } else if (_source425.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _10835___mcc_h204 = _source425.dtor_name;
          DAST._IType _10836___mcc_h205 = _source425.dtor_typ;
          DAST._IExpression _10837___mcc_h206 = _source425.dtor_value;
          DAST._IExpression _10838___mcc_h207 = _source425.dtor_iifeBody;
          bool _10839_isDatatype = _10495___mcc_h51;
          bool _10840_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10841_field = _10493___mcc_h49;
          DAST._IExpression _10842_on = _10492___mcc_h48;
          {
            RAST._IExpr _10843_onExpr;
            DCOMPUTF16._IOwnership _10844_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10845_recIdents;
            RAST._IExpr _out5593;
            DCOMPUTF16._IOwnership _out5594;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5595;
            DCOMPUTF16.COMP.GenExpr(_10842_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5593, out _out5594, out _out5595);
            _10843_onExpr = _out5593;
            _10844_onOwned = _out5594;
            _10845_recIdents = _out5595;
            if ((_10839_isDatatype) || (_10840_isConstant)) {
              r = ((_10843_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10841_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5596;
              DCOMPUTF16._IOwnership _out5597;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5596, out _out5597);
              r = _out5596;
              resultingOwnership = _out5597;
            } else {
              Dafny.ISequence<Dafny.Rune> _10846_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10846_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10843_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10841_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5598;
              DCOMPUTF16._IOwnership _out5599;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10846_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5598, out _out5599);
              r = _out5598;
              resultingOwnership = _out5599;
            }
            readIdents = _10845_recIdents;
            return ;
          }
        } else if (_source425.is_Apply) {
          DAST._IExpression _10847___mcc_h212 = _source425.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _10848___mcc_h213 = _source425.dtor_args;
          bool _10849_isDatatype = _10495___mcc_h51;
          bool _10850_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10851_field = _10493___mcc_h49;
          DAST._IExpression _10852_on = _10492___mcc_h48;
          {
            RAST._IExpr _10853_onExpr;
            DCOMPUTF16._IOwnership _10854_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10855_recIdents;
            RAST._IExpr _out5600;
            DCOMPUTF16._IOwnership _out5601;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5602;
            DCOMPUTF16.COMP.GenExpr(_10852_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5600, out _out5601, out _out5602);
            _10853_onExpr = _out5600;
            _10854_onOwned = _out5601;
            _10855_recIdents = _out5602;
            if ((_10849_isDatatype) || (_10850_isConstant)) {
              r = ((_10853_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10851_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5603;
              DCOMPUTF16._IOwnership _out5604;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5603, out _out5604);
              r = _out5603;
              resultingOwnership = _out5604;
            } else {
              Dafny.ISequence<Dafny.Rune> _10856_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10856_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10853_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10851_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5605;
              DCOMPUTF16._IOwnership _out5606;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10856_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5605, out _out5606);
              r = _out5605;
              resultingOwnership = _out5606;
            }
            readIdents = _10855_recIdents;
            return ;
          }
        } else if (_source425.is_TypeTest) {
          DAST._IExpression _10857___mcc_h216 = _source425.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _10858___mcc_h217 = _source425.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _10859___mcc_h218 = _source425.dtor_variant;
          bool _10860_isDatatype = _10495___mcc_h51;
          bool _10861_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10862_field = _10493___mcc_h49;
          DAST._IExpression _10863_on = _10492___mcc_h48;
          {
            RAST._IExpr _10864_onExpr;
            DCOMPUTF16._IOwnership _10865_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10866_recIdents;
            RAST._IExpr _out5607;
            DCOMPUTF16._IOwnership _out5608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5609;
            DCOMPUTF16.COMP.GenExpr(_10863_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5607, out _out5608, out _out5609);
            _10864_onExpr = _out5607;
            _10865_onOwned = _out5608;
            _10866_recIdents = _out5609;
            if ((_10860_isDatatype) || (_10861_isConstant)) {
              r = ((_10864_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10862_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5610;
              DCOMPUTF16._IOwnership _out5611;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5610, out _out5611);
              r = _out5610;
              resultingOwnership = _out5611;
            } else {
              Dafny.ISequence<Dafny.Rune> _10867_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10867_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10864_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10862_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5612;
              DCOMPUTF16._IOwnership _out5613;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10867_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5612, out _out5613);
              r = _out5612;
              resultingOwnership = _out5613;
            }
            readIdents = _10866_recIdents;
            return ;
          }
        } else if (_source425.is_InitializationValue) {
          DAST._IType _10868___mcc_h222 = _source425.dtor_typ;
          bool _10869_isDatatype = _10495___mcc_h51;
          bool _10870_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10871_field = _10493___mcc_h49;
          DAST._IExpression _10872_on = _10492___mcc_h48;
          {
            RAST._IExpr _10873_onExpr;
            DCOMPUTF16._IOwnership _10874_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10875_recIdents;
            RAST._IExpr _out5614;
            DCOMPUTF16._IOwnership _out5615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5616;
            DCOMPUTF16.COMP.GenExpr(_10872_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5614, out _out5615, out _out5616);
            _10873_onExpr = _out5614;
            _10874_onOwned = _out5615;
            _10875_recIdents = _out5616;
            if ((_10869_isDatatype) || (_10870_isConstant)) {
              r = ((_10873_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10871_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5617;
              DCOMPUTF16._IOwnership _out5618;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5617, out _out5618);
              r = _out5617;
              resultingOwnership = _out5618;
            } else {
              Dafny.ISequence<Dafny.Rune> _10876_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10876_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10873_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10871_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5619;
              DCOMPUTF16._IOwnership _out5620;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10876_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5619, out _out5620);
              r = _out5619;
              resultingOwnership = _out5620;
            }
            readIdents = _10875_recIdents;
            return ;
          }
        } else if (_source425.is_BoolBoundedPool) {
          bool _10877_isDatatype = _10495___mcc_h51;
          bool _10878_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10879_field = _10493___mcc_h49;
          DAST._IExpression _10880_on = _10492___mcc_h48;
          {
            RAST._IExpr _10881_onExpr;
            DCOMPUTF16._IOwnership _10882_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10883_recIdents;
            RAST._IExpr _out5621;
            DCOMPUTF16._IOwnership _out5622;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5623;
            DCOMPUTF16.COMP.GenExpr(_10880_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5621, out _out5622, out _out5623);
            _10881_onExpr = _out5621;
            _10882_onOwned = _out5622;
            _10883_recIdents = _out5623;
            if ((_10877_isDatatype) || (_10878_isConstant)) {
              r = ((_10881_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10879_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5624;
              DCOMPUTF16._IOwnership _out5625;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5624, out _out5625);
              r = _out5624;
              resultingOwnership = _out5625;
            } else {
              Dafny.ISequence<Dafny.Rune> _10884_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10884_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10881_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10879_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5626;
              DCOMPUTF16._IOwnership _out5627;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10884_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5626, out _out5627);
              r = _out5626;
              resultingOwnership = _out5627;
            }
            readIdents = _10883_recIdents;
            return ;
          }
        } else if (_source425.is_SetBoundedPool) {
          DAST._IExpression _10885___mcc_h224 = _source425.dtor_of;
          bool _10886_isDatatype = _10495___mcc_h51;
          bool _10887_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10888_field = _10493___mcc_h49;
          DAST._IExpression _10889_on = _10492___mcc_h48;
          {
            RAST._IExpr _10890_onExpr;
            DCOMPUTF16._IOwnership _10891_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10892_recIdents;
            RAST._IExpr _out5628;
            DCOMPUTF16._IOwnership _out5629;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5630;
            DCOMPUTF16.COMP.GenExpr(_10889_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5628, out _out5629, out _out5630);
            _10890_onExpr = _out5628;
            _10891_onOwned = _out5629;
            _10892_recIdents = _out5630;
            if ((_10886_isDatatype) || (_10887_isConstant)) {
              r = ((_10890_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10888_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5631;
              DCOMPUTF16._IOwnership _out5632;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5631, out _out5632);
              r = _out5631;
              resultingOwnership = _out5632;
            } else {
              Dafny.ISequence<Dafny.Rune> _10893_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10893_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10890_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10888_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5633;
              DCOMPUTF16._IOwnership _out5634;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10893_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5633, out _out5634);
              r = _out5633;
              resultingOwnership = _out5634;
            }
            readIdents = _10892_recIdents;
            return ;
          }
        } else if (_source425.is_SeqBoundedPool) {
          DAST._IExpression _10894___mcc_h226 = _source425.dtor_of;
          bool _10895___mcc_h227 = _source425.dtor_includeDuplicates;
          bool _10896_isDatatype = _10495___mcc_h51;
          bool _10897_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10898_field = _10493___mcc_h49;
          DAST._IExpression _10899_on = _10492___mcc_h48;
          {
            RAST._IExpr _10900_onExpr;
            DCOMPUTF16._IOwnership _10901_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10902_recIdents;
            RAST._IExpr _out5635;
            DCOMPUTF16._IOwnership _out5636;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5637;
            DCOMPUTF16.COMP.GenExpr(_10899_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5635, out _out5636, out _out5637);
            _10900_onExpr = _out5635;
            _10901_onOwned = _out5636;
            _10902_recIdents = _out5637;
            if ((_10896_isDatatype) || (_10897_isConstant)) {
              r = ((_10900_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10898_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5638;
              DCOMPUTF16._IOwnership _out5639;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5638, out _out5639);
              r = _out5638;
              resultingOwnership = _out5639;
            } else {
              Dafny.ISequence<Dafny.Rune> _10903_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10903_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10900_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10898_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5640;
              DCOMPUTF16._IOwnership _out5641;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10903_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5640, out _out5641);
              r = _out5640;
              resultingOwnership = _out5641;
            }
            readIdents = _10902_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _10904___mcc_h230 = _source425.dtor_lo;
          DAST._IExpression _10905___mcc_h231 = _source425.dtor_hi;
          bool _10906_isDatatype = _10495___mcc_h51;
          bool _10907_isConstant = _10494___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _10908_field = _10493___mcc_h49;
          DAST._IExpression _10909_on = _10492___mcc_h48;
          {
            RAST._IExpr _10910_onExpr;
            DCOMPUTF16._IOwnership _10911_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10912_recIdents;
            RAST._IExpr _out5642;
            DCOMPUTF16._IOwnership _out5643;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5644;
            DCOMPUTF16.COMP.GenExpr(_10909_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5642, out _out5643, out _out5644);
            _10910_onExpr = _out5642;
            _10911_onOwned = _out5643;
            _10912_recIdents = _out5644;
            if ((_10906_isDatatype) || (_10907_isConstant)) {
              r = ((_10910_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_10908_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5645;
              DCOMPUTF16._IOwnership _out5646;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5645, out _out5646);
              r = _out5645;
              resultingOwnership = _out5646;
            } else {
              Dafny.ISequence<Dafny.Rune> _10913_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _10913_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_10910_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_10908_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5647;
              DCOMPUTF16._IOwnership _out5648;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_10913_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5647, out _out5648);
              r = _out5647;
              resultingOwnership = _out5648;
            }
            readIdents = _10912_recIdents;
            return ;
          }
        }
      } else if (_source422.is_SelectFn) {
        DAST._IExpression _10914___mcc_h234 = _source422.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _10915___mcc_h235 = _source422.dtor_field;
        bool _10916___mcc_h236 = _source422.dtor_onDatatype;
        bool _10917___mcc_h237 = _source422.dtor_isStatic;
        BigInteger _10918___mcc_h238 = _source422.dtor_arity;
        BigInteger _10919_arity = _10918___mcc_h238;
        bool _10920_isStatic = _10917___mcc_h237;
        bool _10921_isDatatype = _10916___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _10922_field = _10915___mcc_h235;
        DAST._IExpression _10923_on = _10914___mcc_h234;
        {
          RAST._IExpr _10924_onExpr;
          DCOMPUTF16._IOwnership _10925_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10926_recIdents;
          RAST._IExpr _out5649;
          DCOMPUTF16._IOwnership _out5650;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5651;
          DCOMPUTF16.COMP.GenExpr(_10923_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5649, out _out5650, out _out5651);
          _10924_onExpr = _out5649;
          _10925_onOwned = _out5650;
          _10926_recIdents = _out5651;
          Dafny.ISequence<Dafny.Rune> _10927_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _10928_onString;
          _10928_onString = (_10924_onExpr)._ToString(DCOMPUTF16.__default.IND);
          if (_10920_isStatic) {
            _10927_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10928_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_10922_field));
          } else {
            _10927_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _10927_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10927_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _10928_onString), ((object.Equals(_10925_onOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _10929_args;
            _10929_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _10930_i;
            _10930_i = BigInteger.Zero;
            while ((_10930_i) < (_10919_arity)) {
              if ((_10930_i).Sign == 1) {
                _10929_args = Dafny.Sequence<Dafny.Rune>.Concat(_10929_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _10929_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10929_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_10930_i));
              _10930_i = (_10930_i) + (BigInteger.One);
            }
            _10927_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10927_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _10929_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _10927_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_10927_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _10922_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _10929_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _10927_s = Dafny.Sequence<Dafny.Rune>.Concat(_10927_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _10927_s = Dafny.Sequence<Dafny.Rune>.Concat(_10927_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _10931_typeShape;
          _10931_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _10932_i;
          _10932_i = BigInteger.Zero;
          while ((_10932_i) < (_10919_arity)) {
            if ((_10932_i).Sign == 1) {
              _10931_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10931_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _10931_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10931_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _10932_i = (_10932_i) + (BigInteger.One);
          }
          _10931_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_10931_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _10927_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _10927_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _10931_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_10927_s);
          RAST._IExpr _out5652;
          DCOMPUTF16._IOwnership _out5653;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5652, out _out5653);
          r = _out5652;
          resultingOwnership = _out5653;
          readIdents = _10926_recIdents;
          return ;
        }
      } else if (_source422.is_Index) {
        DAST._IExpression _10933___mcc_h239 = _source422.dtor_expr;
        DAST._ICollKind _10934___mcc_h240 = _source422.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _10935___mcc_h241 = _source422.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _10936_indices = _10935___mcc_h241;
        DAST._ICollKind _10937_collKind = _10934___mcc_h240;
        DAST._IExpression _10938_on = _10933___mcc_h239;
        {
          RAST._IExpr _10939_onExpr;
          DCOMPUTF16._IOwnership _10940_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10941_recIdents;
          RAST._IExpr _out5654;
          DCOMPUTF16._IOwnership _out5655;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5656;
          DCOMPUTF16.COMP.GenExpr(_10938_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5654, out _out5655, out _out5656);
          _10939_onExpr = _out5654;
          _10940_onOwned = _out5655;
          _10941_recIdents = _out5656;
          readIdents = _10941_recIdents;
          r = _10939_onExpr;
          BigInteger _10942_i;
          _10942_i = BigInteger.Zero;
          while ((_10942_i) < (new BigInteger((_10936_indices).Count))) {
            if (object.Equals(_10937_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _10943_idx;
            DCOMPUTF16._IOwnership _10944_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10945_recIdentsIdx;
            RAST._IExpr _out5657;
            DCOMPUTF16._IOwnership _out5658;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5659;
            DCOMPUTF16.COMP.GenExpr((_10936_indices).Select(_10942_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5657, out _out5658, out _out5659);
            _10943_idx = _out5657;
            _10944_idxOwned = _out5658;
            _10945_recIdentsIdx = _out5659;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_10943_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10945_recIdentsIdx);
            _10942_i = (_10942_i) + (BigInteger.One);
          }
          RAST._IExpr _out5660;
          DCOMPUTF16._IOwnership _out5661;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5660, out _out5661);
          r = _out5660;
          resultingOwnership = _out5661;
          return ;
        }
      } else if (_source422.is_IndexRange) {
        DAST._IExpression _10946___mcc_h242 = _source422.dtor_expr;
        bool _10947___mcc_h243 = _source422.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _10948___mcc_h244 = _source422.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _10949___mcc_h245 = _source422.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _10950_high = _10949___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _10951_low = _10948___mcc_h244;
        bool _10952_isArray = _10947___mcc_h243;
        DAST._IExpression _10953_on = _10946___mcc_h242;
        {
          RAST._IExpr _10954_onExpr;
          DCOMPUTF16._IOwnership _10955_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10956_recIdents;
          RAST._IExpr _out5662;
          DCOMPUTF16._IOwnership _out5663;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5664;
          DCOMPUTF16.COMP.GenExpr(_10953_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5662, out _out5663, out _out5664);
          _10954_onExpr = _out5662;
          _10955_onOwned = _out5663;
          _10956_recIdents = _out5664;
          readIdents = _10956_recIdents;
          Dafny.ISequence<Dafny.Rune> _10957_methodName;
          _10957_methodName = (((_10951_low).is_Some) ? ((((_10950_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_10950_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _10958_arguments;
          _10958_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source426 = _10951_low;
          if (_source426.is_None) {
          } else {
            DAST._IExpression _10959___mcc_h274 = _source426.dtor_value;
            DAST._IExpression _10960_l = _10959___mcc_h274;
            {
              RAST._IExpr _10961_lExpr;
              DCOMPUTF16._IOwnership _10962___v126;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10963_recIdentsL;
              RAST._IExpr _out5665;
              DCOMPUTF16._IOwnership _out5666;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5667;
              DCOMPUTF16.COMP.GenExpr(_10960_l, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5665, out _out5666, out _out5667);
              _10961_lExpr = _out5665;
              _10962___v126 = _out5666;
              _10963_recIdentsL = _out5667;
              _10958_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10958_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_10961_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10963_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source427 = _10950_high;
          if (_source427.is_None) {
          } else {
            DAST._IExpression _10964___mcc_h275 = _source427.dtor_value;
            DAST._IExpression _10965_h = _10964___mcc_h275;
            {
              RAST._IExpr _10966_hExpr;
              DCOMPUTF16._IOwnership _10967___v127;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10968_recIdentsH;
              RAST._IExpr _out5668;
              DCOMPUTF16._IOwnership _out5669;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5670;
              DCOMPUTF16.COMP.GenExpr(_10965_h, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5668, out _out5669, out _out5670);
              _10966_hExpr = _out5668;
              _10967___v127 = _out5669;
              _10968_recIdentsH = _out5670;
              _10958_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_10958_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_10966_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10968_recIdentsH);
            }
          }
          r = _10954_onExpr;
          if (_10952_isArray) {
            if (!(_10957_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _10957_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _10957_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _10957_methodName))).Apply(_10958_arguments);
          } else {
            if (!(_10957_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_10957_methodName)).Apply(_10958_arguments);
            }
          }
          RAST._IExpr _out5671;
          DCOMPUTF16._IOwnership _out5672;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5671, out _out5672);
          r = _out5671;
          resultingOwnership = _out5672;
          return ;
        }
      } else if (_source422.is_TupleSelect) {
        DAST._IExpression _10969___mcc_h246 = _source422.dtor_expr;
        BigInteger _10970___mcc_h247 = _source422.dtor_index;
        BigInteger _10971_idx = _10970___mcc_h247;
        DAST._IExpression _10972_on = _10969___mcc_h246;
        {
          RAST._IExpr _10973_onExpr;
          DCOMPUTF16._IOwnership _10974_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10975_recIdents;
          RAST._IExpr _out5673;
          DCOMPUTF16._IOwnership _out5674;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5675;
          DCOMPUTF16.COMP.GenExpr(_10972_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5673, out _out5674, out _out5675);
          _10973_onExpr = _out5673;
          _10974_onOwnership = _out5674;
          _10975_recIdents = _out5675;
          r = (_10973_onExpr).Sel(Std.Strings.__default.OfNat(_10971_idx));
          RAST._IExpr _out5676;
          DCOMPUTF16._IOwnership _out5677;
          DCOMPUTF16.COMP.FromOwnership(r, _10974_onOwnership, expectedOwnership, out _out5676, out _out5677);
          r = _out5676;
          resultingOwnership = _out5677;
          readIdents = _10975_recIdents;
          return ;
        }
      } else if (_source422.is_Call) {
        DAST._IExpression _10976___mcc_h248 = _source422.dtor_on;
        DAST._ICallName _10977___mcc_h249 = _source422.dtor_callName;
        Dafny.ISequence<DAST._IType> _10978___mcc_h250 = _source422.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _10979___mcc_h251 = _source422.dtor_args;
        Dafny.ISequence<DAST._IExpression> _10980_args = _10979___mcc_h251;
        Dafny.ISequence<DAST._IType> _10981_typeArgs = _10978___mcc_h250;
        DAST._ICallName _10982_name = _10977___mcc_h249;
        DAST._IExpression _10983_on = _10976___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _10984_typeExprs;
          _10984_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_10981_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _10985_typeI;
            _10985_typeI = BigInteger.Zero;
            while ((_10985_typeI) < (new BigInteger((_10981_typeArgs).Count))) {
              RAST._IType _10986_typeExpr;
              RAST._IType _out5678;
              _out5678 = DCOMPUTF16.COMP.GenType((_10981_typeArgs).Select(_10985_typeI), false, false);
              _10986_typeExpr = _out5678;
              _10984_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_10984_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_10986_typeExpr));
              _10985_typeI = (_10985_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _10987_argExprs;
          _10987_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _10988_i;
          _10988_i = BigInteger.Zero;
          while ((_10988_i) < (new BigInteger((_10980_args).Count))) {
            RAST._IExpr _10989_argExpr;
            DCOMPUTF16._IOwnership _10990_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10991_argIdents;
            RAST._IExpr _out5679;
            DCOMPUTF16._IOwnership _out5680;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5681;
            DCOMPUTF16.COMP.GenExpr((_10980_args).Select(_10988_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5679, out _out5680, out _out5681);
            _10989_argExpr = _out5679;
            _10990_argOwnership = _out5680;
            _10991_argIdents = _out5681;
            _10987_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_10987_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_10989_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10991_argIdents);
            _10988_i = (_10988_i) + (BigInteger.One);
          }
          RAST._IExpr _10992_onExpr;
          DCOMPUTF16._IOwnership _10993___v128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _10994_recIdents;
          RAST._IExpr _out5682;
          DCOMPUTF16._IOwnership _out5683;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5684;
          DCOMPUTF16.COMP.GenExpr(_10983_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5682, out _out5683, out _out5684);
          _10992_onExpr = _out5682;
          _10993___v128 = _out5683;
          _10994_recIdents = _out5684;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _10994_recIdents);
          Dafny.ISequence<Dafny.Rune> _10995_renderedName;
          _10995_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source428) => {
            if (_source428.is_Name) {
              Dafny.ISequence<Dafny.Rune> _10996___mcc_h276 = _source428.dtor_name;
              Dafny.ISequence<Dafny.Rune> _10997_ident = _10996___mcc_h276;
              return DCOMPUTF16.__default.escapeIdent(_10997_ident);
            } else if (_source428.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source428.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source428.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_10982_name);
          DAST._IExpression _source429 = _10983_on;
          if (_source429.is_Literal) {
            DAST._ILiteral _10998___mcc_h277 = _source429.dtor_Literal_a0;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _10999___mcc_h279 = _source429.dtor_Ident_a0;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11000___mcc_h281 = _source429.dtor_Companion_a0;
            {
              _10992_onExpr = (_10992_onExpr).MSel(_10995_renderedName);
            }
          } else if (_source429.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _11001___mcc_h283 = _source429.dtor_Tuple_a0;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11002___mcc_h285 = _source429.dtor_path;
            Dafny.ISequence<DAST._IType> _11003___mcc_h286 = _source429.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _11004___mcc_h287 = _source429.dtor_args;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _11005___mcc_h291 = _source429.dtor_dims;
            DAST._IType _11006___mcc_h292 = _source429.dtor_typ;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_DatatypeValue) {
            DAST._IDatatypeType _11007___mcc_h295 = _source429.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _11008___mcc_h296 = _source429.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _11009___mcc_h297 = _source429.dtor_variant;
            bool _11010___mcc_h298 = _source429.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _11011___mcc_h299 = _source429.dtor_contents;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Convert) {
            DAST._IExpression _11012___mcc_h305 = _source429.dtor_value;
            DAST._IType _11013___mcc_h306 = _source429.dtor_from;
            DAST._IType _11014___mcc_h307 = _source429.dtor_typ;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_SeqConstruct) {
            DAST._IExpression _11015___mcc_h311 = _source429.dtor_length;
            DAST._IExpression _11016___mcc_h312 = _source429.dtor_elem;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _11017___mcc_h315 = _source429.dtor_elements;
            DAST._IType _11018___mcc_h316 = _source429.dtor_typ;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _11019___mcc_h319 = _source429.dtor_elements;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _11020___mcc_h321 = _source429.dtor_elements;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _11021___mcc_h323 = _source429.dtor_mapElems;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_MapBuilder) {
            DAST._IType _11022___mcc_h325 = _source429.dtor_keyType;
            DAST._IType _11023___mcc_h326 = _source429.dtor_valueType;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_SeqUpdate) {
            DAST._IExpression _11024___mcc_h329 = _source429.dtor_expr;
            DAST._IExpression _11025___mcc_h330 = _source429.dtor_indexExpr;
            DAST._IExpression _11026___mcc_h331 = _source429.dtor_value;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_MapUpdate) {
            DAST._IExpression _11027___mcc_h335 = _source429.dtor_expr;
            DAST._IExpression _11028___mcc_h336 = _source429.dtor_indexExpr;
            DAST._IExpression _11029___mcc_h337 = _source429.dtor_value;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_SetBuilder) {
            DAST._IType _11030___mcc_h341 = _source429.dtor_elemType;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_ToMultiset) {
            DAST._IExpression _11031___mcc_h343 = _source429.dtor_ToMultiset_a0;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_This) {
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Ite) {
            DAST._IExpression _11032___mcc_h345 = _source429.dtor_cond;
            DAST._IExpression _11033___mcc_h346 = _source429.dtor_thn;
            DAST._IExpression _11034___mcc_h347 = _source429.dtor_els;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_UnOp) {
            DAST._IUnaryOp _11035___mcc_h351 = _source429.dtor_unOp;
            DAST._IExpression _11036___mcc_h352 = _source429.dtor_expr;
            DAST.Format._IUnOpFormat _11037___mcc_h353 = _source429.dtor_format1;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_BinOp) {
            DAST._IBinOp _11038___mcc_h357 = _source429.dtor_op;
            DAST._IExpression _11039___mcc_h358 = _source429.dtor_left;
            DAST._IExpression _11040___mcc_h359 = _source429.dtor_right;
            DAST.Format._IBinOpFormat _11041___mcc_h360 = _source429.dtor_format2;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_ArrayLen) {
            DAST._IExpression _11042___mcc_h365 = _source429.dtor_expr;
            BigInteger _11043___mcc_h366 = _source429.dtor_dim;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_MapKeys) {
            DAST._IExpression _11044___mcc_h369 = _source429.dtor_expr;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_MapValues) {
            DAST._IExpression _11045___mcc_h371 = _source429.dtor_expr;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Select) {
            DAST._IExpression _11046___mcc_h373 = _source429.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _11047___mcc_h374 = _source429.dtor_field;
            bool _11048___mcc_h375 = _source429.dtor_isConstant;
            bool _11049___mcc_h376 = _source429.dtor_onDatatype;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_SelectFn) {
            DAST._IExpression _11050___mcc_h381 = _source429.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _11051___mcc_h382 = _source429.dtor_field;
            bool _11052___mcc_h383 = _source429.dtor_onDatatype;
            bool _11053___mcc_h384 = _source429.dtor_isStatic;
            BigInteger _11054___mcc_h385 = _source429.dtor_arity;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Index) {
            DAST._IExpression _11055___mcc_h391 = _source429.dtor_expr;
            DAST._ICollKind _11056___mcc_h392 = _source429.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _11057___mcc_h393 = _source429.dtor_indices;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_IndexRange) {
            DAST._IExpression _11058___mcc_h397 = _source429.dtor_expr;
            bool _11059___mcc_h398 = _source429.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _11060___mcc_h399 = _source429.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _11061___mcc_h400 = _source429.dtor_high;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_TupleSelect) {
            DAST._IExpression _11062___mcc_h405 = _source429.dtor_expr;
            BigInteger _11063___mcc_h406 = _source429.dtor_index;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Call) {
            DAST._IExpression _11064___mcc_h409 = _source429.dtor_on;
            DAST._ICallName _11065___mcc_h410 = _source429.dtor_callName;
            Dafny.ISequence<DAST._IType> _11066___mcc_h411 = _source429.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _11067___mcc_h412 = _source429.dtor_args;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _11068___mcc_h417 = _source429.dtor_params;
            DAST._IType _11069___mcc_h418 = _source429.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _11070___mcc_h419 = _source429.dtor_body;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11071___mcc_h423 = _source429.dtor_values;
            DAST._IType _11072___mcc_h424 = _source429.dtor_retType;
            DAST._IExpression _11073___mcc_h425 = _source429.dtor_expr;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _11074___mcc_h429 = _source429.dtor_name;
            DAST._IType _11075___mcc_h430 = _source429.dtor_typ;
            DAST._IExpression _11076___mcc_h431 = _source429.dtor_value;
            DAST._IExpression _11077___mcc_h432 = _source429.dtor_iifeBody;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_Apply) {
            DAST._IExpression _11078___mcc_h437 = _source429.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _11079___mcc_h438 = _source429.dtor_args;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_TypeTest) {
            DAST._IExpression _11080___mcc_h441 = _source429.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11081___mcc_h442 = _source429.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _11082___mcc_h443 = _source429.dtor_variant;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_InitializationValue) {
            DAST._IType _11083___mcc_h447 = _source429.dtor_typ;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_BoolBoundedPool) {
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_SetBoundedPool) {
            DAST._IExpression _11084___mcc_h449 = _source429.dtor_of;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else if (_source429.is_SeqBoundedPool) {
            DAST._IExpression _11085___mcc_h451 = _source429.dtor_of;
            bool _11086___mcc_h452 = _source429.dtor_includeDuplicates;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          } else {
            DAST._IExpression _11087___mcc_h455 = _source429.dtor_lo;
            DAST._IExpression _11088___mcc_h456 = _source429.dtor_hi;
            {
              _10992_onExpr = (_10992_onExpr).Sel(_10995_renderedName);
            }
          }
          r = _10992_onExpr;
          if ((new BigInteger((_10984_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_10984_typeExprs);
          }
          r = (r).Apply(_10987_argExprs);
          RAST._IExpr _out5685;
          DCOMPUTF16._IOwnership _out5686;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5685, out _out5686);
          r = _out5685;
          resultingOwnership = _out5686;
          return ;
        }
      } else if (_source422.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _11089___mcc_h252 = _source422.dtor_params;
        DAST._IType _11090___mcc_h253 = _source422.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _11091___mcc_h254 = _source422.dtor_body;
        Dafny.ISequence<DAST._IStatement> _11092_body = _11091___mcc_h254;
        DAST._IType _11093_retType = _11090___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _11094_params = _11089___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11095_paramNames;
          _11095_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _11096_paramOwnerships;
          _11096_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
          BigInteger _11097_i;
          _11097_i = BigInteger.Zero;
          while ((_11097_i) < (new BigInteger((_11094_params).Count))) {
            Dafny.ISequence<Dafny.Rune> _11098_name;
            _11098_name = ((_11094_params).Select(_11097_i)).dtor_name;
            _11095_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_11095_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_11098_name));
            _11096_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_11096_paramOwnerships, _11098_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
            _11097_i = (_11097_i) + (BigInteger.One);
          }
          DCOMPUTF16._IEnvironment _11099_env;
          _11099_env = DCOMPUTF16.Environment.create(_11095_paramNames, _11096_paramOwnerships);
          RAST._IExpr _11100_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11101_recIdents;
          RAST._IExpr _out5687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5688;
          DCOMPUTF16.COMP.GenStmts(_11092_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _11099_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out5687, out _out5688);
          _11100_recursiveGen = _out5687;
          _11101_recIdents = _out5688;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _11102_allReadCloned;
          _11102_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_11101_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _11103_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_5 in (_11101_recIdents).Elements) {
              _11103_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_5;
              if ((_11101_recIdents).Contains(_11103_next)) {
                goto after__ASSIGN_SUCH_THAT_5;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3299)");
          after__ASSIGN_SUCH_THAT_5: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_11103_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _11102_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_11102_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_11095_paramNames).Contains(_11103_next))) {
              _11102_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11102_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_11103_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_11103_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11103_next));
            }
            _11101_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11101_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11103_next));
          }
          Dafny.ISequence<Dafny.Rune> _11104_paramsString;
          _11104_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _11105_paramTypes;
          _11105_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _11097_i = BigInteger.Zero;
          while ((_11097_i) < (new BigInteger((_11094_params).Count))) {
            if ((_11097_i).Sign == 1) {
              _11104_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_11104_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _11105_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_11105_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _11106_typStr;
            RAST._IType _out5689;
            _out5689 = DCOMPUTF16.COMP.GenType(((_11094_params).Select(_11097_i)).dtor_typ, false, true);
            _11106_typStr = _out5689;
            _11104_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11104_paramsString, DCOMPUTF16.__default.escapeIdent(((_11094_params).Select(_11097_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_11106_typStr))._ToString(DCOMPUTF16.__default.IND));
            _11105_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_11105_paramTypes, (RAST.Type.create_Borrowed(_11106_typStr))._ToString(DCOMPUTF16.__default.IND));
            _11097_i = (_11097_i) + (BigInteger.One);
          }
          RAST._IType _11107_retTypeGen;
          RAST._IType _out5690;
          _out5690 = DCOMPUTF16.COMP.GenType(_11093_retType, false, true);
          _11107_retTypeGen = _out5690;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _11105_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_11107_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _11102_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _11104_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_11107_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_11100_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out5691;
          DCOMPUTF16._IOwnership _out5692;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5691, out _out5692);
          r = _out5691;
          resultingOwnership = _out5692;
          return ;
        }
      } else if (_source422.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11108___mcc_h255 = _source422.dtor_values;
        DAST._IType _11109___mcc_h256 = _source422.dtor_retType;
        DAST._IExpression _11110___mcc_h257 = _source422.dtor_expr;
        DAST._IExpression _11111_expr = _11110___mcc_h257;
        DAST._IType _11112_retType = _11109___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _11113_values = _11108___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11114_paramNames;
          _11114_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _11115_paramOwnerships;
          _11115_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11116_paramNamesSet;
          _11116_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _11117_i;
          _11117_i = BigInteger.Zero;
          while ((_11117_i) < (new BigInteger((_11113_values).Count))) {
            Dafny.ISequence<Dafny.Rune> _11118_name;
            _11118_name = (((_11113_values).Select(_11117_i)).dtor__0).dtor_name;
            _11114_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_11114_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_11118_name));
            _11115_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_11115_paramOwnerships, _11118_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
            _11116_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11116_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_11118_name));
            _11117_i = (_11117_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _11119_s;
          _11119_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _11120_paramsString;
          _11120_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _11117_i = BigInteger.Zero;
          while ((_11117_i) < (new BigInteger((_11113_values).Count))) {
            if ((_11117_i).Sign == 1) {
              _11120_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_11120_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _11121_typStr;
            RAST._IType _out5693;
            _out5693 = DCOMPUTF16.COMP.GenType((((_11113_values).Select(_11117_i)).dtor__0).dtor_typ, false, true);
            _11121_typStr = _out5693;
            RAST._IExpr _11122_valueGen;
            DCOMPUTF16._IOwnership _11123___v131;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11124_recIdents;
            RAST._IExpr _out5694;
            DCOMPUTF16._IOwnership _out5695;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5696;
            DCOMPUTF16.COMP.GenExpr(((_11113_values).Select(_11117_i)).dtor__1, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5694, out _out5695, out _out5696);
            _11122_valueGen = _out5694;
            _11123___v131 = _out5695;
            _11124_recIdents = _out5696;
            _11119_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11119_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent((((_11113_values).Select(_11117_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_11121_typStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11124_recIdents);
            _11119_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11119_s, (_11122_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _11117_i = (_11117_i) + (BigInteger.One);
          }
          DCOMPUTF16._IEnvironment _11125_newEnv;
          _11125_newEnv = DCOMPUTF16.Environment.create(_11114_paramNames, _11115_paramOwnerships);
          RAST._IExpr _11126_recGen;
          DCOMPUTF16._IOwnership _11127_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11128_recIdents;
          RAST._IExpr _out5697;
          DCOMPUTF16._IOwnership _out5698;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5699;
          DCOMPUTF16.COMP.GenExpr(_11111_expr, selfIdent, _11125_newEnv, expectedOwnership, out _out5697, out _out5698, out _out5699);
          _11126_recGen = _out5697;
          _11127_recOwned = _out5698;
          _11128_recIdents = _out5699;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11128_recIdents, _11116_paramNamesSet);
          _11119_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_11119_s, (_11126_recGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_11119_s);
          RAST._IExpr _out5700;
          DCOMPUTF16._IOwnership _out5701;
          DCOMPUTF16.COMP.FromOwnership(r, _11127_recOwned, expectedOwnership, out _out5700, out _out5701);
          r = _out5700;
          resultingOwnership = _out5701;
          return ;
        }
      } else if (_source422.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _11129___mcc_h258 = _source422.dtor_name;
        DAST._IType _11130___mcc_h259 = _source422.dtor_typ;
        DAST._IExpression _11131___mcc_h260 = _source422.dtor_value;
        DAST._IExpression _11132___mcc_h261 = _source422.dtor_iifeBody;
        DAST._IExpression _11133_iifeBody = _11132___mcc_h261;
        DAST._IExpression _11134_value = _11131___mcc_h260;
        DAST._IType _11135_tpe = _11130___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _11136_name = _11129___mcc_h258;
        {
          RAST._IExpr _11137_valueGen;
          DCOMPUTF16._IOwnership _11138___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11139_recIdents;
          RAST._IExpr _out5702;
          DCOMPUTF16._IOwnership _out5703;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5704;
          DCOMPUTF16.COMP.GenExpr(_11134_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5702, out _out5703, out _out5704);
          _11137_valueGen = _out5702;
          _11138___v132 = _out5703;
          _11139_recIdents = _out5704;
          readIdents = _11139_recIdents;
          RAST._IType _11140_valueTypeGen;
          RAST._IType _out5705;
          _out5705 = DCOMPUTF16.COMP.GenType(_11135_tpe, false, true);
          _11140_valueTypeGen = _out5705;
          RAST._IExpr _11141_bodyGen;
          DCOMPUTF16._IOwnership _11142___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11143_bodyIdents;
          RAST._IExpr _out5706;
          DCOMPUTF16._IOwnership _out5707;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5708;
          DCOMPUTF16.COMP.GenExpr(_11133_iifeBody, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5706, out _out5707, out _out5708);
          _11141_bodyGen = _out5706;
          _11142___v133 = _out5707;
          _11143_bodyIdents = _out5708;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_11143_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_11136_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMPUTF16.__default.escapeIdent((_11136_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_11140_valueTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_11137_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_11141_bodyGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out5709;
          DCOMPUTF16._IOwnership _out5710;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5709, out _out5710);
          r = _out5709;
          resultingOwnership = _out5710;
          return ;
        }
      } else if (_source422.is_Apply) {
        DAST._IExpression _11144___mcc_h262 = _source422.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _11145___mcc_h263 = _source422.dtor_args;
        Dafny.ISequence<DAST._IExpression> _11146_args = _11145___mcc_h263;
        DAST._IExpression _11147_func = _11144___mcc_h262;
        {
          RAST._IExpr _11148_funcExpr;
          DCOMPUTF16._IOwnership _11149___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11150_recIdents;
          RAST._IExpr _out5711;
          DCOMPUTF16._IOwnership _out5712;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5713;
          DCOMPUTF16.COMP.GenExpr(_11147_func, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5711, out _out5712, out _out5713);
          _11148_funcExpr = _out5711;
          _11149___v134 = _out5712;
          _11150_recIdents = _out5713;
          readIdents = _11150_recIdents;
          Dafny.ISequence<Dafny.Rune> _11151_argString;
          _11151_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _11152_i;
          _11152_i = BigInteger.Zero;
          while ((_11152_i) < (new BigInteger((_11146_args).Count))) {
            if ((_11152_i).Sign == 1) {
              _11151_argString = Dafny.Sequence<Dafny.Rune>.Concat(_11151_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _11153_argExpr;
            DCOMPUTF16._IOwnership _11154_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11155_argIdents;
            RAST._IExpr _out5714;
            DCOMPUTF16._IOwnership _out5715;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5716;
            DCOMPUTF16.COMP.GenExpr((_11146_args).Select(_11152_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5714, out _out5715, out _out5716);
            _11153_argExpr = _out5714;
            _11154_argOwned = _out5715;
            _11155_argIdents = _out5716;
            Dafny.ISequence<Dafny.Rune> _11156_argExprString;
            _11156_argExprString = (_11153_argExpr)._ToString(DCOMPUTF16.__default.IND);
            if (object.Equals(_11154_argOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
              _11156_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _11156_argExprString);
            }
            _11151_argString = Dafny.Sequence<Dafny.Rune>.Concat(_11151_argString, _11156_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _11155_argIdents);
            _11152_i = (_11152_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_11148_funcExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _11151_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out5717;
          DCOMPUTF16._IOwnership _out5718;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5717, out _out5718);
          r = _out5717;
          resultingOwnership = _out5718;
          return ;
        }
      } else if (_source422.is_TypeTest) {
        DAST._IExpression _11157___mcc_h264 = _source422.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11158___mcc_h265 = _source422.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _11159___mcc_h266 = _source422.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _11160_variant = _11159___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _11161_dType = _11158___mcc_h265;
        DAST._IExpression _11162_on = _11157___mcc_h264;
        {
          RAST._IExpr _11163_exprGen;
          DCOMPUTF16._IOwnership _11164___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11165_recIdents;
          RAST._IExpr _out5719;
          DCOMPUTF16._IOwnership _out5720;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5721;
          DCOMPUTF16.COMP.GenExpr(_11162_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5719, out _out5720, out _out5721);
          _11163_exprGen = _out5719;
          _11164___v135 = _out5720;
          _11165_recIdents = _out5721;
          RAST._IType _11166_dTypePath;
          RAST._IType _out5722;
          _out5722 = DCOMPUTF16.COMP.GenPath(_11161_dType);
          _11166_dTypePath = _out5722;
          r = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(((_11163_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(((_11166_dTypePath).MSel(DCOMPUTF16.__default.escapeIdent(_11160_variant)))._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. }")))));
          RAST._IExpr _out5723;
          DCOMPUTF16._IOwnership _out5724;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5723, out _out5724);
          r = _out5723;
          resultingOwnership = _out5724;
          readIdents = _11165_recIdents;
          return ;
        }
      } else if (_source422.is_InitializationValue) {
        DAST._IType _11167___mcc_h267 = _source422.dtor_typ;
        DAST._IType _11168_typ = _11167___mcc_h267;
        {
          RAST._IType _11169_typExpr;
          RAST._IType _out5725;
          _out5725 = DCOMPUTF16.COMP.GenType(_11168_typ, false, false);
          _11169_typExpr = _out5725;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_11169_typExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out5726;
          DCOMPUTF16._IOwnership _out5727;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5726, out _out5727);
          r = _out5726;
          resultingOwnership = _out5727;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source422.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out5728;
          DCOMPUTF16._IOwnership _out5729;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5728, out _out5729);
          r = _out5728;
          resultingOwnership = _out5729;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source422.is_SetBoundedPool) {
        DAST._IExpression _11170___mcc_h268 = _source422.dtor_of;
        DAST._IExpression _11171_of = _11170___mcc_h268;
        {
          RAST._IExpr _11172_exprGen;
          DCOMPUTF16._IOwnership _11173___v136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11174_recIdents;
          RAST._IExpr _out5730;
          DCOMPUTF16._IOwnership _out5731;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5732;
          DCOMPUTF16.COMP.GenExpr(_11171_of, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5730, out _out5731, out _out5732);
          _11172_exprGen = _out5730;
          _11173___v136 = _out5731;
          _11174_recIdents = _out5732;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_11172_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out5733;
          DCOMPUTF16._IOwnership _out5734;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5733, out _out5734);
          r = _out5733;
          resultingOwnership = _out5734;
          readIdents = _11174_recIdents;
          return ;
        }
      } else if (_source422.is_SeqBoundedPool) {
        DAST._IExpression _11175___mcc_h269 = _source422.dtor_of;
        bool _11176___mcc_h270 = _source422.dtor_includeDuplicates;
        bool _11177_includeDuplicates = _11176___mcc_h270;
        DAST._IExpression _11178_of = _11175___mcc_h269;
        {
          RAST._IExpr _11179_exprGen;
          DCOMPUTF16._IOwnership _11180___v137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11181_recIdents;
          RAST._IExpr _out5735;
          DCOMPUTF16._IOwnership _out5736;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5737;
          DCOMPUTF16.COMP.GenExpr(_11178_of, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5735, out _out5736, out _out5737);
          _11179_exprGen = _out5735;
          _11180___v137 = _out5736;
          _11181_recIdents = _out5737;
          Dafny.ISequence<Dafny.Rune> _11182_s;
          _11182_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_11179_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_11177_includeDuplicates)) {
            _11182_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _11182_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_11182_s);
          RAST._IExpr _out5738;
          DCOMPUTF16._IOwnership _out5739;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5738, out _out5739);
          r = _out5738;
          resultingOwnership = _out5739;
          readIdents = _11181_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _11183___mcc_h271 = _source422.dtor_lo;
        DAST._IExpression _11184___mcc_h272 = _source422.dtor_hi;
        DAST._IExpression _11185_hi = _11184___mcc_h272;
        DAST._IExpression _11186_lo = _11183___mcc_h271;
        {
          RAST._IExpr _11187_lo;
          DCOMPUTF16._IOwnership _11188___v138;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11189_recIdentsLo;
          RAST._IExpr _out5740;
          DCOMPUTF16._IOwnership _out5741;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5742;
          DCOMPUTF16.COMP.GenExpr(_11186_lo, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5740, out _out5741, out _out5742);
          _11187_lo = _out5740;
          _11188___v138 = _out5741;
          _11189_recIdentsLo = _out5742;
          RAST._IExpr _11190_hi;
          DCOMPUTF16._IOwnership _11191___v139;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _11192_recIdentsHi;
          RAST._IExpr _out5743;
          DCOMPUTF16._IOwnership _out5744;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5745;
          DCOMPUTF16.COMP.GenExpr(_11185_hi, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5743, out _out5744, out _out5745);
          _11190_hi = _out5743;
          _11191___v139 = _out5744;
          _11192_recIdentsHi = _out5745;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_11187_lo)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_11190_hi)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out5746;
          DCOMPUTF16._IOwnership _out5747;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5746, out _out5747);
          r = _out5746;
          resultingOwnership = _out5747;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_11189_recIdentsLo, _11192_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _11193_i;
      _11193_i = BigInteger.Zero;
      while ((_11193_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _11194_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _11195_m;
        RAST._IMod _out5748;
        _out5748 = DCOMPUTF16.COMP.GenModule((p).Select(_11193_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _11195_m = _out5748;
        _11194_generated = (_11195_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_11193_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _11194_generated);
        _11193_i = (_11193_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _11196_i;
      _11196_i = BigInteger.Zero;
      while ((_11196_i) < (new BigInteger((fullName).Count))) {
        if ((_11196_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMPUTF16.__default.escapeIdent((fullName).Select(_11196_i)));
        _11196_i = (_11196_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMPUTF16

