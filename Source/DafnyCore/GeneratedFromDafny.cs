// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent)
    {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object) ((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error)
    {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default)
    {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error)
    {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs)
    {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).CloneAsArray()) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length)
    {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys)
    {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator)
    {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START: ;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7247)");
      after__ASSIGN_SUCH_THAT_0: ;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a)
    {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq)
    {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y)
    {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y)
    {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d)
    {
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d)
    {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d)
    {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m)
    {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e)
    {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START: ;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow)
    {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit,_148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.HexConversion.__default.HEX__DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit,_165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.DecimalConversion.__default.DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape)
    {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape)
    {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineNotInner { get; }
    _IUnOpFormat DowncastClone();
  }
  public abstract class UnOpFormat : _IUnOpFormat {
    public UnOpFormat() {
    }
    private static readonly DAST.Format._IUnOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnOpFormat>(DAST.Format.UnOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnOpFormat create_NoFormat() {
      return new UnOpFormat_NoFormat();
    }
    public static _IUnOpFormat create_CombineNotInner() {
      return new UnOpFormat_CombineNotInner();
    }
    public bool is_NoFormat { get { return this is UnOpFormat_NoFormat; } }
    public bool is_CombineNotInner { get { return this is UnOpFormat_CombineNotInner; } }
    public static System.Collections.Generic.IEnumerable<_IUnOpFormat> AllSingletonConstructors {
      get {
        yield return UnOpFormat.create_NoFormat();
        yield return UnOpFormat.create_CombineNotInner();
      }
    }
    public abstract _IUnOpFormat DowncastClone();
  }
  public class UnOpFormat_NoFormat : UnOpFormat {
    public UnOpFormat_NoFormat() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.NoFormat";
      return s;
    }
  }
  public class UnOpFormat_CombineNotInner : UnOpFormat {
    public UnOpFormat_CombineNotInner() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_CombineNotInner();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_CombineNotInner;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.CombineNotInner";
      return s;
    }
  }

  public interface _IBinOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_Equivalence { get; }
    bool is_ReverseOperands { get; }
    _IBinOpFormat DowncastClone();
  }
  public abstract class BinOpFormat : _IBinOpFormat {
    public BinOpFormat() {
    }
    private static readonly DAST.Format._IBinOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinOpFormat>(DAST.Format.BinOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOpFormat create_NoFormat() {
      return new BinOpFormat_NoFormat();
    }
    public static _IBinOpFormat create_ImpliesFormat() {
      return new BinOpFormat_ImpliesFormat();
    }
    public static _IBinOpFormat create_Equivalence() {
      return new BinOpFormat_Equivalence();
    }
    public static _IBinOpFormat create_ReverseOperands() {
      return new BinOpFormat_ReverseOperands();
    }
    public bool is_NoFormat { get { return this is BinOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinOpFormat_ImpliesFormat; } }
    public bool is_Equivalence { get { return this is BinOpFormat_Equivalence; } }
    public bool is_ReverseOperands { get { return this is BinOpFormat_ReverseOperands; } }
    public static System.Collections.Generic.IEnumerable<_IBinOpFormat> AllSingletonConstructors {
      get {
        yield return BinOpFormat.create_NoFormat();
        yield return BinOpFormat.create_ImpliesFormat();
        yield return BinOpFormat.create_Equivalence();
        yield return BinOpFormat.create_ReverseOperands();
      }
    }
    public abstract _IBinOpFormat DowncastClone();
  }
  public class BinOpFormat_NoFormat : BinOpFormat {
    public BinOpFormat_NoFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.NoFormat";
      return s;
    }
  }
  public class BinOpFormat_ImpliesFormat : BinOpFormat {
    public BinOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinOpFormat_Equivalence : BinOpFormat {
    public BinOpFormat_Equivalence() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_Equivalence();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_Equivalence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.Equivalence";
      return s;
    }
  }
  public class BinOpFormat_ReverseOperands : BinOpFormat {
    public BinOpFormat_ReverseOperands() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ReverseOperands();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ReverseOperands;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ReverseOperands";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_SetBuilder { get; }
    bool is_MapBuilder { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_SetBuilder(DAST._IType element) {
      return new Type_SetBuilder(element);
    }
    public static _IType create_MapBuilder(DAST._IType key, DAST._IType @value) {
      return new Type_MapBuilder(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_SetBuilder { get { return this is Type_SetBuilder; } }
    public bool is_MapBuilder { get { return this is Type_MapBuilder; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        if (d is Type_Multiset) { return ((Type_Multiset)d)._element; }
        return ((Type_SetBuilder)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._key; }
        return ((Type_MapBuilder)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._value; }
        return ((Type_MapBuilder)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_SetBuilder : Type {
    public readonly DAST._IType _element;
    public Type_SetBuilder(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SetBuilder(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_SetBuilder;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_MapBuilder : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_MapBuilder(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_MapBuilder(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_MapBuilder;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_Attribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_args { get; }
    _IAttribute DowncastClone();
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _args;
    public Attribute(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      this._name = name;
      this._args = args;
    }
    public _IAttribute DowncastClone() {
      if (this is _IAttribute dt) { return dt; }
      return new Attribute(_name, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Attribute;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Attribute.Attribute";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
    private static readonly DAST._IAttribute theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IAttribute Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAttribute> _TYPE = new Dafny.TypeDescriptor<DAST._IAttribute>(DAST.Attribute.Default());
    public static Dafny.TypeDescriptor<DAST._IAttribute> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      return new Attribute(name, args);
    }
    public static _IAttribute create_Attribute(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      return create(name, args);
    }
    public bool is_Attribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_args {
      get {
        return this._args;
      }
    }
  }

  public interface _IDatatypeType {
    bool is_DatatypeType { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IDatatypeType DowncastClone();
  }
  public class DatatypeType : _IDatatypeType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public DatatypeType(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._path = path;
      this._attributes = attributes;
    }
    public _IDatatypeType DowncastClone() {
      if (this is _IDatatypeType dt) { return dt; }
      return new DatatypeType(_path, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeType;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeType.DatatypeType";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeType theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IDatatypeType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeType> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeType>(DAST.DatatypeType.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeType create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new DatatypeType(path, attributes);
    }
    public static _IDatatypeType create_DatatypeType(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(path, attributes);
    }
    public bool is_DatatypeType { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        return this._path;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    DAST._IDatatypeType dtor_datatypeType { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(DAST.DatatypeType.Default());
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(DAST._IDatatypeType datatypeType) {
      return new ResolvedType_Datatype(datatypeType);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new ResolvedType_Trait(path, attributes);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new ResolvedType_Newtype(baseType, range, erase, attributes);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public DAST._IDatatypeType dtor_datatypeType {
      get {
        var d = this;
        return ((ResolvedType_Datatype)d)._datatypeType;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        var d = this;
        if (d is ResolvedType_Trait) { return ((ResolvedType_Trait)d)._attributes; }
        return ((ResolvedType_Newtype)d)._attributes;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly DAST._IDatatypeType _datatypeType;
    public ResolvedType_Datatype(DAST._IDatatypeType datatypeType) : base() {
      this._datatypeType = datatypeType;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_datatypeType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._datatypeType, oth._datatypeType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._datatypeType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._datatypeType);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) : base() {
      this._path = path;
      this._attributes = attributes;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase, Dafny.ISequence<DAST._IAttribute> attributes) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
      this._attributes = attributes;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
      this._attributes = attributes;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body, attributes);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body, attributes);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
      this._attributes = attributes;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Trait(name, typeParams, body, attributes);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, typeParams, body, attributes);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
      this._attributes = attributes;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo, attributes);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo, attributes);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
      this._attributes = attributes;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default(), Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr, attributes);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr, attributes);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _ICallName {
    bool is_Name { get; }
    bool is_MapBuilderAdd { get; }
    bool is_MapBuilderBuild { get; }
    bool is_SetBuilderAdd { get; }
    bool is_SetBuilderBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    _ICallName DowncastClone();
  }
  public abstract class CallName : _ICallName {
    public CallName() {
    }
    private static readonly DAST._ICallName theDefault = create_Name(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._ICallName Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICallName> _TYPE = new Dafny.TypeDescriptor<DAST._ICallName>(DAST.CallName.Default());
    public static Dafny.TypeDescriptor<DAST._ICallName> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICallName create_Name(Dafny.ISequence<Dafny.Rune> name) {
      return new CallName_Name(name);
    }
    public static _ICallName create_MapBuilderAdd() {
      return new CallName_MapBuilderAdd();
    }
    public static _ICallName create_MapBuilderBuild() {
      return new CallName_MapBuilderBuild();
    }
    public static _ICallName create_SetBuilderAdd() {
      return new CallName_SetBuilderAdd();
    }
    public static _ICallName create_SetBuilderBuild() {
      return new CallName_SetBuilderBuild();
    }
    public bool is_Name { get { return this is CallName_Name; } }
    public bool is_MapBuilderAdd { get { return this is CallName_MapBuilderAdd; } }
    public bool is_MapBuilderBuild { get { return this is CallName_MapBuilderBuild; } }
    public bool is_SetBuilderAdd { get { return this is CallName_SetBuilderAdd; } }
    public bool is_SetBuilderBuild { get { return this is CallName_SetBuilderBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((CallName_Name)d)._name;
      }
    }
    public abstract _ICallName DowncastClone();
  }
  public class CallName_Name : CallName {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public CallName_Name(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_Name(_name);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_Name;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.Name";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class CallName_MapBuilderAdd : CallName {
    public CallName_MapBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderAdd";
      return s;
    }
  }
  public class CallName_MapBuilderBuild : CallName {
    public CallName_MapBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderBuild";
      return s;
    }
  }
  public class CallName_SetBuilderAdd : CallName {
    public CallName_SetBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderAdd";
      return s;
    }
  }
  public class CallName_SetBuilderBuild : CallName {
    public CallName_SetBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderBuild";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, callName, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Statement_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _callName, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_LtChar { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SeqProperPrefix { get; }
    bool is_SeqPrefix { get; }
    bool is_SetMerge { get; }
    bool is_SetSubtraction { get; }
    bool is_SetIntersection { get; }
    bool is_Subset { get; }
    bool is_ProperSubset { get; }
    bool is_SetDisjoint { get; }
    bool is_MapMerge { get; }
    bool is_MapSubtraction { get; }
    bool is_MultisetMerge { get; }
    bool is_MultisetSubtraction { get; }
    bool is_MultisetIntersection { get; }
    bool is_Submultiset { get; }
    bool is_ProperSubmultiset { get; }
    bool is_MultisetDisjoint { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_LtChar() {
      return new BinOp_LtChar();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SeqProperPrefix() {
      return new BinOp_SeqProperPrefix();
    }
    public static _IBinOp create_SeqPrefix() {
      return new BinOp_SeqPrefix();
    }
    public static _IBinOp create_SetMerge() {
      return new BinOp_SetMerge();
    }
    public static _IBinOp create_SetSubtraction() {
      return new BinOp_SetSubtraction();
    }
    public static _IBinOp create_SetIntersection() {
      return new BinOp_SetIntersection();
    }
    public static _IBinOp create_Subset() {
      return new BinOp_Subset();
    }
    public static _IBinOp create_ProperSubset() {
      return new BinOp_ProperSubset();
    }
    public static _IBinOp create_SetDisjoint() {
      return new BinOp_SetDisjoint();
    }
    public static _IBinOp create_MapMerge() {
      return new BinOp_MapMerge();
    }
    public static _IBinOp create_MapSubtraction() {
      return new BinOp_MapSubtraction();
    }
    public static _IBinOp create_MultisetMerge() {
      return new BinOp_MultisetMerge();
    }
    public static _IBinOp create_MultisetSubtraction() {
      return new BinOp_MultisetSubtraction();
    }
    public static _IBinOp create_MultisetIntersection() {
      return new BinOp_MultisetIntersection();
    }
    public static _IBinOp create_Submultiset() {
      return new BinOp_Submultiset();
    }
    public static _IBinOp create_ProperSubmultiset() {
      return new BinOp_ProperSubmultiset();
    }
    public static _IBinOp create_MultisetDisjoint() {
      return new BinOp_MultisetDisjoint();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_LtChar { get { return this is BinOp_LtChar; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SeqProperPrefix { get { return this is BinOp_SeqProperPrefix; } }
    public bool is_SeqPrefix { get { return this is BinOp_SeqPrefix; } }
    public bool is_SetMerge { get { return this is BinOp_SetMerge; } }
    public bool is_SetSubtraction { get { return this is BinOp_SetSubtraction; } }
    public bool is_SetIntersection { get { return this is BinOp_SetIntersection; } }
    public bool is_Subset { get { return this is BinOp_Subset; } }
    public bool is_ProperSubset { get { return this is BinOp_ProperSubset; } }
    public bool is_SetDisjoint { get { return this is BinOp_SetDisjoint; } }
    public bool is_MapMerge { get { return this is BinOp_MapMerge; } }
    public bool is_MapSubtraction { get { return this is BinOp_MapSubtraction; } }
    public bool is_MultisetMerge { get { return this is BinOp_MultisetMerge; } }
    public bool is_MultisetSubtraction { get { return this is BinOp_MultisetSubtraction; } }
    public bool is_MultisetIntersection { get { return this is BinOp_MultisetIntersection; } }
    public bool is_Submultiset { get { return this is BinOp_Submultiset; } }
    public bool is_ProperSubmultiset { get { return this is BinOp_ProperSubmultiset; } }
    public bool is_MultisetDisjoint { get { return this is BinOp_MultisetDisjoint; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_LtChar : BinOp {
    public BinOp_LtChar() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_LtChar();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_LtChar;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.LtChar";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SeqProperPrefix : BinOp {
    public BinOp_SeqProperPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqProperPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqProperPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqProperPrefix";
      return s;
    }
  }
  public class BinOp_SeqPrefix : BinOp {
    public BinOp_SeqPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqPrefix";
      return s;
    }
  }
  public class BinOp_SetMerge : BinOp {
    public BinOp_SetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetMerge";
      return s;
    }
  }
  public class BinOp_SetSubtraction : BinOp {
    public BinOp_SetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetSubtraction";
      return s;
    }
  }
  public class BinOp_SetIntersection : BinOp {
    public BinOp_SetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetIntersection";
      return s;
    }
  }
  public class BinOp_Subset : BinOp {
    public BinOp_Subset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Subset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Subset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Subset";
      return s;
    }
  }
  public class BinOp_ProperSubset : BinOp {
    public BinOp_ProperSubset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubset";
      return s;
    }
  }
  public class BinOp_SetDisjoint : BinOp {
    public BinOp_SetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDisjoint";
      return s;
    }
  }
  public class BinOp_MapMerge : BinOp {
    public BinOp_MapMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapMerge";
      return s;
    }
  }
  public class BinOp_MapSubtraction : BinOp {
    public BinOp_MapSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetMerge : BinOp {
    public BinOp_MultisetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetMerge";
      return s;
    }
  }
  public class BinOp_MultisetSubtraction : BinOp {
    public BinOp_MultisetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetIntersection : BinOp {
    public BinOp_MultisetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetIntersection";
      return s;
    }
  }
  public class BinOp_Submultiset : BinOp {
    public BinOp_Submultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Submultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Submultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Submultiset";
      return s;
    }
  }
  public class BinOp_ProperSubmultiset : BinOp {
    public BinOp_ProperSubmultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubmultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubmultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubmultiset";
      return s;
    }
  }
  public class BinOp_MultisetDisjoint : BinOp {
    public BinOp_MultisetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetDisjoint";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MultisetValue { get; }
    bool is_MapValue { get; }
    bool is_MapBuilder { get; }
    bool is_SeqUpdate { get; }
    bool is_MapUpdate { get; }
    bool is_SetBuilder { get; }
    bool is_ToMultiset { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_MapKeys { get; }
    bool is_MapValues { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    DAST._IDatatypeType dtor_datatypeType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IType dtor_keyType { get; }
    DAST._IType dtor_valueType { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IExpression dtor_indexExpr { get; }
    DAST._IType dtor_elemType { get; }
    DAST._IExpression dtor_ToMultiset_a0 { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST.Format._IUnOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(DAST._IDatatypeType datatypeType, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(datatypeType, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_MultisetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_MapBuilder(DAST._IType keyType, DAST._IType valueType) {
      return new Expression_MapBuilder(keyType, valueType);
    }
    public static _IExpression create_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_SeqUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_MapUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_SetBuilder(DAST._IType elemType) {
      return new Expression_SetBuilder(elemType);
    }
    public static _IExpression create_ToMultiset(DAST._IExpression _a0) {
      return new Expression_ToMultiset(_a0);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_MapKeys(DAST._IExpression expr) {
      return new Expression_MapKeys(expr);
    }
    public static _IExpression create_MapValues(DAST._IExpression expr) {
      return new Expression_MapValues(expr);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, callName, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MultisetValue { get { return this is Expression_MultisetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_MapBuilder { get { return this is Expression_MapBuilder; } }
    public bool is_SeqUpdate { get { return this is Expression_SeqUpdate; } }
    public bool is_MapUpdate { get { return this is Expression_MapUpdate; } }
    public bool is_SetBuilder { get { return this is Expression_SetBuilder; } }
    public bool is_ToMultiset { get { return this is Expression_ToMultiset; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_MapKeys { get { return this is Expression_MapKeys; } }
    public bool is_MapValues { get { return this is Expression_MapValues; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        return ((Expression_New)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public DAST._IDatatypeType dtor_datatypeType {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._datatypeType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._value; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        if (d is Expression_SetValue) { return ((Expression_SetValue)d)._elements; }
        return ((Expression_MultisetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IType dtor_keyType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._keyType;
      }
    }
    public DAST._IType dtor_valueType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._valueType;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._expr; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._expr; }
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_MapKeys) { return ((Expression_MapKeys)d)._expr; }
        if (d is Expression_MapValues) { return ((Expression_MapValues)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IExpression dtor_indexExpr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._indexExpr; }
        return ((Expression_MapUpdate)d)._indexExpr;
      }
    }
    public DAST._IType dtor_elemType {
      get {
        var d = this;
        return ((Expression_SetBuilder)d)._elemType;
      }
    }
    public DAST._IExpression dtor_ToMultiset_a0 {
      get {
        var d = this;
        return ((Expression_ToMultiset)d)._a0;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Expression_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expression_IIFE)d)._name;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly DAST._IDatatypeType _datatypeType;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(DAST._IDatatypeType datatypeType, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._datatypeType = datatypeType;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_datatypeType, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._datatypeType, oth._datatypeType) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._datatypeType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._datatypeType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MultisetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MultisetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MultisetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MultisetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_MapBuilder : Expression {
    public readonly DAST._IType _keyType;
    public readonly DAST._IType _valueType;
    public Expression_MapBuilder(DAST._IType keyType, DAST._IType valueType) : base() {
      this._keyType = keyType;
      this._valueType = valueType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapBuilder(_keyType, _valueType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapBuilder;
      return oth != null && object.Equals(this._keyType, oth._keyType) && object.Equals(this._valueType, oth._valueType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._keyType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._valueType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._keyType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._valueType);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_MapUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_SetBuilder : Expression {
    public readonly DAST._IType _elemType;
    public Expression_SetBuilder(DAST._IType elemType) : base() {
      this._elemType = elemType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBuilder(_elemType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBuilder;
      return oth != null && object.Equals(this._elemType, oth._elemType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elemType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._elemType);
      s += ")";
      return s;
    }
  }
  public class Expression_ToMultiset : Expression {
    public readonly DAST._IExpression _a0;
    public Expression_ToMultiset(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ToMultiset(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ToMultiset;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ToMultiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_MapKeys : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapKeys(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapKeys(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapKeys;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapKeys";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValues : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapValues(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValues(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValues;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValues";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _callName, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 36;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 37;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 38;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 39;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 40;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _801_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _802_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_801_i) < (_802_j)) {
          return _802_j;
        } else {
          return _801_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IExpr NewVec(Dafny.ISequence<RAST._IExpr> elements) {
      return (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec!"))).Apply(elements);
    }
    public static RAST._IExpr Clone(RAST._IExpr underlying) {
      return (RAST.Expr.create_Select(underlying, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
    }
    public static RAST._IExpr Borrow(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IExpr BorrowMut(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TIdentifier(content);
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind)
    {
      Dafny.ISequence<Dafny.Rune> _803___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j)
    {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.__default.std__rc__Rc__new, Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType SelfBorrowed { get {
      return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType SelfBorrowedMut { get {
      return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType global__type { get {
      return RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IType std__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IType CloneTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
    } }
    public static RAST._IType DafnyPrintTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
    } }
    public static RAST._IType DefaultTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
    } }
    public static RAST._IType StaticTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
    } }
    public static RAST._IType cell__type { get {
      return (RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"));
    } }
    public static RAST._IType refcell__type { get {
      return (RAST.__default.cell__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"));
    } }
    public static RAST._IType dafny__runtime__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
    } }
    public static RAST._IExpr self { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"));
    } }
    public static RAST._IExpr @global { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IExpr dafny__runtime { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static RAST._IExpr dafny__runtime__Set { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set"));
    } }
    public static RAST._IExpr dafny__runtime__Set__from__array { get {
      return (RAST.__default.dafny__runtime__Set).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Sequence { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"));
    } }
    public static RAST._IExpr Sequence__from__array__owned { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array_owned"));
    } }
    public static RAST._IExpr Sequence__from__array { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset__from__array { get {
      return (RAST.__default.dafny__runtime__Multiset).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr std { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IExpr std__rc { get {
      return (RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"));
    } }
    public static RAST._IExpr std__rc__Rc { get {
      return (RAST.__default.std__rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc"));
    } }
    public static RAST._IExpr std__rc__Rc__new { get {
      return (RAST.__default.std__rc__Rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
    } }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _805___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _806_body = _805___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _807_name = _804___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _807_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_806_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_808_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_809_modDecl) => {
          return (_809_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_808_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _810___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _811_name = _810___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _811_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind)
    {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_812_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_813_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_813_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _812_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    RAST._IVisibility dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly RAST._IVisibility _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && object.Equals(this._visibility, oth._visibility) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(RAST.Visibility.Default(), RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(RAST._IVisibility visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public RAST._IVisibility dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_visibility, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _814_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _815_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _816_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _815_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_817_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_818_field) => {
          return (_818_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_817_ind, RAST.__default.IND));
        })))(ind), _814_separator)), _816_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _819_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_821_t) => {
          return (_821_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND));
        })))(ind), _819_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_823_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _822_ind), RAST.__default.IND), (_823_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind)
    {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_825_t) => {
          return (_825_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints)
    {
      Dafny.ISequence<RAST._ITypeParam> _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _827_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _828_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_827_dt__update__tmp_h0).dtor_content, _828_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_829_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_830_t) => {
        return (_830_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_829_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TIdentifier { get; }
    bool is_TMemberSelect { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_base { get; }
    RAST._IType dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IType Apply1(RAST._IType arg);
    RAST._IType Apply(Dafny.ISequence<RAST._IType> args);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TIdentifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TIdentifier(name);
    }
    public static _IType create_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TMemberSelect(@base, name);
    }
    public static _IType create_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TIdentifier { get { return this is Type_TIdentifier; } }
    public bool is_TMemberSelect { get { return this is Type_TMemberSelect; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Type_TIdentifier) { return ((Type_TIdentifier)d)._name; }
        return ((Type_TMemberSelect)d)._name;
      }
    }
    public RAST._IType dtor_base {
      get {
        var d = this;
        return ((Type_TMemberSelect)d)._base;
      }
    }
    public RAST._IType dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TIdentifier) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _832_underlying = _831___mcc_h0;
        return _832_underlying;
      } else if (_source26.is_TMemberSelect) {
        RAST._IType _833___mcc_h1 = _source26.dtor_base;
        Dafny.ISequence<Dafny.Rune> _834___mcc_h2 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _835_name = _834___mcc_h2;
        RAST._IType _836_underlying = _833___mcc_h1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_836_underlying)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _835_name);
      } else if (_source26.is_TypeApp) {
        RAST._IType _837___mcc_h3 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _838___mcc_h4 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _839_args = _838___mcc_h4;
        RAST._IType _840_base = _837___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat((_840_base)._ToString(ind), (((_839_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_839_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_841_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_842_arg) => {
          return (_842_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_841_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _843___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _844_underlying = _843___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_844_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _845___mcc_h6 = _source26.dtor_underlying;
        RAST._IType _846_underlying = _845___mcc_h6;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_846_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _847___mcc_h7 = _source26.dtor_underlying;
        RAST._IType _848_underlying = _847___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_848_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _849___mcc_h8 = _source26.dtor_underlying;
        RAST._IType _850_underlying = _849___mcc_h8;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_850_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _851___mcc_h9 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _852_args = _851___mcc_h9;
        if ((_852_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_852_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_853_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_854_arg) => {
            return (_854_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_853_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _855___mcc_h10 = _source26.dtor_arguments;
        RAST._IType _856___mcc_h11 = _source26.dtor_returnType;
        RAST._IType _857_returnType = _856___mcc_h11;
        Dafny.ISequence<RAST._IType> _858_arguments = _855___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_858_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_859_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_860_arg) => {
          return (_860_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_859_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_857_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _861___mcc_h12 = _source26.dtor_left;
        RAST._IType _862___mcc_h13 = _source26.dtor_right;
        RAST._IType _863_right = _862___mcc_h13;
        RAST._IType _864_left = _861___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_864_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_863_right)._ToString(ind));
      }
    }
    public RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Type.create_TMemberSelect(this, name);
    }
    public RAST._IType Apply1(RAST._IType arg) {
      return RAST.Type.create_TypeApp(this, Dafny.Sequence<RAST._IType>.FromElements(arg));
    }
    public RAST._IType Apply(Dafny.ISequence<RAST._IType> args) {
      return RAST.Type.create_TypeApp(this, args);
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TIdentifier : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TIdentifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TIdentifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TIdentifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TIdentifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TMemberSelect : Type {
    public readonly RAST._IType _base;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._base = @base;
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TMemberSelect(_base, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TMemberSelect;
      return oth != null && object.Equals(this._base, oth._base) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TMemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly RAST._IType _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_865_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_866_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _865_ind), RAST.__default.IND), (_866_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_865_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_867_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_868_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _867_ind), RAST.__default.IND), (_868_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_867_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IVisibility dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(RAST._IVisibility pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public RAST._IVisibility dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_pub, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly RAST._IVisibility _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(RAST._IVisibility pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && object.Equals(this._pub, oth._pub) && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public interface _IVisibility {
    bool is_PUB { get; }
    bool is_PRIV { get; }
    _IVisibility DowncastClone();
  }
  public abstract class Visibility : _IVisibility {
    public Visibility() {
    }
    private static readonly RAST._IVisibility theDefault = create_PUB();
    public static RAST._IVisibility Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IVisibility> _TYPE = new Dafny.TypeDescriptor<RAST._IVisibility>(RAST.Visibility.Default());
    public static Dafny.TypeDescriptor<RAST._IVisibility> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVisibility create_PUB() {
      return new Visibility_PUB();
    }
    public static _IVisibility create_PRIV() {
      return new Visibility_PRIV();
    }
    public bool is_PUB { get { return this is Visibility_PUB; } }
    public bool is_PRIV { get { return this is Visibility_PRIV; } }
    public static System.Collections.Generic.IEnumerable<_IVisibility> AllSingletonConstructors {
      get {
        yield return Visibility.create_PUB();
        yield return Visibility.create_PRIV();
      }
    }
    public abstract _IVisibility DowncastClone();
  }
  public class Visibility_PUB : Visibility {
    public Visibility_PUB() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PUB();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PUB;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PUB";
      return s;
    }
  }
  public class Visibility_PRIV : Visibility {
    public Visibility_PRIV() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PRIV();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PRIV;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PRIV";
      return s;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfBorrowedMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal selfBorrowed { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.SelfBorrowed);
    } }
    public static RAST._IFormal selfOwned { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
    } }
    public static RAST._IFormal selfMut { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfBorrowedMut);
    } }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _869_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _870_rhsString = ((this).dtor_rhs)._ToString(_869_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_870_rhsString).Contains(new Dafny.Rune('\n'))) && (((_870_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _870_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _870_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IAssociativity {
    bool is_LeftToRight { get; }
    bool is_RightToLeft { get; }
    bool is_RequiresParentheses { get; }
    _IAssociativity DowncastClone();
  }
  public abstract class Associativity : _IAssociativity {
    public Associativity() {
    }
    private static readonly RAST._IAssociativity theDefault = create_LeftToRight();
    public static RAST._IAssociativity Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssociativity> _TYPE = new Dafny.TypeDescriptor<RAST._IAssociativity>(RAST.Associativity.Default());
    public static Dafny.TypeDescriptor<RAST._IAssociativity> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssociativity create_LeftToRight() {
      return new Associativity_LeftToRight();
    }
    public static _IAssociativity create_RightToLeft() {
      return new Associativity_RightToLeft();
    }
    public static _IAssociativity create_RequiresParentheses() {
      return new Associativity_RequiresParentheses();
    }
    public bool is_LeftToRight { get { return this is Associativity_LeftToRight; } }
    public bool is_RightToLeft { get { return this is Associativity_RightToLeft; } }
    public bool is_RequiresParentheses { get { return this is Associativity_RequiresParentheses; } }
    public static System.Collections.Generic.IEnumerable<_IAssociativity> AllSingletonConstructors {
      get {
        yield return Associativity.create_LeftToRight();
        yield return Associativity.create_RightToLeft();
        yield return Associativity.create_RequiresParentheses();
      }
    }
    public abstract _IAssociativity DowncastClone();
  }
  public class Associativity_LeftToRight : Associativity {
    public Associativity_LeftToRight() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_LeftToRight();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_LeftToRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.LeftToRight";
      return s;
    }
  }
  public class Associativity_RightToLeft : Associativity {
    public Associativity_RightToLeft() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RightToLeft();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RightToLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RightToLeft";
      return s;
    }
  }
  public class Associativity_RequiresParentheses : Associativity {
    public Associativity_RequiresParentheses() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RequiresParentheses();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RequiresParentheses;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RequiresParentheses";
      return s;
    }
  }

  public interface _IPrintingInfo {
    bool is_UnknownPrecedence { get; }
    bool is_Precedence { get; }
    bool is_SuffixPrecedence { get; }
    bool is_PrecedenceAssociativity { get; }
    BigInteger dtor_precedence { get; }
    RAST._IAssociativity dtor_associativity { get; }
    _IPrintingInfo DowncastClone();
    bool NeedParenthesesFor(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForRight(RAST._IPrintingInfo underlying);
  }
  public abstract class PrintingInfo : _IPrintingInfo {
    public PrintingInfo() {
    }
    private static readonly RAST._IPrintingInfo theDefault = create_UnknownPrecedence();
    public static RAST._IPrintingInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IPrintingInfo> _TYPE = new Dafny.TypeDescriptor<RAST._IPrintingInfo>(RAST.PrintingInfo.Default());
    public static Dafny.TypeDescriptor<RAST._IPrintingInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrintingInfo create_UnknownPrecedence() {
      return new PrintingInfo_UnknownPrecedence();
    }
    public static _IPrintingInfo create_Precedence(BigInteger precedence) {
      return new PrintingInfo_Precedence(precedence);
    }
    public static _IPrintingInfo create_SuffixPrecedence(BigInteger precedence) {
      return new PrintingInfo_SuffixPrecedence(precedence);
    }
    public static _IPrintingInfo create_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) {
      return new PrintingInfo_PrecedenceAssociativity(precedence, associativity);
    }
    public bool is_UnknownPrecedence { get { return this is PrintingInfo_UnknownPrecedence; } }
    public bool is_Precedence { get { return this is PrintingInfo_Precedence; } }
    public bool is_SuffixPrecedence { get { return this is PrintingInfo_SuffixPrecedence; } }
    public bool is_PrecedenceAssociativity { get { return this is PrintingInfo_PrecedenceAssociativity; } }
    public BigInteger dtor_precedence {
      get {
        var d = this;
        if (d is PrintingInfo_Precedence) { return ((PrintingInfo_Precedence)d)._precedence; }
        if (d is PrintingInfo_SuffixPrecedence) { return ((PrintingInfo_SuffixPrecedence)d)._precedence; }
        return ((PrintingInfo_PrecedenceAssociativity)d)._precedence;
      }
    }
    public RAST._IAssociativity dtor_associativity {
      get {
        var d = this;
        return ((PrintingInfo_PrecedenceAssociativity)d)._associativity;
      }
    }
    public abstract _IPrintingInfo DowncastClone();
    public bool NeedParenthesesFor(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return true;
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_LeftToRight));
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForRight(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_RightToLeft));
      } else {
        return false;
      }
    }
  }
  public class PrintingInfo_UnknownPrecedence : PrintingInfo {
    public PrintingInfo_UnknownPrecedence() : base() {
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_UnknownPrecedence();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_UnknownPrecedence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.UnknownPrecedence";
      return s;
    }
  }
  public class PrintingInfo_Precedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_Precedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_Precedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_Precedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.Precedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_SuffixPrecedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_SuffixPrecedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_SuffixPrecedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_SuffixPrecedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.SuffixPrecedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_PrecedenceAssociativity : PrintingInfo {
    public readonly BigInteger _precedence;
    public readonly RAST._IAssociativity _associativity;
    public PrintingInfo_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) : base() {
      this._precedence = precedence;
      this._associativity = associativity;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_PrecedenceAssociativity(_precedence, _associativity);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_PrecedenceAssociativity;
      return oth != null && this._precedence == oth._precedence && object.Equals(this._associativity, oth._associativity);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._associativity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.PrecedenceAssociativity";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ", ";
      s += Dafny.Helpers.ToString(this._associativity);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Identifier { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_TypeAscription { get; }
    bool is_LiteralInt { get; }
    bool is_LiteralString { get; }
    bool is_ConversionNum { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_CallType { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    bool is_MemberSelect { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    bool dtor_binary { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    RAST._IPrintingInfo printingInfo { get; }
    BigInteger Height();
    RAST._IExpr Optimize();
    bool LeftRequiresParentheses(RAST._IExpr left);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left);
    bool RightRequiresParentheses(RAST._IExpr right);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right);
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
    RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr ApplyType(Dafny.ISequence<RAST._IType> typeParameters);
    RAST._IExpr ApplyType1(RAST._IType typeParameter);
    RAST._IExpr Apply(Dafny.ISequence<RAST._IExpr> arguments);
    RAST._IExpr Apply1(RAST._IExpr argument);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Identifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Identifier(name);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(RAST._IExpr underlying, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(underlying, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_TypeAscription(RAST._IExpr left, RAST._IType tpe) {
      return new Expr_TypeAscription(left, tpe);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) {
      return new Expr_LiteralString(@value, binary);
    }
    public static _IExpr create_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) {
      return new Expr_ConversionNum(tpe, underlying);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_CallType(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters) {
      return new Expr_CallType(obj, typeParameters);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, arguments);
    }
    public static _IExpr create_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Select(obj, name);
    }
    public static _IExpr create_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_MemberSelect(obj, name);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Identifier { get { return this is Expr_Identifier; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_TypeAscription { get { return this is Expr_TypeAscription; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_LiteralString { get { return this is Expr_LiteralString; } }
    public bool is_ConversionNum { get { return this is Expr_ConversionNum; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_CallType { get { return this is Expr_CallType; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Select { get { return this is Expr_Select; } }
    public bool is_MemberSelect { get { return this is Expr_MemberSelect; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_Identifier) { return ((Expr_Identifier)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        if (d is Expr_For) { return ((Expr_For)d)._name; }
        if (d is Expr_Select) { return ((Expr_Select)d)._name; }
        return ((Expr_MemberSelect)d)._name;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_ConversionNum) { return ((Expr_ConversionNum)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        return ((Expr_Labelled)d)._underlying;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        if (d is Expr_BinaryOp) { return ((Expr_BinaryOp)d)._left; }
        return ((Expr_TypeAscription)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Expr_TypeAscription) { return ((Expr_TypeAscription)d)._tpe; }
        return ((Expr_ConversionNum)d)._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        if (d is Expr_LiteralInt) { return ((Expr_LiteralInt)d)._value; }
        return ((Expr_LiteralString)d)._value;
      }
    }
    public bool dtor_binary {
      get {
        var d = this;
        return ((Expr_LiteralString)d)._binary;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        if (d is Expr_CallType) { return ((Expr_CallType)d)._obj; }
        if (d is Expr_Call) { return ((Expr_Call)d)._obj; }
        if (d is Expr_Select) { return ((Expr_Select)d)._obj; }
        return ((Expr_MemberSelect)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_CallType)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _871___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _872___mcc_h2 = _source27.dtor_name;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _873___mcc_h4 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _874___mcc_h5 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _875_cases = _874___mcc_h5;
        RAST._IExpr _876_matchee = _873___mcc_h4;
        return (BigInteger.One) + (RAST.__default.max((_876_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_875_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_877_oneCase) => {
          return (_877_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _878___mcc_h8 = _source27.dtor_stmt;
        RAST._IExpr _879___mcc_h9 = _source27.dtor_rhs;
        RAST._IExpr _880_rhs = _879___mcc_h9;
        RAST._IExpr _881_stmt = _878___mcc_h8;
        BigInteger _882_default = (BigInteger.One) + (RAST.__default.max((_881_stmt).Height(), (_880_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _883___mcc_h102 = _source28.dtor_content;
          return _882_default;
        } else if (_source28.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _884___mcc_h104 = _source28.dtor_name;
          return _882_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _885___mcc_h106 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _886___mcc_h107 = _source28.dtor_cases;
          return _882_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _887___mcc_h110 = _source28.dtor_stmt;
          RAST._IExpr _888___mcc_h111 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _887___mcc_h110;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _889___mcc_h114 = _source29.dtor_content;
            return _882_default;
          } else if (_source29.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _890___mcc_h116 = _source29.dtor_name;
            return _882_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _891___mcc_h118 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _892___mcc_h119 = _source29.dtor_cases;
            return _882_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _893___mcc_h122 = _source29.dtor_stmt;
            RAST._IExpr _894___mcc_h123 = _source29.dtor_rhs;
            return _882_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _895___mcc_h126 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_StructBuild) {
            RAST._IExpr _896___mcc_h128 = _source29.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _897___mcc_h129 = _source29.dtor_assignments;
            return _882_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _898___mcc_h132 = _source29.dtor_arguments;
            return _882_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _899___mcc_h134 = _source29.dtor_op1;
            RAST._IExpr _900___mcc_h135 = _source29.dtor_underlying;
            DAST.Format._IUnOpFormat _901___mcc_h136 = _source29.dtor_format;
            return _882_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _902___mcc_h140 = _source29.dtor_op2;
            RAST._IExpr _903___mcc_h141 = _source29.dtor_left;
            RAST._IExpr _904___mcc_h142 = _source29.dtor_right;
            DAST.Format._IBinOpFormat _905___mcc_h143 = _source29.dtor_format2;
            return _882_default;
          } else if (_source29.is_TypeAscription) {
            RAST._IExpr _906___mcc_h148 = _source29.dtor_left;
            RAST._IType _907___mcc_h149 = _source29.dtor_tpe;
            return _882_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _908___mcc_h152 = _source29.dtor_value;
            return _882_default;
          } else if (_source29.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _909___mcc_h154 = _source29.dtor_value;
            bool _910___mcc_h155 = _source29.dtor_binary;
            return _882_default;
          } else if (_source29.is_ConversionNum) {
            RAST._IType _911___mcc_h158 = _source29.dtor_tpe;
            RAST._IExpr _912___mcc_h159 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _913___mcc_h162 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _914___mcc_h163 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _915___mcc_h164 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _916___mcc_h165 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _915___mcc_h164;
            if (_source30.is_None) {
              return _882_default;
            } else {
              RAST._IType _917___mcc_h170 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _916___mcc_h165;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _888___mcc_h111;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _918___mcc_h172 = _source32.dtor_content;
                  return _882_default;
                } else if (_source32.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _919___mcc_h174 = _source32.dtor_name;
                  return _882_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _920___mcc_h176 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _921___mcc_h177 = _source32.dtor_cases;
                  return _882_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _922___mcc_h180 = _source32.dtor_stmt;
                  RAST._IExpr _923___mcc_h181 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _922___mcc_h180;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _924___mcc_h184 = _source33.dtor_content;
                    return _882_default;
                  } else if (_source33.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _925___mcc_h186 = _source33.dtor_name;
                    return _882_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _926___mcc_h188 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _927___mcc_h189 = _source33.dtor_cases;
                    return _882_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _928___mcc_h192 = _source33.dtor_stmt;
                    RAST._IExpr _929___mcc_h193 = _source33.dtor_rhs;
                    return _882_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _930___mcc_h196 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_StructBuild) {
                    RAST._IExpr _931___mcc_h198 = _source33.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _932___mcc_h199 = _source33.dtor_assignments;
                    return _882_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _933___mcc_h202 = _source33.dtor_arguments;
                    return _882_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _934___mcc_h204 = _source33.dtor_op1;
                    RAST._IExpr _935___mcc_h205 = _source33.dtor_underlying;
                    DAST.Format._IUnOpFormat _936___mcc_h206 = _source33.dtor_format;
                    return _882_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _937___mcc_h210 = _source33.dtor_op2;
                    RAST._IExpr _938___mcc_h211 = _source33.dtor_left;
                    RAST._IExpr _939___mcc_h212 = _source33.dtor_right;
                    DAST.Format._IBinOpFormat _940___mcc_h213 = _source33.dtor_format2;
                    return _882_default;
                  } else if (_source33.is_TypeAscription) {
                    RAST._IExpr _941___mcc_h218 = _source33.dtor_left;
                    RAST._IType _942___mcc_h219 = _source33.dtor_tpe;
                    return _882_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _943___mcc_h222 = _source33.dtor_value;
                    return _882_default;
                  } else if (_source33.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _944___mcc_h224 = _source33.dtor_value;
                    bool _945___mcc_h225 = _source33.dtor_binary;
                    return _882_default;
                  } else if (_source33.is_ConversionNum) {
                    RAST._IType _946___mcc_h228 = _source33.dtor_tpe;
                    RAST._IExpr _947___mcc_h229 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _948___mcc_h232 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _949___mcc_h233 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _950___mcc_h234 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _951___mcc_h235 = _source33.dtor_optRhs;
                    return _882_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _952___mcc_h240 = _source33.dtor_name;
                    RAST._IExpr _953___mcc_h241 = _source33.dtor_rhs;
                    RAST._IExpr _954_last = _923___mcc_h181;
                    RAST._IExpr _955_rhs = _953___mcc_h241;
                    Dafny.ISequence<Dafny.Rune> _956_name2 = _952___mcc_h240;
                    RAST._IType _957_tpe = _917___mcc_h170;
                    Dafny.ISequence<Dafny.Rune> _958_name = _914___mcc_h163;
                    RAST._IDeclareType _959_mod = _913___mcc_h162;
                    if ((_958_name).Equals(_956_name2)) {
                      return (BigInteger.One) + (_882_default);
                    } else {
                      return _882_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _960___mcc_h244 = _source33.dtor_cond;
                    RAST._IExpr _961___mcc_h245 = _source33.dtor_thn;
                    RAST._IExpr _962___mcc_h246 = _source33.dtor_els;
                    return _882_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _963___mcc_h250 = _source33.dtor_optCond;
                    RAST._IExpr _964___mcc_h251 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _965___mcc_h254 = _source33.dtor_name;
                    RAST._IExpr _966___mcc_h255 = _source33.dtor_range;
                    RAST._IExpr _967___mcc_h256 = _source33.dtor_body;
                    return _882_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _968___mcc_h260 = _source33.dtor_lbl;
                    RAST._IExpr _969___mcc_h261 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _970___mcc_h264 = _source33.dtor_optLbl;
                    return _882_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _971___mcc_h266 = _source33.dtor_optLbl;
                    return _882_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _972___mcc_h268 = _source33.dtor_optExpr;
                    return _882_default;
                  } else if (_source33.is_CallType) {
                    RAST._IExpr _973___mcc_h270 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _974___mcc_h271 = _source33.dtor_typeParameters;
                    return _882_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _975___mcc_h274 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _976___mcc_h275 = _source33.dtor_arguments;
                    return _882_default;
                  } else if (_source33.is_Select) {
                    RAST._IExpr _977___mcc_h278 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _978___mcc_h279 = _source33.dtor_name;
                    return _882_default;
                  } else {
                    RAST._IExpr _979___mcc_h282 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _980___mcc_h283 = _source33.dtor_name;
                    return _882_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _981___mcc_h286 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_StructBuild) {
                  RAST._IExpr _982___mcc_h288 = _source32.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _983___mcc_h289 = _source32.dtor_assignments;
                  return _882_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _984___mcc_h292 = _source32.dtor_arguments;
                  return _882_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _985___mcc_h294 = _source32.dtor_op1;
                  RAST._IExpr _986___mcc_h295 = _source32.dtor_underlying;
                  DAST.Format._IUnOpFormat _987___mcc_h296 = _source32.dtor_format;
                  return _882_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _988___mcc_h300 = _source32.dtor_op2;
                  RAST._IExpr _989___mcc_h301 = _source32.dtor_left;
                  RAST._IExpr _990___mcc_h302 = _source32.dtor_right;
                  DAST.Format._IBinOpFormat _991___mcc_h303 = _source32.dtor_format2;
                  return _882_default;
                } else if (_source32.is_TypeAscription) {
                  RAST._IExpr _992___mcc_h308 = _source32.dtor_left;
                  RAST._IType _993___mcc_h309 = _source32.dtor_tpe;
                  return _882_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _994___mcc_h312 = _source32.dtor_value;
                  return _882_default;
                } else if (_source32.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _995___mcc_h314 = _source32.dtor_value;
                  bool _996___mcc_h315 = _source32.dtor_binary;
                  return _882_default;
                } else if (_source32.is_ConversionNum) {
                  RAST._IType _997___mcc_h318 = _source32.dtor_tpe;
                  RAST._IExpr _998___mcc_h319 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _999___mcc_h322 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1000___mcc_h323 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1001___mcc_h324 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1002___mcc_h325 = _source32.dtor_optRhs;
                  return _882_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1003___mcc_h330 = _source32.dtor_name;
                  RAST._IExpr _1004___mcc_h331 = _source32.dtor_rhs;
                  return _882_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _1005___mcc_h334 = _source32.dtor_cond;
                  RAST._IExpr _1006___mcc_h335 = _source32.dtor_thn;
                  RAST._IExpr _1007___mcc_h336 = _source32.dtor_els;
                  return _882_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1008___mcc_h340 = _source32.dtor_optCond;
                  RAST._IExpr _1009___mcc_h341 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1010___mcc_h344 = _source32.dtor_name;
                  RAST._IExpr _1011___mcc_h345 = _source32.dtor_range;
                  RAST._IExpr _1012___mcc_h346 = _source32.dtor_body;
                  return _882_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1013___mcc_h350 = _source32.dtor_lbl;
                  RAST._IExpr _1014___mcc_h351 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1015___mcc_h354 = _source32.dtor_optLbl;
                  return _882_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1016___mcc_h356 = _source32.dtor_optLbl;
                  return _882_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1017___mcc_h358 = _source32.dtor_optExpr;
                  return _882_default;
                } else if (_source32.is_CallType) {
                  RAST._IExpr _1018___mcc_h360 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1019___mcc_h361 = _source32.dtor_typeParameters;
                  return _882_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _1020___mcc_h364 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1021___mcc_h365 = _source32.dtor_arguments;
                  return _882_default;
                } else if (_source32.is_Select) {
                  RAST._IExpr _1022___mcc_h368 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1023___mcc_h369 = _source32.dtor_name;
                  return _882_default;
                } else {
                  RAST._IExpr _1024___mcc_h372 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1025___mcc_h373 = _source32.dtor_name;
                  return _882_default;
                }
              } else {
                RAST._IExpr _1026___mcc_h376 = _source31.dtor_value;
                return _882_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1027___mcc_h378 = _source29.dtor_name;
            RAST._IExpr _1028___mcc_h379 = _source29.dtor_rhs;
            return _882_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _1029___mcc_h382 = _source29.dtor_cond;
            RAST._IExpr _1030___mcc_h383 = _source29.dtor_thn;
            RAST._IExpr _1031___mcc_h384 = _source29.dtor_els;
            RAST._IExpr _source34 = _1029___mcc_h382;
            if (_source34.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1032___mcc_h388 = _source34.dtor_content;
              return _882_default;
            } else if (_source34.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1033___mcc_h390 = _source34.dtor_name;
              return _882_default;
            } else if (_source34.is_Match) {
              RAST._IExpr _1034___mcc_h392 = _source34.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1035___mcc_h393 = _source34.dtor_cases;
              return _882_default;
            } else if (_source34.is_StmtExpr) {
              RAST._IExpr _1036___mcc_h396 = _source34.dtor_stmt;
              RAST._IExpr _1037___mcc_h397 = _source34.dtor_rhs;
              return _882_default;
            } else if (_source34.is_Block) {
              RAST._IExpr _1038___mcc_h400 = _source34.dtor_underlying;
              return _882_default;
            } else if (_source34.is_StructBuild) {
              RAST._IExpr _1039___mcc_h402 = _source34.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _1040___mcc_h403 = _source34.dtor_assignments;
              return _882_default;
            } else if (_source34.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1041___mcc_h406 = _source34.dtor_arguments;
              return _882_default;
            } else if (_source34.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1042___mcc_h408 = _source34.dtor_op1;
              RAST._IExpr _1043___mcc_h409 = _source34.dtor_underlying;
              DAST.Format._IUnOpFormat _1044___mcc_h410 = _source34.dtor_format;
              if (object.Equals(_1042___mcc_h408, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
                RAST._IExpr _source35 = _1043___mcc_h409;
                if (_source35.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1045___mcc_h414 = _source35.dtor_content;
                  return _882_default;
                } else if (_source35.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1046___mcc_h416 = _source35.dtor_name;
                  return _882_default;
                } else if (_source35.is_Match) {
                  RAST._IExpr _1047___mcc_h418 = _source35.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1048___mcc_h419 = _source35.dtor_cases;
                  return _882_default;
                } else if (_source35.is_StmtExpr) {
                  RAST._IExpr _1049___mcc_h422 = _source35.dtor_stmt;
                  RAST._IExpr _1050___mcc_h423 = _source35.dtor_rhs;
                  return _882_default;
                } else if (_source35.is_Block) {
                  RAST._IExpr _1051___mcc_h426 = _source35.dtor_underlying;
                  return _882_default;
                } else if (_source35.is_StructBuild) {
                  RAST._IExpr _1052___mcc_h428 = _source35.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1053___mcc_h429 = _source35.dtor_assignments;
                  return _882_default;
                } else if (_source35.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1054___mcc_h432 = _source35.dtor_arguments;
                  return _882_default;
                } else if (_source35.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1055___mcc_h434 = _source35.dtor_op1;
                  RAST._IExpr _1056___mcc_h435 = _source35.dtor_underlying;
                  DAST.Format._IUnOpFormat _1057___mcc_h436 = _source35.dtor_format;
                  return _882_default;
                } else if (_source35.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1058___mcc_h440 = _source35.dtor_op2;
                  RAST._IExpr _1059___mcc_h441 = _source35.dtor_left;
                  RAST._IExpr _1060___mcc_h442 = _source35.dtor_right;
                  DAST.Format._IBinOpFormat _1061___mcc_h443 = _source35.dtor_format2;
                  if (object.Equals(_1058___mcc_h440, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
                    RAST._IExpr _source36 = _1030___mcc_h383;
                    if (_source36.is_RawExpr) {
                      Dafny.ISequence<Dafny.Rune> _1062___mcc_h448 = _source36.dtor_content;
                      if (object.Equals(_1062___mcc_h448, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"))) {
                        RAST._IExpr _source37 = _1031___mcc_h384;
                        if (_source37.is_RawExpr) {
                          Dafny.ISequence<Dafny.Rune> _1063___mcc_h450 = _source37.dtor_content;
                          if (object.Equals(_1063___mcc_h450, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                            RAST._IExpr _1064_last = _888___mcc_h111;
                            DAST.Format._IUnOpFormat _1065_of = _1044___mcc_h410;
                            DAST.Format._IBinOpFormat _1066_f = _1061___mcc_h443;
                            RAST._IExpr _1067_b = _1060___mcc_h442;
                            RAST._IExpr _1068_a = _1059___mcc_h441;
                            return (BigInteger.One) + (_882_default);
                          } else {
                            return _882_default;
                          }
                        } else if (_source37.is_Identifier) {
                          Dafny.ISequence<Dafny.Rune> _1069___mcc_h452 = _source37.dtor_name;
                          return _882_default;
                        } else if (_source37.is_Match) {
                          RAST._IExpr _1070___mcc_h454 = _source37.dtor_matchee;
                          Dafny.ISequence<RAST._IMatchCase> _1071___mcc_h455 = _source37.dtor_cases;
                          return _882_default;
                        } else if (_source37.is_StmtExpr) {
                          RAST._IExpr _1072___mcc_h458 = _source37.dtor_stmt;
                          RAST._IExpr _1073___mcc_h459 = _source37.dtor_rhs;
                          return _882_default;
                        } else if (_source37.is_Block) {
                          RAST._IExpr _1074___mcc_h462 = _source37.dtor_underlying;
                          return _882_default;
                        } else if (_source37.is_StructBuild) {
                          RAST._IExpr _1075___mcc_h464 = _source37.dtor_underlying;
                          Dafny.ISequence<RAST._IAssignIdentifier> _1076___mcc_h465 = _source37.dtor_assignments;
                          return _882_default;
                        } else if (_source37.is_Tuple) {
                          Dafny.ISequence<RAST._IExpr> _1077___mcc_h468 = _source37.dtor_arguments;
                          return _882_default;
                        } else if (_source37.is_UnaryOp) {
                          Dafny.ISequence<Dafny.Rune> _1078___mcc_h470 = _source37.dtor_op1;
                          RAST._IExpr _1079___mcc_h471 = _source37.dtor_underlying;
                          DAST.Format._IUnOpFormat _1080___mcc_h472 = _source37.dtor_format;
                          return _882_default;
                        } else if (_source37.is_BinaryOp) {
                          Dafny.ISequence<Dafny.Rune> _1081___mcc_h476 = _source37.dtor_op2;
                          RAST._IExpr _1082___mcc_h477 = _source37.dtor_left;
                          RAST._IExpr _1083___mcc_h478 = _source37.dtor_right;
                          DAST.Format._IBinOpFormat _1084___mcc_h479 = _source37.dtor_format2;
                          return _882_default;
                        } else if (_source37.is_TypeAscription) {
                          RAST._IExpr _1085___mcc_h484 = _source37.dtor_left;
                          RAST._IType _1086___mcc_h485 = _source37.dtor_tpe;
                          return _882_default;
                        } else if (_source37.is_LiteralInt) {
                          Dafny.ISequence<Dafny.Rune> _1087___mcc_h488 = _source37.dtor_value;
                          return _882_default;
                        } else if (_source37.is_LiteralString) {
                          Dafny.ISequence<Dafny.Rune> _1088___mcc_h490 = _source37.dtor_value;
                          bool _1089___mcc_h491 = _source37.dtor_binary;
                          return _882_default;
                        } else if (_source37.is_ConversionNum) {
                          RAST._IType _1090___mcc_h494 = _source37.dtor_tpe;
                          RAST._IExpr _1091___mcc_h495 = _source37.dtor_underlying;
                          return _882_default;
                        } else if (_source37.is_DeclareVar) {
                          RAST._IDeclareType _1092___mcc_h498 = _source37.dtor_declareType;
                          Dafny.ISequence<Dafny.Rune> _1093___mcc_h499 = _source37.dtor_name;
                          Std.Wrappers._IOption<RAST._IType> _1094___mcc_h500 = _source37.dtor_optType;
                          Std.Wrappers._IOption<RAST._IExpr> _1095___mcc_h501 = _source37.dtor_optRhs;
                          return _882_default;
                        } else if (_source37.is_AssignVar) {
                          Dafny.ISequence<Dafny.Rune> _1096___mcc_h506 = _source37.dtor_name;
                          RAST._IExpr _1097___mcc_h507 = _source37.dtor_rhs;
                          return _882_default;
                        } else if (_source37.is_IfExpr) {
                          RAST._IExpr _1098___mcc_h510 = _source37.dtor_cond;
                          RAST._IExpr _1099___mcc_h511 = _source37.dtor_thn;
                          RAST._IExpr _1100___mcc_h512 = _source37.dtor_els;
                          return _882_default;
                        } else if (_source37.is_Loop) {
                          Std.Wrappers._IOption<RAST._IExpr> _1101___mcc_h516 = _source37.dtor_optCond;
                          RAST._IExpr _1102___mcc_h517 = _source37.dtor_underlying;
                          return _882_default;
                        } else if (_source37.is_For) {
                          Dafny.ISequence<Dafny.Rune> _1103___mcc_h520 = _source37.dtor_name;
                          RAST._IExpr _1104___mcc_h521 = _source37.dtor_range;
                          RAST._IExpr _1105___mcc_h522 = _source37.dtor_body;
                          return _882_default;
                        } else if (_source37.is_Labelled) {
                          Dafny.ISequence<Dafny.Rune> _1106___mcc_h526 = _source37.dtor_lbl;
                          RAST._IExpr _1107___mcc_h527 = _source37.dtor_underlying;
                          return _882_default;
                        } else if (_source37.is_Break) {
                          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1108___mcc_h530 = _source37.dtor_optLbl;
                          return _882_default;
                        } else if (_source37.is_Continue) {
                          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1109___mcc_h532 = _source37.dtor_optLbl;
                          return _882_default;
                        } else if (_source37.is_Return) {
                          Std.Wrappers._IOption<RAST._IExpr> _1110___mcc_h534 = _source37.dtor_optExpr;
                          return _882_default;
                        } else if (_source37.is_CallType) {
                          RAST._IExpr _1111___mcc_h536 = _source37.dtor_obj;
                          Dafny.ISequence<RAST._IType> _1112___mcc_h537 = _source37.dtor_typeParameters;
                          return _882_default;
                        } else if (_source37.is_Call) {
                          RAST._IExpr _1113___mcc_h540 = _source37.dtor_obj;
                          Dafny.ISequence<RAST._IExpr> _1114___mcc_h541 = _source37.dtor_arguments;
                          return _882_default;
                        } else if (_source37.is_Select) {
                          RAST._IExpr _1115___mcc_h544 = _source37.dtor_obj;
                          Dafny.ISequence<Dafny.Rune> _1116___mcc_h545 = _source37.dtor_name;
                          return _882_default;
                        } else {
                          RAST._IExpr _1117___mcc_h548 = _source37.dtor_obj;
                          Dafny.ISequence<Dafny.Rune> _1118___mcc_h549 = _source37.dtor_name;
                          return _882_default;
                        }
                      } else {
                        return _882_default;
                      }
                    } else if (_source36.is_Identifier) {
                      Dafny.ISequence<Dafny.Rune> _1119___mcc_h552 = _source36.dtor_name;
                      return _882_default;
                    } else if (_source36.is_Match) {
                      RAST._IExpr _1120___mcc_h554 = _source36.dtor_matchee;
                      Dafny.ISequence<RAST._IMatchCase> _1121___mcc_h555 = _source36.dtor_cases;
                      return _882_default;
                    } else if (_source36.is_StmtExpr) {
                      RAST._IExpr _1122___mcc_h558 = _source36.dtor_stmt;
                      RAST._IExpr _1123___mcc_h559 = _source36.dtor_rhs;
                      return _882_default;
                    } else if (_source36.is_Block) {
                      RAST._IExpr _1124___mcc_h562 = _source36.dtor_underlying;
                      return _882_default;
                    } else if (_source36.is_StructBuild) {
                      RAST._IExpr _1125___mcc_h564 = _source36.dtor_underlying;
                      Dafny.ISequence<RAST._IAssignIdentifier> _1126___mcc_h565 = _source36.dtor_assignments;
                      return _882_default;
                    } else if (_source36.is_Tuple) {
                      Dafny.ISequence<RAST._IExpr> _1127___mcc_h568 = _source36.dtor_arguments;
                      return _882_default;
                    } else if (_source36.is_UnaryOp) {
                      Dafny.ISequence<Dafny.Rune> _1128___mcc_h570 = _source36.dtor_op1;
                      RAST._IExpr _1129___mcc_h571 = _source36.dtor_underlying;
                      DAST.Format._IUnOpFormat _1130___mcc_h572 = _source36.dtor_format;
                      return _882_default;
                    } else if (_source36.is_BinaryOp) {
                      Dafny.ISequence<Dafny.Rune> _1131___mcc_h576 = _source36.dtor_op2;
                      RAST._IExpr _1132___mcc_h577 = _source36.dtor_left;
                      RAST._IExpr _1133___mcc_h578 = _source36.dtor_right;
                      DAST.Format._IBinOpFormat _1134___mcc_h579 = _source36.dtor_format2;
                      return _882_default;
                    } else if (_source36.is_TypeAscription) {
                      RAST._IExpr _1135___mcc_h584 = _source36.dtor_left;
                      RAST._IType _1136___mcc_h585 = _source36.dtor_tpe;
                      return _882_default;
                    } else if (_source36.is_LiteralInt) {
                      Dafny.ISequence<Dafny.Rune> _1137___mcc_h588 = _source36.dtor_value;
                      return _882_default;
                    } else if (_source36.is_LiteralString) {
                      Dafny.ISequence<Dafny.Rune> _1138___mcc_h590 = _source36.dtor_value;
                      bool _1139___mcc_h591 = _source36.dtor_binary;
                      return _882_default;
                    } else if (_source36.is_ConversionNum) {
                      RAST._IType _1140___mcc_h594 = _source36.dtor_tpe;
                      RAST._IExpr _1141___mcc_h595 = _source36.dtor_underlying;
                      return _882_default;
                    } else if (_source36.is_DeclareVar) {
                      RAST._IDeclareType _1142___mcc_h598 = _source36.dtor_declareType;
                      Dafny.ISequence<Dafny.Rune> _1143___mcc_h599 = _source36.dtor_name;
                      Std.Wrappers._IOption<RAST._IType> _1144___mcc_h600 = _source36.dtor_optType;
                      Std.Wrappers._IOption<RAST._IExpr> _1145___mcc_h601 = _source36.dtor_optRhs;
                      return _882_default;
                    } else if (_source36.is_AssignVar) {
                      Dafny.ISequence<Dafny.Rune> _1146___mcc_h606 = _source36.dtor_name;
                      RAST._IExpr _1147___mcc_h607 = _source36.dtor_rhs;
                      return _882_default;
                    } else if (_source36.is_IfExpr) {
                      RAST._IExpr _1148___mcc_h610 = _source36.dtor_cond;
                      RAST._IExpr _1149___mcc_h611 = _source36.dtor_thn;
                      RAST._IExpr _1150___mcc_h612 = _source36.dtor_els;
                      return _882_default;
                    } else if (_source36.is_Loop) {
                      Std.Wrappers._IOption<RAST._IExpr> _1151___mcc_h616 = _source36.dtor_optCond;
                      RAST._IExpr _1152___mcc_h617 = _source36.dtor_underlying;
                      return _882_default;
                    } else if (_source36.is_For) {
                      Dafny.ISequence<Dafny.Rune> _1153___mcc_h620 = _source36.dtor_name;
                      RAST._IExpr _1154___mcc_h621 = _source36.dtor_range;
                      RAST._IExpr _1155___mcc_h622 = _source36.dtor_body;
                      return _882_default;
                    } else if (_source36.is_Labelled) {
                      Dafny.ISequence<Dafny.Rune> _1156___mcc_h626 = _source36.dtor_lbl;
                      RAST._IExpr _1157___mcc_h627 = _source36.dtor_underlying;
                      return _882_default;
                    } else if (_source36.is_Break) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1158___mcc_h630 = _source36.dtor_optLbl;
                      return _882_default;
                    } else if (_source36.is_Continue) {
                      Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1159___mcc_h632 = _source36.dtor_optLbl;
                      return _882_default;
                    } else if (_source36.is_Return) {
                      Std.Wrappers._IOption<RAST._IExpr> _1160___mcc_h634 = _source36.dtor_optExpr;
                      return _882_default;
                    } else if (_source36.is_CallType) {
                      RAST._IExpr _1161___mcc_h636 = _source36.dtor_obj;
                      Dafny.ISequence<RAST._IType> _1162___mcc_h637 = _source36.dtor_typeParameters;
                      return _882_default;
                    } else if (_source36.is_Call) {
                      RAST._IExpr _1163___mcc_h640 = _source36.dtor_obj;
                      Dafny.ISequence<RAST._IExpr> _1164___mcc_h641 = _source36.dtor_arguments;
                      return _882_default;
                    } else if (_source36.is_Select) {
                      RAST._IExpr _1165___mcc_h644 = _source36.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _1166___mcc_h645 = _source36.dtor_name;
                      return _882_default;
                    } else {
                      RAST._IExpr _1167___mcc_h648 = _source36.dtor_obj;
                      Dafny.ISequence<Dafny.Rune> _1168___mcc_h649 = _source36.dtor_name;
                      return _882_default;
                    }
                  } else {
                    return _882_default;
                  }
                } else if (_source35.is_TypeAscription) {
                  RAST._IExpr _1169___mcc_h652 = _source35.dtor_left;
                  RAST._IType _1170___mcc_h653 = _source35.dtor_tpe;
                  return _882_default;
                } else if (_source35.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1171___mcc_h656 = _source35.dtor_value;
                  return _882_default;
                } else if (_source35.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1172___mcc_h658 = _source35.dtor_value;
                  bool _1173___mcc_h659 = _source35.dtor_binary;
                  return _882_default;
                } else if (_source35.is_ConversionNum) {
                  RAST._IType _1174___mcc_h662 = _source35.dtor_tpe;
                  RAST._IExpr _1175___mcc_h663 = _source35.dtor_underlying;
                  return _882_default;
                } else if (_source35.is_DeclareVar) {
                  RAST._IDeclareType _1176___mcc_h666 = _source35.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1177___mcc_h667 = _source35.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1178___mcc_h668 = _source35.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1179___mcc_h669 = _source35.dtor_optRhs;
                  return _882_default;
                } else if (_source35.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1180___mcc_h674 = _source35.dtor_name;
                  RAST._IExpr _1181___mcc_h675 = _source35.dtor_rhs;
                  return _882_default;
                } else if (_source35.is_IfExpr) {
                  RAST._IExpr _1182___mcc_h678 = _source35.dtor_cond;
                  RAST._IExpr _1183___mcc_h679 = _source35.dtor_thn;
                  RAST._IExpr _1184___mcc_h680 = _source35.dtor_els;
                  return _882_default;
                } else if (_source35.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1185___mcc_h684 = _source35.dtor_optCond;
                  RAST._IExpr _1186___mcc_h685 = _source35.dtor_underlying;
                  return _882_default;
                } else if (_source35.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1187___mcc_h688 = _source35.dtor_name;
                  RAST._IExpr _1188___mcc_h689 = _source35.dtor_range;
                  RAST._IExpr _1189___mcc_h690 = _source35.dtor_body;
                  return _882_default;
                } else if (_source35.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1190___mcc_h694 = _source35.dtor_lbl;
                  RAST._IExpr _1191___mcc_h695 = _source35.dtor_underlying;
                  return _882_default;
                } else if (_source35.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1192___mcc_h698 = _source35.dtor_optLbl;
                  return _882_default;
                } else if (_source35.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1193___mcc_h700 = _source35.dtor_optLbl;
                  return _882_default;
                } else if (_source35.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1194___mcc_h702 = _source35.dtor_optExpr;
                  return _882_default;
                } else if (_source35.is_CallType) {
                  RAST._IExpr _1195___mcc_h704 = _source35.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1196___mcc_h705 = _source35.dtor_typeParameters;
                  return _882_default;
                } else if (_source35.is_Call) {
                  RAST._IExpr _1197___mcc_h708 = _source35.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1198___mcc_h709 = _source35.dtor_arguments;
                  return _882_default;
                } else if (_source35.is_Select) {
                  RAST._IExpr _1199___mcc_h712 = _source35.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1200___mcc_h713 = _source35.dtor_name;
                  return _882_default;
                } else {
                  RAST._IExpr _1201___mcc_h716 = _source35.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1202___mcc_h717 = _source35.dtor_name;
                  return _882_default;
                }
              } else {
                return _882_default;
              }
            } else if (_source34.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1203___mcc_h720 = _source34.dtor_op2;
              RAST._IExpr _1204___mcc_h721 = _source34.dtor_left;
              RAST._IExpr _1205___mcc_h722 = _source34.dtor_right;
              DAST.Format._IBinOpFormat _1206___mcc_h723 = _source34.dtor_format2;
              return _882_default;
            } else if (_source34.is_TypeAscription) {
              RAST._IExpr _1207___mcc_h728 = _source34.dtor_left;
              RAST._IType _1208___mcc_h729 = _source34.dtor_tpe;
              return _882_default;
            } else if (_source34.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1209___mcc_h732 = _source34.dtor_value;
              return _882_default;
            } else if (_source34.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1210___mcc_h734 = _source34.dtor_value;
              bool _1211___mcc_h735 = _source34.dtor_binary;
              return _882_default;
            } else if (_source34.is_ConversionNum) {
              RAST._IType _1212___mcc_h738 = _source34.dtor_tpe;
              RAST._IExpr _1213___mcc_h739 = _source34.dtor_underlying;
              return _882_default;
            } else if (_source34.is_DeclareVar) {
              RAST._IDeclareType _1214___mcc_h742 = _source34.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1215___mcc_h743 = _source34.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1216___mcc_h744 = _source34.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1217___mcc_h745 = _source34.dtor_optRhs;
              return _882_default;
            } else if (_source34.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1218___mcc_h750 = _source34.dtor_name;
              RAST._IExpr _1219___mcc_h751 = _source34.dtor_rhs;
              return _882_default;
            } else if (_source34.is_IfExpr) {
              RAST._IExpr _1220___mcc_h754 = _source34.dtor_cond;
              RAST._IExpr _1221___mcc_h755 = _source34.dtor_thn;
              RAST._IExpr _1222___mcc_h756 = _source34.dtor_els;
              return _882_default;
            } else if (_source34.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1223___mcc_h760 = _source34.dtor_optCond;
              RAST._IExpr _1224___mcc_h761 = _source34.dtor_underlying;
              return _882_default;
            } else if (_source34.is_For) {
              Dafny.ISequence<Dafny.Rune> _1225___mcc_h764 = _source34.dtor_name;
              RAST._IExpr _1226___mcc_h765 = _source34.dtor_range;
              RAST._IExpr _1227___mcc_h766 = _source34.dtor_body;
              return _882_default;
            } else if (_source34.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1228___mcc_h770 = _source34.dtor_lbl;
              RAST._IExpr _1229___mcc_h771 = _source34.dtor_underlying;
              return _882_default;
            } else if (_source34.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1230___mcc_h774 = _source34.dtor_optLbl;
              return _882_default;
            } else if (_source34.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1231___mcc_h776 = _source34.dtor_optLbl;
              return _882_default;
            } else if (_source34.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1232___mcc_h778 = _source34.dtor_optExpr;
              return _882_default;
            } else if (_source34.is_CallType) {
              RAST._IExpr _1233___mcc_h780 = _source34.dtor_obj;
              Dafny.ISequence<RAST._IType> _1234___mcc_h781 = _source34.dtor_typeParameters;
              return _882_default;
            } else if (_source34.is_Call) {
              RAST._IExpr _1235___mcc_h784 = _source34.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _1236___mcc_h785 = _source34.dtor_arguments;
              return _882_default;
            } else if (_source34.is_Select) {
              RAST._IExpr _1237___mcc_h788 = _source34.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1238___mcc_h789 = _source34.dtor_name;
              return _882_default;
            } else {
              RAST._IExpr _1239___mcc_h792 = _source34.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1240___mcc_h793 = _source34.dtor_name;
              return _882_default;
            }
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1241___mcc_h796 = _source29.dtor_optCond;
            RAST._IExpr _1242___mcc_h797 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1243___mcc_h800 = _source29.dtor_name;
            RAST._IExpr _1244___mcc_h801 = _source29.dtor_range;
            RAST._IExpr _1245___mcc_h802 = _source29.dtor_body;
            return _882_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1246___mcc_h806 = _source29.dtor_lbl;
            RAST._IExpr _1247___mcc_h807 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1248___mcc_h810 = _source29.dtor_optLbl;
            return _882_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1249___mcc_h812 = _source29.dtor_optLbl;
            return _882_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1250___mcc_h814 = _source29.dtor_optExpr;
            return _882_default;
          } else if (_source29.is_CallType) {
            RAST._IExpr _1251___mcc_h816 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1252___mcc_h817 = _source29.dtor_typeParameters;
            return _882_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1253___mcc_h820 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1254___mcc_h821 = _source29.dtor_arguments;
            return _882_default;
          } else if (_source29.is_Select) {
            RAST._IExpr _1255___mcc_h824 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1256___mcc_h825 = _source29.dtor_name;
            return _882_default;
          } else {
            RAST._IExpr _1257___mcc_h828 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1258___mcc_h829 = _source29.dtor_name;
            return _882_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1259___mcc_h832 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_StructBuild) {
          RAST._IExpr _1260___mcc_h834 = _source28.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1261___mcc_h835 = _source28.dtor_assignments;
          return _882_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1262___mcc_h838 = _source28.dtor_arguments;
          return _882_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1263___mcc_h840 = _source28.dtor_op1;
          RAST._IExpr _1264___mcc_h841 = _source28.dtor_underlying;
          DAST.Format._IUnOpFormat _1265___mcc_h842 = _source28.dtor_format;
          return _882_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1266___mcc_h846 = _source28.dtor_op2;
          RAST._IExpr _1267___mcc_h847 = _source28.dtor_left;
          RAST._IExpr _1268___mcc_h848 = _source28.dtor_right;
          DAST.Format._IBinOpFormat _1269___mcc_h849 = _source28.dtor_format2;
          return _882_default;
        } else if (_source28.is_TypeAscription) {
          RAST._IExpr _1270___mcc_h854 = _source28.dtor_left;
          RAST._IType _1271___mcc_h855 = _source28.dtor_tpe;
          return _882_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1272___mcc_h858 = _source28.dtor_value;
          return _882_default;
        } else if (_source28.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1273___mcc_h860 = _source28.dtor_value;
          bool _1274___mcc_h861 = _source28.dtor_binary;
          return _882_default;
        } else if (_source28.is_ConversionNum) {
          RAST._IType _1275___mcc_h864 = _source28.dtor_tpe;
          RAST._IExpr _1276___mcc_h865 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1277___mcc_h868 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1278___mcc_h869 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1279___mcc_h870 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1280___mcc_h871 = _source28.dtor_optRhs;
          return _882_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1281___mcc_h876 = _source28.dtor_name;
          RAST._IExpr _1282___mcc_h877 = _source28.dtor_rhs;
          return _882_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1283___mcc_h880 = _source28.dtor_cond;
          RAST._IExpr _1284___mcc_h881 = _source28.dtor_thn;
          RAST._IExpr _1285___mcc_h882 = _source28.dtor_els;
          return _882_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1286___mcc_h886 = _source28.dtor_optCond;
          RAST._IExpr _1287___mcc_h887 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1288___mcc_h890 = _source28.dtor_name;
          RAST._IExpr _1289___mcc_h891 = _source28.dtor_range;
          RAST._IExpr _1290___mcc_h892 = _source28.dtor_body;
          return _882_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1291___mcc_h896 = _source28.dtor_lbl;
          RAST._IExpr _1292___mcc_h897 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1293___mcc_h900 = _source28.dtor_optLbl;
          return _882_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1294___mcc_h902 = _source28.dtor_optLbl;
          return _882_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1295___mcc_h904 = _source28.dtor_optExpr;
          return _882_default;
        } else if (_source28.is_CallType) {
          RAST._IExpr _1296___mcc_h906 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1297___mcc_h907 = _source28.dtor_typeParameters;
          return _882_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1298___mcc_h910 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1299___mcc_h911 = _source28.dtor_arguments;
          return _882_default;
        } else if (_source28.is_Select) {
          RAST._IExpr _1300___mcc_h914 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1301___mcc_h915 = _source28.dtor_name;
          return _882_default;
        } else {
          RAST._IExpr _1302___mcc_h918 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1303___mcc_h919 = _source28.dtor_name;
          return _882_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1304___mcc_h12 = _source27.dtor_underlying;
        RAST._IExpr _1305_underlying = _1304___mcc_h12;
        return (BigInteger.One) + ((_1305_underlying).Height());
      } else if (_source27.is_StructBuild) {
        RAST._IExpr _1306___mcc_h14 = _source27.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1307___mcc_h15 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1308_assignments = _1307___mcc_h15;
        RAST._IExpr _1309_name = _1306___mcc_h14;
        return (BigInteger.One) + (RAST.__default.max((_1309_name).Height(), RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1308_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1310_assignment) => {
          return (_1310_assignment).Height();
        })))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1311___mcc_h18 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1312_arguments = _1311___mcc_h18;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1312_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1313_argument) => {
          return (_1313_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1314___mcc_h20 = _source27.dtor_op1;
        RAST._IExpr _1315___mcc_h21 = _source27.dtor_underlying;
        DAST.Format._IUnOpFormat _1316___mcc_h22 = _source27.dtor_format;
        RAST._IExpr _1317_underlying = _1315___mcc_h21;
        return (BigInteger.One) + ((_1317_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1318___mcc_h26 = _source27.dtor_op2;
        RAST._IExpr _1319___mcc_h27 = _source27.dtor_left;
        RAST._IExpr _1320___mcc_h28 = _source27.dtor_right;
        DAST.Format._IBinOpFormat _1321___mcc_h29 = _source27.dtor_format2;
        DAST.Format._IBinOpFormat _1322_format = _1321___mcc_h29;
        RAST._IExpr _1323_right = _1320___mcc_h28;
        RAST._IExpr _1324_left = _1319___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1325_op = _1318___mcc_h26;
        return (BigInteger.One) + (RAST.__default.max((_1324_left).Height(), (_1323_right).Height()));
      } else if (_source27.is_TypeAscription) {
        RAST._IExpr _1326___mcc_h34 = _source27.dtor_left;
        RAST._IType _1327___mcc_h35 = _source27.dtor_tpe;
        RAST._IType _1328_tpe = _1327___mcc_h35;
        RAST._IExpr _1329_left = _1326___mcc_h34;
        return (BigInteger.One) + ((_1329_left).Height());
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1330___mcc_h38 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1331___mcc_h40 = _source27.dtor_value;
        bool _1332___mcc_h41 = _source27.dtor_binary;
        return BigInteger.One;
      } else if (_source27.is_ConversionNum) {
        RAST._IType _1333___mcc_h44 = _source27.dtor_tpe;
        RAST._IExpr _1334___mcc_h45 = _source27.dtor_underlying;
        RAST._IExpr _1335_underlying = _1334___mcc_h45;
        return (BigInteger.One) + ((_1335_underlying).Height());
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1336___mcc_h48 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1337___mcc_h49 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1338___mcc_h50 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1339___mcc_h51 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1340_expr = _1339___mcc_h51;
        Std.Wrappers._IOption<RAST._IType> _1341_tpe = _1338___mcc_h50;
        Dafny.ISequence<Dafny.Rune> _1342_name = _1337___mcc_h49;
        RAST._IDeclareType _1343_declareType = _1336___mcc_h48;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source38) => {
          if (_source38.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1344___mcc_h922 = _source38.dtor_value;
            RAST._IExpr _1345_e = _1344___mcc_h922;
            return (_1345_e).Height();
          }
        }))(_1340_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1346___mcc_h56 = _source27.dtor_name;
        RAST._IExpr _1347___mcc_h57 = _source27.dtor_rhs;
        RAST._IExpr _1348_expr = _1347___mcc_h57;
        Dafny.ISequence<Dafny.Rune> _1349_name = _1346___mcc_h56;
        return (BigInteger.One) + ((_1348_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1350___mcc_h60 = _source27.dtor_cond;
        RAST._IExpr _1351___mcc_h61 = _source27.dtor_thn;
        RAST._IExpr _1352___mcc_h62 = _source27.dtor_els;
        RAST._IExpr _1353_els = _1352___mcc_h62;
        RAST._IExpr _1354_thn = _1351___mcc_h61;
        RAST._IExpr _1355_cond = _1350___mcc_h60;
        return (BigInteger.One) + (RAST.__default.max((_1355_cond).Height(), RAST.__default.max((_1354_thn).Height(), (_1353_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1356___mcc_h66 = _source27.dtor_optCond;
        RAST._IExpr _1357___mcc_h67 = _source27.dtor_underlying;
        RAST._IExpr _1358_underlying = _1357___mcc_h67;
        Std.Wrappers._IOption<RAST._IExpr> _1359_optCond = _1356___mcc_h66;
        return (BigInteger.One) + ((((_1359_optCond).is_Some) ? (RAST.__default.max(((_1359_optCond).dtor_value).Height(), (_1358_underlying).Height())) : ((_1358_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1360___mcc_h70 = _source27.dtor_name;
        RAST._IExpr _1361___mcc_h71 = _source27.dtor_range;
        RAST._IExpr _1362___mcc_h72 = _source27.dtor_body;
        RAST._IExpr _1363_body = _1362___mcc_h72;
        RAST._IExpr _1364_range = _1361___mcc_h71;
        Dafny.ISequence<Dafny.Rune> _1365_name = _1360___mcc_h70;
        return (BigInteger.One) + (RAST.__default.max((_1364_range).Height(), (_1363_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1366___mcc_h76 = _source27.dtor_lbl;
        RAST._IExpr _1367___mcc_h77 = _source27.dtor_underlying;
        RAST._IExpr _1368_underlying = _1367___mcc_h77;
        Dafny.ISequence<Dafny.Rune> _1369_lbl = _1366___mcc_h76;
        return (BigInteger.One) + ((_1368_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1370___mcc_h80 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1371___mcc_h82 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1372___mcc_h84 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1373_optExpr = _1372___mcc_h84;
        if ((_1373_optExpr).is_Some) {
          return (BigInteger.One) + (((_1373_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_CallType) {
        RAST._IExpr _1374___mcc_h86 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1375___mcc_h87 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IType> _1376_tpes = _1375___mcc_h87;
        RAST._IExpr _1377_obj = _1374___mcc_h86;
        return (BigInteger.One) + (RAST.__default.max((_1377_obj).Height(), RAST.__default.SeqToHeight<RAST._IType>(_1376_tpes, ((System.Func<RAST._IType, BigInteger>)((_1378_tpe) => {
          return BigInteger.One;
        })))));
      } else if (_source27.is_Call) {
        RAST._IExpr _1379___mcc_h90 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _1380___mcc_h91 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1381_args = _1380___mcc_h91;
        RAST._IExpr _1382_obj = _1379___mcc_h90;
        return (BigInteger.One) + (RAST.__default.max((_1382_obj).Height(), RAST.__default.SeqToHeight<RAST._IExpr>(_1381_args, ((System.Func<RAST._IExpr, BigInteger>)((_1383_arg) => {
          return (_1383_arg).Height();
        })))));
      } else if (_source27.is_Select) {
        RAST._IExpr _1384___mcc_h94 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1385___mcc_h95 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1386_name = _1385___mcc_h95;
        RAST._IExpr _1387_expression = _1384___mcc_h94;
        return (BigInteger.One) + ((_1387_expression).Height());
      } else {
        RAST._IExpr _1388___mcc_h98 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1389___mcc_h99 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1390_name = _1389___mcc_h99;
        RAST._IExpr _1391_expression = _1388___mcc_h98;
        return (BigInteger.One) + ((_1391_expression).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source39 = this;
      if (_source39.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1392___mcc_h0 = _source39.dtor_content;
        return this;
      } else if (_source39.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1393___mcc_h2 = _source39.dtor_name;
        return this;
      } else if (_source39.is_Match) {
        RAST._IExpr _1394___mcc_h4 = _source39.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1395___mcc_h5 = _source39.dtor_cases;
        return this;
      } else if (_source39.is_StmtExpr) {
        RAST._IExpr _1396___mcc_h8 = _source39.dtor_stmt;
        RAST._IExpr _1397___mcc_h9 = _source39.dtor_rhs;
        RAST._IExpr _source40 = _1396___mcc_h8;
        if (_source40.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1398___mcc_h12 = _source40.dtor_content;
          return this;
        } else if (_source40.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1399___mcc_h14 = _source40.dtor_name;
          return this;
        } else if (_source40.is_Match) {
          RAST._IExpr _1400___mcc_h16 = _source40.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1401___mcc_h17 = _source40.dtor_cases;
          return this;
        } else if (_source40.is_StmtExpr) {
          RAST._IExpr _1402___mcc_h20 = _source40.dtor_stmt;
          RAST._IExpr _1403___mcc_h21 = _source40.dtor_rhs;
          return this;
        } else if (_source40.is_Block) {
          RAST._IExpr _1404___mcc_h24 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_StructBuild) {
          RAST._IExpr _1405___mcc_h26 = _source40.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1406___mcc_h27 = _source40.dtor_assignments;
          return this;
        } else if (_source40.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1407___mcc_h30 = _source40.dtor_arguments;
          return this;
        } else if (_source40.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1408___mcc_h32 = _source40.dtor_op1;
          RAST._IExpr _1409___mcc_h33 = _source40.dtor_underlying;
          DAST.Format._IUnOpFormat _1410___mcc_h34 = _source40.dtor_format;
          return this;
        } else if (_source40.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1411___mcc_h38 = _source40.dtor_op2;
          RAST._IExpr _1412___mcc_h39 = _source40.dtor_left;
          RAST._IExpr _1413___mcc_h40 = _source40.dtor_right;
          DAST.Format._IBinOpFormat _1414___mcc_h41 = _source40.dtor_format2;
          return this;
        } else if (_source40.is_TypeAscription) {
          RAST._IExpr _1415___mcc_h46 = _source40.dtor_left;
          RAST._IType _1416___mcc_h47 = _source40.dtor_tpe;
          return this;
        } else if (_source40.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1417___mcc_h50 = _source40.dtor_value;
          return this;
        } else if (_source40.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1418___mcc_h52 = _source40.dtor_value;
          bool _1419___mcc_h53 = _source40.dtor_binary;
          return this;
        } else if (_source40.is_ConversionNum) {
          RAST._IType _1420___mcc_h56 = _source40.dtor_tpe;
          RAST._IExpr _1421___mcc_h57 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_DeclareVar) {
          RAST._IDeclareType _1422___mcc_h60 = _source40.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1423___mcc_h61 = _source40.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1424___mcc_h62 = _source40.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1425___mcc_h63 = _source40.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source41 = _1424___mcc_h62;
          if (_source41.is_None) {
            return this;
          } else {
            RAST._IType _1426___mcc_h68 = _source41.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source42 = _1425___mcc_h63;
            if (_source42.is_None) {
              RAST._IExpr _source43 = _1397___mcc_h9;
              if (_source43.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1427___mcc_h70 = _source43.dtor_content;
                return this;
              } else if (_source43.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1428___mcc_h72 = _source43.dtor_name;
                return this;
              } else if (_source43.is_Match) {
                RAST._IExpr _1429___mcc_h74 = _source43.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1430___mcc_h75 = _source43.dtor_cases;
                return this;
              } else if (_source43.is_StmtExpr) {
                RAST._IExpr _1431___mcc_h78 = _source43.dtor_stmt;
                RAST._IExpr _1432___mcc_h79 = _source43.dtor_rhs;
                RAST._IExpr _source44 = _1431___mcc_h78;
                if (_source44.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1433___mcc_h82 = _source44.dtor_content;
                  return this;
                } else if (_source44.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1434___mcc_h84 = _source44.dtor_name;
                  return this;
                } else if (_source44.is_Match) {
                  RAST._IExpr _1435___mcc_h86 = _source44.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1436___mcc_h87 = _source44.dtor_cases;
                  return this;
                } else if (_source44.is_StmtExpr) {
                  RAST._IExpr _1437___mcc_h90 = _source44.dtor_stmt;
                  RAST._IExpr _1438___mcc_h91 = _source44.dtor_rhs;
                  return this;
                } else if (_source44.is_Block) {
                  RAST._IExpr _1439___mcc_h94 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_StructBuild) {
                  RAST._IExpr _1440___mcc_h96 = _source44.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1441___mcc_h97 = _source44.dtor_assignments;
                  return this;
                } else if (_source44.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1442___mcc_h100 = _source44.dtor_arguments;
                  return this;
                } else if (_source44.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1443___mcc_h102 = _source44.dtor_op1;
                  RAST._IExpr _1444___mcc_h103 = _source44.dtor_underlying;
                  DAST.Format._IUnOpFormat _1445___mcc_h104 = _source44.dtor_format;
                  return this;
                } else if (_source44.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1446___mcc_h108 = _source44.dtor_op2;
                  RAST._IExpr _1447___mcc_h109 = _source44.dtor_left;
                  RAST._IExpr _1448___mcc_h110 = _source44.dtor_right;
                  DAST.Format._IBinOpFormat _1449___mcc_h111 = _source44.dtor_format2;
                  return this;
                } else if (_source44.is_TypeAscription) {
                  RAST._IExpr _1450___mcc_h116 = _source44.dtor_left;
                  RAST._IType _1451___mcc_h117 = _source44.dtor_tpe;
                  return this;
                } else if (_source44.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1452___mcc_h120 = _source44.dtor_value;
                  return this;
                } else if (_source44.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1453___mcc_h122 = _source44.dtor_value;
                  bool _1454___mcc_h123 = _source44.dtor_binary;
                  return this;
                } else if (_source44.is_ConversionNum) {
                  RAST._IType _1455___mcc_h126 = _source44.dtor_tpe;
                  RAST._IExpr _1456___mcc_h127 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_DeclareVar) {
                  RAST._IDeclareType _1457___mcc_h130 = _source44.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1458___mcc_h131 = _source44.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1459___mcc_h132 = _source44.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1460___mcc_h133 = _source44.dtor_optRhs;
                  return this;
                } else if (_source44.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1461___mcc_h138 = _source44.dtor_name;
                  RAST._IExpr _1462___mcc_h139 = _source44.dtor_rhs;
                  RAST._IExpr _1463_last = _1432___mcc_h79;
                  RAST._IExpr _1464_rhs = _1462___mcc_h139;
                  Dafny.ISequence<Dafny.Rune> _1465_name2 = _1461___mcc_h138;
                  RAST._IType _1466_tpe = _1426___mcc_h68;
                  Dafny.ISequence<Dafny.Rune> _1467_name = _1423___mcc_h61;
                  RAST._IDeclareType _1468_mod = _1422___mcc_h60;
                  if ((_1467_name).Equals(_1465_name2)) {
                    RAST._IExpr _1469_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1468_mod, _1467_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1466_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1464_rhs)), _1463_last);
                    return _1469_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source44.is_IfExpr) {
                  RAST._IExpr _1470___mcc_h142 = _source44.dtor_cond;
                  RAST._IExpr _1471___mcc_h143 = _source44.dtor_thn;
                  RAST._IExpr _1472___mcc_h144 = _source44.dtor_els;
                  return this;
                } else if (_source44.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1473___mcc_h148 = _source44.dtor_optCond;
                  RAST._IExpr _1474___mcc_h149 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1475___mcc_h152 = _source44.dtor_name;
                  RAST._IExpr _1476___mcc_h153 = _source44.dtor_range;
                  RAST._IExpr _1477___mcc_h154 = _source44.dtor_body;
                  return this;
                } else if (_source44.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1478___mcc_h158 = _source44.dtor_lbl;
                  RAST._IExpr _1479___mcc_h159 = _source44.dtor_underlying;
                  return this;
                } else if (_source44.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1480___mcc_h162 = _source44.dtor_optLbl;
                  return this;
                } else if (_source44.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1481___mcc_h164 = _source44.dtor_optLbl;
                  return this;
                } else if (_source44.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1482___mcc_h166 = _source44.dtor_optExpr;
                  return this;
                } else if (_source44.is_CallType) {
                  RAST._IExpr _1483___mcc_h168 = _source44.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1484___mcc_h169 = _source44.dtor_typeParameters;
                  return this;
                } else if (_source44.is_Call) {
                  RAST._IExpr _1485___mcc_h172 = _source44.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1486___mcc_h173 = _source44.dtor_arguments;
                  return this;
                } else if (_source44.is_Select) {
                  RAST._IExpr _1487___mcc_h176 = _source44.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1488___mcc_h177 = _source44.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1489___mcc_h180 = _source44.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1490___mcc_h181 = _source44.dtor_name;
                  return this;
                }
              } else if (_source43.is_Block) {
                RAST._IExpr _1491___mcc_h184 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_StructBuild) {
                RAST._IExpr _1492___mcc_h186 = _source43.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _1493___mcc_h187 = _source43.dtor_assignments;
                return this;
              } else if (_source43.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1494___mcc_h190 = _source43.dtor_arguments;
                return this;
              } else if (_source43.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1495___mcc_h192 = _source43.dtor_op1;
                RAST._IExpr _1496___mcc_h193 = _source43.dtor_underlying;
                DAST.Format._IUnOpFormat _1497___mcc_h194 = _source43.dtor_format;
                return this;
              } else if (_source43.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1498___mcc_h198 = _source43.dtor_op2;
                RAST._IExpr _1499___mcc_h199 = _source43.dtor_left;
                RAST._IExpr _1500___mcc_h200 = _source43.dtor_right;
                DAST.Format._IBinOpFormat _1501___mcc_h201 = _source43.dtor_format2;
                return this;
              } else if (_source43.is_TypeAscription) {
                RAST._IExpr _1502___mcc_h206 = _source43.dtor_left;
                RAST._IType _1503___mcc_h207 = _source43.dtor_tpe;
                return this;
              } else if (_source43.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1504___mcc_h210 = _source43.dtor_value;
                return this;
              } else if (_source43.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1505___mcc_h212 = _source43.dtor_value;
                bool _1506___mcc_h213 = _source43.dtor_binary;
                return this;
              } else if (_source43.is_ConversionNum) {
                RAST._IType _1507___mcc_h216 = _source43.dtor_tpe;
                RAST._IExpr _1508___mcc_h217 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_DeclareVar) {
                RAST._IDeclareType _1509___mcc_h220 = _source43.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1510___mcc_h221 = _source43.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1511___mcc_h222 = _source43.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1512___mcc_h223 = _source43.dtor_optRhs;
                return this;
              } else if (_source43.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1513___mcc_h228 = _source43.dtor_name;
                RAST._IExpr _1514___mcc_h229 = _source43.dtor_rhs;
                return this;
              } else if (_source43.is_IfExpr) {
                RAST._IExpr _1515___mcc_h232 = _source43.dtor_cond;
                RAST._IExpr _1516___mcc_h233 = _source43.dtor_thn;
                RAST._IExpr _1517___mcc_h234 = _source43.dtor_els;
                return this;
              } else if (_source43.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1518___mcc_h238 = _source43.dtor_optCond;
                RAST._IExpr _1519___mcc_h239 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_For) {
                Dafny.ISequence<Dafny.Rune> _1520___mcc_h242 = _source43.dtor_name;
                RAST._IExpr _1521___mcc_h243 = _source43.dtor_range;
                RAST._IExpr _1522___mcc_h244 = _source43.dtor_body;
                return this;
              } else if (_source43.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1523___mcc_h248 = _source43.dtor_lbl;
                RAST._IExpr _1524___mcc_h249 = _source43.dtor_underlying;
                return this;
              } else if (_source43.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1525___mcc_h252 = _source43.dtor_optLbl;
                return this;
              } else if (_source43.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1526___mcc_h254 = _source43.dtor_optLbl;
                return this;
              } else if (_source43.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1527___mcc_h256 = _source43.dtor_optExpr;
                return this;
              } else if (_source43.is_CallType) {
                RAST._IExpr _1528___mcc_h258 = _source43.dtor_obj;
                Dafny.ISequence<RAST._IType> _1529___mcc_h259 = _source43.dtor_typeParameters;
                return this;
              } else if (_source43.is_Call) {
                RAST._IExpr _1530___mcc_h262 = _source43.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _1531___mcc_h263 = _source43.dtor_arguments;
                return this;
              } else if (_source43.is_Select) {
                RAST._IExpr _1532___mcc_h266 = _source43.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1533___mcc_h267 = _source43.dtor_name;
                return this;
              } else {
                RAST._IExpr _1534___mcc_h270 = _source43.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1535___mcc_h271 = _source43.dtor_name;
                return this;
              }
            } else {
              RAST._IExpr _1536___mcc_h274 = _source42.dtor_value;
              return this;
            }
          }
        } else if (_source40.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1537___mcc_h276 = _source40.dtor_name;
          RAST._IExpr _1538___mcc_h277 = _source40.dtor_rhs;
          return this;
        } else if (_source40.is_IfExpr) {
          RAST._IExpr _1539___mcc_h280 = _source40.dtor_cond;
          RAST._IExpr _1540___mcc_h281 = _source40.dtor_thn;
          RAST._IExpr _1541___mcc_h282 = _source40.dtor_els;
          RAST._IExpr _source45 = _1539___mcc_h280;
          if (_source45.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1542___mcc_h286 = _source45.dtor_content;
            return this;
          } else if (_source45.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1543___mcc_h288 = _source45.dtor_name;
            return this;
          } else if (_source45.is_Match) {
            RAST._IExpr _1544___mcc_h290 = _source45.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1545___mcc_h291 = _source45.dtor_cases;
            return this;
          } else if (_source45.is_StmtExpr) {
            RAST._IExpr _1546___mcc_h294 = _source45.dtor_stmt;
            RAST._IExpr _1547___mcc_h295 = _source45.dtor_rhs;
            return this;
          } else if (_source45.is_Block) {
            RAST._IExpr _1548___mcc_h298 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_StructBuild) {
            RAST._IExpr _1549___mcc_h300 = _source45.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1550___mcc_h301 = _source45.dtor_assignments;
            return this;
          } else if (_source45.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1551___mcc_h304 = _source45.dtor_arguments;
            return this;
          } else if (_source45.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1552___mcc_h306 = _source45.dtor_op1;
            RAST._IExpr _1553___mcc_h307 = _source45.dtor_underlying;
            DAST.Format._IUnOpFormat _1554___mcc_h308 = _source45.dtor_format;
            if (object.Equals(_1552___mcc_h306, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
              RAST._IExpr _source46 = _1553___mcc_h307;
              if (_source46.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1555___mcc_h312 = _source46.dtor_content;
                return this;
              } else if (_source46.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1556___mcc_h314 = _source46.dtor_name;
                return this;
              } else if (_source46.is_Match) {
                RAST._IExpr _1557___mcc_h316 = _source46.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1558___mcc_h317 = _source46.dtor_cases;
                return this;
              } else if (_source46.is_StmtExpr) {
                RAST._IExpr _1559___mcc_h320 = _source46.dtor_stmt;
                RAST._IExpr _1560___mcc_h321 = _source46.dtor_rhs;
                return this;
              } else if (_source46.is_Block) {
                RAST._IExpr _1561___mcc_h324 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_StructBuild) {
                RAST._IExpr _1562___mcc_h326 = _source46.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _1563___mcc_h327 = _source46.dtor_assignments;
                return this;
              } else if (_source46.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1564___mcc_h330 = _source46.dtor_arguments;
                return this;
              } else if (_source46.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1565___mcc_h332 = _source46.dtor_op1;
                RAST._IExpr _1566___mcc_h333 = _source46.dtor_underlying;
                DAST.Format._IUnOpFormat _1567___mcc_h334 = _source46.dtor_format;
                return this;
              } else if (_source46.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1568___mcc_h338 = _source46.dtor_op2;
                RAST._IExpr _1569___mcc_h339 = _source46.dtor_left;
                RAST._IExpr _1570___mcc_h340 = _source46.dtor_right;
                DAST.Format._IBinOpFormat _1571___mcc_h341 = _source46.dtor_format2;
                if (object.Equals(_1568___mcc_h338, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
                  RAST._IExpr _source47 = _1540___mcc_h281;
                  if (_source47.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _1572___mcc_h346 = _source47.dtor_content;
                    if (object.Equals(_1572___mcc_h346, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"))) {
                      RAST._IExpr _source48 = _1541___mcc_h282;
                      if (_source48.is_RawExpr) {
                        Dafny.ISequence<Dafny.Rune> _1573___mcc_h348 = _source48.dtor_content;
                        if (object.Equals(_1573___mcc_h348, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                          RAST._IExpr _1574_last = _1397___mcc_h9;
                          DAST.Format._IUnOpFormat _1575_of = _1554___mcc_h308;
                          DAST.Format._IBinOpFormat _1576_f = _1571___mcc_h341;
                          RAST._IExpr _1577_b = _1570___mcc_h340;
                          RAST._IExpr _1578_a = _1569___mcc_h339;
                          RAST._IExpr _1579_rewriting = RAST.Expr.create_StmtExpr((RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("assert_eq!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_1578_a, _1577_b)), _1574_last);
                          return _1579_rewriting;
                        } else {
                          return this;
                        }
                      } else if (_source48.is_Identifier) {
                        Dafny.ISequence<Dafny.Rune> _1580___mcc_h350 = _source48.dtor_name;
                        return this;
                      } else if (_source48.is_Match) {
                        RAST._IExpr _1581___mcc_h352 = _source48.dtor_matchee;
                        Dafny.ISequence<RAST._IMatchCase> _1582___mcc_h353 = _source48.dtor_cases;
                        return this;
                      } else if (_source48.is_StmtExpr) {
                        RAST._IExpr _1583___mcc_h356 = _source48.dtor_stmt;
                        RAST._IExpr _1584___mcc_h357 = _source48.dtor_rhs;
                        return this;
                      } else if (_source48.is_Block) {
                        RAST._IExpr _1585___mcc_h360 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_StructBuild) {
                        RAST._IExpr _1586___mcc_h362 = _source48.dtor_underlying;
                        Dafny.ISequence<RAST._IAssignIdentifier> _1587___mcc_h363 = _source48.dtor_assignments;
                        return this;
                      } else if (_source48.is_Tuple) {
                        Dafny.ISequence<RAST._IExpr> _1588___mcc_h366 = _source48.dtor_arguments;
                        return this;
                      } else if (_source48.is_UnaryOp) {
                        Dafny.ISequence<Dafny.Rune> _1589___mcc_h368 = _source48.dtor_op1;
                        RAST._IExpr _1590___mcc_h369 = _source48.dtor_underlying;
                        DAST.Format._IUnOpFormat _1591___mcc_h370 = _source48.dtor_format;
                        return this;
                      } else if (_source48.is_BinaryOp) {
                        Dafny.ISequence<Dafny.Rune> _1592___mcc_h374 = _source48.dtor_op2;
                        RAST._IExpr _1593___mcc_h375 = _source48.dtor_left;
                        RAST._IExpr _1594___mcc_h376 = _source48.dtor_right;
                        DAST.Format._IBinOpFormat _1595___mcc_h377 = _source48.dtor_format2;
                        return this;
                      } else if (_source48.is_TypeAscription) {
                        RAST._IExpr _1596___mcc_h382 = _source48.dtor_left;
                        RAST._IType _1597___mcc_h383 = _source48.dtor_tpe;
                        return this;
                      } else if (_source48.is_LiteralInt) {
                        Dafny.ISequence<Dafny.Rune> _1598___mcc_h386 = _source48.dtor_value;
                        return this;
                      } else if (_source48.is_LiteralString) {
                        Dafny.ISequence<Dafny.Rune> _1599___mcc_h388 = _source48.dtor_value;
                        bool _1600___mcc_h389 = _source48.dtor_binary;
                        return this;
                      } else if (_source48.is_ConversionNum) {
                        RAST._IType _1601___mcc_h392 = _source48.dtor_tpe;
                        RAST._IExpr _1602___mcc_h393 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_DeclareVar) {
                        RAST._IDeclareType _1603___mcc_h396 = _source48.dtor_declareType;
                        Dafny.ISequence<Dafny.Rune> _1604___mcc_h397 = _source48.dtor_name;
                        Std.Wrappers._IOption<RAST._IType> _1605___mcc_h398 = _source48.dtor_optType;
                        Std.Wrappers._IOption<RAST._IExpr> _1606___mcc_h399 = _source48.dtor_optRhs;
                        return this;
                      } else if (_source48.is_AssignVar) {
                        Dafny.ISequence<Dafny.Rune> _1607___mcc_h404 = _source48.dtor_name;
                        RAST._IExpr _1608___mcc_h405 = _source48.dtor_rhs;
                        return this;
                      } else if (_source48.is_IfExpr) {
                        RAST._IExpr _1609___mcc_h408 = _source48.dtor_cond;
                        RAST._IExpr _1610___mcc_h409 = _source48.dtor_thn;
                        RAST._IExpr _1611___mcc_h410 = _source48.dtor_els;
                        return this;
                      } else if (_source48.is_Loop) {
                        Std.Wrappers._IOption<RAST._IExpr> _1612___mcc_h414 = _source48.dtor_optCond;
                        RAST._IExpr _1613___mcc_h415 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_For) {
                        Dafny.ISequence<Dafny.Rune> _1614___mcc_h418 = _source48.dtor_name;
                        RAST._IExpr _1615___mcc_h419 = _source48.dtor_range;
                        RAST._IExpr _1616___mcc_h420 = _source48.dtor_body;
                        return this;
                      } else if (_source48.is_Labelled) {
                        Dafny.ISequence<Dafny.Rune> _1617___mcc_h424 = _source48.dtor_lbl;
                        RAST._IExpr _1618___mcc_h425 = _source48.dtor_underlying;
                        return this;
                      } else if (_source48.is_Break) {
                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1619___mcc_h428 = _source48.dtor_optLbl;
                        return this;
                      } else if (_source48.is_Continue) {
                        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1620___mcc_h430 = _source48.dtor_optLbl;
                        return this;
                      } else if (_source48.is_Return) {
                        Std.Wrappers._IOption<RAST._IExpr> _1621___mcc_h432 = _source48.dtor_optExpr;
                        return this;
                      } else if (_source48.is_CallType) {
                        RAST._IExpr _1622___mcc_h434 = _source48.dtor_obj;
                        Dafny.ISequence<RAST._IType> _1623___mcc_h435 = _source48.dtor_typeParameters;
                        return this;
                      } else if (_source48.is_Call) {
                        RAST._IExpr _1624___mcc_h438 = _source48.dtor_obj;
                        Dafny.ISequence<RAST._IExpr> _1625___mcc_h439 = _source48.dtor_arguments;
                        return this;
                      } else if (_source48.is_Select) {
                        RAST._IExpr _1626___mcc_h442 = _source48.dtor_obj;
                        Dafny.ISequence<Dafny.Rune> _1627___mcc_h443 = _source48.dtor_name;
                        return this;
                      } else {
                        RAST._IExpr _1628___mcc_h446 = _source48.dtor_obj;
                        Dafny.ISequence<Dafny.Rune> _1629___mcc_h447 = _source48.dtor_name;
                        return this;
                      }
                    } else {
                      return this;
                    }
                  } else if (_source47.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _1630___mcc_h450 = _source47.dtor_name;
                    return this;
                  } else if (_source47.is_Match) {
                    RAST._IExpr _1631___mcc_h452 = _source47.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _1632___mcc_h453 = _source47.dtor_cases;
                    return this;
                  } else if (_source47.is_StmtExpr) {
                    RAST._IExpr _1633___mcc_h456 = _source47.dtor_stmt;
                    RAST._IExpr _1634___mcc_h457 = _source47.dtor_rhs;
                    return this;
                  } else if (_source47.is_Block) {
                    RAST._IExpr _1635___mcc_h460 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_StructBuild) {
                    RAST._IExpr _1636___mcc_h462 = _source47.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _1637___mcc_h463 = _source47.dtor_assignments;
                    return this;
                  } else if (_source47.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _1638___mcc_h466 = _source47.dtor_arguments;
                    return this;
                  } else if (_source47.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1639___mcc_h468 = _source47.dtor_op1;
                    RAST._IExpr _1640___mcc_h469 = _source47.dtor_underlying;
                    DAST.Format._IUnOpFormat _1641___mcc_h470 = _source47.dtor_format;
                    return this;
                  } else if (_source47.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1642___mcc_h474 = _source47.dtor_op2;
                    RAST._IExpr _1643___mcc_h475 = _source47.dtor_left;
                    RAST._IExpr _1644___mcc_h476 = _source47.dtor_right;
                    DAST.Format._IBinOpFormat _1645___mcc_h477 = _source47.dtor_format2;
                    return this;
                  } else if (_source47.is_TypeAscription) {
                    RAST._IExpr _1646___mcc_h482 = _source47.dtor_left;
                    RAST._IType _1647___mcc_h483 = _source47.dtor_tpe;
                    return this;
                  } else if (_source47.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _1648___mcc_h486 = _source47.dtor_value;
                    return this;
                  } else if (_source47.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _1649___mcc_h488 = _source47.dtor_value;
                    bool _1650___mcc_h489 = _source47.dtor_binary;
                    return this;
                  } else if (_source47.is_ConversionNum) {
                    RAST._IType _1651___mcc_h492 = _source47.dtor_tpe;
                    RAST._IExpr _1652___mcc_h493 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_DeclareVar) {
                    RAST._IDeclareType _1653___mcc_h496 = _source47.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _1654___mcc_h497 = _source47.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _1655___mcc_h498 = _source47.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _1656___mcc_h499 = _source47.dtor_optRhs;
                    return this;
                  } else if (_source47.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _1657___mcc_h504 = _source47.dtor_name;
                    RAST._IExpr _1658___mcc_h505 = _source47.dtor_rhs;
                    return this;
                  } else if (_source47.is_IfExpr) {
                    RAST._IExpr _1659___mcc_h508 = _source47.dtor_cond;
                    RAST._IExpr _1660___mcc_h509 = _source47.dtor_thn;
                    RAST._IExpr _1661___mcc_h510 = _source47.dtor_els;
                    return this;
                  } else if (_source47.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _1662___mcc_h514 = _source47.dtor_optCond;
                    RAST._IExpr _1663___mcc_h515 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_For) {
                    Dafny.ISequence<Dafny.Rune> _1664___mcc_h518 = _source47.dtor_name;
                    RAST._IExpr _1665___mcc_h519 = _source47.dtor_range;
                    RAST._IExpr _1666___mcc_h520 = _source47.dtor_body;
                    return this;
                  } else if (_source47.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _1667___mcc_h524 = _source47.dtor_lbl;
                    RAST._IExpr _1668___mcc_h525 = _source47.dtor_underlying;
                    return this;
                  } else if (_source47.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1669___mcc_h528 = _source47.dtor_optLbl;
                    return this;
                  } else if (_source47.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1670___mcc_h530 = _source47.dtor_optLbl;
                    return this;
                  } else if (_source47.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _1671___mcc_h532 = _source47.dtor_optExpr;
                    return this;
                  } else if (_source47.is_CallType) {
                    RAST._IExpr _1672___mcc_h534 = _source47.dtor_obj;
                    Dafny.ISequence<RAST._IType> _1673___mcc_h535 = _source47.dtor_typeParameters;
                    return this;
                  } else if (_source47.is_Call) {
                    RAST._IExpr _1674___mcc_h538 = _source47.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _1675___mcc_h539 = _source47.dtor_arguments;
                    return this;
                  } else if (_source47.is_Select) {
                    RAST._IExpr _1676___mcc_h542 = _source47.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1677___mcc_h543 = _source47.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _1678___mcc_h546 = _source47.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1679___mcc_h547 = _source47.dtor_name;
                    return this;
                  }
                } else {
                  return this;
                }
              } else if (_source46.is_TypeAscription) {
                RAST._IExpr _1680___mcc_h550 = _source46.dtor_left;
                RAST._IType _1681___mcc_h551 = _source46.dtor_tpe;
                return this;
              } else if (_source46.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1682___mcc_h554 = _source46.dtor_value;
                return this;
              } else if (_source46.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1683___mcc_h556 = _source46.dtor_value;
                bool _1684___mcc_h557 = _source46.dtor_binary;
                return this;
              } else if (_source46.is_ConversionNum) {
                RAST._IType _1685___mcc_h560 = _source46.dtor_tpe;
                RAST._IExpr _1686___mcc_h561 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_DeclareVar) {
                RAST._IDeclareType _1687___mcc_h564 = _source46.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1688___mcc_h565 = _source46.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1689___mcc_h566 = _source46.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1690___mcc_h567 = _source46.dtor_optRhs;
                return this;
              } else if (_source46.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1691___mcc_h572 = _source46.dtor_name;
                RAST._IExpr _1692___mcc_h573 = _source46.dtor_rhs;
                return this;
              } else if (_source46.is_IfExpr) {
                RAST._IExpr _1693___mcc_h576 = _source46.dtor_cond;
                RAST._IExpr _1694___mcc_h577 = _source46.dtor_thn;
                RAST._IExpr _1695___mcc_h578 = _source46.dtor_els;
                return this;
              } else if (_source46.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1696___mcc_h582 = _source46.dtor_optCond;
                RAST._IExpr _1697___mcc_h583 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_For) {
                Dafny.ISequence<Dafny.Rune> _1698___mcc_h586 = _source46.dtor_name;
                RAST._IExpr _1699___mcc_h587 = _source46.dtor_range;
                RAST._IExpr _1700___mcc_h588 = _source46.dtor_body;
                return this;
              } else if (_source46.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1701___mcc_h592 = _source46.dtor_lbl;
                RAST._IExpr _1702___mcc_h593 = _source46.dtor_underlying;
                return this;
              } else if (_source46.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1703___mcc_h596 = _source46.dtor_optLbl;
                return this;
              } else if (_source46.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1704___mcc_h598 = _source46.dtor_optLbl;
                return this;
              } else if (_source46.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1705___mcc_h600 = _source46.dtor_optExpr;
                return this;
              } else if (_source46.is_CallType) {
                RAST._IExpr _1706___mcc_h602 = _source46.dtor_obj;
                Dafny.ISequence<RAST._IType> _1707___mcc_h603 = _source46.dtor_typeParameters;
                return this;
              } else if (_source46.is_Call) {
                RAST._IExpr _1708___mcc_h606 = _source46.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _1709___mcc_h607 = _source46.dtor_arguments;
                return this;
              } else if (_source46.is_Select) {
                RAST._IExpr _1710___mcc_h610 = _source46.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1711___mcc_h611 = _source46.dtor_name;
                return this;
              } else {
                RAST._IExpr _1712___mcc_h614 = _source46.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1713___mcc_h615 = _source46.dtor_name;
                return this;
              }
            } else {
              return this;
            }
          } else if (_source45.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1714___mcc_h618 = _source45.dtor_op2;
            RAST._IExpr _1715___mcc_h619 = _source45.dtor_left;
            RAST._IExpr _1716___mcc_h620 = _source45.dtor_right;
            DAST.Format._IBinOpFormat _1717___mcc_h621 = _source45.dtor_format2;
            return this;
          } else if (_source45.is_TypeAscription) {
            RAST._IExpr _1718___mcc_h626 = _source45.dtor_left;
            RAST._IType _1719___mcc_h627 = _source45.dtor_tpe;
            return this;
          } else if (_source45.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1720___mcc_h630 = _source45.dtor_value;
            return this;
          } else if (_source45.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1721___mcc_h632 = _source45.dtor_value;
            bool _1722___mcc_h633 = _source45.dtor_binary;
            return this;
          } else if (_source45.is_ConversionNum) {
            RAST._IType _1723___mcc_h636 = _source45.dtor_tpe;
            RAST._IExpr _1724___mcc_h637 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_DeclareVar) {
            RAST._IDeclareType _1725___mcc_h640 = _source45.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1726___mcc_h641 = _source45.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1727___mcc_h642 = _source45.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1728___mcc_h643 = _source45.dtor_optRhs;
            return this;
          } else if (_source45.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1729___mcc_h648 = _source45.dtor_name;
            RAST._IExpr _1730___mcc_h649 = _source45.dtor_rhs;
            return this;
          } else if (_source45.is_IfExpr) {
            RAST._IExpr _1731___mcc_h652 = _source45.dtor_cond;
            RAST._IExpr _1732___mcc_h653 = _source45.dtor_thn;
            RAST._IExpr _1733___mcc_h654 = _source45.dtor_els;
            return this;
          } else if (_source45.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1734___mcc_h658 = _source45.dtor_optCond;
            RAST._IExpr _1735___mcc_h659 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_For) {
            Dafny.ISequence<Dafny.Rune> _1736___mcc_h662 = _source45.dtor_name;
            RAST._IExpr _1737___mcc_h663 = _source45.dtor_range;
            RAST._IExpr _1738___mcc_h664 = _source45.dtor_body;
            return this;
          } else if (_source45.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1739___mcc_h668 = _source45.dtor_lbl;
            RAST._IExpr _1740___mcc_h669 = _source45.dtor_underlying;
            return this;
          } else if (_source45.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1741___mcc_h672 = _source45.dtor_optLbl;
            return this;
          } else if (_source45.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1742___mcc_h674 = _source45.dtor_optLbl;
            return this;
          } else if (_source45.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1743___mcc_h676 = _source45.dtor_optExpr;
            return this;
          } else if (_source45.is_CallType) {
            RAST._IExpr _1744___mcc_h678 = _source45.dtor_obj;
            Dafny.ISequence<RAST._IType> _1745___mcc_h679 = _source45.dtor_typeParameters;
            return this;
          } else if (_source45.is_Call) {
            RAST._IExpr _1746___mcc_h682 = _source45.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1747___mcc_h683 = _source45.dtor_arguments;
            return this;
          } else if (_source45.is_Select) {
            RAST._IExpr _1748___mcc_h686 = _source45.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1749___mcc_h687 = _source45.dtor_name;
            return this;
          } else {
            RAST._IExpr _1750___mcc_h690 = _source45.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1751___mcc_h691 = _source45.dtor_name;
            return this;
          }
        } else if (_source40.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1752___mcc_h694 = _source40.dtor_optCond;
          RAST._IExpr _1753___mcc_h695 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_For) {
          Dafny.ISequence<Dafny.Rune> _1754___mcc_h698 = _source40.dtor_name;
          RAST._IExpr _1755___mcc_h699 = _source40.dtor_range;
          RAST._IExpr _1756___mcc_h700 = _source40.dtor_body;
          return this;
        } else if (_source40.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1757___mcc_h704 = _source40.dtor_lbl;
          RAST._IExpr _1758___mcc_h705 = _source40.dtor_underlying;
          return this;
        } else if (_source40.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1759___mcc_h708 = _source40.dtor_optLbl;
          return this;
        } else if (_source40.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1760___mcc_h710 = _source40.dtor_optLbl;
          return this;
        } else if (_source40.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1761___mcc_h712 = _source40.dtor_optExpr;
          return this;
        } else if (_source40.is_CallType) {
          RAST._IExpr _1762___mcc_h714 = _source40.dtor_obj;
          Dafny.ISequence<RAST._IType> _1763___mcc_h715 = _source40.dtor_typeParameters;
          return this;
        } else if (_source40.is_Call) {
          RAST._IExpr _1764___mcc_h718 = _source40.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1765___mcc_h719 = _source40.dtor_arguments;
          return this;
        } else if (_source40.is_Select) {
          RAST._IExpr _1766___mcc_h722 = _source40.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1767___mcc_h723 = _source40.dtor_name;
          return this;
        } else {
          RAST._IExpr _1768___mcc_h726 = _source40.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1769___mcc_h727 = _source40.dtor_name;
          return this;
        }
      } else if (_source39.is_Block) {
        RAST._IExpr _1770___mcc_h730 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_StructBuild) {
        RAST._IExpr _1771___mcc_h732 = _source39.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1772___mcc_h733 = _source39.dtor_assignments;
        return this;
      } else if (_source39.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1773___mcc_h736 = _source39.dtor_arguments;
        return this;
      } else if (_source39.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1774___mcc_h738 = _source39.dtor_op1;
        RAST._IExpr _1775___mcc_h739 = _source39.dtor_underlying;
        DAST.Format._IUnOpFormat _1776___mcc_h740 = _source39.dtor_format;
        if (object.Equals(_1774___mcc_h738, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          RAST._IExpr _source49 = _1775___mcc_h739;
          if (_source49.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1777___mcc_h744 = _source49.dtor_content;
            return this;
          } else if (_source49.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1778___mcc_h746 = _source49.dtor_name;
            return this;
          } else if (_source49.is_Match) {
            RAST._IExpr _1779___mcc_h748 = _source49.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1780___mcc_h749 = _source49.dtor_cases;
            return this;
          } else if (_source49.is_StmtExpr) {
            RAST._IExpr _1781___mcc_h752 = _source49.dtor_stmt;
            RAST._IExpr _1782___mcc_h753 = _source49.dtor_rhs;
            return this;
          } else if (_source49.is_Block) {
            RAST._IExpr _1783___mcc_h756 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_StructBuild) {
            RAST._IExpr _1784___mcc_h758 = _source49.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1785___mcc_h759 = _source49.dtor_assignments;
            return this;
          } else if (_source49.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1786___mcc_h762 = _source49.dtor_arguments;
            return this;
          } else if (_source49.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1787___mcc_h764 = _source49.dtor_op1;
            RAST._IExpr _1788___mcc_h765 = _source49.dtor_underlying;
            DAST.Format._IUnOpFormat _1789___mcc_h766 = _source49.dtor_format;
            return this;
          } else if (_source49.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1790___mcc_h770 = _source49.dtor_op2;
            RAST._IExpr _1791___mcc_h771 = _source49.dtor_left;
            RAST._IExpr _1792___mcc_h772 = _source49.dtor_right;
            DAST.Format._IBinOpFormat _1793___mcc_h773 = _source49.dtor_format2;
            return this;
          } else if (_source49.is_TypeAscription) {
            RAST._IExpr _1794___mcc_h778 = _source49.dtor_left;
            RAST._IType _1795___mcc_h779 = _source49.dtor_tpe;
            return this;
          } else if (_source49.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1796___mcc_h782 = _source49.dtor_value;
            return this;
          } else if (_source49.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1797___mcc_h784 = _source49.dtor_value;
            bool _1798___mcc_h785 = _source49.dtor_binary;
            return this;
          } else if (_source49.is_ConversionNum) {
            RAST._IType _1799___mcc_h788 = _source49.dtor_tpe;
            RAST._IExpr _1800___mcc_h789 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_DeclareVar) {
            RAST._IDeclareType _1801___mcc_h792 = _source49.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1802___mcc_h793 = _source49.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1803___mcc_h794 = _source49.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1804___mcc_h795 = _source49.dtor_optRhs;
            return this;
          } else if (_source49.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1805___mcc_h800 = _source49.dtor_name;
            RAST._IExpr _1806___mcc_h801 = _source49.dtor_rhs;
            return this;
          } else if (_source49.is_IfExpr) {
            RAST._IExpr _1807___mcc_h804 = _source49.dtor_cond;
            RAST._IExpr _1808___mcc_h805 = _source49.dtor_thn;
            RAST._IExpr _1809___mcc_h806 = _source49.dtor_els;
            return this;
          } else if (_source49.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1810___mcc_h810 = _source49.dtor_optCond;
            RAST._IExpr _1811___mcc_h811 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_For) {
            Dafny.ISequence<Dafny.Rune> _1812___mcc_h814 = _source49.dtor_name;
            RAST._IExpr _1813___mcc_h815 = _source49.dtor_range;
            RAST._IExpr _1814___mcc_h816 = _source49.dtor_body;
            return this;
          } else if (_source49.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1815___mcc_h820 = _source49.dtor_lbl;
            RAST._IExpr _1816___mcc_h821 = _source49.dtor_underlying;
            return this;
          } else if (_source49.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1817___mcc_h824 = _source49.dtor_optLbl;
            return this;
          } else if (_source49.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1818___mcc_h826 = _source49.dtor_optLbl;
            return this;
          } else if (_source49.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1819___mcc_h828 = _source49.dtor_optExpr;
            return this;
          } else if (_source49.is_CallType) {
            RAST._IExpr _1820___mcc_h830 = _source49.dtor_obj;
            Dafny.ISequence<RAST._IType> _1821___mcc_h831 = _source49.dtor_typeParameters;
            return this;
          } else if (_source49.is_Call) {
            RAST._IExpr _1822___mcc_h834 = _source49.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1823___mcc_h835 = _source49.dtor_arguments;
            RAST._IExpr _source50 = _1822___mcc_h834;
            if (_source50.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1824___mcc_h838 = _source50.dtor_content;
              return this;
            } else if (_source50.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1825___mcc_h840 = _source50.dtor_name;
              return this;
            } else if (_source50.is_Match) {
              RAST._IExpr _1826___mcc_h842 = _source50.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1827___mcc_h843 = _source50.dtor_cases;
              return this;
            } else if (_source50.is_StmtExpr) {
              RAST._IExpr _1828___mcc_h846 = _source50.dtor_stmt;
              RAST._IExpr _1829___mcc_h847 = _source50.dtor_rhs;
              return this;
            } else if (_source50.is_Block) {
              RAST._IExpr _1830___mcc_h850 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_StructBuild) {
              RAST._IExpr _1831___mcc_h852 = _source50.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _1832___mcc_h853 = _source50.dtor_assignments;
              return this;
            } else if (_source50.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1833___mcc_h856 = _source50.dtor_arguments;
              return this;
            } else if (_source50.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1834___mcc_h858 = _source50.dtor_op1;
              RAST._IExpr _1835___mcc_h859 = _source50.dtor_underlying;
              DAST.Format._IUnOpFormat _1836___mcc_h860 = _source50.dtor_format;
              return this;
            } else if (_source50.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1837___mcc_h864 = _source50.dtor_op2;
              RAST._IExpr _1838___mcc_h865 = _source50.dtor_left;
              RAST._IExpr _1839___mcc_h866 = _source50.dtor_right;
              DAST.Format._IBinOpFormat _1840___mcc_h867 = _source50.dtor_format2;
              return this;
            } else if (_source50.is_TypeAscription) {
              RAST._IExpr _1841___mcc_h872 = _source50.dtor_left;
              RAST._IType _1842___mcc_h873 = _source50.dtor_tpe;
              return this;
            } else if (_source50.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1843___mcc_h876 = _source50.dtor_value;
              return this;
            } else if (_source50.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1844___mcc_h878 = _source50.dtor_value;
              bool _1845___mcc_h879 = _source50.dtor_binary;
              return this;
            } else if (_source50.is_ConversionNum) {
              RAST._IType _1846___mcc_h882 = _source50.dtor_tpe;
              RAST._IExpr _1847___mcc_h883 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_DeclareVar) {
              RAST._IDeclareType _1848___mcc_h886 = _source50.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1849___mcc_h887 = _source50.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1850___mcc_h888 = _source50.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1851___mcc_h889 = _source50.dtor_optRhs;
              return this;
            } else if (_source50.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1852___mcc_h894 = _source50.dtor_name;
              RAST._IExpr _1853___mcc_h895 = _source50.dtor_rhs;
              return this;
            } else if (_source50.is_IfExpr) {
              RAST._IExpr _1854___mcc_h898 = _source50.dtor_cond;
              RAST._IExpr _1855___mcc_h899 = _source50.dtor_thn;
              RAST._IExpr _1856___mcc_h900 = _source50.dtor_els;
              return this;
            } else if (_source50.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1857___mcc_h904 = _source50.dtor_optCond;
              RAST._IExpr _1858___mcc_h905 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_For) {
              Dafny.ISequence<Dafny.Rune> _1859___mcc_h908 = _source50.dtor_name;
              RAST._IExpr _1860___mcc_h909 = _source50.dtor_range;
              RAST._IExpr _1861___mcc_h910 = _source50.dtor_body;
              return this;
            } else if (_source50.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1862___mcc_h914 = _source50.dtor_lbl;
              RAST._IExpr _1863___mcc_h915 = _source50.dtor_underlying;
              return this;
            } else if (_source50.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1864___mcc_h918 = _source50.dtor_optLbl;
              return this;
            } else if (_source50.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1865___mcc_h920 = _source50.dtor_optLbl;
              return this;
            } else if (_source50.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1866___mcc_h922 = _source50.dtor_optExpr;
              return this;
            } else if (_source50.is_CallType) {
              RAST._IExpr _1867___mcc_h924 = _source50.dtor_obj;
              Dafny.ISequence<RAST._IType> _1868___mcc_h925 = _source50.dtor_typeParameters;
              return this;
            } else if (_source50.is_Call) {
              RAST._IExpr _1869___mcc_h928 = _source50.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _1870___mcc_h929 = _source50.dtor_arguments;
              return this;
            } else if (_source50.is_Select) {
              RAST._IExpr _1871___mcc_h932 = _source50.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1872___mcc_h933 = _source50.dtor_name;
              if (object.Equals(_1872___mcc_h933, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))) {
                DAST.Format._IUnOpFormat _1873_format = _1776___mcc_h740;
                Dafny.ISequence<RAST._IExpr> _1874_args = _1823___mcc_h835;
                RAST._IExpr _1875_underlying = _1871___mcc_h932;
                if ((_1874_args).Equals(Dafny.Sequence<RAST._IExpr>.FromElements())) {
                  return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1875_underlying, _1873_format);
                } else {
                  return this;
                }
              } else {
                return this;
              }
            } else {
              RAST._IExpr _1876___mcc_h936 = _source50.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1877___mcc_h937 = _source50.dtor_name;
              return this;
            }
          } else if (_source49.is_Select) {
            RAST._IExpr _1878___mcc_h940 = _source49.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1879___mcc_h941 = _source49.dtor_name;
            return this;
          } else {
            RAST._IExpr _1880___mcc_h944 = _source49.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1881___mcc_h945 = _source49.dtor_name;
            return this;
          }
        } else if (object.Equals(_1774___mcc_h738, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source51 = _1775___mcc_h739;
          if (_source51.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1882___mcc_h948 = _source51.dtor_content;
            return this;
          } else if (_source51.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1883___mcc_h950 = _source51.dtor_name;
            return this;
          } else if (_source51.is_Match) {
            RAST._IExpr _1884___mcc_h952 = _source51.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1885___mcc_h953 = _source51.dtor_cases;
            return this;
          } else if (_source51.is_StmtExpr) {
            RAST._IExpr _1886___mcc_h956 = _source51.dtor_stmt;
            RAST._IExpr _1887___mcc_h957 = _source51.dtor_rhs;
            return this;
          } else if (_source51.is_Block) {
            RAST._IExpr _1888___mcc_h960 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_StructBuild) {
            RAST._IExpr _1889___mcc_h962 = _source51.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1890___mcc_h963 = _source51.dtor_assignments;
            return this;
          } else if (_source51.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1891___mcc_h966 = _source51.dtor_arguments;
            return this;
          } else if (_source51.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1892___mcc_h968 = _source51.dtor_op1;
            RAST._IExpr _1893___mcc_h969 = _source51.dtor_underlying;
            DAST.Format._IUnOpFormat _1894___mcc_h970 = _source51.dtor_format;
            return this;
          } else if (_source51.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1895___mcc_h974 = _source51.dtor_op2;
            RAST._IExpr _1896___mcc_h975 = _source51.dtor_left;
            RAST._IExpr _1897___mcc_h976 = _source51.dtor_right;
            DAST.Format._IBinOpFormat _1898___mcc_h977 = _source51.dtor_format2;
            if (object.Equals(_1895___mcc_h974, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnOpFormat _source52 = _1776___mcc_h740;
              if (_source52.is_NoFormat) {
                return this;
              } else {
                DAST.Format._IBinOpFormat _1899_format = _1898___mcc_h977;
                RAST._IExpr _1900_right = _1897___mcc_h976;
                RAST._IExpr _1901_left = _1896___mcc_h975;
                return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1901_left, _1900_right, DAST.Format.BinOpFormat.create_NoFormat());
              }
            } else if (object.Equals(_1895___mcc_h974, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinOpFormat _source53 = _1898___mcc_h977;
              if (_source53.is_NoFormat) {
                DAST.Format._IUnOpFormat _source54 = _1776___mcc_h740;
                if (_source54.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1902_right = _1897___mcc_h976;
                  RAST._IExpr _1903_left = _1896___mcc_h975;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1903_left, _1902_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              } else if (_source53.is_ImpliesFormat) {
                return this;
              } else if (_source53.is_Equivalence) {
                return this;
              } else {
                DAST.Format._IUnOpFormat _source55 = _1776___mcc_h740;
                if (_source55.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1904_right = _1897___mcc_h976;
                  RAST._IExpr _1905_left = _1896___mcc_h975;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1904_right, _1905_left, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else {
              return this;
            }
          } else if (_source51.is_TypeAscription) {
            RAST._IExpr _1906___mcc_h982 = _source51.dtor_left;
            RAST._IType _1907___mcc_h983 = _source51.dtor_tpe;
            return this;
          } else if (_source51.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1908___mcc_h986 = _source51.dtor_value;
            return this;
          } else if (_source51.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1909___mcc_h988 = _source51.dtor_value;
            bool _1910___mcc_h989 = _source51.dtor_binary;
            return this;
          } else if (_source51.is_ConversionNum) {
            RAST._IType _1911___mcc_h992 = _source51.dtor_tpe;
            RAST._IExpr _1912___mcc_h993 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_DeclareVar) {
            RAST._IDeclareType _1913___mcc_h996 = _source51.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1914___mcc_h997 = _source51.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1915___mcc_h998 = _source51.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1916___mcc_h999 = _source51.dtor_optRhs;
            return this;
          } else if (_source51.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1917___mcc_h1004 = _source51.dtor_name;
            RAST._IExpr _1918___mcc_h1005 = _source51.dtor_rhs;
            return this;
          } else if (_source51.is_IfExpr) {
            RAST._IExpr _1919___mcc_h1008 = _source51.dtor_cond;
            RAST._IExpr _1920___mcc_h1009 = _source51.dtor_thn;
            RAST._IExpr _1921___mcc_h1010 = _source51.dtor_els;
            return this;
          } else if (_source51.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1922___mcc_h1014 = _source51.dtor_optCond;
            RAST._IExpr _1923___mcc_h1015 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_For) {
            Dafny.ISequence<Dafny.Rune> _1924___mcc_h1018 = _source51.dtor_name;
            RAST._IExpr _1925___mcc_h1019 = _source51.dtor_range;
            RAST._IExpr _1926___mcc_h1020 = _source51.dtor_body;
            return this;
          } else if (_source51.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1927___mcc_h1024 = _source51.dtor_lbl;
            RAST._IExpr _1928___mcc_h1025 = _source51.dtor_underlying;
            return this;
          } else if (_source51.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1929___mcc_h1028 = _source51.dtor_optLbl;
            return this;
          } else if (_source51.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1930___mcc_h1030 = _source51.dtor_optLbl;
            return this;
          } else if (_source51.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1931___mcc_h1032 = _source51.dtor_optExpr;
            return this;
          } else if (_source51.is_CallType) {
            RAST._IExpr _1932___mcc_h1034 = _source51.dtor_obj;
            Dafny.ISequence<RAST._IType> _1933___mcc_h1035 = _source51.dtor_typeParameters;
            return this;
          } else if (_source51.is_Call) {
            RAST._IExpr _1934___mcc_h1038 = _source51.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1935___mcc_h1039 = _source51.dtor_arguments;
            return this;
          } else if (_source51.is_Select) {
            RAST._IExpr _1936___mcc_h1042 = _source51.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1937___mcc_h1043 = _source51.dtor_name;
            return this;
          } else {
            RAST._IExpr _1938___mcc_h1046 = _source51.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1939___mcc_h1047 = _source51.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source39.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1940___mcc_h1050 = _source39.dtor_op2;
        RAST._IExpr _1941___mcc_h1051 = _source39.dtor_left;
        RAST._IExpr _1942___mcc_h1052 = _source39.dtor_right;
        DAST.Format._IBinOpFormat _1943___mcc_h1053 = _source39.dtor_format2;
        return this;
      } else if (_source39.is_TypeAscription) {
        RAST._IExpr _1944___mcc_h1058 = _source39.dtor_left;
        RAST._IType _1945___mcc_h1059 = _source39.dtor_tpe;
        return this;
      } else if (_source39.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1946___mcc_h1062 = _source39.dtor_value;
        return this;
      } else if (_source39.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1947___mcc_h1064 = _source39.dtor_value;
        bool _1948___mcc_h1065 = _source39.dtor_binary;
        return this;
      } else if (_source39.is_ConversionNum) {
        RAST._IType _1949___mcc_h1068 = _source39.dtor_tpe;
        RAST._IExpr _1950___mcc_h1069 = _source39.dtor_underlying;
        RAST._IExpr _1951_expr = _1950___mcc_h1069;
        RAST._IType _1952_tpe = _1949___mcc_h1068;
        if (((((((((((_1952_tpe).is_U8) || ((_1952_tpe).is_U16)) || ((_1952_tpe).is_U32)) || ((_1952_tpe).is_U64)) || ((_1952_tpe).is_U128)) || ((_1952_tpe).is_I8)) || ((_1952_tpe).is_I16)) || ((_1952_tpe).is_I32)) || ((_1952_tpe).is_I64)) || ((_1952_tpe).is_I128)) {
          RAST._IExpr _source56 = _1951_expr;
          if (_source56.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1953___mcc_h1126 = _source56.dtor_content;
            return this;
          } else if (_source56.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1954___mcc_h1128 = _source56.dtor_name;
            return this;
          } else if (_source56.is_Match) {
            RAST._IExpr _1955___mcc_h1130 = _source56.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1956___mcc_h1131 = _source56.dtor_cases;
            return this;
          } else if (_source56.is_StmtExpr) {
            RAST._IExpr _1957___mcc_h1134 = _source56.dtor_stmt;
            RAST._IExpr _1958___mcc_h1135 = _source56.dtor_rhs;
            return this;
          } else if (_source56.is_Block) {
            RAST._IExpr _1959___mcc_h1138 = _source56.dtor_underlying;
            return this;
          } else if (_source56.is_StructBuild) {
            RAST._IExpr _1960___mcc_h1140 = _source56.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1961___mcc_h1141 = _source56.dtor_assignments;
            return this;
          } else if (_source56.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1962___mcc_h1144 = _source56.dtor_arguments;
            return this;
          } else if (_source56.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1963___mcc_h1146 = _source56.dtor_op1;
            RAST._IExpr _1964___mcc_h1147 = _source56.dtor_underlying;
            DAST.Format._IUnOpFormat _1965___mcc_h1148 = _source56.dtor_format;
            return this;
          } else if (_source56.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1966___mcc_h1152 = _source56.dtor_op2;
            RAST._IExpr _1967___mcc_h1153 = _source56.dtor_left;
            RAST._IExpr _1968___mcc_h1154 = _source56.dtor_right;
            DAST.Format._IBinOpFormat _1969___mcc_h1155 = _source56.dtor_format2;
            return this;
          } else if (_source56.is_TypeAscription) {
            RAST._IExpr _1970___mcc_h1160 = _source56.dtor_left;
            RAST._IType _1971___mcc_h1161 = _source56.dtor_tpe;
            return this;
          } else if (_source56.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1972___mcc_h1164 = _source56.dtor_value;
            return this;
          } else if (_source56.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1973___mcc_h1166 = _source56.dtor_value;
            bool _1974___mcc_h1167 = _source56.dtor_binary;
            return this;
          } else if (_source56.is_ConversionNum) {
            RAST._IType _1975___mcc_h1170 = _source56.dtor_tpe;
            RAST._IExpr _1976___mcc_h1171 = _source56.dtor_underlying;
            return this;
          } else if (_source56.is_DeclareVar) {
            RAST._IDeclareType _1977___mcc_h1174 = _source56.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1978___mcc_h1175 = _source56.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1979___mcc_h1176 = _source56.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1980___mcc_h1177 = _source56.dtor_optRhs;
            return this;
          } else if (_source56.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1981___mcc_h1182 = _source56.dtor_name;
            RAST._IExpr _1982___mcc_h1183 = _source56.dtor_rhs;
            return this;
          } else if (_source56.is_IfExpr) {
            RAST._IExpr _1983___mcc_h1186 = _source56.dtor_cond;
            RAST._IExpr _1984___mcc_h1187 = _source56.dtor_thn;
            RAST._IExpr _1985___mcc_h1188 = _source56.dtor_els;
            return this;
          } else if (_source56.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1986___mcc_h1192 = _source56.dtor_optCond;
            RAST._IExpr _1987___mcc_h1193 = _source56.dtor_underlying;
            return this;
          } else if (_source56.is_For) {
            Dafny.ISequence<Dafny.Rune> _1988___mcc_h1196 = _source56.dtor_name;
            RAST._IExpr _1989___mcc_h1197 = _source56.dtor_range;
            RAST._IExpr _1990___mcc_h1198 = _source56.dtor_body;
            return this;
          } else if (_source56.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1991___mcc_h1202 = _source56.dtor_lbl;
            RAST._IExpr _1992___mcc_h1203 = _source56.dtor_underlying;
            return this;
          } else if (_source56.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1993___mcc_h1206 = _source56.dtor_optLbl;
            return this;
          } else if (_source56.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1994___mcc_h1208 = _source56.dtor_optLbl;
            return this;
          } else if (_source56.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1995___mcc_h1210 = _source56.dtor_optExpr;
            return this;
          } else if (_source56.is_CallType) {
            RAST._IExpr _1996___mcc_h1212 = _source56.dtor_obj;
            Dafny.ISequence<RAST._IType> _1997___mcc_h1213 = _source56.dtor_typeParameters;
            return this;
          } else if (_source56.is_Call) {
            RAST._IExpr _1998___mcc_h1216 = _source56.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1999___mcc_h1217 = _source56.dtor_arguments;
            RAST._IExpr _source57 = _1998___mcc_h1216;
            if (_source57.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _2000___mcc_h1220 = _source57.dtor_content;
              return this;
            } else if (_source57.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _2001___mcc_h1222 = _source57.dtor_name;
              return this;
            } else if (_source57.is_Match) {
              RAST._IExpr _2002___mcc_h1224 = _source57.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _2003___mcc_h1225 = _source57.dtor_cases;
              return this;
            } else if (_source57.is_StmtExpr) {
              RAST._IExpr _2004___mcc_h1228 = _source57.dtor_stmt;
              RAST._IExpr _2005___mcc_h1229 = _source57.dtor_rhs;
              return this;
            } else if (_source57.is_Block) {
              RAST._IExpr _2006___mcc_h1232 = _source57.dtor_underlying;
              return this;
            } else if (_source57.is_StructBuild) {
              RAST._IExpr _2007___mcc_h1234 = _source57.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _2008___mcc_h1235 = _source57.dtor_assignments;
              return this;
            } else if (_source57.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _2009___mcc_h1238 = _source57.dtor_arguments;
              return this;
            } else if (_source57.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _2010___mcc_h1240 = _source57.dtor_op1;
              RAST._IExpr _2011___mcc_h1241 = _source57.dtor_underlying;
              DAST.Format._IUnOpFormat _2012___mcc_h1242 = _source57.dtor_format;
              return this;
            } else if (_source57.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _2013___mcc_h1246 = _source57.dtor_op2;
              RAST._IExpr _2014___mcc_h1247 = _source57.dtor_left;
              RAST._IExpr _2015___mcc_h1248 = _source57.dtor_right;
              DAST.Format._IBinOpFormat _2016___mcc_h1249 = _source57.dtor_format2;
              return this;
            } else if (_source57.is_TypeAscription) {
              RAST._IExpr _2017___mcc_h1254 = _source57.dtor_left;
              RAST._IType _2018___mcc_h1255 = _source57.dtor_tpe;
              return this;
            } else if (_source57.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _2019___mcc_h1258 = _source57.dtor_value;
              return this;
            } else if (_source57.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _2020___mcc_h1260 = _source57.dtor_value;
              bool _2021___mcc_h1261 = _source57.dtor_binary;
              return this;
            } else if (_source57.is_ConversionNum) {
              RAST._IType _2022___mcc_h1264 = _source57.dtor_tpe;
              RAST._IExpr _2023___mcc_h1265 = _source57.dtor_underlying;
              return this;
            } else if (_source57.is_DeclareVar) {
              RAST._IDeclareType _2024___mcc_h1268 = _source57.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _2025___mcc_h1269 = _source57.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _2026___mcc_h1270 = _source57.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _2027___mcc_h1271 = _source57.dtor_optRhs;
              return this;
            } else if (_source57.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _2028___mcc_h1276 = _source57.dtor_name;
              RAST._IExpr _2029___mcc_h1277 = _source57.dtor_rhs;
              return this;
            } else if (_source57.is_IfExpr) {
              RAST._IExpr _2030___mcc_h1280 = _source57.dtor_cond;
              RAST._IExpr _2031___mcc_h1281 = _source57.dtor_thn;
              RAST._IExpr _2032___mcc_h1282 = _source57.dtor_els;
              return this;
            } else if (_source57.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _2033___mcc_h1286 = _source57.dtor_optCond;
              RAST._IExpr _2034___mcc_h1287 = _source57.dtor_underlying;
              return this;
            } else if (_source57.is_For) {
              Dafny.ISequence<Dafny.Rune> _2035___mcc_h1290 = _source57.dtor_name;
              RAST._IExpr _2036___mcc_h1291 = _source57.dtor_range;
              RAST._IExpr _2037___mcc_h1292 = _source57.dtor_body;
              return this;
            } else if (_source57.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _2038___mcc_h1296 = _source57.dtor_lbl;
              RAST._IExpr _2039___mcc_h1297 = _source57.dtor_underlying;
              return this;
            } else if (_source57.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2040___mcc_h1300 = _source57.dtor_optLbl;
              return this;
            } else if (_source57.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2041___mcc_h1302 = _source57.dtor_optLbl;
              return this;
            } else if (_source57.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _2042___mcc_h1304 = _source57.dtor_optExpr;
              return this;
            } else if (_source57.is_CallType) {
              RAST._IExpr _2043___mcc_h1306 = _source57.dtor_obj;
              Dafny.ISequence<RAST._IType> _2044___mcc_h1307 = _source57.dtor_typeParameters;
              return this;
            } else if (_source57.is_Call) {
              RAST._IExpr _2045___mcc_h1310 = _source57.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _2046___mcc_h1311 = _source57.dtor_arguments;
              return this;
            } else if (_source57.is_Select) {
              RAST._IExpr _2047___mcc_h1314 = _source57.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _2048___mcc_h1315 = _source57.dtor_name;
              return this;
            } else {
              RAST._IExpr _2049___mcc_h1318 = _source57.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _2050___mcc_h1319 = _source57.dtor_name;
              RAST._IExpr _source58 = _2049___mcc_h1318;
              if (_source58.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _2051___mcc_h1322 = _source58.dtor_content;
                return this;
              } else if (_source58.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _2052___mcc_h1324 = _source58.dtor_name;
                return this;
              } else if (_source58.is_Match) {
                RAST._IExpr _2053___mcc_h1326 = _source58.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _2054___mcc_h1327 = _source58.dtor_cases;
                return this;
              } else if (_source58.is_StmtExpr) {
                RAST._IExpr _2055___mcc_h1330 = _source58.dtor_stmt;
                RAST._IExpr _2056___mcc_h1331 = _source58.dtor_rhs;
                return this;
              } else if (_source58.is_Block) {
                RAST._IExpr _2057___mcc_h1334 = _source58.dtor_underlying;
                return this;
              } else if (_source58.is_StructBuild) {
                RAST._IExpr _2058___mcc_h1336 = _source58.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _2059___mcc_h1337 = _source58.dtor_assignments;
                return this;
              } else if (_source58.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _2060___mcc_h1340 = _source58.dtor_arguments;
                return this;
              } else if (_source58.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _2061___mcc_h1342 = _source58.dtor_op1;
                RAST._IExpr _2062___mcc_h1343 = _source58.dtor_underlying;
                DAST.Format._IUnOpFormat _2063___mcc_h1344 = _source58.dtor_format;
                return this;
              } else if (_source58.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _2064___mcc_h1348 = _source58.dtor_op2;
                RAST._IExpr _2065___mcc_h1349 = _source58.dtor_left;
                RAST._IExpr _2066___mcc_h1350 = _source58.dtor_right;
                DAST.Format._IBinOpFormat _2067___mcc_h1351 = _source58.dtor_format2;
                return this;
              } else if (_source58.is_TypeAscription) {
                RAST._IExpr _2068___mcc_h1356 = _source58.dtor_left;
                RAST._IType _2069___mcc_h1357 = _source58.dtor_tpe;
                return this;
              } else if (_source58.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _2070___mcc_h1360 = _source58.dtor_value;
                return this;
              } else if (_source58.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _2071___mcc_h1362 = _source58.dtor_value;
                bool _2072___mcc_h1363 = _source58.dtor_binary;
                return this;
              } else if (_source58.is_ConversionNum) {
                RAST._IType _2073___mcc_h1366 = _source58.dtor_tpe;
                RAST._IExpr _2074___mcc_h1367 = _source58.dtor_underlying;
                return this;
              } else if (_source58.is_DeclareVar) {
                RAST._IDeclareType _2075___mcc_h1370 = _source58.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _2076___mcc_h1371 = _source58.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _2077___mcc_h1372 = _source58.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _2078___mcc_h1373 = _source58.dtor_optRhs;
                return this;
              } else if (_source58.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _2079___mcc_h1378 = _source58.dtor_name;
                RAST._IExpr _2080___mcc_h1379 = _source58.dtor_rhs;
                return this;
              } else if (_source58.is_IfExpr) {
                RAST._IExpr _2081___mcc_h1382 = _source58.dtor_cond;
                RAST._IExpr _2082___mcc_h1383 = _source58.dtor_thn;
                RAST._IExpr _2083___mcc_h1384 = _source58.dtor_els;
                return this;
              } else if (_source58.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _2084___mcc_h1388 = _source58.dtor_optCond;
                RAST._IExpr _2085___mcc_h1389 = _source58.dtor_underlying;
                return this;
              } else if (_source58.is_For) {
                Dafny.ISequence<Dafny.Rune> _2086___mcc_h1392 = _source58.dtor_name;
                RAST._IExpr _2087___mcc_h1393 = _source58.dtor_range;
                RAST._IExpr _2088___mcc_h1394 = _source58.dtor_body;
                return this;
              } else if (_source58.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _2089___mcc_h1398 = _source58.dtor_lbl;
                RAST._IExpr _2090___mcc_h1399 = _source58.dtor_underlying;
                return this;
              } else if (_source58.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2091___mcc_h1402 = _source58.dtor_optLbl;
                return this;
              } else if (_source58.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2092___mcc_h1404 = _source58.dtor_optLbl;
                return this;
              } else if (_source58.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _2093___mcc_h1406 = _source58.dtor_optExpr;
                return this;
              } else if (_source58.is_CallType) {
                RAST._IExpr _2094___mcc_h1408 = _source58.dtor_obj;
                Dafny.ISequence<RAST._IType> _2095___mcc_h1409 = _source58.dtor_typeParameters;
                return this;
              } else if (_source58.is_Call) {
                RAST._IExpr _2096___mcc_h1412 = _source58.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _2097___mcc_h1413 = _source58.dtor_arguments;
                return this;
              } else if (_source58.is_Select) {
                RAST._IExpr _2098___mcc_h1416 = _source58.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _2099___mcc_h1417 = _source58.dtor_name;
                return this;
              } else {
                RAST._IExpr _2100___mcc_h1420 = _source58.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _2101___mcc_h1421 = _source58.dtor_name;
                RAST._IExpr _source59 = _2100___mcc_h1420;
                if (_source59.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _2102___mcc_h1424 = _source59.dtor_content;
                  return this;
                } else if (_source59.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _2103___mcc_h1426 = _source59.dtor_name;
                  return this;
                } else if (_source59.is_Match) {
                  RAST._IExpr _2104___mcc_h1428 = _source59.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _2105___mcc_h1429 = _source59.dtor_cases;
                  return this;
                } else if (_source59.is_StmtExpr) {
                  RAST._IExpr _2106___mcc_h1432 = _source59.dtor_stmt;
                  RAST._IExpr _2107___mcc_h1433 = _source59.dtor_rhs;
                  return this;
                } else if (_source59.is_Block) {
                  RAST._IExpr _2108___mcc_h1436 = _source59.dtor_underlying;
                  return this;
                } else if (_source59.is_StructBuild) {
                  RAST._IExpr _2109___mcc_h1438 = _source59.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _2110___mcc_h1439 = _source59.dtor_assignments;
                  return this;
                } else if (_source59.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _2111___mcc_h1442 = _source59.dtor_arguments;
                  return this;
                } else if (_source59.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _2112___mcc_h1444 = _source59.dtor_op1;
                  RAST._IExpr _2113___mcc_h1445 = _source59.dtor_underlying;
                  DAST.Format._IUnOpFormat _2114___mcc_h1446 = _source59.dtor_format;
                  return this;
                } else if (_source59.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _2115___mcc_h1450 = _source59.dtor_op2;
                  RAST._IExpr _2116___mcc_h1451 = _source59.dtor_left;
                  RAST._IExpr _2117___mcc_h1452 = _source59.dtor_right;
                  DAST.Format._IBinOpFormat _2118___mcc_h1453 = _source59.dtor_format2;
                  return this;
                } else if (_source59.is_TypeAscription) {
                  RAST._IExpr _2119___mcc_h1458 = _source59.dtor_left;
                  RAST._IType _2120___mcc_h1459 = _source59.dtor_tpe;
                  return this;
                } else if (_source59.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _2121___mcc_h1462 = _source59.dtor_value;
                  return this;
                } else if (_source59.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _2122___mcc_h1464 = _source59.dtor_value;
                  bool _2123___mcc_h1465 = _source59.dtor_binary;
                  return this;
                } else if (_source59.is_ConversionNum) {
                  RAST._IType _2124___mcc_h1468 = _source59.dtor_tpe;
                  RAST._IExpr _2125___mcc_h1469 = _source59.dtor_underlying;
                  return this;
                } else if (_source59.is_DeclareVar) {
                  RAST._IDeclareType _2126___mcc_h1472 = _source59.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _2127___mcc_h1473 = _source59.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _2128___mcc_h1474 = _source59.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _2129___mcc_h1475 = _source59.dtor_optRhs;
                  return this;
                } else if (_source59.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _2130___mcc_h1480 = _source59.dtor_name;
                  RAST._IExpr _2131___mcc_h1481 = _source59.dtor_rhs;
                  return this;
                } else if (_source59.is_IfExpr) {
                  RAST._IExpr _2132___mcc_h1484 = _source59.dtor_cond;
                  RAST._IExpr _2133___mcc_h1485 = _source59.dtor_thn;
                  RAST._IExpr _2134___mcc_h1486 = _source59.dtor_els;
                  return this;
                } else if (_source59.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _2135___mcc_h1490 = _source59.dtor_optCond;
                  RAST._IExpr _2136___mcc_h1491 = _source59.dtor_underlying;
                  return this;
                } else if (_source59.is_For) {
                  Dafny.ISequence<Dafny.Rune> _2137___mcc_h1494 = _source59.dtor_name;
                  RAST._IExpr _2138___mcc_h1495 = _source59.dtor_range;
                  RAST._IExpr _2139___mcc_h1496 = _source59.dtor_body;
                  return this;
                } else if (_source59.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _2140___mcc_h1500 = _source59.dtor_lbl;
                  RAST._IExpr _2141___mcc_h1501 = _source59.dtor_underlying;
                  return this;
                } else if (_source59.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2142___mcc_h1504 = _source59.dtor_optLbl;
                  return this;
                } else if (_source59.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2143___mcc_h1506 = _source59.dtor_optLbl;
                  return this;
                } else if (_source59.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _2144___mcc_h1508 = _source59.dtor_optExpr;
                  return this;
                } else if (_source59.is_CallType) {
                  RAST._IExpr _2145___mcc_h1510 = _source59.dtor_obj;
                  Dafny.ISequence<RAST._IType> _2146___mcc_h1511 = _source59.dtor_typeParameters;
                  return this;
                } else if (_source59.is_Call) {
                  RAST._IExpr _2147___mcc_h1514 = _source59.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _2148___mcc_h1515 = _source59.dtor_arguments;
                  return this;
                } else if (_source59.is_Select) {
                  RAST._IExpr _2149___mcc_h1518 = _source59.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _2150___mcc_h1519 = _source59.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _2151___mcc_h1522 = _source59.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _2152___mcc_h1523 = _source59.dtor_name;
                  RAST._IExpr _source60 = _2151___mcc_h1522;
                  if (_source60.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _2153___mcc_h1526 = _source60.dtor_content;
                    return this;
                  } else if (_source60.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _2154___mcc_h1528 = _source60.dtor_name;
                    if (object.Equals(_2154___mcc_h1528, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                      if (object.Equals(_2152___mcc_h1523, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"))) {
                        if (object.Equals(_2101___mcc_h1421, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))) {
                          if (object.Equals(_2050___mcc_h1319, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))) {
                            Dafny.ISequence<RAST._IExpr> _2155_args = _1999___mcc_h1217;
                            if ((new BigInteger((_2155_args).Count)) == (BigInteger.One)) {
                              RAST._IExpr _source61 = (_2155_args).Select(BigInteger.Zero);
                              if (_source61.is_RawExpr) {
                                Dafny.ISequence<Dafny.Rune> _2156___mcc_h1636 = _source61.dtor_content;
                                return this;
                              } else if (_source61.is_Identifier) {
                                Dafny.ISequence<Dafny.Rune> _2157___mcc_h1638 = _source61.dtor_name;
                                return this;
                              } else if (_source61.is_Match) {
                                RAST._IExpr _2158___mcc_h1640 = _source61.dtor_matchee;
                                Dafny.ISequence<RAST._IMatchCase> _2159___mcc_h1641 = _source61.dtor_cases;
                                return this;
                              } else if (_source61.is_StmtExpr) {
                                RAST._IExpr _2160___mcc_h1644 = _source61.dtor_stmt;
                                RAST._IExpr _2161___mcc_h1645 = _source61.dtor_rhs;
                                return this;
                              } else if (_source61.is_Block) {
                                RAST._IExpr _2162___mcc_h1648 = _source61.dtor_underlying;
                                return this;
                              } else if (_source61.is_StructBuild) {
                                RAST._IExpr _2163___mcc_h1650 = _source61.dtor_underlying;
                                Dafny.ISequence<RAST._IAssignIdentifier> _2164___mcc_h1651 = _source61.dtor_assignments;
                                return this;
                              } else if (_source61.is_Tuple) {
                                Dafny.ISequence<RAST._IExpr> _2165___mcc_h1654 = _source61.dtor_arguments;
                                return this;
                              } else if (_source61.is_UnaryOp) {
                                Dafny.ISequence<Dafny.Rune> _2166___mcc_h1656 = _source61.dtor_op1;
                                RAST._IExpr _2167___mcc_h1657 = _source61.dtor_underlying;
                                DAST.Format._IUnOpFormat _2168___mcc_h1658 = _source61.dtor_format;
                                return this;
                              } else if (_source61.is_BinaryOp) {
                                Dafny.ISequence<Dafny.Rune> _2169___mcc_h1662 = _source61.dtor_op2;
                                RAST._IExpr _2170___mcc_h1663 = _source61.dtor_left;
                                RAST._IExpr _2171___mcc_h1664 = _source61.dtor_right;
                                DAST.Format._IBinOpFormat _2172___mcc_h1665 = _source61.dtor_format2;
                                return this;
                              } else if (_source61.is_TypeAscription) {
                                RAST._IExpr _2173___mcc_h1670 = _source61.dtor_left;
                                RAST._IType _2174___mcc_h1671 = _source61.dtor_tpe;
                                return this;
                              } else if (_source61.is_LiteralInt) {
                                Dafny.ISequence<Dafny.Rune> _2175___mcc_h1674 = _source61.dtor_value;
                                Dafny.ISequence<Dafny.Rune> _2176_number = _2175___mcc_h1674;
                                return RAST.Expr.create_LiteralInt(_2176_number);
                              } else if (_source61.is_LiteralString) {
                                Dafny.ISequence<Dafny.Rune> _2177___mcc_h1676 = _source61.dtor_value;
                                bool _2178___mcc_h1677 = _source61.dtor_binary;
                                Dafny.ISequence<Dafny.Rune> _2179_number = _2177___mcc_h1676;
                                return RAST.Expr.create_LiteralInt(_2179_number);
                              } else if (_source61.is_ConversionNum) {
                                RAST._IType _2180___mcc_h1680 = _source61.dtor_tpe;
                                RAST._IExpr _2181___mcc_h1681 = _source61.dtor_underlying;
                                return this;
                              } else if (_source61.is_DeclareVar) {
                                RAST._IDeclareType _2182___mcc_h1684 = _source61.dtor_declareType;
                                Dafny.ISequence<Dafny.Rune> _2183___mcc_h1685 = _source61.dtor_name;
                                Std.Wrappers._IOption<RAST._IType> _2184___mcc_h1686 = _source61.dtor_optType;
                                Std.Wrappers._IOption<RAST._IExpr> _2185___mcc_h1687 = _source61.dtor_optRhs;
                                return this;
                              } else if (_source61.is_AssignVar) {
                                Dafny.ISequence<Dafny.Rune> _2186___mcc_h1692 = _source61.dtor_name;
                                RAST._IExpr _2187___mcc_h1693 = _source61.dtor_rhs;
                                return this;
                              } else if (_source61.is_IfExpr) {
                                RAST._IExpr _2188___mcc_h1696 = _source61.dtor_cond;
                                RAST._IExpr _2189___mcc_h1697 = _source61.dtor_thn;
                                RAST._IExpr _2190___mcc_h1698 = _source61.dtor_els;
                                return this;
                              } else if (_source61.is_Loop) {
                                Std.Wrappers._IOption<RAST._IExpr> _2191___mcc_h1702 = _source61.dtor_optCond;
                                RAST._IExpr _2192___mcc_h1703 = _source61.dtor_underlying;
                                return this;
                              } else if (_source61.is_For) {
                                Dafny.ISequence<Dafny.Rune> _2193___mcc_h1706 = _source61.dtor_name;
                                RAST._IExpr _2194___mcc_h1707 = _source61.dtor_range;
                                RAST._IExpr _2195___mcc_h1708 = _source61.dtor_body;
                                return this;
                              } else if (_source61.is_Labelled) {
                                Dafny.ISequence<Dafny.Rune> _2196___mcc_h1712 = _source61.dtor_lbl;
                                RAST._IExpr _2197___mcc_h1713 = _source61.dtor_underlying;
                                return this;
                              } else if (_source61.is_Break) {
                                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2198___mcc_h1716 = _source61.dtor_optLbl;
                                return this;
                              } else if (_source61.is_Continue) {
                                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2199___mcc_h1718 = _source61.dtor_optLbl;
                                return this;
                              } else if (_source61.is_Return) {
                                Std.Wrappers._IOption<RAST._IExpr> _2200___mcc_h1720 = _source61.dtor_optExpr;
                                return this;
                              } else if (_source61.is_CallType) {
                                RAST._IExpr _2201___mcc_h1722 = _source61.dtor_obj;
                                Dafny.ISequence<RAST._IType> _2202___mcc_h1723 = _source61.dtor_typeParameters;
                                return this;
                              } else if (_source61.is_Call) {
                                RAST._IExpr _2203___mcc_h1726 = _source61.dtor_obj;
                                Dafny.ISequence<RAST._IExpr> _2204___mcc_h1727 = _source61.dtor_arguments;
                                return this;
                              } else if (_source61.is_Select) {
                                RAST._IExpr _2205___mcc_h1730 = _source61.dtor_obj;
                                Dafny.ISequence<Dafny.Rune> _2206___mcc_h1731 = _source61.dtor_name;
                                return this;
                              } else {
                                RAST._IExpr _2207___mcc_h1734 = _source61.dtor_obj;
                                Dafny.ISequence<Dafny.Rune> _2208___mcc_h1735 = _source61.dtor_name;
                                return this;
                              }
                            } else {
                              return this;
                            }
                          } else {
                            return this;
                          }
                        } else {
                          return this;
                        }
                      } else {
                        return this;
                      }
                    } else {
                      return this;
                    }
                  } else if (_source60.is_Match) {
                    RAST._IExpr _2209___mcc_h1530 = _source60.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _2210___mcc_h1531 = _source60.dtor_cases;
                    return this;
                  } else if (_source60.is_StmtExpr) {
                    RAST._IExpr _2211___mcc_h1534 = _source60.dtor_stmt;
                    RAST._IExpr _2212___mcc_h1535 = _source60.dtor_rhs;
                    return this;
                  } else if (_source60.is_Block) {
                    RAST._IExpr _2213___mcc_h1538 = _source60.dtor_underlying;
                    return this;
                  } else if (_source60.is_StructBuild) {
                    RAST._IExpr _2214___mcc_h1540 = _source60.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _2215___mcc_h1541 = _source60.dtor_assignments;
                    return this;
                  } else if (_source60.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _2216___mcc_h1544 = _source60.dtor_arguments;
                    return this;
                  } else if (_source60.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _2217___mcc_h1546 = _source60.dtor_op1;
                    RAST._IExpr _2218___mcc_h1547 = _source60.dtor_underlying;
                    DAST.Format._IUnOpFormat _2219___mcc_h1548 = _source60.dtor_format;
                    return this;
                  } else if (_source60.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _2220___mcc_h1552 = _source60.dtor_op2;
                    RAST._IExpr _2221___mcc_h1553 = _source60.dtor_left;
                    RAST._IExpr _2222___mcc_h1554 = _source60.dtor_right;
                    DAST.Format._IBinOpFormat _2223___mcc_h1555 = _source60.dtor_format2;
                    return this;
                  } else if (_source60.is_TypeAscription) {
                    RAST._IExpr _2224___mcc_h1560 = _source60.dtor_left;
                    RAST._IType _2225___mcc_h1561 = _source60.dtor_tpe;
                    return this;
                  } else if (_source60.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _2226___mcc_h1564 = _source60.dtor_value;
                    return this;
                  } else if (_source60.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _2227___mcc_h1566 = _source60.dtor_value;
                    bool _2228___mcc_h1567 = _source60.dtor_binary;
                    return this;
                  } else if (_source60.is_ConversionNum) {
                    RAST._IType _2229___mcc_h1570 = _source60.dtor_tpe;
                    RAST._IExpr _2230___mcc_h1571 = _source60.dtor_underlying;
                    return this;
                  } else if (_source60.is_DeclareVar) {
                    RAST._IDeclareType _2231___mcc_h1574 = _source60.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _2232___mcc_h1575 = _source60.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _2233___mcc_h1576 = _source60.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _2234___mcc_h1577 = _source60.dtor_optRhs;
                    return this;
                  } else if (_source60.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _2235___mcc_h1582 = _source60.dtor_name;
                    RAST._IExpr _2236___mcc_h1583 = _source60.dtor_rhs;
                    return this;
                  } else if (_source60.is_IfExpr) {
                    RAST._IExpr _2237___mcc_h1586 = _source60.dtor_cond;
                    RAST._IExpr _2238___mcc_h1587 = _source60.dtor_thn;
                    RAST._IExpr _2239___mcc_h1588 = _source60.dtor_els;
                    return this;
                  } else if (_source60.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _2240___mcc_h1592 = _source60.dtor_optCond;
                    RAST._IExpr _2241___mcc_h1593 = _source60.dtor_underlying;
                    return this;
                  } else if (_source60.is_For) {
                    Dafny.ISequence<Dafny.Rune> _2242___mcc_h1596 = _source60.dtor_name;
                    RAST._IExpr _2243___mcc_h1597 = _source60.dtor_range;
                    RAST._IExpr _2244___mcc_h1598 = _source60.dtor_body;
                    return this;
                  } else if (_source60.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _2245___mcc_h1602 = _source60.dtor_lbl;
                    RAST._IExpr _2246___mcc_h1603 = _source60.dtor_underlying;
                    return this;
                  } else if (_source60.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2247___mcc_h1606 = _source60.dtor_optLbl;
                    return this;
                  } else if (_source60.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2248___mcc_h1608 = _source60.dtor_optLbl;
                    return this;
                  } else if (_source60.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _2249___mcc_h1610 = _source60.dtor_optExpr;
                    return this;
                  } else if (_source60.is_CallType) {
                    RAST._IExpr _2250___mcc_h1612 = _source60.dtor_obj;
                    Dafny.ISequence<RAST._IType> _2251___mcc_h1613 = _source60.dtor_typeParameters;
                    return this;
                  } else if (_source60.is_Call) {
                    RAST._IExpr _2252___mcc_h1616 = _source60.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _2253___mcc_h1617 = _source60.dtor_arguments;
                    return this;
                  } else if (_source60.is_Select) {
                    RAST._IExpr _2254___mcc_h1620 = _source60.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _2255___mcc_h1621 = _source60.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _2256___mcc_h1624 = _source60.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _2257___mcc_h1625 = _source60.dtor_name;
                    return this;
                  }
                }
              }
            }
          } else if (_source56.is_Select) {
            RAST._IExpr _2258___mcc_h1628 = _source56.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2259___mcc_h1629 = _source56.dtor_name;
            return this;
          } else {
            RAST._IExpr _2260___mcc_h1632 = _source56.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2261___mcc_h1633 = _source56.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source39.is_DeclareVar) {
        RAST._IDeclareType _2262___mcc_h1072 = _source39.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2263___mcc_h1073 = _source39.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2264___mcc_h1074 = _source39.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2265___mcc_h1075 = _source39.dtor_optRhs;
        return this;
      } else if (_source39.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2266___mcc_h1080 = _source39.dtor_name;
        RAST._IExpr _2267___mcc_h1081 = _source39.dtor_rhs;
        return this;
      } else if (_source39.is_IfExpr) {
        RAST._IExpr _2268___mcc_h1084 = _source39.dtor_cond;
        RAST._IExpr _2269___mcc_h1085 = _source39.dtor_thn;
        RAST._IExpr _2270___mcc_h1086 = _source39.dtor_els;
        return this;
      } else if (_source39.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2271___mcc_h1090 = _source39.dtor_optCond;
        RAST._IExpr _2272___mcc_h1091 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_For) {
        Dafny.ISequence<Dafny.Rune> _2273___mcc_h1094 = _source39.dtor_name;
        RAST._IExpr _2274___mcc_h1095 = _source39.dtor_range;
        RAST._IExpr _2275___mcc_h1096 = _source39.dtor_body;
        return this;
      } else if (_source39.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2276___mcc_h1100 = _source39.dtor_lbl;
        RAST._IExpr _2277___mcc_h1101 = _source39.dtor_underlying;
        return this;
      } else if (_source39.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2278___mcc_h1104 = _source39.dtor_optLbl;
        return this;
      } else if (_source39.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2279___mcc_h1106 = _source39.dtor_optLbl;
        return this;
      } else if (_source39.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2280___mcc_h1108 = _source39.dtor_optExpr;
        return this;
      } else if (_source39.is_CallType) {
        RAST._IExpr _2281___mcc_h1110 = _source39.dtor_obj;
        Dafny.ISequence<RAST._IType> _2282___mcc_h1111 = _source39.dtor_typeParameters;
        return this;
      } else if (_source39.is_Call) {
        RAST._IExpr _2283___mcc_h1114 = _source39.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2284___mcc_h1115 = _source39.dtor_arguments;
        return this;
      } else if (_source39.is_Select) {
        RAST._IExpr _2285___mcc_h1118 = _source39.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2286___mcc_h1119 = _source39.dtor_name;
        return this;
      } else {
        RAST._IExpr _2287___mcc_h1122 = _source39.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2288___mcc_h1123 = _source39.dtor_name;
        return this;
      }
    }
    public bool LeftRequiresParentheses(RAST._IExpr left) {
      return ((this).printingInfo).NeedParenthesesForLeft((left).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left) {
      if ((this).LeftRequiresParentheses(left)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public bool RightRequiresParentheses(RAST._IExpr right) {
      return ((this).printingInfo).NeedParenthesesForRight((right).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right) {
      if ((this).RightRequiresParentheses(right)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier() {
      RAST._IExpr _source62 = this;
      if (_source62.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2289___mcc_h0 = _source62.dtor_content;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2290___mcc_h2 = _source62.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Match) {
        RAST._IExpr _2291___mcc_h4 = _source62.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2292___mcc_h5 = _source62.dtor_cases;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_StmtExpr) {
        RAST._IExpr _2293___mcc_h8 = _source62.dtor_stmt;
        RAST._IExpr _2294___mcc_h9 = _source62.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Block) {
        RAST._IExpr _2295___mcc_h12 = _source62.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_StructBuild) {
        RAST._IExpr _2296___mcc_h14 = _source62.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2297___mcc_h15 = _source62.dtor_assignments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2298___mcc_h18 = _source62.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2299___mcc_h20 = _source62.dtor_op1;
        RAST._IExpr _2300___mcc_h21 = _source62.dtor_underlying;
        DAST.Format._IUnOpFormat _2301___mcc_h22 = _source62.dtor_format;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2302___mcc_h26 = _source62.dtor_op2;
        RAST._IExpr _2303___mcc_h27 = _source62.dtor_left;
        RAST._IExpr _2304___mcc_h28 = _source62.dtor_right;
        DAST.Format._IBinOpFormat _2305___mcc_h29 = _source62.dtor_format2;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_TypeAscription) {
        RAST._IExpr _2306___mcc_h34 = _source62.dtor_left;
        RAST._IType _2307___mcc_h35 = _source62.dtor_tpe;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2308___mcc_h38 = _source62.dtor_value;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2309___mcc_h40 = _source62.dtor_value;
        bool _2310___mcc_h41 = _source62.dtor_binary;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_ConversionNum) {
        RAST._IType _2311___mcc_h44 = _source62.dtor_tpe;
        RAST._IExpr _2312___mcc_h45 = _source62.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_DeclareVar) {
        RAST._IDeclareType _2313___mcc_h48 = _source62.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2314___mcc_h49 = _source62.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2315___mcc_h50 = _source62.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2316___mcc_h51 = _source62.dtor_optRhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2317___mcc_h56 = _source62.dtor_name;
        RAST._IExpr _2318___mcc_h57 = _source62.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_IfExpr) {
        RAST._IExpr _2319___mcc_h60 = _source62.dtor_cond;
        RAST._IExpr _2320___mcc_h61 = _source62.dtor_thn;
        RAST._IExpr _2321___mcc_h62 = _source62.dtor_els;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2322___mcc_h66 = _source62.dtor_optCond;
        RAST._IExpr _2323___mcc_h67 = _source62.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_For) {
        Dafny.ISequence<Dafny.Rune> _2324___mcc_h70 = _source62.dtor_name;
        RAST._IExpr _2325___mcc_h71 = _source62.dtor_range;
        RAST._IExpr _2326___mcc_h72 = _source62.dtor_body;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2327___mcc_h76 = _source62.dtor_lbl;
        RAST._IExpr _2328___mcc_h77 = _source62.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2329___mcc_h80 = _source62.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2330___mcc_h82 = _source62.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2331___mcc_h84 = _source62.dtor_optExpr;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_CallType) {
        RAST._IExpr _2332___mcc_h86 = _source62.dtor_obj;
        Dafny.ISequence<RAST._IType> _2333___mcc_h87 = _source62.dtor_typeParameters;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Call) {
        RAST._IExpr _2334___mcc_h90 = _source62.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2335___mcc_h91 = _source62.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source62.is_Select) {
        RAST._IExpr _2336___mcc_h94 = _source62.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2337___mcc_h95 = _source62.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else {
        RAST._IExpr _2338___mcc_h98 = _source62.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2339___mcc_h99 = _source62.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2340_id = _2339___mcc_h99;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_2340_id);
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source63 = (this).Optimize();
      if (_source63.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2341___mcc_h0 = _source63.dtor_content;
        RAST._IExpr _2342_r = (this).Optimize();
        return RAST.__default.AddIndent((_2342_r).dtor_content, ind);
      } else if (_source63.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2343___mcc_h2 = _source63.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2344_name = _2343___mcc_h2;
        return _2344_name;
      } else if (_source63.is_Match) {
        RAST._IExpr _2345___mcc_h4 = _source63.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2346___mcc_h5 = _source63.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _2347_cases = _2346___mcc_h5;
        RAST._IExpr _2348_matchee = _2345___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_2348_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_2347_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_2349_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_2350_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2349_ind), RAST.__default.IND), (_2350_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2349_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source63.is_StmtExpr) {
        RAST._IExpr _2351___mcc_h8 = _source63.dtor_stmt;
        RAST._IExpr _2352___mcc_h9 = _source63.dtor_rhs;
        RAST._IExpr _2353_rhs = _2352___mcc_h9;
        RAST._IExpr _2354_stmt = _2351___mcc_h8;
        if (((_2354_stmt).is_RawExpr) && (((_2354_stmt).dtor_content).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_2353_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2354_stmt)._ToString(ind), (((_2354_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_2353_rhs)._ToString(ind));
        }
      } else if (_source63.is_Block) {
        RAST._IExpr _2355___mcc_h12 = _source63.dtor_underlying;
        RAST._IExpr _2356_underlying = _2355___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_2356_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source63.is_StructBuild) {
        RAST._IExpr _2357___mcc_h14 = _source63.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2358___mcc_h15 = _source63.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _2359_assignments = _2358___mcc_h15;
        RAST._IExpr _2360_name = _2357___mcc_h14;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_2360_name)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_2359_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_2361_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_2362_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2361_ind), RAST.__default.IND), (_2362_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2361_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_2359_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source63.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2363___mcc_h18 = _source63.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2364_arguments = _2363___mcc_h18;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_2364_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2365_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2366_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _2365_ind), RAST.__default.IND), (_2366_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2365_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_2364_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source63.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2367___mcc_h20 = _source63.dtor_op1;
        RAST._IExpr _2368___mcc_h21 = _source63.dtor_underlying;
        DAST.Format._IUnOpFormat _2369___mcc_h22 = _source63.dtor_format;
        DAST.Format._IUnOpFormat _2370_format = _2369___mcc_h22;
        RAST._IExpr _2371_underlying = _2368___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2372_op = _2367___mcc_h20;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs41 = ((((this).printingInfo).NeedParenthesesFor((_2371_underlying).printingInfo)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _2373_leftP = _let_tmp_rhs41.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2374_rightP = _let_tmp_rhs41.dtor__1;
        Dafny.ISequence<Dafny.Rune> _2375_leftOp = ((((_2372_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) && (!(_2373_leftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2372_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : ((((_2372_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (_2372_op))));
        Dafny.ISequence<Dafny.Rune> _2376_rightOp = (((_2372_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (_2372_op) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2375_leftOp, _2373_leftP), (_2371_underlying)._ToString(ind)), _2374_rightP), _2376_rightOp);
      } else if (_source63.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2377___mcc_h26 = _source63.dtor_op2;
        RAST._IExpr _2378___mcc_h27 = _source63.dtor_left;
        RAST._IExpr _2379___mcc_h28 = _source63.dtor_right;
        DAST.Format._IBinOpFormat _2380___mcc_h29 = _source63.dtor_format2;
        DAST.Format._IBinOpFormat _2381_format = _2380___mcc_h29;
        RAST._IExpr _2382_right = _2379___mcc_h28;
        RAST._IExpr _2383_left = _2378___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _2384_op2 = _2377___mcc_h26;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs42 = (this).LeftParentheses(_2383_left);
        Dafny.ISequence<Dafny.Rune> _2385_leftLeftP = _let_tmp_rhs42.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2386_leftRighP = _let_tmp_rhs42.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs43 = (this).RightParentheses(_2382_right);
        Dafny.ISequence<Dafny.Rune> _2387_rightLeftP = _let_tmp_rhs43.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2388_rightRightP = _let_tmp_rhs43.dtor__1;
        Dafny.ISequence<Dafny.Rune> _2389_opRendered = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _2384_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
        Dafny.ISequence<Dafny.Rune> _2390_indLeft = (((_2385_leftLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        Dafny.ISequence<Dafny.Rune> _2391_indRight = (((_2387_rightLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2385_leftLeftP, (_2383_left)._ToString(_2390_indLeft)), _2386_leftRighP), _2389_opRendered), _2387_rightLeftP), (_2382_right)._ToString(_2391_indRight)), _2388_rightRightP);
      } else if (_source63.is_TypeAscription) {
        RAST._IExpr _2392___mcc_h34 = _source63.dtor_left;
        RAST._IType _2393___mcc_h35 = _source63.dtor_tpe;
        RAST._IType _2394_tpe = _2393___mcc_h35;
        RAST._IExpr _2395_left = _2392___mcc_h34;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs44 = (this).LeftParentheses(_2395_left);
        Dafny.ISequence<Dafny.Rune> _2396_leftLeftP = _let_tmp_rhs44.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2397_leftRightP = _let_tmp_rhs44.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2396_leftLeftP, (_2395_left)._ToString(RAST.__default.IND)), _2397_leftRightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_2394_tpe)._ToString(RAST.__default.IND));
      } else if (_source63.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2398___mcc_h38 = _source63.dtor_value;
        Dafny.ISequence<Dafny.Rune> _2399_number = _2398___mcc_h38;
        return _2399_number;
      } else if (_source63.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2400___mcc_h40 = _source63.dtor_value;
        bool _2401___mcc_h41 = _source63.dtor_binary;
        bool _2402_binary = _2401___mcc_h41;
        Dafny.ISequence<Dafny.Rune> _2403_characters = _2400___mcc_h40;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((_2402_binary) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("b")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), _2403_characters), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source63.is_ConversionNum) {
        RAST._IType _2404___mcc_h44 = _source63.dtor_tpe;
        RAST._IExpr _2405___mcc_h45 = _source63.dtor_underlying;
        RAST._IExpr _2406_expr = _2405___mcc_h45;
        RAST._IType _2407_tpe = _2404___mcc_h44;
        if (((((((((((_2407_tpe).is_U8) || ((_2407_tpe).is_U16)) || ((_2407_tpe).is_U32)) || ((_2407_tpe).is_U64)) || ((_2407_tpe).is_U128)) || ((_2407_tpe).is_I8)) || ((_2407_tpe).is_I16)) || ((_2407_tpe).is_I32)) || ((_2407_tpe).is_I64)) || ((_2407_tpe).is_I128)) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("num::ToPrimitive::to_"), (_2407_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2406_expr)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<b>Unsupported: Numeric conversion to "), (_2407_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</b>"));
        }
      } else if (_source63.is_DeclareVar) {
        RAST._IDeclareType _2408___mcc_h48 = _source63.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2409___mcc_h49 = _source63.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2410___mcc_h50 = _source63.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2411___mcc_h51 = _source63.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _2412_optExpr = _2411___mcc_h51;
        Std.Wrappers._IOption<RAST._IType> _2413_optType = _2410___mcc_h50;
        Dafny.ISequence<Dafny.Rune> _2414_name = _2409___mcc_h49;
        RAST._IDeclareType _2415_declareType = _2408___mcc_h48;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_2415_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _2414_name), (((_2413_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_2413_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_2412_optExpr).is_Some) ? (Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(((_2412_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)), _pat_let6_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_pat_let6_0, _2416_optExprString => (((_2416_optExprString).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("= /*issue with empty RHS*/"), ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_source64) => {
          if (_source64.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _2417___mcc_h102 = _source64.dtor_content;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty Raw expr");
          } else if (_source64.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _2418___mcc_h104 = _source64.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Match) {
            RAST._IExpr _2419___mcc_h106 = _source64.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _2420___mcc_h107 = _source64.dtor_cases;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_StmtExpr) {
            RAST._IExpr _2421___mcc_h110 = _source64.dtor_stmt;
            RAST._IExpr _2422___mcc_h111 = _source64.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Block) {
            RAST._IExpr _2423___mcc_h114 = _source64.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_StructBuild) {
            RAST._IExpr _2424___mcc_h116 = _source64.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _2425___mcc_h117 = _source64.dtor_assignments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _2426___mcc_h120 = _source64.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _2427___mcc_h122 = _source64.dtor_op1;
            RAST._IExpr _2428___mcc_h123 = _source64.dtor_underlying;
            DAST.Format._IUnOpFormat _2429___mcc_h124 = _source64.dtor_format;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _2430___mcc_h128 = _source64.dtor_op2;
            RAST._IExpr _2431___mcc_h129 = _source64.dtor_left;
            RAST._IExpr _2432___mcc_h130 = _source64.dtor_right;
            DAST.Format._IBinOpFormat _2433___mcc_h131 = _source64.dtor_format2;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_TypeAscription) {
            RAST._IExpr _2434___mcc_h136 = _source64.dtor_left;
            RAST._IType _2435___mcc_h137 = _source64.dtor_tpe;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _2436___mcc_h140 = _source64.dtor_value;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty int literal");
          } else if (_source64.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _2437___mcc_h142 = _source64.dtor_value;
            bool _2438___mcc_h143 = _source64.dtor_binary;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty string literal");
          } else if (_source64.is_ConversionNum) {
            RAST._IType _2439___mcc_h146 = _source64.dtor_tpe;
            RAST._IExpr _2440___mcc_h147 = _source64.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_DeclareVar) {
            RAST._IDeclareType _2441___mcc_h150 = _source64.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _2442___mcc_h151 = _source64.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _2443___mcc_h152 = _source64.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _2444___mcc_h153 = _source64.dtor_optRhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _2445___mcc_h158 = _source64.dtor_name;
            RAST._IExpr _2446___mcc_h159 = _source64.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_IfExpr) {
            RAST._IExpr _2447___mcc_h162 = _source64.dtor_cond;
            RAST._IExpr _2448___mcc_h163 = _source64.dtor_thn;
            RAST._IExpr _2449___mcc_h164 = _source64.dtor_els;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _2450___mcc_h168 = _source64.dtor_optCond;
            RAST._IExpr _2451___mcc_h169 = _source64.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_For) {
            Dafny.ISequence<Dafny.Rune> _2452___mcc_h172 = _source64.dtor_name;
            RAST._IExpr _2453___mcc_h173 = _source64.dtor_range;
            RAST._IExpr _2454___mcc_h174 = _source64.dtor_body;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _2455___mcc_h178 = _source64.dtor_lbl;
            RAST._IExpr _2456___mcc_h179 = _source64.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2457___mcc_h182 = _source64.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2458___mcc_h184 = _source64.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _2459___mcc_h186 = _source64.dtor_optExpr;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_CallType) {
            RAST._IExpr _2460___mcc_h188 = _source64.dtor_obj;
            Dafny.ISequence<RAST._IType> _2461___mcc_h189 = _source64.dtor_typeParameters;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Call) {
            RAST._IExpr _2462___mcc_h192 = _source64.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _2463___mcc_h193 = _source64.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source64.is_Select) {
            RAST._IExpr _2464___mcc_h196 = _source64.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2465___mcc_h197 = _source64.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else {
            RAST._IExpr _2466___mcc_h200 = _source64.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2467___mcc_h201 = _source64.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          }
        }))((_2412_optExpr).dtor_value))) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), _2416_optExprString)))))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source63.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2468___mcc_h56 = _source63.dtor_name;
        RAST._IExpr _2469___mcc_h57 = _source63.dtor_rhs;
        RAST._IExpr _2470_expr = _2469___mcc_h57;
        Dafny.ISequence<Dafny.Rune> _2471_name = _2468___mcc_h56;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2471_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_2470_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source63.is_IfExpr) {
        RAST._IExpr _2472___mcc_h60 = _source63.dtor_cond;
        RAST._IExpr _2473___mcc_h61 = _source63.dtor_thn;
        RAST._IExpr _2474___mcc_h62 = _source63.dtor_els;
        RAST._IExpr _2475_els = _2474___mcc_h62;
        RAST._IExpr _2476_thn = _2473___mcc_h61;
        RAST._IExpr _2477_cond = _2472___mcc_h60;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_2477_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2476_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")), ((object.Equals(_2475_els, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" else {\n"), ind), RAST.__default.IND), (_2475_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}")))));
      } else if (_source63.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2478___mcc_h66 = _source63.dtor_optCond;
        RAST._IExpr _2479___mcc_h67 = _source63.dtor_underlying;
        RAST._IExpr _2480_underlying = _2479___mcc_h67;
        Std.Wrappers._IOption<RAST._IExpr> _2481_optCond = _2478___mcc_h66;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source65) => {
          if (_source65.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _2482___mcc_h204 = _source65.dtor_value;
            RAST._IExpr _2483_c = _2482___mcc_h204;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_2483_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_2481_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2480_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source63.is_For) {
        Dafny.ISequence<Dafny.Rune> _2484___mcc_h70 = _source63.dtor_name;
        RAST._IExpr _2485___mcc_h71 = _source63.dtor_range;
        RAST._IExpr _2486___mcc_h72 = _source63.dtor_body;
        RAST._IExpr _2487_body = _2486___mcc_h72;
        RAST._IExpr _2488_range = _2485___mcc_h71;
        Dafny.ISequence<Dafny.Rune> _2489_name = _2484___mcc_h70;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _2489_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_2488_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2487_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source63.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2490___mcc_h76 = _source63.dtor_lbl;
        RAST._IExpr _2491___mcc_h77 = _source63.dtor_underlying;
        RAST._IExpr _2492_underlying = _2491___mcc_h77;
        Dafny.ISequence<Dafny.Rune> _2493_name = _2490___mcc_h76;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _2493_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_2492_underlying)._ToString(ind));
      } else if (_source63.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2494___mcc_h80 = _source63.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2495_optLbl = _2494___mcc_h80;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source66 = _2495_optLbl;
        if (_source66.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2496___mcc_h205 = _source66.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2497_lbl = _2496___mcc_h205;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _2497_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source63.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2498___mcc_h82 = _source63.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2499_optLbl = _2498___mcc_h82;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source67 = _2499_optLbl;
        if (_source67.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2500___mcc_h206 = _source67.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2501_lbl = _2500___mcc_h206;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _2501_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source63.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2502___mcc_h84 = _source63.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _2503_optExpr = _2502___mcc_h84;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_2503_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_2503_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source63.is_CallType) {
        RAST._IExpr _2504___mcc_h86 = _source63.dtor_obj;
        Dafny.ISequence<RAST._IType> _2505___mcc_h87 = _source63.dtor_typeParameters;
        Dafny.ISequence<RAST._IType> _2506_tpes = _2505___mcc_h87;
        RAST._IExpr _2507_expr = _2504___mcc_h86;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs45 = (this).LeftParentheses(_2507_expr);
        Dafny.ISequence<Dafny.Rune> _2508_leftP = _let_tmp_rhs45.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2509_rightP = _let_tmp_rhs45.dtor__1;
        if ((_2506_tpes).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return (_2507_expr)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2508_leftP, (_2507_expr)._ToString(ind)), _2509_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<")), RAST.__default.SeqToString<RAST._IType>(_2506_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_2510_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_2511_tpe) => {
            return (_2511_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2510_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source63.is_Call) {
        RAST._IExpr _2512___mcc_h90 = _source63.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2513___mcc_h91 = _source63.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2514_args = _2513___mcc_h91;
        RAST._IExpr _2515_expr = _2512___mcc_h90;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs46 = (this).LeftParentheses(_2515_expr);
        Dafny.ISequence<Dafny.Rune> _2516_leftP = _let_tmp_rhs46.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2517_rightP = _let_tmp_rhs46.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs47 = ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>)((_source68) => {
          if (_source68.is_None) {
            return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else {
            Dafny.ISequence<Dafny.Rune> _2518___mcc_h207 = _source68.dtor_value;
            if (object.Equals(_2518___mcc_h207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2518___mcc_h207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2518___mcc_h207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else if (object.Equals(_2518___mcc_h207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
        }))((_2515_expr).RightMostIdentifier());
        Dafny.ISequence<Dafny.Rune> _2519_leftCallP = _let_tmp_rhs47.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2520_rightCallP = _let_tmp_rhs47.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2516_leftP, (_2515_expr)._ToString(ind)), _2517_rightP), _2519_leftCallP), RAST.__default.SeqToString<RAST._IExpr>(_2514_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2521_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2522_arg) => {
          return (_2522_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2521_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), _2520_rightCallP);
      } else if (_source63.is_Select) {
        RAST._IExpr _2523___mcc_h94 = _source63.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2524___mcc_h95 = _source63.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2525_name = _2524___mcc_h95;
        RAST._IExpr _2526_expression = _2523___mcc_h94;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs48 = (this).LeftParentheses(_2526_expression);
        Dafny.ISequence<Dafny.Rune> _2527_leftP = _let_tmp_rhs48.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2528_rightP = _let_tmp_rhs48.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2527_leftP, (_2526_expression)._ToString(ind)), _2528_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2525_name);
      } else {
        RAST._IExpr _2529___mcc_h98 = _source63.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2530___mcc_h99 = _source63.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2531_name = _2530___mcc_h99;
        RAST._IExpr _2532_expression = _2529___mcc_h98;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs49 = (this).LeftParentheses(_2532_expression);
        Dafny.ISequence<Dafny.Rune> _2533_leftP = _let_tmp_rhs49.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2534_rightP = _let_tmp_rhs49.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2533_leftP, (_2532_expression)._ToString(ind)), _2534_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2531_name);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
    public RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_Select(this, name);
    }
    public RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_MemberSelect(this, name);
    }
    public RAST._IExpr ApplyType(Dafny.ISequence<RAST._IType> typeParameters) {
      return RAST.Expr.create_CallType(this, typeParameters);
    }
    public RAST._IExpr ApplyType1(RAST._IType typeParameter) {
      return RAST.Expr.create_CallType(this, Dafny.Sequence<RAST._IType>.FromElements(typeParameter));
    }
    public RAST._IExpr Apply(Dafny.ISequence<RAST._IExpr> arguments) {
      return RAST.Expr.create_Call(this, arguments);
    }
    public RAST._IExpr Apply1(RAST._IExpr argument) {
      return RAST.Expr.create_Call(this, Dafny.Sequence<RAST._IExpr>.FromElements(argument));
    }
    public RAST._IPrintingInfo printingInfo { get {
      RAST._IExpr _source69 = this;
      if (_source69.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2535___mcc_h0 = _source69.dtor_content;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2536___mcc_h2 = _source69.dtor_name;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source69.is_Match) {
        RAST._IExpr _2537___mcc_h4 = _source69.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2538___mcc_h5 = _source69.dtor_cases;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_StmtExpr) {
        RAST._IExpr _2539___mcc_h8 = _source69.dtor_stmt;
        RAST._IExpr _2540___mcc_h9 = _source69.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_Block) {
        RAST._IExpr _2541___mcc_h12 = _source69.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_StructBuild) {
        RAST._IExpr _2542___mcc_h14 = _source69.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2543___mcc_h15 = _source69.dtor_assignments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2544___mcc_h18 = _source69.dtor_arguments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2545___mcc_h20 = _source69.dtor_op1;
        RAST._IExpr _2546___mcc_h21 = _source69.dtor_underlying;
        DAST.Format._IUnOpFormat _2547___mcc_h22 = _source69.dtor_format;
        DAST.Format._IUnOpFormat _2548_format = _2547___mcc_h22;
        RAST._IExpr _2549_underlying = _2546___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2550_op = _2545___mcc_h20;
        if (object.Equals(_2550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) {
          return RAST.PrintingInfo.create_SuffixPrecedence(new BigInteger(5));
        } else if (object.Equals(_2550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2550_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else {
          return RAST.PrintingInfo.create_UnknownPrecedence();
        }
      } else if (_source69.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2551___mcc_h26 = _source69.dtor_op2;
        RAST._IExpr _2552___mcc_h27 = _source69.dtor_left;
        RAST._IExpr _2553___mcc_h28 = _source69.dtor_right;
        DAST.Format._IBinOpFormat _2554___mcc_h29 = _source69.dtor_format2;
        DAST.Format._IBinOpFormat _2555_format = _2554___mcc_h29;
        RAST._IExpr _2556_right = _2553___mcc_h28;
        RAST._IExpr _2557_left = _2552___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _2558_op2 = _2551___mcc_h26;
        if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(50), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(60), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(70), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(90), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(100), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".."))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2558_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(BigInteger.Zero, RAST.Associativity.create_RequiresParentheses());
        }
      } else if (_source69.is_TypeAscription) {
        RAST._IExpr _2559___mcc_h34 = _source69.dtor_left;
        RAST._IType _2560___mcc_h35 = _source69.dtor_tpe;
        RAST._IType _2561_tpe = _2560___mcc_h35;
        RAST._IExpr _2562_left = _2559___mcc_h34;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(10), RAST.Associativity.create_LeftToRight());
      } else if (_source69.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2563___mcc_h38 = _source69.dtor_value;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source69.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2564___mcc_h40 = _source69.dtor_value;
        bool _2565___mcc_h41 = _source69.dtor_binary;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source69.is_ConversionNum) {
        RAST._IType _2566___mcc_h44 = _source69.dtor_tpe;
        RAST._IExpr _2567___mcc_h45 = _source69.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_DeclareVar) {
        RAST._IDeclareType _2568___mcc_h48 = _source69.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2569___mcc_h49 = _source69.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2570___mcc_h50 = _source69.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2571___mcc_h51 = _source69.dtor_optRhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2572___mcc_h56 = _source69.dtor_name;
        RAST._IExpr _2573___mcc_h57 = _source69.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_IfExpr) {
        RAST._IExpr _2574___mcc_h60 = _source69.dtor_cond;
        RAST._IExpr _2575___mcc_h61 = _source69.dtor_thn;
        RAST._IExpr _2576___mcc_h62 = _source69.dtor_els;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2577___mcc_h66 = _source69.dtor_optCond;
        RAST._IExpr _2578___mcc_h67 = _source69.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_For) {
        Dafny.ISequence<Dafny.Rune> _2579___mcc_h70 = _source69.dtor_name;
        RAST._IExpr _2580___mcc_h71 = _source69.dtor_range;
        RAST._IExpr _2581___mcc_h72 = _source69.dtor_body;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2582___mcc_h76 = _source69.dtor_lbl;
        RAST._IExpr _2583___mcc_h77 = _source69.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2584___mcc_h80 = _source69.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2585___mcc_h82 = _source69.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2586___mcc_h84 = _source69.dtor_optExpr;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source69.is_CallType) {
        RAST._IExpr _2587___mcc_h86 = _source69.dtor_obj;
        Dafny.ISequence<RAST._IType> _2588___mcc_h87 = _source69.dtor_typeParameters;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source69.is_Call) {
        RAST._IExpr _2589___mcc_h90 = _source69.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2590___mcc_h91 = _source69.dtor_arguments;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source69.is_Select) {
        RAST._IExpr _2591___mcc_h94 = _source69.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2592___mcc_h95 = _source69.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2593_name = _2592___mcc_h95;
        RAST._IExpr _2594_underlying = _2591___mcc_h94;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else {
        RAST._IExpr _2595___mcc_h98 = _source69.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2596___mcc_h99 = _source69.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2597_name = _2596___mcc_h99;
        RAST._IExpr _2598_underlying = _2595___mcc_h98;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      }
    } }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Identifier : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Identifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Identifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Identifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Identifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly RAST._IExpr _underlying;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(RAST._IExpr underlying, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._underlying = underlying;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_underlying, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._underlying, oth._underlying) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_TypeAscription : Expr {
    public readonly RAST._IExpr _left;
    public readonly RAST._IType _tpe;
    public Expr_TypeAscription(RAST._IExpr left, RAST._IType tpe) : base() {
      this._left = left;
      this._tpe = tpe;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_TypeAscription(_left, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_TypeAscription;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.TypeAscription";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralString : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public readonly bool _binary;
    public Expr_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) : base() {
      this._value = @value;
      this._binary = binary;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralString(_value, _binary);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralString;
      return oth != null && object.Equals(this._value, oth._value) && this._binary == oth._binary;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._binary));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralString";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._binary);
      s += ")";
      return s;
    }
  }
  public class Expr_ConversionNum : Expr {
    public readonly RAST._IType _tpe;
    public readonly RAST._IExpr _underlying;
    public Expr_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) : base() {
      this._tpe = tpe;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_ConversionNum(_tpe, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_ConversionNum;
      return oth != null && object.Equals(this._tpe, oth._tpe) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.ConversionNum";
      s += "(";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_CallType : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public Expr_CallType(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_CallType(_obj, _typeParameters);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_CallType;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.CallType";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Select : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Select(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Select;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_MemberSelect : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_MemberSelect(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_MemberSelect;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.MemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_2599_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_2600_formal) => {
        return (_2600_formal)._ToString(_2599_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source70) => {
        if (_source70.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _2601___mcc_h0 = _source70.dtor_value;
          RAST._IType _2602_t = _2601___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_2602_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source71) => {
        if (_source71.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _2603___mcc_h2 = _source71.dtor_value;
          RAST._IExpr _2604_body = _2603___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_2604_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2605___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2605___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _2605___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2605___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _2605___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2605___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2606___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2606___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _2606___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2606___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _2606___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2606___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i))) && (!(DCOMP.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _2607_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _2607_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static bool UnicodeChars { get {
      return true;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMP.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> dtor_ownerships { get; }
    _IEnvironment DowncastClone();
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMP._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMP._IOwnership ownership);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _ownerships;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      this._names = names;
      this._ownerships = ownerships;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_names, _ownerships);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Environment;
      return oth != null && object.Equals(this._names, oth._names) && object.Equals(this._ownerships, oth._ownerships);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ownerships));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ownerships);
      s += ")";
      return s;
    }
    private static readonly DCOMP._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Empty);
    public static DCOMP._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMP._IEnvironment>(DCOMP.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMP._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      return new Environment(names, ownerships);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      return create(names, ownerships);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> dtor_ownerships {
      get {
        return this._ownerships;
      }
    }
    public static DCOMP._IEnvironment Empty() {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements());
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Select((this).dtor_ownerships,name), DCOMP.Ownership.create_OwnershipBorrowed()));
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Select((this).dtor_ownerships,name), DCOMP.Ownership.create_OwnershipBorrowedMut()));
    }
    public DCOMP._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMP._IOwnership ownership)
    {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update((this).dtor_ownerships, name, ownership));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _2608_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _2608_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _2608_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _2609_i;
      _2609_i = BigInteger.Zero;
      while ((_2609_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _2610_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source72 = (body).Select(_2609_i);
        if (_source72.is_Module) {
          DAST._IModule _2611___mcc_h0 = _source72.dtor_Module_a0;
          DAST._IModule _2612_m = _2611___mcc_h0;
          RAST._IMod _2613_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_2612_m, containingPath);
          _2613_mm = _out16;
          _2610_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_2613_mm));
        } else if (_source72.is_Class) {
          DAST._IClass _2614___mcc_h1 = _source72.dtor_Class_a0;
          DAST._IClass _2615_c = _2614___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_2615_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_2615_c).dtor_name)));
          _2610_generated = _out17;
        } else if (_source72.is_Trait) {
          DAST._ITrait _2616___mcc_h2 = _source72.dtor_Trait_a0;
          DAST._ITrait _2617_t = _2616___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _2618_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_2617_t, containingPath);
          _2618_tt = _out18;
          _2610_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_2618_tt));
        } else if (_source72.is_Newtype) {
          DAST._INewtype _2619___mcc_h3 = _source72.dtor_Newtype_a0;
          DAST._INewtype _2620_n = _2619___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_2620_n);
          _2610_generated = _out19;
        } else {
          DAST._IDatatype _2621___mcc_h4 = _source72.dtor_Datatype_a0;
          DAST._IDatatype _2622_d = _2621___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_2622_d);
          _2610_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _2610_generated);
        _2609_i = (_2609_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _2623_tpI;
      _2623_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_2623_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _2624_tp;
          _2624_tp = (@params).Select(_2623_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2624_tp));
          RAST._IType _2625_genTp;
          RAST._IType _out21;
          _out21 = DCOMP.COMP.GenType(_2624_tp, false, false);
          _2625_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2625_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _2623_tpI = (_2623_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _2626_baseConstraints;
      _2626_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _2626_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2627_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2628_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2629_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2630_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _2627_typeParamsSet = _out22;
      _2628_sTypeParams = _out23;
      _2629_sConstrainedTypeParams = _out24;
      _2630_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _2631_constrainedTypeParams;
      _2631_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2629_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _2632_fields;
      _2632_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _2633_fieldInits;
      _2633_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _2634_fieldI;
      _2634_fieldI = BigInteger.Zero;
      while ((_2634_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _2635_field;
        _2635_field = ((c).dtor_fields).Select(_2634_fieldI);
        RAST._IType _2636_fieldType;
        RAST._IType _out26;
        _out26 = DCOMP.COMP.GenType(((_2635_field).dtor_formal).dtor_typ, false, false);
        _2636_fieldType = _out26;
        _2632_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2632_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_2635_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_2636_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source73 = (_2635_field).dtor_defaultValue;
        if (_source73.is_None) {
          {
            RAST._IExpr _2637_RefCellNew;
            _2637_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            RAST._IExpr _2638_default;
            _2638_default = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"));
            _2633_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2633_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2635_field).dtor_formal).dtor_name), (_2637_RefCellNew).Apply1((_2638_default).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())))));
          }
        } else {
          DAST._IExpression _2639___mcc_h0 = _source73.dtor_value;
          DAST._IExpression _2640_e = _2639___mcc_h0;
          {
            RAST._IExpr _2641_expr;
            DCOMP._IOwnership _2642___v36;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2643___v37;
            RAST._IExpr _out27;
            DCOMP._IOwnership _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_2640_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out27, out _out28, out _out29);
            _2641_expr = _out27;
            _2642___v36 = _out28;
            _2643___v37 = _out29;
            RAST._IExpr _2644_RefCellNew;
            _2644_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            _2633_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2633_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2635_field).dtor_formal).dtor_name), (_2644_RefCellNew).Apply1(_2641_expr))));
          }
        }
        _2634_fieldI = (_2634_fieldI) + (BigInteger.One);
      }
      BigInteger _2645_typeParamI;
      _2645_typeParamI = BigInteger.Zero;
      while ((_2645_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _2646_tpeGen;
        RAST._IType _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2645_typeParamI), false, false);
        _2646_tpeGen = _out30;
        _2632_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2632_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2645_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2646_tpeGen)))));
        _2633_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2633_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2645_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _2645_typeParamI = (_2645_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2647_datatypeName;
      _2647_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      RAST._IStruct _2648_struct;
      _2648_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _2647_datatypeName, _2628_sTypeParams, RAST.Formals.create_NamedFormals(_2632_fields));
      Dafny.ISequence<RAST._IType> _2649_typeParamsAsTypes;
      _2649_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2650_typeParam) => {
        return RAST.__default.RawType((_2650_typeParam).dtor_content);
      })), _2628_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_2648_struct));
      Dafny.ISequence<RAST._IImplMember> _2651_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2652_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _2627_typeParamsSet, out _out31, out _out32);
      _2651_implBodyRaw = _out31;
      _2652_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _2653_implBody;
      _2653_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(RAST.Expr.create_Identifier(_2647_datatypeName), _2633_fieldInits))))), _2651_implBodyRaw);
      RAST._IImpl _2654_i;
      _2654_i = RAST.Impl.create_Impl(_2629_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2647_datatypeName), _2649_typeParamsAsTypes), _2630_whereConstraints, _2653_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2654_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _2655_i;
        _2655_i = BigInteger.Zero;
        while ((_2655_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _2656_superClass;
          _2656_superClass = ((c).dtor_superClasses).Select(_2655_i);
          DAST._IType _source74 = _2656_superClass;
          if (_source74.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2657___mcc_h1 = _source74.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2658___mcc_h2 = _source74.dtor_typeArgs;
            DAST._IResolvedType _2659___mcc_h3 = _source74.dtor_resolved;
            DAST._IResolvedType _source75 = _2659___mcc_h3;
            if (_source75.is_Datatype) {
              DAST._IDatatypeType _2660___mcc_h7 = _source75.dtor_datatypeType;
            } else if (_source75.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2661___mcc_h9 = _source75.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _2662___mcc_h10 = _source75.dtor_attributes;
              Dafny.ISequence<DAST._IType> _2663_typeArgs = _2658___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2664_traitPath = _2657___mcc_h1;
              {
                RAST._IType _2665_pathStr;
                RAST._IType _out33;
                _out33 = DCOMP.COMP.GenPath(_2664_traitPath);
                _2665_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _2666_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_2663_typeArgs, false, false);
                _2666_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _2667_body;
                _2667_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_2652_traitBodies).Contains(_2664_traitPath)) {
                  _2667_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_2652_traitBodies,_2664_traitPath);
                }
                RAST._IType _2668_genSelfPath;
                RAST._IType _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _2668_genSelfPath = _out35;
                RAST._IModDecl _2669_x;
                _2669_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2629_sConstrainedTypeParams, RAST.Type.create_TypeApp(_2665_pathStr, _2666_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_2668_genSelfPath, _2649_typeParamsAsTypes)), _2630_whereConstraints, _2667_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_2669_x));
              }
            } else {
              DAST._IType _2670___mcc_h13 = _source75.dtor_baseType;
              DAST._INewtypeRange _2671___mcc_h14 = _source75.dtor_range;
              bool _2672___mcc_h15 = _source75.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _2673___mcc_h16 = _source75.dtor_attributes;
            }
          } else if (_source74.is_Nullable) {
            DAST._IType _2674___mcc_h21 = _source74.dtor_Nullable_a0;
          } else if (_source74.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2675___mcc_h23 = _source74.dtor_Tuple_a0;
          } else if (_source74.is_Array) {
            DAST._IType _2676___mcc_h25 = _source74.dtor_element;
            BigInteger _2677___mcc_h26 = _source74.dtor_dims;
          } else if (_source74.is_Seq) {
            DAST._IType _2678___mcc_h29 = _source74.dtor_element;
          } else if (_source74.is_Set) {
            DAST._IType _2679___mcc_h31 = _source74.dtor_element;
          } else if (_source74.is_Multiset) {
            DAST._IType _2680___mcc_h33 = _source74.dtor_element;
          } else if (_source74.is_Map) {
            DAST._IType _2681___mcc_h35 = _source74.dtor_key;
            DAST._IType _2682___mcc_h36 = _source74.dtor_value;
          } else if (_source74.is_SetBuilder) {
            DAST._IType _2683___mcc_h39 = _source74.dtor_element;
          } else if (_source74.is_MapBuilder) {
            DAST._IType _2684___mcc_h41 = _source74.dtor_key;
            DAST._IType _2685___mcc_h42 = _source74.dtor_value;
          } else if (_source74.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2686___mcc_h45 = _source74.dtor_args;
            DAST._IType _2687___mcc_h46 = _source74.dtor_result;
          } else if (_source74.is_Primitive) {
            DAST._IPrimitive _2688___mcc_h49 = _source74.dtor_Primitive_a0;
          } else if (_source74.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2689___mcc_h51 = _source74.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _2690___mcc_h53 = _source74.dtor_TypeArg_a0;
          }
          _2655_i = (_2655_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _2691_d;
      _2691_d = RAST.Impl.create_ImplFor(_2629_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2647_datatypeName), _2649_typeParamsAsTypes), _2630_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(_2647_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _2692_defaultImpl;
      _2692_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2691_d));
      RAST._IImpl _2693_p;
      _2693_p = RAST.Impl.create_ImplFor(_2629_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2647_datatypeName), _2649_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _2694_printImpl;
      _2694_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2693_p));
      RAST._IImpl _2695_pp;
      _2695_pp = RAST.Impl.create_ImplFor(_2628_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2647_datatypeName), _2649_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.SelfBorrowed)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _2696_ptrPartialEqImpl;
      _2696_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2695_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _2692_defaultImpl), _2694_printImpl), _2696_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _2697_typeParamsSet;
      _2697_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _2698_typeParams;
      _2698_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2699_tpI;
      _2699_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_2699_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _2700_tp;
          _2700_tp = ((t).dtor_typeParams).Select(_2699_tpI);
          _2697_typeParamsSet = Dafny.Set<DAST._IType>.Union(_2697_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2700_tp));
          RAST._IType _2701_genTp;
          RAST._IType _out36;
          _out36 = DCOMP.COMP.GenType(_2700_tp, false, false);
          _2701_genTp = _out36;
          _2698_typeParams = Dafny.Sequence<RAST._IType>.Concat(_2698_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2701_genTp));
          _2699_tpI = (_2699_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2702_fullPath;
      _2702_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _2703_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2704___v41;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_2702_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_2702_fullPath, (t).dtor_attributes)), _2697_typeParamsSet, out _out37, out _out38);
      _2703_implBody = _out37;
      _2704___v41 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((t).dtor_name)), _2698_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2703_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2705_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2706_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2707_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2708_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _2705_typeParamsSet = _out39;
      _2706_sTypeParams = _out40;
      _2707_sConstrainedTypeParams = _out41;
      _2708_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _2709_typeParamsAsTypes;
      _2709_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2710_t) => {
        return RAST.__default.RawType((_2710_t).dtor_content);
      })), _2706_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2711_constrainedTypeParams;
      _2711_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2707_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _2712_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source76 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source76.is_None) {
        RAST._IType _out43;
        _out43 = DCOMP.COMP.GenType((c).dtor_base, false, false);
        _2712_underlyingType = _out43;
      } else {
        RAST._IType _2713___mcc_h0 = _source76.dtor_value;
        RAST._IType _2714_v = _2713___mcc_h0;
        _2712_underlyingType = _2714_v;
      }
      Dafny.ISequence<Dafny.Rune> _2715_datatypeName;
      _2715_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), _2715_datatypeName, _2706_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _2712_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _2716_fnBody;
      _2716_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source77 = (c).dtor_witnessExpr;
      if (_source77.is_None) {
        {
          _2716_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2716_fnBody, _2715_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _2717___mcc_h1 = _source77.dtor_value;
        DAST._IExpression _2718_e = _2717___mcc_h1;
        {
          RAST._IExpr _2719_eStr;
          DCOMP._IOwnership _2720___v42;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2721___v43;
          RAST._IExpr _out44;
          DCOMP._IOwnership _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          DCOMP.COMP.GenExpr(_2718_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out44, out _out45, out _out46);
          _2719_eStr = _out44;
          _2720___v42 = _out45;
          _2721___v43 = _out46;
          _2716_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2716_fnBody, _2715_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2719_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _2722_body;
      _2722_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_2716_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2707_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2715_datatypeName), _2709_typeParamsAsTypes), _2708_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_2722_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2707_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2715_datatypeName), _2709_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2707_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2715_datatypeName), _2709_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_2712_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some((RAST.__default.SelfBorrowed).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2723_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2724_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2725_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2726_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _2723_typeParamsSet = _out47;
      _2724_sTypeParams = _out48;
      _2725_sConstrainedTypeParams = _out49;
      _2726_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _2727_typeParamsAsTypes;
      _2727_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2728_t) => {
        return RAST.__default.RawType((_2728_t).dtor_content);
      })), _2724_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2729_constrainedTypeParams;
      _2729_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2725_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _2730_datatypeName;
      _2730_datatypeName = DCOMP.__default.escapeIdent((c).dtor_name);
      Dafny.ISequence<RAST._IEnumCase> _2731_ctors;
      _2731_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _2732_i;
      _2732_i = BigInteger.Zero;
      while ((_2732_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2733_ctor;
        _2733_ctor = ((c).dtor_ctors).Select(_2732_i);
        Dafny.ISequence<RAST._IFormal> _2734_ctorArgs;
        _2734_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _2735_j;
        _2735_j = BigInteger.Zero;
        while ((_2735_j) < (new BigInteger(((_2733_ctor).dtor_args).Count))) {
          DAST._IFormal _2736_formal;
          _2736_formal = ((_2733_ctor).dtor_args).Select(_2735_j);
          RAST._IType _2737_formalType;
          RAST._IType _out51;
          _out51 = DCOMP.COMP.GenType((_2736_formal).dtor_typ, false, false);
          _2737_formalType = _out51;
          if ((c).dtor_isCo) {
            _2734_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2734_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2736_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_2737_formalType)))));
          } else {
            _2734_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2734_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2736_formal).dtor_name), _2737_formalType)));
          }
          _2735_j = (_2735_j) + (BigInteger.One);
        }
        _2731_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2731_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_2733_ctor).dtor_name), RAST.Formals.create_NamedFormals(_2734_ctorArgs))));
        _2732_i = (_2732_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2738_selfPath;
      _2738_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _2739_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2740_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out53;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_2738_selfPath, (c).dtor_attributes))), _2723_typeParamsSet, out _out52, out _out53);
      _2739_implBodyRaw = _out52;
      _2740_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _2741_implBody;
      _2741_implBody = _2739_implBodyRaw;
      _2732_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2742_emittedFields;
      _2742_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_2732_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2743_ctor;
        _2743_ctor = ((c).dtor_ctors).Select(_2732_i);
        BigInteger _2744_j;
        _2744_j = BigInteger.Zero;
        while ((_2744_j) < (new BigInteger(((_2743_ctor).dtor_args).Count))) {
          DAST._IFormal _2745_formal;
          _2745_formal = ((_2743_ctor).dtor_args).Select(_2744_j);
          if (!((_2742_emittedFields).Contains((_2745_formal).dtor_name))) {
            _2742_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2742_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2745_formal).dtor_name));
            RAST._IType _2746_formalType;
            RAST._IType _out54;
            _out54 = DCOMP.COMP.GenType((_2745_formal).dtor_typ, false, false);
            _2746_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _2747_cases;
            _2747_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _2748_k;
            _2748_k = BigInteger.Zero;
            while ((_2748_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _2749_ctor2;
              _2749_ctor2 = ((c).dtor_ctors).Select(_2748_k);
              Dafny.ISequence<Dafny.Rune> _2750_pattern;
              _2750_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2730_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2749_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _2751_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _2752_l;
              _2752_l = BigInteger.Zero;
              bool _2753_hasMatchingField;
              _2753_hasMatchingField = false;
              while ((_2752_l) < (new BigInteger(((_2749_ctor2).dtor_args).Count))) {
                DAST._IFormal _2754_formal2;
                _2754_formal2 = ((_2749_ctor2).dtor_args).Select(_2752_l);
                if (((_2745_formal).dtor_name).Equals((_2754_formal2).dtor_name)) {
                  _2753_hasMatchingField = true;
                }
                _2750_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2750_pattern, DCOMP.__default.escapeIdent((_2754_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _2752_l = (_2752_l) + (BigInteger.One);
              }
              _2750_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_2750_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_2753_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _2751_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_2745_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _2751_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2745_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _2751_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _2755_ctorMatch;
              _2755_ctorMatch = RAST.MatchCase.create(_2750_pattern, RAST.Expr.create_RawExpr(_2751_rhs));
              _2747_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2747_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_2755_ctorMatch));
              _2748_k = (_2748_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _2747_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2747_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2730_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _2756_methodBody;
            _2756_methodBody = RAST.Expr.create_Match(RAST.__default.self, _2747_cases);
            _2741_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_2741_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeIdent((_2745_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_2746_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2756_methodBody)))));
          }
          _2744_j = (_2744_j) + (BigInteger.One);
        }
        _2732_i = (_2732_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _2757_typeI;
        _2757_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _2758_types;
        _2758_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_2757_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _2759_genTp;
          RAST._IType _out55;
          _out55 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2757_typeI), false, false);
          _2759_genTp = _out55;
          _2758_types = Dafny.Sequence<RAST._IType>.Concat(_2758_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_2759_genTp))));
          _2757_typeI = (_2757_typeI) + (BigInteger.One);
        }
        _2731_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2731_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_2760_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _2760_tpe);
})), _2758_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _2761_enumBody;
      _2761_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq, Clone)]")), _2730_datatypeName, _2724_sTypeParams, _2731_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2725_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2730_datatypeName), _2727_typeParamsAsTypes), _2726_whereConstraints, _2741_implBody)));
      _2732_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _2762_printImplBodyCases;
      _2762_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_2732_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2763_ctor;
        _2763_ctor = ((c).dtor_ctors).Select(_2732_i);
        Dafny.ISequence<Dafny.Rune> _2764_ctorMatch;
        _2764_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2763_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _2765_modulePrefix;
        _2765_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _2766_printRhs;
        _2766_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _2765_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_2763_ctor).dtor_name)), (((_2763_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _2767_j;
        _2767_j = BigInteger.Zero;
        while ((_2767_j) < (new BigInteger(((_2763_ctor).dtor_args).Count))) {
          DAST._IFormal _2768_formal;
          _2768_formal = ((_2763_ctor).dtor_args).Select(_2767_j);
          _2764_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2764_ctorMatch, DCOMP.__default.escapeIdent((_2768_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_2767_j).Sign == 1) {
            _2766_printRhs = (_2766_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _2766_printRhs = (_2766_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_2768_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _2767_j = (_2767_j) + (BigInteger.One);
        }
        _2764_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_2764_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_2763_ctor).dtor_hasAnyArgs) {
          _2766_printRhs = (_2766_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _2766_printRhs = (_2766_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _2762_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2762_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2730_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2764_ctorMatch), RAST.Expr.create_Block(_2766_printRhs))));
        _2732_i = (_2732_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _2762_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2762_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_2730_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _2769_printImplBody;
      _2769_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _2762_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _2770_printImpl;
      _2770_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2725_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2730_datatypeName), _2727_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2769_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _2771_defaultImpl;
      _2771_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      Dafny.ISequence<RAST._IModDecl> _2772_asRefImpl;
      _2772_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _2732_i = BigInteger.Zero;
        RAST._IExpr _2773_structName;
        _2773_structName = (RAST.Expr.create_Identifier(_2730_datatypeName)).MSel(DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _2774_structAssignments;
        _2774_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_2732_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _2775_formal;
          _2775_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_2732_i);
          _2774_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2774_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_2775_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _2732_i = (_2732_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _2776_defaultConstrainedTypeParams;
        _2776_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_2724_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        RAST._IType _2777_fullType;
        _2777_fullType = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_2730_datatypeName), _2727_typeParamsAsTypes);
        _2771_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2776_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, _2777_fullType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_2777_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_2773_structName, _2774_structAssignments))))))));
        _2772_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2776_defaultConstrainedTypeParams, (((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("convert"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AsRef"))).Apply1(_2777_fullType), RAST.Type.create_Borrowed(_2777_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.self)))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_2761_enumBody, _2770_printImpl), _2771_defaultImpl), _2772_asRefImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi4 = new BigInteger((p).Count);
        for (BigInteger _2778_i = BigInteger.Zero; _2778_i < _hi4; _2778_i++) {
          r = (r).MSel(DCOMP.__default.escapeIdent(((p).Select(_2778_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi5 = new BigInteger((p).Count);
        for (BigInteger _2779_i = BigInteger.Zero; _2779_i < _hi5; _2779_i++) {
          r = (r).MSel(DCOMP.__default.escapeIdent(((p).Select(_2779_i))));
        }
      }
      return r;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _2780_i;
        _2780_i = BigInteger.Zero;
        while ((_2780_i) < (new BigInteger((args).Count))) {
          RAST._IType _2781_genTp;
          RAST._IType _out56;
          _out56 = DCOMP.COMP.GenType((args).Select(_2780_i), inBinding, inFn);
          _2781_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_2781_genTp));
          _2780_i = (_2780_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source78 = c;
      if (_source78.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2782___mcc_h0 = _source78.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _2783___mcc_h1 = _source78.dtor_typeArgs;
        DAST._IResolvedType _2784___mcc_h2 = _source78.dtor_resolved;
        DAST._IResolvedType _2785_resolved = _2784___mcc_h2;
        Dafny.ISequence<DAST._IType> _2786_args = _2783___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2787_p = _2782___mcc_h0;
        {
          RAST._IType _2788_t;
          RAST._IType _out57;
          _out57 = DCOMP.COMP.GenPath(_2787_p);
          _2788_t = _out57;
          Dafny.ISequence<RAST._IType> _2789_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = DCOMP.COMP.GenTypeArgs(_2786_args, inBinding, inFn);
          _2789_typeArgs = _out58;
          s = RAST.Type.create_TypeApp(_2788_t, _2789_typeArgs);
          DAST._IResolvedType _source79 = _2785_resolved;
          if (_source79.is_Datatype) {
            DAST._IDatatypeType _2790___mcc_h21 = _source79.dtor_datatypeType;
            DAST._IDatatypeType _source80 = _2790___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2791___mcc_h22 = _source80.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2792___mcc_h23 = _source80.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2793_attributes = _2792___mcc_h23;
            {
              if (DCOMP.COMP.IsRcWrapped(_2793_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source79.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2794___mcc_h24 = _source79.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2795___mcc_h25 = _source79.dtor_attributes;
            {
              if ((_2787_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::any::Any")));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _2796___mcc_h26 = _source79.dtor_baseType;
            DAST._INewtypeRange _2797___mcc_h27 = _source79.dtor_range;
            bool _2798___mcc_h28 = _source79.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _2799___mcc_h29 = _source79.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2800_attributes = _2799___mcc_h29;
            bool _2801_erased = _2798___mcc_h28;
            DAST._INewtypeRange _2802_range = _2797___mcc_h27;
            DAST._IType _2803_t = _2796___mcc_h26;
            {
              if (_2801_erased) {
                Std.Wrappers._IOption<RAST._IType> _source81 = DCOMP.COMP.NewtypeToRustType(_2803_t, _2802_range);
                if (_source81.is_None) {
                } else {
                  RAST._IType _2804___mcc_h30 = _source81.dtor_value;
                  RAST._IType _2805_v = _2804___mcc_h30;
                  s = _2805_v;
                }
              }
            }
          }
        }
      } else if (_source78.is_Nullable) {
        DAST._IType _2806___mcc_h3 = _source78.dtor_Nullable_a0;
        DAST._IType _2807_inner = _2806___mcc_h3;
        {
          RAST._IType _2808_innerExpr;
          RAST._IType _out59;
          _out59 = DCOMP.COMP.GenType(_2807_inner, inBinding, inFn);
          _2808_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_2808_innerExpr));
        }
      } else if (_source78.is_Tuple) {
        Dafny.ISequence<DAST._IType> _2809___mcc_h4 = _source78.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _2810_types = _2809___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _2811_args;
          _2811_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2812_i;
          _2812_i = BigInteger.Zero;
          while ((_2812_i) < (new BigInteger((_2810_types).Count))) {
            RAST._IType _2813_generated;
            RAST._IType _out60;
            _out60 = DCOMP.COMP.GenType((_2810_types).Select(_2812_i), inBinding, inFn);
            _2813_generated = _out60;
            _2811_args = Dafny.Sequence<RAST._IType>.Concat(_2811_args, Dafny.Sequence<RAST._IType>.FromElements(_2813_generated));
            _2812_i = (_2812_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_2811_args);
        }
      } else if (_source78.is_Array) {
        DAST._IType _2814___mcc_h5 = _source78.dtor_element;
        BigInteger _2815___mcc_h6 = _source78.dtor_dims;
        BigInteger _2816_dims = _2815___mcc_h6;
        DAST._IType _2817_element = _2814___mcc_h5;
        {
          RAST._IType _2818_elem;
          RAST._IType _out61;
          _out61 = DCOMP.COMP.GenType(_2817_element, inBinding, inFn);
          _2818_elem = _out61;
          s = _2818_elem;
          BigInteger _2819_i;
          _2819_i = BigInteger.Zero;
          while ((_2819_i) < (_2816_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _2819_i = (_2819_i) + (BigInteger.One);
          }
        }
      } else if (_source78.is_Seq) {
        DAST._IType _2820___mcc_h7 = _source78.dtor_element;
        DAST._IType _2821_element = _2820___mcc_h7;
        {
          RAST._IType _2822_elem;
          RAST._IType _out62;
          _out62 = DCOMP.COMP.GenType(_2821_element, inBinding, inFn);
          _2822_elem = _out62;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_2822_elem));
        }
      } else if (_source78.is_Set) {
        DAST._IType _2823___mcc_h8 = _source78.dtor_element;
        DAST._IType _2824_element = _2823___mcc_h8;
        {
          RAST._IType _2825_elem;
          RAST._IType _out63;
          _out63 = DCOMP.COMP.GenType(_2824_element, inBinding, inFn);
          _2825_elem = _out63;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_2825_elem));
        }
      } else if (_source78.is_Multiset) {
        DAST._IType _2826___mcc_h9 = _source78.dtor_element;
        DAST._IType _2827_element = _2826___mcc_h9;
        {
          RAST._IType _2828_elem;
          RAST._IType _out64;
          _out64 = DCOMP.COMP.GenType(_2827_element, inBinding, inFn);
          _2828_elem = _out64;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_2828_elem));
        }
      } else if (_source78.is_Map) {
        DAST._IType _2829___mcc_h10 = _source78.dtor_key;
        DAST._IType _2830___mcc_h11 = _source78.dtor_value;
        DAST._IType _2831_value = _2830___mcc_h11;
        DAST._IType _2832_key = _2829___mcc_h10;
        {
          RAST._IType _2833_keyType;
          RAST._IType _out65;
          _out65 = DCOMP.COMP.GenType(_2832_key, inBinding, inFn);
          _2833_keyType = _out65;
          RAST._IType _2834_valueType;
          RAST._IType _out66;
          _out66 = DCOMP.COMP.GenType(_2831_value, inBinding, inFn);
          _2834_valueType = _out66;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_2833_keyType, _2834_valueType));
        }
      } else if (_source78.is_SetBuilder) {
        DAST._IType _2835___mcc_h12 = _source78.dtor_element;
        DAST._IType _2836_elem = _2835___mcc_h12;
        {
          RAST._IType _2837_elemType;
          RAST._IType _out67;
          _out67 = DCOMP.COMP.GenType(_2836_elem, inBinding, inFn);
          _2837_elemType = _out67;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2837_elemType));
        }
      } else if (_source78.is_MapBuilder) {
        DAST._IType _2838___mcc_h13 = _source78.dtor_key;
        DAST._IType _2839___mcc_h14 = _source78.dtor_value;
        DAST._IType _2840_value = _2839___mcc_h14;
        DAST._IType _2841_key = _2838___mcc_h13;
        {
          RAST._IType _2842_keyType;
          RAST._IType _out68;
          _out68 = DCOMP.COMP.GenType(_2841_key, inBinding, inFn);
          _2842_keyType = _out68;
          RAST._IType _2843_valueType;
          RAST._IType _out69;
          _out69 = DCOMP.COMP.GenType(_2840_value, inBinding, inFn);
          _2843_valueType = _out69;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2842_keyType, _2843_valueType));
        }
      } else if (_source78.is_Arrow) {
        Dafny.ISequence<DAST._IType> _2844___mcc_h15 = _source78.dtor_args;
        DAST._IType _2845___mcc_h16 = _source78.dtor_result;
        DAST._IType _2846_result = _2845___mcc_h16;
        Dafny.ISequence<DAST._IType> _2847_args = _2844___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _2848_argTypes;
          _2848_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2849_i;
          _2849_i = BigInteger.Zero;
          while ((_2849_i) < (new BigInteger((_2847_args).Count))) {
            RAST._IType _2850_generated;
            RAST._IType _out70;
            _out70 = DCOMP.COMP.GenType((_2847_args).Select(_2849_i), inBinding, true);
            _2850_generated = _out70;
            _2848_argTypes = Dafny.Sequence<RAST._IType>.Concat(_2848_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_2850_generated)));
            _2849_i = (_2849_i) + (BigInteger.One);
          }
          RAST._IType _2851_resultType;
          RAST._IType _out71;
          _out71 = DCOMP.COMP.GenType(_2846_result, inBinding, (inFn) || (inBinding));
          _2851_resultType = _out71;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_2848_argTypes, RAST.Type.create_IntersectionType(_2851_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source78.is_Primitive) {
        DAST._IPrimitive _2852___mcc_h17 = _source78.dtor_Primitive_a0;
        DAST._IPrimitive _2853_p = _2852___mcc_h17;
        {
          DAST._IPrimitive _source82 = _2853_p;
          if (_source82.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source82.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source82.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar)));
          } else if (_source82.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar);
          }
        }
      } else if (_source78.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _2854___mcc_h18 = _source78.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _2855_v = _2854___mcc_h18;
        s = RAST.__default.RawType(_2855_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _2856___mcc_h19 = _source78.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source83 = _2856___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _2857___mcc_h20 = _source83;
        Dafny.ISequence<Dafny.Rune> _2858_name = _2857___mcc_h20;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_2858_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _2859_i;
      _2859_i = BigInteger.Zero;
      while ((_2859_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source84 = (body).Select(_2859_i);
        DAST._IMethod _2860___mcc_h0 = _source84;
        DAST._IMethod _2861_m = _2860___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source85 = (_2861_m).dtor_overridingPath;
          if (_source85.is_None) {
            {
              RAST._IImplMember _2862_generated;
              RAST._IImplMember _out72;
              _out72 = DCOMP.COMP.GenMethod(_2861_m, forTrait, enclosingType, enclosingTypeParams);
              _2862_generated = _out72;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_2862_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2863___mcc_h1 = _source85.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2864_p = _2863___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _2865_existing;
              _2865_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_2864_p)) {
                _2865_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_2864_p);
              }
              RAST._IImplMember _2866_genMethod;
              RAST._IImplMember _out73;
              _out73 = DCOMP.COMP.GenMethod(_2861_m, true, enclosingType, enclosingTypeParams);
              _2866_genMethod = _out73;
              _2865_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_2865_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_2866_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_2864_p, _2865_existing)));
            }
          }
        }
        _2859_i = (_2859_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _2867_i;
      _2867_i = BigInteger.Zero;
      while ((_2867_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _2868_param;
        _2868_param = (@params).Select(_2867_i);
        RAST._IType _2869_paramType;
        RAST._IType _out74;
        _out74 = DCOMP.COMP.GenType((_2868_param).dtor_typ, false, false);
        _2869_paramType = _out74;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2868_param).dtor_name), RAST.Type.create_Borrowed(_2869_paramType))));
        _2867_i = (_2867_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _2870_params;
      Dafny.ISequence<RAST._IFormal> _out75;
      _out75 = DCOMP.COMP.GenParams((m).dtor_params);
      _2870_params = _out75;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2871_paramNames;
      _2871_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _2872_paramOwnerships;
      _2872_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
      BigInteger _2873_paramI;
      _2873_paramI = BigInteger.Zero;
      while ((_2873_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        Dafny.ISequence<Dafny.Rune> _2874_name;
        _2874_name = (((m).dtor_params).Select(_2873_paramI)).dtor_name;
        _2871_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2871_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2874_name));
        _2872_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_2872_paramOwnerships, _2874_name, DCOMP.Ownership.create_OwnershipBorrowed());
        _2873_paramI = (_2873_paramI) + (BigInteger.One);
      }
      DCOMP._IEnvironment _2875_env;
      _2875_env = DCOMP.Environment.create(_2871_paramNames, _2872_paramOwnerships);
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _2870_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), _2870_params);
        } else {
          RAST._IType _2876_tpe;
          RAST._IType _out76;
          _out76 = DCOMP.COMP.GenType(enclosingType, false, false);
          _2876_tpe = _out76;
          _2870_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_2876_tpe))), _2870_params);
        }
      }
      Dafny.ISequence<RAST._IType> _2877_retTypeArgs;
      _2877_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2878_typeI;
      _2878_typeI = BigInteger.Zero;
      while ((_2878_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _2879_typeExpr;
        RAST._IType _out77;
        _out77 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_2878_typeI), false, false);
        _2879_typeExpr = _out77;
        _2877_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_2877_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_2879_typeExpr));
        _2878_typeI = (_2878_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _2880_visibility;
      _2880_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _2881_fnName;
      _2881_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _2882_typeParamsFiltered;
      _2882_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _2883_typeParamI;
      _2883_typeParamI = BigInteger.Zero;
      while ((_2883_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _2884_typeParam;
        _2884_typeParam = ((m).dtor_typeParams).Select(_2883_typeParamI);
        if (!((enclosingTypeParams).Contains(_2884_typeParam))) {
          _2882_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_2882_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_2884_typeParam));
        }
        _2883_typeParamI = (_2883_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2885_whereClauses;
      _2885_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _2886_typeParams;
      _2886_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_2882_typeParamsFiltered).Count)).Sign == 1) {
        _2885_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_2885_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _2887_i;
        _2887_i = BigInteger.Zero;
        while ((_2887_i) < (new BigInteger((_2882_typeParamsFiltered).Count))) {
          RAST._IType _2888_typeExpr;
          RAST._IType _out78;
          _out78 = DCOMP.COMP.GenType((_2882_typeParamsFiltered).Select(_2887_i), false, false);
          _2888_typeExpr = _out78;
          _2886_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_2886_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2888_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _2887_i = (_2887_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _2889_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _2890_earlyReturn;
        _2890_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source86 = (m).dtor_outVars;
        if (_source86.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2891___mcc_h0 = _source86.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2892_outVars = _2891___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _2893_tupleArgs;
            _2893_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _2894_outI;
            _2894_outI = BigInteger.Zero;
            while ((_2894_outI) < (new BigInteger((_2892_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _2895_outVar;
              _2895_outVar = (_2892_outVars).Select(_2894_outI);
              _2893_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_2893_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((_2895_outVar)))));
              _2894_outI = (_2894_outI) + (BigInteger.One);
            }
            _2890_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_2893_tupleArgs)));
          }
        }
        RAST._IExpr _2896_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2897___v47;
        RAST._IExpr _out79;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out80;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _2875_env, true, _2890_earlyReturn, out _out79, out _out80);
        _2896_body = _out79;
        _2897___v47 = _out80;
        _2889_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_2896_body);
      } else {
        _2889_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_2880_visibility, RAST.Fn.create(_2881_fnName, _2886_typeParams, _2870_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_2877_retTypeArgs).Count)) == (BigInteger.One)) ? ((_2877_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_2877_retTypeArgs)))), _2885_whereClauses, _2889_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2898_declarations;
      _2898_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2899_i;
      _2899_i = BigInteger.Zero;
      while ((_2899_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _2900_stmt;
        _2900_stmt = (stmts).Select(_2899_i);
        RAST._IExpr _2901_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2902_recIdents;
        RAST._IExpr _out81;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
        DCOMP.COMP.GenStmt(_2900_stmt, selfIdent, env, (isLast) && ((_2899_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out81, out _out82);
        _2901_stmtExpr = _out81;
        _2902_recIdents = _out82;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2902_recIdents, _2898_declarations));
        DAST._IStatement _source87 = _2900_stmt;
        if (_source87.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2903___mcc_h0 = _source87.dtor_name;
          DAST._IType _2904___mcc_h1 = _source87.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2905___mcc_h2 = _source87.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2906_name = _2903___mcc_h0;
          {
            _2898_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2898_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2906_name));
          }
        } else if (_source87.is_Assign) {
          DAST._IAssignLhs _2907___mcc_h6 = _source87.dtor_lhs;
          DAST._IExpression _2908___mcc_h7 = _source87.dtor_value;
        } else if (_source87.is_If) {
          DAST._IExpression _2909___mcc_h10 = _source87.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2910___mcc_h11 = _source87.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2911___mcc_h12 = _source87.dtor_els;
        } else if (_source87.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2912___mcc_h16 = _source87.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2913___mcc_h17 = _source87.dtor_body;
        } else if (_source87.is_While) {
          DAST._IExpression _2914___mcc_h20 = _source87.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2915___mcc_h21 = _source87.dtor_body;
        } else if (_source87.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2916___mcc_h24 = _source87.dtor_boundName;
          DAST._IType _2917___mcc_h25 = _source87.dtor_boundType;
          DAST._IExpression _2918___mcc_h26 = _source87.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2919___mcc_h27 = _source87.dtor_body;
        } else if (_source87.is_Call) {
          DAST._IExpression _2920___mcc_h32 = _source87.dtor_on;
          DAST._ICallName _2921___mcc_h33 = _source87.dtor_callName;
          Dafny.ISequence<DAST._IType> _2922___mcc_h34 = _source87.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2923___mcc_h35 = _source87.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2924___mcc_h36 = _source87.dtor_outs;
        } else if (_source87.is_Return) {
          DAST._IExpression _2925___mcc_h42 = _source87.dtor_expr;
        } else if (_source87.is_EarlyReturn) {
        } else if (_source87.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2926___mcc_h44 = _source87.dtor_toLabel;
        } else if (_source87.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2927___mcc_h46 = _source87.dtor_body;
        } else if (_source87.is_JumpTailCallStart) {
        } else if (_source87.is_Halt) {
        } else {
          DAST._IExpression _2928___mcc_h48 = _source87.dtor_Print_a0;
        }
        generated = (generated).Then(_2901_stmtExpr);
        _2899_i = (_2899_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source88 = lhs;
      if (_source88.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2929___mcc_h0 = _source88.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source89 = _2929___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2930___mcc_h1 = _source89;
        Dafny.ISequence<Dafny.Rune> _2931_id = _2930___mcc_h1;
        {
          if (((env).IsBorrowed(_2931_id)) || ((env).IsBorrowedMut(_2931_id))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_2931_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_2931_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2931_id);
          needsIIFE = false;
        }
      } else if (_source88.is_Select) {
        DAST._IExpression _2932___mcc_h2 = _source88.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2933___mcc_h3 = _source88.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2934_field = _2933___mcc_h3;
        DAST._IExpression _2935_on = _2932___mcc_h2;
        {
          RAST._IExpr _2936_onExpr;
          DCOMP._IOwnership _2937_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2938_recIdents;
          RAST._IExpr _out83;
          DCOMP._IOwnership _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_2935_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out83, out _out84, out _out85);
          _2936_onExpr = _out83;
          _2937_onOwned = _out84;
          _2938_recIdents = _out85;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_2936_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2934_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _2938_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _2939___mcc_h4 = _source88.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2940___mcc_h5 = _source88.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2941_indices = _2940___mcc_h5;
        DAST._IExpression _2942_on = _2939___mcc_h4;
        {
          RAST._IExpr _2943_onExpr;
          DCOMP._IOwnership _2944_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2945_recIdents;
          RAST._IExpr _out86;
          DCOMP._IOwnership _out87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
          DCOMP.COMP.GenExpr(_2942_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out86, out _out87, out _out88);
          _2943_onExpr = _out86;
          _2944_onOwned = _out87;
          _2945_recIdents = _out88;
          readIdents = _2945_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _2946_i;
          _2946_i = BigInteger.Zero;
          while ((_2946_i) < (new BigInteger((_2941_indices).Count))) {
            RAST._IExpr _2947_idx;
            DCOMP._IOwnership _2948___v51;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2949_recIdentsIdx;
            RAST._IExpr _out89;
            DCOMP._IOwnership _out90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out91;
            DCOMP.COMP.GenExpr((_2941_indices).Select(_2946_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out89, out _out90, out _out91);
            _2947_idx = _out89;
            _2948___v51 = _out90;
            _2949_recIdentsIdx = _out91;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_2946_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_2947_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2949_recIdentsIdx);
            _2946_i = (_2946_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_2943_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _2946_i = BigInteger.Zero;
          while ((_2946_i) < (new BigInteger((_2941_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_2946_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _2946_i = (_2946_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source90 = stmt;
      if (_source90.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _2950___mcc_h0 = _source90.dtor_name;
        DAST._IType _2951___mcc_h1 = _source90.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _2952___mcc_h2 = _source90.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source91 = _2952___mcc_h2;
        if (_source91.is_None) {
          DAST._IType _2953_typ = _2951___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2954_name = _2950___mcc_h0;
          {
            RAST._IType _2955_typeString;
            RAST._IType _out92;
            _out92 = DCOMP.COMP.GenType(_2953_typ, true, false);
            _2955_typeString = _out92;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2954_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2955_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _2956___mcc_h3 = _source91.dtor_value;
          DAST._IExpression _2957_expression = _2956___mcc_h3;
          DAST._IType _2958_typ = _2951___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2959_name = _2950___mcc_h0;
          {
            RAST._IType _2960_typeString;
            RAST._IType _out93;
            _out93 = DCOMP.COMP.GenType(_2958_typ, true, false);
            _2960_typeString = _out93;
            RAST._IExpr _2961_expr;
            DCOMP._IOwnership _2962___v52;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2963_recIdents;
            RAST._IExpr _out94;
            DCOMP._IOwnership _out95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
            DCOMP.COMP.GenExpr(_2957_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out94, out _out95, out _out96);
            _2961_expr = _out94;
            _2962___v52 = _out95;
            _2963_recIdents = _out96;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2959_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2960_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2961_expr));
            readIdents = _2963_recIdents;
          }
        }
      } else if (_source90.is_Assign) {
        DAST._IAssignLhs _2964___mcc_h4 = _source90.dtor_lhs;
        DAST._IExpression _2965___mcc_h5 = _source90.dtor_value;
        DAST._IExpression _2966_expression = _2965___mcc_h5;
        DAST._IAssignLhs _2967_lhs = _2964___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _2968_lhsGen;
          bool _2969_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2970_recIdents;
          Dafny.ISequence<Dafny.Rune> _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          DCOMP.COMP.GenAssignLhs(_2967_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, env, out _out97, out _out98, out _out99);
          _2968_lhsGen = _out97;
          _2969_needsIIFE = _out98;
          _2970_recIdents = _out99;
          RAST._IExpr _2971_exprGen;
          DCOMP._IOwnership _2972___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2973_exprIdents;
          RAST._IExpr _out100;
          DCOMP._IOwnership _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_2966_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out100, out _out101, out _out102);
          _2971_exprGen = _out100;
          _2972___v53 = _out101;
          _2973_exprIdents = _out102;
          if (_2969_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2971_exprGen)), RAST.Expr.create_RawExpr(_2968_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_2968_lhsGen, _2971_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2970_recIdents, _2973_exprIdents);
        }
      } else if (_source90.is_If) {
        DAST._IExpression _2974___mcc_h6 = _source90.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2975___mcc_h7 = _source90.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _2976___mcc_h8 = _source90.dtor_els;
        Dafny.ISequence<DAST._IStatement> _2977_els = _2976___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _2978_thn = _2975___mcc_h7;
        DAST._IExpression _2979_cond = _2974___mcc_h6;
        {
          RAST._IExpr _2980_cond;
          DCOMP._IOwnership _2981___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2982_recIdents;
          RAST._IExpr _out103;
          DCOMP._IOwnership _out104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out105;
          DCOMP.COMP.GenExpr(_2979_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out103, out _out104, out _out105);
          _2980_cond = _out103;
          _2981___v54 = _out104;
          _2982_recIdents = _out105;
          Dafny.ISequence<Dafny.Rune> _2983_condString;
          _2983_condString = (_2980_cond)._ToString(DCOMP.__default.IND);
          readIdents = _2982_recIdents;
          RAST._IExpr _2984_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2985_thnIdents;
          RAST._IExpr _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          DCOMP.COMP.GenStmts(_2978_thn, selfIdent, env, isLast, earlyReturn, out _out106, out _out107);
          _2984_thn = _out106;
          _2985_thnIdents = _out107;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2985_thnIdents);
          RAST._IExpr _2986_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2987_elsIdents;
          RAST._IExpr _out108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
          DCOMP.COMP.GenStmts(_2977_els, selfIdent, env, isLast, earlyReturn, out _out108, out _out109);
          _2986_els = _out108;
          _2987_elsIdents = _out109;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2987_elsIdents);
          generated = RAST.Expr.create_IfExpr(_2980_cond, _2984_thn, _2986_els);
        }
      } else if (_source90.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _2988___mcc_h9 = _source90.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _2989___mcc_h10 = _source90.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2990_body = _2989___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _2991_lbl = _2988___mcc_h9;
        {
          RAST._IExpr _2992_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2993_bodyIdents;
          RAST._IExpr _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenStmts(_2990_body, selfIdent, env, isLast, earlyReturn, out _out110, out _out111);
          _2992_body = _out110;
          _2993_bodyIdents = _out111;
          readIdents = _2993_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2991_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_2992_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source90.is_While) {
        DAST._IExpression _2994___mcc_h11 = _source90.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2995___mcc_h12 = _source90.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2996_body = _2995___mcc_h12;
        DAST._IExpression _2997_cond = _2994___mcc_h11;
        {
          RAST._IExpr _2998_cond;
          DCOMP._IOwnership _2999___v55;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3000_recIdents;
          RAST._IExpr _out112;
          DCOMP._IOwnership _out113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
          DCOMP.COMP.GenExpr(_2997_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out112, out _out113, out _out114);
          _2998_cond = _out112;
          _2999___v55 = _out113;
          _3000_recIdents = _out114;
          readIdents = _3000_recIdents;
          RAST._IExpr _3001_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3002_bodyIdents;
          RAST._IExpr _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenStmts(_2996_body, selfIdent, env, false, earlyReturn, out _out115, out _out116);
          _3001_body = _out115;
          _3002_bodyIdents = _out116;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3002_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2998_cond), _3001_body);
        }
      } else if (_source90.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _3003___mcc_h13 = _source90.dtor_boundName;
        DAST._IType _3004___mcc_h14 = _source90.dtor_boundType;
        DAST._IExpression _3005___mcc_h15 = _source90.dtor_over;
        Dafny.ISequence<DAST._IStatement> _3006___mcc_h16 = _source90.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3007_body = _3006___mcc_h16;
        DAST._IExpression _3008_over = _3005___mcc_h15;
        DAST._IType _3009_boundType = _3004___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _3010_boundName = _3003___mcc_h13;
        {
          RAST._IExpr _3011_over;
          DCOMP._IOwnership _3012___v56;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3013_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_3008_over, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out117, out _out118, out _out119);
          _3011_over = _out117;
          _3012___v56 = _out118;
          _3013_recIdents = _out119;
          RAST._IType _3014_boundTypeStr;
          RAST._IType _out120;
          _out120 = DCOMP.COMP.GenType(_3009_boundType, false, false);
          _3014_boundTypeStr = _out120;
          readIdents = _3013_recIdents;
          RAST._IExpr _3015_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3016_bodyIdents;
          RAST._IExpr _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenStmts(_3007_body, selfIdent, (env).Add(_3010_boundName, DCOMP.Ownership.create_OwnershipBorrowed()), false, earlyReturn, out _out121, out _out122);
          _3015_body = _out121;
          _3016_bodyIdents = _out122;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3016_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3010_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_3010_boundName), _3011_over, _3015_body);
        }
      } else if (_source90.is_Call) {
        DAST._IExpression _3017___mcc_h17 = _source90.dtor_on;
        DAST._ICallName _3018___mcc_h18 = _source90.dtor_callName;
        Dafny.ISequence<DAST._IType> _3019___mcc_h19 = _source90.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3020___mcc_h20 = _source90.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _3021___mcc_h21 = _source90.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _3022_maybeOutVars = _3021___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _3023_args = _3020___mcc_h20;
        Dafny.ISequence<DAST._IType> _3024_typeArgs = _3019___mcc_h19;
        DAST._ICallName _3025_name = _3018___mcc_h18;
        DAST._IExpression _3026_on = _3017___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3027_typeArgString;
          _3027_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3024_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3028_typeI;
            _3028_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _3029_typeArgsR;
            _3029_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_3028_typeI) < (new BigInteger((_3024_typeArgs).Count))) {
              RAST._IType _3030_tpe;
              RAST._IType _out123;
              _out123 = DCOMP.COMP.GenType((_3024_typeArgs).Select(_3028_typeI), false, false);
              _3030_tpe = _out123;
              _3029_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_3029_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_3030_tpe));
              _3028_typeI = (_3028_typeI) + (BigInteger.One);
            }
            _3027_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _3029_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _3031_argString;
          _3031_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3032_i;
          _3032_i = BigInteger.Zero;
          while ((_3032_i) < (new BigInteger((_3023_args).Count))) {
            if ((_3032_i).Sign == 1) {
              _3031_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3031_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _3033_argExpr;
            DCOMP._IOwnership _3034_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3035_argIdents;
            RAST._IExpr _out124;
            DCOMP._IOwnership _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            DCOMP.COMP.GenExpr((_3023_args).Select(_3032_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out124, out _out125, out _out126);
            _3033_argExpr = _out124;
            _3034_ownership = _out125;
            _3035_argIdents = _out126;
            Dafny.ISequence<Dafny.Rune> _3036_argExprString;
            _3036_argExprString = (_3033_argExpr)._ToString(DCOMP.__default.IND);
            _3031_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3031_argString, _3036_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3035_argIdents);
            _3032_i = (_3032_i) + (BigInteger.One);
          }
          RAST._IExpr _3037_onExpr;
          DCOMP._IOwnership _3038___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3039_enclosingIdents;
          RAST._IExpr _out127;
          DCOMP._IOwnership _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_3026_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out127, out _out128, out _out129);
          _3037_onExpr = _out127;
          _3038___v57 = _out128;
          _3039_enclosingIdents = _out129;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3039_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _3040_enclosingString;
          _3040_enclosingString = (_3037_onExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source92 = _3026_on;
          if (_source92.is_Literal) {
            DAST._ILiteral _3041___mcc_h26 = _source92.dtor_Literal_a0;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3042___mcc_h28 = _source92.dtor_Ident_a0;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3043___mcc_h30 = _source92.dtor_Companion_a0;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_3040_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source92.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3044___mcc_h32 = _source92.dtor_Tuple_a0;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3045___mcc_h34 = _source92.dtor_path;
            Dafny.ISequence<DAST._IType> _3046___mcc_h35 = _source92.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3047___mcc_h36 = _source92.dtor_args;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3048___mcc_h40 = _source92.dtor_dims;
            DAST._IType _3049___mcc_h41 = _source92.dtor_typ;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_DatatypeValue) {
            DAST._IDatatypeType _3050___mcc_h44 = _source92.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _3051___mcc_h45 = _source92.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3052___mcc_h46 = _source92.dtor_variant;
            bool _3053___mcc_h47 = _source92.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3054___mcc_h48 = _source92.dtor_contents;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Convert) {
            DAST._IExpression _3055___mcc_h54 = _source92.dtor_value;
            DAST._IType _3056___mcc_h55 = _source92.dtor_from;
            DAST._IType _3057___mcc_h56 = _source92.dtor_typ;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_SeqConstruct) {
            DAST._IExpression _3058___mcc_h60 = _source92.dtor_length;
            DAST._IExpression _3059___mcc_h61 = _source92.dtor_elem;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3060___mcc_h64 = _source92.dtor_elements;
            DAST._IType _3061___mcc_h65 = _source92.dtor_typ;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3062___mcc_h68 = _source92.dtor_elements;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _3063___mcc_h70 = _source92.dtor_elements;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3064___mcc_h72 = _source92.dtor_mapElems;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_MapBuilder) {
            DAST._IType _3065___mcc_h74 = _source92.dtor_keyType;
            DAST._IType _3066___mcc_h75 = _source92.dtor_valueType;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_SeqUpdate) {
            DAST._IExpression _3067___mcc_h78 = _source92.dtor_expr;
            DAST._IExpression _3068___mcc_h79 = _source92.dtor_indexExpr;
            DAST._IExpression _3069___mcc_h80 = _source92.dtor_value;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_MapUpdate) {
            DAST._IExpression _3070___mcc_h84 = _source92.dtor_expr;
            DAST._IExpression _3071___mcc_h85 = _source92.dtor_indexExpr;
            DAST._IExpression _3072___mcc_h86 = _source92.dtor_value;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_SetBuilder) {
            DAST._IType _3073___mcc_h90 = _source92.dtor_elemType;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_ToMultiset) {
            DAST._IExpression _3074___mcc_h92 = _source92.dtor_ToMultiset_a0;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_This) {
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Ite) {
            DAST._IExpression _3075___mcc_h94 = _source92.dtor_cond;
            DAST._IExpression _3076___mcc_h95 = _source92.dtor_thn;
            DAST._IExpression _3077___mcc_h96 = _source92.dtor_els;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_UnOp) {
            DAST._IUnaryOp _3078___mcc_h100 = _source92.dtor_unOp;
            DAST._IExpression _3079___mcc_h101 = _source92.dtor_expr;
            DAST.Format._IUnOpFormat _3080___mcc_h102 = _source92.dtor_format1;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_BinOp) {
            DAST._IBinOp _3081___mcc_h106 = _source92.dtor_op;
            DAST._IExpression _3082___mcc_h107 = _source92.dtor_left;
            DAST._IExpression _3083___mcc_h108 = _source92.dtor_right;
            DAST.Format._IBinOpFormat _3084___mcc_h109 = _source92.dtor_format2;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_ArrayLen) {
            DAST._IExpression _3085___mcc_h114 = _source92.dtor_expr;
            BigInteger _3086___mcc_h115 = _source92.dtor_dim;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_MapKeys) {
            DAST._IExpression _3087___mcc_h118 = _source92.dtor_expr;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_MapValues) {
            DAST._IExpression _3088___mcc_h120 = _source92.dtor_expr;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Select) {
            DAST._IExpression _3089___mcc_h122 = _source92.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3090___mcc_h123 = _source92.dtor_field;
            bool _3091___mcc_h124 = _source92.dtor_isConstant;
            bool _3092___mcc_h125 = _source92.dtor_onDatatype;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_SelectFn) {
            DAST._IExpression _3093___mcc_h130 = _source92.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3094___mcc_h131 = _source92.dtor_field;
            bool _3095___mcc_h132 = _source92.dtor_onDatatype;
            bool _3096___mcc_h133 = _source92.dtor_isStatic;
            BigInteger _3097___mcc_h134 = _source92.dtor_arity;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Index) {
            DAST._IExpression _3098___mcc_h140 = _source92.dtor_expr;
            DAST._ICollKind _3099___mcc_h141 = _source92.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3100___mcc_h142 = _source92.dtor_indices;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_IndexRange) {
            DAST._IExpression _3101___mcc_h146 = _source92.dtor_expr;
            bool _3102___mcc_h147 = _source92.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _3103___mcc_h148 = _source92.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _3104___mcc_h149 = _source92.dtor_high;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_TupleSelect) {
            DAST._IExpression _3105___mcc_h154 = _source92.dtor_expr;
            BigInteger _3106___mcc_h155 = _source92.dtor_index;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Call) {
            DAST._IExpression _3107___mcc_h158 = _source92.dtor_on;
            DAST._ICallName _3108___mcc_h159 = _source92.dtor_callName;
            Dafny.ISequence<DAST._IType> _3109___mcc_h160 = _source92.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3110___mcc_h161 = _source92.dtor_args;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3111___mcc_h166 = _source92.dtor_params;
            DAST._IType _3112___mcc_h167 = _source92.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3113___mcc_h168 = _source92.dtor_body;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3114___mcc_h172 = _source92.dtor_values;
            DAST._IType _3115___mcc_h173 = _source92.dtor_retType;
            DAST._IExpression _3116___mcc_h174 = _source92.dtor_expr;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3117___mcc_h178 = _source92.dtor_name;
            DAST._IType _3118___mcc_h179 = _source92.dtor_typ;
            DAST._IExpression _3119___mcc_h180 = _source92.dtor_value;
            DAST._IExpression _3120___mcc_h181 = _source92.dtor_iifeBody;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_Apply) {
            DAST._IExpression _3121___mcc_h186 = _source92.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3122___mcc_h187 = _source92.dtor_args;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_TypeTest) {
            DAST._IExpression _3123___mcc_h190 = _source92.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3124___mcc_h191 = _source92.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3125___mcc_h192 = _source92.dtor_variant;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_InitializationValue) {
            DAST._IType _3126___mcc_h196 = _source92.dtor_typ;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_BoolBoundedPool) {
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_SetBoundedPool) {
            DAST._IExpression _3127___mcc_h198 = _source92.dtor_of;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source92.is_SeqBoundedPool) {
            DAST._IExpression _3128___mcc_h200 = _source92.dtor_of;
            bool _3129___mcc_h201 = _source92.dtor_includeDuplicates;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _3130___mcc_h204 = _source92.dtor_lo;
            DAST._IExpression _3131___mcc_h205 = _source92.dtor_hi;
            {
              _3040_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3040_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _3132_receiver;
          _3132_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source93 = _3022_maybeOutVars;
          if (_source93.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3133___mcc_h208 = _source93.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3134_outVars = _3133___mcc_h208;
            {
              if ((new BigInteger((_3134_outVars).Count)) > (BigInteger.One)) {
                _3132_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _3135_outI;
              _3135_outI = BigInteger.Zero;
              while ((_3135_outI) < (new BigInteger((_3134_outVars).Count))) {
                if ((_3135_outI).Sign == 1) {
                  _3132_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3132_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _3136_outVar;
                _3136_outVar = (_3134_outVars).Select(_3135_outI);
                _3132_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3132_receiver, (_3136_outVar));
                _3135_outI = (_3135_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_3134_outVars).Count)) > (BigInteger.One)) {
                _3132_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_3132_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _3137_renderedName;
          _3137_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source94) => {
            if (_source94.is_Name) {
              Dafny.ISequence<Dafny.Rune> _3138___mcc_h209 = _source94.dtor_name;
              Dafny.ISequence<Dafny.Rune> _3139_name = _3138___mcc_h209;
              return DCOMP.__default.escapeIdent(_3139_name);
            } else if (_source94.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source94.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source94.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_3025_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_3132_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_3132_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _3040_enclosingString), _3137_renderedName), _3027_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3031_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source90.is_Return) {
        DAST._IExpression _3140___mcc_h22 = _source90.dtor_expr;
        DAST._IExpression _3141_expr = _3140___mcc_h22;
        {
          RAST._IExpr _3142_expr;
          DCOMP._IOwnership _3143___v60;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3144_recIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          DCOMP.COMP.GenExpr(_3141_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _3142_expr = _out130;
          _3143___v60 = _out131;
          _3144_recIdents = _out132;
          readIdents = _3144_recIdents;
          if (isLast) {
            generated = _3142_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_3142_expr));
          }
        }
      } else if (_source90.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source90.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3145___mcc_h23 = _source90.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3146_toLabel = _3145___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source95 = _3146_toLabel;
          if (_source95.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3147___mcc_h210 = _source95.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3148_lbl = _3147___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _3148_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source90.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _3149___mcc_h24 = _source90.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3150_body = _3149___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _3151_paramI;
          _3151_paramI = BigInteger.Zero;
          while ((_3151_paramI) < (new BigInteger(((env).dtor_names).Count))) {
            Dafny.ISequence<Dafny.Rune> _3152_param;
            _3152_param = ((env).dtor_names).Select(_3151_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_3152_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_3152_param))))));
            _3151_paramI = (_3151_paramI) + (BigInteger.One);
          }
          RAST._IExpr _3153_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3154_bodyIdents;
          RAST._IExpr _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenStmts(_3150_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), DCOMP.Environment.Empty(), false, earlyReturn, out _out133, out _out134);
          _3153_body = _out133;
          _3154_bodyIdents = _out134;
          readIdents = _3154_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _3153_body)));
        }
      } else if (_source90.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source90.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _3155___mcc_h25 = _source90.dtor_Print_a0;
        DAST._IExpression _3156_e = _3155___mcc_h25;
        {
          RAST._IExpr _3157_printedExpr;
          DCOMP._IOwnership _3158_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3159_recIdents;
          RAST._IExpr _out135;
          DCOMP._IOwnership _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_3156_e, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out135, out _out136, out _out137);
          _3157_printedExpr = _out135;
          _3158_recOwnership = _out136;
          _3159_recIdents = _out137;
          Dafny.ISequence<Dafny.Rune> _3160_printedExprString;
          _3160_printedExprString = (_3157_printedExpr)._ToString(DCOMP.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _3160_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _3159_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source96 = range;
      if (_source96.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source96.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source96.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source96.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source96.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source96.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source96.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source96.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source96.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source96.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source96.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMP._IOwnership ownership, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out138;
        DCOMP._IOwnership _out139;
        DCOMP.COMP.FromOwned(r, expectedOwnership, out _out138, out _out139);
        @out = _out138;
        resultingOwnership = _out139;
        return ;
      } else if ((object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source97 = e;
      DAST._ILiteral _3161___mcc_h0 = _source97.dtor_Literal_a0;
      DAST._ILiteral _source98 = _3161___mcc_h0;
      if (_source98.is_BoolLiteral) {
        bool _3162___mcc_h1 = _source98.dtor_BoolLiteral_a0;
        if ((_3162___mcc_h1) == (false)) {
          {
            RAST._IExpr _out140;
            DCOMP._IOwnership _out141;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out140, out _out141);
            r = _out140;
            resultingOwnership = _out141;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out142;
            DCOMP._IOwnership _out143;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out142, out _out143);
            r = _out142;
            resultingOwnership = _out143;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source98.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _3163___mcc_h2 = _source98.dtor_IntLiteral_a0;
        DAST._IType _3164___mcc_h3 = _source98.dtor_IntLiteral_a1;
        DAST._IType _3165_t = _3164___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _3166_i = _3163___mcc_h2;
        {
          DAST._IType _source99 = _3165_t;
          if (_source99.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3167___mcc_h100 = _source99.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3168___mcc_h101 = _source99.dtor_typeArgs;
            DAST._IResolvedType _3169___mcc_h102 = _source99.dtor_resolved;
            DAST._IType _3170_o = _3165_t;
            {
              RAST._IType _3171_genType;
              RAST._IType _out144;
              _out144 = DCOMP.COMP.GenType(_3170_o, false, false);
              _3171_genType = _out144;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3171_genType);
            }
          } else if (_source99.is_Nullable) {
            DAST._IType _3172___mcc_h106 = _source99.dtor_Nullable_a0;
            DAST._IType _3173_o = _3165_t;
            {
              RAST._IType _3174_genType;
              RAST._IType _out145;
              _out145 = DCOMP.COMP.GenType(_3173_o, false, false);
              _3174_genType = _out145;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3174_genType);
            }
          } else if (_source99.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3175___mcc_h108 = _source99.dtor_Tuple_a0;
            DAST._IType _3176_o = _3165_t;
            {
              RAST._IType _3177_genType;
              RAST._IType _out146;
              _out146 = DCOMP.COMP.GenType(_3176_o, false, false);
              _3177_genType = _out146;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3177_genType);
            }
          } else if (_source99.is_Array) {
            DAST._IType _3178___mcc_h110 = _source99.dtor_element;
            BigInteger _3179___mcc_h111 = _source99.dtor_dims;
            DAST._IType _3180_o = _3165_t;
            {
              RAST._IType _3181_genType;
              RAST._IType _out147;
              _out147 = DCOMP.COMP.GenType(_3180_o, false, false);
              _3181_genType = _out147;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3181_genType);
            }
          } else if (_source99.is_Seq) {
            DAST._IType _3182___mcc_h114 = _source99.dtor_element;
            DAST._IType _3183_o = _3165_t;
            {
              RAST._IType _3184_genType;
              RAST._IType _out148;
              _out148 = DCOMP.COMP.GenType(_3183_o, false, false);
              _3184_genType = _out148;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3184_genType);
            }
          } else if (_source99.is_Set) {
            DAST._IType _3185___mcc_h116 = _source99.dtor_element;
            DAST._IType _3186_o = _3165_t;
            {
              RAST._IType _3187_genType;
              RAST._IType _out149;
              _out149 = DCOMP.COMP.GenType(_3186_o, false, false);
              _3187_genType = _out149;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3187_genType);
            }
          } else if (_source99.is_Multiset) {
            DAST._IType _3188___mcc_h118 = _source99.dtor_element;
            DAST._IType _3189_o = _3165_t;
            {
              RAST._IType _3190_genType;
              RAST._IType _out150;
              _out150 = DCOMP.COMP.GenType(_3189_o, false, false);
              _3190_genType = _out150;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3190_genType);
            }
          } else if (_source99.is_Map) {
            DAST._IType _3191___mcc_h120 = _source99.dtor_key;
            DAST._IType _3192___mcc_h121 = _source99.dtor_value;
            DAST._IType _3193_o = _3165_t;
            {
              RAST._IType _3194_genType;
              RAST._IType _out151;
              _out151 = DCOMP.COMP.GenType(_3193_o, false, false);
              _3194_genType = _out151;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3194_genType);
            }
          } else if (_source99.is_SetBuilder) {
            DAST._IType _3195___mcc_h124 = _source99.dtor_element;
            DAST._IType _3196_o = _3165_t;
            {
              RAST._IType _3197_genType;
              RAST._IType _out152;
              _out152 = DCOMP.COMP.GenType(_3196_o, false, false);
              _3197_genType = _out152;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3197_genType);
            }
          } else if (_source99.is_MapBuilder) {
            DAST._IType _3198___mcc_h126 = _source99.dtor_key;
            DAST._IType _3199___mcc_h127 = _source99.dtor_value;
            DAST._IType _3200_o = _3165_t;
            {
              RAST._IType _3201_genType;
              RAST._IType _out153;
              _out153 = DCOMP.COMP.GenType(_3200_o, false, false);
              _3201_genType = _out153;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3201_genType);
            }
          } else if (_source99.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3202___mcc_h130 = _source99.dtor_args;
            DAST._IType _3203___mcc_h131 = _source99.dtor_result;
            DAST._IType _3204_o = _3165_t;
            {
              RAST._IType _3205_genType;
              RAST._IType _out154;
              _out154 = DCOMP.COMP.GenType(_3204_o, false, false);
              _3205_genType = _out154;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3205_genType);
            }
          } else if (_source99.is_Primitive) {
            DAST._IPrimitive _3206___mcc_h134 = _source99.dtor_Primitive_a0;
            DAST._IPrimitive _source100 = _3206___mcc_h134;
            if (_source100.is_Int) {
              {
                if ((new BigInteger((_3166_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_3166_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_3166_i, true));
                }
              }
            } else if (_source100.is_Real) {
              DAST._IType _3207_o = _3165_t;
              {
                RAST._IType _3208_genType;
                RAST._IType _out155;
                _out155 = DCOMP.COMP.GenType(_3207_o, false, false);
                _3208_genType = _out155;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3208_genType);
              }
            } else if (_source100.is_String) {
              DAST._IType _3209_o = _3165_t;
              {
                RAST._IType _3210_genType;
                RAST._IType _out156;
                _out156 = DCOMP.COMP.GenType(_3209_o, false, false);
                _3210_genType = _out156;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3210_genType);
              }
            } else if (_source100.is_Bool) {
              DAST._IType _3211_o = _3165_t;
              {
                RAST._IType _3212_genType;
                RAST._IType _out157;
                _out157 = DCOMP.COMP.GenType(_3211_o, false, false);
                _3212_genType = _out157;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3212_genType);
              }
            } else {
              DAST._IType _3213_o = _3165_t;
              {
                RAST._IType _3214_genType;
                RAST._IType _out158;
                _out158 = DCOMP.COMP.GenType(_3213_o, false, false);
                _3214_genType = _out158;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3214_genType);
              }
            }
          } else if (_source99.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3215___mcc_h136 = _source99.dtor_Passthrough_a0;
            DAST._IType _3216_o = _3165_t;
            {
              RAST._IType _3217_genType;
              RAST._IType _out159;
              _out159 = DCOMP.COMP.GenType(_3216_o, false, false);
              _3217_genType = _out159;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3217_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3218___mcc_h138 = _source99.dtor_TypeArg_a0;
            DAST._IType _3219_o = _3165_t;
            {
              RAST._IType _3220_genType;
              RAST._IType _out160;
              _out160 = DCOMP.COMP.GenType(_3219_o, false, false);
              _3220_genType = _out160;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_3166_i), _3220_genType);
            }
          }
          RAST._IExpr _out161;
          DCOMP._IOwnership _out162;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out161, out _out162);
          r = _out161;
          resultingOwnership = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source98.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _3221___mcc_h4 = _source98.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _3222___mcc_h5 = _source98.dtor_DecLiteral_a1;
        DAST._IType _3223___mcc_h6 = _source98.dtor_DecLiteral_a2;
        DAST._IType _3224_t = _3223___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _3225_d = _3222___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _3226_n = _3221___mcc_h4;
        {
          DAST._IType _source101 = _3224_t;
          if (_source101.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3227___mcc_h140 = _source101.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3228___mcc_h141 = _source101.dtor_typeArgs;
            DAST._IResolvedType _3229___mcc_h142 = _source101.dtor_resolved;
            DAST._IType _3230_o = _3224_t;
            {
              RAST._IType _3231_genType;
              RAST._IType _out163;
              _out163 = DCOMP.COMP.GenType(_3230_o, false, false);
              _3231_genType = _out163;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3231_genType);
            }
          } else if (_source101.is_Nullable) {
            DAST._IType _3232___mcc_h146 = _source101.dtor_Nullable_a0;
            DAST._IType _3233_o = _3224_t;
            {
              RAST._IType _3234_genType;
              RAST._IType _out164;
              _out164 = DCOMP.COMP.GenType(_3233_o, false, false);
              _3234_genType = _out164;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3234_genType);
            }
          } else if (_source101.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3235___mcc_h148 = _source101.dtor_Tuple_a0;
            DAST._IType _3236_o = _3224_t;
            {
              RAST._IType _3237_genType;
              RAST._IType _out165;
              _out165 = DCOMP.COMP.GenType(_3236_o, false, false);
              _3237_genType = _out165;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3237_genType);
            }
          } else if (_source101.is_Array) {
            DAST._IType _3238___mcc_h150 = _source101.dtor_element;
            BigInteger _3239___mcc_h151 = _source101.dtor_dims;
            DAST._IType _3240_o = _3224_t;
            {
              RAST._IType _3241_genType;
              RAST._IType _out166;
              _out166 = DCOMP.COMP.GenType(_3240_o, false, false);
              _3241_genType = _out166;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3241_genType);
            }
          } else if (_source101.is_Seq) {
            DAST._IType _3242___mcc_h154 = _source101.dtor_element;
            DAST._IType _3243_o = _3224_t;
            {
              RAST._IType _3244_genType;
              RAST._IType _out167;
              _out167 = DCOMP.COMP.GenType(_3243_o, false, false);
              _3244_genType = _out167;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3244_genType);
            }
          } else if (_source101.is_Set) {
            DAST._IType _3245___mcc_h156 = _source101.dtor_element;
            DAST._IType _3246_o = _3224_t;
            {
              RAST._IType _3247_genType;
              RAST._IType _out168;
              _out168 = DCOMP.COMP.GenType(_3246_o, false, false);
              _3247_genType = _out168;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3247_genType);
            }
          } else if (_source101.is_Multiset) {
            DAST._IType _3248___mcc_h158 = _source101.dtor_element;
            DAST._IType _3249_o = _3224_t;
            {
              RAST._IType _3250_genType;
              RAST._IType _out169;
              _out169 = DCOMP.COMP.GenType(_3249_o, false, false);
              _3250_genType = _out169;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3250_genType);
            }
          } else if (_source101.is_Map) {
            DAST._IType _3251___mcc_h160 = _source101.dtor_key;
            DAST._IType _3252___mcc_h161 = _source101.dtor_value;
            DAST._IType _3253_o = _3224_t;
            {
              RAST._IType _3254_genType;
              RAST._IType _out170;
              _out170 = DCOMP.COMP.GenType(_3253_o, false, false);
              _3254_genType = _out170;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3254_genType);
            }
          } else if (_source101.is_SetBuilder) {
            DAST._IType _3255___mcc_h164 = _source101.dtor_element;
            DAST._IType _3256_o = _3224_t;
            {
              RAST._IType _3257_genType;
              RAST._IType _out171;
              _out171 = DCOMP.COMP.GenType(_3256_o, false, false);
              _3257_genType = _out171;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3257_genType);
            }
          } else if (_source101.is_MapBuilder) {
            DAST._IType _3258___mcc_h166 = _source101.dtor_key;
            DAST._IType _3259___mcc_h167 = _source101.dtor_value;
            DAST._IType _3260_o = _3224_t;
            {
              RAST._IType _3261_genType;
              RAST._IType _out172;
              _out172 = DCOMP.COMP.GenType(_3260_o, false, false);
              _3261_genType = _out172;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3261_genType);
            }
          } else if (_source101.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3262___mcc_h170 = _source101.dtor_args;
            DAST._IType _3263___mcc_h171 = _source101.dtor_result;
            DAST._IType _3264_o = _3224_t;
            {
              RAST._IType _3265_genType;
              RAST._IType _out173;
              _out173 = DCOMP.COMP.GenType(_3264_o, false, false);
              _3265_genType = _out173;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3265_genType);
            }
          } else if (_source101.is_Primitive) {
            DAST._IPrimitive _3266___mcc_h174 = _source101.dtor_Primitive_a0;
            DAST._IPrimitive _source102 = _3266___mcc_h174;
            if (_source102.is_Int) {
              DAST._IType _3267_o = _3224_t;
              {
                RAST._IType _3268_genType;
                RAST._IType _out174;
                _out174 = DCOMP.COMP.GenType(_3267_o, false, false);
                _3268_genType = _out174;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3268_genType);
              }
            } else if (_source102.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source102.is_String) {
              DAST._IType _3269_o = _3224_t;
              {
                RAST._IType _3270_genType;
                RAST._IType _out175;
                _out175 = DCOMP.COMP.GenType(_3269_o, false, false);
                _3270_genType = _out175;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3270_genType);
              }
            } else if (_source102.is_Bool) {
              DAST._IType _3271_o = _3224_t;
              {
                RAST._IType _3272_genType;
                RAST._IType _out176;
                _out176 = DCOMP.COMP.GenType(_3271_o, false, false);
                _3272_genType = _out176;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3272_genType);
              }
            } else {
              DAST._IType _3273_o = _3224_t;
              {
                RAST._IType _3274_genType;
                RAST._IType _out177;
                _out177 = DCOMP.COMP.GenType(_3273_o, false, false);
                _3274_genType = _out177;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3274_genType);
              }
            }
          } else if (_source101.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3275___mcc_h176 = _source101.dtor_Passthrough_a0;
            DAST._IType _3276_o = _3224_t;
            {
              RAST._IType _3277_genType;
              RAST._IType _out178;
              _out178 = DCOMP.COMP.GenType(_3276_o, false, false);
              _3277_genType = _out178;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3277_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3278___mcc_h178 = _source101.dtor_TypeArg_a0;
            DAST._IType _3279_o = _3224_t;
            {
              RAST._IType _3280_genType;
              RAST._IType _out179;
              _out179 = DCOMP.COMP.GenType(_3279_o, false, false);
              _3280_genType = _out179;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3226_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _3225_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _3280_genType);
            }
          }
          RAST._IExpr _out180;
          DCOMP._IOwnership _out181;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out180, out _out181);
          r = _out180;
          resultingOwnership = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source98.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _3281___mcc_h7 = _source98.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _3282_l = _3281___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_3282_l, false));
          RAST._IExpr _out182;
          DCOMP._IOwnership _out183;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out182, out _out183);
          r = _out182;
          resultingOwnership = _out183;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source98.is_CharLiteral) {
        Dafny.Rune _3283___mcc_h8 = _source98.dtor_CharLiteral_a0;
        Dafny.Rune _3284_c = _3283___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_3284_c).Value)));
          if (!(DCOMP.__default.UnicodeChars)) {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u16"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          } else {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u32"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          r = ((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out184;
          DCOMP._IOwnership _out185;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out184, out _out185);
          r = _out184;
          resultingOwnership = _out185;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _3285___mcc_h9 = _source98.dtor_Null_a0;
        DAST._IType _3286_tpe = _3285___mcc_h9;
        {
          RAST._IType _3287_tpeGen;
          RAST._IType _out186;
          _out186 = DCOMP.COMP.GenType(_3286_tpe, false, false);
          _3287_tpeGen = _out186;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _3287_tpeGen);
          RAST._IExpr _out187;
          DCOMP._IOwnership _out188;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out187, out _out188);
          r = _out187;
          resultingOwnership = _out188;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs50 = e;
      DAST._IBinOp _3288_op = _let_tmp_rhs50.dtor_op;
      DAST._IExpression _3289_lExpr = _let_tmp_rhs50.dtor_left;
      DAST._IExpression _3290_rExpr = _let_tmp_rhs50.dtor_right;
      DAST.Format._IBinOpFormat _3291_format = _let_tmp_rhs50.dtor_format2;
      bool _3292_becomesLeftCallsRight;
      _3292_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source103) => {
        if (_source103.is_Eq) {
          bool _3293___mcc_h0 = _source103.dtor_referential;
          bool _3294___mcc_h1 = _source103.dtor_nullable;
          return false;
        } else if (_source103.is_Div) {
          return false;
        } else if (_source103.is_EuclidianDiv) {
          return false;
        } else if (_source103.is_Mod) {
          return false;
        } else if (_source103.is_EuclidianMod) {
          return false;
        } else if (_source103.is_Lt) {
          return false;
        } else if (_source103.is_LtChar) {
          return false;
        } else if (_source103.is_Plus) {
          return false;
        } else if (_source103.is_Minus) {
          return false;
        } else if (_source103.is_Times) {
          return false;
        } else if (_source103.is_BitwiseAnd) {
          return false;
        } else if (_source103.is_BitwiseOr) {
          return false;
        } else if (_source103.is_BitwiseXor) {
          return false;
        } else if (_source103.is_BitwiseShiftRight) {
          return false;
        } else if (_source103.is_BitwiseShiftLeft) {
          return false;
        } else if (_source103.is_And) {
          return false;
        } else if (_source103.is_Or) {
          return false;
        } else if (_source103.is_In) {
          return false;
        } else if (_source103.is_SeqProperPrefix) {
          return false;
        } else if (_source103.is_SeqPrefix) {
          return false;
        } else if (_source103.is_SetMerge) {
          return true;
        } else if (_source103.is_SetSubtraction) {
          return true;
        } else if (_source103.is_SetIntersection) {
          return true;
        } else if (_source103.is_Subset) {
          return false;
        } else if (_source103.is_ProperSubset) {
          return false;
        } else if (_source103.is_SetDisjoint) {
          return true;
        } else if (_source103.is_MapMerge) {
          return true;
        } else if (_source103.is_MapSubtraction) {
          return true;
        } else if (_source103.is_MultisetMerge) {
          return true;
        } else if (_source103.is_MultisetSubtraction) {
          return true;
        } else if (_source103.is_MultisetIntersection) {
          return true;
        } else if (_source103.is_Submultiset) {
          return false;
        } else if (_source103.is_ProperSubmultiset) {
          return false;
        } else if (_source103.is_MultisetDisjoint) {
          return true;
        } else if (_source103.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _3295___mcc_h4 = _source103.dtor_Passthrough_a0;
          return false;
        }
      }))(_3288_op);
      bool _3296_becomesRightCallsLeft;
      _3296_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source104) => {
        if (_source104.is_Eq) {
          bool _3297___mcc_h6 = _source104.dtor_referential;
          bool _3298___mcc_h7 = _source104.dtor_nullable;
          return false;
        } else if (_source104.is_Div) {
          return false;
        } else if (_source104.is_EuclidianDiv) {
          return false;
        } else if (_source104.is_Mod) {
          return false;
        } else if (_source104.is_EuclidianMod) {
          return false;
        } else if (_source104.is_Lt) {
          return false;
        } else if (_source104.is_LtChar) {
          return false;
        } else if (_source104.is_Plus) {
          return false;
        } else if (_source104.is_Minus) {
          return false;
        } else if (_source104.is_Times) {
          return false;
        } else if (_source104.is_BitwiseAnd) {
          return false;
        } else if (_source104.is_BitwiseOr) {
          return false;
        } else if (_source104.is_BitwiseXor) {
          return false;
        } else if (_source104.is_BitwiseShiftRight) {
          return false;
        } else if (_source104.is_BitwiseShiftLeft) {
          return false;
        } else if (_source104.is_And) {
          return false;
        } else if (_source104.is_Or) {
          return false;
        } else if (_source104.is_In) {
          return true;
        } else if (_source104.is_SeqProperPrefix) {
          return false;
        } else if (_source104.is_SeqPrefix) {
          return false;
        } else if (_source104.is_SetMerge) {
          return false;
        } else if (_source104.is_SetSubtraction) {
          return false;
        } else if (_source104.is_SetIntersection) {
          return false;
        } else if (_source104.is_Subset) {
          return false;
        } else if (_source104.is_ProperSubset) {
          return false;
        } else if (_source104.is_SetDisjoint) {
          return false;
        } else if (_source104.is_MapMerge) {
          return false;
        } else if (_source104.is_MapSubtraction) {
          return false;
        } else if (_source104.is_MultisetMerge) {
          return false;
        } else if (_source104.is_MultisetSubtraction) {
          return false;
        } else if (_source104.is_MultisetIntersection) {
          return false;
        } else if (_source104.is_Submultiset) {
          return false;
        } else if (_source104.is_ProperSubmultiset) {
          return false;
        } else if (_source104.is_MultisetDisjoint) {
          return false;
        } else if (_source104.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _3299___mcc_h10 = _source104.dtor_Passthrough_a0;
          return false;
        }
      }))(_3288_op);
      bool _3300_becomesCallLeftRight;
      _3300_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source105) => {
        if (_source105.is_Eq) {
          bool _3301___mcc_h12 = _source105.dtor_referential;
          bool _3302___mcc_h13 = _source105.dtor_nullable;
          if ((_3301___mcc_h12) == (true)) {
            if ((_3302___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source105.is_Div) {
          return false;
        } else if (_source105.is_EuclidianDiv) {
          return false;
        } else if (_source105.is_Mod) {
          return false;
        } else if (_source105.is_EuclidianMod) {
          return false;
        } else if (_source105.is_Lt) {
          return false;
        } else if (_source105.is_LtChar) {
          return false;
        } else if (_source105.is_Plus) {
          return false;
        } else if (_source105.is_Minus) {
          return false;
        } else if (_source105.is_Times) {
          return false;
        } else if (_source105.is_BitwiseAnd) {
          return false;
        } else if (_source105.is_BitwiseOr) {
          return false;
        } else if (_source105.is_BitwiseXor) {
          return false;
        } else if (_source105.is_BitwiseShiftRight) {
          return false;
        } else if (_source105.is_BitwiseShiftLeft) {
          return false;
        } else if (_source105.is_And) {
          return false;
        } else if (_source105.is_Or) {
          return false;
        } else if (_source105.is_In) {
          return false;
        } else if (_source105.is_SeqProperPrefix) {
          return false;
        } else if (_source105.is_SeqPrefix) {
          return false;
        } else if (_source105.is_SetMerge) {
          return false;
        } else if (_source105.is_SetSubtraction) {
          return false;
        } else if (_source105.is_SetIntersection) {
          return false;
        } else if (_source105.is_Subset) {
          return false;
        } else if (_source105.is_ProperSubset) {
          return false;
        } else if (_source105.is_SetDisjoint) {
          return false;
        } else if (_source105.is_MapMerge) {
          return false;
        } else if (_source105.is_MapSubtraction) {
          return false;
        } else if (_source105.is_MultisetMerge) {
          return false;
        } else if (_source105.is_MultisetSubtraction) {
          return false;
        } else if (_source105.is_MultisetIntersection) {
          return false;
        } else if (_source105.is_Submultiset) {
          return false;
        } else if (_source105.is_ProperSubmultiset) {
          return false;
        } else if (_source105.is_MultisetDisjoint) {
          return false;
        } else if (_source105.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _3303___mcc_h16 = _source105.dtor_Passthrough_a0;
          return false;
        }
      }))(_3288_op);
      DCOMP._IOwnership _3304_expectedLeftOwnership;
      _3304_expectedLeftOwnership = ((_3292_becomesLeftCallsRight) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : ((((_3296_becomesRightCallsLeft) || (_3300_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      DCOMP._IOwnership _3305_expectedRightOwnership;
      _3305_expectedRightOwnership = (((_3292_becomesLeftCallsRight) || (_3300_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (((_3296_becomesRightCallsLeft) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _3306_left;
      DCOMP._IOwnership _3307___v65;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3308_recIdentsL;
      RAST._IExpr _out189;
      DCOMP._IOwnership _out190;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
      DCOMP.COMP.GenExpr(_3289_lExpr, selfIdent, env, _3304_expectedLeftOwnership, out _out189, out _out190, out _out191);
      _3306_left = _out189;
      _3307___v65 = _out190;
      _3308_recIdentsL = _out191;
      RAST._IExpr _3309_right;
      DCOMP._IOwnership _3310___v66;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3311_recIdentsR;
      RAST._IExpr _out192;
      DCOMP._IOwnership _out193;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
      DCOMP.COMP.GenExpr(_3290_rExpr, selfIdent, env, _3305_expectedRightOwnership, out _out192, out _out193, out _out194);
      _3309_right = _out192;
      _3310___v66 = _out193;
      _3311_recIdentsR = _out194;
      DAST._IBinOp _source106 = _3288_op;
      if (_source106.is_Eq) {
        bool _3312___mcc_h18 = _source106.dtor_referential;
        bool _3313___mcc_h19 = _source106.dtor_nullable;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source107 = _3288_op;
            if (_source107.is_Eq) {
              bool _3314___mcc_h24 = _source107.dtor_referential;
              bool _3315___mcc_h25 = _source107.dtor_nullable;
              bool _3316_nullable = _3315___mcc_h25;
              bool _3317_referential = _3314___mcc_h24;
              {
                if (_3317_referential) {
                  if (_3316_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source107.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source107.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3318___mcc_h26 = _source107.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3319_op = _3318___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_3319_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_Div) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source108 = _3288_op;
            if (_source108.is_Eq) {
              bool _3320___mcc_h27 = _source108.dtor_referential;
              bool _3321___mcc_h28 = _source108.dtor_nullable;
              bool _3322_nullable = _3321___mcc_h28;
              bool _3323_referential = _3320___mcc_h27;
              {
                if (_3323_referential) {
                  if (_3322_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source108.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source108.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3324___mcc_h29 = _source108.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3325_op = _3324___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_3325_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_EuclidianDiv) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source109 = _3288_op;
            if (_source109.is_Eq) {
              bool _3326___mcc_h30 = _source109.dtor_referential;
              bool _3327___mcc_h31 = _source109.dtor_nullable;
              bool _3328_nullable = _3327___mcc_h31;
              bool _3329_referential = _3326___mcc_h30;
              {
                if (_3329_referential) {
                  if (_3328_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source109.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source109.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3330___mcc_h32 = _source109.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3331_op = _3330___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_3331_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_Mod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source110 = _3288_op;
            if (_source110.is_Eq) {
              bool _3332___mcc_h33 = _source110.dtor_referential;
              bool _3333___mcc_h34 = _source110.dtor_nullable;
              bool _3334_nullable = _3333___mcc_h34;
              bool _3335_referential = _3332___mcc_h33;
              {
                if (_3335_referential) {
                  if (_3334_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source110.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source110.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3336___mcc_h35 = _source110.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3337_op = _3336___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_3337_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_EuclidianMod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source111 = _3288_op;
            if (_source111.is_Eq) {
              bool _3338___mcc_h36 = _source111.dtor_referential;
              bool _3339___mcc_h37 = _source111.dtor_nullable;
              bool _3340_nullable = _3339___mcc_h37;
              bool _3341_referential = _3338___mcc_h36;
              {
                if (_3341_referential) {
                  if (_3340_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source111.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source111.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3342___mcc_h38 = _source111.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3343_op = _3342___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_3343_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_Lt) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source112 = _3288_op;
            if (_source112.is_Eq) {
              bool _3344___mcc_h39 = _source112.dtor_referential;
              bool _3345___mcc_h40 = _source112.dtor_nullable;
              bool _3346_nullable = _3345___mcc_h40;
              bool _3347_referential = _3344___mcc_h39;
              {
                if (_3347_referential) {
                  if (_3346_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source112.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source112.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3348___mcc_h41 = _source112.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3349_op = _3348___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_3349_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_LtChar) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source113 = _3288_op;
            if (_source113.is_Eq) {
              bool _3350___mcc_h42 = _source113.dtor_referential;
              bool _3351___mcc_h43 = _source113.dtor_nullable;
              bool _3352_nullable = _3351___mcc_h43;
              bool _3353_referential = _3350___mcc_h42;
              {
                if (_3353_referential) {
                  if (_3352_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source113.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source113.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3354___mcc_h44 = _source113.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3355_op = _3354___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_3355_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_Plus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source114 = _3288_op;
            if (_source114.is_Eq) {
              bool _3356___mcc_h45 = _source114.dtor_referential;
              bool _3357___mcc_h46 = _source114.dtor_nullable;
              bool _3358_nullable = _3357___mcc_h46;
              bool _3359_referential = _3356___mcc_h45;
              {
                if (_3359_referential) {
                  if (_3358_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source114.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source114.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3360___mcc_h47 = _source114.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3361_op = _3360___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_3361_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_Minus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source115 = _3288_op;
            if (_source115.is_Eq) {
              bool _3362___mcc_h48 = _source115.dtor_referential;
              bool _3363___mcc_h49 = _source115.dtor_nullable;
              bool _3364_nullable = _3363___mcc_h49;
              bool _3365_referential = _3362___mcc_h48;
              {
                if (_3365_referential) {
                  if (_3364_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source115.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source115.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3366___mcc_h50 = _source115.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3367_op = _3366___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_3367_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_Times) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source116 = _3288_op;
            if (_source116.is_Eq) {
              bool _3368___mcc_h51 = _source116.dtor_referential;
              bool _3369___mcc_h52 = _source116.dtor_nullable;
              bool _3370_nullable = _3369___mcc_h52;
              bool _3371_referential = _3368___mcc_h51;
              {
                if (_3371_referential) {
                  if (_3370_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source116.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source116.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3372___mcc_h53 = _source116.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3373_op = _3372___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_3373_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_BitwiseAnd) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source117 = _3288_op;
            if (_source117.is_Eq) {
              bool _3374___mcc_h54 = _source117.dtor_referential;
              bool _3375___mcc_h55 = _source117.dtor_nullable;
              bool _3376_nullable = _3375___mcc_h55;
              bool _3377_referential = _3374___mcc_h54;
              {
                if (_3377_referential) {
                  if (_3376_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source117.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source117.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3378___mcc_h56 = _source117.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3379_op = _3378___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_3379_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_BitwiseOr) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source118 = _3288_op;
            if (_source118.is_Eq) {
              bool _3380___mcc_h57 = _source118.dtor_referential;
              bool _3381___mcc_h58 = _source118.dtor_nullable;
              bool _3382_nullable = _3381___mcc_h58;
              bool _3383_referential = _3380___mcc_h57;
              {
                if (_3383_referential) {
                  if (_3382_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source118.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source118.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3384___mcc_h59 = _source118.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3385_op = _3384___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_3385_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_BitwiseXor) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source119 = _3288_op;
            if (_source119.is_Eq) {
              bool _3386___mcc_h60 = _source119.dtor_referential;
              bool _3387___mcc_h61 = _source119.dtor_nullable;
              bool _3388_nullable = _3387___mcc_h61;
              bool _3389_referential = _3386___mcc_h60;
              {
                if (_3389_referential) {
                  if (_3388_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source119.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source119.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3390___mcc_h62 = _source119.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3391_op = _3390___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_3391_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_BitwiseShiftRight) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source120 = _3288_op;
            if (_source120.is_Eq) {
              bool _3392___mcc_h63 = _source120.dtor_referential;
              bool _3393___mcc_h64 = _source120.dtor_nullable;
              bool _3394_nullable = _3393___mcc_h64;
              bool _3395_referential = _3392___mcc_h63;
              {
                if (_3395_referential) {
                  if (_3394_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source120.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source120.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3396___mcc_h65 = _source120.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3397_op = _3396___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_3397_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_BitwiseShiftLeft) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source121 = _3288_op;
            if (_source121.is_Eq) {
              bool _3398___mcc_h66 = _source121.dtor_referential;
              bool _3399___mcc_h67 = _source121.dtor_nullable;
              bool _3400_nullable = _3399___mcc_h67;
              bool _3401_referential = _3398___mcc_h66;
              {
                if (_3401_referential) {
                  if (_3400_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source121.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source121.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3402___mcc_h68 = _source121.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3403_op = _3402___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_3403_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_And) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source122 = _3288_op;
            if (_source122.is_Eq) {
              bool _3404___mcc_h69 = _source122.dtor_referential;
              bool _3405___mcc_h70 = _source122.dtor_nullable;
              bool _3406_nullable = _3405___mcc_h70;
              bool _3407_referential = _3404___mcc_h69;
              {
                if (_3407_referential) {
                  if (_3406_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source122.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source122.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3408___mcc_h71 = _source122.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3409_op = _3408___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_3409_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_Or) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source123 = _3288_op;
            if (_source123.is_Eq) {
              bool _3410___mcc_h72 = _source123.dtor_referential;
              bool _3411___mcc_h73 = _source123.dtor_nullable;
              bool _3412_nullable = _3411___mcc_h73;
              bool _3413_referential = _3410___mcc_h72;
              {
                if (_3413_referential) {
                  if (_3412_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source123.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source123.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3414___mcc_h74 = _source123.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3415_op = _3414___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_3415_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      } else if (_source106.is_In) {
        {
          r = ((_3309_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_3306_left);
        }
      } else if (_source106.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3306_left, _3309_right, _3291_format);
      } else if (_source106.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3306_left, _3309_right, _3291_format);
      } else if (_source106.is_SetMerge) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3309_right);
        }
      } else if (_source106.is_SetSubtraction) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3309_right);
        }
      } else if (_source106.is_SetIntersection) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3309_right);
        }
      } else if (_source106.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3306_left, _3309_right, _3291_format);
        }
      } else if (_source106.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3306_left, _3309_right, _3291_format);
        }
      } else if (_source106.is_SetDisjoint) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3309_right);
        }
      } else if (_source106.is_MapMerge) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3309_right);
        }
      } else if (_source106.is_MapSubtraction) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3309_right);
        }
      } else if (_source106.is_MultisetMerge) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_3309_right);
        }
      } else if (_source106.is_MultisetSubtraction) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_3309_right);
        }
      } else if (_source106.is_MultisetIntersection) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_3309_right);
        }
      } else if (_source106.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _3306_left, _3309_right, _3291_format);
        }
      } else if (_source106.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3306_left, _3309_right, _3291_format);
        }
      } else if (_source106.is_MultisetDisjoint) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_3309_right);
        }
      } else if (_source106.is_Concat) {
        {
          r = ((_3306_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_3309_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _3416___mcc_h22 = _source106.dtor_Passthrough_a0;
        {
          if ((DCOMP.COMP.OpTable).Contains(_3288_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_3288_op), _3306_left, _3309_right, _3291_format);
          } else {
            DAST._IBinOp _source124 = _3288_op;
            if (_source124.is_Eq) {
              bool _3417___mcc_h75 = _source124.dtor_referential;
              bool _3418___mcc_h76 = _source124.dtor_nullable;
              bool _3419_nullable = _3418___mcc_h76;
              bool _3420_referential = _3417___mcc_h75;
              {
                if (_3420_referential) {
                  if (_3419_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _3306_left, _3309_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source124.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else if (_source124.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_3306_left, _3309_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3421___mcc_h77 = _source124.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _3422_op = _3421___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_3422_op, _3306_left, _3309_right, _3291_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out195;
      DCOMP._IOwnership _out196;
      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out195, out _out196);
      r = _out195;
      resultingOwnership = _out196;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3308_recIdentsL, _3311_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs51 = e;
      DAST._IExpression _3423_expr = _let_tmp_rhs51.dtor_value;
      DAST._IType _3424_fromTpe = _let_tmp_rhs51.dtor_from;
      DAST._IType _3425_toTpe = _let_tmp_rhs51.dtor_typ;
      if (object.Equals(_3424_fromTpe, _3425_toTpe)) {
        RAST._IExpr _3426_recursiveGen;
        DCOMP._IOwnership _3427_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3428_recIdents;
        RAST._IExpr _out197;
        DCOMP._IOwnership _out198;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
        DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out197, out _out198, out _out199);
        _3426_recursiveGen = _out197;
        _3427_recOwned = _out198;
        _3428_recIdents = _out199;
        r = _3426_recursiveGen;
        RAST._IExpr _out200;
        DCOMP._IOwnership _out201;
        DCOMP.COMP.FromOwnership(r, _3427_recOwned, expectedOwnership, out _out200, out _out201);
        r = _out200;
        resultingOwnership = _out201;
        readIdents = _3428_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source125 = _System.Tuple2<DAST._IType, DAST._IType>.create(_3424_fromTpe, _3425_toTpe);
        DAST._IType _3429___mcc_h0 = _source125.dtor__0;
        DAST._IType _3430___mcc_h1 = _source125.dtor__1;
        DAST._IType _source126 = _3429___mcc_h0;
        if (_source126.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3431___mcc_h4 = _source126.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _3432___mcc_h5 = _source126.dtor_typeArgs;
          DAST._IResolvedType _3433___mcc_h6 = _source126.dtor_resolved;
          DAST._IResolvedType _source127 = _3433___mcc_h6;
          if (_source127.is_Datatype) {
            DAST._IDatatypeType _3434___mcc_h16 = _source127.dtor_datatypeType;
            DAST._IType _source128 = _3430___mcc_h1;
            if (_source128.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3435___mcc_h20 = _source128.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3436___mcc_h21 = _source128.dtor_typeArgs;
              DAST._IResolvedType _3437___mcc_h22 = _source128.dtor_resolved;
              DAST._IResolvedType _source129 = _3437___mcc_h22;
              if (_source129.is_Datatype) {
                DAST._IDatatypeType _3438___mcc_h26 = _source129.dtor_datatypeType;
                {
                  RAST._IExpr _3439_recursiveGen;
                  DCOMP._IOwnership _3440_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3441_recIdents;
                  RAST._IExpr _out202;
                  DCOMP._IOwnership _out203;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out202, out _out203, out _out204);
                  _3439_recursiveGen = _out202;
                  _3440_recOwned = _out203;
                  _3441_recIdents = _out204;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3439_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out205;
                  DCOMP._IOwnership _out206;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out205, out _out206);
                  r = _out205;
                  resultingOwnership = _out206;
                  readIdents = _3441_recIdents;
                }
              } else if (_source129.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3442___mcc_h28 = _source129.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3443___mcc_h29 = _source129.dtor_attributes;
                {
                  RAST._IExpr _3444_recursiveGen;
                  DCOMP._IOwnership _3445_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3446_recIdents;
                  RAST._IExpr _out207;
                  DCOMP._IOwnership _out208;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out207, out _out208, out _out209);
                  _3444_recursiveGen = _out207;
                  _3445_recOwned = _out208;
                  _3446_recIdents = _out209;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3444_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out210;
                  DCOMP._IOwnership _out211;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out210, out _out211);
                  r = _out210;
                  resultingOwnership = _out211;
                  readIdents = _3446_recIdents;
                }
              } else {
                DAST._IType _3447___mcc_h32 = _source129.dtor_baseType;
                DAST._INewtypeRange _3448___mcc_h33 = _source129.dtor_range;
                bool _3449___mcc_h34 = _source129.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3450___mcc_h35 = _source129.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3451_attributes = _3450___mcc_h35;
                bool _3452_erase = _3449___mcc_h34;
                DAST._INewtypeRange _3453_range = _3448___mcc_h33;
                DAST._IType _3454_b = _3447___mcc_h32;
                {
                  if (object.Equals(_3424_fromTpe, _3454_b)) {
                    RAST._IExpr _3455_recursiveGen;
                    DCOMP._IOwnership _3456_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3457_recIdents;
                    RAST._IExpr _out212;
                    DCOMP._IOwnership _out213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out212, out _out213, out _out214);
                    _3455_recursiveGen = _out212;
                    _3456_recOwned = _out213;
                    _3457_recIdents = _out214;
                    Std.Wrappers._IOption<RAST._IType> _3458_potentialRhsType;
                    _3458_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3454_b, _3453_range);
                    Std.Wrappers._IOption<RAST._IType> _source130 = _3458_potentialRhsType;
                    if (_source130.is_None) {
                      if (_3452_erase) {
                        r = _3455_recursiveGen;
                      } else {
                        RAST._IType _3459_rhsType;
                        RAST._IType _out215;
                        _out215 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                        _3459_rhsType = _out215;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3459_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3455_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out216;
                      DCOMP._IOwnership _out217;
                      DCOMP.COMP.FromOwnership(r, _3456_recOwned, expectedOwnership, out _out216, out _out217);
                      r = _out216;
                      resultingOwnership = _out217;
                    } else {
                      RAST._IType _3460___mcc_h1246 = _source130.dtor_value;
                      RAST._IType _3461_v = _3460___mcc_h1246;
                      r = RAST.Expr.create_ConversionNum(_3461_v, _3455_recursiveGen);
                      RAST._IExpr _out218;
                      DCOMP._IOwnership _out219;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out218, out _out219);
                      r = _out218;
                      resultingOwnership = _out219;
                    }
                    readIdents = _3457_recIdents;
                  } else {
                    RAST._IExpr _out220;
                    DCOMP._IOwnership _out221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3454_b), _3454_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out220, out _out221, out _out222);
                    r = _out220;
                    resultingOwnership = _out221;
                    readIdents = _out222;
                  }
                }
              }
            } else if (_source128.is_Nullable) {
              DAST._IType _3462___mcc_h40 = _source128.dtor_Nullable_a0;
              {
                RAST._IExpr _3463_recursiveGen;
                DCOMP._IOwnership _3464_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3465_recIdents;
                RAST._IExpr _out223;
                DCOMP._IOwnership _out224;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out225;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out223, out _out224, out _out225);
                _3463_recursiveGen = _out223;
                _3464_recOwned = _out224;
                _3465_recIdents = _out225;
                r = _3463_recursiveGen;
                if (object.Equals(_3464_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out226;
                DCOMP._IOwnership _out227;
                DCOMP.COMP.FromOwnership(r, _3464_recOwned, expectedOwnership, out _out226, out _out227);
                r = _out226;
                resultingOwnership = _out227;
                readIdents = _3465_recIdents;
              }
            } else if (_source128.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3466___mcc_h42 = _source128.dtor_Tuple_a0;
              {
                RAST._IExpr _3467_recursiveGen;
                DCOMP._IOwnership _3468_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3469_recIdents;
                RAST._IExpr _out228;
                DCOMP._IOwnership _out229;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out228, out _out229, out _out230);
                _3467_recursiveGen = _out228;
                _3468_recOwned = _out229;
                _3469_recIdents = _out230;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3467_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out231;
                DCOMP._IOwnership _out232;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out231, out _out232);
                r = _out231;
                resultingOwnership = _out232;
                readIdents = _3469_recIdents;
              }
            } else if (_source128.is_Array) {
              DAST._IType _3470___mcc_h44 = _source128.dtor_element;
              BigInteger _3471___mcc_h45 = _source128.dtor_dims;
              {
                RAST._IExpr _3472_recursiveGen;
                DCOMP._IOwnership _3473_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3474_recIdents;
                RAST._IExpr _out233;
                DCOMP._IOwnership _out234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out233, out _out234, out _out235);
                _3472_recursiveGen = _out233;
                _3473_recOwned = _out234;
                _3474_recIdents = _out235;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3472_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out236;
                DCOMP._IOwnership _out237;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out236, out _out237);
                r = _out236;
                resultingOwnership = _out237;
                readIdents = _3474_recIdents;
              }
            } else if (_source128.is_Seq) {
              DAST._IType _3475___mcc_h48 = _source128.dtor_element;
              {
                RAST._IExpr _3476_recursiveGen;
                DCOMP._IOwnership _3477_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3478_recIdents;
                RAST._IExpr _out238;
                DCOMP._IOwnership _out239;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out240;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out238, out _out239, out _out240);
                _3476_recursiveGen = _out238;
                _3477_recOwned = _out239;
                _3478_recIdents = _out240;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3476_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out241;
                DCOMP._IOwnership _out242;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out241, out _out242);
                r = _out241;
                resultingOwnership = _out242;
                readIdents = _3478_recIdents;
              }
            } else if (_source128.is_Set) {
              DAST._IType _3479___mcc_h50 = _source128.dtor_element;
              {
                RAST._IExpr _3480_recursiveGen;
                DCOMP._IOwnership _3481_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3482_recIdents;
                RAST._IExpr _out243;
                DCOMP._IOwnership _out244;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out245;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out243, out _out244, out _out245);
                _3480_recursiveGen = _out243;
                _3481_recOwned = _out244;
                _3482_recIdents = _out245;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3480_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out246;
                DCOMP._IOwnership _out247;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out246, out _out247);
                r = _out246;
                resultingOwnership = _out247;
                readIdents = _3482_recIdents;
              }
            } else if (_source128.is_Multiset) {
              DAST._IType _3483___mcc_h52 = _source128.dtor_element;
              {
                RAST._IExpr _3484_recursiveGen;
                DCOMP._IOwnership _3485_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3486_recIdents;
                RAST._IExpr _out248;
                DCOMP._IOwnership _out249;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out248, out _out249, out _out250);
                _3484_recursiveGen = _out248;
                _3485_recOwned = _out249;
                _3486_recIdents = _out250;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3484_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out251;
                DCOMP._IOwnership _out252;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out251, out _out252);
                r = _out251;
                resultingOwnership = _out252;
                readIdents = _3486_recIdents;
              }
            } else if (_source128.is_Map) {
              DAST._IType _3487___mcc_h54 = _source128.dtor_key;
              DAST._IType _3488___mcc_h55 = _source128.dtor_value;
              {
                RAST._IExpr _3489_recursiveGen;
                DCOMP._IOwnership _3490_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3491_recIdents;
                RAST._IExpr _out253;
                DCOMP._IOwnership _out254;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out253, out _out254, out _out255);
                _3489_recursiveGen = _out253;
                _3490_recOwned = _out254;
                _3491_recIdents = _out255;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3489_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out256;
                DCOMP._IOwnership _out257;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out256, out _out257);
                r = _out256;
                resultingOwnership = _out257;
                readIdents = _3491_recIdents;
              }
            } else if (_source128.is_SetBuilder) {
              DAST._IType _3492___mcc_h58 = _source128.dtor_element;
              {
                RAST._IExpr _3493_recursiveGen;
                DCOMP._IOwnership _3494_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3495_recIdents;
                RAST._IExpr _out258;
                DCOMP._IOwnership _out259;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out258, out _out259, out _out260);
                _3493_recursiveGen = _out258;
                _3494_recOwned = _out259;
                _3495_recIdents = _out260;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3493_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out261;
                DCOMP._IOwnership _out262;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out261, out _out262);
                r = _out261;
                resultingOwnership = _out262;
                readIdents = _3495_recIdents;
              }
            } else if (_source128.is_MapBuilder) {
              DAST._IType _3496___mcc_h60 = _source128.dtor_key;
              DAST._IType _3497___mcc_h61 = _source128.dtor_value;
              {
                RAST._IExpr _3498_recursiveGen;
                DCOMP._IOwnership _3499_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3500_recIdents;
                RAST._IExpr _out263;
                DCOMP._IOwnership _out264;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out263, out _out264, out _out265);
                _3498_recursiveGen = _out263;
                _3499_recOwned = _out264;
                _3500_recIdents = _out265;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3498_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out266;
                DCOMP._IOwnership _out267;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out266, out _out267);
                r = _out266;
                resultingOwnership = _out267;
                readIdents = _3500_recIdents;
              }
            } else if (_source128.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3501___mcc_h64 = _source128.dtor_args;
              DAST._IType _3502___mcc_h65 = _source128.dtor_result;
              {
                RAST._IExpr _3503_recursiveGen;
                DCOMP._IOwnership _3504_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3505_recIdents;
                RAST._IExpr _out268;
                DCOMP._IOwnership _out269;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out268, out _out269, out _out270);
                _3503_recursiveGen = _out268;
                _3504_recOwned = _out269;
                _3505_recIdents = _out270;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3503_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out271;
                DCOMP._IOwnership _out272;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out271, out _out272);
                r = _out271;
                resultingOwnership = _out272;
                readIdents = _3505_recIdents;
              }
            } else if (_source128.is_Primitive) {
              DAST._IPrimitive _3506___mcc_h68 = _source128.dtor_Primitive_a0;
              {
                RAST._IExpr _3507_recursiveGen;
                DCOMP._IOwnership _3508_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3509_recIdents;
                RAST._IExpr _out273;
                DCOMP._IOwnership _out274;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out273, out _out274, out _out275);
                _3507_recursiveGen = _out273;
                _3508_recOwned = _out274;
                _3509_recIdents = _out275;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3507_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out276;
                DCOMP._IOwnership _out277;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out276, out _out277);
                r = _out276;
                resultingOwnership = _out277;
                readIdents = _3509_recIdents;
              }
            } else if (_source128.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3510___mcc_h70 = _source128.dtor_Passthrough_a0;
              {
                RAST._IExpr _3511_recursiveGen;
                DCOMP._IOwnership _3512_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3513_recIdents;
                RAST._IExpr _out278;
                DCOMP._IOwnership _out279;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out280;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out278, out _out279, out _out280);
                _3511_recursiveGen = _out278;
                _3512_recOwned = _out279;
                _3513_recIdents = _out280;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3511_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out281;
                DCOMP._IOwnership _out282;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out281, out _out282);
                r = _out281;
                resultingOwnership = _out282;
                readIdents = _3513_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3514___mcc_h72 = _source128.dtor_TypeArg_a0;
              {
                RAST._IExpr _3515_recursiveGen;
                DCOMP._IOwnership _3516_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3517_recIdents;
                RAST._IExpr _out283;
                DCOMP._IOwnership _out284;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out285;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out283, out _out284, out _out285);
                _3515_recursiveGen = _out283;
                _3516_recOwned = _out284;
                _3517_recIdents = _out285;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3515_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out286;
                DCOMP._IOwnership _out287;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out286, out _out287);
                r = _out286;
                resultingOwnership = _out287;
                readIdents = _3517_recIdents;
              }
            }
          } else if (_source127.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3518___mcc_h74 = _source127.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _3519___mcc_h75 = _source127.dtor_attributes;
            DAST._IType _source131 = _3430___mcc_h1;
            if (_source131.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3520___mcc_h82 = _source131.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3521___mcc_h83 = _source131.dtor_typeArgs;
              DAST._IResolvedType _3522___mcc_h84 = _source131.dtor_resolved;
              DAST._IResolvedType _source132 = _3522___mcc_h84;
              if (_source132.is_Datatype) {
                DAST._IDatatypeType _3523___mcc_h88 = _source132.dtor_datatypeType;
                {
                  RAST._IExpr _3524_recursiveGen;
                  DCOMP._IOwnership _3525_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3526_recIdents;
                  RAST._IExpr _out288;
                  DCOMP._IOwnership _out289;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out288, out _out289, out _out290);
                  _3524_recursiveGen = _out288;
                  _3525_recOwned = _out289;
                  _3526_recIdents = _out290;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3524_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out291;
                  DCOMP._IOwnership _out292;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out291, out _out292);
                  r = _out291;
                  resultingOwnership = _out292;
                  readIdents = _3526_recIdents;
                }
              } else if (_source132.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3527___mcc_h90 = _source132.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3528___mcc_h91 = _source132.dtor_attributes;
                {
                  RAST._IExpr _3529_recursiveGen;
                  DCOMP._IOwnership _3530_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3531_recIdents;
                  RAST._IExpr _out293;
                  DCOMP._IOwnership _out294;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out293, out _out294, out _out295);
                  _3529_recursiveGen = _out293;
                  _3530_recOwned = _out294;
                  _3531_recIdents = _out295;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3529_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out296;
                  DCOMP._IOwnership _out297;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out296, out _out297);
                  r = _out296;
                  resultingOwnership = _out297;
                  readIdents = _3531_recIdents;
                }
              } else {
                DAST._IType _3532___mcc_h94 = _source132.dtor_baseType;
                DAST._INewtypeRange _3533___mcc_h95 = _source132.dtor_range;
                bool _3534___mcc_h96 = _source132.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3535___mcc_h97 = _source132.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3536_attributes = _3535___mcc_h97;
                bool _3537_erase = _3534___mcc_h96;
                DAST._INewtypeRange _3538_range = _3533___mcc_h95;
                DAST._IType _3539_b = _3532___mcc_h94;
                {
                  if (object.Equals(_3424_fromTpe, _3539_b)) {
                    RAST._IExpr _3540_recursiveGen;
                    DCOMP._IOwnership _3541_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3542_recIdents;
                    RAST._IExpr _out298;
                    DCOMP._IOwnership _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out298, out _out299, out _out300);
                    _3540_recursiveGen = _out298;
                    _3541_recOwned = _out299;
                    _3542_recIdents = _out300;
                    Std.Wrappers._IOption<RAST._IType> _3543_potentialRhsType;
                    _3543_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3539_b, _3538_range);
                    Std.Wrappers._IOption<RAST._IType> _source133 = _3543_potentialRhsType;
                    if (_source133.is_None) {
                      if (_3537_erase) {
                        r = _3540_recursiveGen;
                      } else {
                        RAST._IType _3544_rhsType;
                        RAST._IType _out301;
                        _out301 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                        _3544_rhsType = _out301;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3544_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out302;
                      DCOMP._IOwnership _out303;
                      DCOMP.COMP.FromOwnership(r, _3541_recOwned, expectedOwnership, out _out302, out _out303);
                      r = _out302;
                      resultingOwnership = _out303;
                    } else {
                      RAST._IType _3545___mcc_h1247 = _source133.dtor_value;
                      RAST._IType _3546_v = _3545___mcc_h1247;
                      r = RAST.Expr.create_ConversionNum(_3546_v, _3540_recursiveGen);
                      RAST._IExpr _out304;
                      DCOMP._IOwnership _out305;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out304, out _out305);
                      r = _out304;
                      resultingOwnership = _out305;
                    }
                    readIdents = _3542_recIdents;
                  } else {
                    RAST._IExpr _out306;
                    DCOMP._IOwnership _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3539_b), _3539_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out306, out _out307, out _out308);
                    r = _out306;
                    resultingOwnership = _out307;
                    readIdents = _out308;
                  }
                }
              }
            } else if (_source131.is_Nullable) {
              DAST._IType _3547___mcc_h102 = _source131.dtor_Nullable_a0;
              {
                RAST._IExpr _3548_recursiveGen;
                DCOMP._IOwnership _3549_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3550_recIdents;
                RAST._IExpr _out309;
                DCOMP._IOwnership _out310;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out309, out _out310, out _out311);
                _3548_recursiveGen = _out309;
                _3549_recOwned = _out310;
                _3550_recIdents = _out311;
                r = _3548_recursiveGen;
                if (object.Equals(_3549_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out312;
                DCOMP._IOwnership _out313;
                DCOMP.COMP.FromOwnership(r, _3549_recOwned, expectedOwnership, out _out312, out _out313);
                r = _out312;
                resultingOwnership = _out313;
                readIdents = _3550_recIdents;
              }
            } else if (_source131.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3551___mcc_h104 = _source131.dtor_Tuple_a0;
              {
                RAST._IExpr _3552_recursiveGen;
                DCOMP._IOwnership _3553_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3554_recIdents;
                RAST._IExpr _out314;
                DCOMP._IOwnership _out315;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out314, out _out315, out _out316);
                _3552_recursiveGen = _out314;
                _3553_recOwned = _out315;
                _3554_recIdents = _out316;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3552_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out317;
                DCOMP._IOwnership _out318;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out317, out _out318);
                r = _out317;
                resultingOwnership = _out318;
                readIdents = _3554_recIdents;
              }
            } else if (_source131.is_Array) {
              DAST._IType _3555___mcc_h106 = _source131.dtor_element;
              BigInteger _3556___mcc_h107 = _source131.dtor_dims;
              {
                RAST._IExpr _3557_recursiveGen;
                DCOMP._IOwnership _3558_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3559_recIdents;
                RAST._IExpr _out319;
                DCOMP._IOwnership _out320;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out321;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out319, out _out320, out _out321);
                _3557_recursiveGen = _out319;
                _3558_recOwned = _out320;
                _3559_recIdents = _out321;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3557_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out322;
                DCOMP._IOwnership _out323;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out322, out _out323);
                r = _out322;
                resultingOwnership = _out323;
                readIdents = _3559_recIdents;
              }
            } else if (_source131.is_Seq) {
              DAST._IType _3560___mcc_h110 = _source131.dtor_element;
              {
                RAST._IExpr _3561_recursiveGen;
                DCOMP._IOwnership _3562_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3563_recIdents;
                RAST._IExpr _out324;
                DCOMP._IOwnership _out325;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out326;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out324, out _out325, out _out326);
                _3561_recursiveGen = _out324;
                _3562_recOwned = _out325;
                _3563_recIdents = _out326;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3561_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out327;
                DCOMP._IOwnership _out328;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out327, out _out328);
                r = _out327;
                resultingOwnership = _out328;
                readIdents = _3563_recIdents;
              }
            } else if (_source131.is_Set) {
              DAST._IType _3564___mcc_h112 = _source131.dtor_element;
              {
                RAST._IExpr _3565_recursiveGen;
                DCOMP._IOwnership _3566_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3567_recIdents;
                RAST._IExpr _out329;
                DCOMP._IOwnership _out330;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out329, out _out330, out _out331);
                _3565_recursiveGen = _out329;
                _3566_recOwned = _out330;
                _3567_recIdents = _out331;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3565_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out332;
                DCOMP._IOwnership _out333;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out332, out _out333);
                r = _out332;
                resultingOwnership = _out333;
                readIdents = _3567_recIdents;
              }
            } else if (_source131.is_Multiset) {
              DAST._IType _3568___mcc_h114 = _source131.dtor_element;
              {
                RAST._IExpr _3569_recursiveGen;
                DCOMP._IOwnership _3570_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3571_recIdents;
                RAST._IExpr _out334;
                DCOMP._IOwnership _out335;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out334, out _out335, out _out336);
                _3569_recursiveGen = _out334;
                _3570_recOwned = _out335;
                _3571_recIdents = _out336;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3569_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out337;
                DCOMP._IOwnership _out338;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out337, out _out338);
                r = _out337;
                resultingOwnership = _out338;
                readIdents = _3571_recIdents;
              }
            } else if (_source131.is_Map) {
              DAST._IType _3572___mcc_h116 = _source131.dtor_key;
              DAST._IType _3573___mcc_h117 = _source131.dtor_value;
              {
                RAST._IExpr _3574_recursiveGen;
                DCOMP._IOwnership _3575_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3576_recIdents;
                RAST._IExpr _out339;
                DCOMP._IOwnership _out340;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out339, out _out340, out _out341);
                _3574_recursiveGen = _out339;
                _3575_recOwned = _out340;
                _3576_recIdents = _out341;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3574_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out342;
                DCOMP._IOwnership _out343;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out342, out _out343);
                r = _out342;
                resultingOwnership = _out343;
                readIdents = _3576_recIdents;
              }
            } else if (_source131.is_SetBuilder) {
              DAST._IType _3577___mcc_h120 = _source131.dtor_element;
              {
                RAST._IExpr _3578_recursiveGen;
                DCOMP._IOwnership _3579_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3580_recIdents;
                RAST._IExpr _out344;
                DCOMP._IOwnership _out345;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out346;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out344, out _out345, out _out346);
                _3578_recursiveGen = _out344;
                _3579_recOwned = _out345;
                _3580_recIdents = _out346;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3578_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out347;
                DCOMP._IOwnership _out348;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out347, out _out348);
                r = _out347;
                resultingOwnership = _out348;
                readIdents = _3580_recIdents;
              }
            } else if (_source131.is_MapBuilder) {
              DAST._IType _3581___mcc_h122 = _source131.dtor_key;
              DAST._IType _3582___mcc_h123 = _source131.dtor_value;
              {
                RAST._IExpr _3583_recursiveGen;
                DCOMP._IOwnership _3584_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3585_recIdents;
                RAST._IExpr _out349;
                DCOMP._IOwnership _out350;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out349, out _out350, out _out351);
                _3583_recursiveGen = _out349;
                _3584_recOwned = _out350;
                _3585_recIdents = _out351;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3583_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out352;
                DCOMP._IOwnership _out353;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out352, out _out353);
                r = _out352;
                resultingOwnership = _out353;
                readIdents = _3585_recIdents;
              }
            } else if (_source131.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3586___mcc_h126 = _source131.dtor_args;
              DAST._IType _3587___mcc_h127 = _source131.dtor_result;
              {
                RAST._IExpr _3588_recursiveGen;
                DCOMP._IOwnership _3589_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3590_recIdents;
                RAST._IExpr _out354;
                DCOMP._IOwnership _out355;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out354, out _out355, out _out356);
                _3588_recursiveGen = _out354;
                _3589_recOwned = _out355;
                _3590_recIdents = _out356;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3588_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out357;
                DCOMP._IOwnership _out358;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out357, out _out358);
                r = _out357;
                resultingOwnership = _out358;
                readIdents = _3590_recIdents;
              }
            } else if (_source131.is_Primitive) {
              DAST._IPrimitive _3591___mcc_h130 = _source131.dtor_Primitive_a0;
              {
                RAST._IExpr _3592_recursiveGen;
                DCOMP._IOwnership _3593_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3594_recIdents;
                RAST._IExpr _out359;
                DCOMP._IOwnership _out360;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out359, out _out360, out _out361);
                _3592_recursiveGen = _out359;
                _3593_recOwned = _out360;
                _3594_recIdents = _out361;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3592_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out362;
                DCOMP._IOwnership _out363;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out362, out _out363);
                r = _out362;
                resultingOwnership = _out363;
                readIdents = _3594_recIdents;
              }
            } else if (_source131.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3595___mcc_h132 = _source131.dtor_Passthrough_a0;
              {
                RAST._IExpr _3596_recursiveGen;
                DCOMP._IOwnership _3597_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3598_recIdents;
                RAST._IExpr _out364;
                DCOMP._IOwnership _out365;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out366;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out364, out _out365, out _out366);
                _3596_recursiveGen = _out364;
                _3597_recOwned = _out365;
                _3598_recIdents = _out366;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3596_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out367;
                DCOMP._IOwnership _out368;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out367, out _out368);
                r = _out367;
                resultingOwnership = _out368;
                readIdents = _3598_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3599___mcc_h134 = _source131.dtor_TypeArg_a0;
              {
                RAST._IExpr _3600_recursiveGen;
                DCOMP._IOwnership _3601_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3602_recIdents;
                RAST._IExpr _out369;
                DCOMP._IOwnership _out370;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out369, out _out370, out _out371);
                _3600_recursiveGen = _out369;
                _3601_recOwned = _out370;
                _3602_recIdents = _out371;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3600_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out372;
                DCOMP._IOwnership _out373;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out372, out _out373);
                r = _out372;
                resultingOwnership = _out373;
                readIdents = _3602_recIdents;
              }
            }
          } else {
            DAST._IType _3603___mcc_h136 = _source127.dtor_baseType;
            DAST._INewtypeRange _3604___mcc_h137 = _source127.dtor_range;
            bool _3605___mcc_h138 = _source127.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _3606___mcc_h139 = _source127.dtor_attributes;
            DAST._IType _source134 = _3430___mcc_h1;
            if (_source134.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3607___mcc_h152 = _source134.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3608___mcc_h153 = _source134.dtor_typeArgs;
              DAST._IResolvedType _3609___mcc_h154 = _source134.dtor_resolved;
              DAST._IResolvedType _source135 = _3609___mcc_h154;
              if (_source135.is_Datatype) {
                DAST._IDatatypeType _3610___mcc_h161 = _source135.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _3611_attributes = _3606___mcc_h139;
                bool _3612_erase = _3605___mcc_h138;
                DAST._INewtypeRange _3613_range = _3604___mcc_h137;
                DAST._IType _3614_b = _3603___mcc_h136;
                {
                  if (object.Equals(_3614_b, _3425_toTpe)) {
                    RAST._IExpr _3615_recursiveGen;
                    DCOMP._IOwnership _3616_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3617_recIdents;
                    RAST._IExpr _out374;
                    DCOMP._IOwnership _out375;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out374, out _out375, out _out376);
                    _3615_recursiveGen = _out374;
                    _3616_recOwned = _out375;
                    _3617_recIdents = _out376;
                    if (_3612_erase) {
                      r = _3615_recursiveGen;
                    } else {
                      r = (_3615_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out377;
                    DCOMP._IOwnership _out378;
                    DCOMP.COMP.FromOwnership(r, _3616_recOwned, expectedOwnership, out _out377, out _out378);
                    r = _out377;
                    resultingOwnership = _out378;
                    readIdents = _3617_recIdents;
                  } else {
                    RAST._IExpr _out379;
                    DCOMP._IOwnership _out380;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3614_b), _3614_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out379, out _out380, out _out381);
                    r = _out379;
                    resultingOwnership = _out380;
                    readIdents = _out381;
                  }
                }
              } else if (_source135.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3618___mcc_h164 = _source135.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3619___mcc_h165 = _source135.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3620_attributes = _3606___mcc_h139;
                bool _3621_erase = _3605___mcc_h138;
                DAST._INewtypeRange _3622_range = _3604___mcc_h137;
                DAST._IType _3623_b = _3603___mcc_h136;
                {
                  if (object.Equals(_3623_b, _3425_toTpe)) {
                    RAST._IExpr _3624_recursiveGen;
                    DCOMP._IOwnership _3625_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3626_recIdents;
                    RAST._IExpr _out382;
                    DCOMP._IOwnership _out383;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out382, out _out383, out _out384);
                    _3624_recursiveGen = _out382;
                    _3625_recOwned = _out383;
                    _3626_recIdents = _out384;
                    if (_3621_erase) {
                      r = _3624_recursiveGen;
                    } else {
                      r = (_3624_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out385;
                    DCOMP._IOwnership _out386;
                    DCOMP.COMP.FromOwnership(r, _3625_recOwned, expectedOwnership, out _out385, out _out386);
                    r = _out385;
                    resultingOwnership = _out386;
                    readIdents = _3626_recIdents;
                  } else {
                    RAST._IExpr _out387;
                    DCOMP._IOwnership _out388;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3623_b), _3623_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out387, out _out388, out _out389);
                    r = _out387;
                    resultingOwnership = _out388;
                    readIdents = _out389;
                  }
                }
              } else {
                DAST._IType _3627___mcc_h170 = _source135.dtor_baseType;
                DAST._INewtypeRange _3628___mcc_h171 = _source135.dtor_range;
                bool _3629___mcc_h172 = _source135.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3630___mcc_h173 = _source135.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3631_attributes = _3630___mcc_h173;
                bool _3632_erase = _3629___mcc_h172;
                DAST._INewtypeRange _3633_range = _3628___mcc_h171;
                DAST._IType _3634_b = _3627___mcc_h170;
                {
                  if (object.Equals(_3424_fromTpe, _3634_b)) {
                    RAST._IExpr _3635_recursiveGen;
                    DCOMP._IOwnership _3636_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3637_recIdents;
                    RAST._IExpr _out390;
                    DCOMP._IOwnership _out391;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out390, out _out391, out _out392);
                    _3635_recursiveGen = _out390;
                    _3636_recOwned = _out391;
                    _3637_recIdents = _out392;
                    Std.Wrappers._IOption<RAST._IType> _3638_potentialRhsType;
                    _3638_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3634_b, _3633_range);
                    Std.Wrappers._IOption<RAST._IType> _source136 = _3638_potentialRhsType;
                    if (_source136.is_None) {
                      if (_3632_erase) {
                        r = _3635_recursiveGen;
                      } else {
                        RAST._IType _3639_rhsType;
                        RAST._IType _out393;
                        _out393 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                        _3639_rhsType = _out393;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3639_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3635_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out394;
                      DCOMP._IOwnership _out395;
                      DCOMP.COMP.FromOwnership(r, _3636_recOwned, expectedOwnership, out _out394, out _out395);
                      r = _out394;
                      resultingOwnership = _out395;
                    } else {
                      RAST._IType _3640___mcc_h1248 = _source136.dtor_value;
                      RAST._IType _3641_v = _3640___mcc_h1248;
                      r = RAST.Expr.create_ConversionNum(_3641_v, _3635_recursiveGen);
                      RAST._IExpr _out396;
                      DCOMP._IOwnership _out397;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out396, out _out397);
                      r = _out396;
                      resultingOwnership = _out397;
                    }
                    readIdents = _3637_recIdents;
                  } else {
                    RAST._IExpr _out398;
                    DCOMP._IOwnership _out399;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3634_b), _3634_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out398, out _out399, out _out400);
                    r = _out398;
                    resultingOwnership = _out399;
                    readIdents = _out400;
                  }
                }
              }
            } else if (_source134.is_Nullable) {
              DAST._IType _3642___mcc_h182 = _source134.dtor_Nullable_a0;
              {
                RAST._IExpr _3643_recursiveGen;
                DCOMP._IOwnership _3644_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3645_recIdents;
                RAST._IExpr _out401;
                DCOMP._IOwnership _out402;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out401, out _out402, out _out403);
                _3643_recursiveGen = _out401;
                _3644_recOwned = _out402;
                _3645_recIdents = _out403;
                r = _3643_recursiveGen;
                if (object.Equals(_3644_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out404;
                DCOMP._IOwnership _out405;
                DCOMP.COMP.FromOwnership(r, _3644_recOwned, expectedOwnership, out _out404, out _out405);
                r = _out404;
                resultingOwnership = _out405;
                readIdents = _3645_recIdents;
              }
            } else if (_source134.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3646___mcc_h185 = _source134.dtor_Tuple_a0;
              Dafny.ISequence<DAST._IAttribute> _3647_attributes = _3606___mcc_h139;
              bool _3648_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3649_range = _3604___mcc_h137;
              DAST._IType _3650_b = _3603___mcc_h136;
              {
                if (object.Equals(_3650_b, _3425_toTpe)) {
                  RAST._IExpr _3651_recursiveGen;
                  DCOMP._IOwnership _3652_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3653_recIdents;
                  RAST._IExpr _out406;
                  DCOMP._IOwnership _out407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out406, out _out407, out _out408);
                  _3651_recursiveGen = _out406;
                  _3652_recOwned = _out407;
                  _3653_recIdents = _out408;
                  if (_3648_erase) {
                    r = _3651_recursiveGen;
                  } else {
                    r = (_3651_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out409;
                  DCOMP._IOwnership _out410;
                  DCOMP.COMP.FromOwnership(r, _3652_recOwned, expectedOwnership, out _out409, out _out410);
                  r = _out409;
                  resultingOwnership = _out410;
                  readIdents = _3653_recIdents;
                } else {
                  RAST._IExpr _out411;
                  DCOMP._IOwnership _out412;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3650_b), _3650_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out411, out _out412, out _out413);
                  r = _out411;
                  resultingOwnership = _out412;
                  readIdents = _out413;
                }
              }
            } else if (_source134.is_Array) {
              DAST._IType _3654___mcc_h188 = _source134.dtor_element;
              BigInteger _3655___mcc_h189 = _source134.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _3656_attributes = _3606___mcc_h139;
              bool _3657_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3658_range = _3604___mcc_h137;
              DAST._IType _3659_b = _3603___mcc_h136;
              {
                if (object.Equals(_3659_b, _3425_toTpe)) {
                  RAST._IExpr _3660_recursiveGen;
                  DCOMP._IOwnership _3661_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3662_recIdents;
                  RAST._IExpr _out414;
                  DCOMP._IOwnership _out415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out414, out _out415, out _out416);
                  _3660_recursiveGen = _out414;
                  _3661_recOwned = _out415;
                  _3662_recIdents = _out416;
                  if (_3657_erase) {
                    r = _3660_recursiveGen;
                  } else {
                    r = (_3660_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out417;
                  DCOMP._IOwnership _out418;
                  DCOMP.COMP.FromOwnership(r, _3661_recOwned, expectedOwnership, out _out417, out _out418);
                  r = _out417;
                  resultingOwnership = _out418;
                  readIdents = _3662_recIdents;
                } else {
                  RAST._IExpr _out419;
                  DCOMP._IOwnership _out420;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3659_b), _3659_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out419, out _out420, out _out421);
                  r = _out419;
                  resultingOwnership = _out420;
                  readIdents = _out421;
                }
              }
            } else if (_source134.is_Seq) {
              DAST._IType _3663___mcc_h194 = _source134.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3664_attributes = _3606___mcc_h139;
              bool _3665_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3666_range = _3604___mcc_h137;
              DAST._IType _3667_b = _3603___mcc_h136;
              {
                if (object.Equals(_3667_b, _3425_toTpe)) {
                  RAST._IExpr _3668_recursiveGen;
                  DCOMP._IOwnership _3669_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3670_recIdents;
                  RAST._IExpr _out422;
                  DCOMP._IOwnership _out423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out422, out _out423, out _out424);
                  _3668_recursiveGen = _out422;
                  _3669_recOwned = _out423;
                  _3670_recIdents = _out424;
                  if (_3665_erase) {
                    r = _3668_recursiveGen;
                  } else {
                    r = (_3668_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out425;
                  DCOMP._IOwnership _out426;
                  DCOMP.COMP.FromOwnership(r, _3669_recOwned, expectedOwnership, out _out425, out _out426);
                  r = _out425;
                  resultingOwnership = _out426;
                  readIdents = _3670_recIdents;
                } else {
                  RAST._IExpr _out427;
                  DCOMP._IOwnership _out428;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3667_b), _3667_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out427, out _out428, out _out429);
                  r = _out427;
                  resultingOwnership = _out428;
                  readIdents = _out429;
                }
              }
            } else if (_source134.is_Set) {
              DAST._IType _3671___mcc_h197 = _source134.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3672_attributes = _3606___mcc_h139;
              bool _3673_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3674_range = _3604___mcc_h137;
              DAST._IType _3675_b = _3603___mcc_h136;
              {
                if (object.Equals(_3675_b, _3425_toTpe)) {
                  RAST._IExpr _3676_recursiveGen;
                  DCOMP._IOwnership _3677_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3678_recIdents;
                  RAST._IExpr _out430;
                  DCOMP._IOwnership _out431;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out430, out _out431, out _out432);
                  _3676_recursiveGen = _out430;
                  _3677_recOwned = _out431;
                  _3678_recIdents = _out432;
                  if (_3673_erase) {
                    r = _3676_recursiveGen;
                  } else {
                    r = (_3676_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out433;
                  DCOMP._IOwnership _out434;
                  DCOMP.COMP.FromOwnership(r, _3677_recOwned, expectedOwnership, out _out433, out _out434);
                  r = _out433;
                  resultingOwnership = _out434;
                  readIdents = _3678_recIdents;
                } else {
                  RAST._IExpr _out435;
                  DCOMP._IOwnership _out436;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3675_b), _3675_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out435, out _out436, out _out437);
                  r = _out435;
                  resultingOwnership = _out436;
                  readIdents = _out437;
                }
              }
            } else if (_source134.is_Multiset) {
              DAST._IType _3679___mcc_h200 = _source134.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3680_attributes = _3606___mcc_h139;
              bool _3681_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3682_range = _3604___mcc_h137;
              DAST._IType _3683_b = _3603___mcc_h136;
              {
                if (object.Equals(_3683_b, _3425_toTpe)) {
                  RAST._IExpr _3684_recursiveGen;
                  DCOMP._IOwnership _3685_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3686_recIdents;
                  RAST._IExpr _out438;
                  DCOMP._IOwnership _out439;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out438, out _out439, out _out440);
                  _3684_recursiveGen = _out438;
                  _3685_recOwned = _out439;
                  _3686_recIdents = _out440;
                  if (_3681_erase) {
                    r = _3684_recursiveGen;
                  } else {
                    r = (_3684_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out441;
                  DCOMP._IOwnership _out442;
                  DCOMP.COMP.FromOwnership(r, _3685_recOwned, expectedOwnership, out _out441, out _out442);
                  r = _out441;
                  resultingOwnership = _out442;
                  readIdents = _3686_recIdents;
                } else {
                  RAST._IExpr _out443;
                  DCOMP._IOwnership _out444;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3683_b), _3683_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out443, out _out444, out _out445);
                  r = _out443;
                  resultingOwnership = _out444;
                  readIdents = _out445;
                }
              }
            } else if (_source134.is_Map) {
              DAST._IType _3687___mcc_h203 = _source134.dtor_key;
              DAST._IType _3688___mcc_h204 = _source134.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _3689_attributes = _3606___mcc_h139;
              bool _3690_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3691_range = _3604___mcc_h137;
              DAST._IType _3692_b = _3603___mcc_h136;
              {
                if (object.Equals(_3692_b, _3425_toTpe)) {
                  RAST._IExpr _3693_recursiveGen;
                  DCOMP._IOwnership _3694_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3695_recIdents;
                  RAST._IExpr _out446;
                  DCOMP._IOwnership _out447;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out446, out _out447, out _out448);
                  _3693_recursiveGen = _out446;
                  _3694_recOwned = _out447;
                  _3695_recIdents = _out448;
                  if (_3690_erase) {
                    r = _3693_recursiveGen;
                  } else {
                    r = (_3693_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out449;
                  DCOMP._IOwnership _out450;
                  DCOMP.COMP.FromOwnership(r, _3694_recOwned, expectedOwnership, out _out449, out _out450);
                  r = _out449;
                  resultingOwnership = _out450;
                  readIdents = _3695_recIdents;
                } else {
                  RAST._IExpr _out451;
                  DCOMP._IOwnership _out452;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3692_b), _3692_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out451, out _out452, out _out453);
                  r = _out451;
                  resultingOwnership = _out452;
                  readIdents = _out453;
                }
              }
            } else if (_source134.is_SetBuilder) {
              DAST._IType _3696___mcc_h209 = _source134.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3697_attributes = _3606___mcc_h139;
              bool _3698_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3699_range = _3604___mcc_h137;
              DAST._IType _3700_b = _3603___mcc_h136;
              {
                if (object.Equals(_3700_b, _3425_toTpe)) {
                  RAST._IExpr _3701_recursiveGen;
                  DCOMP._IOwnership _3702_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3703_recIdents;
                  RAST._IExpr _out454;
                  DCOMP._IOwnership _out455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out454, out _out455, out _out456);
                  _3701_recursiveGen = _out454;
                  _3702_recOwned = _out455;
                  _3703_recIdents = _out456;
                  if (_3698_erase) {
                    r = _3701_recursiveGen;
                  } else {
                    r = (_3701_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out457;
                  DCOMP._IOwnership _out458;
                  DCOMP.COMP.FromOwnership(r, _3702_recOwned, expectedOwnership, out _out457, out _out458);
                  r = _out457;
                  resultingOwnership = _out458;
                  readIdents = _3703_recIdents;
                } else {
                  RAST._IExpr _out459;
                  DCOMP._IOwnership _out460;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3700_b), _3700_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out459, out _out460, out _out461);
                  r = _out459;
                  resultingOwnership = _out460;
                  readIdents = _out461;
                }
              }
            } else if (_source134.is_MapBuilder) {
              DAST._IType _3704___mcc_h212 = _source134.dtor_key;
              DAST._IType _3705___mcc_h213 = _source134.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _3706_attributes = _3606___mcc_h139;
              bool _3707_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3708_range = _3604___mcc_h137;
              DAST._IType _3709_b = _3603___mcc_h136;
              {
                if (object.Equals(_3709_b, _3425_toTpe)) {
                  RAST._IExpr _3710_recursiveGen;
                  DCOMP._IOwnership _3711_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3712_recIdents;
                  RAST._IExpr _out462;
                  DCOMP._IOwnership _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out462, out _out463, out _out464);
                  _3710_recursiveGen = _out462;
                  _3711_recOwned = _out463;
                  _3712_recIdents = _out464;
                  if (_3707_erase) {
                    r = _3710_recursiveGen;
                  } else {
                    r = (_3710_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out465;
                  DCOMP._IOwnership _out466;
                  DCOMP.COMP.FromOwnership(r, _3711_recOwned, expectedOwnership, out _out465, out _out466);
                  r = _out465;
                  resultingOwnership = _out466;
                  readIdents = _3712_recIdents;
                } else {
                  RAST._IExpr _out467;
                  DCOMP._IOwnership _out468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3709_b), _3709_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out467, out _out468, out _out469);
                  r = _out467;
                  resultingOwnership = _out468;
                  readIdents = _out469;
                }
              }
            } else if (_source134.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3713___mcc_h218 = _source134.dtor_args;
              DAST._IType _3714___mcc_h219 = _source134.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _3715_attributes = _3606___mcc_h139;
              bool _3716_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3717_range = _3604___mcc_h137;
              DAST._IType _3718_b = _3603___mcc_h136;
              {
                if (object.Equals(_3718_b, _3425_toTpe)) {
                  RAST._IExpr _3719_recursiveGen;
                  DCOMP._IOwnership _3720_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3721_recIdents;
                  RAST._IExpr _out470;
                  DCOMP._IOwnership _out471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out470, out _out471, out _out472);
                  _3719_recursiveGen = _out470;
                  _3720_recOwned = _out471;
                  _3721_recIdents = _out472;
                  if (_3716_erase) {
                    r = _3719_recursiveGen;
                  } else {
                    r = (_3719_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out473;
                  DCOMP._IOwnership _out474;
                  DCOMP.COMP.FromOwnership(r, _3720_recOwned, expectedOwnership, out _out473, out _out474);
                  r = _out473;
                  resultingOwnership = _out474;
                  readIdents = _3721_recIdents;
                } else {
                  RAST._IExpr _out475;
                  DCOMP._IOwnership _out476;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3718_b), _3718_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out475, out _out476, out _out477);
                  r = _out475;
                  resultingOwnership = _out476;
                  readIdents = _out477;
                }
              }
            } else if (_source134.is_Primitive) {
              DAST._IPrimitive _3722___mcc_h224 = _source134.dtor_Primitive_a0;
              Dafny.ISequence<DAST._IAttribute> _3723_attributes = _3606___mcc_h139;
              bool _3724_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3725_range = _3604___mcc_h137;
              DAST._IType _3726_b = _3603___mcc_h136;
              {
                if (object.Equals(_3726_b, _3425_toTpe)) {
                  RAST._IExpr _3727_recursiveGen;
                  DCOMP._IOwnership _3728_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3729_recIdents;
                  RAST._IExpr _out478;
                  DCOMP._IOwnership _out479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out478, out _out479, out _out480);
                  _3727_recursiveGen = _out478;
                  _3728_recOwned = _out479;
                  _3729_recIdents = _out480;
                  if (_3724_erase) {
                    r = _3727_recursiveGen;
                  } else {
                    r = (_3727_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out481;
                  DCOMP._IOwnership _out482;
                  DCOMP.COMP.FromOwnership(r, _3728_recOwned, expectedOwnership, out _out481, out _out482);
                  r = _out481;
                  resultingOwnership = _out482;
                  readIdents = _3729_recIdents;
                } else {
                  RAST._IExpr _out483;
                  DCOMP._IOwnership _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3726_b), _3726_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out483, out _out484, out _out485);
                  r = _out483;
                  resultingOwnership = _out484;
                  readIdents = _out485;
                }
              }
            } else if (_source134.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3730___mcc_h227 = _source134.dtor_Passthrough_a0;
              Dafny.ISequence<DAST._IAttribute> _3731_attributes = _3606___mcc_h139;
              bool _3732_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3733_range = _3604___mcc_h137;
              DAST._IType _3734_b = _3603___mcc_h136;
              {
                if (object.Equals(_3734_b, _3425_toTpe)) {
                  RAST._IExpr _3735_recursiveGen;
                  DCOMP._IOwnership _3736_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3737_recIdents;
                  RAST._IExpr _out486;
                  DCOMP._IOwnership _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out486, out _out487, out _out488);
                  _3735_recursiveGen = _out486;
                  _3736_recOwned = _out487;
                  _3737_recIdents = _out488;
                  if (_3732_erase) {
                    r = _3735_recursiveGen;
                  } else {
                    r = (_3735_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out489;
                  DCOMP._IOwnership _out490;
                  DCOMP.COMP.FromOwnership(r, _3736_recOwned, expectedOwnership, out _out489, out _out490);
                  r = _out489;
                  resultingOwnership = _out490;
                  readIdents = _3737_recIdents;
                } else {
                  RAST._IExpr _out491;
                  DCOMP._IOwnership _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3734_b), _3734_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out491, out _out492, out _out493);
                  r = _out491;
                  resultingOwnership = _out492;
                  readIdents = _out493;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3738___mcc_h230 = _source134.dtor_TypeArg_a0;
              Dafny.ISequence<DAST._IAttribute> _3739_attributes = _3606___mcc_h139;
              bool _3740_erase = _3605___mcc_h138;
              DAST._INewtypeRange _3741_range = _3604___mcc_h137;
              DAST._IType _3742_b = _3603___mcc_h136;
              {
                if (object.Equals(_3742_b, _3425_toTpe)) {
                  RAST._IExpr _3743_recursiveGen;
                  DCOMP._IOwnership _3744_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3745_recIdents;
                  RAST._IExpr _out494;
                  DCOMP._IOwnership _out495;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out494, out _out495, out _out496);
                  _3743_recursiveGen = _out494;
                  _3744_recOwned = _out495;
                  _3745_recIdents = _out496;
                  if (_3740_erase) {
                    r = _3743_recursiveGen;
                  } else {
                    r = (_3743_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out497;
                  DCOMP._IOwnership _out498;
                  DCOMP.COMP.FromOwnership(r, _3744_recOwned, expectedOwnership, out _out497, out _out498);
                  r = _out497;
                  resultingOwnership = _out498;
                  readIdents = _3745_recIdents;
                } else {
                  RAST._IExpr _out499;
                  DCOMP._IOwnership _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3742_b), _3742_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out499, out _out500, out _out501);
                  r = _out499;
                  resultingOwnership = _out500;
                  readIdents = _out501;
                }
              }
            }
          }
        } else if (_source126.is_Nullable) {
          DAST._IType _3746___mcc_h233 = _source126.dtor_Nullable_a0;
          DAST._IType _source137 = _3430___mcc_h1;
          if (_source137.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3747___mcc_h237 = _source137.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3748___mcc_h238 = _source137.dtor_typeArgs;
            DAST._IResolvedType _3749___mcc_h239 = _source137.dtor_resolved;
            DAST._IResolvedType _source138 = _3749___mcc_h239;
            if (_source138.is_Datatype) {
              DAST._IDatatypeType _3750___mcc_h246 = _source138.dtor_datatypeType;
              {
                RAST._IExpr _3751_recursiveGen;
                DCOMP._IOwnership _3752_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3753_recIdents;
                RAST._IExpr _out502;
                DCOMP._IOwnership _out503;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out502, out _out503, out _out504);
                _3751_recursiveGen = _out502;
                _3752_recOwned = _out503;
                _3753_recIdents = _out504;
                r = _3751_recursiveGen;
                if (object.Equals(_3752_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out505;
                DCOMP._IOwnership _out506;
                DCOMP.COMP.FromOwnership(r, _3752_recOwned, expectedOwnership, out _out505, out _out506);
                r = _out505;
                resultingOwnership = _out506;
                readIdents = _3753_recIdents;
              }
            } else if (_source138.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3754___mcc_h249 = _source138.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3755___mcc_h250 = _source138.dtor_attributes;
              {
                RAST._IExpr _3756_recursiveGen;
                DCOMP._IOwnership _3757_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3758_recIdents;
                RAST._IExpr _out507;
                DCOMP._IOwnership _out508;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out507, out _out508, out _out509);
                _3756_recursiveGen = _out507;
                _3757_recOwned = _out508;
                _3758_recIdents = _out509;
                r = _3756_recursiveGen;
                if (object.Equals(_3757_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out510;
                DCOMP._IOwnership _out511;
                DCOMP.COMP.FromOwnership(r, _3757_recOwned, expectedOwnership, out _out510, out _out511);
                r = _out510;
                resultingOwnership = _out511;
                readIdents = _3758_recIdents;
              }
            } else {
              DAST._IType _3759___mcc_h255 = _source138.dtor_baseType;
              DAST._INewtypeRange _3760___mcc_h256 = _source138.dtor_range;
              bool _3761___mcc_h257 = _source138.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3762___mcc_h258 = _source138.dtor_attributes;
              {
                RAST._IExpr _3763_recursiveGen;
                DCOMP._IOwnership _3764_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3765_recIdents;
                RAST._IExpr _out512;
                DCOMP._IOwnership _out513;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out514;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out512, out _out513, out _out514);
                _3763_recursiveGen = _out512;
                _3764_recOwned = _out513;
                _3765_recIdents = _out514;
                r = _3763_recursiveGen;
                if (object.Equals(_3764_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out515;
                DCOMP._IOwnership _out516;
                DCOMP.COMP.FromOwnership(r, _3764_recOwned, expectedOwnership, out _out515, out _out516);
                r = _out515;
                resultingOwnership = _out516;
                readIdents = _3765_recIdents;
              }
            }
          } else if (_source137.is_Nullable) {
            DAST._IType _3766___mcc_h267 = _source137.dtor_Nullable_a0;
            {
              RAST._IExpr _3767_recursiveGen;
              DCOMP._IOwnership _3768_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3769_recIdents;
              RAST._IExpr _out517;
              DCOMP._IOwnership _out518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out519;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out517, out _out518, out _out519);
              _3767_recursiveGen = _out517;
              _3768_recOwned = _out518;
              _3769_recIdents = _out519;
              r = _3767_recursiveGen;
              if (object.Equals(_3768_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out520;
              DCOMP._IOwnership _out521;
              DCOMP.COMP.FromOwnership(r, _3768_recOwned, expectedOwnership, out _out520, out _out521);
              r = _out520;
              resultingOwnership = _out521;
              readIdents = _3769_recIdents;
            }
          } else if (_source137.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3770___mcc_h270 = _source137.dtor_Tuple_a0;
            {
              RAST._IExpr _3771_recursiveGen;
              DCOMP._IOwnership _3772_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3773_recIdents;
              RAST._IExpr _out522;
              DCOMP._IOwnership _out523;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out524;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out522, out _out523, out _out524);
              _3771_recursiveGen = _out522;
              _3772_recOwned = _out523;
              _3773_recIdents = _out524;
              r = _3771_recursiveGen;
              if (object.Equals(_3772_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out525;
              DCOMP._IOwnership _out526;
              DCOMP.COMP.FromOwnership(r, _3772_recOwned, expectedOwnership, out _out525, out _out526);
              r = _out525;
              resultingOwnership = _out526;
              readIdents = _3773_recIdents;
            }
          } else if (_source137.is_Array) {
            DAST._IType _3774___mcc_h273 = _source137.dtor_element;
            BigInteger _3775___mcc_h274 = _source137.dtor_dims;
            {
              RAST._IExpr _3776_recursiveGen;
              DCOMP._IOwnership _3777_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3778_recIdents;
              RAST._IExpr _out527;
              DCOMP._IOwnership _out528;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out527, out _out528, out _out529);
              _3776_recursiveGen = _out527;
              _3777_recOwned = _out528;
              _3778_recIdents = _out529;
              r = _3776_recursiveGen;
              if (object.Equals(_3777_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out530;
              DCOMP._IOwnership _out531;
              DCOMP.COMP.FromOwnership(r, _3777_recOwned, expectedOwnership, out _out530, out _out531);
              r = _out530;
              resultingOwnership = _out531;
              readIdents = _3778_recIdents;
            }
          } else if (_source137.is_Seq) {
            DAST._IType _3779___mcc_h279 = _source137.dtor_element;
            {
              RAST._IExpr _3780_recursiveGen;
              DCOMP._IOwnership _3781_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3782_recIdents;
              RAST._IExpr _out532;
              DCOMP._IOwnership _out533;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out532, out _out533, out _out534);
              _3780_recursiveGen = _out532;
              _3781_recOwned = _out533;
              _3782_recIdents = _out534;
              r = _3780_recursiveGen;
              if (object.Equals(_3781_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out535;
              DCOMP._IOwnership _out536;
              DCOMP.COMP.FromOwnership(r, _3781_recOwned, expectedOwnership, out _out535, out _out536);
              r = _out535;
              resultingOwnership = _out536;
              readIdents = _3782_recIdents;
            }
          } else if (_source137.is_Set) {
            DAST._IType _3783___mcc_h282 = _source137.dtor_element;
            {
              RAST._IExpr _3784_recursiveGen;
              DCOMP._IOwnership _3785_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3786_recIdents;
              RAST._IExpr _out537;
              DCOMP._IOwnership _out538;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out539;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out537, out _out538, out _out539);
              _3784_recursiveGen = _out537;
              _3785_recOwned = _out538;
              _3786_recIdents = _out539;
              r = _3784_recursiveGen;
              if (object.Equals(_3785_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out540;
              DCOMP._IOwnership _out541;
              DCOMP.COMP.FromOwnership(r, _3785_recOwned, expectedOwnership, out _out540, out _out541);
              r = _out540;
              resultingOwnership = _out541;
              readIdents = _3786_recIdents;
            }
          } else if (_source137.is_Multiset) {
            DAST._IType _3787___mcc_h285 = _source137.dtor_element;
            {
              RAST._IExpr _3788_recursiveGen;
              DCOMP._IOwnership _3789_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3790_recIdents;
              RAST._IExpr _out542;
              DCOMP._IOwnership _out543;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out544;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out542, out _out543, out _out544);
              _3788_recursiveGen = _out542;
              _3789_recOwned = _out543;
              _3790_recIdents = _out544;
              r = _3788_recursiveGen;
              if (object.Equals(_3789_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out545;
              DCOMP._IOwnership _out546;
              DCOMP.COMP.FromOwnership(r, _3789_recOwned, expectedOwnership, out _out545, out _out546);
              r = _out545;
              resultingOwnership = _out546;
              readIdents = _3790_recIdents;
            }
          } else if (_source137.is_Map) {
            DAST._IType _3791___mcc_h288 = _source137.dtor_key;
            DAST._IType _3792___mcc_h289 = _source137.dtor_value;
            {
              RAST._IExpr _3793_recursiveGen;
              DCOMP._IOwnership _3794_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3795_recIdents;
              RAST._IExpr _out547;
              DCOMP._IOwnership _out548;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out547, out _out548, out _out549);
              _3793_recursiveGen = _out547;
              _3794_recOwned = _out548;
              _3795_recIdents = _out549;
              r = _3793_recursiveGen;
              if (object.Equals(_3794_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out550;
              DCOMP._IOwnership _out551;
              DCOMP.COMP.FromOwnership(r, _3794_recOwned, expectedOwnership, out _out550, out _out551);
              r = _out550;
              resultingOwnership = _out551;
              readIdents = _3795_recIdents;
            }
          } else if (_source137.is_SetBuilder) {
            DAST._IType _3796___mcc_h294 = _source137.dtor_element;
            {
              RAST._IExpr _3797_recursiveGen;
              DCOMP._IOwnership _3798_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3799_recIdents;
              RAST._IExpr _out552;
              DCOMP._IOwnership _out553;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out552, out _out553, out _out554);
              _3797_recursiveGen = _out552;
              _3798_recOwned = _out553;
              _3799_recIdents = _out554;
              r = _3797_recursiveGen;
              if (object.Equals(_3798_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out555;
              DCOMP._IOwnership _out556;
              DCOMP.COMP.FromOwnership(r, _3798_recOwned, expectedOwnership, out _out555, out _out556);
              r = _out555;
              resultingOwnership = _out556;
              readIdents = _3799_recIdents;
            }
          } else if (_source137.is_MapBuilder) {
            DAST._IType _3800___mcc_h297 = _source137.dtor_key;
            DAST._IType _3801___mcc_h298 = _source137.dtor_value;
            {
              RAST._IExpr _3802_recursiveGen;
              DCOMP._IOwnership _3803_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3804_recIdents;
              RAST._IExpr _out557;
              DCOMP._IOwnership _out558;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out557, out _out558, out _out559);
              _3802_recursiveGen = _out557;
              _3803_recOwned = _out558;
              _3804_recIdents = _out559;
              r = _3802_recursiveGen;
              if (object.Equals(_3803_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out560;
              DCOMP._IOwnership _out561;
              DCOMP.COMP.FromOwnership(r, _3803_recOwned, expectedOwnership, out _out560, out _out561);
              r = _out560;
              resultingOwnership = _out561;
              readIdents = _3804_recIdents;
            }
          } else if (_source137.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3805___mcc_h303 = _source137.dtor_args;
            DAST._IType _3806___mcc_h304 = _source137.dtor_result;
            {
              RAST._IExpr _3807_recursiveGen;
              DCOMP._IOwnership _3808_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3809_recIdents;
              RAST._IExpr _out562;
              DCOMP._IOwnership _out563;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out564;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out562, out _out563, out _out564);
              _3807_recursiveGen = _out562;
              _3808_recOwned = _out563;
              _3809_recIdents = _out564;
              r = _3807_recursiveGen;
              if (object.Equals(_3808_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out565;
              DCOMP._IOwnership _out566;
              DCOMP.COMP.FromOwnership(r, _3808_recOwned, expectedOwnership, out _out565, out _out566);
              r = _out565;
              resultingOwnership = _out566;
              readIdents = _3809_recIdents;
            }
          } else if (_source137.is_Primitive) {
            DAST._IPrimitive _3810___mcc_h309 = _source137.dtor_Primitive_a0;
            {
              RAST._IExpr _3811_recursiveGen;
              DCOMP._IOwnership _3812_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3813_recIdents;
              RAST._IExpr _out567;
              DCOMP._IOwnership _out568;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out567, out _out568, out _out569);
              _3811_recursiveGen = _out567;
              _3812_recOwned = _out568;
              _3813_recIdents = _out569;
              r = _3811_recursiveGen;
              if (object.Equals(_3812_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out570;
              DCOMP._IOwnership _out571;
              DCOMP.COMP.FromOwnership(r, _3812_recOwned, expectedOwnership, out _out570, out _out571);
              r = _out570;
              resultingOwnership = _out571;
              readIdents = _3813_recIdents;
            }
          } else if (_source137.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3814___mcc_h312 = _source137.dtor_Passthrough_a0;
            {
              RAST._IExpr _3815_recursiveGen;
              DCOMP._IOwnership _3816_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3817_recIdents;
              RAST._IExpr _out572;
              DCOMP._IOwnership _out573;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out572, out _out573, out _out574);
              _3815_recursiveGen = _out572;
              _3816_recOwned = _out573;
              _3817_recIdents = _out574;
              r = _3815_recursiveGen;
              if (object.Equals(_3816_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out575;
              DCOMP._IOwnership _out576;
              DCOMP.COMP.FromOwnership(r, _3816_recOwned, expectedOwnership, out _out575, out _out576);
              r = _out575;
              resultingOwnership = _out576;
              readIdents = _3817_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3818___mcc_h315 = _source137.dtor_TypeArg_a0;
            {
              RAST._IExpr _3819_recursiveGen;
              DCOMP._IOwnership _3820_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3821_recIdents;
              RAST._IExpr _out577;
              DCOMP._IOwnership _out578;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out577, out _out578, out _out579);
              _3819_recursiveGen = _out577;
              _3820_recOwned = _out578;
              _3821_recIdents = _out579;
              r = _3819_recursiveGen;
              if (object.Equals(_3820_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out580;
              DCOMP._IOwnership _out581;
              DCOMP.COMP.FromOwnership(r, _3820_recOwned, expectedOwnership, out _out580, out _out581);
              r = _out580;
              resultingOwnership = _out581;
              readIdents = _3821_recIdents;
            }
          }
        } else if (_source126.is_Tuple) {
          Dafny.ISequence<DAST._IType> _3822___mcc_h318 = _source126.dtor_Tuple_a0;
          DAST._IType _source139 = _3430___mcc_h1;
          if (_source139.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3823___mcc_h322 = _source139.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3824___mcc_h323 = _source139.dtor_typeArgs;
            DAST._IResolvedType _3825___mcc_h324 = _source139.dtor_resolved;
            DAST._IResolvedType _source140 = _3825___mcc_h324;
            if (_source140.is_Datatype) {
              DAST._IDatatypeType _3826___mcc_h328 = _source140.dtor_datatypeType;
              {
                RAST._IExpr _3827_recursiveGen;
                DCOMP._IOwnership _3828_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3829_recIdents;
                RAST._IExpr _out582;
                DCOMP._IOwnership _out583;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out584;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out582, out _out583, out _out584);
                _3827_recursiveGen = _out582;
                _3828_recOwned = _out583;
                _3829_recIdents = _out584;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3827_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out585;
                DCOMP._IOwnership _out586;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out585, out _out586);
                r = _out585;
                resultingOwnership = _out586;
                readIdents = _3829_recIdents;
              }
            } else if (_source140.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3830___mcc_h330 = _source140.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3831___mcc_h331 = _source140.dtor_attributes;
              {
                RAST._IExpr _3832_recursiveGen;
                DCOMP._IOwnership _3833_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3834_recIdents;
                RAST._IExpr _out587;
                DCOMP._IOwnership _out588;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out587, out _out588, out _out589);
                _3832_recursiveGen = _out587;
                _3833_recOwned = _out588;
                _3834_recIdents = _out589;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3832_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out590;
                DCOMP._IOwnership _out591;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out590, out _out591);
                r = _out590;
                resultingOwnership = _out591;
                readIdents = _3834_recIdents;
              }
            } else {
              DAST._IType _3835___mcc_h334 = _source140.dtor_baseType;
              DAST._INewtypeRange _3836___mcc_h335 = _source140.dtor_range;
              bool _3837___mcc_h336 = _source140.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3838___mcc_h337 = _source140.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3839_attributes = _3838___mcc_h337;
              bool _3840_erase = _3837___mcc_h336;
              DAST._INewtypeRange _3841_range = _3836___mcc_h335;
              DAST._IType _3842_b = _3835___mcc_h334;
              {
                if (object.Equals(_3424_fromTpe, _3842_b)) {
                  RAST._IExpr _3843_recursiveGen;
                  DCOMP._IOwnership _3844_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3845_recIdents;
                  RAST._IExpr _out592;
                  DCOMP._IOwnership _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out592, out _out593, out _out594);
                  _3843_recursiveGen = _out592;
                  _3844_recOwned = _out593;
                  _3845_recIdents = _out594;
                  Std.Wrappers._IOption<RAST._IType> _3846_potentialRhsType;
                  _3846_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3842_b, _3841_range);
                  Std.Wrappers._IOption<RAST._IType> _source141 = _3846_potentialRhsType;
                  if (_source141.is_None) {
                    if (_3840_erase) {
                      r = _3843_recursiveGen;
                    } else {
                      RAST._IType _3847_rhsType;
                      RAST._IType _out595;
                      _out595 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _3847_rhsType = _out595;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3847_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3843_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out596;
                    DCOMP._IOwnership _out597;
                    DCOMP.COMP.FromOwnership(r, _3844_recOwned, expectedOwnership, out _out596, out _out597);
                    r = _out596;
                    resultingOwnership = _out597;
                  } else {
                    RAST._IType _3848___mcc_h1249 = _source141.dtor_value;
                    RAST._IType _3849_v = _3848___mcc_h1249;
                    r = RAST.Expr.create_ConversionNum(_3849_v, _3843_recursiveGen);
                    RAST._IExpr _out598;
                    DCOMP._IOwnership _out599;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out598, out _out599);
                    r = _out598;
                    resultingOwnership = _out599;
                  }
                  readIdents = _3845_recIdents;
                } else {
                  RAST._IExpr _out600;
                  DCOMP._IOwnership _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3842_b), _3842_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out600, out _out601, out _out602);
                  r = _out600;
                  resultingOwnership = _out601;
                  readIdents = _out602;
                }
              }
            }
          } else if (_source139.is_Nullable) {
            DAST._IType _3850___mcc_h342 = _source139.dtor_Nullable_a0;
            {
              RAST._IExpr _3851_recursiveGen;
              DCOMP._IOwnership _3852_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3853_recIdents;
              RAST._IExpr _out603;
              DCOMP._IOwnership _out604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out603, out _out604, out _out605);
              _3851_recursiveGen = _out603;
              _3852_recOwned = _out604;
              _3853_recIdents = _out605;
              r = _3851_recursiveGen;
              if (object.Equals(_3852_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out606;
              DCOMP._IOwnership _out607;
              DCOMP.COMP.FromOwnership(r, _3852_recOwned, expectedOwnership, out _out606, out _out607);
              r = _out606;
              resultingOwnership = _out607;
              readIdents = _3853_recIdents;
            }
          } else if (_source139.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3854___mcc_h344 = _source139.dtor_Tuple_a0;
            {
              RAST._IExpr _3855_recursiveGen;
              DCOMP._IOwnership _3856_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3857_recIdents;
              RAST._IExpr _out608;
              DCOMP._IOwnership _out609;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out608, out _out609, out _out610);
              _3855_recursiveGen = _out608;
              _3856_recOwned = _out609;
              _3857_recIdents = _out610;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3855_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out611;
              DCOMP._IOwnership _out612;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out611, out _out612);
              r = _out611;
              resultingOwnership = _out612;
              readIdents = _3857_recIdents;
            }
          } else if (_source139.is_Array) {
            DAST._IType _3858___mcc_h346 = _source139.dtor_element;
            BigInteger _3859___mcc_h347 = _source139.dtor_dims;
            {
              RAST._IExpr _3860_recursiveGen;
              DCOMP._IOwnership _3861_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3862_recIdents;
              RAST._IExpr _out613;
              DCOMP._IOwnership _out614;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out613, out _out614, out _out615);
              _3860_recursiveGen = _out613;
              _3861_recOwned = _out614;
              _3862_recIdents = _out615;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3860_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out616;
              DCOMP._IOwnership _out617;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out616, out _out617);
              r = _out616;
              resultingOwnership = _out617;
              readIdents = _3862_recIdents;
            }
          } else if (_source139.is_Seq) {
            DAST._IType _3863___mcc_h350 = _source139.dtor_element;
            {
              RAST._IExpr _3864_recursiveGen;
              DCOMP._IOwnership _3865_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3866_recIdents;
              RAST._IExpr _out618;
              DCOMP._IOwnership _out619;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out618, out _out619, out _out620);
              _3864_recursiveGen = _out618;
              _3865_recOwned = _out619;
              _3866_recIdents = _out620;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3864_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out621;
              DCOMP._IOwnership _out622;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out621, out _out622);
              r = _out621;
              resultingOwnership = _out622;
              readIdents = _3866_recIdents;
            }
          } else if (_source139.is_Set) {
            DAST._IType _3867___mcc_h352 = _source139.dtor_element;
            {
              RAST._IExpr _3868_recursiveGen;
              DCOMP._IOwnership _3869_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3870_recIdents;
              RAST._IExpr _out623;
              DCOMP._IOwnership _out624;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out625;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out623, out _out624, out _out625);
              _3868_recursiveGen = _out623;
              _3869_recOwned = _out624;
              _3870_recIdents = _out625;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3868_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out626;
              DCOMP._IOwnership _out627;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out626, out _out627);
              r = _out626;
              resultingOwnership = _out627;
              readIdents = _3870_recIdents;
            }
          } else if (_source139.is_Multiset) {
            DAST._IType _3871___mcc_h354 = _source139.dtor_element;
            {
              RAST._IExpr _3872_recursiveGen;
              DCOMP._IOwnership _3873_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3874_recIdents;
              RAST._IExpr _out628;
              DCOMP._IOwnership _out629;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out628, out _out629, out _out630);
              _3872_recursiveGen = _out628;
              _3873_recOwned = _out629;
              _3874_recIdents = _out630;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3872_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out631;
              DCOMP._IOwnership _out632;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out631, out _out632);
              r = _out631;
              resultingOwnership = _out632;
              readIdents = _3874_recIdents;
            }
          } else if (_source139.is_Map) {
            DAST._IType _3875___mcc_h356 = _source139.dtor_key;
            DAST._IType _3876___mcc_h357 = _source139.dtor_value;
            {
              RAST._IExpr _3877_recursiveGen;
              DCOMP._IOwnership _3878_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3879_recIdents;
              RAST._IExpr _out633;
              DCOMP._IOwnership _out634;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out633, out _out634, out _out635);
              _3877_recursiveGen = _out633;
              _3878_recOwned = _out634;
              _3879_recIdents = _out635;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3877_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out636;
              DCOMP._IOwnership _out637;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out636, out _out637);
              r = _out636;
              resultingOwnership = _out637;
              readIdents = _3879_recIdents;
            }
          } else if (_source139.is_SetBuilder) {
            DAST._IType _3880___mcc_h360 = _source139.dtor_element;
            {
              RAST._IExpr _3881_recursiveGen;
              DCOMP._IOwnership _3882_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3883_recIdents;
              RAST._IExpr _out638;
              DCOMP._IOwnership _out639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out638, out _out639, out _out640);
              _3881_recursiveGen = _out638;
              _3882_recOwned = _out639;
              _3883_recIdents = _out640;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3881_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out641;
              DCOMP._IOwnership _out642;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out641, out _out642);
              r = _out641;
              resultingOwnership = _out642;
              readIdents = _3883_recIdents;
            }
          } else if (_source139.is_MapBuilder) {
            DAST._IType _3884___mcc_h362 = _source139.dtor_key;
            DAST._IType _3885___mcc_h363 = _source139.dtor_value;
            {
              RAST._IExpr _3886_recursiveGen;
              DCOMP._IOwnership _3887_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3888_recIdents;
              RAST._IExpr _out643;
              DCOMP._IOwnership _out644;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out645;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out643, out _out644, out _out645);
              _3886_recursiveGen = _out643;
              _3887_recOwned = _out644;
              _3888_recIdents = _out645;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3886_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out646;
              DCOMP._IOwnership _out647;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out646, out _out647);
              r = _out646;
              resultingOwnership = _out647;
              readIdents = _3888_recIdents;
            }
          } else if (_source139.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3889___mcc_h366 = _source139.dtor_args;
            DAST._IType _3890___mcc_h367 = _source139.dtor_result;
            {
              RAST._IExpr _3891_recursiveGen;
              DCOMP._IOwnership _3892_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3893_recIdents;
              RAST._IExpr _out648;
              DCOMP._IOwnership _out649;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out648, out _out649, out _out650);
              _3891_recursiveGen = _out648;
              _3892_recOwned = _out649;
              _3893_recIdents = _out650;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3891_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out651;
              DCOMP._IOwnership _out652;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out651, out _out652);
              r = _out651;
              resultingOwnership = _out652;
              readIdents = _3893_recIdents;
            }
          } else if (_source139.is_Primitive) {
            DAST._IPrimitive _3894___mcc_h370 = _source139.dtor_Primitive_a0;
            {
              RAST._IExpr _3895_recursiveGen;
              DCOMP._IOwnership _3896_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3897_recIdents;
              RAST._IExpr _out653;
              DCOMP._IOwnership _out654;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out653, out _out654, out _out655);
              _3895_recursiveGen = _out653;
              _3896_recOwned = _out654;
              _3897_recIdents = _out655;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3895_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out656;
              DCOMP._IOwnership _out657;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out656, out _out657);
              r = _out656;
              resultingOwnership = _out657;
              readIdents = _3897_recIdents;
            }
          } else if (_source139.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3898___mcc_h372 = _source139.dtor_Passthrough_a0;
            {
              RAST._IExpr _3899_recursiveGen;
              DCOMP._IOwnership _3900_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3901_recIdents;
              RAST._IExpr _out658;
              DCOMP._IOwnership _out659;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out658, out _out659, out _out660);
              _3899_recursiveGen = _out658;
              _3900_recOwned = _out659;
              _3901_recIdents = _out660;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3899_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out661;
              DCOMP._IOwnership _out662;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out661, out _out662);
              r = _out661;
              resultingOwnership = _out662;
              readIdents = _3901_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3902___mcc_h374 = _source139.dtor_TypeArg_a0;
            {
              RAST._IExpr _3903_recursiveGen;
              DCOMP._IOwnership _3904_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3905_recIdents;
              RAST._IExpr _out663;
              DCOMP._IOwnership _out664;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out665;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out663, out _out664, out _out665);
              _3903_recursiveGen = _out663;
              _3904_recOwned = _out664;
              _3905_recIdents = _out665;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3903_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out666;
              DCOMP._IOwnership _out667;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out666, out _out667);
              r = _out666;
              resultingOwnership = _out667;
              readIdents = _3905_recIdents;
            }
          }
        } else if (_source126.is_Array) {
          DAST._IType _3906___mcc_h376 = _source126.dtor_element;
          BigInteger _3907___mcc_h377 = _source126.dtor_dims;
          DAST._IType _source142 = _3430___mcc_h1;
          if (_source142.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3908___mcc_h384 = _source142.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3909___mcc_h385 = _source142.dtor_typeArgs;
            DAST._IResolvedType _3910___mcc_h386 = _source142.dtor_resolved;
            DAST._IResolvedType _source143 = _3910___mcc_h386;
            if (_source143.is_Datatype) {
              DAST._IDatatypeType _3911___mcc_h390 = _source143.dtor_datatypeType;
              {
                RAST._IExpr _3912_recursiveGen;
                DCOMP._IOwnership _3913_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3914_recIdents;
                RAST._IExpr _out668;
                DCOMP._IOwnership _out669;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out670;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out668, out _out669, out _out670);
                _3912_recursiveGen = _out668;
                _3913_recOwned = _out669;
                _3914_recIdents = _out670;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3912_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out671;
                DCOMP._IOwnership _out672;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out671, out _out672);
                r = _out671;
                resultingOwnership = _out672;
                readIdents = _3914_recIdents;
              }
            } else if (_source143.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3915___mcc_h392 = _source143.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3916___mcc_h393 = _source143.dtor_attributes;
              {
                RAST._IExpr _3917_recursiveGen;
                DCOMP._IOwnership _3918_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3919_recIdents;
                RAST._IExpr _out673;
                DCOMP._IOwnership _out674;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out673, out _out674, out _out675);
                _3917_recursiveGen = _out673;
                _3918_recOwned = _out674;
                _3919_recIdents = _out675;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3917_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out676;
                DCOMP._IOwnership _out677;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out676, out _out677);
                r = _out676;
                resultingOwnership = _out677;
                readIdents = _3919_recIdents;
              }
            } else {
              DAST._IType _3920___mcc_h396 = _source143.dtor_baseType;
              DAST._INewtypeRange _3921___mcc_h397 = _source143.dtor_range;
              bool _3922___mcc_h398 = _source143.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3923___mcc_h399 = _source143.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3924_attributes = _3923___mcc_h399;
              bool _3925_erase = _3922___mcc_h398;
              DAST._INewtypeRange _3926_range = _3921___mcc_h397;
              DAST._IType _3927_b = _3920___mcc_h396;
              {
                if (object.Equals(_3424_fromTpe, _3927_b)) {
                  RAST._IExpr _3928_recursiveGen;
                  DCOMP._IOwnership _3929_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3930_recIdents;
                  RAST._IExpr _out678;
                  DCOMP._IOwnership _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out678, out _out679, out _out680);
                  _3928_recursiveGen = _out678;
                  _3929_recOwned = _out679;
                  _3930_recIdents = _out680;
                  Std.Wrappers._IOption<RAST._IType> _3931_potentialRhsType;
                  _3931_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3927_b, _3926_range);
                  Std.Wrappers._IOption<RAST._IType> _source144 = _3931_potentialRhsType;
                  if (_source144.is_None) {
                    if (_3925_erase) {
                      r = _3928_recursiveGen;
                    } else {
                      RAST._IType _3932_rhsType;
                      RAST._IType _out681;
                      _out681 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _3932_rhsType = _out681;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3932_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3928_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out682;
                    DCOMP._IOwnership _out683;
                    DCOMP.COMP.FromOwnership(r, _3929_recOwned, expectedOwnership, out _out682, out _out683);
                    r = _out682;
                    resultingOwnership = _out683;
                  } else {
                    RAST._IType _3933___mcc_h1250 = _source144.dtor_value;
                    RAST._IType _3934_v = _3933___mcc_h1250;
                    r = RAST.Expr.create_ConversionNum(_3934_v, _3928_recursiveGen);
                    RAST._IExpr _out684;
                    DCOMP._IOwnership _out685;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out684, out _out685);
                    r = _out684;
                    resultingOwnership = _out685;
                  }
                  readIdents = _3930_recIdents;
                } else {
                  RAST._IExpr _out686;
                  DCOMP._IOwnership _out687;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _3927_b), _3927_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out686, out _out687, out _out688);
                  r = _out686;
                  resultingOwnership = _out687;
                  readIdents = _out688;
                }
              }
            }
          } else if (_source142.is_Nullable) {
            DAST._IType _3935___mcc_h404 = _source142.dtor_Nullable_a0;
            {
              RAST._IExpr _3936_recursiveGen;
              DCOMP._IOwnership _3937_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3938_recIdents;
              RAST._IExpr _out689;
              DCOMP._IOwnership _out690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out689, out _out690, out _out691);
              _3936_recursiveGen = _out689;
              _3937_recOwned = _out690;
              _3938_recIdents = _out691;
              r = _3936_recursiveGen;
              if (object.Equals(_3937_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out692;
              DCOMP._IOwnership _out693;
              DCOMP.COMP.FromOwnership(r, _3937_recOwned, expectedOwnership, out _out692, out _out693);
              r = _out692;
              resultingOwnership = _out693;
              readIdents = _3938_recIdents;
            }
          } else if (_source142.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3939___mcc_h406 = _source142.dtor_Tuple_a0;
            {
              RAST._IExpr _3940_recursiveGen;
              DCOMP._IOwnership _3941_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3942_recIdents;
              RAST._IExpr _out694;
              DCOMP._IOwnership _out695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out694, out _out695, out _out696);
              _3940_recursiveGen = _out694;
              _3941_recOwned = _out695;
              _3942_recIdents = _out696;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3940_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out697;
              DCOMP._IOwnership _out698;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out697, out _out698);
              r = _out697;
              resultingOwnership = _out698;
              readIdents = _3942_recIdents;
            }
          } else if (_source142.is_Array) {
            DAST._IType _3943___mcc_h408 = _source142.dtor_element;
            BigInteger _3944___mcc_h409 = _source142.dtor_dims;
            {
              RAST._IExpr _3945_recursiveGen;
              DCOMP._IOwnership _3946_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3947_recIdents;
              RAST._IExpr _out699;
              DCOMP._IOwnership _out700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out699, out _out700, out _out701);
              _3945_recursiveGen = _out699;
              _3946_recOwned = _out700;
              _3947_recIdents = _out701;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3945_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out702;
              DCOMP._IOwnership _out703;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out702, out _out703);
              r = _out702;
              resultingOwnership = _out703;
              readIdents = _3947_recIdents;
            }
          } else if (_source142.is_Seq) {
            DAST._IType _3948___mcc_h412 = _source142.dtor_element;
            {
              RAST._IExpr _3949_recursiveGen;
              DCOMP._IOwnership _3950_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3951_recIdents;
              RAST._IExpr _out704;
              DCOMP._IOwnership _out705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out704, out _out705, out _out706);
              _3949_recursiveGen = _out704;
              _3950_recOwned = _out705;
              _3951_recIdents = _out706;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3949_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out707;
              DCOMP._IOwnership _out708;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out707, out _out708);
              r = _out707;
              resultingOwnership = _out708;
              readIdents = _3951_recIdents;
            }
          } else if (_source142.is_Set) {
            DAST._IType _3952___mcc_h414 = _source142.dtor_element;
            {
              RAST._IExpr _3953_recursiveGen;
              DCOMP._IOwnership _3954_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3955_recIdents;
              RAST._IExpr _out709;
              DCOMP._IOwnership _out710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out709, out _out710, out _out711);
              _3953_recursiveGen = _out709;
              _3954_recOwned = _out710;
              _3955_recIdents = _out711;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3953_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out712;
              DCOMP._IOwnership _out713;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out712, out _out713);
              r = _out712;
              resultingOwnership = _out713;
              readIdents = _3955_recIdents;
            }
          } else if (_source142.is_Multiset) {
            DAST._IType _3956___mcc_h416 = _source142.dtor_element;
            {
              RAST._IExpr _3957_recursiveGen;
              DCOMP._IOwnership _3958_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3959_recIdents;
              RAST._IExpr _out714;
              DCOMP._IOwnership _out715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out714, out _out715, out _out716);
              _3957_recursiveGen = _out714;
              _3958_recOwned = _out715;
              _3959_recIdents = _out716;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3957_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out717;
              DCOMP._IOwnership _out718;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out717, out _out718);
              r = _out717;
              resultingOwnership = _out718;
              readIdents = _3959_recIdents;
            }
          } else if (_source142.is_Map) {
            DAST._IType _3960___mcc_h418 = _source142.dtor_key;
            DAST._IType _3961___mcc_h419 = _source142.dtor_value;
            {
              RAST._IExpr _3962_recursiveGen;
              DCOMP._IOwnership _3963_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3964_recIdents;
              RAST._IExpr _out719;
              DCOMP._IOwnership _out720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out719, out _out720, out _out721);
              _3962_recursiveGen = _out719;
              _3963_recOwned = _out720;
              _3964_recIdents = _out721;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3962_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out722;
              DCOMP._IOwnership _out723;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out722, out _out723);
              r = _out722;
              resultingOwnership = _out723;
              readIdents = _3964_recIdents;
            }
          } else if (_source142.is_SetBuilder) {
            DAST._IType _3965___mcc_h422 = _source142.dtor_element;
            {
              RAST._IExpr _3966_recursiveGen;
              DCOMP._IOwnership _3967_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3968_recIdents;
              RAST._IExpr _out724;
              DCOMP._IOwnership _out725;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out726;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out724, out _out725, out _out726);
              _3966_recursiveGen = _out724;
              _3967_recOwned = _out725;
              _3968_recIdents = _out726;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3966_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out727;
              DCOMP._IOwnership _out728;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out727, out _out728);
              r = _out727;
              resultingOwnership = _out728;
              readIdents = _3968_recIdents;
            }
          } else if (_source142.is_MapBuilder) {
            DAST._IType _3969___mcc_h424 = _source142.dtor_key;
            DAST._IType _3970___mcc_h425 = _source142.dtor_value;
            {
              RAST._IExpr _3971_recursiveGen;
              DCOMP._IOwnership _3972_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3973_recIdents;
              RAST._IExpr _out729;
              DCOMP._IOwnership _out730;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out729, out _out730, out _out731);
              _3971_recursiveGen = _out729;
              _3972_recOwned = _out730;
              _3973_recIdents = _out731;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3971_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out732;
              DCOMP._IOwnership _out733;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out732, out _out733);
              r = _out732;
              resultingOwnership = _out733;
              readIdents = _3973_recIdents;
            }
          } else if (_source142.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3974___mcc_h428 = _source142.dtor_args;
            DAST._IType _3975___mcc_h429 = _source142.dtor_result;
            {
              RAST._IExpr _3976_recursiveGen;
              DCOMP._IOwnership _3977_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3978_recIdents;
              RAST._IExpr _out734;
              DCOMP._IOwnership _out735;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out734, out _out735, out _out736);
              _3976_recursiveGen = _out734;
              _3977_recOwned = _out735;
              _3978_recIdents = _out736;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3976_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out737;
              DCOMP._IOwnership _out738;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out737, out _out738);
              r = _out737;
              resultingOwnership = _out738;
              readIdents = _3978_recIdents;
            }
          } else if (_source142.is_Primitive) {
            DAST._IPrimitive _3979___mcc_h432 = _source142.dtor_Primitive_a0;
            {
              RAST._IExpr _3980_recursiveGen;
              DCOMP._IOwnership _3981_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3982_recIdents;
              RAST._IExpr _out739;
              DCOMP._IOwnership _out740;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out739, out _out740, out _out741);
              _3980_recursiveGen = _out739;
              _3981_recOwned = _out740;
              _3982_recIdents = _out741;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3980_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out742;
              DCOMP._IOwnership _out743;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out742, out _out743);
              r = _out742;
              resultingOwnership = _out743;
              readIdents = _3982_recIdents;
            }
          } else if (_source142.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3983___mcc_h434 = _source142.dtor_Passthrough_a0;
            {
              RAST._IExpr _3984_recursiveGen;
              DCOMP._IOwnership _3985_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3986_recIdents;
              RAST._IExpr _out744;
              DCOMP._IOwnership _out745;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out744, out _out745, out _out746);
              _3984_recursiveGen = _out744;
              _3985_recOwned = _out745;
              _3986_recIdents = _out746;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3984_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out747;
              DCOMP._IOwnership _out748;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out747, out _out748);
              r = _out747;
              resultingOwnership = _out748;
              readIdents = _3986_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3987___mcc_h436 = _source142.dtor_TypeArg_a0;
            {
              RAST._IExpr _3988_recursiveGen;
              DCOMP._IOwnership _3989_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3990_recIdents;
              RAST._IExpr _out749;
              DCOMP._IOwnership _out750;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out751;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out749, out _out750, out _out751);
              _3988_recursiveGen = _out749;
              _3989_recOwned = _out750;
              _3990_recIdents = _out751;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3988_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out752;
              DCOMP._IOwnership _out753;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out752, out _out753);
              r = _out752;
              resultingOwnership = _out753;
              readIdents = _3990_recIdents;
            }
          }
        } else if (_source126.is_Seq) {
          DAST._IType _3991___mcc_h438 = _source126.dtor_element;
          DAST._IType _source145 = _3430___mcc_h1;
          if (_source145.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3992___mcc_h442 = _source145.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3993___mcc_h443 = _source145.dtor_typeArgs;
            DAST._IResolvedType _3994___mcc_h444 = _source145.dtor_resolved;
            DAST._IResolvedType _source146 = _3994___mcc_h444;
            if (_source146.is_Datatype) {
              DAST._IDatatypeType _3995___mcc_h448 = _source146.dtor_datatypeType;
              {
                RAST._IExpr _3996_recursiveGen;
                DCOMP._IOwnership _3997_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3998_recIdents;
                RAST._IExpr _out754;
                DCOMP._IOwnership _out755;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out756;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out754, out _out755, out _out756);
                _3996_recursiveGen = _out754;
                _3997_recOwned = _out755;
                _3998_recIdents = _out756;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3996_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out757;
                DCOMP._IOwnership _out758;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out757, out _out758);
                r = _out757;
                resultingOwnership = _out758;
                readIdents = _3998_recIdents;
              }
            } else if (_source146.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3999___mcc_h450 = _source146.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4000___mcc_h451 = _source146.dtor_attributes;
              {
                RAST._IExpr _4001_recursiveGen;
                DCOMP._IOwnership _4002_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4003_recIdents;
                RAST._IExpr _out759;
                DCOMP._IOwnership _out760;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out759, out _out760, out _out761);
                _4001_recursiveGen = _out759;
                _4002_recOwned = _out760;
                _4003_recIdents = _out761;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4001_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out762;
                DCOMP._IOwnership _out763;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out762, out _out763);
                r = _out762;
                resultingOwnership = _out763;
                readIdents = _4003_recIdents;
              }
            } else {
              DAST._IType _4004___mcc_h454 = _source146.dtor_baseType;
              DAST._INewtypeRange _4005___mcc_h455 = _source146.dtor_range;
              bool _4006___mcc_h456 = _source146.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4007___mcc_h457 = _source146.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4008_attributes = _4007___mcc_h457;
              bool _4009_erase = _4006___mcc_h456;
              DAST._INewtypeRange _4010_range = _4005___mcc_h455;
              DAST._IType _4011_b = _4004___mcc_h454;
              {
                if (object.Equals(_3424_fromTpe, _4011_b)) {
                  RAST._IExpr _4012_recursiveGen;
                  DCOMP._IOwnership _4013_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4014_recIdents;
                  RAST._IExpr _out764;
                  DCOMP._IOwnership _out765;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out764, out _out765, out _out766);
                  _4012_recursiveGen = _out764;
                  _4013_recOwned = _out765;
                  _4014_recIdents = _out766;
                  Std.Wrappers._IOption<RAST._IType> _4015_potentialRhsType;
                  _4015_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4011_b, _4010_range);
                  Std.Wrappers._IOption<RAST._IType> _source147 = _4015_potentialRhsType;
                  if (_source147.is_None) {
                    if (_4009_erase) {
                      r = _4012_recursiveGen;
                    } else {
                      RAST._IType _4016_rhsType;
                      RAST._IType _out767;
                      _out767 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _4016_rhsType = _out767;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4016_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4012_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out768;
                    DCOMP._IOwnership _out769;
                    DCOMP.COMP.FromOwnership(r, _4013_recOwned, expectedOwnership, out _out768, out _out769);
                    r = _out768;
                    resultingOwnership = _out769;
                  } else {
                    RAST._IType _4017___mcc_h1251 = _source147.dtor_value;
                    RAST._IType _4018_v = _4017___mcc_h1251;
                    r = RAST.Expr.create_ConversionNum(_4018_v, _4012_recursiveGen);
                    RAST._IExpr _out770;
                    DCOMP._IOwnership _out771;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out770, out _out771);
                    r = _out770;
                    resultingOwnership = _out771;
                  }
                  readIdents = _4014_recIdents;
                } else {
                  RAST._IExpr _out772;
                  DCOMP._IOwnership _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4011_b), _4011_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out772, out _out773, out _out774);
                  r = _out772;
                  resultingOwnership = _out773;
                  readIdents = _out774;
                }
              }
            }
          } else if (_source145.is_Nullable) {
            DAST._IType _4019___mcc_h462 = _source145.dtor_Nullable_a0;
            {
              RAST._IExpr _4020_recursiveGen;
              DCOMP._IOwnership _4021_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4022_recIdents;
              RAST._IExpr _out775;
              DCOMP._IOwnership _out776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out775, out _out776, out _out777);
              _4020_recursiveGen = _out775;
              _4021_recOwned = _out776;
              _4022_recIdents = _out777;
              r = _4020_recursiveGen;
              if (object.Equals(_4021_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out778;
              DCOMP._IOwnership _out779;
              DCOMP.COMP.FromOwnership(r, _4021_recOwned, expectedOwnership, out _out778, out _out779);
              r = _out778;
              resultingOwnership = _out779;
              readIdents = _4022_recIdents;
            }
          } else if (_source145.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4023___mcc_h464 = _source145.dtor_Tuple_a0;
            {
              RAST._IExpr _4024_recursiveGen;
              DCOMP._IOwnership _4025_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4026_recIdents;
              RAST._IExpr _out780;
              DCOMP._IOwnership _out781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out780, out _out781, out _out782);
              _4024_recursiveGen = _out780;
              _4025_recOwned = _out781;
              _4026_recIdents = _out782;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4024_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out783;
              DCOMP._IOwnership _out784;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out783, out _out784);
              r = _out783;
              resultingOwnership = _out784;
              readIdents = _4026_recIdents;
            }
          } else if (_source145.is_Array) {
            DAST._IType _4027___mcc_h466 = _source145.dtor_element;
            BigInteger _4028___mcc_h467 = _source145.dtor_dims;
            {
              RAST._IExpr _4029_recursiveGen;
              DCOMP._IOwnership _4030_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4031_recIdents;
              RAST._IExpr _out785;
              DCOMP._IOwnership _out786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out785, out _out786, out _out787);
              _4029_recursiveGen = _out785;
              _4030_recOwned = _out786;
              _4031_recIdents = _out787;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4029_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out788;
              DCOMP._IOwnership _out789;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out788, out _out789);
              r = _out788;
              resultingOwnership = _out789;
              readIdents = _4031_recIdents;
            }
          } else if (_source145.is_Seq) {
            DAST._IType _4032___mcc_h470 = _source145.dtor_element;
            {
              RAST._IExpr _4033_recursiveGen;
              DCOMP._IOwnership _4034_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4035_recIdents;
              RAST._IExpr _out790;
              DCOMP._IOwnership _out791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out792;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out790, out _out791, out _out792);
              _4033_recursiveGen = _out790;
              _4034_recOwned = _out791;
              _4035_recIdents = _out792;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4033_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out793;
              DCOMP._IOwnership _out794;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out793, out _out794);
              r = _out793;
              resultingOwnership = _out794;
              readIdents = _4035_recIdents;
            }
          } else if (_source145.is_Set) {
            DAST._IType _4036___mcc_h472 = _source145.dtor_element;
            {
              RAST._IExpr _4037_recursiveGen;
              DCOMP._IOwnership _4038_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4039_recIdents;
              RAST._IExpr _out795;
              DCOMP._IOwnership _out796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out795, out _out796, out _out797);
              _4037_recursiveGen = _out795;
              _4038_recOwned = _out796;
              _4039_recIdents = _out797;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4037_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out798;
              DCOMP._IOwnership _out799;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out798, out _out799);
              r = _out798;
              resultingOwnership = _out799;
              readIdents = _4039_recIdents;
            }
          } else if (_source145.is_Multiset) {
            DAST._IType _4040___mcc_h474 = _source145.dtor_element;
            {
              RAST._IExpr _4041_recursiveGen;
              DCOMP._IOwnership _4042_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4043_recIdents;
              RAST._IExpr _out800;
              DCOMP._IOwnership _out801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out800, out _out801, out _out802);
              _4041_recursiveGen = _out800;
              _4042_recOwned = _out801;
              _4043_recIdents = _out802;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4041_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out803;
              DCOMP._IOwnership _out804;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out803, out _out804);
              r = _out803;
              resultingOwnership = _out804;
              readIdents = _4043_recIdents;
            }
          } else if (_source145.is_Map) {
            DAST._IType _4044___mcc_h476 = _source145.dtor_key;
            DAST._IType _4045___mcc_h477 = _source145.dtor_value;
            {
              RAST._IExpr _4046_recursiveGen;
              DCOMP._IOwnership _4047_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4048_recIdents;
              RAST._IExpr _out805;
              DCOMP._IOwnership _out806;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out807;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out805, out _out806, out _out807);
              _4046_recursiveGen = _out805;
              _4047_recOwned = _out806;
              _4048_recIdents = _out807;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4046_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out808;
              DCOMP._IOwnership _out809;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out808, out _out809);
              r = _out808;
              resultingOwnership = _out809;
              readIdents = _4048_recIdents;
            }
          } else if (_source145.is_SetBuilder) {
            DAST._IType _4049___mcc_h480 = _source145.dtor_element;
            {
              RAST._IExpr _4050_recursiveGen;
              DCOMP._IOwnership _4051_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4052_recIdents;
              RAST._IExpr _out810;
              DCOMP._IOwnership _out811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out810, out _out811, out _out812);
              _4050_recursiveGen = _out810;
              _4051_recOwned = _out811;
              _4052_recIdents = _out812;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4050_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out813;
              DCOMP._IOwnership _out814;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out813, out _out814);
              r = _out813;
              resultingOwnership = _out814;
              readIdents = _4052_recIdents;
            }
          } else if (_source145.is_MapBuilder) {
            DAST._IType _4053___mcc_h482 = _source145.dtor_key;
            DAST._IType _4054___mcc_h483 = _source145.dtor_value;
            {
              RAST._IExpr _4055_recursiveGen;
              DCOMP._IOwnership _4056_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4057_recIdents;
              RAST._IExpr _out815;
              DCOMP._IOwnership _out816;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out815, out _out816, out _out817);
              _4055_recursiveGen = _out815;
              _4056_recOwned = _out816;
              _4057_recIdents = _out817;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4055_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out818;
              DCOMP._IOwnership _out819;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out818, out _out819);
              r = _out818;
              resultingOwnership = _out819;
              readIdents = _4057_recIdents;
            }
          } else if (_source145.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4058___mcc_h486 = _source145.dtor_args;
            DAST._IType _4059___mcc_h487 = _source145.dtor_result;
            {
              RAST._IExpr _4060_recursiveGen;
              DCOMP._IOwnership _4061_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4062_recIdents;
              RAST._IExpr _out820;
              DCOMP._IOwnership _out821;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out820, out _out821, out _out822);
              _4060_recursiveGen = _out820;
              _4061_recOwned = _out821;
              _4062_recIdents = _out822;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4060_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out823;
              DCOMP._IOwnership _out824;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out823, out _out824);
              r = _out823;
              resultingOwnership = _out824;
              readIdents = _4062_recIdents;
            }
          } else if (_source145.is_Primitive) {
            DAST._IPrimitive _4063___mcc_h490 = _source145.dtor_Primitive_a0;
            {
              RAST._IExpr _4064_recursiveGen;
              DCOMP._IOwnership _4065_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4066_recIdents;
              RAST._IExpr _out825;
              DCOMP._IOwnership _out826;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out825, out _out826, out _out827);
              _4064_recursiveGen = _out825;
              _4065_recOwned = _out826;
              _4066_recIdents = _out827;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4064_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out828;
              DCOMP._IOwnership _out829;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out828, out _out829);
              r = _out828;
              resultingOwnership = _out829;
              readIdents = _4066_recIdents;
            }
          } else if (_source145.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4067___mcc_h492 = _source145.dtor_Passthrough_a0;
            {
              RAST._IExpr _4068_recursiveGen;
              DCOMP._IOwnership _4069_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4070_recIdents;
              RAST._IExpr _out830;
              DCOMP._IOwnership _out831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out832;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out830, out _out831, out _out832);
              _4068_recursiveGen = _out830;
              _4069_recOwned = _out831;
              _4070_recIdents = _out832;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4068_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out833;
              DCOMP._IOwnership _out834;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out833, out _out834);
              r = _out833;
              resultingOwnership = _out834;
              readIdents = _4070_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4071___mcc_h494 = _source145.dtor_TypeArg_a0;
            {
              RAST._IExpr _4072_recursiveGen;
              DCOMP._IOwnership _4073_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4074_recIdents;
              RAST._IExpr _out835;
              DCOMP._IOwnership _out836;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out837;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out835, out _out836, out _out837);
              _4072_recursiveGen = _out835;
              _4073_recOwned = _out836;
              _4074_recIdents = _out837;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4072_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out838;
              DCOMP._IOwnership _out839;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out838, out _out839);
              r = _out838;
              resultingOwnership = _out839;
              readIdents = _4074_recIdents;
            }
          }
        } else if (_source126.is_Set) {
          DAST._IType _4075___mcc_h496 = _source126.dtor_element;
          DAST._IType _source148 = _3430___mcc_h1;
          if (_source148.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4076___mcc_h500 = _source148.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4077___mcc_h501 = _source148.dtor_typeArgs;
            DAST._IResolvedType _4078___mcc_h502 = _source148.dtor_resolved;
            DAST._IResolvedType _source149 = _4078___mcc_h502;
            if (_source149.is_Datatype) {
              DAST._IDatatypeType _4079___mcc_h506 = _source149.dtor_datatypeType;
              {
                RAST._IExpr _4080_recursiveGen;
                DCOMP._IOwnership _4081_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4082_recIdents;
                RAST._IExpr _out840;
                DCOMP._IOwnership _out841;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out840, out _out841, out _out842);
                _4080_recursiveGen = _out840;
                _4081_recOwned = _out841;
                _4082_recIdents = _out842;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4080_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out843;
                DCOMP._IOwnership _out844;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out843, out _out844);
                r = _out843;
                resultingOwnership = _out844;
                readIdents = _4082_recIdents;
              }
            } else if (_source149.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4083___mcc_h508 = _source149.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4084___mcc_h509 = _source149.dtor_attributes;
              {
                RAST._IExpr _4085_recursiveGen;
                DCOMP._IOwnership _4086_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4087_recIdents;
                RAST._IExpr _out845;
                DCOMP._IOwnership _out846;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out845, out _out846, out _out847);
                _4085_recursiveGen = _out845;
                _4086_recOwned = _out846;
                _4087_recIdents = _out847;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4085_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out848;
                DCOMP._IOwnership _out849;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out848, out _out849);
                r = _out848;
                resultingOwnership = _out849;
                readIdents = _4087_recIdents;
              }
            } else {
              DAST._IType _4088___mcc_h512 = _source149.dtor_baseType;
              DAST._INewtypeRange _4089___mcc_h513 = _source149.dtor_range;
              bool _4090___mcc_h514 = _source149.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4091___mcc_h515 = _source149.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4092_attributes = _4091___mcc_h515;
              bool _4093_erase = _4090___mcc_h514;
              DAST._INewtypeRange _4094_range = _4089___mcc_h513;
              DAST._IType _4095_b = _4088___mcc_h512;
              {
                if (object.Equals(_3424_fromTpe, _4095_b)) {
                  RAST._IExpr _4096_recursiveGen;
                  DCOMP._IOwnership _4097_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4098_recIdents;
                  RAST._IExpr _out850;
                  DCOMP._IOwnership _out851;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out852;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out850, out _out851, out _out852);
                  _4096_recursiveGen = _out850;
                  _4097_recOwned = _out851;
                  _4098_recIdents = _out852;
                  Std.Wrappers._IOption<RAST._IType> _4099_potentialRhsType;
                  _4099_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4095_b, _4094_range);
                  Std.Wrappers._IOption<RAST._IType> _source150 = _4099_potentialRhsType;
                  if (_source150.is_None) {
                    if (_4093_erase) {
                      r = _4096_recursiveGen;
                    } else {
                      RAST._IType _4100_rhsType;
                      RAST._IType _out853;
                      _out853 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _4100_rhsType = _out853;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4100_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4096_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out854;
                    DCOMP._IOwnership _out855;
                    DCOMP.COMP.FromOwnership(r, _4097_recOwned, expectedOwnership, out _out854, out _out855);
                    r = _out854;
                    resultingOwnership = _out855;
                  } else {
                    RAST._IType _4101___mcc_h1252 = _source150.dtor_value;
                    RAST._IType _4102_v = _4101___mcc_h1252;
                    r = RAST.Expr.create_ConversionNum(_4102_v, _4096_recursiveGen);
                    RAST._IExpr _out856;
                    DCOMP._IOwnership _out857;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out856, out _out857);
                    r = _out856;
                    resultingOwnership = _out857;
                  }
                  readIdents = _4098_recIdents;
                } else {
                  RAST._IExpr _out858;
                  DCOMP._IOwnership _out859;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out860;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4095_b), _4095_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out858, out _out859, out _out860);
                  r = _out858;
                  resultingOwnership = _out859;
                  readIdents = _out860;
                }
              }
            }
          } else if (_source148.is_Nullable) {
            DAST._IType _4103___mcc_h520 = _source148.dtor_Nullable_a0;
            {
              RAST._IExpr _4104_recursiveGen;
              DCOMP._IOwnership _4105_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4106_recIdents;
              RAST._IExpr _out861;
              DCOMP._IOwnership _out862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out861, out _out862, out _out863);
              _4104_recursiveGen = _out861;
              _4105_recOwned = _out862;
              _4106_recIdents = _out863;
              r = _4104_recursiveGen;
              if (object.Equals(_4105_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out864;
              DCOMP._IOwnership _out865;
              DCOMP.COMP.FromOwnership(r, _4105_recOwned, expectedOwnership, out _out864, out _out865);
              r = _out864;
              resultingOwnership = _out865;
              readIdents = _4106_recIdents;
            }
          } else if (_source148.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4107___mcc_h522 = _source148.dtor_Tuple_a0;
            {
              RAST._IExpr _4108_recursiveGen;
              DCOMP._IOwnership _4109_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4110_recIdents;
              RAST._IExpr _out866;
              DCOMP._IOwnership _out867;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out866, out _out867, out _out868);
              _4108_recursiveGen = _out866;
              _4109_recOwned = _out867;
              _4110_recIdents = _out868;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4108_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out869;
              DCOMP._IOwnership _out870;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out869, out _out870);
              r = _out869;
              resultingOwnership = _out870;
              readIdents = _4110_recIdents;
            }
          } else if (_source148.is_Array) {
            DAST._IType _4111___mcc_h524 = _source148.dtor_element;
            BigInteger _4112___mcc_h525 = _source148.dtor_dims;
            {
              RAST._IExpr _4113_recursiveGen;
              DCOMP._IOwnership _4114_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4115_recIdents;
              RAST._IExpr _out871;
              DCOMP._IOwnership _out872;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out873;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out871, out _out872, out _out873);
              _4113_recursiveGen = _out871;
              _4114_recOwned = _out872;
              _4115_recIdents = _out873;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4113_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out874;
              DCOMP._IOwnership _out875;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out874, out _out875);
              r = _out874;
              resultingOwnership = _out875;
              readIdents = _4115_recIdents;
            }
          } else if (_source148.is_Seq) {
            DAST._IType _4116___mcc_h528 = _source148.dtor_element;
            {
              RAST._IExpr _4117_recursiveGen;
              DCOMP._IOwnership _4118_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4119_recIdents;
              RAST._IExpr _out876;
              DCOMP._IOwnership _out877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out876, out _out877, out _out878);
              _4117_recursiveGen = _out876;
              _4118_recOwned = _out877;
              _4119_recIdents = _out878;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4117_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out879;
              DCOMP._IOwnership _out880;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out879, out _out880);
              r = _out879;
              resultingOwnership = _out880;
              readIdents = _4119_recIdents;
            }
          } else if (_source148.is_Set) {
            DAST._IType _4120___mcc_h530 = _source148.dtor_element;
            {
              RAST._IExpr _4121_recursiveGen;
              DCOMP._IOwnership _4122_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4123_recIdents;
              RAST._IExpr _out881;
              DCOMP._IOwnership _out882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out881, out _out882, out _out883);
              _4121_recursiveGen = _out881;
              _4122_recOwned = _out882;
              _4123_recIdents = _out883;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4121_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out884;
              DCOMP._IOwnership _out885;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out884, out _out885);
              r = _out884;
              resultingOwnership = _out885;
              readIdents = _4123_recIdents;
            }
          } else if (_source148.is_Multiset) {
            DAST._IType _4124___mcc_h532 = _source148.dtor_element;
            {
              RAST._IExpr _4125_recursiveGen;
              DCOMP._IOwnership _4126_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4127_recIdents;
              RAST._IExpr _out886;
              DCOMP._IOwnership _out887;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out886, out _out887, out _out888);
              _4125_recursiveGen = _out886;
              _4126_recOwned = _out887;
              _4127_recIdents = _out888;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4125_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out889;
              DCOMP._IOwnership _out890;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out889, out _out890);
              r = _out889;
              resultingOwnership = _out890;
              readIdents = _4127_recIdents;
            }
          } else if (_source148.is_Map) {
            DAST._IType _4128___mcc_h534 = _source148.dtor_key;
            DAST._IType _4129___mcc_h535 = _source148.dtor_value;
            {
              RAST._IExpr _4130_recursiveGen;
              DCOMP._IOwnership _4131_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4132_recIdents;
              RAST._IExpr _out891;
              DCOMP._IOwnership _out892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out893;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out891, out _out892, out _out893);
              _4130_recursiveGen = _out891;
              _4131_recOwned = _out892;
              _4132_recIdents = _out893;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4130_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out894;
              DCOMP._IOwnership _out895;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out894, out _out895);
              r = _out894;
              resultingOwnership = _out895;
              readIdents = _4132_recIdents;
            }
          } else if (_source148.is_SetBuilder) {
            DAST._IType _4133___mcc_h538 = _source148.dtor_element;
            {
              RAST._IExpr _4134_recursiveGen;
              DCOMP._IOwnership _4135_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4136_recIdents;
              RAST._IExpr _out896;
              DCOMP._IOwnership _out897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out896, out _out897, out _out898);
              _4134_recursiveGen = _out896;
              _4135_recOwned = _out897;
              _4136_recIdents = _out898;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4134_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out899;
              DCOMP._IOwnership _out900;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out899, out _out900);
              r = _out899;
              resultingOwnership = _out900;
              readIdents = _4136_recIdents;
            }
          } else if (_source148.is_MapBuilder) {
            DAST._IType _4137___mcc_h540 = _source148.dtor_key;
            DAST._IType _4138___mcc_h541 = _source148.dtor_value;
            {
              RAST._IExpr _4139_recursiveGen;
              DCOMP._IOwnership _4140_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4141_recIdents;
              RAST._IExpr _out901;
              DCOMP._IOwnership _out902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out901, out _out902, out _out903);
              _4139_recursiveGen = _out901;
              _4140_recOwned = _out902;
              _4141_recIdents = _out903;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4139_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out904;
              DCOMP._IOwnership _out905;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out904, out _out905);
              r = _out904;
              resultingOwnership = _out905;
              readIdents = _4141_recIdents;
            }
          } else if (_source148.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4142___mcc_h544 = _source148.dtor_args;
            DAST._IType _4143___mcc_h545 = _source148.dtor_result;
            {
              RAST._IExpr _4144_recursiveGen;
              DCOMP._IOwnership _4145_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4146_recIdents;
              RAST._IExpr _out906;
              DCOMP._IOwnership _out907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out906, out _out907, out _out908);
              _4144_recursiveGen = _out906;
              _4145_recOwned = _out907;
              _4146_recIdents = _out908;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4144_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out909;
              DCOMP._IOwnership _out910;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out909, out _out910);
              r = _out909;
              resultingOwnership = _out910;
              readIdents = _4146_recIdents;
            }
          } else if (_source148.is_Primitive) {
            DAST._IPrimitive _4147___mcc_h548 = _source148.dtor_Primitive_a0;
            {
              RAST._IExpr _4148_recursiveGen;
              DCOMP._IOwnership _4149_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4150_recIdents;
              RAST._IExpr _out911;
              DCOMP._IOwnership _out912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out911, out _out912, out _out913);
              _4148_recursiveGen = _out911;
              _4149_recOwned = _out912;
              _4150_recIdents = _out913;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4148_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out914;
              DCOMP._IOwnership _out915;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out914, out _out915);
              r = _out914;
              resultingOwnership = _out915;
              readIdents = _4150_recIdents;
            }
          } else if (_source148.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4151___mcc_h550 = _source148.dtor_Passthrough_a0;
            {
              RAST._IExpr _4152_recursiveGen;
              DCOMP._IOwnership _4153_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4154_recIdents;
              RAST._IExpr _out916;
              DCOMP._IOwnership _out917;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out918;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out916, out _out917, out _out918);
              _4152_recursiveGen = _out916;
              _4153_recOwned = _out917;
              _4154_recIdents = _out918;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4152_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out919;
              DCOMP._IOwnership _out920;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out919, out _out920);
              r = _out919;
              resultingOwnership = _out920;
              readIdents = _4154_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4155___mcc_h552 = _source148.dtor_TypeArg_a0;
            {
              RAST._IExpr _4156_recursiveGen;
              DCOMP._IOwnership _4157_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4158_recIdents;
              RAST._IExpr _out921;
              DCOMP._IOwnership _out922;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out921, out _out922, out _out923);
              _4156_recursiveGen = _out921;
              _4157_recOwned = _out922;
              _4158_recIdents = _out923;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4156_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out924;
              DCOMP._IOwnership _out925;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out924, out _out925);
              r = _out924;
              resultingOwnership = _out925;
              readIdents = _4158_recIdents;
            }
          }
        } else if (_source126.is_Multiset) {
          DAST._IType _4159___mcc_h554 = _source126.dtor_element;
          DAST._IType _source151 = _3430___mcc_h1;
          if (_source151.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4160___mcc_h558 = _source151.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4161___mcc_h559 = _source151.dtor_typeArgs;
            DAST._IResolvedType _4162___mcc_h560 = _source151.dtor_resolved;
            DAST._IResolvedType _source152 = _4162___mcc_h560;
            if (_source152.is_Datatype) {
              DAST._IDatatypeType _4163___mcc_h564 = _source152.dtor_datatypeType;
              {
                RAST._IExpr _4164_recursiveGen;
                DCOMP._IOwnership _4165_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4166_recIdents;
                RAST._IExpr _out926;
                DCOMP._IOwnership _out927;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out926, out _out927, out _out928);
                _4164_recursiveGen = _out926;
                _4165_recOwned = _out927;
                _4166_recIdents = _out928;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4164_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out929;
                DCOMP._IOwnership _out930;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out929, out _out930);
                r = _out929;
                resultingOwnership = _out930;
                readIdents = _4166_recIdents;
              }
            } else if (_source152.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4167___mcc_h566 = _source152.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4168___mcc_h567 = _source152.dtor_attributes;
              {
                RAST._IExpr _4169_recursiveGen;
                DCOMP._IOwnership _4170_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4171_recIdents;
                RAST._IExpr _out931;
                DCOMP._IOwnership _out932;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out933;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out931, out _out932, out _out933);
                _4169_recursiveGen = _out931;
                _4170_recOwned = _out932;
                _4171_recIdents = _out933;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4169_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out934;
                DCOMP._IOwnership _out935;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out934, out _out935);
                r = _out934;
                resultingOwnership = _out935;
                readIdents = _4171_recIdents;
              }
            } else {
              DAST._IType _4172___mcc_h570 = _source152.dtor_baseType;
              DAST._INewtypeRange _4173___mcc_h571 = _source152.dtor_range;
              bool _4174___mcc_h572 = _source152.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4175___mcc_h573 = _source152.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4176_attributes = _4175___mcc_h573;
              bool _4177_erase = _4174___mcc_h572;
              DAST._INewtypeRange _4178_range = _4173___mcc_h571;
              DAST._IType _4179_b = _4172___mcc_h570;
              {
                if (object.Equals(_3424_fromTpe, _4179_b)) {
                  RAST._IExpr _4180_recursiveGen;
                  DCOMP._IOwnership _4181_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4182_recIdents;
                  RAST._IExpr _out936;
                  DCOMP._IOwnership _out937;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out938;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out936, out _out937, out _out938);
                  _4180_recursiveGen = _out936;
                  _4181_recOwned = _out937;
                  _4182_recIdents = _out938;
                  Std.Wrappers._IOption<RAST._IType> _4183_potentialRhsType;
                  _4183_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4179_b, _4178_range);
                  Std.Wrappers._IOption<RAST._IType> _source153 = _4183_potentialRhsType;
                  if (_source153.is_None) {
                    if (_4177_erase) {
                      r = _4180_recursiveGen;
                    } else {
                      RAST._IType _4184_rhsType;
                      RAST._IType _out939;
                      _out939 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _4184_rhsType = _out939;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4184_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4180_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out940;
                    DCOMP._IOwnership _out941;
                    DCOMP.COMP.FromOwnership(r, _4181_recOwned, expectedOwnership, out _out940, out _out941);
                    r = _out940;
                    resultingOwnership = _out941;
                  } else {
                    RAST._IType _4185___mcc_h1253 = _source153.dtor_value;
                    RAST._IType _4186_v = _4185___mcc_h1253;
                    r = RAST.Expr.create_ConversionNum(_4186_v, _4180_recursiveGen);
                    RAST._IExpr _out942;
                    DCOMP._IOwnership _out943;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out942, out _out943);
                    r = _out942;
                    resultingOwnership = _out943;
                  }
                  readIdents = _4182_recIdents;
                } else {
                  RAST._IExpr _out944;
                  DCOMP._IOwnership _out945;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4179_b), _4179_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out944, out _out945, out _out946);
                  r = _out944;
                  resultingOwnership = _out945;
                  readIdents = _out946;
                }
              }
            }
          } else if (_source151.is_Nullable) {
            DAST._IType _4187___mcc_h578 = _source151.dtor_Nullable_a0;
            {
              RAST._IExpr _4188_recursiveGen;
              DCOMP._IOwnership _4189_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4190_recIdents;
              RAST._IExpr _out947;
              DCOMP._IOwnership _out948;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out947, out _out948, out _out949);
              _4188_recursiveGen = _out947;
              _4189_recOwned = _out948;
              _4190_recIdents = _out949;
              r = _4188_recursiveGen;
              if (object.Equals(_4189_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out950;
              DCOMP._IOwnership _out951;
              DCOMP.COMP.FromOwnership(r, _4189_recOwned, expectedOwnership, out _out950, out _out951);
              r = _out950;
              resultingOwnership = _out951;
              readIdents = _4190_recIdents;
            }
          } else if (_source151.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4191___mcc_h580 = _source151.dtor_Tuple_a0;
            {
              RAST._IExpr _4192_recursiveGen;
              DCOMP._IOwnership _4193_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4194_recIdents;
              RAST._IExpr _out952;
              DCOMP._IOwnership _out953;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out954;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out952, out _out953, out _out954);
              _4192_recursiveGen = _out952;
              _4193_recOwned = _out953;
              _4194_recIdents = _out954;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4192_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out955;
              DCOMP._IOwnership _out956;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out955, out _out956);
              r = _out955;
              resultingOwnership = _out956;
              readIdents = _4194_recIdents;
            }
          } else if (_source151.is_Array) {
            DAST._IType _4195___mcc_h582 = _source151.dtor_element;
            BigInteger _4196___mcc_h583 = _source151.dtor_dims;
            {
              RAST._IExpr _4197_recursiveGen;
              DCOMP._IOwnership _4198_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4199_recIdents;
              RAST._IExpr _out957;
              DCOMP._IOwnership _out958;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out957, out _out958, out _out959);
              _4197_recursiveGen = _out957;
              _4198_recOwned = _out958;
              _4199_recIdents = _out959;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4197_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out960;
              DCOMP._IOwnership _out961;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out960, out _out961);
              r = _out960;
              resultingOwnership = _out961;
              readIdents = _4199_recIdents;
            }
          } else if (_source151.is_Seq) {
            DAST._IType _4200___mcc_h586 = _source151.dtor_element;
            {
              RAST._IExpr _4201_recursiveGen;
              DCOMP._IOwnership _4202_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4203_recIdents;
              RAST._IExpr _out962;
              DCOMP._IOwnership _out963;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out962, out _out963, out _out964);
              _4201_recursiveGen = _out962;
              _4202_recOwned = _out963;
              _4203_recIdents = _out964;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4201_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out965;
              DCOMP._IOwnership _out966;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out965, out _out966);
              r = _out965;
              resultingOwnership = _out966;
              readIdents = _4203_recIdents;
            }
          } else if (_source151.is_Set) {
            DAST._IType _4204___mcc_h588 = _source151.dtor_element;
            {
              RAST._IExpr _4205_recursiveGen;
              DCOMP._IOwnership _4206_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4207_recIdents;
              RAST._IExpr _out967;
              DCOMP._IOwnership _out968;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out967, out _out968, out _out969);
              _4205_recursiveGen = _out967;
              _4206_recOwned = _out968;
              _4207_recIdents = _out969;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4205_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out970;
              DCOMP._IOwnership _out971;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out970, out _out971);
              r = _out970;
              resultingOwnership = _out971;
              readIdents = _4207_recIdents;
            }
          } else if (_source151.is_Multiset) {
            DAST._IType _4208___mcc_h590 = _source151.dtor_element;
            {
              RAST._IExpr _4209_recursiveGen;
              DCOMP._IOwnership _4210_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4211_recIdents;
              RAST._IExpr _out972;
              DCOMP._IOwnership _out973;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out972, out _out973, out _out974);
              _4209_recursiveGen = _out972;
              _4210_recOwned = _out973;
              _4211_recIdents = _out974;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4209_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out975;
              DCOMP._IOwnership _out976;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out975, out _out976);
              r = _out975;
              resultingOwnership = _out976;
              readIdents = _4211_recIdents;
            }
          } else if (_source151.is_Map) {
            DAST._IType _4212___mcc_h592 = _source151.dtor_key;
            DAST._IType _4213___mcc_h593 = _source151.dtor_value;
            {
              RAST._IExpr _4214_recursiveGen;
              DCOMP._IOwnership _4215_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4216_recIdents;
              RAST._IExpr _out977;
              DCOMP._IOwnership _out978;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out977, out _out978, out _out979);
              _4214_recursiveGen = _out977;
              _4215_recOwned = _out978;
              _4216_recIdents = _out979;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4214_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out980;
              DCOMP._IOwnership _out981;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out980, out _out981);
              r = _out980;
              resultingOwnership = _out981;
              readIdents = _4216_recIdents;
            }
          } else if (_source151.is_SetBuilder) {
            DAST._IType _4217___mcc_h596 = _source151.dtor_element;
            {
              RAST._IExpr _4218_recursiveGen;
              DCOMP._IOwnership _4219_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4220_recIdents;
              RAST._IExpr _out982;
              DCOMP._IOwnership _out983;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out982, out _out983, out _out984);
              _4218_recursiveGen = _out982;
              _4219_recOwned = _out983;
              _4220_recIdents = _out984;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4218_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out985;
              DCOMP._IOwnership _out986;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out985, out _out986);
              r = _out985;
              resultingOwnership = _out986;
              readIdents = _4220_recIdents;
            }
          } else if (_source151.is_MapBuilder) {
            DAST._IType _4221___mcc_h598 = _source151.dtor_key;
            DAST._IType _4222___mcc_h599 = _source151.dtor_value;
            {
              RAST._IExpr _4223_recursiveGen;
              DCOMP._IOwnership _4224_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4225_recIdents;
              RAST._IExpr _out987;
              DCOMP._IOwnership _out988;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out987, out _out988, out _out989);
              _4223_recursiveGen = _out987;
              _4224_recOwned = _out988;
              _4225_recIdents = _out989;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4223_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out990;
              DCOMP._IOwnership _out991;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out990, out _out991);
              r = _out990;
              resultingOwnership = _out991;
              readIdents = _4225_recIdents;
            }
          } else if (_source151.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4226___mcc_h602 = _source151.dtor_args;
            DAST._IType _4227___mcc_h603 = _source151.dtor_result;
            {
              RAST._IExpr _4228_recursiveGen;
              DCOMP._IOwnership _4229_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4230_recIdents;
              RAST._IExpr _out992;
              DCOMP._IOwnership _out993;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out992, out _out993, out _out994);
              _4228_recursiveGen = _out992;
              _4229_recOwned = _out993;
              _4230_recIdents = _out994;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4228_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out995;
              DCOMP._IOwnership _out996;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out995, out _out996);
              r = _out995;
              resultingOwnership = _out996;
              readIdents = _4230_recIdents;
            }
          } else if (_source151.is_Primitive) {
            DAST._IPrimitive _4231___mcc_h606 = _source151.dtor_Primitive_a0;
            {
              RAST._IExpr _4232_recursiveGen;
              DCOMP._IOwnership _4233_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4234_recIdents;
              RAST._IExpr _out997;
              DCOMP._IOwnership _out998;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out999;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out997, out _out998, out _out999);
              _4232_recursiveGen = _out997;
              _4233_recOwned = _out998;
              _4234_recIdents = _out999;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4232_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1000;
              DCOMP._IOwnership _out1001;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1000, out _out1001);
              r = _out1000;
              resultingOwnership = _out1001;
              readIdents = _4234_recIdents;
            }
          } else if (_source151.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4235___mcc_h608 = _source151.dtor_Passthrough_a0;
            {
              RAST._IExpr _4236_recursiveGen;
              DCOMP._IOwnership _4237_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4238_recIdents;
              RAST._IExpr _out1002;
              DCOMP._IOwnership _out1003;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1002, out _out1003, out _out1004);
              _4236_recursiveGen = _out1002;
              _4237_recOwned = _out1003;
              _4238_recIdents = _out1004;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4236_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1005;
              DCOMP._IOwnership _out1006;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1005, out _out1006);
              r = _out1005;
              resultingOwnership = _out1006;
              readIdents = _4238_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4239___mcc_h610 = _source151.dtor_TypeArg_a0;
            {
              RAST._IExpr _4240_recursiveGen;
              DCOMP._IOwnership _4241_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4242_recIdents;
              RAST._IExpr _out1007;
              DCOMP._IOwnership _out1008;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1007, out _out1008, out _out1009);
              _4240_recursiveGen = _out1007;
              _4241_recOwned = _out1008;
              _4242_recIdents = _out1009;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4240_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1010;
              DCOMP._IOwnership _out1011;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1010, out _out1011);
              r = _out1010;
              resultingOwnership = _out1011;
              readIdents = _4242_recIdents;
            }
          }
        } else if (_source126.is_Map) {
          DAST._IType _4243___mcc_h612 = _source126.dtor_key;
          DAST._IType _4244___mcc_h613 = _source126.dtor_value;
          DAST._IType _source154 = _3430___mcc_h1;
          if (_source154.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4245___mcc_h620 = _source154.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4246___mcc_h621 = _source154.dtor_typeArgs;
            DAST._IResolvedType _4247___mcc_h622 = _source154.dtor_resolved;
            DAST._IResolvedType _source155 = _4247___mcc_h622;
            if (_source155.is_Datatype) {
              DAST._IDatatypeType _4248___mcc_h626 = _source155.dtor_datatypeType;
              {
                RAST._IExpr _4249_recursiveGen;
                DCOMP._IOwnership _4250_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4251_recIdents;
                RAST._IExpr _out1012;
                DCOMP._IOwnership _out1013;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1014;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1012, out _out1013, out _out1014);
                _4249_recursiveGen = _out1012;
                _4250_recOwned = _out1013;
                _4251_recIdents = _out1014;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4249_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1015;
                DCOMP._IOwnership _out1016;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1015, out _out1016);
                r = _out1015;
                resultingOwnership = _out1016;
                readIdents = _4251_recIdents;
              }
            } else if (_source155.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4252___mcc_h628 = _source155.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4253___mcc_h629 = _source155.dtor_attributes;
              {
                RAST._IExpr _4254_recursiveGen;
                DCOMP._IOwnership _4255_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4256_recIdents;
                RAST._IExpr _out1017;
                DCOMP._IOwnership _out1018;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1017, out _out1018, out _out1019);
                _4254_recursiveGen = _out1017;
                _4255_recOwned = _out1018;
                _4256_recIdents = _out1019;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4254_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1020;
                DCOMP._IOwnership _out1021;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1020, out _out1021);
                r = _out1020;
                resultingOwnership = _out1021;
                readIdents = _4256_recIdents;
              }
            } else {
              DAST._IType _4257___mcc_h632 = _source155.dtor_baseType;
              DAST._INewtypeRange _4258___mcc_h633 = _source155.dtor_range;
              bool _4259___mcc_h634 = _source155.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4260___mcc_h635 = _source155.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4261_attributes = _4260___mcc_h635;
              bool _4262_erase = _4259___mcc_h634;
              DAST._INewtypeRange _4263_range = _4258___mcc_h633;
              DAST._IType _4264_b = _4257___mcc_h632;
              {
                if (object.Equals(_3424_fromTpe, _4264_b)) {
                  RAST._IExpr _4265_recursiveGen;
                  DCOMP._IOwnership _4266_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4267_recIdents;
                  RAST._IExpr _out1022;
                  DCOMP._IOwnership _out1023;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1022, out _out1023, out _out1024);
                  _4265_recursiveGen = _out1022;
                  _4266_recOwned = _out1023;
                  _4267_recIdents = _out1024;
                  Std.Wrappers._IOption<RAST._IType> _4268_potentialRhsType;
                  _4268_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4264_b, _4263_range);
                  Std.Wrappers._IOption<RAST._IType> _source156 = _4268_potentialRhsType;
                  if (_source156.is_None) {
                    if (_4262_erase) {
                      r = _4265_recursiveGen;
                    } else {
                      RAST._IType _4269_rhsType;
                      RAST._IType _out1025;
                      _out1025 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _4269_rhsType = _out1025;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4269_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4265_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1026;
                    DCOMP._IOwnership _out1027;
                    DCOMP.COMP.FromOwnership(r, _4266_recOwned, expectedOwnership, out _out1026, out _out1027);
                    r = _out1026;
                    resultingOwnership = _out1027;
                  } else {
                    RAST._IType _4270___mcc_h1254 = _source156.dtor_value;
                    RAST._IType _4271_v = _4270___mcc_h1254;
                    r = RAST.Expr.create_ConversionNum(_4271_v, _4265_recursiveGen);
                    RAST._IExpr _out1028;
                    DCOMP._IOwnership _out1029;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1028, out _out1029);
                    r = _out1028;
                    resultingOwnership = _out1029;
                  }
                  readIdents = _4267_recIdents;
                } else {
                  RAST._IExpr _out1030;
                  DCOMP._IOwnership _out1031;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4264_b), _4264_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1030, out _out1031, out _out1032);
                  r = _out1030;
                  resultingOwnership = _out1031;
                  readIdents = _out1032;
                }
              }
            }
          } else if (_source154.is_Nullable) {
            DAST._IType _4272___mcc_h640 = _source154.dtor_Nullable_a0;
            {
              RAST._IExpr _4273_recursiveGen;
              DCOMP._IOwnership _4274_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4275_recIdents;
              RAST._IExpr _out1033;
              DCOMP._IOwnership _out1034;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1033, out _out1034, out _out1035);
              _4273_recursiveGen = _out1033;
              _4274_recOwned = _out1034;
              _4275_recIdents = _out1035;
              r = _4273_recursiveGen;
              if (object.Equals(_4274_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1036;
              DCOMP._IOwnership _out1037;
              DCOMP.COMP.FromOwnership(r, _4274_recOwned, expectedOwnership, out _out1036, out _out1037);
              r = _out1036;
              resultingOwnership = _out1037;
              readIdents = _4275_recIdents;
            }
          } else if (_source154.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4276___mcc_h642 = _source154.dtor_Tuple_a0;
            {
              RAST._IExpr _4277_recursiveGen;
              DCOMP._IOwnership _4278_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4279_recIdents;
              RAST._IExpr _out1038;
              DCOMP._IOwnership _out1039;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1038, out _out1039, out _out1040);
              _4277_recursiveGen = _out1038;
              _4278_recOwned = _out1039;
              _4279_recIdents = _out1040;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4277_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1041;
              DCOMP._IOwnership _out1042;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1041, out _out1042);
              r = _out1041;
              resultingOwnership = _out1042;
              readIdents = _4279_recIdents;
            }
          } else if (_source154.is_Array) {
            DAST._IType _4280___mcc_h644 = _source154.dtor_element;
            BigInteger _4281___mcc_h645 = _source154.dtor_dims;
            {
              RAST._IExpr _4282_recursiveGen;
              DCOMP._IOwnership _4283_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4284_recIdents;
              RAST._IExpr _out1043;
              DCOMP._IOwnership _out1044;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1043, out _out1044, out _out1045);
              _4282_recursiveGen = _out1043;
              _4283_recOwned = _out1044;
              _4284_recIdents = _out1045;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4282_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1046;
              DCOMP._IOwnership _out1047;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1046, out _out1047);
              r = _out1046;
              resultingOwnership = _out1047;
              readIdents = _4284_recIdents;
            }
          } else if (_source154.is_Seq) {
            DAST._IType _4285___mcc_h648 = _source154.dtor_element;
            {
              RAST._IExpr _4286_recursiveGen;
              DCOMP._IOwnership _4287_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4288_recIdents;
              RAST._IExpr _out1048;
              DCOMP._IOwnership _out1049;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1050;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1048, out _out1049, out _out1050);
              _4286_recursiveGen = _out1048;
              _4287_recOwned = _out1049;
              _4288_recIdents = _out1050;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4286_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1051;
              DCOMP._IOwnership _out1052;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1051, out _out1052);
              r = _out1051;
              resultingOwnership = _out1052;
              readIdents = _4288_recIdents;
            }
          } else if (_source154.is_Set) {
            DAST._IType _4289___mcc_h650 = _source154.dtor_element;
            {
              RAST._IExpr _4290_recursiveGen;
              DCOMP._IOwnership _4291_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4292_recIdents;
              RAST._IExpr _out1053;
              DCOMP._IOwnership _out1054;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1053, out _out1054, out _out1055);
              _4290_recursiveGen = _out1053;
              _4291_recOwned = _out1054;
              _4292_recIdents = _out1055;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4290_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1056;
              DCOMP._IOwnership _out1057;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1056, out _out1057);
              r = _out1056;
              resultingOwnership = _out1057;
              readIdents = _4292_recIdents;
            }
          } else if (_source154.is_Multiset) {
            DAST._IType _4293___mcc_h652 = _source154.dtor_element;
            {
              RAST._IExpr _4294_recursiveGen;
              DCOMP._IOwnership _4295_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4296_recIdents;
              RAST._IExpr _out1058;
              DCOMP._IOwnership _out1059;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1058, out _out1059, out _out1060);
              _4294_recursiveGen = _out1058;
              _4295_recOwned = _out1059;
              _4296_recIdents = _out1060;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4294_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1061;
              DCOMP._IOwnership _out1062;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1061, out _out1062);
              r = _out1061;
              resultingOwnership = _out1062;
              readIdents = _4296_recIdents;
            }
          } else if (_source154.is_Map) {
            DAST._IType _4297___mcc_h654 = _source154.dtor_key;
            DAST._IType _4298___mcc_h655 = _source154.dtor_value;
            {
              RAST._IExpr _4299_recursiveGen;
              DCOMP._IOwnership _4300_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4301_recIdents;
              RAST._IExpr _out1063;
              DCOMP._IOwnership _out1064;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1063, out _out1064, out _out1065);
              _4299_recursiveGen = _out1063;
              _4300_recOwned = _out1064;
              _4301_recIdents = _out1065;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4299_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1066;
              DCOMP._IOwnership _out1067;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1066, out _out1067);
              r = _out1066;
              resultingOwnership = _out1067;
              readIdents = _4301_recIdents;
            }
          } else if (_source154.is_SetBuilder) {
            DAST._IType _4302___mcc_h658 = _source154.dtor_element;
            {
              RAST._IExpr _4303_recursiveGen;
              DCOMP._IOwnership _4304_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4305_recIdents;
              RAST._IExpr _out1068;
              DCOMP._IOwnership _out1069;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1070;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1068, out _out1069, out _out1070);
              _4303_recursiveGen = _out1068;
              _4304_recOwned = _out1069;
              _4305_recIdents = _out1070;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4303_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1071;
              DCOMP._IOwnership _out1072;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1071, out _out1072);
              r = _out1071;
              resultingOwnership = _out1072;
              readIdents = _4305_recIdents;
            }
          } else if (_source154.is_MapBuilder) {
            DAST._IType _4306___mcc_h660 = _source154.dtor_key;
            DAST._IType _4307___mcc_h661 = _source154.dtor_value;
            {
              RAST._IExpr _4308_recursiveGen;
              DCOMP._IOwnership _4309_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4310_recIdents;
              RAST._IExpr _out1073;
              DCOMP._IOwnership _out1074;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1073, out _out1074, out _out1075);
              _4308_recursiveGen = _out1073;
              _4309_recOwned = _out1074;
              _4310_recIdents = _out1075;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4308_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1076;
              DCOMP._IOwnership _out1077;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1076, out _out1077);
              r = _out1076;
              resultingOwnership = _out1077;
              readIdents = _4310_recIdents;
            }
          } else if (_source154.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4311___mcc_h664 = _source154.dtor_args;
            DAST._IType _4312___mcc_h665 = _source154.dtor_result;
            {
              RAST._IExpr _4313_recursiveGen;
              DCOMP._IOwnership _4314_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4315_recIdents;
              RAST._IExpr _out1078;
              DCOMP._IOwnership _out1079;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1078, out _out1079, out _out1080);
              _4313_recursiveGen = _out1078;
              _4314_recOwned = _out1079;
              _4315_recIdents = _out1080;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4313_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1081;
              DCOMP._IOwnership _out1082;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1081, out _out1082);
              r = _out1081;
              resultingOwnership = _out1082;
              readIdents = _4315_recIdents;
            }
          } else if (_source154.is_Primitive) {
            DAST._IPrimitive _4316___mcc_h668 = _source154.dtor_Primitive_a0;
            {
              RAST._IExpr _4317_recursiveGen;
              DCOMP._IOwnership _4318_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4319_recIdents;
              RAST._IExpr _out1083;
              DCOMP._IOwnership _out1084;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1083, out _out1084, out _out1085);
              _4317_recursiveGen = _out1083;
              _4318_recOwned = _out1084;
              _4319_recIdents = _out1085;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4317_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1086;
              DCOMP._IOwnership _out1087;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1086, out _out1087);
              r = _out1086;
              resultingOwnership = _out1087;
              readIdents = _4319_recIdents;
            }
          } else if (_source154.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4320___mcc_h670 = _source154.dtor_Passthrough_a0;
            {
              RAST._IExpr _4321_recursiveGen;
              DCOMP._IOwnership _4322_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4323_recIdents;
              RAST._IExpr _out1088;
              DCOMP._IOwnership _out1089;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1088, out _out1089, out _out1090);
              _4321_recursiveGen = _out1088;
              _4322_recOwned = _out1089;
              _4323_recIdents = _out1090;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4321_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1091;
              DCOMP._IOwnership _out1092;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1091, out _out1092);
              r = _out1091;
              resultingOwnership = _out1092;
              readIdents = _4323_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4324___mcc_h672 = _source154.dtor_TypeArg_a0;
            {
              RAST._IExpr _4325_recursiveGen;
              DCOMP._IOwnership _4326_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4327_recIdents;
              RAST._IExpr _out1093;
              DCOMP._IOwnership _out1094;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1093, out _out1094, out _out1095);
              _4325_recursiveGen = _out1093;
              _4326_recOwned = _out1094;
              _4327_recIdents = _out1095;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4325_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1096;
              DCOMP._IOwnership _out1097;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1096, out _out1097);
              r = _out1096;
              resultingOwnership = _out1097;
              readIdents = _4327_recIdents;
            }
          }
        } else if (_source126.is_SetBuilder) {
          DAST._IType _4328___mcc_h674 = _source126.dtor_element;
          DAST._IType _source157 = _3430___mcc_h1;
          if (_source157.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4329___mcc_h678 = _source157.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4330___mcc_h679 = _source157.dtor_typeArgs;
            DAST._IResolvedType _4331___mcc_h680 = _source157.dtor_resolved;
            DAST._IResolvedType _source158 = _4331___mcc_h680;
            if (_source158.is_Datatype) {
              DAST._IDatatypeType _4332___mcc_h684 = _source158.dtor_datatypeType;
              {
                RAST._IExpr _4333_recursiveGen;
                DCOMP._IOwnership _4334_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4335_recIdents;
                RAST._IExpr _out1098;
                DCOMP._IOwnership _out1099;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1098, out _out1099, out _out1100);
                _4333_recursiveGen = _out1098;
                _4334_recOwned = _out1099;
                _4335_recIdents = _out1100;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4333_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1101;
                DCOMP._IOwnership _out1102;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1101, out _out1102);
                r = _out1101;
                resultingOwnership = _out1102;
                readIdents = _4335_recIdents;
              }
            } else if (_source158.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4336___mcc_h686 = _source158.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4337___mcc_h687 = _source158.dtor_attributes;
              {
                RAST._IExpr _4338_recursiveGen;
                DCOMP._IOwnership _4339_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4340_recIdents;
                RAST._IExpr _out1103;
                DCOMP._IOwnership _out1104;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1103, out _out1104, out _out1105);
                _4338_recursiveGen = _out1103;
                _4339_recOwned = _out1104;
                _4340_recIdents = _out1105;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4338_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1106;
                DCOMP._IOwnership _out1107;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1106, out _out1107);
                r = _out1106;
                resultingOwnership = _out1107;
                readIdents = _4340_recIdents;
              }
            } else {
              DAST._IType _4341___mcc_h690 = _source158.dtor_baseType;
              DAST._INewtypeRange _4342___mcc_h691 = _source158.dtor_range;
              bool _4343___mcc_h692 = _source158.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4344___mcc_h693 = _source158.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4345_attributes = _4344___mcc_h693;
              bool _4346_erase = _4343___mcc_h692;
              DAST._INewtypeRange _4347_range = _4342___mcc_h691;
              DAST._IType _4348_b = _4341___mcc_h690;
              {
                if (object.Equals(_3424_fromTpe, _4348_b)) {
                  RAST._IExpr _4349_recursiveGen;
                  DCOMP._IOwnership _4350_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4351_recIdents;
                  RAST._IExpr _out1108;
                  DCOMP._IOwnership _out1109;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1110;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1108, out _out1109, out _out1110);
                  _4349_recursiveGen = _out1108;
                  _4350_recOwned = _out1109;
                  _4351_recIdents = _out1110;
                  Std.Wrappers._IOption<RAST._IType> _4352_potentialRhsType;
                  _4352_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4348_b, _4347_range);
                  Std.Wrappers._IOption<RAST._IType> _source159 = _4352_potentialRhsType;
                  if (_source159.is_None) {
                    if (_4346_erase) {
                      r = _4349_recursiveGen;
                    } else {
                      RAST._IType _4353_rhsType;
                      RAST._IType _out1111;
                      _out1111 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _4353_rhsType = _out1111;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4353_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4349_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1112;
                    DCOMP._IOwnership _out1113;
                    DCOMP.COMP.FromOwnership(r, _4350_recOwned, expectedOwnership, out _out1112, out _out1113);
                    r = _out1112;
                    resultingOwnership = _out1113;
                  } else {
                    RAST._IType _4354___mcc_h1255 = _source159.dtor_value;
                    RAST._IType _4355_v = _4354___mcc_h1255;
                    r = RAST.Expr.create_ConversionNum(_4355_v, _4349_recursiveGen);
                    RAST._IExpr _out1114;
                    DCOMP._IOwnership _out1115;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1114, out _out1115);
                    r = _out1114;
                    resultingOwnership = _out1115;
                  }
                  readIdents = _4351_recIdents;
                } else {
                  RAST._IExpr _out1116;
                  DCOMP._IOwnership _out1117;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1118;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4348_b), _4348_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1116, out _out1117, out _out1118);
                  r = _out1116;
                  resultingOwnership = _out1117;
                  readIdents = _out1118;
                }
              }
            }
          } else if (_source157.is_Nullable) {
            DAST._IType _4356___mcc_h698 = _source157.dtor_Nullable_a0;
            {
              RAST._IExpr _4357_recursiveGen;
              DCOMP._IOwnership _4358_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4359_recIdents;
              RAST._IExpr _out1119;
              DCOMP._IOwnership _out1120;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1119, out _out1120, out _out1121);
              _4357_recursiveGen = _out1119;
              _4358_recOwned = _out1120;
              _4359_recIdents = _out1121;
              r = _4357_recursiveGen;
              if (object.Equals(_4358_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1122;
              DCOMP._IOwnership _out1123;
              DCOMP.COMP.FromOwnership(r, _4358_recOwned, expectedOwnership, out _out1122, out _out1123);
              r = _out1122;
              resultingOwnership = _out1123;
              readIdents = _4359_recIdents;
            }
          } else if (_source157.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4360___mcc_h700 = _source157.dtor_Tuple_a0;
            {
              RAST._IExpr _4361_recursiveGen;
              DCOMP._IOwnership _4362_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4363_recIdents;
              RAST._IExpr _out1124;
              DCOMP._IOwnership _out1125;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1126;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1124, out _out1125, out _out1126);
              _4361_recursiveGen = _out1124;
              _4362_recOwned = _out1125;
              _4363_recIdents = _out1126;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4361_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1127;
              DCOMP._IOwnership _out1128;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1127, out _out1128);
              r = _out1127;
              resultingOwnership = _out1128;
              readIdents = _4363_recIdents;
            }
          } else if (_source157.is_Array) {
            DAST._IType _4364___mcc_h702 = _source157.dtor_element;
            BigInteger _4365___mcc_h703 = _source157.dtor_dims;
            {
              RAST._IExpr _4366_recursiveGen;
              DCOMP._IOwnership _4367_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4368_recIdents;
              RAST._IExpr _out1129;
              DCOMP._IOwnership _out1130;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1131;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1129, out _out1130, out _out1131);
              _4366_recursiveGen = _out1129;
              _4367_recOwned = _out1130;
              _4368_recIdents = _out1131;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4366_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1132;
              DCOMP._IOwnership _out1133;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1132, out _out1133);
              r = _out1132;
              resultingOwnership = _out1133;
              readIdents = _4368_recIdents;
            }
          } else if (_source157.is_Seq) {
            DAST._IType _4369___mcc_h706 = _source157.dtor_element;
            {
              RAST._IExpr _4370_recursiveGen;
              DCOMP._IOwnership _4371_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4372_recIdents;
              RAST._IExpr _out1134;
              DCOMP._IOwnership _out1135;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1134, out _out1135, out _out1136);
              _4370_recursiveGen = _out1134;
              _4371_recOwned = _out1135;
              _4372_recIdents = _out1136;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4370_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1137;
              DCOMP._IOwnership _out1138;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1137, out _out1138);
              r = _out1137;
              resultingOwnership = _out1138;
              readIdents = _4372_recIdents;
            }
          } else if (_source157.is_Set) {
            DAST._IType _4373___mcc_h708 = _source157.dtor_element;
            {
              RAST._IExpr _4374_recursiveGen;
              DCOMP._IOwnership _4375_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4376_recIdents;
              RAST._IExpr _out1139;
              DCOMP._IOwnership _out1140;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1139, out _out1140, out _out1141);
              _4374_recursiveGen = _out1139;
              _4375_recOwned = _out1140;
              _4376_recIdents = _out1141;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4374_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1142;
              DCOMP._IOwnership _out1143;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1142, out _out1143);
              r = _out1142;
              resultingOwnership = _out1143;
              readIdents = _4376_recIdents;
            }
          } else if (_source157.is_Multiset) {
            DAST._IType _4377___mcc_h710 = _source157.dtor_element;
            {
              RAST._IExpr _4378_recursiveGen;
              DCOMP._IOwnership _4379_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4380_recIdents;
              RAST._IExpr _out1144;
              DCOMP._IOwnership _out1145;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1144, out _out1145, out _out1146);
              _4378_recursiveGen = _out1144;
              _4379_recOwned = _out1145;
              _4380_recIdents = _out1146;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4378_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1147;
              DCOMP._IOwnership _out1148;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1147, out _out1148);
              r = _out1147;
              resultingOwnership = _out1148;
              readIdents = _4380_recIdents;
            }
          } else if (_source157.is_Map) {
            DAST._IType _4381___mcc_h712 = _source157.dtor_key;
            DAST._IType _4382___mcc_h713 = _source157.dtor_value;
            {
              RAST._IExpr _4383_recursiveGen;
              DCOMP._IOwnership _4384_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4385_recIdents;
              RAST._IExpr _out1149;
              DCOMP._IOwnership _out1150;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1149, out _out1150, out _out1151);
              _4383_recursiveGen = _out1149;
              _4384_recOwned = _out1150;
              _4385_recIdents = _out1151;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4383_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1152;
              DCOMP._IOwnership _out1153;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1152, out _out1153);
              r = _out1152;
              resultingOwnership = _out1153;
              readIdents = _4385_recIdents;
            }
          } else if (_source157.is_SetBuilder) {
            DAST._IType _4386___mcc_h716 = _source157.dtor_element;
            {
              RAST._IExpr _4387_recursiveGen;
              DCOMP._IOwnership _4388_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4389_recIdents;
              RAST._IExpr _out1154;
              DCOMP._IOwnership _out1155;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1154, out _out1155, out _out1156);
              _4387_recursiveGen = _out1154;
              _4388_recOwned = _out1155;
              _4389_recIdents = _out1156;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4387_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1157;
              DCOMP._IOwnership _out1158;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1157, out _out1158);
              r = _out1157;
              resultingOwnership = _out1158;
              readIdents = _4389_recIdents;
            }
          } else if (_source157.is_MapBuilder) {
            DAST._IType _4390___mcc_h718 = _source157.dtor_key;
            DAST._IType _4391___mcc_h719 = _source157.dtor_value;
            {
              RAST._IExpr _4392_recursiveGen;
              DCOMP._IOwnership _4393_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4394_recIdents;
              RAST._IExpr _out1159;
              DCOMP._IOwnership _out1160;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1159, out _out1160, out _out1161);
              _4392_recursiveGen = _out1159;
              _4393_recOwned = _out1160;
              _4394_recIdents = _out1161;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4392_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1162;
              DCOMP._IOwnership _out1163;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1162, out _out1163);
              r = _out1162;
              resultingOwnership = _out1163;
              readIdents = _4394_recIdents;
            }
          } else if (_source157.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4395___mcc_h722 = _source157.dtor_args;
            DAST._IType _4396___mcc_h723 = _source157.dtor_result;
            {
              RAST._IExpr _4397_recursiveGen;
              DCOMP._IOwnership _4398_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4399_recIdents;
              RAST._IExpr _out1164;
              DCOMP._IOwnership _out1165;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1164, out _out1165, out _out1166);
              _4397_recursiveGen = _out1164;
              _4398_recOwned = _out1165;
              _4399_recIdents = _out1166;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4397_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1167;
              DCOMP._IOwnership _out1168;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1167, out _out1168);
              r = _out1167;
              resultingOwnership = _out1168;
              readIdents = _4399_recIdents;
            }
          } else if (_source157.is_Primitive) {
            DAST._IPrimitive _4400___mcc_h726 = _source157.dtor_Primitive_a0;
            {
              RAST._IExpr _4401_recursiveGen;
              DCOMP._IOwnership _4402_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4403_recIdents;
              RAST._IExpr _out1169;
              DCOMP._IOwnership _out1170;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1171;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1169, out _out1170, out _out1171);
              _4401_recursiveGen = _out1169;
              _4402_recOwned = _out1170;
              _4403_recIdents = _out1171;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4401_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1172;
              DCOMP._IOwnership _out1173;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1172, out _out1173);
              r = _out1172;
              resultingOwnership = _out1173;
              readIdents = _4403_recIdents;
            }
          } else if (_source157.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4404___mcc_h728 = _source157.dtor_Passthrough_a0;
            {
              RAST._IExpr _4405_recursiveGen;
              DCOMP._IOwnership _4406_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4407_recIdents;
              RAST._IExpr _out1174;
              DCOMP._IOwnership _out1175;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1174, out _out1175, out _out1176);
              _4405_recursiveGen = _out1174;
              _4406_recOwned = _out1175;
              _4407_recIdents = _out1176;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4405_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1177;
              DCOMP._IOwnership _out1178;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1177, out _out1178);
              r = _out1177;
              resultingOwnership = _out1178;
              readIdents = _4407_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4408___mcc_h730 = _source157.dtor_TypeArg_a0;
            {
              RAST._IExpr _4409_recursiveGen;
              DCOMP._IOwnership _4410_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4411_recIdents;
              RAST._IExpr _out1179;
              DCOMP._IOwnership _out1180;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1179, out _out1180, out _out1181);
              _4409_recursiveGen = _out1179;
              _4410_recOwned = _out1180;
              _4411_recIdents = _out1181;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4409_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1182;
              DCOMP._IOwnership _out1183;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1182, out _out1183);
              r = _out1182;
              resultingOwnership = _out1183;
              readIdents = _4411_recIdents;
            }
          }
        } else if (_source126.is_MapBuilder) {
          DAST._IType _4412___mcc_h732 = _source126.dtor_key;
          DAST._IType _4413___mcc_h733 = _source126.dtor_value;
          DAST._IType _source160 = _3430___mcc_h1;
          if (_source160.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4414___mcc_h740 = _source160.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4415___mcc_h741 = _source160.dtor_typeArgs;
            DAST._IResolvedType _4416___mcc_h742 = _source160.dtor_resolved;
            DAST._IResolvedType _source161 = _4416___mcc_h742;
            if (_source161.is_Datatype) {
              DAST._IDatatypeType _4417___mcc_h746 = _source161.dtor_datatypeType;
              {
                RAST._IExpr _4418_recursiveGen;
                DCOMP._IOwnership _4419_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4420_recIdents;
                RAST._IExpr _out1184;
                DCOMP._IOwnership _out1185;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1184, out _out1185, out _out1186);
                _4418_recursiveGen = _out1184;
                _4419_recOwned = _out1185;
                _4420_recIdents = _out1186;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4418_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1187;
                DCOMP._IOwnership _out1188;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1187, out _out1188);
                r = _out1187;
                resultingOwnership = _out1188;
                readIdents = _4420_recIdents;
              }
            } else if (_source161.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4421___mcc_h748 = _source161.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4422___mcc_h749 = _source161.dtor_attributes;
              {
                RAST._IExpr _4423_recursiveGen;
                DCOMP._IOwnership _4424_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4425_recIdents;
                RAST._IExpr _out1189;
                DCOMP._IOwnership _out1190;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1189, out _out1190, out _out1191);
                _4423_recursiveGen = _out1189;
                _4424_recOwned = _out1190;
                _4425_recIdents = _out1191;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4423_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1192;
                DCOMP._IOwnership _out1193;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1192, out _out1193);
                r = _out1192;
                resultingOwnership = _out1193;
                readIdents = _4425_recIdents;
              }
            } else {
              DAST._IType _4426___mcc_h752 = _source161.dtor_baseType;
              DAST._INewtypeRange _4427___mcc_h753 = _source161.dtor_range;
              bool _4428___mcc_h754 = _source161.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4429___mcc_h755 = _source161.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4430_attributes = _4429___mcc_h755;
              bool _4431_erase = _4428___mcc_h754;
              DAST._INewtypeRange _4432_range = _4427___mcc_h753;
              DAST._IType _4433_b = _4426___mcc_h752;
              {
                if (object.Equals(_3424_fromTpe, _4433_b)) {
                  RAST._IExpr _4434_recursiveGen;
                  DCOMP._IOwnership _4435_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4436_recIdents;
                  RAST._IExpr _out1194;
                  DCOMP._IOwnership _out1195;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1194, out _out1195, out _out1196);
                  _4434_recursiveGen = _out1194;
                  _4435_recOwned = _out1195;
                  _4436_recIdents = _out1196;
                  Std.Wrappers._IOption<RAST._IType> _4437_potentialRhsType;
                  _4437_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4433_b, _4432_range);
                  Std.Wrappers._IOption<RAST._IType> _source162 = _4437_potentialRhsType;
                  if (_source162.is_None) {
                    if (_4431_erase) {
                      r = _4434_recursiveGen;
                    } else {
                      RAST._IType _4438_rhsType;
                      RAST._IType _out1197;
                      _out1197 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _4438_rhsType = _out1197;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4438_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4434_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1198;
                    DCOMP._IOwnership _out1199;
                    DCOMP.COMP.FromOwnership(r, _4435_recOwned, expectedOwnership, out _out1198, out _out1199);
                    r = _out1198;
                    resultingOwnership = _out1199;
                  } else {
                    RAST._IType _4439___mcc_h1256 = _source162.dtor_value;
                    RAST._IType _4440_v = _4439___mcc_h1256;
                    r = RAST.Expr.create_ConversionNum(_4440_v, _4434_recursiveGen);
                    RAST._IExpr _out1200;
                    DCOMP._IOwnership _out1201;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1200, out _out1201);
                    r = _out1200;
                    resultingOwnership = _out1201;
                  }
                  readIdents = _4436_recIdents;
                } else {
                  RAST._IExpr _out1202;
                  DCOMP._IOwnership _out1203;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1204;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4433_b), _4433_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1202, out _out1203, out _out1204);
                  r = _out1202;
                  resultingOwnership = _out1203;
                  readIdents = _out1204;
                }
              }
            }
          } else if (_source160.is_Nullable) {
            DAST._IType _4441___mcc_h760 = _source160.dtor_Nullable_a0;
            {
              RAST._IExpr _4442_recursiveGen;
              DCOMP._IOwnership _4443_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4444_recIdents;
              RAST._IExpr _out1205;
              DCOMP._IOwnership _out1206;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1207;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1205, out _out1206, out _out1207);
              _4442_recursiveGen = _out1205;
              _4443_recOwned = _out1206;
              _4444_recIdents = _out1207;
              r = _4442_recursiveGen;
              if (object.Equals(_4443_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1208;
              DCOMP._IOwnership _out1209;
              DCOMP.COMP.FromOwnership(r, _4443_recOwned, expectedOwnership, out _out1208, out _out1209);
              r = _out1208;
              resultingOwnership = _out1209;
              readIdents = _4444_recIdents;
            }
          } else if (_source160.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4445___mcc_h762 = _source160.dtor_Tuple_a0;
            {
              RAST._IExpr _4446_recursiveGen;
              DCOMP._IOwnership _4447_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4448_recIdents;
              RAST._IExpr _out1210;
              DCOMP._IOwnership _out1211;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1212;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1210, out _out1211, out _out1212);
              _4446_recursiveGen = _out1210;
              _4447_recOwned = _out1211;
              _4448_recIdents = _out1212;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4446_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1213;
              DCOMP._IOwnership _out1214;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1213, out _out1214);
              r = _out1213;
              resultingOwnership = _out1214;
              readIdents = _4448_recIdents;
            }
          } else if (_source160.is_Array) {
            DAST._IType _4449___mcc_h764 = _source160.dtor_element;
            BigInteger _4450___mcc_h765 = _source160.dtor_dims;
            {
              RAST._IExpr _4451_recursiveGen;
              DCOMP._IOwnership _4452_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4453_recIdents;
              RAST._IExpr _out1215;
              DCOMP._IOwnership _out1216;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1215, out _out1216, out _out1217);
              _4451_recursiveGen = _out1215;
              _4452_recOwned = _out1216;
              _4453_recIdents = _out1217;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4451_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1218;
              DCOMP._IOwnership _out1219;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1218, out _out1219);
              r = _out1218;
              resultingOwnership = _out1219;
              readIdents = _4453_recIdents;
            }
          } else if (_source160.is_Seq) {
            DAST._IType _4454___mcc_h768 = _source160.dtor_element;
            {
              RAST._IExpr _4455_recursiveGen;
              DCOMP._IOwnership _4456_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4457_recIdents;
              RAST._IExpr _out1220;
              DCOMP._IOwnership _out1221;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1220, out _out1221, out _out1222);
              _4455_recursiveGen = _out1220;
              _4456_recOwned = _out1221;
              _4457_recIdents = _out1222;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4455_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1223;
              DCOMP._IOwnership _out1224;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1223, out _out1224);
              r = _out1223;
              resultingOwnership = _out1224;
              readIdents = _4457_recIdents;
            }
          } else if (_source160.is_Set) {
            DAST._IType _4458___mcc_h770 = _source160.dtor_element;
            {
              RAST._IExpr _4459_recursiveGen;
              DCOMP._IOwnership _4460_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4461_recIdents;
              RAST._IExpr _out1225;
              DCOMP._IOwnership _out1226;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1225, out _out1226, out _out1227);
              _4459_recursiveGen = _out1225;
              _4460_recOwned = _out1226;
              _4461_recIdents = _out1227;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4459_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1228;
              DCOMP._IOwnership _out1229;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1228, out _out1229);
              r = _out1228;
              resultingOwnership = _out1229;
              readIdents = _4461_recIdents;
            }
          } else if (_source160.is_Multiset) {
            DAST._IType _4462___mcc_h772 = _source160.dtor_element;
            {
              RAST._IExpr _4463_recursiveGen;
              DCOMP._IOwnership _4464_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4465_recIdents;
              RAST._IExpr _out1230;
              DCOMP._IOwnership _out1231;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1232;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1230, out _out1231, out _out1232);
              _4463_recursiveGen = _out1230;
              _4464_recOwned = _out1231;
              _4465_recIdents = _out1232;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4463_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1233;
              DCOMP._IOwnership _out1234;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1233, out _out1234);
              r = _out1233;
              resultingOwnership = _out1234;
              readIdents = _4465_recIdents;
            }
          } else if (_source160.is_Map) {
            DAST._IType _4466___mcc_h774 = _source160.dtor_key;
            DAST._IType _4467___mcc_h775 = _source160.dtor_value;
            {
              RAST._IExpr _4468_recursiveGen;
              DCOMP._IOwnership _4469_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4470_recIdents;
              RAST._IExpr _out1235;
              DCOMP._IOwnership _out1236;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1235, out _out1236, out _out1237);
              _4468_recursiveGen = _out1235;
              _4469_recOwned = _out1236;
              _4470_recIdents = _out1237;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4468_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1238;
              DCOMP._IOwnership _out1239;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1238, out _out1239);
              r = _out1238;
              resultingOwnership = _out1239;
              readIdents = _4470_recIdents;
            }
          } else if (_source160.is_SetBuilder) {
            DAST._IType _4471___mcc_h778 = _source160.dtor_element;
            {
              RAST._IExpr _4472_recursiveGen;
              DCOMP._IOwnership _4473_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4474_recIdents;
              RAST._IExpr _out1240;
              DCOMP._IOwnership _out1241;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1240, out _out1241, out _out1242);
              _4472_recursiveGen = _out1240;
              _4473_recOwned = _out1241;
              _4474_recIdents = _out1242;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4472_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1243;
              DCOMP._IOwnership _out1244;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1243, out _out1244);
              r = _out1243;
              resultingOwnership = _out1244;
              readIdents = _4474_recIdents;
            }
          } else if (_source160.is_MapBuilder) {
            DAST._IType _4475___mcc_h780 = _source160.dtor_key;
            DAST._IType _4476___mcc_h781 = _source160.dtor_value;
            {
              RAST._IExpr _4477_recursiveGen;
              DCOMP._IOwnership _4478_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4479_recIdents;
              RAST._IExpr _out1245;
              DCOMP._IOwnership _out1246;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1245, out _out1246, out _out1247);
              _4477_recursiveGen = _out1245;
              _4478_recOwned = _out1246;
              _4479_recIdents = _out1247;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4477_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1248;
              DCOMP._IOwnership _out1249;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1248, out _out1249);
              r = _out1248;
              resultingOwnership = _out1249;
              readIdents = _4479_recIdents;
            }
          } else if (_source160.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4480___mcc_h784 = _source160.dtor_args;
            DAST._IType _4481___mcc_h785 = _source160.dtor_result;
            {
              RAST._IExpr _4482_recursiveGen;
              DCOMP._IOwnership _4483_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4484_recIdents;
              RAST._IExpr _out1250;
              DCOMP._IOwnership _out1251;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1252;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1250, out _out1251, out _out1252);
              _4482_recursiveGen = _out1250;
              _4483_recOwned = _out1251;
              _4484_recIdents = _out1252;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4482_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1253;
              DCOMP._IOwnership _out1254;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1253, out _out1254);
              r = _out1253;
              resultingOwnership = _out1254;
              readIdents = _4484_recIdents;
            }
          } else if (_source160.is_Primitive) {
            DAST._IPrimitive _4485___mcc_h788 = _source160.dtor_Primitive_a0;
            {
              RAST._IExpr _4486_recursiveGen;
              DCOMP._IOwnership _4487_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4488_recIdents;
              RAST._IExpr _out1255;
              DCOMP._IOwnership _out1256;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1255, out _out1256, out _out1257);
              _4486_recursiveGen = _out1255;
              _4487_recOwned = _out1256;
              _4488_recIdents = _out1257;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4486_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1258;
              DCOMP._IOwnership _out1259;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1258, out _out1259);
              r = _out1258;
              resultingOwnership = _out1259;
              readIdents = _4488_recIdents;
            }
          } else if (_source160.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4489___mcc_h790 = _source160.dtor_Passthrough_a0;
            {
              RAST._IExpr _4490_recursiveGen;
              DCOMP._IOwnership _4491_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4492_recIdents;
              RAST._IExpr _out1260;
              DCOMP._IOwnership _out1261;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1260, out _out1261, out _out1262);
              _4490_recursiveGen = _out1260;
              _4491_recOwned = _out1261;
              _4492_recIdents = _out1262;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4490_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1263;
              DCOMP._IOwnership _out1264;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1263, out _out1264);
              r = _out1263;
              resultingOwnership = _out1264;
              readIdents = _4492_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4493___mcc_h792 = _source160.dtor_TypeArg_a0;
            {
              RAST._IExpr _4494_recursiveGen;
              DCOMP._IOwnership _4495_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4496_recIdents;
              RAST._IExpr _out1265;
              DCOMP._IOwnership _out1266;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1265, out _out1266, out _out1267);
              _4494_recursiveGen = _out1265;
              _4495_recOwned = _out1266;
              _4496_recIdents = _out1267;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4494_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1268;
              DCOMP._IOwnership _out1269;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1268, out _out1269);
              r = _out1268;
              resultingOwnership = _out1269;
              readIdents = _4496_recIdents;
            }
          }
        } else if (_source126.is_Arrow) {
          Dafny.ISequence<DAST._IType> _4497___mcc_h794 = _source126.dtor_args;
          DAST._IType _4498___mcc_h795 = _source126.dtor_result;
          DAST._IType _source163 = _3430___mcc_h1;
          if (_source163.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4499___mcc_h802 = _source163.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4500___mcc_h803 = _source163.dtor_typeArgs;
            DAST._IResolvedType _4501___mcc_h804 = _source163.dtor_resolved;
            DAST._IResolvedType _source164 = _4501___mcc_h804;
            if (_source164.is_Datatype) {
              DAST._IDatatypeType _4502___mcc_h808 = _source164.dtor_datatypeType;
              {
                RAST._IExpr _4503_recursiveGen;
                DCOMP._IOwnership _4504_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4505_recIdents;
                RAST._IExpr _out1270;
                DCOMP._IOwnership _out1271;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1270, out _out1271, out _out1272);
                _4503_recursiveGen = _out1270;
                _4504_recOwned = _out1271;
                _4505_recIdents = _out1272;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4503_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1273;
                DCOMP._IOwnership _out1274;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1273, out _out1274);
                r = _out1273;
                resultingOwnership = _out1274;
                readIdents = _4505_recIdents;
              }
            } else if (_source164.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4506___mcc_h810 = _source164.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4507___mcc_h811 = _source164.dtor_attributes;
              {
                RAST._IExpr _4508_recursiveGen;
                DCOMP._IOwnership _4509_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4510_recIdents;
                RAST._IExpr _out1275;
                DCOMP._IOwnership _out1276;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1277;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1275, out _out1276, out _out1277);
                _4508_recursiveGen = _out1275;
                _4509_recOwned = _out1276;
                _4510_recIdents = _out1277;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4508_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1278;
                DCOMP._IOwnership _out1279;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1278, out _out1279);
                r = _out1278;
                resultingOwnership = _out1279;
                readIdents = _4510_recIdents;
              }
            } else {
              DAST._IType _4511___mcc_h814 = _source164.dtor_baseType;
              DAST._INewtypeRange _4512___mcc_h815 = _source164.dtor_range;
              bool _4513___mcc_h816 = _source164.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4514___mcc_h817 = _source164.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4515_attributes = _4514___mcc_h817;
              bool _4516_erase = _4513___mcc_h816;
              DAST._INewtypeRange _4517_range = _4512___mcc_h815;
              DAST._IType _4518_b = _4511___mcc_h814;
              {
                if (object.Equals(_3424_fromTpe, _4518_b)) {
                  RAST._IExpr _4519_recursiveGen;
                  DCOMP._IOwnership _4520_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4521_recIdents;
                  RAST._IExpr _out1280;
                  DCOMP._IOwnership _out1281;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1280, out _out1281, out _out1282);
                  _4519_recursiveGen = _out1280;
                  _4520_recOwned = _out1281;
                  _4521_recIdents = _out1282;
                  Std.Wrappers._IOption<RAST._IType> _4522_potentialRhsType;
                  _4522_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4518_b, _4517_range);
                  Std.Wrappers._IOption<RAST._IType> _source165 = _4522_potentialRhsType;
                  if (_source165.is_None) {
                    if (_4516_erase) {
                      r = _4519_recursiveGen;
                    } else {
                      RAST._IType _4523_rhsType;
                      RAST._IType _out1283;
                      _out1283 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _4523_rhsType = _out1283;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4523_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4519_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1284;
                    DCOMP._IOwnership _out1285;
                    DCOMP.COMP.FromOwnership(r, _4520_recOwned, expectedOwnership, out _out1284, out _out1285);
                    r = _out1284;
                    resultingOwnership = _out1285;
                  } else {
                    RAST._IType _4524___mcc_h1257 = _source165.dtor_value;
                    RAST._IType _4525_v = _4524___mcc_h1257;
                    r = RAST.Expr.create_ConversionNum(_4525_v, _4519_recursiveGen);
                    RAST._IExpr _out1286;
                    DCOMP._IOwnership _out1287;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1286, out _out1287);
                    r = _out1286;
                    resultingOwnership = _out1287;
                  }
                  readIdents = _4521_recIdents;
                } else {
                  RAST._IExpr _out1288;
                  DCOMP._IOwnership _out1289;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1290;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4518_b), _4518_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1288, out _out1289, out _out1290);
                  r = _out1288;
                  resultingOwnership = _out1289;
                  readIdents = _out1290;
                }
              }
            }
          } else if (_source163.is_Nullable) {
            DAST._IType _4526___mcc_h822 = _source163.dtor_Nullable_a0;
            {
              RAST._IExpr _4527_recursiveGen;
              DCOMP._IOwnership _4528_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4529_recIdents;
              RAST._IExpr _out1291;
              DCOMP._IOwnership _out1292;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1293;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1291, out _out1292, out _out1293);
              _4527_recursiveGen = _out1291;
              _4528_recOwned = _out1292;
              _4529_recIdents = _out1293;
              r = _4527_recursiveGen;
              if (object.Equals(_4528_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1294;
              DCOMP._IOwnership _out1295;
              DCOMP.COMP.FromOwnership(r, _4528_recOwned, expectedOwnership, out _out1294, out _out1295);
              r = _out1294;
              resultingOwnership = _out1295;
              readIdents = _4529_recIdents;
            }
          } else if (_source163.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4530___mcc_h824 = _source163.dtor_Tuple_a0;
            {
              RAST._IExpr _4531_recursiveGen;
              DCOMP._IOwnership _4532_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4533_recIdents;
              RAST._IExpr _out1296;
              DCOMP._IOwnership _out1297;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1298;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1296, out _out1297, out _out1298);
              _4531_recursiveGen = _out1296;
              _4532_recOwned = _out1297;
              _4533_recIdents = _out1298;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4531_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1299;
              DCOMP._IOwnership _out1300;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1299, out _out1300);
              r = _out1299;
              resultingOwnership = _out1300;
              readIdents = _4533_recIdents;
            }
          } else if (_source163.is_Array) {
            DAST._IType _4534___mcc_h826 = _source163.dtor_element;
            BigInteger _4535___mcc_h827 = _source163.dtor_dims;
            {
              RAST._IExpr _4536_recursiveGen;
              DCOMP._IOwnership _4537_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4538_recIdents;
              RAST._IExpr _out1301;
              DCOMP._IOwnership _out1302;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1303;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1301, out _out1302, out _out1303);
              _4536_recursiveGen = _out1301;
              _4537_recOwned = _out1302;
              _4538_recIdents = _out1303;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4536_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1304;
              DCOMP._IOwnership _out1305;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1304, out _out1305);
              r = _out1304;
              resultingOwnership = _out1305;
              readIdents = _4538_recIdents;
            }
          } else if (_source163.is_Seq) {
            DAST._IType _4539___mcc_h830 = _source163.dtor_element;
            {
              RAST._IExpr _4540_recursiveGen;
              DCOMP._IOwnership _4541_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4542_recIdents;
              RAST._IExpr _out1306;
              DCOMP._IOwnership _out1307;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1306, out _out1307, out _out1308);
              _4540_recursiveGen = _out1306;
              _4541_recOwned = _out1307;
              _4542_recIdents = _out1308;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4540_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1309;
              DCOMP._IOwnership _out1310;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1309, out _out1310);
              r = _out1309;
              resultingOwnership = _out1310;
              readIdents = _4542_recIdents;
            }
          } else if (_source163.is_Set) {
            DAST._IType _4543___mcc_h832 = _source163.dtor_element;
            {
              RAST._IExpr _4544_recursiveGen;
              DCOMP._IOwnership _4545_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4546_recIdents;
              RAST._IExpr _out1311;
              DCOMP._IOwnership _out1312;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1311, out _out1312, out _out1313);
              _4544_recursiveGen = _out1311;
              _4545_recOwned = _out1312;
              _4546_recIdents = _out1313;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4544_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1314;
              DCOMP._IOwnership _out1315;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1314, out _out1315);
              r = _out1314;
              resultingOwnership = _out1315;
              readIdents = _4546_recIdents;
            }
          } else if (_source163.is_Multiset) {
            DAST._IType _4547___mcc_h834 = _source163.dtor_element;
            {
              RAST._IExpr _4548_recursiveGen;
              DCOMP._IOwnership _4549_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4550_recIdents;
              RAST._IExpr _out1316;
              DCOMP._IOwnership _out1317;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1318;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1316, out _out1317, out _out1318);
              _4548_recursiveGen = _out1316;
              _4549_recOwned = _out1317;
              _4550_recIdents = _out1318;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4548_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1319;
              DCOMP._IOwnership _out1320;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1319, out _out1320);
              r = _out1319;
              resultingOwnership = _out1320;
              readIdents = _4550_recIdents;
            }
          } else if (_source163.is_Map) {
            DAST._IType _4551___mcc_h836 = _source163.dtor_key;
            DAST._IType _4552___mcc_h837 = _source163.dtor_value;
            {
              RAST._IExpr _4553_recursiveGen;
              DCOMP._IOwnership _4554_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4555_recIdents;
              RAST._IExpr _out1321;
              DCOMP._IOwnership _out1322;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1321, out _out1322, out _out1323);
              _4553_recursiveGen = _out1321;
              _4554_recOwned = _out1322;
              _4555_recIdents = _out1323;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4553_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1324;
              DCOMP._IOwnership _out1325;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1324, out _out1325);
              r = _out1324;
              resultingOwnership = _out1325;
              readIdents = _4555_recIdents;
            }
          } else if (_source163.is_SetBuilder) {
            DAST._IType _4556___mcc_h840 = _source163.dtor_element;
            {
              RAST._IExpr _4557_recursiveGen;
              DCOMP._IOwnership _4558_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4559_recIdents;
              RAST._IExpr _out1326;
              DCOMP._IOwnership _out1327;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1328;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1326, out _out1327, out _out1328);
              _4557_recursiveGen = _out1326;
              _4558_recOwned = _out1327;
              _4559_recIdents = _out1328;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4557_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1329;
              DCOMP._IOwnership _out1330;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1329, out _out1330);
              r = _out1329;
              resultingOwnership = _out1330;
              readIdents = _4559_recIdents;
            }
          } else if (_source163.is_MapBuilder) {
            DAST._IType _4560___mcc_h842 = _source163.dtor_key;
            DAST._IType _4561___mcc_h843 = _source163.dtor_value;
            {
              RAST._IExpr _4562_recursiveGen;
              DCOMP._IOwnership _4563_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4564_recIdents;
              RAST._IExpr _out1331;
              DCOMP._IOwnership _out1332;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1331, out _out1332, out _out1333);
              _4562_recursiveGen = _out1331;
              _4563_recOwned = _out1332;
              _4564_recIdents = _out1333;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4562_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1334;
              DCOMP._IOwnership _out1335;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1334, out _out1335);
              r = _out1334;
              resultingOwnership = _out1335;
              readIdents = _4564_recIdents;
            }
          } else if (_source163.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4565___mcc_h846 = _source163.dtor_args;
            DAST._IType _4566___mcc_h847 = _source163.dtor_result;
            {
              RAST._IExpr _4567_recursiveGen;
              DCOMP._IOwnership _4568_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4569_recIdents;
              RAST._IExpr _out1336;
              DCOMP._IOwnership _out1337;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1336, out _out1337, out _out1338);
              _4567_recursiveGen = _out1336;
              _4568_recOwned = _out1337;
              _4569_recIdents = _out1338;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4567_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1339;
              DCOMP._IOwnership _out1340;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1339, out _out1340);
              r = _out1339;
              resultingOwnership = _out1340;
              readIdents = _4569_recIdents;
            }
          } else if (_source163.is_Primitive) {
            DAST._IPrimitive _4570___mcc_h850 = _source163.dtor_Primitive_a0;
            {
              RAST._IExpr _4571_recursiveGen;
              DCOMP._IOwnership _4572_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4573_recIdents;
              RAST._IExpr _out1341;
              DCOMP._IOwnership _out1342;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1341, out _out1342, out _out1343);
              _4571_recursiveGen = _out1341;
              _4572_recOwned = _out1342;
              _4573_recIdents = _out1343;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4571_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1344;
              DCOMP._IOwnership _out1345;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1344, out _out1345);
              r = _out1344;
              resultingOwnership = _out1345;
              readIdents = _4573_recIdents;
            }
          } else if (_source163.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4574___mcc_h852 = _source163.dtor_Passthrough_a0;
            {
              RAST._IExpr _4575_recursiveGen;
              DCOMP._IOwnership _4576_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4577_recIdents;
              RAST._IExpr _out1346;
              DCOMP._IOwnership _out1347;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1346, out _out1347, out _out1348);
              _4575_recursiveGen = _out1346;
              _4576_recOwned = _out1347;
              _4577_recIdents = _out1348;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4575_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1349;
              DCOMP._IOwnership _out1350;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1349, out _out1350);
              r = _out1349;
              resultingOwnership = _out1350;
              readIdents = _4577_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4578___mcc_h854 = _source163.dtor_TypeArg_a0;
            {
              RAST._IExpr _4579_recursiveGen;
              DCOMP._IOwnership _4580_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4581_recIdents;
              RAST._IExpr _out1351;
              DCOMP._IOwnership _out1352;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1353;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1351, out _out1352, out _out1353);
              _4579_recursiveGen = _out1351;
              _4580_recOwned = _out1352;
              _4581_recIdents = _out1353;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4579_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1354;
              DCOMP._IOwnership _out1355;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1354, out _out1355);
              r = _out1354;
              resultingOwnership = _out1355;
              readIdents = _4581_recIdents;
            }
          }
        } else if (_source126.is_Primitive) {
          DAST._IPrimitive _4582___mcc_h856 = _source126.dtor_Primitive_a0;
          DAST._IPrimitive _source166 = _4582___mcc_h856;
          if (_source166.is_Int) {
            DAST._IType _source167 = _3430___mcc_h1;
            if (_source167.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4583___mcc_h860 = _source167.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4584___mcc_h861 = _source167.dtor_typeArgs;
              DAST._IResolvedType _4585___mcc_h862 = _source167.dtor_resolved;
              DAST._IResolvedType _source168 = _4585___mcc_h862;
              if (_source168.is_Datatype) {
                DAST._IDatatypeType _4586___mcc_h866 = _source168.dtor_datatypeType;
                {
                  RAST._IExpr _4587_recursiveGen;
                  DCOMP._IOwnership _4588_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4589_recIdents;
                  RAST._IExpr _out1356;
                  DCOMP._IOwnership _out1357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1356, out _out1357, out _out1358);
                  _4587_recursiveGen = _out1356;
                  _4588_recOwned = _out1357;
                  _4589_recIdents = _out1358;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4587_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1359;
                  DCOMP._IOwnership _out1360;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1359, out _out1360);
                  r = _out1359;
                  resultingOwnership = _out1360;
                  readIdents = _4589_recIdents;
                }
              } else if (_source168.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4590___mcc_h868 = _source168.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4591___mcc_h869 = _source168.dtor_attributes;
                {
                  RAST._IExpr _4592_recursiveGen;
                  DCOMP._IOwnership _4593_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4594_recIdents;
                  RAST._IExpr _out1361;
                  DCOMP._IOwnership _out1362;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1361, out _out1362, out _out1363);
                  _4592_recursiveGen = _out1361;
                  _4593_recOwned = _out1362;
                  _4594_recIdents = _out1363;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4592_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1364;
                  DCOMP._IOwnership _out1365;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1364, out _out1365);
                  r = _out1364;
                  resultingOwnership = _out1365;
                  readIdents = _4594_recIdents;
                }
              } else {
                DAST._IType _4595___mcc_h872 = _source168.dtor_baseType;
                DAST._INewtypeRange _4596___mcc_h873 = _source168.dtor_range;
                bool _4597___mcc_h874 = _source168.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4598___mcc_h875 = _source168.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4599_attributes = _4598___mcc_h875;
                bool _4600_erase = _4597___mcc_h874;
                DAST._INewtypeRange _4601_range = _4596___mcc_h873;
                DAST._IType _4602_b = _4595___mcc_h872;
                {
                  if (object.Equals(_3424_fromTpe, _4602_b)) {
                    RAST._IExpr _4603_recursiveGen;
                    DCOMP._IOwnership _4604_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4605_recIdents;
                    RAST._IExpr _out1366;
                    DCOMP._IOwnership _out1367;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1366, out _out1367, out _out1368);
                    _4603_recursiveGen = _out1366;
                    _4604_recOwned = _out1367;
                    _4605_recIdents = _out1368;
                    Std.Wrappers._IOption<RAST._IType> _4606_potentialRhsType;
                    _4606_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4602_b, _4601_range);
                    Std.Wrappers._IOption<RAST._IType> _source169 = _4606_potentialRhsType;
                    if (_source169.is_None) {
                      if (_4600_erase) {
                        r = _4603_recursiveGen;
                      } else {
                        RAST._IType _4607_rhsType;
                        RAST._IType _out1369;
                        _out1369 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                        _4607_rhsType = _out1369;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4607_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4603_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1370;
                      DCOMP._IOwnership _out1371;
                      DCOMP.COMP.FromOwnership(r, _4604_recOwned, expectedOwnership, out _out1370, out _out1371);
                      r = _out1370;
                      resultingOwnership = _out1371;
                    } else {
                      RAST._IType _4608___mcc_h1258 = _source169.dtor_value;
                      RAST._IType _4609_v = _4608___mcc_h1258;
                      r = RAST.Expr.create_ConversionNum(_4609_v, _4603_recursiveGen);
                      RAST._IExpr _out1372;
                      DCOMP._IOwnership _out1373;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1372, out _out1373);
                      r = _out1372;
                      resultingOwnership = _out1373;
                    }
                    readIdents = _4605_recIdents;
                  } else {
                    RAST._IExpr _out1374;
                    DCOMP._IOwnership _out1375;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4602_b), _4602_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1374, out _out1375, out _out1376);
                    r = _out1374;
                    resultingOwnership = _out1375;
                    readIdents = _out1376;
                  }
                }
              }
            } else if (_source167.is_Nullable) {
              DAST._IType _4610___mcc_h880 = _source167.dtor_Nullable_a0;
              {
                RAST._IExpr _4611_recursiveGen;
                DCOMP._IOwnership _4612_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4613_recIdents;
                RAST._IExpr _out1377;
                DCOMP._IOwnership _out1378;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1377, out _out1378, out _out1379);
                _4611_recursiveGen = _out1377;
                _4612_recOwned = _out1378;
                _4613_recIdents = _out1379;
                r = _4611_recursiveGen;
                if (object.Equals(_4612_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1380;
                DCOMP._IOwnership _out1381;
                DCOMP.COMP.FromOwnership(r, _4612_recOwned, expectedOwnership, out _out1380, out _out1381);
                r = _out1380;
                resultingOwnership = _out1381;
                readIdents = _4613_recIdents;
              }
            } else if (_source167.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4614___mcc_h882 = _source167.dtor_Tuple_a0;
              {
                RAST._IExpr _4615_recursiveGen;
                DCOMP._IOwnership _4616_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4617_recIdents;
                RAST._IExpr _out1382;
                DCOMP._IOwnership _out1383;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1382, out _out1383, out _out1384);
                _4615_recursiveGen = _out1382;
                _4616_recOwned = _out1383;
                _4617_recIdents = _out1384;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4615_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1385;
                DCOMP._IOwnership _out1386;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1385, out _out1386);
                r = _out1385;
                resultingOwnership = _out1386;
                readIdents = _4617_recIdents;
              }
            } else if (_source167.is_Array) {
              DAST._IType _4618___mcc_h884 = _source167.dtor_element;
              BigInteger _4619___mcc_h885 = _source167.dtor_dims;
              {
                RAST._IExpr _4620_recursiveGen;
                DCOMP._IOwnership _4621_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4622_recIdents;
                RAST._IExpr _out1387;
                DCOMP._IOwnership _out1388;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1387, out _out1388, out _out1389);
                _4620_recursiveGen = _out1387;
                _4621_recOwned = _out1388;
                _4622_recIdents = _out1389;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4620_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1390;
                DCOMP._IOwnership _out1391;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1390, out _out1391);
                r = _out1390;
                resultingOwnership = _out1391;
                readIdents = _4622_recIdents;
              }
            } else if (_source167.is_Seq) {
              DAST._IType _4623___mcc_h888 = _source167.dtor_element;
              {
                RAST._IExpr _4624_recursiveGen;
                DCOMP._IOwnership _4625_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4626_recIdents;
                RAST._IExpr _out1392;
                DCOMP._IOwnership _out1393;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1394;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1392, out _out1393, out _out1394);
                _4624_recursiveGen = _out1392;
                _4625_recOwned = _out1393;
                _4626_recIdents = _out1394;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4624_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1395;
                DCOMP._IOwnership _out1396;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1395, out _out1396);
                r = _out1395;
                resultingOwnership = _out1396;
                readIdents = _4626_recIdents;
              }
            } else if (_source167.is_Set) {
              DAST._IType _4627___mcc_h890 = _source167.dtor_element;
              {
                RAST._IExpr _4628_recursiveGen;
                DCOMP._IOwnership _4629_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4630_recIdents;
                RAST._IExpr _out1397;
                DCOMP._IOwnership _out1398;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1397, out _out1398, out _out1399);
                _4628_recursiveGen = _out1397;
                _4629_recOwned = _out1398;
                _4630_recIdents = _out1399;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4628_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1400;
                DCOMP._IOwnership _out1401;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1400, out _out1401);
                r = _out1400;
                resultingOwnership = _out1401;
                readIdents = _4630_recIdents;
              }
            } else if (_source167.is_Multiset) {
              DAST._IType _4631___mcc_h892 = _source167.dtor_element;
              {
                RAST._IExpr _4632_recursiveGen;
                DCOMP._IOwnership _4633_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4634_recIdents;
                RAST._IExpr _out1402;
                DCOMP._IOwnership _out1403;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1402, out _out1403, out _out1404);
                _4632_recursiveGen = _out1402;
                _4633_recOwned = _out1403;
                _4634_recIdents = _out1404;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4632_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1405;
                DCOMP._IOwnership _out1406;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1405, out _out1406);
                r = _out1405;
                resultingOwnership = _out1406;
                readIdents = _4634_recIdents;
              }
            } else if (_source167.is_Map) {
              DAST._IType _4635___mcc_h894 = _source167.dtor_key;
              DAST._IType _4636___mcc_h895 = _source167.dtor_value;
              {
                RAST._IExpr _4637_recursiveGen;
                DCOMP._IOwnership _4638_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4639_recIdents;
                RAST._IExpr _out1407;
                DCOMP._IOwnership _out1408;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1409;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1407, out _out1408, out _out1409);
                _4637_recursiveGen = _out1407;
                _4638_recOwned = _out1408;
                _4639_recIdents = _out1409;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4637_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1410;
                DCOMP._IOwnership _out1411;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1410, out _out1411);
                r = _out1410;
                resultingOwnership = _out1411;
                readIdents = _4639_recIdents;
              }
            } else if (_source167.is_SetBuilder) {
              DAST._IType _4640___mcc_h898 = _source167.dtor_element;
              {
                RAST._IExpr _4641_recursiveGen;
                DCOMP._IOwnership _4642_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4643_recIdents;
                RAST._IExpr _out1412;
                DCOMP._IOwnership _out1413;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1414;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1412, out _out1413, out _out1414);
                _4641_recursiveGen = _out1412;
                _4642_recOwned = _out1413;
                _4643_recIdents = _out1414;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4641_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1415;
                DCOMP._IOwnership _out1416;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1415, out _out1416);
                r = _out1415;
                resultingOwnership = _out1416;
                readIdents = _4643_recIdents;
              }
            } else if (_source167.is_MapBuilder) {
              DAST._IType _4644___mcc_h900 = _source167.dtor_key;
              DAST._IType _4645___mcc_h901 = _source167.dtor_value;
              {
                RAST._IExpr _4646_recursiveGen;
                DCOMP._IOwnership _4647_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4648_recIdents;
                RAST._IExpr _out1417;
                DCOMP._IOwnership _out1418;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1417, out _out1418, out _out1419);
                _4646_recursiveGen = _out1417;
                _4647_recOwned = _out1418;
                _4648_recIdents = _out1419;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4646_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1420;
                DCOMP._IOwnership _out1421;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1420, out _out1421);
                r = _out1420;
                resultingOwnership = _out1421;
                readIdents = _4648_recIdents;
              }
            } else if (_source167.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4649___mcc_h904 = _source167.dtor_args;
              DAST._IType _4650___mcc_h905 = _source167.dtor_result;
              {
                RAST._IExpr _4651_recursiveGen;
                DCOMP._IOwnership _4652_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4653_recIdents;
                RAST._IExpr _out1422;
                DCOMP._IOwnership _out1423;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1422, out _out1423, out _out1424);
                _4651_recursiveGen = _out1422;
                _4652_recOwned = _out1423;
                _4653_recIdents = _out1424;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4651_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1425;
                DCOMP._IOwnership _out1426;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1425, out _out1426);
                r = _out1425;
                resultingOwnership = _out1426;
                readIdents = _4653_recIdents;
              }
            } else if (_source167.is_Primitive) {
              DAST._IPrimitive _4654___mcc_h908 = _source167.dtor_Primitive_a0;
              DAST._IPrimitive _source170 = _4654___mcc_h908;
              if (_source170.is_Int) {
                {
                  RAST._IExpr _4655_recursiveGen;
                  DCOMP._IOwnership _4656_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4657_recIdents;
                  RAST._IExpr _out1427;
                  DCOMP._IOwnership _out1428;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1429;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1427, out _out1428, out _out1429);
                  _4655_recursiveGen = _out1427;
                  _4656_recOwned = _out1428;
                  _4657_recIdents = _out1429;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4655_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1430;
                  DCOMP._IOwnership _out1431;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1430, out _out1431);
                  r = _out1430;
                  resultingOwnership = _out1431;
                  readIdents = _4657_recIdents;
                }
              } else if (_source170.is_Real) {
                {
                  RAST._IExpr _4658_recursiveGen;
                  DCOMP._IOwnership _4659___v78;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4660_recIdents;
                  RAST._IExpr _out1432;
                  DCOMP._IOwnership _out1433;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1434;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1432, out _out1433, out _out1434);
                  _4658_recursiveGen = _out1432;
                  _4659___v78 = _out1433;
                  _4660_recIdents = _out1434;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_4658_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out1435;
                  DCOMP._IOwnership _out1436;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1435, out _out1436);
                  r = _out1435;
                  resultingOwnership = _out1436;
                  readIdents = _4660_recIdents;
                }
              } else if (_source170.is_String) {
                {
                  RAST._IExpr _4661_recursiveGen;
                  DCOMP._IOwnership _4662_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4663_recIdents;
                  RAST._IExpr _out1437;
                  DCOMP._IOwnership _out1438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1437, out _out1438, out _out1439);
                  _4661_recursiveGen = _out1437;
                  _4662_recOwned = _out1438;
                  _4663_recIdents = _out1439;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4661_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1440;
                  DCOMP._IOwnership _out1441;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1440, out _out1441);
                  r = _out1440;
                  resultingOwnership = _out1441;
                  readIdents = _4663_recIdents;
                }
              } else if (_source170.is_Bool) {
                {
                  RAST._IExpr _4664_recursiveGen;
                  DCOMP._IOwnership _4665_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4666_recIdents;
                  RAST._IExpr _out1442;
                  DCOMP._IOwnership _out1443;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1442, out _out1443, out _out1444);
                  _4664_recursiveGen = _out1442;
                  _4665_recOwned = _out1443;
                  _4666_recIdents = _out1444;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4664_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1445;
                  DCOMP._IOwnership _out1446;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1445, out _out1446);
                  r = _out1445;
                  resultingOwnership = _out1446;
                  readIdents = _4666_recIdents;
                }
              } else {
                {
                  RAST._IType _4667_rhsType;
                  RAST._IType _out1447;
                  _out1447 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                  _4667_rhsType = _out1447;
                  RAST._IExpr _4668_recursiveGen;
                  DCOMP._IOwnership _4669___v84;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4670_recIdents;
                  RAST._IExpr _out1448;
                  DCOMP._IOwnership _out1449;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1450;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1448, out _out1449, out _out1450);
                  _4668_recursiveGen = _out1448;
                  _4669___v84 = _out1449;
                  _4670_recIdents = _out1450;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_4668_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out1451;
                  DCOMP._IOwnership _out1452;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1451, out _out1452);
                  r = _out1451;
                  resultingOwnership = _out1452;
                  readIdents = _4670_recIdents;
                }
              }
            } else if (_source167.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4671___mcc_h910 = _source167.dtor_Passthrough_a0;
              {
                RAST._IType _4672_rhsType;
                RAST._IType _out1453;
                _out1453 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                _4672_rhsType = _out1453;
                RAST._IExpr _4673_recursiveGen;
                DCOMP._IOwnership _4674___v81;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4675_recIdents;
                RAST._IExpr _out1454;
                DCOMP._IOwnership _out1455;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1454, out _out1455, out _out1456);
                _4673_recursiveGen = _out1454;
                _4674___v81 = _out1455;
                _4675_recIdents = _out1456;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4672_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_4673_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out1457;
                DCOMP._IOwnership _out1458;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1457, out _out1458);
                r = _out1457;
                resultingOwnership = _out1458;
                readIdents = _4675_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4676___mcc_h912 = _source167.dtor_TypeArg_a0;
              {
                RAST._IExpr _4677_recursiveGen;
                DCOMP._IOwnership _4678_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4679_recIdents;
                RAST._IExpr _out1459;
                DCOMP._IOwnership _out1460;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1459, out _out1460, out _out1461);
                _4677_recursiveGen = _out1459;
                _4678_recOwned = _out1460;
                _4679_recIdents = _out1461;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4677_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1462;
                DCOMP._IOwnership _out1463;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1462, out _out1463);
                r = _out1462;
                resultingOwnership = _out1463;
                readIdents = _4679_recIdents;
              }
            }
          } else if (_source166.is_Real) {
            DAST._IType _source171 = _3430___mcc_h1;
            if (_source171.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4680___mcc_h914 = _source171.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4681___mcc_h915 = _source171.dtor_typeArgs;
              DAST._IResolvedType _4682___mcc_h916 = _source171.dtor_resolved;
              DAST._IResolvedType _source172 = _4682___mcc_h916;
              if (_source172.is_Datatype) {
                DAST._IDatatypeType _4683___mcc_h920 = _source172.dtor_datatypeType;
                {
                  RAST._IExpr _4684_recursiveGen;
                  DCOMP._IOwnership _4685_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4686_recIdents;
                  RAST._IExpr _out1464;
                  DCOMP._IOwnership _out1465;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1466;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1464, out _out1465, out _out1466);
                  _4684_recursiveGen = _out1464;
                  _4685_recOwned = _out1465;
                  _4686_recIdents = _out1466;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4684_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1467;
                  DCOMP._IOwnership _out1468;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1467, out _out1468);
                  r = _out1467;
                  resultingOwnership = _out1468;
                  readIdents = _4686_recIdents;
                }
              } else if (_source172.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4687___mcc_h922 = _source172.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4688___mcc_h923 = _source172.dtor_attributes;
                {
                  RAST._IExpr _4689_recursiveGen;
                  DCOMP._IOwnership _4690_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4691_recIdents;
                  RAST._IExpr _out1469;
                  DCOMP._IOwnership _out1470;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1471;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1469, out _out1470, out _out1471);
                  _4689_recursiveGen = _out1469;
                  _4690_recOwned = _out1470;
                  _4691_recIdents = _out1471;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4689_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1472;
                  DCOMP._IOwnership _out1473;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1472, out _out1473);
                  r = _out1472;
                  resultingOwnership = _out1473;
                  readIdents = _4691_recIdents;
                }
              } else {
                DAST._IType _4692___mcc_h926 = _source172.dtor_baseType;
                DAST._INewtypeRange _4693___mcc_h927 = _source172.dtor_range;
                bool _4694___mcc_h928 = _source172.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4695___mcc_h929 = _source172.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4696_attributes = _4695___mcc_h929;
                bool _4697_erase = _4694___mcc_h928;
                DAST._INewtypeRange _4698_range = _4693___mcc_h927;
                DAST._IType _4699_b = _4692___mcc_h926;
                {
                  if (object.Equals(_3424_fromTpe, _4699_b)) {
                    RAST._IExpr _4700_recursiveGen;
                    DCOMP._IOwnership _4701_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4702_recIdents;
                    RAST._IExpr _out1474;
                    DCOMP._IOwnership _out1475;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1474, out _out1475, out _out1476);
                    _4700_recursiveGen = _out1474;
                    _4701_recOwned = _out1475;
                    _4702_recIdents = _out1476;
                    Std.Wrappers._IOption<RAST._IType> _4703_potentialRhsType;
                    _4703_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4699_b, _4698_range);
                    Std.Wrappers._IOption<RAST._IType> _source173 = _4703_potentialRhsType;
                    if (_source173.is_None) {
                      if (_4697_erase) {
                        r = _4700_recursiveGen;
                      } else {
                        RAST._IType _4704_rhsType;
                        RAST._IType _out1477;
                        _out1477 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                        _4704_rhsType = _out1477;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4704_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4700_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1478;
                      DCOMP._IOwnership _out1479;
                      DCOMP.COMP.FromOwnership(r, _4701_recOwned, expectedOwnership, out _out1478, out _out1479);
                      r = _out1478;
                      resultingOwnership = _out1479;
                    } else {
                      RAST._IType _4705___mcc_h1259 = _source173.dtor_value;
                      RAST._IType _4706_v = _4705___mcc_h1259;
                      r = RAST.Expr.create_ConversionNum(_4706_v, _4700_recursiveGen);
                      RAST._IExpr _out1480;
                      DCOMP._IOwnership _out1481;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1480, out _out1481);
                      r = _out1480;
                      resultingOwnership = _out1481;
                    }
                    readIdents = _4702_recIdents;
                  } else {
                    RAST._IExpr _out1482;
                    DCOMP._IOwnership _out1483;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4699_b), _4699_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1482, out _out1483, out _out1484);
                    r = _out1482;
                    resultingOwnership = _out1483;
                    readIdents = _out1484;
                  }
                }
              }
            } else if (_source171.is_Nullable) {
              DAST._IType _4707___mcc_h934 = _source171.dtor_Nullable_a0;
              {
                RAST._IExpr _4708_recursiveGen;
                DCOMP._IOwnership _4709_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4710_recIdents;
                RAST._IExpr _out1485;
                DCOMP._IOwnership _out1486;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1487;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1485, out _out1486, out _out1487);
                _4708_recursiveGen = _out1485;
                _4709_recOwned = _out1486;
                _4710_recIdents = _out1487;
                r = _4708_recursiveGen;
                if (object.Equals(_4709_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1488;
                DCOMP._IOwnership _out1489;
                DCOMP.COMP.FromOwnership(r, _4709_recOwned, expectedOwnership, out _out1488, out _out1489);
                r = _out1488;
                resultingOwnership = _out1489;
                readIdents = _4710_recIdents;
              }
            } else if (_source171.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4711___mcc_h936 = _source171.dtor_Tuple_a0;
              {
                RAST._IExpr _4712_recursiveGen;
                DCOMP._IOwnership _4713_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4714_recIdents;
                RAST._IExpr _out1490;
                DCOMP._IOwnership _out1491;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1490, out _out1491, out _out1492);
                _4712_recursiveGen = _out1490;
                _4713_recOwned = _out1491;
                _4714_recIdents = _out1492;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4712_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1493;
                DCOMP._IOwnership _out1494;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1493, out _out1494);
                r = _out1493;
                resultingOwnership = _out1494;
                readIdents = _4714_recIdents;
              }
            } else if (_source171.is_Array) {
              DAST._IType _4715___mcc_h938 = _source171.dtor_element;
              BigInteger _4716___mcc_h939 = _source171.dtor_dims;
              {
                RAST._IExpr _4717_recursiveGen;
                DCOMP._IOwnership _4718_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4719_recIdents;
                RAST._IExpr _out1495;
                DCOMP._IOwnership _out1496;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1495, out _out1496, out _out1497);
                _4717_recursiveGen = _out1495;
                _4718_recOwned = _out1496;
                _4719_recIdents = _out1497;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4717_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1498;
                DCOMP._IOwnership _out1499;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1498, out _out1499);
                r = _out1498;
                resultingOwnership = _out1499;
                readIdents = _4719_recIdents;
              }
            } else if (_source171.is_Seq) {
              DAST._IType _4720___mcc_h942 = _source171.dtor_element;
              {
                RAST._IExpr _4721_recursiveGen;
                DCOMP._IOwnership _4722_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4723_recIdents;
                RAST._IExpr _out1500;
                DCOMP._IOwnership _out1501;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1500, out _out1501, out _out1502);
                _4721_recursiveGen = _out1500;
                _4722_recOwned = _out1501;
                _4723_recIdents = _out1502;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4721_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1503;
                DCOMP._IOwnership _out1504;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1503, out _out1504);
                r = _out1503;
                resultingOwnership = _out1504;
                readIdents = _4723_recIdents;
              }
            } else if (_source171.is_Set) {
              DAST._IType _4724___mcc_h944 = _source171.dtor_element;
              {
                RAST._IExpr _4725_recursiveGen;
                DCOMP._IOwnership _4726_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4727_recIdents;
                RAST._IExpr _out1505;
                DCOMP._IOwnership _out1506;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1507;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1505, out _out1506, out _out1507);
                _4725_recursiveGen = _out1505;
                _4726_recOwned = _out1506;
                _4727_recIdents = _out1507;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4725_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1508;
                DCOMP._IOwnership _out1509;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1508, out _out1509);
                r = _out1508;
                resultingOwnership = _out1509;
                readIdents = _4727_recIdents;
              }
            } else if (_source171.is_Multiset) {
              DAST._IType _4728___mcc_h946 = _source171.dtor_element;
              {
                RAST._IExpr _4729_recursiveGen;
                DCOMP._IOwnership _4730_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4731_recIdents;
                RAST._IExpr _out1510;
                DCOMP._IOwnership _out1511;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1510, out _out1511, out _out1512);
                _4729_recursiveGen = _out1510;
                _4730_recOwned = _out1511;
                _4731_recIdents = _out1512;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4729_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1513;
                DCOMP._IOwnership _out1514;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1513, out _out1514);
                r = _out1513;
                resultingOwnership = _out1514;
                readIdents = _4731_recIdents;
              }
            } else if (_source171.is_Map) {
              DAST._IType _4732___mcc_h948 = _source171.dtor_key;
              DAST._IType _4733___mcc_h949 = _source171.dtor_value;
              {
                RAST._IExpr _4734_recursiveGen;
                DCOMP._IOwnership _4735_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4736_recIdents;
                RAST._IExpr _out1515;
                DCOMP._IOwnership _out1516;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1515, out _out1516, out _out1517);
                _4734_recursiveGen = _out1515;
                _4735_recOwned = _out1516;
                _4736_recIdents = _out1517;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4734_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1518;
                DCOMP._IOwnership _out1519;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1518, out _out1519);
                r = _out1518;
                resultingOwnership = _out1519;
                readIdents = _4736_recIdents;
              }
            } else if (_source171.is_SetBuilder) {
              DAST._IType _4737___mcc_h952 = _source171.dtor_element;
              {
                RAST._IExpr _4738_recursiveGen;
                DCOMP._IOwnership _4739_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4740_recIdents;
                RAST._IExpr _out1520;
                DCOMP._IOwnership _out1521;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1520, out _out1521, out _out1522);
                _4738_recursiveGen = _out1520;
                _4739_recOwned = _out1521;
                _4740_recIdents = _out1522;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4738_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1523;
                DCOMP._IOwnership _out1524;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1523, out _out1524);
                r = _out1523;
                resultingOwnership = _out1524;
                readIdents = _4740_recIdents;
              }
            } else if (_source171.is_MapBuilder) {
              DAST._IType _4741___mcc_h954 = _source171.dtor_key;
              DAST._IType _4742___mcc_h955 = _source171.dtor_value;
              {
                RAST._IExpr _4743_recursiveGen;
                DCOMP._IOwnership _4744_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4745_recIdents;
                RAST._IExpr _out1525;
                DCOMP._IOwnership _out1526;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1527;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1525, out _out1526, out _out1527);
                _4743_recursiveGen = _out1525;
                _4744_recOwned = _out1526;
                _4745_recIdents = _out1527;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4743_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1528;
                DCOMP._IOwnership _out1529;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1528, out _out1529);
                r = _out1528;
                resultingOwnership = _out1529;
                readIdents = _4745_recIdents;
              }
            } else if (_source171.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4746___mcc_h958 = _source171.dtor_args;
              DAST._IType _4747___mcc_h959 = _source171.dtor_result;
              {
                RAST._IExpr _4748_recursiveGen;
                DCOMP._IOwnership _4749_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4750_recIdents;
                RAST._IExpr _out1530;
                DCOMP._IOwnership _out1531;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1530, out _out1531, out _out1532);
                _4748_recursiveGen = _out1530;
                _4749_recOwned = _out1531;
                _4750_recIdents = _out1532;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4748_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1533;
                DCOMP._IOwnership _out1534;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1533, out _out1534);
                r = _out1533;
                resultingOwnership = _out1534;
                readIdents = _4750_recIdents;
              }
            } else if (_source171.is_Primitive) {
              DAST._IPrimitive _4751___mcc_h962 = _source171.dtor_Primitive_a0;
              DAST._IPrimitive _source174 = _4751___mcc_h962;
              if (_source174.is_Int) {
                {
                  RAST._IExpr _4752_recursiveGen;
                  DCOMP._IOwnership _4753___v79;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4754_recIdents;
                  RAST._IExpr _out1535;
                  DCOMP._IOwnership _out1536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1535, out _out1536, out _out1537);
                  _4752_recursiveGen = _out1535;
                  _4753___v79 = _out1536;
                  _4754_recIdents = _out1537;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_4752_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out1538;
                  DCOMP._IOwnership _out1539;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1538, out _out1539);
                  r = _out1538;
                  resultingOwnership = _out1539;
                  readIdents = _4754_recIdents;
                }
              } else if (_source174.is_Real) {
                {
                  RAST._IExpr _4755_recursiveGen;
                  DCOMP._IOwnership _4756_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4757_recIdents;
                  RAST._IExpr _out1540;
                  DCOMP._IOwnership _out1541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1542;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1540, out _out1541, out _out1542);
                  _4755_recursiveGen = _out1540;
                  _4756_recOwned = _out1541;
                  _4757_recIdents = _out1542;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4755_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1543;
                  DCOMP._IOwnership _out1544;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1543, out _out1544);
                  r = _out1543;
                  resultingOwnership = _out1544;
                  readIdents = _4757_recIdents;
                }
              } else if (_source174.is_String) {
                {
                  RAST._IExpr _4758_recursiveGen;
                  DCOMP._IOwnership _4759_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4760_recIdents;
                  RAST._IExpr _out1545;
                  DCOMP._IOwnership _out1546;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1547;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1545, out _out1546, out _out1547);
                  _4758_recursiveGen = _out1545;
                  _4759_recOwned = _out1546;
                  _4760_recIdents = _out1547;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4758_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1548;
                  DCOMP._IOwnership _out1549;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1548, out _out1549);
                  r = _out1548;
                  resultingOwnership = _out1549;
                  readIdents = _4760_recIdents;
                }
              } else if (_source174.is_Bool) {
                {
                  RAST._IExpr _4761_recursiveGen;
                  DCOMP._IOwnership _4762_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4763_recIdents;
                  RAST._IExpr _out1550;
                  DCOMP._IOwnership _out1551;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1550, out _out1551, out _out1552);
                  _4761_recursiveGen = _out1550;
                  _4762_recOwned = _out1551;
                  _4763_recIdents = _out1552;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4761_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1553;
                  DCOMP._IOwnership _out1554;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1553, out _out1554);
                  r = _out1553;
                  resultingOwnership = _out1554;
                  readIdents = _4763_recIdents;
                }
              } else {
                {
                  RAST._IExpr _4764_recursiveGen;
                  DCOMP._IOwnership _4765_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4766_recIdents;
                  RAST._IExpr _out1555;
                  DCOMP._IOwnership _out1556;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1555, out _out1556, out _out1557);
                  _4764_recursiveGen = _out1555;
                  _4765_recOwned = _out1556;
                  _4766_recIdents = _out1557;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4764_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1558;
                  DCOMP._IOwnership _out1559;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1558, out _out1559);
                  r = _out1558;
                  resultingOwnership = _out1559;
                  readIdents = _4766_recIdents;
                }
              }
            } else if (_source171.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4767___mcc_h964 = _source171.dtor_Passthrough_a0;
              {
                RAST._IExpr _4768_recursiveGen;
                DCOMP._IOwnership _4769_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4770_recIdents;
                RAST._IExpr _out1560;
                DCOMP._IOwnership _out1561;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1562;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1560, out _out1561, out _out1562);
                _4768_recursiveGen = _out1560;
                _4769_recOwned = _out1561;
                _4770_recIdents = _out1562;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4768_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1563;
                DCOMP._IOwnership _out1564;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1563, out _out1564);
                r = _out1563;
                resultingOwnership = _out1564;
                readIdents = _4770_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4771___mcc_h966 = _source171.dtor_TypeArg_a0;
              {
                RAST._IExpr _4772_recursiveGen;
                DCOMP._IOwnership _4773_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4774_recIdents;
                RAST._IExpr _out1565;
                DCOMP._IOwnership _out1566;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1567;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1565, out _out1566, out _out1567);
                _4772_recursiveGen = _out1565;
                _4773_recOwned = _out1566;
                _4774_recIdents = _out1567;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4772_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1568;
                DCOMP._IOwnership _out1569;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1568, out _out1569);
                r = _out1568;
                resultingOwnership = _out1569;
                readIdents = _4774_recIdents;
              }
            }
          } else if (_source166.is_String) {
            DAST._IType _source175 = _3430___mcc_h1;
            if (_source175.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4775___mcc_h968 = _source175.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4776___mcc_h969 = _source175.dtor_typeArgs;
              DAST._IResolvedType _4777___mcc_h970 = _source175.dtor_resolved;
              DAST._IResolvedType _source176 = _4777___mcc_h970;
              if (_source176.is_Datatype) {
                DAST._IDatatypeType _4778___mcc_h974 = _source176.dtor_datatypeType;
                {
                  RAST._IExpr _4779_recursiveGen;
                  DCOMP._IOwnership _4780_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4781_recIdents;
                  RAST._IExpr _out1570;
                  DCOMP._IOwnership _out1571;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1570, out _out1571, out _out1572);
                  _4779_recursiveGen = _out1570;
                  _4780_recOwned = _out1571;
                  _4781_recIdents = _out1572;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4779_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1573;
                  DCOMP._IOwnership _out1574;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1573, out _out1574);
                  r = _out1573;
                  resultingOwnership = _out1574;
                  readIdents = _4781_recIdents;
                }
              } else if (_source176.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4782___mcc_h976 = _source176.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4783___mcc_h977 = _source176.dtor_attributes;
                {
                  RAST._IExpr _4784_recursiveGen;
                  DCOMP._IOwnership _4785_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4786_recIdents;
                  RAST._IExpr _out1575;
                  DCOMP._IOwnership _out1576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1575, out _out1576, out _out1577);
                  _4784_recursiveGen = _out1575;
                  _4785_recOwned = _out1576;
                  _4786_recIdents = _out1577;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4784_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1578;
                  DCOMP._IOwnership _out1579;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1578, out _out1579);
                  r = _out1578;
                  resultingOwnership = _out1579;
                  readIdents = _4786_recIdents;
                }
              } else {
                DAST._IType _4787___mcc_h980 = _source176.dtor_baseType;
                DAST._INewtypeRange _4788___mcc_h981 = _source176.dtor_range;
                bool _4789___mcc_h982 = _source176.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4790___mcc_h983 = _source176.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4791_attributes = _4790___mcc_h983;
                bool _4792_erase = _4789___mcc_h982;
                DAST._INewtypeRange _4793_range = _4788___mcc_h981;
                DAST._IType _4794_b = _4787___mcc_h980;
                {
                  if (object.Equals(_3424_fromTpe, _4794_b)) {
                    RAST._IExpr _4795_recursiveGen;
                    DCOMP._IOwnership _4796_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4797_recIdents;
                    RAST._IExpr _out1580;
                    DCOMP._IOwnership _out1581;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1582;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1580, out _out1581, out _out1582);
                    _4795_recursiveGen = _out1580;
                    _4796_recOwned = _out1581;
                    _4797_recIdents = _out1582;
                    Std.Wrappers._IOption<RAST._IType> _4798_potentialRhsType;
                    _4798_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4794_b, _4793_range);
                    Std.Wrappers._IOption<RAST._IType> _source177 = _4798_potentialRhsType;
                    if (_source177.is_None) {
                      if (_4792_erase) {
                        r = _4795_recursiveGen;
                      } else {
                        RAST._IType _4799_rhsType;
                        RAST._IType _out1583;
                        _out1583 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                        _4799_rhsType = _out1583;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4799_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4795_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1584;
                      DCOMP._IOwnership _out1585;
                      DCOMP.COMP.FromOwnership(r, _4796_recOwned, expectedOwnership, out _out1584, out _out1585);
                      r = _out1584;
                      resultingOwnership = _out1585;
                    } else {
                      RAST._IType _4800___mcc_h1260 = _source177.dtor_value;
                      RAST._IType _4801_v = _4800___mcc_h1260;
                      r = RAST.Expr.create_ConversionNum(_4801_v, _4795_recursiveGen);
                      RAST._IExpr _out1586;
                      DCOMP._IOwnership _out1587;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1586, out _out1587);
                      r = _out1586;
                      resultingOwnership = _out1587;
                    }
                    readIdents = _4797_recIdents;
                  } else {
                    RAST._IExpr _out1588;
                    DCOMP._IOwnership _out1589;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4794_b), _4794_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1588, out _out1589, out _out1590);
                    r = _out1588;
                    resultingOwnership = _out1589;
                    readIdents = _out1590;
                  }
                }
              }
            } else if (_source175.is_Nullable) {
              DAST._IType _4802___mcc_h988 = _source175.dtor_Nullable_a0;
              {
                RAST._IExpr _4803_recursiveGen;
                DCOMP._IOwnership _4804_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4805_recIdents;
                RAST._IExpr _out1591;
                DCOMP._IOwnership _out1592;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1591, out _out1592, out _out1593);
                _4803_recursiveGen = _out1591;
                _4804_recOwned = _out1592;
                _4805_recIdents = _out1593;
                r = _4803_recursiveGen;
                if (object.Equals(_4804_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1594;
                DCOMP._IOwnership _out1595;
                DCOMP.COMP.FromOwnership(r, _4804_recOwned, expectedOwnership, out _out1594, out _out1595);
                r = _out1594;
                resultingOwnership = _out1595;
                readIdents = _4805_recIdents;
              }
            } else if (_source175.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4806___mcc_h990 = _source175.dtor_Tuple_a0;
              {
                RAST._IExpr _4807_recursiveGen;
                DCOMP._IOwnership _4808_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4809_recIdents;
                RAST._IExpr _out1596;
                DCOMP._IOwnership _out1597;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1598;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1596, out _out1597, out _out1598);
                _4807_recursiveGen = _out1596;
                _4808_recOwned = _out1597;
                _4809_recIdents = _out1598;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4807_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1599;
                DCOMP._IOwnership _out1600;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1599, out _out1600);
                r = _out1599;
                resultingOwnership = _out1600;
                readIdents = _4809_recIdents;
              }
            } else if (_source175.is_Array) {
              DAST._IType _4810___mcc_h992 = _source175.dtor_element;
              BigInteger _4811___mcc_h993 = _source175.dtor_dims;
              {
                RAST._IExpr _4812_recursiveGen;
                DCOMP._IOwnership _4813_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4814_recIdents;
                RAST._IExpr _out1601;
                DCOMP._IOwnership _out1602;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1603;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1601, out _out1602, out _out1603);
                _4812_recursiveGen = _out1601;
                _4813_recOwned = _out1602;
                _4814_recIdents = _out1603;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4812_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1604;
                DCOMP._IOwnership _out1605;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1604, out _out1605);
                r = _out1604;
                resultingOwnership = _out1605;
                readIdents = _4814_recIdents;
              }
            } else if (_source175.is_Seq) {
              DAST._IType _4815___mcc_h996 = _source175.dtor_element;
              {
                RAST._IExpr _4816_recursiveGen;
                DCOMP._IOwnership _4817_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4818_recIdents;
                RAST._IExpr _out1606;
                DCOMP._IOwnership _out1607;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1606, out _out1607, out _out1608);
                _4816_recursiveGen = _out1606;
                _4817_recOwned = _out1607;
                _4818_recIdents = _out1608;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4816_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1609;
                DCOMP._IOwnership _out1610;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1609, out _out1610);
                r = _out1609;
                resultingOwnership = _out1610;
                readIdents = _4818_recIdents;
              }
            } else if (_source175.is_Set) {
              DAST._IType _4819___mcc_h998 = _source175.dtor_element;
              {
                RAST._IExpr _4820_recursiveGen;
                DCOMP._IOwnership _4821_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4822_recIdents;
                RAST._IExpr _out1611;
                DCOMP._IOwnership _out1612;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1611, out _out1612, out _out1613);
                _4820_recursiveGen = _out1611;
                _4821_recOwned = _out1612;
                _4822_recIdents = _out1613;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4820_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1614;
                DCOMP._IOwnership _out1615;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1614, out _out1615);
                r = _out1614;
                resultingOwnership = _out1615;
                readIdents = _4822_recIdents;
              }
            } else if (_source175.is_Multiset) {
              DAST._IType _4823___mcc_h1000 = _source175.dtor_element;
              {
                RAST._IExpr _4824_recursiveGen;
                DCOMP._IOwnership _4825_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4826_recIdents;
                RAST._IExpr _out1616;
                DCOMP._IOwnership _out1617;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1616, out _out1617, out _out1618);
                _4824_recursiveGen = _out1616;
                _4825_recOwned = _out1617;
                _4826_recIdents = _out1618;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4824_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1619;
                DCOMP._IOwnership _out1620;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1619, out _out1620);
                r = _out1619;
                resultingOwnership = _out1620;
                readIdents = _4826_recIdents;
              }
            } else if (_source175.is_Map) {
              DAST._IType _4827___mcc_h1002 = _source175.dtor_key;
              DAST._IType _4828___mcc_h1003 = _source175.dtor_value;
              {
                RAST._IExpr _4829_recursiveGen;
                DCOMP._IOwnership _4830_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4831_recIdents;
                RAST._IExpr _out1621;
                DCOMP._IOwnership _out1622;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1623;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1621, out _out1622, out _out1623);
                _4829_recursiveGen = _out1621;
                _4830_recOwned = _out1622;
                _4831_recIdents = _out1623;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4829_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1624;
                DCOMP._IOwnership _out1625;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1624, out _out1625);
                r = _out1624;
                resultingOwnership = _out1625;
                readIdents = _4831_recIdents;
              }
            } else if (_source175.is_SetBuilder) {
              DAST._IType _4832___mcc_h1006 = _source175.dtor_element;
              {
                RAST._IExpr _4833_recursiveGen;
                DCOMP._IOwnership _4834_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4835_recIdents;
                RAST._IExpr _out1626;
                DCOMP._IOwnership _out1627;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1626, out _out1627, out _out1628);
                _4833_recursiveGen = _out1626;
                _4834_recOwned = _out1627;
                _4835_recIdents = _out1628;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4833_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1629;
                DCOMP._IOwnership _out1630;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1629, out _out1630);
                r = _out1629;
                resultingOwnership = _out1630;
                readIdents = _4835_recIdents;
              }
            } else if (_source175.is_MapBuilder) {
              DAST._IType _4836___mcc_h1008 = _source175.dtor_key;
              DAST._IType _4837___mcc_h1009 = _source175.dtor_value;
              {
                RAST._IExpr _4838_recursiveGen;
                DCOMP._IOwnership _4839_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4840_recIdents;
                RAST._IExpr _out1631;
                DCOMP._IOwnership _out1632;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1631, out _out1632, out _out1633);
                _4838_recursiveGen = _out1631;
                _4839_recOwned = _out1632;
                _4840_recIdents = _out1633;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4838_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1634;
                DCOMP._IOwnership _out1635;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1634, out _out1635);
                r = _out1634;
                resultingOwnership = _out1635;
                readIdents = _4840_recIdents;
              }
            } else if (_source175.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4841___mcc_h1012 = _source175.dtor_args;
              DAST._IType _4842___mcc_h1013 = _source175.dtor_result;
              {
                RAST._IExpr _4843_recursiveGen;
                DCOMP._IOwnership _4844_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4845_recIdents;
                RAST._IExpr _out1636;
                DCOMP._IOwnership _out1637;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1638;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1636, out _out1637, out _out1638);
                _4843_recursiveGen = _out1636;
                _4844_recOwned = _out1637;
                _4845_recIdents = _out1638;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4843_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1639;
                DCOMP._IOwnership _out1640;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1639, out _out1640);
                r = _out1639;
                resultingOwnership = _out1640;
                readIdents = _4845_recIdents;
              }
            } else if (_source175.is_Primitive) {
              DAST._IPrimitive _4846___mcc_h1016 = _source175.dtor_Primitive_a0;
              {
                RAST._IExpr _4847_recursiveGen;
                DCOMP._IOwnership _4848_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4849_recIdents;
                RAST._IExpr _out1641;
                DCOMP._IOwnership _out1642;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1643;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1641, out _out1642, out _out1643);
                _4847_recursiveGen = _out1641;
                _4848_recOwned = _out1642;
                _4849_recIdents = _out1643;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4847_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1644;
                DCOMP._IOwnership _out1645;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1644, out _out1645);
                r = _out1644;
                resultingOwnership = _out1645;
                readIdents = _4849_recIdents;
              }
            } else if (_source175.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4850___mcc_h1018 = _source175.dtor_Passthrough_a0;
              {
                RAST._IExpr _4851_recursiveGen;
                DCOMP._IOwnership _4852_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4853_recIdents;
                RAST._IExpr _out1646;
                DCOMP._IOwnership _out1647;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1648;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1646, out _out1647, out _out1648);
                _4851_recursiveGen = _out1646;
                _4852_recOwned = _out1647;
                _4853_recIdents = _out1648;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4851_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1649;
                DCOMP._IOwnership _out1650;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1649, out _out1650);
                r = _out1649;
                resultingOwnership = _out1650;
                readIdents = _4853_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4854___mcc_h1020 = _source175.dtor_TypeArg_a0;
              {
                RAST._IExpr _4855_recursiveGen;
                DCOMP._IOwnership _4856_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4857_recIdents;
                RAST._IExpr _out1651;
                DCOMP._IOwnership _out1652;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1651, out _out1652, out _out1653);
                _4855_recursiveGen = _out1651;
                _4856_recOwned = _out1652;
                _4857_recIdents = _out1653;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4855_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1654;
                DCOMP._IOwnership _out1655;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1654, out _out1655);
                r = _out1654;
                resultingOwnership = _out1655;
                readIdents = _4857_recIdents;
              }
            }
          } else if (_source166.is_Bool) {
            DAST._IType _source178 = _3430___mcc_h1;
            if (_source178.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4858___mcc_h1022 = _source178.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4859___mcc_h1023 = _source178.dtor_typeArgs;
              DAST._IResolvedType _4860___mcc_h1024 = _source178.dtor_resolved;
              DAST._IResolvedType _source179 = _4860___mcc_h1024;
              if (_source179.is_Datatype) {
                DAST._IDatatypeType _4861___mcc_h1028 = _source179.dtor_datatypeType;
                {
                  RAST._IExpr _4862_recursiveGen;
                  DCOMP._IOwnership _4863_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4864_recIdents;
                  RAST._IExpr _out1656;
                  DCOMP._IOwnership _out1657;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1658;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1656, out _out1657, out _out1658);
                  _4862_recursiveGen = _out1656;
                  _4863_recOwned = _out1657;
                  _4864_recIdents = _out1658;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4862_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1659;
                  DCOMP._IOwnership _out1660;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1659, out _out1660);
                  r = _out1659;
                  resultingOwnership = _out1660;
                  readIdents = _4864_recIdents;
                }
              } else if (_source179.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4865___mcc_h1030 = _source179.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4866___mcc_h1031 = _source179.dtor_attributes;
                {
                  RAST._IExpr _4867_recursiveGen;
                  DCOMP._IOwnership _4868_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4869_recIdents;
                  RAST._IExpr _out1661;
                  DCOMP._IOwnership _out1662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1663;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1661, out _out1662, out _out1663);
                  _4867_recursiveGen = _out1661;
                  _4868_recOwned = _out1662;
                  _4869_recIdents = _out1663;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4867_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1664;
                  DCOMP._IOwnership _out1665;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1664, out _out1665);
                  r = _out1664;
                  resultingOwnership = _out1665;
                  readIdents = _4869_recIdents;
                }
              } else {
                DAST._IType _4870___mcc_h1034 = _source179.dtor_baseType;
                DAST._INewtypeRange _4871___mcc_h1035 = _source179.dtor_range;
                bool _4872___mcc_h1036 = _source179.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4873___mcc_h1037 = _source179.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4874_attributes = _4873___mcc_h1037;
                bool _4875_erase = _4872___mcc_h1036;
                DAST._INewtypeRange _4876_range = _4871___mcc_h1035;
                DAST._IType _4877_b = _4870___mcc_h1034;
                {
                  if (object.Equals(_3424_fromTpe, _4877_b)) {
                    RAST._IExpr _4878_recursiveGen;
                    DCOMP._IOwnership _4879_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4880_recIdents;
                    RAST._IExpr _out1666;
                    DCOMP._IOwnership _out1667;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1666, out _out1667, out _out1668);
                    _4878_recursiveGen = _out1666;
                    _4879_recOwned = _out1667;
                    _4880_recIdents = _out1668;
                    Std.Wrappers._IOption<RAST._IType> _4881_potentialRhsType;
                    _4881_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4877_b, _4876_range);
                    Std.Wrappers._IOption<RAST._IType> _source180 = _4881_potentialRhsType;
                    if (_source180.is_None) {
                      if (_4875_erase) {
                        r = _4878_recursiveGen;
                      } else {
                        RAST._IType _4882_rhsType;
                        RAST._IType _out1669;
                        _out1669 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                        _4882_rhsType = _out1669;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4882_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4878_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1670;
                      DCOMP._IOwnership _out1671;
                      DCOMP.COMP.FromOwnership(r, _4879_recOwned, expectedOwnership, out _out1670, out _out1671);
                      r = _out1670;
                      resultingOwnership = _out1671;
                    } else {
                      RAST._IType _4883___mcc_h1261 = _source180.dtor_value;
                      RAST._IType _4884_v = _4883___mcc_h1261;
                      r = RAST.Expr.create_ConversionNum(_4884_v, _4878_recursiveGen);
                      RAST._IExpr _out1672;
                      DCOMP._IOwnership _out1673;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1672, out _out1673);
                      r = _out1672;
                      resultingOwnership = _out1673;
                    }
                    readIdents = _4880_recIdents;
                  } else {
                    RAST._IExpr _out1674;
                    DCOMP._IOwnership _out1675;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4877_b), _4877_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1674, out _out1675, out _out1676);
                    r = _out1674;
                    resultingOwnership = _out1675;
                    readIdents = _out1676;
                  }
                }
              }
            } else if (_source178.is_Nullable) {
              DAST._IType _4885___mcc_h1042 = _source178.dtor_Nullable_a0;
              {
                RAST._IExpr _4886_recursiveGen;
                DCOMP._IOwnership _4887_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4888_recIdents;
                RAST._IExpr _out1677;
                DCOMP._IOwnership _out1678;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1677, out _out1678, out _out1679);
                _4886_recursiveGen = _out1677;
                _4887_recOwned = _out1678;
                _4888_recIdents = _out1679;
                r = _4886_recursiveGen;
                if (object.Equals(_4887_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1680;
                DCOMP._IOwnership _out1681;
                DCOMP.COMP.FromOwnership(r, _4887_recOwned, expectedOwnership, out _out1680, out _out1681);
                r = _out1680;
                resultingOwnership = _out1681;
                readIdents = _4888_recIdents;
              }
            } else if (_source178.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4889___mcc_h1044 = _source178.dtor_Tuple_a0;
              {
                RAST._IExpr _4890_recursiveGen;
                DCOMP._IOwnership _4891_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4892_recIdents;
                RAST._IExpr _out1682;
                DCOMP._IOwnership _out1683;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1682, out _out1683, out _out1684);
                _4890_recursiveGen = _out1682;
                _4891_recOwned = _out1683;
                _4892_recIdents = _out1684;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4890_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1685;
                DCOMP._IOwnership _out1686;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1685, out _out1686);
                r = _out1685;
                resultingOwnership = _out1686;
                readIdents = _4892_recIdents;
              }
            } else if (_source178.is_Array) {
              DAST._IType _4893___mcc_h1046 = _source178.dtor_element;
              BigInteger _4894___mcc_h1047 = _source178.dtor_dims;
              {
                RAST._IExpr _4895_recursiveGen;
                DCOMP._IOwnership _4896_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4897_recIdents;
                RAST._IExpr _out1687;
                DCOMP._IOwnership _out1688;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1689;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1687, out _out1688, out _out1689);
                _4895_recursiveGen = _out1687;
                _4896_recOwned = _out1688;
                _4897_recIdents = _out1689;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4895_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1690;
                DCOMP._IOwnership _out1691;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1690, out _out1691);
                r = _out1690;
                resultingOwnership = _out1691;
                readIdents = _4897_recIdents;
              }
            } else if (_source178.is_Seq) {
              DAST._IType _4898___mcc_h1050 = _source178.dtor_element;
              {
                RAST._IExpr _4899_recursiveGen;
                DCOMP._IOwnership _4900_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4901_recIdents;
                RAST._IExpr _out1692;
                DCOMP._IOwnership _out1693;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1694;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1692, out _out1693, out _out1694);
                _4899_recursiveGen = _out1692;
                _4900_recOwned = _out1693;
                _4901_recIdents = _out1694;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4899_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1695;
                DCOMP._IOwnership _out1696;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1695, out _out1696);
                r = _out1695;
                resultingOwnership = _out1696;
                readIdents = _4901_recIdents;
              }
            } else if (_source178.is_Set) {
              DAST._IType _4902___mcc_h1052 = _source178.dtor_element;
              {
                RAST._IExpr _4903_recursiveGen;
                DCOMP._IOwnership _4904_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4905_recIdents;
                RAST._IExpr _out1697;
                DCOMP._IOwnership _out1698;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1699;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1697, out _out1698, out _out1699);
                _4903_recursiveGen = _out1697;
                _4904_recOwned = _out1698;
                _4905_recIdents = _out1699;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4903_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1700;
                DCOMP._IOwnership _out1701;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1700, out _out1701);
                r = _out1700;
                resultingOwnership = _out1701;
                readIdents = _4905_recIdents;
              }
            } else if (_source178.is_Multiset) {
              DAST._IType _4906___mcc_h1054 = _source178.dtor_element;
              {
                RAST._IExpr _4907_recursiveGen;
                DCOMP._IOwnership _4908_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4909_recIdents;
                RAST._IExpr _out1702;
                DCOMP._IOwnership _out1703;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1704;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1702, out _out1703, out _out1704);
                _4907_recursiveGen = _out1702;
                _4908_recOwned = _out1703;
                _4909_recIdents = _out1704;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4907_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1705;
                DCOMP._IOwnership _out1706;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1705, out _out1706);
                r = _out1705;
                resultingOwnership = _out1706;
                readIdents = _4909_recIdents;
              }
            } else if (_source178.is_Map) {
              DAST._IType _4910___mcc_h1056 = _source178.dtor_key;
              DAST._IType _4911___mcc_h1057 = _source178.dtor_value;
              {
                RAST._IExpr _4912_recursiveGen;
                DCOMP._IOwnership _4913_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4914_recIdents;
                RAST._IExpr _out1707;
                DCOMP._IOwnership _out1708;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1707, out _out1708, out _out1709);
                _4912_recursiveGen = _out1707;
                _4913_recOwned = _out1708;
                _4914_recIdents = _out1709;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4912_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1710;
                DCOMP._IOwnership _out1711;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1710, out _out1711);
                r = _out1710;
                resultingOwnership = _out1711;
                readIdents = _4914_recIdents;
              }
            } else if (_source178.is_SetBuilder) {
              DAST._IType _4915___mcc_h1060 = _source178.dtor_element;
              {
                RAST._IExpr _4916_recursiveGen;
                DCOMP._IOwnership _4917_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4918_recIdents;
                RAST._IExpr _out1712;
                DCOMP._IOwnership _out1713;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1714;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1712, out _out1713, out _out1714);
                _4916_recursiveGen = _out1712;
                _4917_recOwned = _out1713;
                _4918_recIdents = _out1714;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4916_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1715;
                DCOMP._IOwnership _out1716;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1715, out _out1716);
                r = _out1715;
                resultingOwnership = _out1716;
                readIdents = _4918_recIdents;
              }
            } else if (_source178.is_MapBuilder) {
              DAST._IType _4919___mcc_h1062 = _source178.dtor_key;
              DAST._IType _4920___mcc_h1063 = _source178.dtor_value;
              {
                RAST._IExpr _4921_recursiveGen;
                DCOMP._IOwnership _4922_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4923_recIdents;
                RAST._IExpr _out1717;
                DCOMP._IOwnership _out1718;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1719;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1717, out _out1718, out _out1719);
                _4921_recursiveGen = _out1717;
                _4922_recOwned = _out1718;
                _4923_recIdents = _out1719;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4921_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1720;
                DCOMP._IOwnership _out1721;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1720, out _out1721);
                r = _out1720;
                resultingOwnership = _out1721;
                readIdents = _4923_recIdents;
              }
            } else if (_source178.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4924___mcc_h1066 = _source178.dtor_args;
              DAST._IType _4925___mcc_h1067 = _source178.dtor_result;
              {
                RAST._IExpr _4926_recursiveGen;
                DCOMP._IOwnership _4927_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4928_recIdents;
                RAST._IExpr _out1722;
                DCOMP._IOwnership _out1723;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1724;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1722, out _out1723, out _out1724);
                _4926_recursiveGen = _out1722;
                _4927_recOwned = _out1723;
                _4928_recIdents = _out1724;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4926_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1725;
                DCOMP._IOwnership _out1726;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1725, out _out1726);
                r = _out1725;
                resultingOwnership = _out1726;
                readIdents = _4928_recIdents;
              }
            } else if (_source178.is_Primitive) {
              DAST._IPrimitive _4929___mcc_h1070 = _source178.dtor_Primitive_a0;
              {
                RAST._IExpr _4930_recursiveGen;
                DCOMP._IOwnership _4931_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4932_recIdents;
                RAST._IExpr _out1727;
                DCOMP._IOwnership _out1728;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1729;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1727, out _out1728, out _out1729);
                _4930_recursiveGen = _out1727;
                _4931_recOwned = _out1728;
                _4932_recIdents = _out1729;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4930_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1730;
                DCOMP._IOwnership _out1731;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1730, out _out1731);
                r = _out1730;
                resultingOwnership = _out1731;
                readIdents = _4932_recIdents;
              }
            } else if (_source178.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4933___mcc_h1072 = _source178.dtor_Passthrough_a0;
              {
                RAST._IExpr _4934_recursiveGen;
                DCOMP._IOwnership _4935_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4936_recIdents;
                RAST._IExpr _out1732;
                DCOMP._IOwnership _out1733;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1734;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1732, out _out1733, out _out1734);
                _4934_recursiveGen = _out1732;
                _4935_recOwned = _out1733;
                _4936_recIdents = _out1734;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4934_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1735;
                DCOMP._IOwnership _out1736;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1735, out _out1736);
                r = _out1735;
                resultingOwnership = _out1736;
                readIdents = _4936_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4937___mcc_h1074 = _source178.dtor_TypeArg_a0;
              {
                RAST._IExpr _4938_recursiveGen;
                DCOMP._IOwnership _4939_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4940_recIdents;
                RAST._IExpr _out1737;
                DCOMP._IOwnership _out1738;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1737, out _out1738, out _out1739);
                _4938_recursiveGen = _out1737;
                _4939_recOwned = _out1738;
                _4940_recIdents = _out1739;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4938_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1740;
                DCOMP._IOwnership _out1741;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1740, out _out1741);
                r = _out1740;
                resultingOwnership = _out1741;
                readIdents = _4940_recIdents;
              }
            }
          } else {
            DAST._IType _source181 = _3430___mcc_h1;
            if (_source181.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4941___mcc_h1076 = _source181.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4942___mcc_h1077 = _source181.dtor_typeArgs;
              DAST._IResolvedType _4943___mcc_h1078 = _source181.dtor_resolved;
              DAST._IResolvedType _source182 = _4943___mcc_h1078;
              if (_source182.is_Datatype) {
                DAST._IDatatypeType _4944___mcc_h1082 = _source182.dtor_datatypeType;
                {
                  RAST._IExpr _4945_recursiveGen;
                  DCOMP._IOwnership _4946_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4947_recIdents;
                  RAST._IExpr _out1742;
                  DCOMP._IOwnership _out1743;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1744;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1742, out _out1743, out _out1744);
                  _4945_recursiveGen = _out1742;
                  _4946_recOwned = _out1743;
                  _4947_recIdents = _out1744;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4945_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1745;
                  DCOMP._IOwnership _out1746;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1745, out _out1746);
                  r = _out1745;
                  resultingOwnership = _out1746;
                  readIdents = _4947_recIdents;
                }
              } else if (_source182.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4948___mcc_h1084 = _source182.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4949___mcc_h1085 = _source182.dtor_attributes;
                {
                  RAST._IExpr _4950_recursiveGen;
                  DCOMP._IOwnership _4951_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4952_recIdents;
                  RAST._IExpr _out1747;
                  DCOMP._IOwnership _out1748;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1747, out _out1748, out _out1749);
                  _4950_recursiveGen = _out1747;
                  _4951_recOwned = _out1748;
                  _4952_recIdents = _out1749;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4950_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1750;
                  DCOMP._IOwnership _out1751;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1750, out _out1751);
                  r = _out1750;
                  resultingOwnership = _out1751;
                  readIdents = _4952_recIdents;
                }
              } else {
                DAST._IType _4953___mcc_h1088 = _source182.dtor_baseType;
                DAST._INewtypeRange _4954___mcc_h1089 = _source182.dtor_range;
                bool _4955___mcc_h1090 = _source182.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4956___mcc_h1091 = _source182.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4957_attributes = _4956___mcc_h1091;
                bool _4958_erase = _4955___mcc_h1090;
                DAST._INewtypeRange _4959_range = _4954___mcc_h1089;
                DAST._IType _4960_b = _4953___mcc_h1088;
                {
                  if (object.Equals(_3424_fromTpe, _4960_b)) {
                    RAST._IExpr _4961_recursiveGen;
                    DCOMP._IOwnership _4962_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4963_recIdents;
                    RAST._IExpr _out1752;
                    DCOMP._IOwnership _out1753;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1754;
                    DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1752, out _out1753, out _out1754);
                    _4961_recursiveGen = _out1752;
                    _4962_recOwned = _out1753;
                    _4963_recIdents = _out1754;
                    Std.Wrappers._IOption<RAST._IType> _4964_potentialRhsType;
                    _4964_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4960_b, _4959_range);
                    Std.Wrappers._IOption<RAST._IType> _source183 = _4964_potentialRhsType;
                    if (_source183.is_None) {
                      if (_4958_erase) {
                        r = _4961_recursiveGen;
                      } else {
                        RAST._IType _4965_rhsType;
                        RAST._IType _out1755;
                        _out1755 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                        _4965_rhsType = _out1755;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4965_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4961_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1756;
                      DCOMP._IOwnership _out1757;
                      DCOMP.COMP.FromOwnership(r, _4962_recOwned, expectedOwnership, out _out1756, out _out1757);
                      r = _out1756;
                      resultingOwnership = _out1757;
                    } else {
                      RAST._IType _4966___mcc_h1262 = _source183.dtor_value;
                      RAST._IType _4967_v = _4966___mcc_h1262;
                      r = RAST.Expr.create_ConversionNum(_4967_v, _4961_recursiveGen);
                      RAST._IExpr _out1758;
                      DCOMP._IOwnership _out1759;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1758, out _out1759);
                      r = _out1758;
                      resultingOwnership = _out1759;
                    }
                    readIdents = _4963_recIdents;
                  } else {
                    RAST._IExpr _out1760;
                    DCOMP._IOwnership _out1761;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1762;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _4960_b), _4960_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1760, out _out1761, out _out1762);
                    r = _out1760;
                    resultingOwnership = _out1761;
                    readIdents = _out1762;
                  }
                }
              }
            } else if (_source181.is_Nullable) {
              DAST._IType _4968___mcc_h1096 = _source181.dtor_Nullable_a0;
              {
                RAST._IExpr _4969_recursiveGen;
                DCOMP._IOwnership _4970_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4971_recIdents;
                RAST._IExpr _out1763;
                DCOMP._IOwnership _out1764;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1765;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1763, out _out1764, out _out1765);
                _4969_recursiveGen = _out1763;
                _4970_recOwned = _out1764;
                _4971_recIdents = _out1765;
                r = _4969_recursiveGen;
                if (object.Equals(_4970_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out1766;
                DCOMP._IOwnership _out1767;
                DCOMP.COMP.FromOwnership(r, _4970_recOwned, expectedOwnership, out _out1766, out _out1767);
                r = _out1766;
                resultingOwnership = _out1767;
                readIdents = _4971_recIdents;
              }
            } else if (_source181.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4972___mcc_h1098 = _source181.dtor_Tuple_a0;
              {
                RAST._IExpr _4973_recursiveGen;
                DCOMP._IOwnership _4974_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4975_recIdents;
                RAST._IExpr _out1768;
                DCOMP._IOwnership _out1769;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1770;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1768, out _out1769, out _out1770);
                _4973_recursiveGen = _out1768;
                _4974_recOwned = _out1769;
                _4975_recIdents = _out1770;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4973_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1771;
                DCOMP._IOwnership _out1772;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1771, out _out1772);
                r = _out1771;
                resultingOwnership = _out1772;
                readIdents = _4975_recIdents;
              }
            } else if (_source181.is_Array) {
              DAST._IType _4976___mcc_h1100 = _source181.dtor_element;
              BigInteger _4977___mcc_h1101 = _source181.dtor_dims;
              {
                RAST._IExpr _4978_recursiveGen;
                DCOMP._IOwnership _4979_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4980_recIdents;
                RAST._IExpr _out1773;
                DCOMP._IOwnership _out1774;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1775;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1773, out _out1774, out _out1775);
                _4978_recursiveGen = _out1773;
                _4979_recOwned = _out1774;
                _4980_recIdents = _out1775;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4978_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1776;
                DCOMP._IOwnership _out1777;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1776, out _out1777);
                r = _out1776;
                resultingOwnership = _out1777;
                readIdents = _4980_recIdents;
              }
            } else if (_source181.is_Seq) {
              DAST._IType _4981___mcc_h1104 = _source181.dtor_element;
              {
                RAST._IExpr _4982_recursiveGen;
                DCOMP._IOwnership _4983_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4984_recIdents;
                RAST._IExpr _out1778;
                DCOMP._IOwnership _out1779;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1780;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1778, out _out1779, out _out1780);
                _4982_recursiveGen = _out1778;
                _4983_recOwned = _out1779;
                _4984_recIdents = _out1780;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4982_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1781;
                DCOMP._IOwnership _out1782;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1781, out _out1782);
                r = _out1781;
                resultingOwnership = _out1782;
                readIdents = _4984_recIdents;
              }
            } else if (_source181.is_Set) {
              DAST._IType _4985___mcc_h1106 = _source181.dtor_element;
              {
                RAST._IExpr _4986_recursiveGen;
                DCOMP._IOwnership _4987_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4988_recIdents;
                RAST._IExpr _out1783;
                DCOMP._IOwnership _out1784;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1785;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1783, out _out1784, out _out1785);
                _4986_recursiveGen = _out1783;
                _4987_recOwned = _out1784;
                _4988_recIdents = _out1785;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4986_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1786;
                DCOMP._IOwnership _out1787;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1786, out _out1787);
                r = _out1786;
                resultingOwnership = _out1787;
                readIdents = _4988_recIdents;
              }
            } else if (_source181.is_Multiset) {
              DAST._IType _4989___mcc_h1108 = _source181.dtor_element;
              {
                RAST._IExpr _4990_recursiveGen;
                DCOMP._IOwnership _4991_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4992_recIdents;
                RAST._IExpr _out1788;
                DCOMP._IOwnership _out1789;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1790;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1788, out _out1789, out _out1790);
                _4990_recursiveGen = _out1788;
                _4991_recOwned = _out1789;
                _4992_recIdents = _out1790;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4990_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1791;
                DCOMP._IOwnership _out1792;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1791, out _out1792);
                r = _out1791;
                resultingOwnership = _out1792;
                readIdents = _4992_recIdents;
              }
            } else if (_source181.is_Map) {
              DAST._IType _4993___mcc_h1110 = _source181.dtor_key;
              DAST._IType _4994___mcc_h1111 = _source181.dtor_value;
              {
                RAST._IExpr _4995_recursiveGen;
                DCOMP._IOwnership _4996_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4997_recIdents;
                RAST._IExpr _out1793;
                DCOMP._IOwnership _out1794;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1795;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1793, out _out1794, out _out1795);
                _4995_recursiveGen = _out1793;
                _4996_recOwned = _out1794;
                _4997_recIdents = _out1795;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4995_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1796;
                DCOMP._IOwnership _out1797;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1796, out _out1797);
                r = _out1796;
                resultingOwnership = _out1797;
                readIdents = _4997_recIdents;
              }
            } else if (_source181.is_SetBuilder) {
              DAST._IType _4998___mcc_h1114 = _source181.dtor_element;
              {
                RAST._IExpr _4999_recursiveGen;
                DCOMP._IOwnership _5000_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5001_recIdents;
                RAST._IExpr _out1798;
                DCOMP._IOwnership _out1799;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1800;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1798, out _out1799, out _out1800);
                _4999_recursiveGen = _out1798;
                _5000_recOwned = _out1799;
                _5001_recIdents = _out1800;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4999_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1801;
                DCOMP._IOwnership _out1802;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1801, out _out1802);
                r = _out1801;
                resultingOwnership = _out1802;
                readIdents = _5001_recIdents;
              }
            } else if (_source181.is_MapBuilder) {
              DAST._IType _5002___mcc_h1116 = _source181.dtor_key;
              DAST._IType _5003___mcc_h1117 = _source181.dtor_value;
              {
                RAST._IExpr _5004_recursiveGen;
                DCOMP._IOwnership _5005_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5006_recIdents;
                RAST._IExpr _out1803;
                DCOMP._IOwnership _out1804;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1805;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1803, out _out1804, out _out1805);
                _5004_recursiveGen = _out1803;
                _5005_recOwned = _out1804;
                _5006_recIdents = _out1805;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5004_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1806;
                DCOMP._IOwnership _out1807;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1806, out _out1807);
                r = _out1806;
                resultingOwnership = _out1807;
                readIdents = _5006_recIdents;
              }
            } else if (_source181.is_Arrow) {
              Dafny.ISequence<DAST._IType> _5007___mcc_h1120 = _source181.dtor_args;
              DAST._IType _5008___mcc_h1121 = _source181.dtor_result;
              {
                RAST._IExpr _5009_recursiveGen;
                DCOMP._IOwnership _5010_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5011_recIdents;
                RAST._IExpr _out1808;
                DCOMP._IOwnership _out1809;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1810;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1808, out _out1809, out _out1810);
                _5009_recursiveGen = _out1808;
                _5010_recOwned = _out1809;
                _5011_recIdents = _out1810;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5009_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1811;
                DCOMP._IOwnership _out1812;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1811, out _out1812);
                r = _out1811;
                resultingOwnership = _out1812;
                readIdents = _5011_recIdents;
              }
            } else if (_source181.is_Primitive) {
              DAST._IPrimitive _5012___mcc_h1124 = _source181.dtor_Primitive_a0;
              DAST._IPrimitive _source184 = _5012___mcc_h1124;
              if (_source184.is_Int) {
                {
                  RAST._IType _5013_rhsType;
                  RAST._IType _out1813;
                  _out1813 = DCOMP.COMP.GenType(_3424_fromTpe, true, false);
                  _5013_rhsType = _out1813;
                  RAST._IExpr _5014_recursiveGen;
                  DCOMP._IOwnership _5015___v85;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5016_recIdents;
                  RAST._IExpr _out1814;
                  DCOMP._IOwnership _out1815;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1816;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1814, out _out1815, out _out1816);
                  _5014_recursiveGen = _out1814;
                  _5015___v85 = _out1815;
                  _5016_recIdents = _out1816;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::BigInt::from("), (_5014_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out1817;
                  DCOMP._IOwnership _out1818;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1817, out _out1818);
                  r = _out1817;
                  resultingOwnership = _out1818;
                  readIdents = _5016_recIdents;
                }
              } else if (_source184.is_Real) {
                {
                  RAST._IExpr _5017_recursiveGen;
                  DCOMP._IOwnership _5018_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5019_recIdents;
                  RAST._IExpr _out1819;
                  DCOMP._IOwnership _out1820;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1821;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1819, out _out1820, out _out1821);
                  _5017_recursiveGen = _out1819;
                  _5018_recOwned = _out1820;
                  _5019_recIdents = _out1821;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5017_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1822;
                  DCOMP._IOwnership _out1823;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1822, out _out1823);
                  r = _out1822;
                  resultingOwnership = _out1823;
                  readIdents = _5019_recIdents;
                }
              } else if (_source184.is_String) {
                {
                  RAST._IExpr _5020_recursiveGen;
                  DCOMP._IOwnership _5021_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5022_recIdents;
                  RAST._IExpr _out1824;
                  DCOMP._IOwnership _out1825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1826;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1824, out _out1825, out _out1826);
                  _5020_recursiveGen = _out1824;
                  _5021_recOwned = _out1825;
                  _5022_recIdents = _out1826;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5020_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1827;
                  DCOMP._IOwnership _out1828;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1827, out _out1828);
                  r = _out1827;
                  resultingOwnership = _out1828;
                  readIdents = _5022_recIdents;
                }
              } else if (_source184.is_Bool) {
                {
                  RAST._IExpr _5023_recursiveGen;
                  DCOMP._IOwnership _5024_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5025_recIdents;
                  RAST._IExpr _out1829;
                  DCOMP._IOwnership _out1830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1831;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1829, out _out1830, out _out1831);
                  _5023_recursiveGen = _out1829;
                  _5024_recOwned = _out1830;
                  _5025_recIdents = _out1831;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5023_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1832;
                  DCOMP._IOwnership _out1833;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1832, out _out1833);
                  r = _out1832;
                  resultingOwnership = _out1833;
                  readIdents = _5025_recIdents;
                }
              } else {
                {
                  RAST._IExpr _5026_recursiveGen;
                  DCOMP._IOwnership _5027_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5028_recIdents;
                  RAST._IExpr _out1834;
                  DCOMP._IOwnership _out1835;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1836;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1834, out _out1835, out _out1836);
                  _5026_recursiveGen = _out1834;
                  _5027_recOwned = _out1835;
                  _5028_recIdents = _out1836;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5026_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out1837;
                  DCOMP._IOwnership _out1838;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1837, out _out1838);
                  r = _out1837;
                  resultingOwnership = _out1838;
                  readIdents = _5028_recIdents;
                }
              }
            } else if (_source181.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _5029___mcc_h1126 = _source181.dtor_Passthrough_a0;
              {
                RAST._IExpr _5030_recursiveGen;
                DCOMP._IOwnership _5031_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5032_recIdents;
                RAST._IExpr _out1839;
                DCOMP._IOwnership _out1840;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1841;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1839, out _out1840, out _out1841);
                _5030_recursiveGen = _out1839;
                _5031_recOwned = _out1840;
                _5032_recIdents = _out1841;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5030_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1842;
                DCOMP._IOwnership _out1843;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1842, out _out1843);
                r = _out1842;
                resultingOwnership = _out1843;
                readIdents = _5032_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _5033___mcc_h1128 = _source181.dtor_TypeArg_a0;
              {
                RAST._IExpr _5034_recursiveGen;
                DCOMP._IOwnership _5035_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5036_recIdents;
                RAST._IExpr _out1844;
                DCOMP._IOwnership _out1845;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1846;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1844, out _out1845, out _out1846);
                _5034_recursiveGen = _out1844;
                _5035_recOwned = _out1845;
                _5036_recIdents = _out1846;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5034_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1847;
                DCOMP._IOwnership _out1848;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1847, out _out1848);
                r = _out1847;
                resultingOwnership = _out1848;
                readIdents = _5036_recIdents;
              }
            }
          }
        } else if (_source126.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _5037___mcc_h1130 = _source126.dtor_Passthrough_a0;
          DAST._IType _source185 = _3430___mcc_h1;
          if (_source185.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5038___mcc_h1134 = _source185.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5039___mcc_h1135 = _source185.dtor_typeArgs;
            DAST._IResolvedType _5040___mcc_h1136 = _source185.dtor_resolved;
            DAST._IResolvedType _source186 = _5040___mcc_h1136;
            if (_source186.is_Datatype) {
              DAST._IDatatypeType _5041___mcc_h1140 = _source186.dtor_datatypeType;
              {
                RAST._IExpr _5042_recursiveGen;
                DCOMP._IOwnership _5043_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5044_recIdents;
                RAST._IExpr _out1849;
                DCOMP._IOwnership _out1850;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1851;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1849, out _out1850, out _out1851);
                _5042_recursiveGen = _out1849;
                _5043_recOwned = _out1850;
                _5044_recIdents = _out1851;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5042_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1852;
                DCOMP._IOwnership _out1853;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1852, out _out1853);
                r = _out1852;
                resultingOwnership = _out1853;
                readIdents = _5044_recIdents;
              }
            } else if (_source186.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5045___mcc_h1142 = _source186.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _5046___mcc_h1143 = _source186.dtor_attributes;
              {
                RAST._IExpr _5047_recursiveGen;
                DCOMP._IOwnership _5048_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5049_recIdents;
                RAST._IExpr _out1854;
                DCOMP._IOwnership _out1855;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1856;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1854, out _out1855, out _out1856);
                _5047_recursiveGen = _out1854;
                _5048_recOwned = _out1855;
                _5049_recIdents = _out1856;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5047_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1857;
                DCOMP._IOwnership _out1858;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1857, out _out1858);
                r = _out1857;
                resultingOwnership = _out1858;
                readIdents = _5049_recIdents;
              }
            } else {
              DAST._IType _5050___mcc_h1146 = _source186.dtor_baseType;
              DAST._INewtypeRange _5051___mcc_h1147 = _source186.dtor_range;
              bool _5052___mcc_h1148 = _source186.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _5053___mcc_h1149 = _source186.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _5054_attributes = _5053___mcc_h1149;
              bool _5055_erase = _5052___mcc_h1148;
              DAST._INewtypeRange _5056_range = _5051___mcc_h1147;
              DAST._IType _5057_b = _5050___mcc_h1146;
              {
                if (object.Equals(_3424_fromTpe, _5057_b)) {
                  RAST._IExpr _5058_recursiveGen;
                  DCOMP._IOwnership _5059_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5060_recIdents;
                  RAST._IExpr _out1859;
                  DCOMP._IOwnership _out1860;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1861;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1859, out _out1860, out _out1861);
                  _5058_recursiveGen = _out1859;
                  _5059_recOwned = _out1860;
                  _5060_recIdents = _out1861;
                  Std.Wrappers._IOption<RAST._IType> _5061_potentialRhsType;
                  _5061_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_5057_b, _5056_range);
                  Std.Wrappers._IOption<RAST._IType> _source187 = _5061_potentialRhsType;
                  if (_source187.is_None) {
                    if (_5055_erase) {
                      r = _5058_recursiveGen;
                    } else {
                      RAST._IType _5062_rhsType;
                      RAST._IType _out1862;
                      _out1862 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _5062_rhsType = _out1862;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5062_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5058_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1863;
                    DCOMP._IOwnership _out1864;
                    DCOMP.COMP.FromOwnership(r, _5059_recOwned, expectedOwnership, out _out1863, out _out1864);
                    r = _out1863;
                    resultingOwnership = _out1864;
                  } else {
                    RAST._IType _5063___mcc_h1263 = _source187.dtor_value;
                    RAST._IType _5064_v = _5063___mcc_h1263;
                    r = RAST.Expr.create_ConversionNum(_5064_v, _5058_recursiveGen);
                    RAST._IExpr _out1865;
                    DCOMP._IOwnership _out1866;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1865, out _out1866);
                    r = _out1865;
                    resultingOwnership = _out1866;
                  }
                  readIdents = _5060_recIdents;
                } else {
                  RAST._IExpr _out1867;
                  DCOMP._IOwnership _out1868;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1869;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _5057_b), _5057_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1867, out _out1868, out _out1869);
                  r = _out1867;
                  resultingOwnership = _out1868;
                  readIdents = _out1869;
                }
              }
            }
          } else if (_source185.is_Nullable) {
            DAST._IType _5065___mcc_h1154 = _source185.dtor_Nullable_a0;
            {
              RAST._IExpr _5066_recursiveGen;
              DCOMP._IOwnership _5067_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5068_recIdents;
              RAST._IExpr _out1870;
              DCOMP._IOwnership _out1871;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1872;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1870, out _out1871, out _out1872);
              _5066_recursiveGen = _out1870;
              _5067_recOwned = _out1871;
              _5068_recIdents = _out1872;
              r = _5066_recursiveGen;
              if (object.Equals(_5067_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1873;
              DCOMP._IOwnership _out1874;
              DCOMP.COMP.FromOwnership(r, _5067_recOwned, expectedOwnership, out _out1873, out _out1874);
              r = _out1873;
              resultingOwnership = _out1874;
              readIdents = _5068_recIdents;
            }
          } else if (_source185.is_Tuple) {
            Dafny.ISequence<DAST._IType> _5069___mcc_h1156 = _source185.dtor_Tuple_a0;
            {
              RAST._IExpr _5070_recursiveGen;
              DCOMP._IOwnership _5071_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5072_recIdents;
              RAST._IExpr _out1875;
              DCOMP._IOwnership _out1876;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1877;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1875, out _out1876, out _out1877);
              _5070_recursiveGen = _out1875;
              _5071_recOwned = _out1876;
              _5072_recIdents = _out1877;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5070_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1878;
              DCOMP._IOwnership _out1879;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1878, out _out1879);
              r = _out1878;
              resultingOwnership = _out1879;
              readIdents = _5072_recIdents;
            }
          } else if (_source185.is_Array) {
            DAST._IType _5073___mcc_h1158 = _source185.dtor_element;
            BigInteger _5074___mcc_h1159 = _source185.dtor_dims;
            {
              RAST._IExpr _5075_recursiveGen;
              DCOMP._IOwnership _5076_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5077_recIdents;
              RAST._IExpr _out1880;
              DCOMP._IOwnership _out1881;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1882;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1880, out _out1881, out _out1882);
              _5075_recursiveGen = _out1880;
              _5076_recOwned = _out1881;
              _5077_recIdents = _out1882;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5075_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1883;
              DCOMP._IOwnership _out1884;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1883, out _out1884);
              r = _out1883;
              resultingOwnership = _out1884;
              readIdents = _5077_recIdents;
            }
          } else if (_source185.is_Seq) {
            DAST._IType _5078___mcc_h1162 = _source185.dtor_element;
            {
              RAST._IExpr _5079_recursiveGen;
              DCOMP._IOwnership _5080_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5081_recIdents;
              RAST._IExpr _out1885;
              DCOMP._IOwnership _out1886;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1887;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1885, out _out1886, out _out1887);
              _5079_recursiveGen = _out1885;
              _5080_recOwned = _out1886;
              _5081_recIdents = _out1887;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5079_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1888;
              DCOMP._IOwnership _out1889;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1888, out _out1889);
              r = _out1888;
              resultingOwnership = _out1889;
              readIdents = _5081_recIdents;
            }
          } else if (_source185.is_Set) {
            DAST._IType _5082___mcc_h1164 = _source185.dtor_element;
            {
              RAST._IExpr _5083_recursiveGen;
              DCOMP._IOwnership _5084_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5085_recIdents;
              RAST._IExpr _out1890;
              DCOMP._IOwnership _out1891;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1892;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1890, out _out1891, out _out1892);
              _5083_recursiveGen = _out1890;
              _5084_recOwned = _out1891;
              _5085_recIdents = _out1892;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5083_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1893;
              DCOMP._IOwnership _out1894;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1893, out _out1894);
              r = _out1893;
              resultingOwnership = _out1894;
              readIdents = _5085_recIdents;
            }
          } else if (_source185.is_Multiset) {
            DAST._IType _5086___mcc_h1166 = _source185.dtor_element;
            {
              RAST._IExpr _5087_recursiveGen;
              DCOMP._IOwnership _5088_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5089_recIdents;
              RAST._IExpr _out1895;
              DCOMP._IOwnership _out1896;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1897;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1895, out _out1896, out _out1897);
              _5087_recursiveGen = _out1895;
              _5088_recOwned = _out1896;
              _5089_recIdents = _out1897;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5087_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1898;
              DCOMP._IOwnership _out1899;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1898, out _out1899);
              r = _out1898;
              resultingOwnership = _out1899;
              readIdents = _5089_recIdents;
            }
          } else if (_source185.is_Map) {
            DAST._IType _5090___mcc_h1168 = _source185.dtor_key;
            DAST._IType _5091___mcc_h1169 = _source185.dtor_value;
            {
              RAST._IExpr _5092_recursiveGen;
              DCOMP._IOwnership _5093_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5094_recIdents;
              RAST._IExpr _out1900;
              DCOMP._IOwnership _out1901;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1902;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1900, out _out1901, out _out1902);
              _5092_recursiveGen = _out1900;
              _5093_recOwned = _out1901;
              _5094_recIdents = _out1902;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5092_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1903;
              DCOMP._IOwnership _out1904;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1903, out _out1904);
              r = _out1903;
              resultingOwnership = _out1904;
              readIdents = _5094_recIdents;
            }
          } else if (_source185.is_SetBuilder) {
            DAST._IType _5095___mcc_h1172 = _source185.dtor_element;
            {
              RAST._IExpr _5096_recursiveGen;
              DCOMP._IOwnership _5097_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5098_recIdents;
              RAST._IExpr _out1905;
              DCOMP._IOwnership _out1906;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1907;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1905, out _out1906, out _out1907);
              _5096_recursiveGen = _out1905;
              _5097_recOwned = _out1906;
              _5098_recIdents = _out1907;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5096_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1908;
              DCOMP._IOwnership _out1909;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1908, out _out1909);
              r = _out1908;
              resultingOwnership = _out1909;
              readIdents = _5098_recIdents;
            }
          } else if (_source185.is_MapBuilder) {
            DAST._IType _5099___mcc_h1174 = _source185.dtor_key;
            DAST._IType _5100___mcc_h1175 = _source185.dtor_value;
            {
              RAST._IExpr _5101_recursiveGen;
              DCOMP._IOwnership _5102_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5103_recIdents;
              RAST._IExpr _out1910;
              DCOMP._IOwnership _out1911;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1912;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1910, out _out1911, out _out1912);
              _5101_recursiveGen = _out1910;
              _5102_recOwned = _out1911;
              _5103_recIdents = _out1912;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5101_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1913;
              DCOMP._IOwnership _out1914;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1913, out _out1914);
              r = _out1913;
              resultingOwnership = _out1914;
              readIdents = _5103_recIdents;
            }
          } else if (_source185.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5104___mcc_h1178 = _source185.dtor_args;
            DAST._IType _5105___mcc_h1179 = _source185.dtor_result;
            {
              RAST._IExpr _5106_recursiveGen;
              DCOMP._IOwnership _5107_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5108_recIdents;
              RAST._IExpr _out1915;
              DCOMP._IOwnership _out1916;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1917;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1915, out _out1916, out _out1917);
              _5106_recursiveGen = _out1915;
              _5107_recOwned = _out1916;
              _5108_recIdents = _out1917;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5106_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1918;
              DCOMP._IOwnership _out1919;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1918, out _out1919);
              r = _out1918;
              resultingOwnership = _out1919;
              readIdents = _5108_recIdents;
            }
          } else if (_source185.is_Primitive) {
            DAST._IPrimitive _5109___mcc_h1182 = _source185.dtor_Primitive_a0;
            DAST._IPrimitive _source188 = _5109___mcc_h1182;
            if (_source188.is_Int) {
              {
                RAST._IType _5110_rhsType;
                RAST._IType _out1920;
                _out1920 = DCOMP.COMP.GenType(_3424_fromTpe, true, false);
                _5110_rhsType = _out1920;
                RAST._IExpr _5111_recursiveGen;
                DCOMP._IOwnership _5112___v83;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5113_recIdents;
                RAST._IExpr _out1921;
                DCOMP._IOwnership _out1922;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1923;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1921, out _out1922, out _out1923);
                _5111_recursiveGen = _out1921;
                _5112___v83 = _out1922;
                _5113_recIdents = _out1923;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_5111_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out1924;
                DCOMP._IOwnership _out1925;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1924, out _out1925);
                r = _out1924;
                resultingOwnership = _out1925;
                readIdents = _5113_recIdents;
              }
            } else if (_source188.is_Real) {
              {
                RAST._IExpr _5114_recursiveGen;
                DCOMP._IOwnership _5115_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5116_recIdents;
                RAST._IExpr _out1926;
                DCOMP._IOwnership _out1927;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1928;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1926, out _out1927, out _out1928);
                _5114_recursiveGen = _out1926;
                _5115_recOwned = _out1927;
                _5116_recIdents = _out1928;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5114_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1929;
                DCOMP._IOwnership _out1930;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1929, out _out1930);
                r = _out1929;
                resultingOwnership = _out1930;
                readIdents = _5116_recIdents;
              }
            } else if (_source188.is_String) {
              {
                RAST._IExpr _5117_recursiveGen;
                DCOMP._IOwnership _5118_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5119_recIdents;
                RAST._IExpr _out1931;
                DCOMP._IOwnership _out1932;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1933;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1931, out _out1932, out _out1933);
                _5117_recursiveGen = _out1931;
                _5118_recOwned = _out1932;
                _5119_recIdents = _out1933;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5117_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1934;
                DCOMP._IOwnership _out1935;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1934, out _out1935);
                r = _out1934;
                resultingOwnership = _out1935;
                readIdents = _5119_recIdents;
              }
            } else if (_source188.is_Bool) {
              {
                RAST._IExpr _5120_recursiveGen;
                DCOMP._IOwnership _5121_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5122_recIdents;
                RAST._IExpr _out1936;
                DCOMP._IOwnership _out1937;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1938;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1936, out _out1937, out _out1938);
                _5120_recursiveGen = _out1936;
                _5121_recOwned = _out1937;
                _5122_recIdents = _out1938;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5120_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1939;
                DCOMP._IOwnership _out1940;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1939, out _out1940);
                r = _out1939;
                resultingOwnership = _out1940;
                readIdents = _5122_recIdents;
              }
            } else {
              {
                RAST._IExpr _5123_recursiveGen;
                DCOMP._IOwnership _5124_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5125_recIdents;
                RAST._IExpr _out1941;
                DCOMP._IOwnership _out1942;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1943;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1941, out _out1942, out _out1943);
                _5123_recursiveGen = _out1941;
                _5124_recOwned = _out1942;
                _5125_recIdents = _out1943;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5123_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1944;
                DCOMP._IOwnership _out1945;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1944, out _out1945);
                r = _out1944;
                resultingOwnership = _out1945;
                readIdents = _5125_recIdents;
              }
            }
          } else if (_source185.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5126___mcc_h1184 = _source185.dtor_Passthrough_a0;
            {
              RAST._IExpr _5127_recursiveGen;
              DCOMP._IOwnership _5128___v88;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5129_recIdents;
              RAST._IExpr _out1946;
              DCOMP._IOwnership _out1947;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1948;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1946, out _out1947, out _out1948);
              _5127_recursiveGen = _out1946;
              _5128___v88 = _out1947;
              _5129_recIdents = _out1948;
              RAST._IType _5130_toTpeGen;
              RAST._IType _out1949;
              _out1949 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
              _5130_toTpeGen = _out1949;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_5127_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_5130_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out1950;
              DCOMP._IOwnership _out1951;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1950, out _out1951);
              r = _out1950;
              resultingOwnership = _out1951;
              readIdents = _5129_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5131___mcc_h1186 = _source185.dtor_TypeArg_a0;
            {
              RAST._IExpr _5132_recursiveGen;
              DCOMP._IOwnership _5133_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5134_recIdents;
              RAST._IExpr _out1952;
              DCOMP._IOwnership _out1953;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1954;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1952, out _out1953, out _out1954);
              _5132_recursiveGen = _out1952;
              _5133_recOwned = _out1953;
              _5134_recIdents = _out1954;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5132_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1955;
              DCOMP._IOwnership _out1956;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1955, out _out1956);
              r = _out1955;
              resultingOwnership = _out1956;
              readIdents = _5134_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _5135___mcc_h1188 = _source126.dtor_TypeArg_a0;
          DAST._IType _source189 = _3430___mcc_h1;
          if (_source189.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5136___mcc_h1192 = _source189.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5137___mcc_h1193 = _source189.dtor_typeArgs;
            DAST._IResolvedType _5138___mcc_h1194 = _source189.dtor_resolved;
            DAST._IResolvedType _source190 = _5138___mcc_h1194;
            if (_source190.is_Datatype) {
              DAST._IDatatypeType _5139___mcc_h1198 = _source190.dtor_datatypeType;
              {
                RAST._IExpr _5140_recursiveGen;
                DCOMP._IOwnership _5141_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5142_recIdents;
                RAST._IExpr _out1957;
                DCOMP._IOwnership _out1958;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1959;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1957, out _out1958, out _out1959);
                _5140_recursiveGen = _out1957;
                _5141_recOwned = _out1958;
                _5142_recIdents = _out1959;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5140_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1960;
                DCOMP._IOwnership _out1961;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1960, out _out1961);
                r = _out1960;
                resultingOwnership = _out1961;
                readIdents = _5142_recIdents;
              }
            } else if (_source190.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5143___mcc_h1200 = _source190.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _5144___mcc_h1201 = _source190.dtor_attributes;
              {
                RAST._IExpr _5145_recursiveGen;
                DCOMP._IOwnership _5146_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5147_recIdents;
                RAST._IExpr _out1962;
                DCOMP._IOwnership _out1963;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1964;
                DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1962, out _out1963, out _out1964);
                _5145_recursiveGen = _out1962;
                _5146_recOwned = _out1963;
                _5147_recIdents = _out1964;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5145_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out1965;
                DCOMP._IOwnership _out1966;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1965, out _out1966);
                r = _out1965;
                resultingOwnership = _out1966;
                readIdents = _5147_recIdents;
              }
            } else {
              DAST._IType _5148___mcc_h1204 = _source190.dtor_baseType;
              DAST._INewtypeRange _5149___mcc_h1205 = _source190.dtor_range;
              bool _5150___mcc_h1206 = _source190.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _5151___mcc_h1207 = _source190.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _5152_attributes = _5151___mcc_h1207;
              bool _5153_erase = _5150___mcc_h1206;
              DAST._INewtypeRange _5154_range = _5149___mcc_h1205;
              DAST._IType _5155_b = _5148___mcc_h1204;
              {
                if (object.Equals(_3424_fromTpe, _5155_b)) {
                  RAST._IExpr _5156_recursiveGen;
                  DCOMP._IOwnership _5157_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5158_recIdents;
                  RAST._IExpr _out1967;
                  DCOMP._IOwnership _out1968;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1969;
                  DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1967, out _out1968, out _out1969);
                  _5156_recursiveGen = _out1967;
                  _5157_recOwned = _out1968;
                  _5158_recIdents = _out1969;
                  Std.Wrappers._IOption<RAST._IType> _5159_potentialRhsType;
                  _5159_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_5155_b, _5154_range);
                  Std.Wrappers._IOption<RAST._IType> _source191 = _5159_potentialRhsType;
                  if (_source191.is_None) {
                    if (_5153_erase) {
                      r = _5156_recursiveGen;
                    } else {
                      RAST._IType _5160_rhsType;
                      RAST._IType _out1970;
                      _out1970 = DCOMP.COMP.GenType(_3425_toTpe, true, false);
                      _5160_rhsType = _out1970;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5160_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5156_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1971;
                    DCOMP._IOwnership _out1972;
                    DCOMP.COMP.FromOwnership(r, _5157_recOwned, expectedOwnership, out _out1971, out _out1972);
                    r = _out1971;
                    resultingOwnership = _out1972;
                  } else {
                    RAST._IType _5161___mcc_h1264 = _source191.dtor_value;
                    RAST._IType _5162_v = _5161___mcc_h1264;
                    r = RAST.Expr.create_ConversionNum(_5162_v, _5156_recursiveGen);
                    RAST._IExpr _out1973;
                    DCOMP._IOwnership _out1974;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1973, out _out1974);
                    r = _out1973;
                    resultingOwnership = _out1974;
                  }
                  readIdents = _5158_recIdents;
                } else {
                  RAST._IExpr _out1975;
                  DCOMP._IOwnership _out1976;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1977;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_3423_expr, _3424_fromTpe, _5155_b), _5155_b, _3425_toTpe), selfIdent, env, expectedOwnership, out _out1975, out _out1976, out _out1977);
                  r = _out1975;
                  resultingOwnership = _out1976;
                  readIdents = _out1977;
                }
              }
            }
          } else if (_source189.is_Nullable) {
            DAST._IType _5163___mcc_h1212 = _source189.dtor_Nullable_a0;
            {
              RAST._IExpr _5164_recursiveGen;
              DCOMP._IOwnership _5165_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5166_recIdents;
              RAST._IExpr _out1978;
              DCOMP._IOwnership _out1979;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1980;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1978, out _out1979, out _out1980);
              _5164_recursiveGen = _out1978;
              _5165_recOwned = _out1979;
              _5166_recIdents = _out1980;
              r = _5164_recursiveGen;
              if (object.Equals(_5165_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out1981;
              DCOMP._IOwnership _out1982;
              DCOMP.COMP.FromOwnership(r, _5165_recOwned, expectedOwnership, out _out1981, out _out1982);
              r = _out1981;
              resultingOwnership = _out1982;
              readIdents = _5166_recIdents;
            }
          } else if (_source189.is_Tuple) {
            Dafny.ISequence<DAST._IType> _5167___mcc_h1214 = _source189.dtor_Tuple_a0;
            {
              RAST._IExpr _5168_recursiveGen;
              DCOMP._IOwnership _5169_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5170_recIdents;
              RAST._IExpr _out1983;
              DCOMP._IOwnership _out1984;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1985;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1983, out _out1984, out _out1985);
              _5168_recursiveGen = _out1983;
              _5169_recOwned = _out1984;
              _5170_recIdents = _out1985;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5168_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1986;
              DCOMP._IOwnership _out1987;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1986, out _out1987);
              r = _out1986;
              resultingOwnership = _out1987;
              readIdents = _5170_recIdents;
            }
          } else if (_source189.is_Array) {
            DAST._IType _5171___mcc_h1216 = _source189.dtor_element;
            BigInteger _5172___mcc_h1217 = _source189.dtor_dims;
            {
              RAST._IExpr _5173_recursiveGen;
              DCOMP._IOwnership _5174_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5175_recIdents;
              RAST._IExpr _out1988;
              DCOMP._IOwnership _out1989;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1990;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1988, out _out1989, out _out1990);
              _5173_recursiveGen = _out1988;
              _5174_recOwned = _out1989;
              _5175_recIdents = _out1990;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5173_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1991;
              DCOMP._IOwnership _out1992;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1991, out _out1992);
              r = _out1991;
              resultingOwnership = _out1992;
              readIdents = _5175_recIdents;
            }
          } else if (_source189.is_Seq) {
            DAST._IType _5176___mcc_h1220 = _source189.dtor_element;
            {
              RAST._IExpr _5177_recursiveGen;
              DCOMP._IOwnership _5178_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5179_recIdents;
              RAST._IExpr _out1993;
              DCOMP._IOwnership _out1994;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1995;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1993, out _out1994, out _out1995);
              _5177_recursiveGen = _out1993;
              _5178_recOwned = _out1994;
              _5179_recIdents = _out1995;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5177_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out1996;
              DCOMP._IOwnership _out1997;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1996, out _out1997);
              r = _out1996;
              resultingOwnership = _out1997;
              readIdents = _5179_recIdents;
            }
          } else if (_source189.is_Set) {
            DAST._IType _5180___mcc_h1222 = _source189.dtor_element;
            {
              RAST._IExpr _5181_recursiveGen;
              DCOMP._IOwnership _5182_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5183_recIdents;
              RAST._IExpr _out1998;
              DCOMP._IOwnership _out1999;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2000;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out1998, out _out1999, out _out2000);
              _5181_recursiveGen = _out1998;
              _5182_recOwned = _out1999;
              _5183_recIdents = _out2000;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5181_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2001;
              DCOMP._IOwnership _out2002;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2001, out _out2002);
              r = _out2001;
              resultingOwnership = _out2002;
              readIdents = _5183_recIdents;
            }
          } else if (_source189.is_Multiset) {
            DAST._IType _5184___mcc_h1224 = _source189.dtor_element;
            {
              RAST._IExpr _5185_recursiveGen;
              DCOMP._IOwnership _5186_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5187_recIdents;
              RAST._IExpr _out2003;
              DCOMP._IOwnership _out2004;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2005;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out2003, out _out2004, out _out2005);
              _5185_recursiveGen = _out2003;
              _5186_recOwned = _out2004;
              _5187_recIdents = _out2005;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5185_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2006;
              DCOMP._IOwnership _out2007;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2006, out _out2007);
              r = _out2006;
              resultingOwnership = _out2007;
              readIdents = _5187_recIdents;
            }
          } else if (_source189.is_Map) {
            DAST._IType _5188___mcc_h1226 = _source189.dtor_key;
            DAST._IType _5189___mcc_h1227 = _source189.dtor_value;
            {
              RAST._IExpr _5190_recursiveGen;
              DCOMP._IOwnership _5191_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5192_recIdents;
              RAST._IExpr _out2008;
              DCOMP._IOwnership _out2009;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2010;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out2008, out _out2009, out _out2010);
              _5190_recursiveGen = _out2008;
              _5191_recOwned = _out2009;
              _5192_recIdents = _out2010;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5190_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2011;
              DCOMP._IOwnership _out2012;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2011, out _out2012);
              r = _out2011;
              resultingOwnership = _out2012;
              readIdents = _5192_recIdents;
            }
          } else if (_source189.is_SetBuilder) {
            DAST._IType _5193___mcc_h1230 = _source189.dtor_element;
            {
              RAST._IExpr _5194_recursiveGen;
              DCOMP._IOwnership _5195_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5196_recIdents;
              RAST._IExpr _out2013;
              DCOMP._IOwnership _out2014;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2015;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out2013, out _out2014, out _out2015);
              _5194_recursiveGen = _out2013;
              _5195_recOwned = _out2014;
              _5196_recIdents = _out2015;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5194_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2016;
              DCOMP._IOwnership _out2017;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2016, out _out2017);
              r = _out2016;
              resultingOwnership = _out2017;
              readIdents = _5196_recIdents;
            }
          } else if (_source189.is_MapBuilder) {
            DAST._IType _5197___mcc_h1232 = _source189.dtor_key;
            DAST._IType _5198___mcc_h1233 = _source189.dtor_value;
            {
              RAST._IExpr _5199_recursiveGen;
              DCOMP._IOwnership _5200_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5201_recIdents;
              RAST._IExpr _out2018;
              DCOMP._IOwnership _out2019;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2020;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out2018, out _out2019, out _out2020);
              _5199_recursiveGen = _out2018;
              _5200_recOwned = _out2019;
              _5201_recIdents = _out2020;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5199_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2021;
              DCOMP._IOwnership _out2022;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2021, out _out2022);
              r = _out2021;
              resultingOwnership = _out2022;
              readIdents = _5201_recIdents;
            }
          } else if (_source189.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5202___mcc_h1236 = _source189.dtor_args;
            DAST._IType _5203___mcc_h1237 = _source189.dtor_result;
            {
              RAST._IExpr _5204_recursiveGen;
              DCOMP._IOwnership _5205_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5206_recIdents;
              RAST._IExpr _out2023;
              DCOMP._IOwnership _out2024;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2025;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out2023, out _out2024, out _out2025);
              _5204_recursiveGen = _out2023;
              _5205_recOwned = _out2024;
              _5206_recIdents = _out2025;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5204_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2026;
              DCOMP._IOwnership _out2027;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2026, out _out2027);
              r = _out2026;
              resultingOwnership = _out2027;
              readIdents = _5206_recIdents;
            }
          } else if (_source189.is_Primitive) {
            DAST._IPrimitive _5207___mcc_h1240 = _source189.dtor_Primitive_a0;
            {
              RAST._IExpr _5208_recursiveGen;
              DCOMP._IOwnership _5209_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5210_recIdents;
              RAST._IExpr _out2028;
              DCOMP._IOwnership _out2029;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2030;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out2028, out _out2029, out _out2030);
              _5208_recursiveGen = _out2028;
              _5209_recOwned = _out2029;
              _5210_recIdents = _out2030;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5208_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2031;
              DCOMP._IOwnership _out2032;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2031, out _out2032);
              r = _out2031;
              resultingOwnership = _out2032;
              readIdents = _5210_recIdents;
            }
          } else if (_source189.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5211___mcc_h1242 = _source189.dtor_Passthrough_a0;
            {
              RAST._IExpr _5212_recursiveGen;
              DCOMP._IOwnership _5213_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5214_recIdents;
              RAST._IExpr _out2033;
              DCOMP._IOwnership _out2034;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2035;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out2033, out _out2034, out _out2035);
              _5212_recursiveGen = _out2033;
              _5213_recOwned = _out2034;
              _5214_recIdents = _out2035;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5212_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2036;
              DCOMP._IOwnership _out2037;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2036, out _out2037);
              r = _out2036;
              resultingOwnership = _out2037;
              readIdents = _5214_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5215___mcc_h1244 = _source189.dtor_TypeArg_a0;
            {
              RAST._IExpr _5216_recursiveGen;
              DCOMP._IOwnership _5217_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5218_recIdents;
              RAST._IExpr _out2038;
              DCOMP._IOwnership _out2039;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2040;
              DCOMP.COMP.GenExpr(_3423_expr, selfIdent, env, expectedOwnership, out _out2038, out _out2039, out _out2040);
              _5216_recursiveGen = _out2038;
              _5217_recOwned = _out2039;
              _5218_recIdents = _out2040;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5216_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out2041;
              DCOMP._IOwnership _out2042;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2041, out _out2042);
              r = _out2041;
              resultingOwnership = _out2042;
              readIdents = _5218_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source192 = e;
      if (_source192.is_Literal) {
        DAST._ILiteral _5219___mcc_h0 = _source192.dtor_Literal_a0;
        RAST._IExpr _out2043;
        DCOMP._IOwnership _out2044;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2045;
        DCOMP.COMP.GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out2043, out _out2044, out _out2045);
        r = _out2043;
        resultingOwnership = _out2044;
        readIdents = _out2045;
      } else if (_source192.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _5220___mcc_h1 = _source192.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _5221_name = _5220___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_5221_name));
          bool _5222_currentlyBorrowed;
          _5222_currentlyBorrowed = (env).IsBorrowed(_5221_name);
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (_5222_currentlyBorrowed) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5221_name);
          return ;
        }
      } else if (_source192.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5223___mcc_h2 = _source192.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5224_path = _5223___mcc_h2;
        {
          RAST._IExpr _out2046;
          _out2046 = DCOMP.COMP.GenPathExpr(_5224_path);
          r = _out2046;
          RAST._IExpr _out2047;
          DCOMP._IOwnership _out2048;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2047, out _out2048);
          r = _out2047;
          resultingOwnership = _out2048;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source192.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _5225___mcc_h3 = _source192.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _5226_values = _5225___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _5227_s;
          _5227_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5228_i;
          _5228_i = BigInteger.Zero;
          while ((_5228_i) < (new BigInteger((_5226_values).Count))) {
            if ((_5228_i).Sign == 1) {
              _5227_s = Dafny.Sequence<Dafny.Rune>.Concat(_5227_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _5229_recursiveGen;
            DCOMP._IOwnership _5230___v91;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5231_recIdents;
            RAST._IExpr _out2049;
            DCOMP._IOwnership _out2050;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2051;
            DCOMP.COMP.GenExpr((_5226_values).Select(_5228_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2049, out _out2050, out _out2051);
            _5229_recursiveGen = _out2049;
            _5230___v91 = _out2050;
            _5231_recIdents = _out2051;
            _5227_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5227_s, (_5229_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5231_recIdents);
            _5228_i = (_5228_i) + (BigInteger.One);
          }
          _5227_s = Dafny.Sequence<Dafny.Rune>.Concat(_5227_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_5227_s);
          RAST._IExpr _out2052;
          DCOMP._IOwnership _out2053;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2052, out _out2053);
          r = _out2052;
          resultingOwnership = _out2053;
          return ;
        }
      } else if (_source192.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5232___mcc_h4 = _source192.dtor_path;
        Dafny.ISequence<DAST._IType> _5233___mcc_h5 = _source192.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _5234___mcc_h6 = _source192.dtor_args;
        Dafny.ISequence<DAST._IExpression> _5235_args = _5234___mcc_h6;
        Dafny.ISequence<DAST._IType> _5236_typeArgs = _5233___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5237_path = _5232___mcc_h4;
        {
          RAST._IExpr _out2054;
          _out2054 = DCOMP.COMP.GenPathExpr(_5237_path);
          r = _out2054;
          if ((new BigInteger((_5236_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _5238_typeExprs;
            _5238_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi6 = new BigInteger((_5236_typeArgs).Count);
            for (BigInteger _5239_i = BigInteger.Zero; _5239_i < _hi6; _5239_i++) {
              RAST._IType _5240_typeExpr;
              RAST._IType _out2055;
              _out2055 = DCOMP.COMP.GenType((_5236_typeArgs).Select(_5239_i), false, false);
              _5240_typeExpr = _out2055;
              _5238_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_5238_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_5240_typeExpr));
            }
            r = (r).ApplyType(_5238_typeExprs);
          }
          r = (r).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _5241_arguments;
          _5241_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi7 = new BigInteger((_5235_args).Count);
          for (BigInteger _5242_i = BigInteger.Zero; _5242_i < _hi7; _5242_i++) {
            RAST._IExpr _5243_recursiveGen;
            DCOMP._IOwnership _5244___v92;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5245_recIdents;
            RAST._IExpr _out2056;
            DCOMP._IOwnership _out2057;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2058;
            DCOMP.COMP.GenExpr((_5235_args).Select(_5242_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2056, out _out2057, out _out2058);
            _5243_recursiveGen = _out2056;
            _5244___v92 = _out2057;
            _5245_recIdents = _out2058;
            _5241_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5241_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_5243_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5245_recIdents);
          }
          r = (r).Apply(_5241_arguments);
          r = RAST.__default.RcNew(r);
          RAST._IExpr _out2059;
          DCOMP._IOwnership _out2060;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2059, out _out2060);
          r = _out2059;
          resultingOwnership = _out2060;
          return ;
        }
      } else if (_source192.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _5246___mcc_h7 = _source192.dtor_dims;
        DAST._IType _5247___mcc_h8 = _source192.dtor_typ;
        DAST._IType _5248_typ = _5247___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _5249_dims = _5246___mcc_h7;
        {
          BigInteger _5250_i;
          _5250_i = (new BigInteger((_5249_dims).Count)) - (BigInteger.One);
          RAST._IType _5251_genTyp;
          RAST._IType _out2061;
          _out2061 = DCOMP.COMP.GenType(_5248_typ, false, false);
          _5251_genTyp = _out2061;
          Dafny.ISequence<Dafny.Rune> _5252_s;
          _5252_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_5251_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_5250_i).Sign != -1) {
            RAST._IExpr _5253_recursiveGen;
            DCOMP._IOwnership _5254___v93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5255_recIdents;
            RAST._IExpr _out2062;
            DCOMP._IOwnership _out2063;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2064;
            DCOMP.COMP.GenExpr((_5249_dims).Select(_5250_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2062, out _out2063, out _out2064);
            _5253_recursiveGen = _out2062;
            _5254___v93 = _out2063;
            _5255_recIdents = _out2064;
            _5252_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _5252_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_5253_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5255_recIdents);
            _5250_i = (_5250_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_5252_s);
          RAST._IExpr _out2065;
          DCOMP._IOwnership _out2066;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2065, out _out2066);
          r = _out2065;
          resultingOwnership = _out2066;
          return ;
        }
      } else if (_source192.is_DatatypeValue) {
        DAST._IDatatypeType _5256___mcc_h9 = _source192.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _5257___mcc_h10 = _source192.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _5258___mcc_h11 = _source192.dtor_variant;
        bool _5259___mcc_h12 = _source192.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5260___mcc_h13 = _source192.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5261_values = _5260___mcc_h13;
        bool _5262_isCo = _5259___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _5263_variant = _5258___mcc_h11;
        Dafny.ISequence<DAST._IType> _5264_typeArgs = _5257___mcc_h10;
        DAST._IDatatypeType _5265_datatypeType = _5256___mcc_h9;
        {
          RAST._IExpr _out2067;
          _out2067 = DCOMP.COMP.GenPathExpr((_5265_datatypeType).dtor_path);
          r = _out2067;
          Dafny.ISequence<RAST._IType> _5266_genTypeArgs;
          _5266_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi8 = new BigInteger((_5264_typeArgs).Count);
          for (BigInteger _5267_i = BigInteger.Zero; _5267_i < _hi8; _5267_i++) {
            RAST._IType _5268_typeExpr;
            RAST._IType _out2068;
            _out2068 = DCOMP.COMP.GenType((_5264_typeArgs).Select(_5267_i), false, false);
            _5268_typeExpr = _out2068;
            _5266_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_5266_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_5268_typeExpr));
          }
          if ((new BigInteger((_5264_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_5266_genTypeArgs);
          }
          r = (r).MSel(DCOMP.__default.escapeIdent(_5263_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _5269_assignments;
          _5269_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi9 = new BigInteger((_5261_values).Count);
          for (BigInteger _5270_i = BigInteger.Zero; _5270_i < _hi9; _5270_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs52 = (_5261_values).Select(_5270_i);
            Dafny.ISequence<Dafny.Rune> _5271_name = _let_tmp_rhs52.dtor__0;
            DAST._IExpression _5272_value = _let_tmp_rhs52.dtor__1;
            if (_5262_isCo) {
              RAST._IExpr _5273_recursiveGen;
              DCOMP._IOwnership _5274___v94;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5275_recIdents;
              RAST._IExpr _out2069;
              DCOMP._IOwnership _out2070;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2071;
              DCOMP.COMP.GenExpr(_5272_value, selfIdent, DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out2069, out _out2070, out _out2071);
              _5273_recursiveGen = _out2069;
              _5274___v94 = _out2070;
              _5275_recIdents = _out2071;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5275_recIdents);
              Dafny.ISequence<Dafny.Rune> _5276_allReadCloned;
              _5276_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_5275_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _5277_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_5275_recIdents).Elements) {
                  _5277_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_5275_recIdents).Contains(_5277_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2826)");
              after__ASSIGN_SUCH_THAT_2: ;
                _5276_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5276_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_5277_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_5277_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _5275_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5275_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5277_next));
              }
              Dafny.ISequence<Dafny.Rune> _5278_assigned;
              _5278_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _5276_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_5273_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _5269_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5269_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_5271_name), RAST.Expr.create_RawExpr(_5278_assigned))));
            } else {
              RAST._IExpr _5279_recursiveGen;
              DCOMP._IOwnership _5280___v95;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5281_recIdents;
              RAST._IExpr _out2072;
              DCOMP._IOwnership _out2073;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2074;
              DCOMP.COMP.GenExpr(_5272_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2072, out _out2073, out _out2074);
              _5279_recursiveGen = _out2072;
              _5280___v95 = _out2073;
              _5281_recIdents = _out2074;
              _5269_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5269_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_5271_name), _5279_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5281_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _5269_assignments);
          if (DCOMP.COMP.IsRcWrapped((_5265_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out2075;
          DCOMP._IOwnership _out2076;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2075, out _out2076);
          r = _out2075;
          resultingOwnership = _out2076;
          return ;
        }
      } else if (_source192.is_Convert) {
        DAST._IExpression _5282___mcc_h14 = _source192.dtor_value;
        DAST._IType _5283___mcc_h15 = _source192.dtor_from;
        DAST._IType _5284___mcc_h16 = _source192.dtor_typ;
        {
          RAST._IExpr _out2077;
          DCOMP._IOwnership _out2078;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2079;
          DCOMP.COMP.GenExprConvert(e, selfIdent, env, expectedOwnership, out _out2077, out _out2078, out _out2079);
          r = _out2077;
          resultingOwnership = _out2078;
          readIdents = _out2079;
        }
      } else if (_source192.is_SeqConstruct) {
        DAST._IExpression _5285___mcc_h17 = _source192.dtor_length;
        DAST._IExpression _5286___mcc_h18 = _source192.dtor_elem;
        DAST._IExpression _5287_expr = _5286___mcc_h18;
        DAST._IExpression _5288_length = _5285___mcc_h17;
        {
          RAST._IExpr _5289_recursiveGen;
          DCOMP._IOwnership _5290___v99;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5291_recIdents;
          RAST._IExpr _out2080;
          DCOMP._IOwnership _out2081;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2082;
          DCOMP.COMP.GenExpr(_5287_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2080, out _out2081, out _out2082);
          _5289_recursiveGen = _out2080;
          _5290___v99 = _out2081;
          _5291_recIdents = _out2082;
          RAST._IExpr _5292_lengthGen;
          DCOMP._IOwnership _5293___v100;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5294_lengthIdents;
          RAST._IExpr _out2083;
          DCOMP._IOwnership _out2084;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2085;
          DCOMP.COMP.GenExpr(_5288_length, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2083, out _out2084, out _out2085);
          _5292_lengthGen = _out2083;
          _5293___v100 = _out2084;
          _5294_lengthIdents = _out2085;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_5289_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_5292_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5291_recIdents, _5294_lengthIdents);
          RAST._IExpr _out2086;
          DCOMP._IOwnership _out2087;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2086, out _out2087);
          r = _out2086;
          resultingOwnership = _out2087;
          return ;
        }
      } else if (_source192.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _5295___mcc_h19 = _source192.dtor_elements;
        DAST._IType _5296___mcc_h20 = _source192.dtor_typ;
        DAST._IType _5297_typ = _5296___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _5298_exprs = _5295___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _5299_genTpe;
          RAST._IType _out2088;
          _out2088 = DCOMP.COMP.GenType(_5297_typ, false, false);
          _5299_genTpe = _out2088;
          BigInteger _5300_i;
          _5300_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _5301_args;
          _5301_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_5300_i) < (new BigInteger((_5298_exprs).Count))) {
            RAST._IExpr _5302_recursiveGen;
            DCOMP._IOwnership _5303___v101;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5304_recIdents;
            RAST._IExpr _out2089;
            DCOMP._IOwnership _out2090;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2091;
            DCOMP.COMP.GenExpr((_5298_exprs).Select(_5300_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2089, out _out2090, out _out2091);
            _5302_recursiveGen = _out2089;
            _5303___v101 = _out2090;
            _5304_recIdents = _out2091;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5304_recIdents);
            _5301_args = Dafny.Sequence<RAST._IExpr>.Concat(_5301_args, Dafny.Sequence<RAST._IExpr>.FromElements(_5302_recursiveGen));
            _5300_i = (_5300_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_5301_args);
          if ((new BigInteger((_5301_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_5299_genTpe));
          }
          RAST._IExpr _out2092;
          DCOMP._IOwnership _out2093;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2092, out _out2093);
          r = _out2092;
          resultingOwnership = _out2093;
          return ;
        }
      } else if (_source192.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _5305___mcc_h21 = _source192.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _5306_exprs = _5305___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _5307_generatedValues;
          _5307_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5308_i;
          _5308_i = BigInteger.Zero;
          while ((_5308_i) < (new BigInteger((_5306_exprs).Count))) {
            RAST._IExpr _5309_recursiveGen;
            DCOMP._IOwnership _5310___v102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5311_recIdents;
            RAST._IExpr _out2094;
            DCOMP._IOwnership _out2095;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2096;
            DCOMP.COMP.GenExpr((_5306_exprs).Select(_5308_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2094, out _out2095, out _out2096);
            _5309_recursiveGen = _out2094;
            _5310___v102 = _out2095;
            _5311_recIdents = _out2096;
            _5307_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_5307_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_5309_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5311_recIdents);
            _5308_i = (_5308_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_5307_generatedValues);
          RAST._IExpr _out2097;
          DCOMP._IOwnership _out2098;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2097, out _out2098);
          r = _out2097;
          resultingOwnership = _out2098;
          return ;
        }
      } else if (_source192.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _5312___mcc_h22 = _source192.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _5313_exprs = _5312___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _5314_generatedValues;
          _5314_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5315_i;
          _5315_i = BigInteger.Zero;
          while ((_5315_i) < (new BigInteger((_5313_exprs).Count))) {
            RAST._IExpr _5316_recursiveGen;
            DCOMP._IOwnership _5317___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5318_recIdents;
            RAST._IExpr _out2099;
            DCOMP._IOwnership _out2100;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2101;
            DCOMP.COMP.GenExpr((_5313_exprs).Select(_5315_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2099, out _out2100, out _out2101);
            _5316_recursiveGen = _out2099;
            _5317___v103 = _out2100;
            _5318_recIdents = _out2101;
            _5314_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_5314_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_5316_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5318_recIdents);
            _5315_i = (_5315_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_5314_generatedValues);
          RAST._IExpr _out2102;
          DCOMP._IOwnership _out2103;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2102, out _out2103);
          r = _out2102;
          resultingOwnership = _out2103;
          return ;
        }
      } else if (_source192.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _5319___mcc_h23 = _source192.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _5320_mapElems = _5319___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _5321_generatedValues;
          _5321_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5322_i;
          _5322_i = BigInteger.Zero;
          while ((_5322_i) < (new BigInteger((_5320_mapElems).Count))) {
            RAST._IExpr _5323_recursiveGenKey;
            DCOMP._IOwnership _5324___v105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5325_recIdentsKey;
            RAST._IExpr _out2104;
            DCOMP._IOwnership _out2105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2106;
            DCOMP.COMP.GenExpr(((_5320_mapElems).Select(_5322_i)).dtor__0, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2104, out _out2105, out _out2106);
            _5323_recursiveGenKey = _out2104;
            _5324___v105 = _out2105;
            _5325_recIdentsKey = _out2106;
            RAST._IExpr _5326_recursiveGenValue;
            DCOMP._IOwnership _5327___v106;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5328_recIdentsValue;
            RAST._IExpr _out2107;
            DCOMP._IOwnership _out2108;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2109;
            DCOMP.COMP.GenExpr(((_5320_mapElems).Select(_5322_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2107, out _out2108, out _out2109);
            _5326_recursiveGenValue = _out2107;
            _5327___v106 = _out2108;
            _5328_recIdentsValue = _out2109;
            _5321_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_5321_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_5323_recursiveGenKey, _5326_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5325_recIdentsKey), _5328_recIdentsValue);
            _5322_i = (_5322_i) + (BigInteger.One);
          }
          _5322_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _5329_arguments;
          _5329_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_5322_i) < (new BigInteger((_5321_generatedValues).Count))) {
            RAST._IExpr _5330_genKey;
            _5330_genKey = ((_5321_generatedValues).Select(_5322_i)).dtor__0;
            RAST._IExpr _5331_genValue;
            _5331_genValue = ((_5321_generatedValues).Select(_5322_i)).dtor__1;
            _5329_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5329_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _5330_genKey, _5331_genValue, DAST.Format.BinOpFormat.create_NoFormat())));
            _5322_i = (_5322_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_5329_arguments);
          RAST._IExpr _out2110;
          DCOMP._IOwnership _out2111;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2110, out _out2111);
          r = _out2110;
          resultingOwnership = _out2111;
          return ;
        }
      } else if (_source192.is_MapBuilder) {
        DAST._IType _5332___mcc_h24 = _source192.dtor_keyType;
        DAST._IType _5333___mcc_h25 = _source192.dtor_valueType;
        DAST._IType _5334_valueType = _5333___mcc_h25;
        DAST._IType _5335_keyType = _5332___mcc_h24;
        {
          RAST._IType _5336_kType;
          RAST._IType _out2112;
          _out2112 = DCOMP.COMP.GenType(_5335_keyType, false, false);
          _5336_kType = _out2112;
          RAST._IType _5337_vType;
          RAST._IType _out2113;
          _out2113 = DCOMP.COMP.GenType(_5334_valueType, false, false);
          _5337_vType = _out2113;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_5336_kType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_5337_vType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2114;
          DCOMP._IOwnership _out2115;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2114, out _out2115);
          r = _out2114;
          resultingOwnership = _out2115;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source192.is_SeqUpdate) {
        DAST._IExpression _5338___mcc_h26 = _source192.dtor_expr;
        DAST._IExpression _5339___mcc_h27 = _source192.dtor_indexExpr;
        DAST._IExpression _5340___mcc_h28 = _source192.dtor_value;
        DAST._IExpression _5341_value = _5340___mcc_h28;
        DAST._IExpression _5342_index = _5339___mcc_h27;
        DAST._IExpression _5343_expr = _5338___mcc_h26;
        {
          RAST._IExpr _5344_exprR;
          DCOMP._IOwnership _5345___v107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5346_exprIdents;
          RAST._IExpr _out2116;
          DCOMP._IOwnership _out2117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2118;
          DCOMP.COMP.GenExpr(_5343_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2116, out _out2117, out _out2118);
          _5344_exprR = _out2116;
          _5345___v107 = _out2117;
          _5346_exprIdents = _out2118;
          RAST._IExpr _5347_indexR;
          DCOMP._IOwnership _5348_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5349_indexIdents;
          RAST._IExpr _out2119;
          DCOMP._IOwnership _out2120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2121;
          DCOMP.COMP.GenExpr(_5342_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2119, out _out2120, out _out2121);
          _5347_indexR = _out2119;
          _5348_indexOwnership = _out2120;
          _5349_indexIdents = _out2121;
          RAST._IExpr _5350_valueR;
          DCOMP._IOwnership _5351_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5352_valueIdents;
          RAST._IExpr _out2122;
          DCOMP._IOwnership _out2123;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2124;
          DCOMP.COMP.GenExpr(_5341_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2122, out _out2123, out _out2124);
          _5350_valueR = _out2122;
          _5351_valueOwnership = _out2123;
          _5352_valueIdents = _out2124;
          r = ((_5344_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5347_indexR, _5350_valueR));
          RAST._IExpr _out2125;
          DCOMP._IOwnership _out2126;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2125, out _out2126);
          r = _out2125;
          resultingOwnership = _out2126;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5346_exprIdents, _5349_indexIdents), _5352_valueIdents);
          return ;
        }
      } else if (_source192.is_MapUpdate) {
        DAST._IExpression _5353___mcc_h29 = _source192.dtor_expr;
        DAST._IExpression _5354___mcc_h30 = _source192.dtor_indexExpr;
        DAST._IExpression _5355___mcc_h31 = _source192.dtor_value;
        DAST._IExpression _5356_value = _5355___mcc_h31;
        DAST._IExpression _5357_index = _5354___mcc_h30;
        DAST._IExpression _5358_expr = _5353___mcc_h29;
        {
          RAST._IExpr _5359_exprR;
          DCOMP._IOwnership _5360___v108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5361_exprIdents;
          RAST._IExpr _out2127;
          DCOMP._IOwnership _out2128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2129;
          DCOMP.COMP.GenExpr(_5358_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2127, out _out2128, out _out2129);
          _5359_exprR = _out2127;
          _5360___v108 = _out2128;
          _5361_exprIdents = _out2129;
          RAST._IExpr _5362_indexR;
          DCOMP._IOwnership _5363_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5364_indexIdents;
          RAST._IExpr _out2130;
          DCOMP._IOwnership _out2131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2132;
          DCOMP.COMP.GenExpr(_5357_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2130, out _out2131, out _out2132);
          _5362_indexR = _out2130;
          _5363_indexOwnership = _out2131;
          _5364_indexIdents = _out2132;
          RAST._IExpr _5365_valueR;
          DCOMP._IOwnership _5366_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5367_valueIdents;
          RAST._IExpr _out2133;
          DCOMP._IOwnership _out2134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2135;
          DCOMP.COMP.GenExpr(_5356_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2133, out _out2134, out _out2135);
          _5365_valueR = _out2133;
          _5366_valueOwnership = _out2134;
          _5367_valueIdents = _out2135;
          r = ((_5359_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_5362_indexR, _5365_valueR));
          RAST._IExpr _out2136;
          DCOMP._IOwnership _out2137;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2136, out _out2137);
          r = _out2136;
          resultingOwnership = _out2137;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5361_exprIdents, _5364_indexIdents), _5367_valueIdents);
          return ;
        }
      } else if (_source192.is_SetBuilder) {
        DAST._IType _5368___mcc_h32 = _source192.dtor_elemType;
        DAST._IType _5369_elemType = _5368___mcc_h32;
        {
          RAST._IType _5370_eType;
          RAST._IType _out2138;
          _out2138 = DCOMP.COMP.GenType(_5369_elemType, false, false);
          _5370_eType = _out2138;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_5370_eType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2139;
          DCOMP._IOwnership _out2140;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2139, out _out2140);
          r = _out2139;
          resultingOwnership = _out2140;
          return ;
        }
      } else if (_source192.is_ToMultiset) {
        DAST._IExpression _5371___mcc_h33 = _source192.dtor_ToMultiset_a0;
        DAST._IExpression _5372_expr = _5371___mcc_h33;
        {
          RAST._IExpr _5373_recursiveGen;
          DCOMP._IOwnership _5374___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5375_recIdents;
          RAST._IExpr _out2141;
          DCOMP._IOwnership _out2142;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2143;
          DCOMP.COMP.GenExpr(_5372_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2141, out _out2142, out _out2143);
          _5373_recursiveGen = _out2141;
          _5374___v104 = _out2142;
          _5375_recIdents = _out2143;
          r = ((_5373_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _5375_recIdents;
          RAST._IExpr _out2144;
          DCOMP._IOwnership _out2145;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2144, out _out2145);
          r = _out2144;
          resultingOwnership = _out2145;
          return ;
        }
      } else if (_source192.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source193 = selfIdent;
          if (_source193.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out2146;
              DCOMP._IOwnership _out2147;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2146, out _out2147);
              r = _out2146;
              resultingOwnership = _out2147;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _5376___mcc_h273 = _source193.dtor_value;
            Dafny.ISequence<Dafny.Rune> _5377_id = _5376___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_5377_id);
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_5377_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_5377_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5377_id);
            }
          }
          return ;
        }
      } else if (_source192.is_Ite) {
        DAST._IExpression _5378___mcc_h34 = _source192.dtor_cond;
        DAST._IExpression _5379___mcc_h35 = _source192.dtor_thn;
        DAST._IExpression _5380___mcc_h36 = _source192.dtor_els;
        DAST._IExpression _5381_f = _5380___mcc_h36;
        DAST._IExpression _5382_t = _5379___mcc_h35;
        DAST._IExpression _5383_cond = _5378___mcc_h34;
        {
          RAST._IExpr _5384_cond;
          DCOMP._IOwnership _5385___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5386_recIdentsCond;
          RAST._IExpr _out2148;
          DCOMP._IOwnership _out2149;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2150;
          DCOMP.COMP.GenExpr(_5383_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2148, out _out2149, out _out2150);
          _5384_cond = _out2148;
          _5385___v109 = _out2149;
          _5386_recIdentsCond = _out2150;
          Dafny.ISequence<Dafny.Rune> _5387_condString;
          _5387_condString = (_5384_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _5388___v110;
          DCOMP._IOwnership _5389_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5390___v111;
          RAST._IExpr _out2151;
          DCOMP._IOwnership _out2152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2153;
          DCOMP.COMP.GenExpr(_5382_t, selfIdent, env, expectedOwnership, out _out2151, out _out2152, out _out2153);
          _5388___v110 = _out2151;
          _5389_tHasToBeOwned = _out2152;
          _5390___v111 = _out2153;
          RAST._IExpr _5391_fExpr;
          DCOMP._IOwnership _5392_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5393_recIdentsF;
          RAST._IExpr _out2154;
          DCOMP._IOwnership _out2155;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2156;
          DCOMP.COMP.GenExpr(_5381_f, selfIdent, env, _5389_tHasToBeOwned, out _out2154, out _out2155, out _out2156);
          _5391_fExpr = _out2154;
          _5392_fOwned = _out2155;
          _5393_recIdentsF = _out2156;
          Dafny.ISequence<Dafny.Rune> _5394_fString;
          _5394_fString = (_5391_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _5395_tExpr;
          DCOMP._IOwnership _5396___v112;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5397_recIdentsT;
          RAST._IExpr _out2157;
          DCOMP._IOwnership _out2158;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2159;
          DCOMP.COMP.GenExpr(_5382_t, selfIdent, env, _5392_fOwned, out _out2157, out _out2158, out _out2159);
          _5395_tExpr = _out2157;
          _5396___v112 = _out2158;
          _5397_recIdentsT = _out2159;
          Dafny.ISequence<Dafny.Rune> _5398_tString;
          _5398_tString = (_5395_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _5387_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _5398_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _5394_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out2160;
          DCOMP._IOwnership _out2161;
          DCOMP.COMP.FromOwnership(r, _5392_fOwned, expectedOwnership, out _out2160, out _out2161);
          r = _out2160;
          resultingOwnership = _out2161;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5386_recIdentsCond, _5397_recIdentsT), _5393_recIdentsF);
          return ;
        }
      } else if (_source192.is_UnOp) {
        DAST._IUnaryOp _5399___mcc_h37 = _source192.dtor_unOp;
        DAST._IExpression _5400___mcc_h38 = _source192.dtor_expr;
        DAST.Format._IUnOpFormat _5401___mcc_h39 = _source192.dtor_format1;
        DAST._IUnaryOp _source194 = _5399___mcc_h37;
        if (_source194.is_Not) {
          DAST.Format._IUnOpFormat _5402_format = _5401___mcc_h39;
          DAST._IExpression _5403_e = _5400___mcc_h38;
          {
            RAST._IExpr _5404_recursiveGen;
            DCOMP._IOwnership _5405___v113;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5406_recIdents;
            RAST._IExpr _out2162;
            DCOMP._IOwnership _out2163;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2164;
            DCOMP.COMP.GenExpr(_5403_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2162, out _out2163, out _out2164);
            _5404_recursiveGen = _out2162;
            _5405___v113 = _out2163;
            _5406_recIdents = _out2164;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _5404_recursiveGen, _5402_format);
            RAST._IExpr _out2165;
            DCOMP._IOwnership _out2166;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2165, out _out2166);
            r = _out2165;
            resultingOwnership = _out2166;
            readIdents = _5406_recIdents;
            return ;
          }
        } else if (_source194.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _5407_format = _5401___mcc_h39;
          DAST._IExpression _5408_e = _5400___mcc_h38;
          {
            RAST._IExpr _5409_recursiveGen;
            DCOMP._IOwnership _5410___v114;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5411_recIdents;
            RAST._IExpr _out2167;
            DCOMP._IOwnership _out2168;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2169;
            DCOMP.COMP.GenExpr(_5408_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2167, out _out2168, out _out2169);
            _5409_recursiveGen = _out2167;
            _5410___v114 = _out2168;
            _5411_recIdents = _out2169;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _5409_recursiveGen, _5407_format);
            RAST._IExpr _out2170;
            DCOMP._IOwnership _out2171;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2170, out _out2171);
            r = _out2170;
            resultingOwnership = _out2171;
            readIdents = _5411_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnOpFormat _5412_format = _5401___mcc_h39;
          DAST._IExpression _5413_e = _5400___mcc_h38;
          {
            RAST._IExpr _5414_recursiveGen;
            DCOMP._IOwnership _5415_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5416_recIdents;
            RAST._IExpr _out2172;
            DCOMP._IOwnership _out2173;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2174;
            DCOMP.COMP.GenExpr(_5413_e, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2172, out _out2173, out _out2174);
            _5414_recursiveGen = _out2172;
            _5415_recOwned = _out2173;
            _5416_recIdents = _out2174;
            r = ((_5414_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out2175;
            DCOMP._IOwnership _out2176;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2175, out _out2176);
            r = _out2175;
            resultingOwnership = _out2176;
            readIdents = _5416_recIdents;
            return ;
          }
        }
      } else if (_source192.is_BinOp) {
        DAST._IBinOp _5417___mcc_h40 = _source192.dtor_op;
        DAST._IExpression _5418___mcc_h41 = _source192.dtor_left;
        DAST._IExpression _5419___mcc_h42 = _source192.dtor_right;
        DAST.Format._IBinOpFormat _5420___mcc_h43 = _source192.dtor_format2;
        RAST._IExpr _out2177;
        DCOMP._IOwnership _out2178;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2179;
        DCOMP.COMP.GenExprBinary(e, selfIdent, env, expectedOwnership, out _out2177, out _out2178, out _out2179);
        r = _out2177;
        resultingOwnership = _out2178;
        readIdents = _out2179;
      } else if (_source192.is_ArrayLen) {
        DAST._IExpression _5421___mcc_h44 = _source192.dtor_expr;
        BigInteger _5422___mcc_h45 = _source192.dtor_dim;
        BigInteger _5423_dim = _5422___mcc_h45;
        DAST._IExpression _5424_expr = _5421___mcc_h44;
        {
          RAST._IExpr _5425_recursiveGen;
          DCOMP._IOwnership _5426___v119;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5427_recIdents;
          RAST._IExpr _out2180;
          DCOMP._IOwnership _out2181;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2182;
          DCOMP.COMP.GenExpr(_5424_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2180, out _out2181, out _out2182);
          _5425_recursiveGen = _out2180;
          _5426___v119 = _out2181;
          _5427_recIdents = _out2182;
          if ((_5423_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_5425_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _5428_s;
            _5428_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _5429_i;
            _5429_i = BigInteger.One;
            while ((_5429_i) < (_5423_dim)) {
              _5428_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _5428_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _5429_i = (_5429_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5425_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _5428_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out2183;
          DCOMP._IOwnership _out2184;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2183, out _out2184);
          r = _out2183;
          resultingOwnership = _out2184;
          readIdents = _5427_recIdents;
          return ;
        }
      } else if (_source192.is_MapKeys) {
        DAST._IExpression _5430___mcc_h46 = _source192.dtor_expr;
        DAST._IExpression _5431_expr = _5430___mcc_h46;
        {
          RAST._IExpr _5432_recursiveGen;
          DCOMP._IOwnership _5433___v120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5434_recIdents;
          RAST._IExpr _out2185;
          DCOMP._IOwnership _out2186;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2187;
          DCOMP.COMP.GenExpr(_5431_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2185, out _out2186, out _out2187);
          _5432_recursiveGen = _out2185;
          _5433___v120 = _out2186;
          _5434_recIdents = _out2187;
          readIdents = _5434_recIdents;
          r = ((_5432_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2188;
          DCOMP._IOwnership _out2189;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2188, out _out2189);
          r = _out2188;
          resultingOwnership = _out2189;
          return ;
        }
      } else if (_source192.is_MapValues) {
        DAST._IExpression _5435___mcc_h47 = _source192.dtor_expr;
        DAST._IExpression _5436_expr = _5435___mcc_h47;
        {
          RAST._IExpr _5437_recursiveGen;
          DCOMP._IOwnership _5438___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5439_recIdents;
          RAST._IExpr _out2190;
          DCOMP._IOwnership _out2191;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2192;
          DCOMP.COMP.GenExpr(_5436_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2190, out _out2191, out _out2192);
          _5437_recursiveGen = _out2190;
          _5438___v121 = _out2191;
          _5439_recIdents = _out2192;
          readIdents = _5439_recIdents;
          r = ((_5437_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2193;
          DCOMP._IOwnership _out2194;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2193, out _out2194);
          r = _out2193;
          resultingOwnership = _out2194;
          return ;
        }
      } else if (_source192.is_Select) {
        DAST._IExpression _5440___mcc_h48 = _source192.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _5441___mcc_h49 = _source192.dtor_field;
        bool _5442___mcc_h50 = _source192.dtor_isConstant;
        bool _5443___mcc_h51 = _source192.dtor_onDatatype;
        DAST._IExpression _source195 = _5440___mcc_h48;
        if (_source195.is_Literal) {
          DAST._ILiteral _5444___mcc_h52 = _source195.dtor_Literal_a0;
          bool _5445_isDatatype = _5443___mcc_h51;
          bool _5446_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5447_field = _5441___mcc_h49;
          DAST._IExpression _5448_on = _5440___mcc_h48;
          {
            RAST._IExpr _5449_onExpr;
            DCOMP._IOwnership _5450_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5451_recIdents;
            RAST._IExpr _out2195;
            DCOMP._IOwnership _out2196;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2197;
            DCOMP.COMP.GenExpr(_5448_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2195, out _out2196, out _out2197);
            _5449_onExpr = _out2195;
            _5450_onOwned = _out2196;
            _5451_recIdents = _out2197;
            if ((_5445_isDatatype) || (_5446_isConstant)) {
              r = ((_5449_onExpr).Sel(DCOMP.__default.escapeIdent(_5447_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2198;
              DCOMP._IOwnership _out2199;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2198, out _out2199);
              r = _out2198;
              resultingOwnership = _out2199;
            } else {
              Dafny.ISequence<Dafny.Rune> _5452_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5452_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5449_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5447_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2200;
              DCOMP._IOwnership _out2201;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5452_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2200, out _out2201);
              r = _out2200;
              resultingOwnership = _out2201;
            }
            readIdents = _5451_recIdents;
            return ;
          }
        } else if (_source195.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _5453___mcc_h54 = _source195.dtor_Ident_a0;
          bool _5454_isDatatype = _5443___mcc_h51;
          bool _5455_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5456_field = _5441___mcc_h49;
          DAST._IExpression _5457_on = _5440___mcc_h48;
          {
            RAST._IExpr _5458_onExpr;
            DCOMP._IOwnership _5459_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5460_recIdents;
            RAST._IExpr _out2202;
            DCOMP._IOwnership _out2203;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2204;
            DCOMP.COMP.GenExpr(_5457_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2202, out _out2203, out _out2204);
            _5458_onExpr = _out2202;
            _5459_onOwned = _out2203;
            _5460_recIdents = _out2204;
            if ((_5454_isDatatype) || (_5455_isConstant)) {
              r = ((_5458_onExpr).Sel(DCOMP.__default.escapeIdent(_5456_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2205;
              DCOMP._IOwnership _out2206;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2205, out _out2206);
              r = _out2205;
              resultingOwnership = _out2206;
            } else {
              Dafny.ISequence<Dafny.Rune> _5461_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5461_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5458_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5456_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2207;
              DCOMP._IOwnership _out2208;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5461_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2207, out _out2208);
              r = _out2207;
              resultingOwnership = _out2208;
            }
            readIdents = _5460_recIdents;
            return ;
          }
        } else if (_source195.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5462___mcc_h56 = _source195.dtor_Companion_a0;
          bool _5463_isDatatype = _5443___mcc_h51;
          bool _5464_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5465_field = _5441___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5466_c = _5462___mcc_h56;
          {
            RAST._IExpr _5467_onExpr;
            DCOMP._IOwnership _5468_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5469_recIdents;
            RAST._IExpr _out2209;
            DCOMP._IOwnership _out2210;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2211;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_5466_c), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2209, out _out2210, out _out2211);
            _5467_onExpr = _out2209;
            _5468_onOwned = _out2210;
            _5469_recIdents = _out2211;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5467_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_5465_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out2212;
            DCOMP._IOwnership _out2213;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2212, out _out2213);
            r = _out2212;
            resultingOwnership = _out2213;
            readIdents = _5469_recIdents;
            return ;
          }
        } else if (_source195.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _5470___mcc_h58 = _source195.dtor_Tuple_a0;
          bool _5471_isDatatype = _5443___mcc_h51;
          bool _5472_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5473_field = _5441___mcc_h49;
          DAST._IExpression _5474_on = _5440___mcc_h48;
          {
            RAST._IExpr _5475_onExpr;
            DCOMP._IOwnership _5476_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5477_recIdents;
            RAST._IExpr _out2214;
            DCOMP._IOwnership _out2215;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2216;
            DCOMP.COMP.GenExpr(_5474_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2214, out _out2215, out _out2216);
            _5475_onExpr = _out2214;
            _5476_onOwned = _out2215;
            _5477_recIdents = _out2216;
            if ((_5471_isDatatype) || (_5472_isConstant)) {
              r = ((_5475_onExpr).Sel(DCOMP.__default.escapeIdent(_5473_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2217;
              DCOMP._IOwnership _out2218;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2217, out _out2218);
              r = _out2217;
              resultingOwnership = _out2218;
            } else {
              Dafny.ISequence<Dafny.Rune> _5478_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5478_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5475_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5473_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2219;
              DCOMP._IOwnership _out2220;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5478_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2219, out _out2220);
              r = _out2219;
              resultingOwnership = _out2220;
            }
            readIdents = _5477_recIdents;
            return ;
          }
        } else if (_source195.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5479___mcc_h60 = _source195.dtor_path;
          Dafny.ISequence<DAST._IType> _5480___mcc_h61 = _source195.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5481___mcc_h62 = _source195.dtor_args;
          bool _5482_isDatatype = _5443___mcc_h51;
          bool _5483_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5484_field = _5441___mcc_h49;
          DAST._IExpression _5485_on = _5440___mcc_h48;
          {
            RAST._IExpr _5486_onExpr;
            DCOMP._IOwnership _5487_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5488_recIdents;
            RAST._IExpr _out2221;
            DCOMP._IOwnership _out2222;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2223;
            DCOMP.COMP.GenExpr(_5485_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2221, out _out2222, out _out2223);
            _5486_onExpr = _out2221;
            _5487_onOwned = _out2222;
            _5488_recIdents = _out2223;
            if ((_5482_isDatatype) || (_5483_isConstant)) {
              r = ((_5486_onExpr).Sel(DCOMP.__default.escapeIdent(_5484_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2224;
              DCOMP._IOwnership _out2225;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2224, out _out2225);
              r = _out2224;
              resultingOwnership = _out2225;
            } else {
              Dafny.ISequence<Dafny.Rune> _5489_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5489_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5486_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5484_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2226;
              DCOMP._IOwnership _out2227;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5489_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2226, out _out2227);
              r = _out2226;
              resultingOwnership = _out2227;
            }
            readIdents = _5488_recIdents;
            return ;
          }
        } else if (_source195.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _5490___mcc_h66 = _source195.dtor_dims;
          DAST._IType _5491___mcc_h67 = _source195.dtor_typ;
          bool _5492_isDatatype = _5443___mcc_h51;
          bool _5493_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5494_field = _5441___mcc_h49;
          DAST._IExpression _5495_on = _5440___mcc_h48;
          {
            RAST._IExpr _5496_onExpr;
            DCOMP._IOwnership _5497_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5498_recIdents;
            RAST._IExpr _out2228;
            DCOMP._IOwnership _out2229;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2230;
            DCOMP.COMP.GenExpr(_5495_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2228, out _out2229, out _out2230);
            _5496_onExpr = _out2228;
            _5497_onOwned = _out2229;
            _5498_recIdents = _out2230;
            if ((_5492_isDatatype) || (_5493_isConstant)) {
              r = ((_5496_onExpr).Sel(DCOMP.__default.escapeIdent(_5494_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2231;
              DCOMP._IOwnership _out2232;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2231, out _out2232);
              r = _out2231;
              resultingOwnership = _out2232;
            } else {
              Dafny.ISequence<Dafny.Rune> _5499_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5499_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5496_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5494_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2233;
              DCOMP._IOwnership _out2234;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5499_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2233, out _out2234);
              r = _out2233;
              resultingOwnership = _out2234;
            }
            readIdents = _5498_recIdents;
            return ;
          }
        } else if (_source195.is_DatatypeValue) {
          DAST._IDatatypeType _5500___mcc_h70 = _source195.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _5501___mcc_h71 = _source195.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _5502___mcc_h72 = _source195.dtor_variant;
          bool _5503___mcc_h73 = _source195.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5504___mcc_h74 = _source195.dtor_contents;
          bool _5505_isDatatype = _5443___mcc_h51;
          bool _5506_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5507_field = _5441___mcc_h49;
          DAST._IExpression _5508_on = _5440___mcc_h48;
          {
            RAST._IExpr _5509_onExpr;
            DCOMP._IOwnership _5510_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5511_recIdents;
            RAST._IExpr _out2235;
            DCOMP._IOwnership _out2236;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2237;
            DCOMP.COMP.GenExpr(_5508_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2235, out _out2236, out _out2237);
            _5509_onExpr = _out2235;
            _5510_onOwned = _out2236;
            _5511_recIdents = _out2237;
            if ((_5505_isDatatype) || (_5506_isConstant)) {
              r = ((_5509_onExpr).Sel(DCOMP.__default.escapeIdent(_5507_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2238;
              DCOMP._IOwnership _out2239;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2238, out _out2239);
              r = _out2238;
              resultingOwnership = _out2239;
            } else {
              Dafny.ISequence<Dafny.Rune> _5512_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5512_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5509_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5507_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2240;
              DCOMP._IOwnership _out2241;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5512_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2240, out _out2241);
              r = _out2240;
              resultingOwnership = _out2241;
            }
            readIdents = _5511_recIdents;
            return ;
          }
        } else if (_source195.is_Convert) {
          DAST._IExpression _5513___mcc_h80 = _source195.dtor_value;
          DAST._IType _5514___mcc_h81 = _source195.dtor_from;
          DAST._IType _5515___mcc_h82 = _source195.dtor_typ;
          bool _5516_isDatatype = _5443___mcc_h51;
          bool _5517_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5518_field = _5441___mcc_h49;
          DAST._IExpression _5519_on = _5440___mcc_h48;
          {
            RAST._IExpr _5520_onExpr;
            DCOMP._IOwnership _5521_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5522_recIdents;
            RAST._IExpr _out2242;
            DCOMP._IOwnership _out2243;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2244;
            DCOMP.COMP.GenExpr(_5519_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2242, out _out2243, out _out2244);
            _5520_onExpr = _out2242;
            _5521_onOwned = _out2243;
            _5522_recIdents = _out2244;
            if ((_5516_isDatatype) || (_5517_isConstant)) {
              r = ((_5520_onExpr).Sel(DCOMP.__default.escapeIdent(_5518_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2245;
              DCOMP._IOwnership _out2246;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2245, out _out2246);
              r = _out2245;
              resultingOwnership = _out2246;
            } else {
              Dafny.ISequence<Dafny.Rune> _5523_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5523_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5520_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5518_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2247;
              DCOMP._IOwnership _out2248;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5523_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2247, out _out2248);
              r = _out2247;
              resultingOwnership = _out2248;
            }
            readIdents = _5522_recIdents;
            return ;
          }
        } else if (_source195.is_SeqConstruct) {
          DAST._IExpression _5524___mcc_h86 = _source195.dtor_length;
          DAST._IExpression _5525___mcc_h87 = _source195.dtor_elem;
          bool _5526_isDatatype = _5443___mcc_h51;
          bool _5527_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5528_field = _5441___mcc_h49;
          DAST._IExpression _5529_on = _5440___mcc_h48;
          {
            RAST._IExpr _5530_onExpr;
            DCOMP._IOwnership _5531_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5532_recIdents;
            RAST._IExpr _out2249;
            DCOMP._IOwnership _out2250;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2251;
            DCOMP.COMP.GenExpr(_5529_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2249, out _out2250, out _out2251);
            _5530_onExpr = _out2249;
            _5531_onOwned = _out2250;
            _5532_recIdents = _out2251;
            if ((_5526_isDatatype) || (_5527_isConstant)) {
              r = ((_5530_onExpr).Sel(DCOMP.__default.escapeIdent(_5528_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2252;
              DCOMP._IOwnership _out2253;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2252, out _out2253);
              r = _out2252;
              resultingOwnership = _out2253;
            } else {
              Dafny.ISequence<Dafny.Rune> _5533_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5533_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5530_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5528_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2254;
              DCOMP._IOwnership _out2255;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5533_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2254, out _out2255);
              r = _out2254;
              resultingOwnership = _out2255;
            }
            readIdents = _5532_recIdents;
            return ;
          }
        } else if (_source195.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _5534___mcc_h90 = _source195.dtor_elements;
          DAST._IType _5535___mcc_h91 = _source195.dtor_typ;
          bool _5536_isDatatype = _5443___mcc_h51;
          bool _5537_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5538_field = _5441___mcc_h49;
          DAST._IExpression _5539_on = _5440___mcc_h48;
          {
            RAST._IExpr _5540_onExpr;
            DCOMP._IOwnership _5541_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5542_recIdents;
            RAST._IExpr _out2256;
            DCOMP._IOwnership _out2257;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2258;
            DCOMP.COMP.GenExpr(_5539_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2256, out _out2257, out _out2258);
            _5540_onExpr = _out2256;
            _5541_onOwned = _out2257;
            _5542_recIdents = _out2258;
            if ((_5536_isDatatype) || (_5537_isConstant)) {
              r = ((_5540_onExpr).Sel(DCOMP.__default.escapeIdent(_5538_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2259;
              DCOMP._IOwnership _out2260;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2259, out _out2260);
              r = _out2259;
              resultingOwnership = _out2260;
            } else {
              Dafny.ISequence<Dafny.Rune> _5543_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5543_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5540_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5538_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2261;
              DCOMP._IOwnership _out2262;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5543_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2261, out _out2262);
              r = _out2261;
              resultingOwnership = _out2262;
            }
            readIdents = _5542_recIdents;
            return ;
          }
        } else if (_source195.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _5544___mcc_h94 = _source195.dtor_elements;
          bool _5545_isDatatype = _5443___mcc_h51;
          bool _5546_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5547_field = _5441___mcc_h49;
          DAST._IExpression _5548_on = _5440___mcc_h48;
          {
            RAST._IExpr _5549_onExpr;
            DCOMP._IOwnership _5550_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5551_recIdents;
            RAST._IExpr _out2263;
            DCOMP._IOwnership _out2264;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2265;
            DCOMP.COMP.GenExpr(_5548_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2263, out _out2264, out _out2265);
            _5549_onExpr = _out2263;
            _5550_onOwned = _out2264;
            _5551_recIdents = _out2265;
            if ((_5545_isDatatype) || (_5546_isConstant)) {
              r = ((_5549_onExpr).Sel(DCOMP.__default.escapeIdent(_5547_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2266;
              DCOMP._IOwnership _out2267;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2266, out _out2267);
              r = _out2266;
              resultingOwnership = _out2267;
            } else {
              Dafny.ISequence<Dafny.Rune> _5552_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5552_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5549_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5547_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2268;
              DCOMP._IOwnership _out2269;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5552_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2268, out _out2269);
              r = _out2268;
              resultingOwnership = _out2269;
            }
            readIdents = _5551_recIdents;
            return ;
          }
        } else if (_source195.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _5553___mcc_h96 = _source195.dtor_elements;
          bool _5554_isDatatype = _5443___mcc_h51;
          bool _5555_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5556_field = _5441___mcc_h49;
          DAST._IExpression _5557_on = _5440___mcc_h48;
          {
            RAST._IExpr _5558_onExpr;
            DCOMP._IOwnership _5559_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5560_recIdents;
            RAST._IExpr _out2270;
            DCOMP._IOwnership _out2271;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2272;
            DCOMP.COMP.GenExpr(_5557_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2270, out _out2271, out _out2272);
            _5558_onExpr = _out2270;
            _5559_onOwned = _out2271;
            _5560_recIdents = _out2272;
            if ((_5554_isDatatype) || (_5555_isConstant)) {
              r = ((_5558_onExpr).Sel(DCOMP.__default.escapeIdent(_5556_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2273;
              DCOMP._IOwnership _out2274;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2273, out _out2274);
              r = _out2273;
              resultingOwnership = _out2274;
            } else {
              Dafny.ISequence<Dafny.Rune> _5561_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5561_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5558_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5556_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2275;
              DCOMP._IOwnership _out2276;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5561_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2275, out _out2276);
              r = _out2275;
              resultingOwnership = _out2276;
            }
            readIdents = _5560_recIdents;
            return ;
          }
        } else if (_source195.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _5562___mcc_h98 = _source195.dtor_mapElems;
          bool _5563_isDatatype = _5443___mcc_h51;
          bool _5564_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5565_field = _5441___mcc_h49;
          DAST._IExpression _5566_on = _5440___mcc_h48;
          {
            RAST._IExpr _5567_onExpr;
            DCOMP._IOwnership _5568_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5569_recIdents;
            RAST._IExpr _out2277;
            DCOMP._IOwnership _out2278;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2279;
            DCOMP.COMP.GenExpr(_5566_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2277, out _out2278, out _out2279);
            _5567_onExpr = _out2277;
            _5568_onOwned = _out2278;
            _5569_recIdents = _out2279;
            if ((_5563_isDatatype) || (_5564_isConstant)) {
              r = ((_5567_onExpr).Sel(DCOMP.__default.escapeIdent(_5565_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2280;
              DCOMP._IOwnership _out2281;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2280, out _out2281);
              r = _out2280;
              resultingOwnership = _out2281;
            } else {
              Dafny.ISequence<Dafny.Rune> _5570_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5570_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5567_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5565_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2282;
              DCOMP._IOwnership _out2283;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5570_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2282, out _out2283);
              r = _out2282;
              resultingOwnership = _out2283;
            }
            readIdents = _5569_recIdents;
            return ;
          }
        } else if (_source195.is_MapBuilder) {
          DAST._IType _5571___mcc_h100 = _source195.dtor_keyType;
          DAST._IType _5572___mcc_h101 = _source195.dtor_valueType;
          bool _5573_isDatatype = _5443___mcc_h51;
          bool _5574_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5575_field = _5441___mcc_h49;
          DAST._IExpression _5576_on = _5440___mcc_h48;
          {
            RAST._IExpr _5577_onExpr;
            DCOMP._IOwnership _5578_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5579_recIdents;
            RAST._IExpr _out2284;
            DCOMP._IOwnership _out2285;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2286;
            DCOMP.COMP.GenExpr(_5576_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2284, out _out2285, out _out2286);
            _5577_onExpr = _out2284;
            _5578_onOwned = _out2285;
            _5579_recIdents = _out2286;
            if ((_5573_isDatatype) || (_5574_isConstant)) {
              r = ((_5577_onExpr).Sel(DCOMP.__default.escapeIdent(_5575_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2287;
              DCOMP._IOwnership _out2288;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2287, out _out2288);
              r = _out2287;
              resultingOwnership = _out2288;
            } else {
              Dafny.ISequence<Dafny.Rune> _5580_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5580_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5577_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5575_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2289;
              DCOMP._IOwnership _out2290;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5580_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2289, out _out2290);
              r = _out2289;
              resultingOwnership = _out2290;
            }
            readIdents = _5579_recIdents;
            return ;
          }
        } else if (_source195.is_SeqUpdate) {
          DAST._IExpression _5581___mcc_h104 = _source195.dtor_expr;
          DAST._IExpression _5582___mcc_h105 = _source195.dtor_indexExpr;
          DAST._IExpression _5583___mcc_h106 = _source195.dtor_value;
          bool _5584_isDatatype = _5443___mcc_h51;
          bool _5585_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5586_field = _5441___mcc_h49;
          DAST._IExpression _5587_on = _5440___mcc_h48;
          {
            RAST._IExpr _5588_onExpr;
            DCOMP._IOwnership _5589_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5590_recIdents;
            RAST._IExpr _out2291;
            DCOMP._IOwnership _out2292;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2293;
            DCOMP.COMP.GenExpr(_5587_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2291, out _out2292, out _out2293);
            _5588_onExpr = _out2291;
            _5589_onOwned = _out2292;
            _5590_recIdents = _out2293;
            if ((_5584_isDatatype) || (_5585_isConstant)) {
              r = ((_5588_onExpr).Sel(DCOMP.__default.escapeIdent(_5586_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2294;
              DCOMP._IOwnership _out2295;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2294, out _out2295);
              r = _out2294;
              resultingOwnership = _out2295;
            } else {
              Dafny.ISequence<Dafny.Rune> _5591_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5591_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5588_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5586_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2296;
              DCOMP._IOwnership _out2297;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5591_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2296, out _out2297);
              r = _out2296;
              resultingOwnership = _out2297;
            }
            readIdents = _5590_recIdents;
            return ;
          }
        } else if (_source195.is_MapUpdate) {
          DAST._IExpression _5592___mcc_h110 = _source195.dtor_expr;
          DAST._IExpression _5593___mcc_h111 = _source195.dtor_indexExpr;
          DAST._IExpression _5594___mcc_h112 = _source195.dtor_value;
          bool _5595_isDatatype = _5443___mcc_h51;
          bool _5596_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5597_field = _5441___mcc_h49;
          DAST._IExpression _5598_on = _5440___mcc_h48;
          {
            RAST._IExpr _5599_onExpr;
            DCOMP._IOwnership _5600_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5601_recIdents;
            RAST._IExpr _out2298;
            DCOMP._IOwnership _out2299;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2300;
            DCOMP.COMP.GenExpr(_5598_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2298, out _out2299, out _out2300);
            _5599_onExpr = _out2298;
            _5600_onOwned = _out2299;
            _5601_recIdents = _out2300;
            if ((_5595_isDatatype) || (_5596_isConstant)) {
              r = ((_5599_onExpr).Sel(DCOMP.__default.escapeIdent(_5597_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2301;
              DCOMP._IOwnership _out2302;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2301, out _out2302);
              r = _out2301;
              resultingOwnership = _out2302;
            } else {
              Dafny.ISequence<Dafny.Rune> _5602_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5602_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5599_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5597_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2303;
              DCOMP._IOwnership _out2304;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5602_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2303, out _out2304);
              r = _out2303;
              resultingOwnership = _out2304;
            }
            readIdents = _5601_recIdents;
            return ;
          }
        } else if (_source195.is_SetBuilder) {
          DAST._IType _5603___mcc_h116 = _source195.dtor_elemType;
          bool _5604_isDatatype = _5443___mcc_h51;
          bool _5605_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5606_field = _5441___mcc_h49;
          DAST._IExpression _5607_on = _5440___mcc_h48;
          {
            RAST._IExpr _5608_onExpr;
            DCOMP._IOwnership _5609_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5610_recIdents;
            RAST._IExpr _out2305;
            DCOMP._IOwnership _out2306;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2307;
            DCOMP.COMP.GenExpr(_5607_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2305, out _out2306, out _out2307);
            _5608_onExpr = _out2305;
            _5609_onOwned = _out2306;
            _5610_recIdents = _out2307;
            if ((_5604_isDatatype) || (_5605_isConstant)) {
              r = ((_5608_onExpr).Sel(DCOMP.__default.escapeIdent(_5606_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2308;
              DCOMP._IOwnership _out2309;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2308, out _out2309);
              r = _out2308;
              resultingOwnership = _out2309;
            } else {
              Dafny.ISequence<Dafny.Rune> _5611_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5611_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5608_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5606_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2310;
              DCOMP._IOwnership _out2311;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5611_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2310, out _out2311);
              r = _out2310;
              resultingOwnership = _out2311;
            }
            readIdents = _5610_recIdents;
            return ;
          }
        } else if (_source195.is_ToMultiset) {
          DAST._IExpression _5612___mcc_h118 = _source195.dtor_ToMultiset_a0;
          bool _5613_isDatatype = _5443___mcc_h51;
          bool _5614_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5615_field = _5441___mcc_h49;
          DAST._IExpression _5616_on = _5440___mcc_h48;
          {
            RAST._IExpr _5617_onExpr;
            DCOMP._IOwnership _5618_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5619_recIdents;
            RAST._IExpr _out2312;
            DCOMP._IOwnership _out2313;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2314;
            DCOMP.COMP.GenExpr(_5616_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2312, out _out2313, out _out2314);
            _5617_onExpr = _out2312;
            _5618_onOwned = _out2313;
            _5619_recIdents = _out2314;
            if ((_5613_isDatatype) || (_5614_isConstant)) {
              r = ((_5617_onExpr).Sel(DCOMP.__default.escapeIdent(_5615_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2315;
              DCOMP._IOwnership _out2316;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2315, out _out2316);
              r = _out2315;
              resultingOwnership = _out2316;
            } else {
              Dafny.ISequence<Dafny.Rune> _5620_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5620_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5617_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5615_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2317;
              DCOMP._IOwnership _out2318;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5620_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2317, out _out2318);
              r = _out2317;
              resultingOwnership = _out2318;
            }
            readIdents = _5619_recIdents;
            return ;
          }
        } else if (_source195.is_This) {
          bool _5621_isDatatype = _5443___mcc_h51;
          bool _5622_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5623_field = _5441___mcc_h49;
          DAST._IExpression _5624_on = _5440___mcc_h48;
          {
            RAST._IExpr _5625_onExpr;
            DCOMP._IOwnership _5626_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5627_recIdents;
            RAST._IExpr _out2319;
            DCOMP._IOwnership _out2320;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2321;
            DCOMP.COMP.GenExpr(_5624_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2319, out _out2320, out _out2321);
            _5625_onExpr = _out2319;
            _5626_onOwned = _out2320;
            _5627_recIdents = _out2321;
            if ((_5621_isDatatype) || (_5622_isConstant)) {
              r = ((_5625_onExpr).Sel(DCOMP.__default.escapeIdent(_5623_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2322;
              DCOMP._IOwnership _out2323;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2322, out _out2323);
              r = _out2322;
              resultingOwnership = _out2323;
            } else {
              Dafny.ISequence<Dafny.Rune> _5628_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5628_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5625_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5623_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2324;
              DCOMP._IOwnership _out2325;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5628_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2324, out _out2325);
              r = _out2324;
              resultingOwnership = _out2325;
            }
            readIdents = _5627_recIdents;
            return ;
          }
        } else if (_source195.is_Ite) {
          DAST._IExpression _5629___mcc_h120 = _source195.dtor_cond;
          DAST._IExpression _5630___mcc_h121 = _source195.dtor_thn;
          DAST._IExpression _5631___mcc_h122 = _source195.dtor_els;
          bool _5632_isDatatype = _5443___mcc_h51;
          bool _5633_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5634_field = _5441___mcc_h49;
          DAST._IExpression _5635_on = _5440___mcc_h48;
          {
            RAST._IExpr _5636_onExpr;
            DCOMP._IOwnership _5637_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5638_recIdents;
            RAST._IExpr _out2326;
            DCOMP._IOwnership _out2327;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2328;
            DCOMP.COMP.GenExpr(_5635_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2326, out _out2327, out _out2328);
            _5636_onExpr = _out2326;
            _5637_onOwned = _out2327;
            _5638_recIdents = _out2328;
            if ((_5632_isDatatype) || (_5633_isConstant)) {
              r = ((_5636_onExpr).Sel(DCOMP.__default.escapeIdent(_5634_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2329;
              DCOMP._IOwnership _out2330;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2329, out _out2330);
              r = _out2329;
              resultingOwnership = _out2330;
            } else {
              Dafny.ISequence<Dafny.Rune> _5639_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5639_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5636_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5634_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2331;
              DCOMP._IOwnership _out2332;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5639_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2331, out _out2332);
              r = _out2331;
              resultingOwnership = _out2332;
            }
            readIdents = _5638_recIdents;
            return ;
          }
        } else if (_source195.is_UnOp) {
          DAST._IUnaryOp _5640___mcc_h126 = _source195.dtor_unOp;
          DAST._IExpression _5641___mcc_h127 = _source195.dtor_expr;
          DAST.Format._IUnOpFormat _5642___mcc_h128 = _source195.dtor_format1;
          bool _5643_isDatatype = _5443___mcc_h51;
          bool _5644_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5645_field = _5441___mcc_h49;
          DAST._IExpression _5646_on = _5440___mcc_h48;
          {
            RAST._IExpr _5647_onExpr;
            DCOMP._IOwnership _5648_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5649_recIdents;
            RAST._IExpr _out2333;
            DCOMP._IOwnership _out2334;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2335;
            DCOMP.COMP.GenExpr(_5646_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2333, out _out2334, out _out2335);
            _5647_onExpr = _out2333;
            _5648_onOwned = _out2334;
            _5649_recIdents = _out2335;
            if ((_5643_isDatatype) || (_5644_isConstant)) {
              r = ((_5647_onExpr).Sel(DCOMP.__default.escapeIdent(_5645_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2336;
              DCOMP._IOwnership _out2337;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2336, out _out2337);
              r = _out2336;
              resultingOwnership = _out2337;
            } else {
              Dafny.ISequence<Dafny.Rune> _5650_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5650_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5647_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5645_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2338;
              DCOMP._IOwnership _out2339;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5650_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2338, out _out2339);
              r = _out2338;
              resultingOwnership = _out2339;
            }
            readIdents = _5649_recIdents;
            return ;
          }
        } else if (_source195.is_BinOp) {
          DAST._IBinOp _5651___mcc_h132 = _source195.dtor_op;
          DAST._IExpression _5652___mcc_h133 = _source195.dtor_left;
          DAST._IExpression _5653___mcc_h134 = _source195.dtor_right;
          DAST.Format._IBinOpFormat _5654___mcc_h135 = _source195.dtor_format2;
          bool _5655_isDatatype = _5443___mcc_h51;
          bool _5656_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5657_field = _5441___mcc_h49;
          DAST._IExpression _5658_on = _5440___mcc_h48;
          {
            RAST._IExpr _5659_onExpr;
            DCOMP._IOwnership _5660_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5661_recIdents;
            RAST._IExpr _out2340;
            DCOMP._IOwnership _out2341;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2342;
            DCOMP.COMP.GenExpr(_5658_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2340, out _out2341, out _out2342);
            _5659_onExpr = _out2340;
            _5660_onOwned = _out2341;
            _5661_recIdents = _out2342;
            if ((_5655_isDatatype) || (_5656_isConstant)) {
              r = ((_5659_onExpr).Sel(DCOMP.__default.escapeIdent(_5657_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2343;
              DCOMP._IOwnership _out2344;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2343, out _out2344);
              r = _out2343;
              resultingOwnership = _out2344;
            } else {
              Dafny.ISequence<Dafny.Rune> _5662_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5662_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5659_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5657_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2345;
              DCOMP._IOwnership _out2346;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5662_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2345, out _out2346);
              r = _out2345;
              resultingOwnership = _out2346;
            }
            readIdents = _5661_recIdents;
            return ;
          }
        } else if (_source195.is_ArrayLen) {
          DAST._IExpression _5663___mcc_h140 = _source195.dtor_expr;
          BigInteger _5664___mcc_h141 = _source195.dtor_dim;
          bool _5665_isDatatype = _5443___mcc_h51;
          bool _5666_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5667_field = _5441___mcc_h49;
          DAST._IExpression _5668_on = _5440___mcc_h48;
          {
            RAST._IExpr _5669_onExpr;
            DCOMP._IOwnership _5670_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5671_recIdents;
            RAST._IExpr _out2347;
            DCOMP._IOwnership _out2348;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2349;
            DCOMP.COMP.GenExpr(_5668_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2347, out _out2348, out _out2349);
            _5669_onExpr = _out2347;
            _5670_onOwned = _out2348;
            _5671_recIdents = _out2349;
            if ((_5665_isDatatype) || (_5666_isConstant)) {
              r = ((_5669_onExpr).Sel(DCOMP.__default.escapeIdent(_5667_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2350;
              DCOMP._IOwnership _out2351;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2350, out _out2351);
              r = _out2350;
              resultingOwnership = _out2351;
            } else {
              Dafny.ISequence<Dafny.Rune> _5672_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5672_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5669_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5667_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2352;
              DCOMP._IOwnership _out2353;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5672_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2352, out _out2353);
              r = _out2352;
              resultingOwnership = _out2353;
            }
            readIdents = _5671_recIdents;
            return ;
          }
        } else if (_source195.is_MapKeys) {
          DAST._IExpression _5673___mcc_h144 = _source195.dtor_expr;
          bool _5674_isDatatype = _5443___mcc_h51;
          bool _5675_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5676_field = _5441___mcc_h49;
          DAST._IExpression _5677_on = _5440___mcc_h48;
          {
            RAST._IExpr _5678_onExpr;
            DCOMP._IOwnership _5679_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5680_recIdents;
            RAST._IExpr _out2354;
            DCOMP._IOwnership _out2355;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2356;
            DCOMP.COMP.GenExpr(_5677_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2354, out _out2355, out _out2356);
            _5678_onExpr = _out2354;
            _5679_onOwned = _out2355;
            _5680_recIdents = _out2356;
            if ((_5674_isDatatype) || (_5675_isConstant)) {
              r = ((_5678_onExpr).Sel(DCOMP.__default.escapeIdent(_5676_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2357;
              DCOMP._IOwnership _out2358;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2357, out _out2358);
              r = _out2357;
              resultingOwnership = _out2358;
            } else {
              Dafny.ISequence<Dafny.Rune> _5681_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5681_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5678_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5676_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2359;
              DCOMP._IOwnership _out2360;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5681_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2359, out _out2360);
              r = _out2359;
              resultingOwnership = _out2360;
            }
            readIdents = _5680_recIdents;
            return ;
          }
        } else if (_source195.is_MapValues) {
          DAST._IExpression _5682___mcc_h146 = _source195.dtor_expr;
          bool _5683_isDatatype = _5443___mcc_h51;
          bool _5684_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5685_field = _5441___mcc_h49;
          DAST._IExpression _5686_on = _5440___mcc_h48;
          {
            RAST._IExpr _5687_onExpr;
            DCOMP._IOwnership _5688_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5689_recIdents;
            RAST._IExpr _out2361;
            DCOMP._IOwnership _out2362;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2363;
            DCOMP.COMP.GenExpr(_5686_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2361, out _out2362, out _out2363);
            _5687_onExpr = _out2361;
            _5688_onOwned = _out2362;
            _5689_recIdents = _out2363;
            if ((_5683_isDatatype) || (_5684_isConstant)) {
              r = ((_5687_onExpr).Sel(DCOMP.__default.escapeIdent(_5685_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2364;
              DCOMP._IOwnership _out2365;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2364, out _out2365);
              r = _out2364;
              resultingOwnership = _out2365;
            } else {
              Dafny.ISequence<Dafny.Rune> _5690_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5690_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5687_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5685_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2366;
              DCOMP._IOwnership _out2367;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5690_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2366, out _out2367);
              r = _out2366;
              resultingOwnership = _out2367;
            }
            readIdents = _5689_recIdents;
            return ;
          }
        } else if (_source195.is_Select) {
          DAST._IExpression _5691___mcc_h148 = _source195.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _5692___mcc_h149 = _source195.dtor_field;
          bool _5693___mcc_h150 = _source195.dtor_isConstant;
          bool _5694___mcc_h151 = _source195.dtor_onDatatype;
          bool _5695_isDatatype = _5443___mcc_h51;
          bool _5696_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5697_field = _5441___mcc_h49;
          DAST._IExpression _5698_on = _5440___mcc_h48;
          {
            RAST._IExpr _5699_onExpr;
            DCOMP._IOwnership _5700_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5701_recIdents;
            RAST._IExpr _out2368;
            DCOMP._IOwnership _out2369;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2370;
            DCOMP.COMP.GenExpr(_5698_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2368, out _out2369, out _out2370);
            _5699_onExpr = _out2368;
            _5700_onOwned = _out2369;
            _5701_recIdents = _out2370;
            if ((_5695_isDatatype) || (_5696_isConstant)) {
              r = ((_5699_onExpr).Sel(DCOMP.__default.escapeIdent(_5697_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2371;
              DCOMP._IOwnership _out2372;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2371, out _out2372);
              r = _out2371;
              resultingOwnership = _out2372;
            } else {
              Dafny.ISequence<Dafny.Rune> _5702_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5702_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5699_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5697_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2373;
              DCOMP._IOwnership _out2374;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5702_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2373, out _out2374);
              r = _out2373;
              resultingOwnership = _out2374;
            }
            readIdents = _5701_recIdents;
            return ;
          }
        } else if (_source195.is_SelectFn) {
          DAST._IExpression _5703___mcc_h156 = _source195.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _5704___mcc_h157 = _source195.dtor_field;
          bool _5705___mcc_h158 = _source195.dtor_onDatatype;
          bool _5706___mcc_h159 = _source195.dtor_isStatic;
          BigInteger _5707___mcc_h160 = _source195.dtor_arity;
          bool _5708_isDatatype = _5443___mcc_h51;
          bool _5709_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5710_field = _5441___mcc_h49;
          DAST._IExpression _5711_on = _5440___mcc_h48;
          {
            RAST._IExpr _5712_onExpr;
            DCOMP._IOwnership _5713_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5714_recIdents;
            RAST._IExpr _out2375;
            DCOMP._IOwnership _out2376;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2377;
            DCOMP.COMP.GenExpr(_5711_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2375, out _out2376, out _out2377);
            _5712_onExpr = _out2375;
            _5713_onOwned = _out2376;
            _5714_recIdents = _out2377;
            if ((_5708_isDatatype) || (_5709_isConstant)) {
              r = ((_5712_onExpr).Sel(DCOMP.__default.escapeIdent(_5710_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2378;
              DCOMP._IOwnership _out2379;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2378, out _out2379);
              r = _out2378;
              resultingOwnership = _out2379;
            } else {
              Dafny.ISequence<Dafny.Rune> _5715_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5715_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5712_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5710_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2380;
              DCOMP._IOwnership _out2381;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5715_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2380, out _out2381);
              r = _out2380;
              resultingOwnership = _out2381;
            }
            readIdents = _5714_recIdents;
            return ;
          }
        } else if (_source195.is_Index) {
          DAST._IExpression _5716___mcc_h166 = _source195.dtor_expr;
          DAST._ICollKind _5717___mcc_h167 = _source195.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _5718___mcc_h168 = _source195.dtor_indices;
          bool _5719_isDatatype = _5443___mcc_h51;
          bool _5720_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5721_field = _5441___mcc_h49;
          DAST._IExpression _5722_on = _5440___mcc_h48;
          {
            RAST._IExpr _5723_onExpr;
            DCOMP._IOwnership _5724_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5725_recIdents;
            RAST._IExpr _out2382;
            DCOMP._IOwnership _out2383;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2384;
            DCOMP.COMP.GenExpr(_5722_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2382, out _out2383, out _out2384);
            _5723_onExpr = _out2382;
            _5724_onOwned = _out2383;
            _5725_recIdents = _out2384;
            if ((_5719_isDatatype) || (_5720_isConstant)) {
              r = ((_5723_onExpr).Sel(DCOMP.__default.escapeIdent(_5721_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2385;
              DCOMP._IOwnership _out2386;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2385, out _out2386);
              r = _out2385;
              resultingOwnership = _out2386;
            } else {
              Dafny.ISequence<Dafny.Rune> _5726_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5726_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5723_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5721_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2387;
              DCOMP._IOwnership _out2388;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5726_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2387, out _out2388);
              r = _out2387;
              resultingOwnership = _out2388;
            }
            readIdents = _5725_recIdents;
            return ;
          }
        } else if (_source195.is_IndexRange) {
          DAST._IExpression _5727___mcc_h172 = _source195.dtor_expr;
          bool _5728___mcc_h173 = _source195.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _5729___mcc_h174 = _source195.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _5730___mcc_h175 = _source195.dtor_high;
          bool _5731_isDatatype = _5443___mcc_h51;
          bool _5732_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5733_field = _5441___mcc_h49;
          DAST._IExpression _5734_on = _5440___mcc_h48;
          {
            RAST._IExpr _5735_onExpr;
            DCOMP._IOwnership _5736_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5737_recIdents;
            RAST._IExpr _out2389;
            DCOMP._IOwnership _out2390;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2391;
            DCOMP.COMP.GenExpr(_5734_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2389, out _out2390, out _out2391);
            _5735_onExpr = _out2389;
            _5736_onOwned = _out2390;
            _5737_recIdents = _out2391;
            if ((_5731_isDatatype) || (_5732_isConstant)) {
              r = ((_5735_onExpr).Sel(DCOMP.__default.escapeIdent(_5733_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2392;
              DCOMP._IOwnership _out2393;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2392, out _out2393);
              r = _out2392;
              resultingOwnership = _out2393;
            } else {
              Dafny.ISequence<Dafny.Rune> _5738_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5738_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5735_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5733_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2394;
              DCOMP._IOwnership _out2395;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5738_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2394, out _out2395);
              r = _out2394;
              resultingOwnership = _out2395;
            }
            readIdents = _5737_recIdents;
            return ;
          }
        } else if (_source195.is_TupleSelect) {
          DAST._IExpression _5739___mcc_h180 = _source195.dtor_expr;
          BigInteger _5740___mcc_h181 = _source195.dtor_index;
          bool _5741_isDatatype = _5443___mcc_h51;
          bool _5742_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5743_field = _5441___mcc_h49;
          DAST._IExpression _5744_on = _5440___mcc_h48;
          {
            RAST._IExpr _5745_onExpr;
            DCOMP._IOwnership _5746_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5747_recIdents;
            RAST._IExpr _out2396;
            DCOMP._IOwnership _out2397;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2398;
            DCOMP.COMP.GenExpr(_5744_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2396, out _out2397, out _out2398);
            _5745_onExpr = _out2396;
            _5746_onOwned = _out2397;
            _5747_recIdents = _out2398;
            if ((_5741_isDatatype) || (_5742_isConstant)) {
              r = ((_5745_onExpr).Sel(DCOMP.__default.escapeIdent(_5743_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2399;
              DCOMP._IOwnership _out2400;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2399, out _out2400);
              r = _out2399;
              resultingOwnership = _out2400;
            } else {
              Dafny.ISequence<Dafny.Rune> _5748_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5748_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5745_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5743_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2401;
              DCOMP._IOwnership _out2402;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5748_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2401, out _out2402);
              r = _out2401;
              resultingOwnership = _out2402;
            }
            readIdents = _5747_recIdents;
            return ;
          }
        } else if (_source195.is_Call) {
          DAST._IExpression _5749___mcc_h184 = _source195.dtor_on;
          DAST._ICallName _5750___mcc_h185 = _source195.dtor_callName;
          Dafny.ISequence<DAST._IType> _5751___mcc_h186 = _source195.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5752___mcc_h187 = _source195.dtor_args;
          bool _5753_isDatatype = _5443___mcc_h51;
          bool _5754_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5755_field = _5441___mcc_h49;
          DAST._IExpression _5756_on = _5440___mcc_h48;
          {
            RAST._IExpr _5757_onExpr;
            DCOMP._IOwnership _5758_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5759_recIdents;
            RAST._IExpr _out2403;
            DCOMP._IOwnership _out2404;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2405;
            DCOMP.COMP.GenExpr(_5756_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2403, out _out2404, out _out2405);
            _5757_onExpr = _out2403;
            _5758_onOwned = _out2404;
            _5759_recIdents = _out2405;
            if ((_5753_isDatatype) || (_5754_isConstant)) {
              r = ((_5757_onExpr).Sel(DCOMP.__default.escapeIdent(_5755_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2406;
              DCOMP._IOwnership _out2407;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2406, out _out2407);
              r = _out2406;
              resultingOwnership = _out2407;
            } else {
              Dafny.ISequence<Dafny.Rune> _5760_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5760_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5757_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5755_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2408;
              DCOMP._IOwnership _out2409;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5760_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2408, out _out2409);
              r = _out2408;
              resultingOwnership = _out2409;
            }
            readIdents = _5759_recIdents;
            return ;
          }
        } else if (_source195.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _5761___mcc_h192 = _source195.dtor_params;
          DAST._IType _5762___mcc_h193 = _source195.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _5763___mcc_h194 = _source195.dtor_body;
          bool _5764_isDatatype = _5443___mcc_h51;
          bool _5765_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5766_field = _5441___mcc_h49;
          DAST._IExpression _5767_on = _5440___mcc_h48;
          {
            RAST._IExpr _5768_onExpr;
            DCOMP._IOwnership _5769_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5770_recIdents;
            RAST._IExpr _out2410;
            DCOMP._IOwnership _out2411;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2412;
            DCOMP.COMP.GenExpr(_5767_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2410, out _out2411, out _out2412);
            _5768_onExpr = _out2410;
            _5769_onOwned = _out2411;
            _5770_recIdents = _out2412;
            if ((_5764_isDatatype) || (_5765_isConstant)) {
              r = ((_5768_onExpr).Sel(DCOMP.__default.escapeIdent(_5766_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2413;
              DCOMP._IOwnership _out2414;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2413, out _out2414);
              r = _out2413;
              resultingOwnership = _out2414;
            } else {
              Dafny.ISequence<Dafny.Rune> _5771_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5771_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5768_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5766_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2415;
              DCOMP._IOwnership _out2416;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5771_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2415, out _out2416);
              r = _out2415;
              resultingOwnership = _out2416;
            }
            readIdents = _5770_recIdents;
            return ;
          }
        } else if (_source195.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5772___mcc_h198 = _source195.dtor_values;
          DAST._IType _5773___mcc_h199 = _source195.dtor_retType;
          DAST._IExpression _5774___mcc_h200 = _source195.dtor_expr;
          bool _5775_isDatatype = _5443___mcc_h51;
          bool _5776_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5777_field = _5441___mcc_h49;
          DAST._IExpression _5778_on = _5440___mcc_h48;
          {
            RAST._IExpr _5779_onExpr;
            DCOMP._IOwnership _5780_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5781_recIdents;
            RAST._IExpr _out2417;
            DCOMP._IOwnership _out2418;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2419;
            DCOMP.COMP.GenExpr(_5778_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2417, out _out2418, out _out2419);
            _5779_onExpr = _out2417;
            _5780_onOwned = _out2418;
            _5781_recIdents = _out2419;
            if ((_5775_isDatatype) || (_5776_isConstant)) {
              r = ((_5779_onExpr).Sel(DCOMP.__default.escapeIdent(_5777_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2420;
              DCOMP._IOwnership _out2421;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2420, out _out2421);
              r = _out2420;
              resultingOwnership = _out2421;
            } else {
              Dafny.ISequence<Dafny.Rune> _5782_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5782_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5779_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5777_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2422;
              DCOMP._IOwnership _out2423;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5782_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2422, out _out2423);
              r = _out2422;
              resultingOwnership = _out2423;
            }
            readIdents = _5781_recIdents;
            return ;
          }
        } else if (_source195.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _5783___mcc_h204 = _source195.dtor_name;
          DAST._IType _5784___mcc_h205 = _source195.dtor_typ;
          DAST._IExpression _5785___mcc_h206 = _source195.dtor_value;
          DAST._IExpression _5786___mcc_h207 = _source195.dtor_iifeBody;
          bool _5787_isDatatype = _5443___mcc_h51;
          bool _5788_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5789_field = _5441___mcc_h49;
          DAST._IExpression _5790_on = _5440___mcc_h48;
          {
            RAST._IExpr _5791_onExpr;
            DCOMP._IOwnership _5792_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5793_recIdents;
            RAST._IExpr _out2424;
            DCOMP._IOwnership _out2425;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2426;
            DCOMP.COMP.GenExpr(_5790_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2424, out _out2425, out _out2426);
            _5791_onExpr = _out2424;
            _5792_onOwned = _out2425;
            _5793_recIdents = _out2426;
            if ((_5787_isDatatype) || (_5788_isConstant)) {
              r = ((_5791_onExpr).Sel(DCOMP.__default.escapeIdent(_5789_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2427;
              DCOMP._IOwnership _out2428;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2427, out _out2428);
              r = _out2427;
              resultingOwnership = _out2428;
            } else {
              Dafny.ISequence<Dafny.Rune> _5794_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5794_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5791_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5789_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2429;
              DCOMP._IOwnership _out2430;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5794_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2429, out _out2430);
              r = _out2429;
              resultingOwnership = _out2430;
            }
            readIdents = _5793_recIdents;
            return ;
          }
        } else if (_source195.is_Apply) {
          DAST._IExpression _5795___mcc_h212 = _source195.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _5796___mcc_h213 = _source195.dtor_args;
          bool _5797_isDatatype = _5443___mcc_h51;
          bool _5798_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5799_field = _5441___mcc_h49;
          DAST._IExpression _5800_on = _5440___mcc_h48;
          {
            RAST._IExpr _5801_onExpr;
            DCOMP._IOwnership _5802_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5803_recIdents;
            RAST._IExpr _out2431;
            DCOMP._IOwnership _out2432;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2433;
            DCOMP.COMP.GenExpr(_5800_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2431, out _out2432, out _out2433);
            _5801_onExpr = _out2431;
            _5802_onOwned = _out2432;
            _5803_recIdents = _out2433;
            if ((_5797_isDatatype) || (_5798_isConstant)) {
              r = ((_5801_onExpr).Sel(DCOMP.__default.escapeIdent(_5799_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2434;
              DCOMP._IOwnership _out2435;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2434, out _out2435);
              r = _out2434;
              resultingOwnership = _out2435;
            } else {
              Dafny.ISequence<Dafny.Rune> _5804_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5804_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5801_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5799_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2436;
              DCOMP._IOwnership _out2437;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5804_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2436, out _out2437);
              r = _out2436;
              resultingOwnership = _out2437;
            }
            readIdents = _5803_recIdents;
            return ;
          }
        } else if (_source195.is_TypeTest) {
          DAST._IExpression _5805___mcc_h216 = _source195.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5806___mcc_h217 = _source195.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _5807___mcc_h218 = _source195.dtor_variant;
          bool _5808_isDatatype = _5443___mcc_h51;
          bool _5809_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5810_field = _5441___mcc_h49;
          DAST._IExpression _5811_on = _5440___mcc_h48;
          {
            RAST._IExpr _5812_onExpr;
            DCOMP._IOwnership _5813_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5814_recIdents;
            RAST._IExpr _out2438;
            DCOMP._IOwnership _out2439;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2440;
            DCOMP.COMP.GenExpr(_5811_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2438, out _out2439, out _out2440);
            _5812_onExpr = _out2438;
            _5813_onOwned = _out2439;
            _5814_recIdents = _out2440;
            if ((_5808_isDatatype) || (_5809_isConstant)) {
              r = ((_5812_onExpr).Sel(DCOMP.__default.escapeIdent(_5810_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2441;
              DCOMP._IOwnership _out2442;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2441, out _out2442);
              r = _out2441;
              resultingOwnership = _out2442;
            } else {
              Dafny.ISequence<Dafny.Rune> _5815_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5815_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5812_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5810_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2443;
              DCOMP._IOwnership _out2444;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5815_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2443, out _out2444);
              r = _out2443;
              resultingOwnership = _out2444;
            }
            readIdents = _5814_recIdents;
            return ;
          }
        } else if (_source195.is_InitializationValue) {
          DAST._IType _5816___mcc_h222 = _source195.dtor_typ;
          bool _5817_isDatatype = _5443___mcc_h51;
          bool _5818_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5819_field = _5441___mcc_h49;
          DAST._IExpression _5820_on = _5440___mcc_h48;
          {
            RAST._IExpr _5821_onExpr;
            DCOMP._IOwnership _5822_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5823_recIdents;
            RAST._IExpr _out2445;
            DCOMP._IOwnership _out2446;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2447;
            DCOMP.COMP.GenExpr(_5820_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2445, out _out2446, out _out2447);
            _5821_onExpr = _out2445;
            _5822_onOwned = _out2446;
            _5823_recIdents = _out2447;
            if ((_5817_isDatatype) || (_5818_isConstant)) {
              r = ((_5821_onExpr).Sel(DCOMP.__default.escapeIdent(_5819_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2448;
              DCOMP._IOwnership _out2449;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2448, out _out2449);
              r = _out2448;
              resultingOwnership = _out2449;
            } else {
              Dafny.ISequence<Dafny.Rune> _5824_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5824_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5821_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5819_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2450;
              DCOMP._IOwnership _out2451;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5824_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2450, out _out2451);
              r = _out2450;
              resultingOwnership = _out2451;
            }
            readIdents = _5823_recIdents;
            return ;
          }
        } else if (_source195.is_BoolBoundedPool) {
          bool _5825_isDatatype = _5443___mcc_h51;
          bool _5826_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5827_field = _5441___mcc_h49;
          DAST._IExpression _5828_on = _5440___mcc_h48;
          {
            RAST._IExpr _5829_onExpr;
            DCOMP._IOwnership _5830_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5831_recIdents;
            RAST._IExpr _out2452;
            DCOMP._IOwnership _out2453;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2454;
            DCOMP.COMP.GenExpr(_5828_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2452, out _out2453, out _out2454);
            _5829_onExpr = _out2452;
            _5830_onOwned = _out2453;
            _5831_recIdents = _out2454;
            if ((_5825_isDatatype) || (_5826_isConstant)) {
              r = ((_5829_onExpr).Sel(DCOMP.__default.escapeIdent(_5827_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2455;
              DCOMP._IOwnership _out2456;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2455, out _out2456);
              r = _out2455;
              resultingOwnership = _out2456;
            } else {
              Dafny.ISequence<Dafny.Rune> _5832_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5832_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5829_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5827_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2457;
              DCOMP._IOwnership _out2458;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5832_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2457, out _out2458);
              r = _out2457;
              resultingOwnership = _out2458;
            }
            readIdents = _5831_recIdents;
            return ;
          }
        } else if (_source195.is_SetBoundedPool) {
          DAST._IExpression _5833___mcc_h224 = _source195.dtor_of;
          bool _5834_isDatatype = _5443___mcc_h51;
          bool _5835_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5836_field = _5441___mcc_h49;
          DAST._IExpression _5837_on = _5440___mcc_h48;
          {
            RAST._IExpr _5838_onExpr;
            DCOMP._IOwnership _5839_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5840_recIdents;
            RAST._IExpr _out2459;
            DCOMP._IOwnership _out2460;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2461;
            DCOMP.COMP.GenExpr(_5837_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2459, out _out2460, out _out2461);
            _5838_onExpr = _out2459;
            _5839_onOwned = _out2460;
            _5840_recIdents = _out2461;
            if ((_5834_isDatatype) || (_5835_isConstant)) {
              r = ((_5838_onExpr).Sel(DCOMP.__default.escapeIdent(_5836_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2462;
              DCOMP._IOwnership _out2463;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2462, out _out2463);
              r = _out2462;
              resultingOwnership = _out2463;
            } else {
              Dafny.ISequence<Dafny.Rune> _5841_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5841_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5838_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5836_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2464;
              DCOMP._IOwnership _out2465;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5841_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2464, out _out2465);
              r = _out2464;
              resultingOwnership = _out2465;
            }
            readIdents = _5840_recIdents;
            return ;
          }
        } else if (_source195.is_SeqBoundedPool) {
          DAST._IExpression _5842___mcc_h226 = _source195.dtor_of;
          bool _5843___mcc_h227 = _source195.dtor_includeDuplicates;
          bool _5844_isDatatype = _5443___mcc_h51;
          bool _5845_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5846_field = _5441___mcc_h49;
          DAST._IExpression _5847_on = _5440___mcc_h48;
          {
            RAST._IExpr _5848_onExpr;
            DCOMP._IOwnership _5849_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5850_recIdents;
            RAST._IExpr _out2466;
            DCOMP._IOwnership _out2467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2468;
            DCOMP.COMP.GenExpr(_5847_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2466, out _out2467, out _out2468);
            _5848_onExpr = _out2466;
            _5849_onOwned = _out2467;
            _5850_recIdents = _out2468;
            if ((_5844_isDatatype) || (_5845_isConstant)) {
              r = ((_5848_onExpr).Sel(DCOMP.__default.escapeIdent(_5846_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2469;
              DCOMP._IOwnership _out2470;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2469, out _out2470);
              r = _out2469;
              resultingOwnership = _out2470;
            } else {
              Dafny.ISequence<Dafny.Rune> _5851_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5851_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5848_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5846_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2471;
              DCOMP._IOwnership _out2472;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5851_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2471, out _out2472);
              r = _out2471;
              resultingOwnership = _out2472;
            }
            readIdents = _5850_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _5852___mcc_h230 = _source195.dtor_lo;
          DAST._IExpression _5853___mcc_h231 = _source195.dtor_hi;
          bool _5854_isDatatype = _5443___mcc_h51;
          bool _5855_isConstant = _5442___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5856_field = _5441___mcc_h49;
          DAST._IExpression _5857_on = _5440___mcc_h48;
          {
            RAST._IExpr _5858_onExpr;
            DCOMP._IOwnership _5859_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5860_recIdents;
            RAST._IExpr _out2473;
            DCOMP._IOwnership _out2474;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2475;
            DCOMP.COMP.GenExpr(_5857_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2473, out _out2474, out _out2475);
            _5858_onExpr = _out2473;
            _5859_onOwned = _out2474;
            _5860_recIdents = _out2475;
            if ((_5854_isDatatype) || (_5855_isConstant)) {
              r = ((_5858_onExpr).Sel(DCOMP.__default.escapeIdent(_5856_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2476;
              DCOMP._IOwnership _out2477;
              DCOMP.COMP.FromOwnership(r, DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2476, out _out2477);
              r = _out2476;
              resultingOwnership = _out2477;
            } else {
              Dafny.ISequence<Dafny.Rune> _5861_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5861_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5858_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5856_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2478;
              DCOMP._IOwnership _out2479;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5861_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2478, out _out2479);
              r = _out2478;
              resultingOwnership = _out2479;
            }
            readIdents = _5860_recIdents;
            return ;
          }
        }
      } else if (_source192.is_SelectFn) {
        DAST._IExpression _5862___mcc_h234 = _source192.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _5863___mcc_h235 = _source192.dtor_field;
        bool _5864___mcc_h236 = _source192.dtor_onDatatype;
        bool _5865___mcc_h237 = _source192.dtor_isStatic;
        BigInteger _5866___mcc_h238 = _source192.dtor_arity;
        BigInteger _5867_arity = _5866___mcc_h238;
        bool _5868_isStatic = _5865___mcc_h237;
        bool _5869_isDatatype = _5864___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _5870_field = _5863___mcc_h235;
        DAST._IExpression _5871_on = _5862___mcc_h234;
        {
          RAST._IExpr _5872_onExpr;
          DCOMP._IOwnership _5873_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5874_recIdents;
          RAST._IExpr _out2480;
          DCOMP._IOwnership _out2481;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2482;
          DCOMP.COMP.GenExpr(_5871_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2480, out _out2481, out _out2482);
          _5872_onExpr = _out2480;
          _5873_onOwned = _out2481;
          _5874_recIdents = _out2482;
          Dafny.ISequence<Dafny.Rune> _5875_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _5876_onString;
          _5876_onString = (_5872_onExpr)._ToString(DCOMP.__default.IND);
          if (_5868_isStatic) {
            _5875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5876_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_5870_field));
          } else {
            _5875_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _5875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _5876_onString), ((object.Equals(_5873_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _5877_args;
            _5877_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _5878_i;
            _5878_i = BigInteger.Zero;
            while ((_5878_i) < (_5867_arity)) {
              if ((_5878_i).Sign == 1) {
                _5877_args = Dafny.Sequence<Dafny.Rune>.Concat(_5877_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _5877_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5877_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_5878_i));
              _5878_i = (_5878_i) + (BigInteger.One);
            }
            _5875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _5877_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _5875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _5870_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _5877_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _5875_s = Dafny.Sequence<Dafny.Rune>.Concat(_5875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _5875_s = Dafny.Sequence<Dafny.Rune>.Concat(_5875_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _5879_typeShape;
          _5879_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _5880_i;
          _5880_i = BigInteger.Zero;
          while ((_5880_i) < (_5867_arity)) {
            if ((_5880_i).Sign == 1) {
              _5879_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5879_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _5879_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5879_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _5880_i = (_5880_i) + (BigInteger.One);
          }
          _5879_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5879_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _5875_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _5875_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _5879_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_5875_s);
          RAST._IExpr _out2483;
          DCOMP._IOwnership _out2484;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2483, out _out2484);
          r = _out2483;
          resultingOwnership = _out2484;
          readIdents = _5874_recIdents;
          return ;
        }
      } else if (_source192.is_Index) {
        DAST._IExpression _5881___mcc_h239 = _source192.dtor_expr;
        DAST._ICollKind _5882___mcc_h240 = _source192.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _5883___mcc_h241 = _source192.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _5884_indices = _5883___mcc_h241;
        DAST._ICollKind _5885_collKind = _5882___mcc_h240;
        DAST._IExpression _5886_on = _5881___mcc_h239;
        {
          RAST._IExpr _5887_onExpr;
          DCOMP._IOwnership _5888_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5889_recIdents;
          RAST._IExpr _out2485;
          DCOMP._IOwnership _out2486;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2487;
          DCOMP.COMP.GenExpr(_5886_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2485, out _out2486, out _out2487);
          _5887_onExpr = _out2485;
          _5888_onOwned = _out2486;
          _5889_recIdents = _out2487;
          readIdents = _5889_recIdents;
          r = _5887_onExpr;
          BigInteger _5890_i;
          _5890_i = BigInteger.Zero;
          while ((_5890_i) < (new BigInteger((_5884_indices).Count))) {
            if (object.Equals(_5885_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _5891_idx;
            DCOMP._IOwnership _5892_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5893_recIdentsIdx;
            RAST._IExpr _out2488;
            DCOMP._IOwnership _out2489;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2490;
            DCOMP.COMP.GenExpr((_5884_indices).Select(_5890_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2488, out _out2489, out _out2490);
            _5891_idx = _out2488;
            _5892_idxOwned = _out2489;
            _5893_recIdentsIdx = _out2490;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_5891_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5893_recIdentsIdx);
            _5890_i = (_5890_i) + (BigInteger.One);
          }
          RAST._IExpr _out2491;
          DCOMP._IOwnership _out2492;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2491, out _out2492);
          r = _out2491;
          resultingOwnership = _out2492;
          return ;
        }
      } else if (_source192.is_IndexRange) {
        DAST._IExpression _5894___mcc_h242 = _source192.dtor_expr;
        bool _5895___mcc_h243 = _source192.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _5896___mcc_h244 = _source192.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _5897___mcc_h245 = _source192.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _5898_high = _5897___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _5899_low = _5896___mcc_h244;
        bool _5900_isArray = _5895___mcc_h243;
        DAST._IExpression _5901_on = _5894___mcc_h242;
        {
          RAST._IExpr _5902_onExpr;
          DCOMP._IOwnership _5903_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5904_recIdents;
          RAST._IExpr _out2493;
          DCOMP._IOwnership _out2494;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2495;
          DCOMP.COMP.GenExpr(_5901_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2493, out _out2494, out _out2495);
          _5902_onExpr = _out2493;
          _5903_onOwned = _out2494;
          _5904_recIdents = _out2495;
          readIdents = _5904_recIdents;
          Dafny.ISequence<Dafny.Rune> _5905_methodName;
          _5905_methodName = (((_5899_low).is_Some) ? ((((_5898_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_5898_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _5906_arguments;
          _5906_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source196 = _5899_low;
          if (_source196.is_None) {
          } else {
            DAST._IExpression _5907___mcc_h274 = _source196.dtor_value;
            DAST._IExpression _5908_l = _5907___mcc_h274;
            {
              RAST._IExpr _5909_lExpr;
              DCOMP._IOwnership _5910___v122;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5911_recIdentsL;
              RAST._IExpr _out2496;
              DCOMP._IOwnership _out2497;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2498;
              DCOMP.COMP.GenExpr(_5908_l, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2496, out _out2497, out _out2498);
              _5909_lExpr = _out2496;
              _5910___v122 = _out2497;
              _5911_recIdentsL = _out2498;
              _5906_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5906_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_5909_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5911_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source197 = _5898_high;
          if (_source197.is_None) {
          } else {
            DAST._IExpression _5912___mcc_h275 = _source197.dtor_value;
            DAST._IExpression _5913_h = _5912___mcc_h275;
            {
              RAST._IExpr _5914_hExpr;
              DCOMP._IOwnership _5915___v123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5916_recIdentsH;
              RAST._IExpr _out2499;
              DCOMP._IOwnership _out2500;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2501;
              DCOMP.COMP.GenExpr(_5913_h, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2499, out _out2500, out _out2501);
              _5914_hExpr = _out2499;
              _5915___v123 = _out2500;
              _5916_recIdentsH = _out2501;
              _5906_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5906_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_5914_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5916_recIdentsH);
            }
          }
          r = _5902_onExpr;
          if (_5900_isArray) {
            if (!(_5905_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _5905_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _5905_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _5905_methodName))).Apply(_5906_arguments);
          } else {
            if (!(_5905_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_5905_methodName)).Apply(_5906_arguments);
            }
          }
          RAST._IExpr _out2502;
          DCOMP._IOwnership _out2503;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2502, out _out2503);
          r = _out2502;
          resultingOwnership = _out2503;
          return ;
        }
      } else if (_source192.is_TupleSelect) {
        DAST._IExpression _5917___mcc_h246 = _source192.dtor_expr;
        BigInteger _5918___mcc_h247 = _source192.dtor_index;
        BigInteger _5919_idx = _5918___mcc_h247;
        DAST._IExpression _5920_on = _5917___mcc_h246;
        {
          RAST._IExpr _5921_onExpr;
          DCOMP._IOwnership _5922_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5923_recIdents;
          RAST._IExpr _out2504;
          DCOMP._IOwnership _out2505;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2506;
          DCOMP.COMP.GenExpr(_5920_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2504, out _out2505, out _out2506);
          _5921_onExpr = _out2504;
          _5922_onOwnership = _out2505;
          _5923_recIdents = _out2506;
          r = (_5921_onExpr).Sel(Std.Strings.__default.OfNat(_5919_idx));
          RAST._IExpr _out2507;
          DCOMP._IOwnership _out2508;
          DCOMP.COMP.FromOwnership(r, _5922_onOwnership, expectedOwnership, out _out2507, out _out2508);
          r = _out2507;
          resultingOwnership = _out2508;
          readIdents = _5923_recIdents;
          return ;
        }
      } else if (_source192.is_Call) {
        DAST._IExpression _5924___mcc_h248 = _source192.dtor_on;
        DAST._ICallName _5925___mcc_h249 = _source192.dtor_callName;
        Dafny.ISequence<DAST._IType> _5926___mcc_h250 = _source192.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _5927___mcc_h251 = _source192.dtor_args;
        Dafny.ISequence<DAST._IExpression> _5928_args = _5927___mcc_h251;
        Dafny.ISequence<DAST._IType> _5929_typeArgs = _5926___mcc_h250;
        DAST._ICallName _5930_name = _5925___mcc_h249;
        DAST._IExpression _5931_on = _5924___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _5932_typeExprs;
          _5932_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_5929_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _5933_typeI;
            _5933_typeI = BigInteger.Zero;
            while ((_5933_typeI) < (new BigInteger((_5929_typeArgs).Count))) {
              RAST._IType _5934_typeExpr;
              RAST._IType _out2509;
              _out2509 = DCOMP.COMP.GenType((_5929_typeArgs).Select(_5933_typeI), false, false);
              _5934_typeExpr = _out2509;
              _5932_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_5932_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_5934_typeExpr));
              _5933_typeI = (_5933_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _5935_argExprs;
          _5935_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _5936_i;
          _5936_i = BigInteger.Zero;
          while ((_5936_i) < (new BigInteger((_5928_args).Count))) {
            RAST._IExpr _5937_argExpr;
            DCOMP._IOwnership _5938_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5939_argIdents;
            RAST._IExpr _out2510;
            DCOMP._IOwnership _out2511;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2512;
            DCOMP.COMP.GenExpr((_5928_args).Select(_5936_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2510, out _out2511, out _out2512);
            _5937_argExpr = _out2510;
            _5938_argOwnership = _out2511;
            _5939_argIdents = _out2512;
            _5935_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_5935_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_5937_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5939_argIdents);
            _5936_i = (_5936_i) + (BigInteger.One);
          }
          RAST._IExpr _5940_onExpr;
          DCOMP._IOwnership _5941___v124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5942_recIdents;
          RAST._IExpr _out2513;
          DCOMP._IOwnership _out2514;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2515;
          DCOMP.COMP.GenExpr(_5931_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2513, out _out2514, out _out2515);
          _5940_onExpr = _out2513;
          _5941___v124 = _out2514;
          _5942_recIdents = _out2515;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5942_recIdents);
          Dafny.ISequence<Dafny.Rune> _5943_renderedName;
          _5943_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source198) => {
            if (_source198.is_Name) {
              Dafny.ISequence<Dafny.Rune> _5944___mcc_h276 = _source198.dtor_name;
              Dafny.ISequence<Dafny.Rune> _5945_ident = _5944___mcc_h276;
              return DCOMP.__default.escapeIdent(_5945_ident);
            } else if (_source198.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source198.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source198.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_5930_name);
          DAST._IExpression _source199 = _5931_on;
          if (_source199.is_Literal) {
            DAST._ILiteral _5946___mcc_h277 = _source199.dtor_Literal_a0;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _5947___mcc_h279 = _source199.dtor_Ident_a0;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5948___mcc_h281 = _source199.dtor_Companion_a0;
            {
              _5940_onExpr = (_5940_onExpr).MSel(_5943_renderedName);
            }
          } else if (_source199.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _5949___mcc_h283 = _source199.dtor_Tuple_a0;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5950___mcc_h285 = _source199.dtor_path;
            Dafny.ISequence<DAST._IType> _5951___mcc_h286 = _source199.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _5952___mcc_h287 = _source199.dtor_args;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _5953___mcc_h291 = _source199.dtor_dims;
            DAST._IType _5954___mcc_h292 = _source199.dtor_typ;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_DatatypeValue) {
            DAST._IDatatypeType _5955___mcc_h295 = _source199.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _5956___mcc_h296 = _source199.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _5957___mcc_h297 = _source199.dtor_variant;
            bool _5958___mcc_h298 = _source199.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5959___mcc_h299 = _source199.dtor_contents;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Convert) {
            DAST._IExpression _5960___mcc_h305 = _source199.dtor_value;
            DAST._IType _5961___mcc_h306 = _source199.dtor_from;
            DAST._IType _5962___mcc_h307 = _source199.dtor_typ;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_SeqConstruct) {
            DAST._IExpression _5963___mcc_h311 = _source199.dtor_length;
            DAST._IExpression _5964___mcc_h312 = _source199.dtor_elem;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _5965___mcc_h315 = _source199.dtor_elements;
            DAST._IType _5966___mcc_h316 = _source199.dtor_typ;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _5967___mcc_h319 = _source199.dtor_elements;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _5968___mcc_h321 = _source199.dtor_elements;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _5969___mcc_h323 = _source199.dtor_mapElems;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_MapBuilder) {
            DAST._IType _5970___mcc_h325 = _source199.dtor_keyType;
            DAST._IType _5971___mcc_h326 = _source199.dtor_valueType;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_SeqUpdate) {
            DAST._IExpression _5972___mcc_h329 = _source199.dtor_expr;
            DAST._IExpression _5973___mcc_h330 = _source199.dtor_indexExpr;
            DAST._IExpression _5974___mcc_h331 = _source199.dtor_value;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_MapUpdate) {
            DAST._IExpression _5975___mcc_h335 = _source199.dtor_expr;
            DAST._IExpression _5976___mcc_h336 = _source199.dtor_indexExpr;
            DAST._IExpression _5977___mcc_h337 = _source199.dtor_value;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_SetBuilder) {
            DAST._IType _5978___mcc_h341 = _source199.dtor_elemType;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_ToMultiset) {
            DAST._IExpression _5979___mcc_h343 = _source199.dtor_ToMultiset_a0;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_This) {
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Ite) {
            DAST._IExpression _5980___mcc_h345 = _source199.dtor_cond;
            DAST._IExpression _5981___mcc_h346 = _source199.dtor_thn;
            DAST._IExpression _5982___mcc_h347 = _source199.dtor_els;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_UnOp) {
            DAST._IUnaryOp _5983___mcc_h351 = _source199.dtor_unOp;
            DAST._IExpression _5984___mcc_h352 = _source199.dtor_expr;
            DAST.Format._IUnOpFormat _5985___mcc_h353 = _source199.dtor_format1;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_BinOp) {
            DAST._IBinOp _5986___mcc_h357 = _source199.dtor_op;
            DAST._IExpression _5987___mcc_h358 = _source199.dtor_left;
            DAST._IExpression _5988___mcc_h359 = _source199.dtor_right;
            DAST.Format._IBinOpFormat _5989___mcc_h360 = _source199.dtor_format2;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_ArrayLen) {
            DAST._IExpression _5990___mcc_h365 = _source199.dtor_expr;
            BigInteger _5991___mcc_h366 = _source199.dtor_dim;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_MapKeys) {
            DAST._IExpression _5992___mcc_h369 = _source199.dtor_expr;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_MapValues) {
            DAST._IExpression _5993___mcc_h371 = _source199.dtor_expr;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Select) {
            DAST._IExpression _5994___mcc_h373 = _source199.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _5995___mcc_h374 = _source199.dtor_field;
            bool _5996___mcc_h375 = _source199.dtor_isConstant;
            bool _5997___mcc_h376 = _source199.dtor_onDatatype;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_SelectFn) {
            DAST._IExpression _5998___mcc_h381 = _source199.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _5999___mcc_h382 = _source199.dtor_field;
            bool _6000___mcc_h383 = _source199.dtor_onDatatype;
            bool _6001___mcc_h384 = _source199.dtor_isStatic;
            BigInteger _6002___mcc_h385 = _source199.dtor_arity;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Index) {
            DAST._IExpression _6003___mcc_h391 = _source199.dtor_expr;
            DAST._ICollKind _6004___mcc_h392 = _source199.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _6005___mcc_h393 = _source199.dtor_indices;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_IndexRange) {
            DAST._IExpression _6006___mcc_h397 = _source199.dtor_expr;
            bool _6007___mcc_h398 = _source199.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _6008___mcc_h399 = _source199.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _6009___mcc_h400 = _source199.dtor_high;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_TupleSelect) {
            DAST._IExpression _6010___mcc_h405 = _source199.dtor_expr;
            BigInteger _6011___mcc_h406 = _source199.dtor_index;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Call) {
            DAST._IExpression _6012___mcc_h409 = _source199.dtor_on;
            DAST._ICallName _6013___mcc_h410 = _source199.dtor_callName;
            Dafny.ISequence<DAST._IType> _6014___mcc_h411 = _source199.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6015___mcc_h412 = _source199.dtor_args;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _6016___mcc_h417 = _source199.dtor_params;
            DAST._IType _6017___mcc_h418 = _source199.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _6018___mcc_h419 = _source199.dtor_body;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6019___mcc_h423 = _source199.dtor_values;
            DAST._IType _6020___mcc_h424 = _source199.dtor_retType;
            DAST._IExpression _6021___mcc_h425 = _source199.dtor_expr;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _6022___mcc_h429 = _source199.dtor_name;
            DAST._IType _6023___mcc_h430 = _source199.dtor_typ;
            DAST._IExpression _6024___mcc_h431 = _source199.dtor_value;
            DAST._IExpression _6025___mcc_h432 = _source199.dtor_iifeBody;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_Apply) {
            DAST._IExpression _6026___mcc_h437 = _source199.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _6027___mcc_h438 = _source199.dtor_args;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_TypeTest) {
            DAST._IExpression _6028___mcc_h441 = _source199.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6029___mcc_h442 = _source199.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _6030___mcc_h443 = _source199.dtor_variant;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_InitializationValue) {
            DAST._IType _6031___mcc_h447 = _source199.dtor_typ;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_BoolBoundedPool) {
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_SetBoundedPool) {
            DAST._IExpression _6032___mcc_h449 = _source199.dtor_of;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else if (_source199.is_SeqBoundedPool) {
            DAST._IExpression _6033___mcc_h451 = _source199.dtor_of;
            bool _6034___mcc_h452 = _source199.dtor_includeDuplicates;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          } else {
            DAST._IExpression _6035___mcc_h455 = _source199.dtor_lo;
            DAST._IExpression _6036___mcc_h456 = _source199.dtor_hi;
            {
              _5940_onExpr = (_5940_onExpr).Sel(_5943_renderedName);
            }
          }
          r = _5940_onExpr;
          if ((new BigInteger((_5932_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_5932_typeExprs);
          }
          r = (r).Apply(_5935_argExprs);
          RAST._IExpr _out2516;
          DCOMP._IOwnership _out2517;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2516, out _out2517);
          r = _out2516;
          resultingOwnership = _out2517;
          return ;
        }
      } else if (_source192.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _6037___mcc_h252 = _source192.dtor_params;
        DAST._IType _6038___mcc_h253 = _source192.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _6039___mcc_h254 = _source192.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6040_body = _6039___mcc_h254;
        DAST._IType _6041_retType = _6038___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _6042_params = _6037___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6043_paramNames;
          _6043_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _6044_paramOwnerships;
          _6044_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
          BigInteger _6045_i;
          _6045_i = BigInteger.Zero;
          while ((_6045_i) < (new BigInteger((_6042_params).Count))) {
            Dafny.ISequence<Dafny.Rune> _6046_name;
            _6046_name = ((_6042_params).Select(_6045_i)).dtor_name;
            _6043_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_6043_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6046_name));
            _6044_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_6044_paramOwnerships, _6046_name, DCOMP.Ownership.create_OwnershipBorrowed());
            _6045_i = (_6045_i) + (BigInteger.One);
          }
          DCOMP._IEnvironment _6047_env;
          _6047_env = DCOMP.Environment.create(_6043_paramNames, _6044_paramOwnerships);
          RAST._IExpr _6048_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6049_recIdents;
          RAST._IExpr _out2518;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2519;
          DCOMP.COMP.GenStmts(_6040_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _6047_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out2518, out _out2519);
          _6048_recursiveGen = _out2518;
          _6049_recIdents = _out2519;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6050_allReadCloned;
          _6050_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_6049_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _6051_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_6049_recIdents).Elements) {
              _6051_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_6049_recIdents).Contains(_6051_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3266)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_6051_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _6050_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_6050_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_6043_paramNames).Contains(_6051_next))) {
              _6050_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6050_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_6051_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_6051_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6051_next));
            }
            _6049_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6049_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6051_next));
          }
          Dafny.ISequence<Dafny.Rune> _6052_paramsString;
          _6052_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _6053_paramTypes;
          _6053_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _6045_i = BigInteger.Zero;
          while ((_6045_i) < (new BigInteger((_6042_params).Count))) {
            if ((_6045_i).Sign == 1) {
              _6052_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_6052_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _6053_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_6053_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _6054_typStr;
            RAST._IType _out2520;
            _out2520 = DCOMP.COMP.GenType(((_6042_params).Select(_6045_i)).dtor_typ, false, true);
            _6054_typStr = _out2520;
            _6052_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6052_paramsString, DCOMP.__default.escapeIdent(((_6042_params).Select(_6045_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_6054_typStr))._ToString(DCOMP.__default.IND));
            _6053_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_6053_paramTypes, (RAST.Type.create_Borrowed(_6054_typStr))._ToString(DCOMP.__default.IND));
            _6045_i = (_6045_i) + (BigInteger.One);
          }
          RAST._IType _6055_retTypeGen;
          RAST._IType _out2521;
          _out2521 = DCOMP.COMP.GenType(_6041_retType, false, true);
          _6055_retTypeGen = _out2521;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _6053_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_6055_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _6050_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _6052_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_6055_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_6048_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out2522;
          DCOMP._IOwnership _out2523;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2522, out _out2523);
          r = _out2522;
          resultingOwnership = _out2523;
          return ;
        }
      } else if (_source192.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6056___mcc_h255 = _source192.dtor_values;
        DAST._IType _6057___mcc_h256 = _source192.dtor_retType;
        DAST._IExpression _6058___mcc_h257 = _source192.dtor_expr;
        DAST._IExpression _6059_expr = _6058___mcc_h257;
        DAST._IType _6060_retType = _6057___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6061_values = _6056___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6062_paramNames;
          _6062_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _6063_paramOwnerships;
          _6063_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6064_paramNamesSet;
          _6064_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _6065_i;
          _6065_i = BigInteger.Zero;
          while ((_6065_i) < (new BigInteger((_6061_values).Count))) {
            Dafny.ISequence<Dafny.Rune> _6066_name;
            _6066_name = (((_6061_values).Select(_6065_i)).dtor__0).dtor_name;
            _6062_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_6062_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6066_name));
            _6063_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_6063_paramOwnerships, _6066_name, DCOMP.Ownership.create_OwnershipBorrowed());
            _6064_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6064_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6066_name));
            _6065_i = (_6065_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6067_s;
          _6067_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _6068_paramsString;
          _6068_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _6065_i = BigInteger.Zero;
          while ((_6065_i) < (new BigInteger((_6061_values).Count))) {
            if ((_6065_i).Sign == 1) {
              _6068_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_6068_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _6069_typStr;
            RAST._IType _out2524;
            _out2524 = DCOMP.COMP.GenType((((_6061_values).Select(_6065_i)).dtor__0).dtor_typ, false, true);
            _6069_typStr = _out2524;
            RAST._IExpr _6070_valueGen;
            DCOMP._IOwnership _6071___v127;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6072_recIdents;
            RAST._IExpr _out2525;
            DCOMP._IOwnership _out2526;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2527;
            DCOMP.COMP.GenExpr(((_6061_values).Select(_6065_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2525, out _out2526, out _out2527);
            _6070_valueGen = _out2525;
            _6071___v127 = _out2526;
            _6072_recIdents = _out2527;
            _6067_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6067_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_6061_values).Select(_6065_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_6069_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6072_recIdents);
            _6067_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6067_s, (_6070_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _6065_i = (_6065_i) + (BigInteger.One);
          }
          DCOMP._IEnvironment _6073_newEnv;
          _6073_newEnv = DCOMP.Environment.create(_6062_paramNames, _6063_paramOwnerships);
          RAST._IExpr _6074_recGen;
          DCOMP._IOwnership _6075_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6076_recIdents;
          RAST._IExpr _out2528;
          DCOMP._IOwnership _out2529;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2530;
          DCOMP.COMP.GenExpr(_6059_expr, selfIdent, _6073_newEnv, expectedOwnership, out _out2528, out _out2529, out _out2530);
          _6074_recGen = _out2528;
          _6075_recOwned = _out2529;
          _6076_recIdents = _out2530;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6076_recIdents, _6064_paramNamesSet);
          _6067_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6067_s, (_6074_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_6067_s);
          RAST._IExpr _out2531;
          DCOMP._IOwnership _out2532;
          DCOMP.COMP.FromOwnership(r, _6075_recOwned, expectedOwnership, out _out2531, out _out2532);
          r = _out2531;
          resultingOwnership = _out2532;
          return ;
        }
      } else if (_source192.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _6077___mcc_h258 = _source192.dtor_name;
        DAST._IType _6078___mcc_h259 = _source192.dtor_typ;
        DAST._IExpression _6079___mcc_h260 = _source192.dtor_value;
        DAST._IExpression _6080___mcc_h261 = _source192.dtor_iifeBody;
        DAST._IExpression _6081_iifeBody = _6080___mcc_h261;
        DAST._IExpression _6082_value = _6079___mcc_h260;
        DAST._IType _6083_tpe = _6078___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _6084_name = _6077___mcc_h258;
        {
          RAST._IExpr _6085_valueGen;
          DCOMP._IOwnership _6086___v128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6087_recIdents;
          RAST._IExpr _out2533;
          DCOMP._IOwnership _out2534;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2535;
          DCOMP.COMP.GenExpr(_6082_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2533, out _out2534, out _out2535);
          _6085_valueGen = _out2533;
          _6086___v128 = _out2534;
          _6087_recIdents = _out2535;
          readIdents = _6087_recIdents;
          RAST._IType _6088_valueTypeGen;
          RAST._IType _out2536;
          _out2536 = DCOMP.COMP.GenType(_6083_tpe, false, true);
          _6088_valueTypeGen = _out2536;
          RAST._IExpr _6089_bodyGen;
          DCOMP._IOwnership _6090___v129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6091_bodyIdents;
          RAST._IExpr _out2537;
          DCOMP._IOwnership _out2538;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2539;
          DCOMP.COMP.GenExpr(_6081_iifeBody, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2537, out _out2538, out _out2539);
          _6089_bodyGen = _out2537;
          _6090___v129 = _out2538;
          _6091_bodyIdents = _out2539;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6091_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_6084_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_6084_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_6088_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_6085_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_6089_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out2540;
          DCOMP._IOwnership _out2541;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2540, out _out2541);
          r = _out2540;
          resultingOwnership = _out2541;
          return ;
        }
      } else if (_source192.is_Apply) {
        DAST._IExpression _6092___mcc_h262 = _source192.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _6093___mcc_h263 = _source192.dtor_args;
        Dafny.ISequence<DAST._IExpression> _6094_args = _6093___mcc_h263;
        DAST._IExpression _6095_func = _6092___mcc_h262;
        {
          RAST._IExpr _6096_funcExpr;
          DCOMP._IOwnership _6097___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6098_recIdents;
          RAST._IExpr _out2542;
          DCOMP._IOwnership _out2543;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2544;
          DCOMP.COMP.GenExpr(_6095_func, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2542, out _out2543, out _out2544);
          _6096_funcExpr = _out2542;
          _6097___v130 = _out2543;
          _6098_recIdents = _out2544;
          readIdents = _6098_recIdents;
          Dafny.ISequence<Dafny.Rune> _6099_argString;
          _6099_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _6100_i;
          _6100_i = BigInteger.Zero;
          while ((_6100_i) < (new BigInteger((_6094_args).Count))) {
            if ((_6100_i).Sign == 1) {
              _6099_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6099_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _6101_argExpr;
            DCOMP._IOwnership _6102_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6103_argIdents;
            RAST._IExpr _out2545;
            DCOMP._IOwnership _out2546;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2547;
            DCOMP.COMP.GenExpr((_6094_args).Select(_6100_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2545, out _out2546, out _out2547);
            _6101_argExpr = _out2545;
            _6102_argOwned = _out2546;
            _6103_argIdents = _out2547;
            Dafny.ISequence<Dafny.Rune> _6104_argExprString;
            _6104_argExprString = (_6101_argExpr)._ToString(DCOMP.__default.IND);
            if (object.Equals(_6102_argOwned, DCOMP.Ownership.create_OwnershipOwned())) {
              _6104_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _6104_argExprString);
            }
            _6099_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6099_argString, _6104_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6103_argIdents);
            _6100_i = (_6100_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_6096_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _6099_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out2548;
          DCOMP._IOwnership _out2549;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2548, out _out2549);
          r = _out2548;
          resultingOwnership = _out2549;
          return ;
        }
      } else if (_source192.is_TypeTest) {
        DAST._IExpression _6105___mcc_h264 = _source192.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6106___mcc_h265 = _source192.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _6107___mcc_h266 = _source192.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _6108_variant = _6107___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6109_dType = _6106___mcc_h265;
        DAST._IExpression _6110_on = _6105___mcc_h264;
        {
          RAST._IExpr _6111_exprGen;
          DCOMP._IOwnership _6112___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6113_recIdents;
          RAST._IExpr _out2550;
          DCOMP._IOwnership _out2551;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2552;
          DCOMP.COMP.GenExpr(_6110_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2550, out _out2551, out _out2552);
          _6111_exprGen = _out2550;
          _6112___v131 = _out2551;
          _6113_recIdents = _out2552;
          RAST._IType _6114_dTypePath;
          RAST._IType _out2553;
          _out2553 = DCOMP.COMP.GenPath(_6109_dType);
          _6114_dTypePath = _out2553;
          r = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(((_6111_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(((_6114_dTypePath).MSel(DCOMP.__default.escapeIdent(_6108_variant)))._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. }")))));
          RAST._IExpr _out2554;
          DCOMP._IOwnership _out2555;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2554, out _out2555);
          r = _out2554;
          resultingOwnership = _out2555;
          readIdents = _6113_recIdents;
          return ;
        }
      } else if (_source192.is_InitializationValue) {
        DAST._IType _6115___mcc_h267 = _source192.dtor_typ;
        DAST._IType _6116_typ = _6115___mcc_h267;
        {
          RAST._IType _6117_typExpr;
          RAST._IType _out2556;
          _out2556 = DCOMP.COMP.GenType(_6116_typ, false, false);
          _6117_typExpr = _out2556;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_6117_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out2557;
          DCOMP._IOwnership _out2558;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2557, out _out2558);
          r = _out2557;
          resultingOwnership = _out2558;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source192.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out2559;
          DCOMP._IOwnership _out2560;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2559, out _out2560);
          r = _out2559;
          resultingOwnership = _out2560;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source192.is_SetBoundedPool) {
        DAST._IExpression _6118___mcc_h268 = _source192.dtor_of;
        DAST._IExpression _6119_of = _6118___mcc_h268;
        {
          RAST._IExpr _6120_exprGen;
          DCOMP._IOwnership _6121___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6122_recIdents;
          RAST._IExpr _out2561;
          DCOMP._IOwnership _out2562;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2563;
          DCOMP.COMP.GenExpr(_6119_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2561, out _out2562, out _out2563);
          _6120_exprGen = _out2561;
          _6121___v132 = _out2562;
          _6122_recIdents = _out2563;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6120_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out2564;
          DCOMP._IOwnership _out2565;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2564, out _out2565);
          r = _out2564;
          resultingOwnership = _out2565;
          readIdents = _6122_recIdents;
          return ;
        }
      } else if (_source192.is_SeqBoundedPool) {
        DAST._IExpression _6123___mcc_h269 = _source192.dtor_of;
        bool _6124___mcc_h270 = _source192.dtor_includeDuplicates;
        bool _6125_includeDuplicates = _6124___mcc_h270;
        DAST._IExpression _6126_of = _6123___mcc_h269;
        {
          RAST._IExpr _6127_exprGen;
          DCOMP._IOwnership _6128___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6129_recIdents;
          RAST._IExpr _out2566;
          DCOMP._IOwnership _out2567;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2568;
          DCOMP.COMP.GenExpr(_6126_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2566, out _out2567, out _out2568);
          _6127_exprGen = _out2566;
          _6128___v133 = _out2567;
          _6129_recIdents = _out2568;
          Dafny.ISequence<Dafny.Rune> _6130_s;
          _6130_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6127_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_6125_includeDuplicates)) {
            _6130_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _6130_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_6130_s);
          RAST._IExpr _out2569;
          DCOMP._IOwnership _out2570;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2569, out _out2570);
          r = _out2569;
          resultingOwnership = _out2570;
          readIdents = _6129_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _6131___mcc_h271 = _source192.dtor_lo;
        DAST._IExpression _6132___mcc_h272 = _source192.dtor_hi;
        DAST._IExpression _6133_hi = _6132___mcc_h272;
        DAST._IExpression _6134_lo = _6131___mcc_h271;
        {
          RAST._IExpr _6135_lo;
          DCOMP._IOwnership _6136___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6137_recIdentsLo;
          RAST._IExpr _out2571;
          DCOMP._IOwnership _out2572;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2573;
          DCOMP.COMP.GenExpr(_6134_lo, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2571, out _out2572, out _out2573);
          _6135_lo = _out2571;
          _6136___v134 = _out2572;
          _6137_recIdentsLo = _out2573;
          RAST._IExpr _6138_hi;
          DCOMP._IOwnership _6139___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6140_recIdentsHi;
          RAST._IExpr _out2574;
          DCOMP._IOwnership _out2575;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2576;
          DCOMP.COMP.GenExpr(_6133_hi, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2574, out _out2575, out _out2576);
          _6138_hi = _out2574;
          _6139___v135 = _out2575;
          _6140_recIdentsHi = _out2576;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_6135_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_6138_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out2577;
          DCOMP._IOwnership _out2578;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2577, out _out2578);
          r = _out2577;
          resultingOwnership = _out2578;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6137_recIdentsLo, _6140_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _6141_i;
      _6141_i = BigInteger.Zero;
      while ((_6141_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _6142_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _6143_m;
        RAST._IMod _out2579;
        _out2579 = DCOMP.COMP.GenModule((p).Select(_6141_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _6143_m = _out2579;
        _6142_generated = (_6143_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_6141_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _6142_generated);
        _6141_i = (_6141_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _6144_i;
      _6144_i = BigInteger.Zero;
      while ((_6144_i) < (new BigInteger((fullName).Count))) {
        if ((_6144_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_6144_i)));
        _6144_i = (_6144_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP
namespace DCOMPUTF16 {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in119 = (i).Drop(new BigInteger(2));
            i = _in119;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in120 = (i).Drop(BigInteger.One);
        i = _in120;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _6145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_6145___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _6145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_6145___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in121 = (i).Drop(new BigInteger(2));
        i = _in121;
        goto TAIL_CALL_START;
      } else {
        _6145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_6145___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in122 = (i).Drop(BigInteger.One);
        i = _in122;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _6146___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_6146___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _6146___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_6146___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in123 = (i).Drop(BigInteger.One);
        i = _in123;
        goto TAIL_CALL_START;
      } else {
        _6146___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_6146___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in124 = (i).Drop(BigInteger.One);
        i = _in124;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMPUTF16.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMPUTF16.__default.has__special(i)))) && (!(DCOMPUTF16.__default.reserved__rust).Contains(i))) && (!(DCOMPUTF16.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMPUTF16.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMPUTF16.__default.is__tuple__builder(i)) {
        return DCOMPUTF16.__default.better__tuple__builder__name(i);
      } else if ((DCOMPUTF16.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMPUTF16.__default.is__idiomatic__rust__id(i)) {
        return DCOMPUTF16.__default.idiomatic__rust(i);
      } else if (DCOMPUTF16.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _6147_r = DCOMPUTF16.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _6147_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static bool UnicodeChars { get {
      return true;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMPUTF16.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMPUTF16._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMPUTF16._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IOwnership>(DCOMPUTF16.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> dtor_ownerships { get; }
    _IEnvironment DowncastClone();
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMPUTF16._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMPUTF16._IOwnership ownership);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _ownerships;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      this._names = names;
      this._ownerships = ownerships;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_names, _ownerships);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Environment;
      return oth != null && object.Equals(this._names, oth._names) && object.Equals(this._ownerships, oth._ownerships);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ownerships));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ownerships);
      s += ")";
      return s;
    }
    private static readonly DCOMPUTF16._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Empty);
    public static DCOMPUTF16._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment>(DCOMPUTF16.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      return new Environment(names, ownerships);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      return create(names, ownerships);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> dtor_ownerships {
      get {
        return this._ownerships;
      }
    }
    public static DCOMPUTF16._IEnvironment Empty() {
      return DCOMPUTF16.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements());
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Select((this).dtor_ownerships,name), DCOMPUTF16.Ownership.create_OwnershipBorrowed()));
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Select((this).dtor_ownerships,name), DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()));
    }
    public DCOMPUTF16._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMPUTF16._IOwnership ownership)
    {
      return DCOMPUTF16.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update((this).dtor_ownerships, name, ownership));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _6148_body;
      Dafny.ISequence<RAST._IModDecl> _out2580;
      _out2580 = DCOMPUTF16.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _6148_body = _out2580;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name), _6148_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _6149_i;
      _6149_i = BigInteger.Zero;
      while ((_6149_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _6150_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source200 = (body).Select(_6149_i);
        if (_source200.is_Module) {
          DAST._IModule _6151___mcc_h0 = _source200.dtor_Module_a0;
          DAST._IModule _6152_m = _6151___mcc_h0;
          RAST._IMod _6153_mm;
          RAST._IMod _out2581;
          _out2581 = DCOMPUTF16.COMP.GenModule(_6152_m, containingPath);
          _6153_mm = _out2581;
          _6150_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_6153_mm));
        } else if (_source200.is_Class) {
          DAST._IClass _6154___mcc_h1 = _source200.dtor_Class_a0;
          DAST._IClass _6155_c = _6154___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out2582;
          _out2582 = DCOMPUTF16.COMP.GenClass(_6155_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_6155_c).dtor_name)));
          _6150_generated = _out2582;
        } else if (_source200.is_Trait) {
          DAST._ITrait _6156___mcc_h2 = _source200.dtor_Trait_a0;
          DAST._ITrait _6157_t = _6156___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _6158_tt;
          Dafny.ISequence<Dafny.Rune> _out2583;
          _out2583 = DCOMPUTF16.COMP.GenTrait(_6157_t, containingPath);
          _6158_tt = _out2583;
          _6150_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_6158_tt));
        } else if (_source200.is_Newtype) {
          DAST._INewtype _6159___mcc_h3 = _source200.dtor_Newtype_a0;
          DAST._INewtype _6160_n = _6159___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out2584;
          _out2584 = DCOMPUTF16.COMP.GenNewtype(_6160_n);
          _6150_generated = _out2584;
        } else {
          DAST._IDatatype _6161___mcc_h4 = _source200.dtor_Datatype_a0;
          DAST._IDatatype _6162_d = _6161___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out2585;
          _out2585 = DCOMPUTF16.COMP.GenDatatype(_6162_d);
          _6150_generated = _out2585;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _6150_generated);
        _6149_i = (_6149_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _6163_tpI;
      _6163_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_6163_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _6164_tp;
          _6164_tp = (@params).Select(_6163_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_6164_tp));
          RAST._IType _6165_genTp;
          RAST._IType _out2586;
          _out2586 = DCOMPUTF16.COMP.GenType(_6164_tp, false, false);
          _6165_genTp = _out2586;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_6165_genTp)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _6163_tpI = (_6163_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _6166_baseConstraints;
      _6166_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _6166_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _6167_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _6168_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _6169_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _6170_whereConstraints;
      Dafny.ISet<DAST._IType> _out2587;
      Dafny.ISequence<RAST._ITypeParam> _out2588;
      Dafny.ISequence<RAST._ITypeParam> _out2589;
      Dafny.ISequence<Dafny.Rune> _out2590;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2587, out _out2588, out _out2589, out _out2590);
      _6167_typeParamsSet = _out2587;
      _6168_sTypeParams = _out2588;
      _6169_sConstrainedTypeParams = _out2589;
      _6170_whereConstraints = _out2590;
      Dafny.ISequence<Dafny.Rune> _6171_constrainedTypeParams;
      _6171_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_6169_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _6172_fields;
      _6172_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _6173_fieldInits;
      _6173_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _6174_fieldI;
      _6174_fieldI = BigInteger.Zero;
      while ((_6174_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _6175_field;
        _6175_field = ((c).dtor_fields).Select(_6174_fieldI);
        RAST._IType _6176_fieldType;
        RAST._IType _out2591;
        _out2591 = DCOMPUTF16.COMP.GenType(((_6175_field).dtor_formal).dtor_typ, false, false);
        _6176_fieldType = _out2591;
        _6172_fields = Dafny.Sequence<RAST._IFormal>.Concat(_6172_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMPUTF16.__default.escapeIdent(((_6175_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_6176_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source201 = (_6175_field).dtor_defaultValue;
        if (_source201.is_None) {
          {
            RAST._IExpr _6177_RefCellNew;
            _6177_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            RAST._IExpr _6178_default;
            _6178_default = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Default"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"));
            _6173_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6173_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_6175_field).dtor_formal).dtor_name), (_6177_RefCellNew).Apply1((_6178_default).Apply(Dafny.Sequence<RAST._IExpr>.FromElements())))));
          }
        } else {
          DAST._IExpression _6179___mcc_h0 = _source201.dtor_value;
          DAST._IExpression _6180_e = _6179___mcc_h0;
          {
            RAST._IExpr _6181_expr;
            DCOMPUTF16._IOwnership _6182___v36;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6183___v37;
            RAST._IExpr _out2592;
            DCOMPUTF16._IOwnership _out2593;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2594;
            DCOMPUTF16.COMP.GenExpr(_6180_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2592, out _out2593, out _out2594);
            _6181_expr = _out2592;
            _6182___v36 = _out2593;
            _6183___v37 = _out2594;
            RAST._IExpr _6184_RefCellNew;
            _6184_RefCellNew = (((RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
            _6173_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6173_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_6175_field).dtor_formal).dtor_name), (_6184_RefCellNew).Apply1(_6181_expr))));
          }
        }
        _6174_fieldI = (_6174_fieldI) + (BigInteger.One);
      }
      BigInteger _6185_typeParamI;
      _6185_typeParamI = BigInteger.Zero;
      while ((_6185_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _6186_tpeGen;
        RAST._IType _out2595;
        _out2595 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_6185_typeParamI), false, false);
        _6186_tpeGen = _out2595;
        _6172_fields = Dafny.Sequence<RAST._IFormal>.Concat(_6172_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_6185_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_6186_tpeGen)))));
        _6173_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6173_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_6185_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _6185_typeParamI = (_6185_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _6187_datatypeName;
      _6187_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      RAST._IStruct _6188_struct;
      _6188_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), _6187_datatypeName, _6168_sTypeParams, RAST.Formals.create_NamedFormals(_6172_fields));
      Dafny.ISequence<RAST._IType> _6189_typeParamsAsTypes;
      _6189_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_6190_typeParam) => {
        return RAST.__default.RawType((_6190_typeParam).dtor_content);
      })), _6168_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_6188_struct));
      Dafny.ISequence<RAST._IImplMember> _6191_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _6192_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2596;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2597;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _6167_typeParamsSet, out _out2596, out _out2597);
      _6191_implBodyRaw = _out2596;
      _6192_traitBodies = _out2597;
      Dafny.ISequence<RAST._IImplMember> _6193_implBody;
      _6193_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(RAST.Expr.create_Identifier(_6187_datatypeName), _6173_fieldInits))))), _6191_implBodyRaw);
      RAST._IImpl _6194_i;
      _6194_i = RAST.Impl.create_Impl(_6169_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6187_datatypeName), _6189_typeParamsAsTypes), _6170_whereConstraints, _6193_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_6194_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _6195_i;
        _6195_i = BigInteger.Zero;
        while ((_6195_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _6196_superClass;
          _6196_superClass = ((c).dtor_superClasses).Select(_6195_i);
          DAST._IType _source202 = _6196_superClass;
          if (_source202.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6197___mcc_h1 = _source202.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6198___mcc_h2 = _source202.dtor_typeArgs;
            DAST._IResolvedType _6199___mcc_h3 = _source202.dtor_resolved;
            DAST._IResolvedType _source203 = _6199___mcc_h3;
            if (_source203.is_Datatype) {
              DAST._IDatatypeType _6200___mcc_h7 = _source203.dtor_datatypeType;
            } else if (_source203.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6201___mcc_h9 = _source203.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _6202___mcc_h10 = _source203.dtor_attributes;
              Dafny.ISequence<DAST._IType> _6203_typeArgs = _6198___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6204_traitPath = _6197___mcc_h1;
              {
                RAST._IType _6205_pathStr;
                RAST._IType _out2598;
                _out2598 = DCOMPUTF16.COMP.GenPath(_6204_traitPath);
                _6205_pathStr = _out2598;
                Dafny.ISequence<RAST._IType> _6206_typeArgs;
                Dafny.ISequence<RAST._IType> _out2599;
                _out2599 = DCOMPUTF16.COMP.GenTypeArgs(_6203_typeArgs, false, false);
                _6206_typeArgs = _out2599;
                Dafny.ISequence<RAST._IImplMember> _6207_body;
                _6207_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_6192_traitBodies).Contains(_6204_traitPath)) {
                  _6207_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_6192_traitBodies,_6204_traitPath);
                }
                RAST._IType _6208_genSelfPath;
                RAST._IType _out2600;
                _out2600 = DCOMPUTF16.COMP.GenPath(path);
                _6208_genSelfPath = _out2600;
                RAST._IModDecl _6209_x;
                _6209_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6169_sConstrainedTypeParams, RAST.Type.create_TypeApp(_6205_pathStr, _6206_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_6208_genSelfPath, _6189_typeParamsAsTypes)), _6170_whereConstraints, _6207_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_6209_x));
              }
            } else {
              DAST._IType _6210___mcc_h13 = _source203.dtor_baseType;
              DAST._INewtypeRange _6211___mcc_h14 = _source203.dtor_range;
              bool _6212___mcc_h15 = _source203.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _6213___mcc_h16 = _source203.dtor_attributes;
            }
          } else if (_source202.is_Nullable) {
            DAST._IType _6214___mcc_h21 = _source202.dtor_Nullable_a0;
          } else if (_source202.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6215___mcc_h23 = _source202.dtor_Tuple_a0;
          } else if (_source202.is_Array) {
            DAST._IType _6216___mcc_h25 = _source202.dtor_element;
            BigInteger _6217___mcc_h26 = _source202.dtor_dims;
          } else if (_source202.is_Seq) {
            DAST._IType _6218___mcc_h29 = _source202.dtor_element;
          } else if (_source202.is_Set) {
            DAST._IType _6219___mcc_h31 = _source202.dtor_element;
          } else if (_source202.is_Multiset) {
            DAST._IType _6220___mcc_h33 = _source202.dtor_element;
          } else if (_source202.is_Map) {
            DAST._IType _6221___mcc_h35 = _source202.dtor_key;
            DAST._IType _6222___mcc_h36 = _source202.dtor_value;
          } else if (_source202.is_SetBuilder) {
            DAST._IType _6223___mcc_h39 = _source202.dtor_element;
          } else if (_source202.is_MapBuilder) {
            DAST._IType _6224___mcc_h41 = _source202.dtor_key;
            DAST._IType _6225___mcc_h42 = _source202.dtor_value;
          } else if (_source202.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6226___mcc_h45 = _source202.dtor_args;
            DAST._IType _6227___mcc_h46 = _source202.dtor_result;
          } else if (_source202.is_Primitive) {
            DAST._IPrimitive _6228___mcc_h49 = _source202.dtor_Primitive_a0;
          } else if (_source202.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6229___mcc_h51 = _source202.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _6230___mcc_h53 = _source202.dtor_TypeArg_a0;
          }
          _6195_i = (_6195_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _6231_d;
      _6231_d = RAST.Impl.create_ImplFor(_6169_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6187_datatypeName), _6189_typeParamsAsTypes), _6170_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(_6187_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _6232_defaultImpl;
      _6232_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_6231_d));
      RAST._IImpl _6233_p;
      _6233_p = RAST.Impl.create_ImplFor(_6169_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6187_datatypeName), _6189_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _6234_printImpl;
      _6234_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_6233_p));
      RAST._IImpl _6235_pp;
      _6235_pp = RAST.Impl.create_ImplFor(_6168_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6187_datatypeName), _6189_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.SelfBorrowed)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _6236_ptrPartialEqImpl;
      _6236_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_6235_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _6232_defaultImpl), _6234_printImpl), _6236_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _6237_typeParamsSet;
      _6237_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _6238_typeParams;
      _6238_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _6239_tpI;
      _6239_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_6239_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _6240_tp;
          _6240_tp = ((t).dtor_typeParams).Select(_6239_tpI);
          _6237_typeParamsSet = Dafny.Set<DAST._IType>.Union(_6237_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_6240_tp));
          RAST._IType _6241_genTp;
          RAST._IType _out2601;
          _out2601 = DCOMPUTF16.COMP.GenType(_6240_tp, false, false);
          _6241_genTp = _out2601;
          _6238_typeParams = Dafny.Sequence<RAST._IType>.Concat(_6238_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_6241_genTp));
          _6239_tpI = (_6239_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6242_fullPath;
      _6242_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _6243_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _6244___v41;
      Dafny.ISequence<RAST._IImplMember> _out2602;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2603;
      DCOMPUTF16.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_6242_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_6242_fullPath, (t).dtor_attributes)), _6237_typeParamsSet, out _out2602, out _out2603);
      _6243_implBody = _out2602;
      _6244___v41 = _out2603;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((t).dtor_name)), _6238_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _6243_implBody)))._ToString(DCOMPUTF16.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _6245_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _6246_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _6247_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _6248_whereConstraints;
      Dafny.ISet<DAST._IType> _out2604;
      Dafny.ISequence<RAST._ITypeParam> _out2605;
      Dafny.ISequence<RAST._ITypeParam> _out2606;
      Dafny.ISequence<Dafny.Rune> _out2607;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2604, out _out2605, out _out2606, out _out2607);
      _6245_typeParamsSet = _out2604;
      _6246_sTypeParams = _out2605;
      _6247_sConstrainedTypeParams = _out2606;
      _6248_whereConstraints = _out2607;
      Dafny.ISequence<RAST._IType> _6249_typeParamsAsTypes;
      _6249_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_6250_t) => {
        return RAST.__default.RawType((_6250_t).dtor_content);
      })), _6246_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _6251_constrainedTypeParams;
      _6251_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_6247_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _6252_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source204 = DCOMPUTF16.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source204.is_None) {
        RAST._IType _out2608;
        _out2608 = DCOMPUTF16.COMP.GenType((c).dtor_base, false, false);
        _6252_underlyingType = _out2608;
      } else {
        RAST._IType _6253___mcc_h0 = _source204.dtor_value;
        RAST._IType _6254_v = _6253___mcc_h0;
        _6252_underlyingType = _6254_v;
      }
      Dafny.ISequence<Dafny.Rune> _6255_datatypeName;
      _6255_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), _6255_datatypeName, _6246_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _6252_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _6256_fnBody;
      _6256_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source205 = (c).dtor_witnessExpr;
      if (_source205.is_None) {
        {
          _6256_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6256_fnBody, _6255_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _6257___mcc_h1 = _source205.dtor_value;
        DAST._IExpression _6258_e = _6257___mcc_h1;
        {
          RAST._IExpr _6259_eStr;
          DCOMPUTF16._IOwnership _6260___v42;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6261___v43;
          RAST._IExpr _out2609;
          DCOMPUTF16._IOwnership _out2610;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2611;
          DCOMPUTF16.COMP.GenExpr(_6258_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2609, out _out2610, out _out2611);
          _6259_eStr = _out2609;
          _6260___v42 = _out2610;
          _6261___v43 = _out2611;
          _6256_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6256_fnBody, _6255_datatypeName), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6259_eStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _6262_body;
      _6262_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_6256_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6247_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6255_datatypeName), _6249_typeParamsAsTypes), _6248_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_6262_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6247_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6255_datatypeName), _6249_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6247_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6255_datatypeName), _6249_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_6252_underlyingType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some((RAST.__default.SelfBorrowed).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _6263_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _6264_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _6265_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _6266_whereConstraints;
      Dafny.ISet<DAST._IType> _out2612;
      Dafny.ISequence<RAST._ITypeParam> _out2613;
      Dafny.ISequence<RAST._ITypeParam> _out2614;
      Dafny.ISequence<Dafny.Rune> _out2615;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2612, out _out2613, out _out2614, out _out2615);
      _6263_typeParamsSet = _out2612;
      _6264_sTypeParams = _out2613;
      _6265_sConstrainedTypeParams = _out2614;
      _6266_whereConstraints = _out2615;
      Dafny.ISequence<RAST._IType> _6267_typeParamsAsTypes;
      _6267_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_6268_t) => {
        return RAST.__default.RawType((_6268_t).dtor_content);
      })), _6264_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _6269_constrainedTypeParams;
      _6269_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_6265_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.IND, DCOMPUTF16.__default.IND));
      Dafny.ISequence<Dafny.Rune> _6270_datatypeName;
      _6270_datatypeName = DCOMPUTF16.__default.escapeIdent((c).dtor_name);
      Dafny.ISequence<RAST._IEnumCase> _6271_ctors;
      _6271_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _6272_i;
      _6272_i = BigInteger.Zero;
      while ((_6272_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _6273_ctor;
        _6273_ctor = ((c).dtor_ctors).Select(_6272_i);
        Dafny.ISequence<RAST._IFormal> _6274_ctorArgs;
        _6274_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _6275_j;
        _6275_j = BigInteger.Zero;
        while ((_6275_j) < (new BigInteger(((_6273_ctor).dtor_args).Count))) {
          DAST._IFormal _6276_formal;
          _6276_formal = ((_6273_ctor).dtor_args).Select(_6275_j);
          RAST._IType _6277_formalType;
          RAST._IType _out2616;
          _out2616 = DCOMPUTF16.COMP.GenType((_6276_formal).dtor_typ, false, false);
          _6277_formalType = _out2616;
          if ((c).dtor_isCo) {
            _6274_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_6274_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_6276_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_6277_formalType)))));
          } else {
            _6274_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_6274_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_6276_formal).dtor_name), _6277_formalType)));
          }
          _6275_j = (_6275_j) + (BigInteger.One);
        }
        _6271_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_6271_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMPUTF16.__default.escapeIdent((_6273_ctor).dtor_name), RAST.Formals.create_NamedFormals(_6274_ctorArgs))));
        _6272_i = (_6272_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6278_selfPath;
      _6278_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _6279_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _6280_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2617;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2618;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_6278_selfPath, (c).dtor_attributes))), _6263_typeParamsSet, out _out2617, out _out2618);
      _6279_implBodyRaw = _out2617;
      _6280_traitBodies = _out2618;
      Dafny.ISequence<RAST._IImplMember> _6281_implBody;
      _6281_implBody = _6279_implBodyRaw;
      _6272_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6282_emittedFields;
      _6282_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_6272_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _6283_ctor;
        _6283_ctor = ((c).dtor_ctors).Select(_6272_i);
        BigInteger _6284_j;
        _6284_j = BigInteger.Zero;
        while ((_6284_j) < (new BigInteger(((_6283_ctor).dtor_args).Count))) {
          DAST._IFormal _6285_formal;
          _6285_formal = ((_6283_ctor).dtor_args).Select(_6284_j);
          if (!((_6282_emittedFields).Contains((_6285_formal).dtor_name))) {
            _6282_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6282_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_6285_formal).dtor_name));
            RAST._IType _6286_formalType;
            RAST._IType _out2619;
            _out2619 = DCOMPUTF16.COMP.GenType((_6285_formal).dtor_typ, false, false);
            _6286_formalType = _out2619;
            Dafny.ISequence<RAST._IMatchCase> _6287_cases;
            _6287_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _6288_k;
            _6288_k = BigInteger.Zero;
            while ((_6288_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _6289_ctor2;
              _6289_ctor2 = ((c).dtor_ctors).Select(_6288_k);
              Dafny.ISequence<Dafny.Rune> _6290_pattern;
              _6290_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6270_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent((_6289_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _6291_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _6292_l;
              _6292_l = BigInteger.Zero;
              bool _6293_hasMatchingField;
              _6293_hasMatchingField = false;
              while ((_6292_l) < (new BigInteger(((_6289_ctor2).dtor_args).Count))) {
                DAST._IFormal _6294_formal2;
                _6294_formal2 = ((_6289_ctor2).dtor_args).Select(_6292_l);
                if (((_6285_formal).dtor_name).Equals((_6294_formal2).dtor_name)) {
                  _6293_hasMatchingField = true;
                }
                _6290_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6290_pattern, DCOMPUTF16.__default.escapeIdent((_6294_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _6292_l = (_6292_l) + (BigInteger.One);
              }
              _6290_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_6290_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_6293_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _6291_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMPUTF16.__default.escapeIdent((_6285_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _6291_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_6285_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _6291_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _6295_ctorMatch;
              _6295_ctorMatch = RAST.MatchCase.create(_6290_pattern, RAST.Expr.create_RawExpr(_6291_rhs));
              _6287_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_6287_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_6295_ctorMatch));
              _6288_k = (_6288_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _6287_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_6287_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_6270_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _6296_methodBody;
            _6296_methodBody = RAST.Expr.create_Match(RAST.__default.self, _6287_cases);
            _6281_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_6281_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMPUTF16.__default.escapeIdent((_6285_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_6286_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6296_methodBody)))));
          }
          _6284_j = (_6284_j) + (BigInteger.One);
        }
        _6272_i = (_6272_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _6297_typeI;
        _6297_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _6298_types;
        _6298_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_6297_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _6299_genTp;
          RAST._IType _out2620;
          _out2620 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_6297_typeI), false, false);
          _6299_genTp = _out2620;
          _6298_types = Dafny.Sequence<RAST._IType>.Concat(_6298_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_6299_genTp))));
          _6297_typeI = (_6297_typeI) + (BigInteger.One);
        }
        _6271_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_6271_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_6300_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _6300_tpe);
})), _6298_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _6301_enumBody;
      _6301_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq, Clone)]")), _6270_datatypeName, _6264_sTypeParams, _6271_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_6265_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6270_datatypeName), _6267_typeParamsAsTypes), _6266_whereConstraints, _6281_implBody)));
      _6272_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _6302_printImplBodyCases;
      _6302_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_6272_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _6303_ctor;
        _6303_ctor = ((c).dtor_ctors).Select(_6272_i);
        Dafny.ISequence<Dafny.Rune> _6304_ctorMatch;
        _6304_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_6303_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _6305_modulePrefix;
        _6305_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _6306_printRhs;
        _6306_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _6305_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent((_6303_ctor).dtor_name)), (((_6303_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _6307_j;
        _6307_j = BigInteger.Zero;
        while ((_6307_j) < (new BigInteger(((_6303_ctor).dtor_args).Count))) {
          DAST._IFormal _6308_formal;
          _6308_formal = ((_6303_ctor).dtor_args).Select(_6307_j);
          _6304_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6304_ctorMatch, DCOMPUTF16.__default.escapeIdent((_6308_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_6307_j).Sign == 1) {
            _6306_printRhs = (_6306_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _6306_printRhs = (_6306_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMPUTF16.__default.escapeIdent((_6308_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _6307_j = (_6307_j) + (BigInteger.One);
        }
        _6304_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_6304_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_6303_ctor).dtor_hasAnyArgs) {
          _6306_printRhs = (_6306_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _6306_printRhs = (_6306_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _6302_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_6302_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_6270_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _6304_ctorMatch), RAST.Expr.create_Block(_6306_printRhs))));
        _6272_i = (_6272_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _6302_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_6302_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(_6270_datatypeName, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _6309_printImplBody;
      _6309_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _6302_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _6310_printImpl;
      _6310_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6265_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6270_datatypeName), _6267_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6309_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _6311_defaultImpl;
      _6311_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      Dafny.ISequence<RAST._IModDecl> _6312_asRefImpl;
      _6312_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _6272_i = BigInteger.Zero;
        RAST._IExpr _6313_structName;
        _6313_structName = (RAST.Expr.create_Identifier(_6270_datatypeName)).MSel(DCOMPUTF16.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _6314_structAssignments;
        _6314_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_6272_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _6315_formal;
          _6315_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_6272_i);
          _6314_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_6314_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent((_6315_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _6272_i = (_6272_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _6316_defaultConstrainedTypeParams;
        _6316_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_6264_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        RAST._IType _6317_fullType;
        _6317_fullType = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(_6270_datatypeName), _6267_typeParamsAsTypes);
        _6311_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6316_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, _6317_fullType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(_6317_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_6313_structName, _6314_structAssignments))))))));
        _6312_asRefImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_6316_defaultConstrainedTypeParams, (((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("convert"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("AsRef"))).Apply1(_6317_fullType), RAST.Type.create_Borrowed(_6317_fullType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.self)))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_6301_enumBody, _6310_printImpl), _6311_defaultImpl), _6312_asRefImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi10 = new BigInteger((p).Count);
        for (BigInteger _6318_i = BigInteger.Zero; _6318_i < _hi10; _6318_i++) {
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(((p).Select(_6318_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = (((((p).Select(BigInteger.Zero))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))) ? (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) : (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"))));
        BigInteger _hi11 = new BigInteger((p).Count);
        for (BigInteger _6319_i = BigInteger.Zero; _6319_i < _hi11; _6319_i++) {
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(((p).Select(_6319_i))));
        }
      }
      return r;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _6320_i;
        _6320_i = BigInteger.Zero;
        while ((_6320_i) < (new BigInteger((args).Count))) {
          RAST._IType _6321_genTp;
          RAST._IType _out2621;
          _out2621 = DCOMPUTF16.COMP.GenType((args).Select(_6320_i), inBinding, inFn);
          _6321_genTp = _out2621;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_6321_genTp));
          _6320_i = (_6320_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source206 = c;
      if (_source206.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6322___mcc_h0 = _source206.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _6323___mcc_h1 = _source206.dtor_typeArgs;
        DAST._IResolvedType _6324___mcc_h2 = _source206.dtor_resolved;
        DAST._IResolvedType _6325_resolved = _6324___mcc_h2;
        Dafny.ISequence<DAST._IType> _6326_args = _6323___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6327_p = _6322___mcc_h0;
        {
          RAST._IType _6328_t;
          RAST._IType _out2622;
          _out2622 = DCOMPUTF16.COMP.GenPath(_6327_p);
          _6328_t = _out2622;
          Dafny.ISequence<RAST._IType> _6329_typeArgs;
          Dafny.ISequence<RAST._IType> _out2623;
          _out2623 = DCOMPUTF16.COMP.GenTypeArgs(_6326_args, inBinding, inFn);
          _6329_typeArgs = _out2623;
          s = RAST.Type.create_TypeApp(_6328_t, _6329_typeArgs);
          DAST._IResolvedType _source207 = _6325_resolved;
          if (_source207.is_Datatype) {
            DAST._IDatatypeType _6330___mcc_h21 = _source207.dtor_datatypeType;
            DAST._IDatatypeType _source208 = _6330___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6331___mcc_h22 = _source208.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _6332___mcc_h23 = _source208.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _6333_attributes = _6332___mcc_h23;
            {
              if (DCOMPUTF16.COMP.IsRcWrapped(_6333_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source207.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6334___mcc_h24 = _source207.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _6335___mcc_h25 = _source207.dtor_attributes;
            {
              if ((_6327_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::any::Any")));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _6336___mcc_h26 = _source207.dtor_baseType;
            DAST._INewtypeRange _6337___mcc_h27 = _source207.dtor_range;
            bool _6338___mcc_h28 = _source207.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _6339___mcc_h29 = _source207.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _6340_attributes = _6339___mcc_h29;
            bool _6341_erased = _6338___mcc_h28;
            DAST._INewtypeRange _6342_range = _6337___mcc_h27;
            DAST._IType _6343_t = _6336___mcc_h26;
            {
              if (_6341_erased) {
                Std.Wrappers._IOption<RAST._IType> _source209 = DCOMPUTF16.COMP.NewtypeToRustType(_6343_t, _6342_range);
                if (_source209.is_None) {
                } else {
                  RAST._IType _6344___mcc_h30 = _source209.dtor_value;
                  RAST._IType _6345_v = _6344___mcc_h30;
                  s = _6345_v;
                }
              }
            }
          }
        }
      } else if (_source206.is_Nullable) {
        DAST._IType _6346___mcc_h3 = _source206.dtor_Nullable_a0;
        DAST._IType _6347_inner = _6346___mcc_h3;
        {
          RAST._IType _6348_innerExpr;
          RAST._IType _out2624;
          _out2624 = DCOMPUTF16.COMP.GenType(_6347_inner, inBinding, inFn);
          _6348_innerExpr = _out2624;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_6348_innerExpr));
        }
      } else if (_source206.is_Tuple) {
        Dafny.ISequence<DAST._IType> _6349___mcc_h4 = _source206.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _6350_types = _6349___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _6351_args;
          _6351_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _6352_i;
          _6352_i = BigInteger.Zero;
          while ((_6352_i) < (new BigInteger((_6350_types).Count))) {
            RAST._IType _6353_generated;
            RAST._IType _out2625;
            _out2625 = DCOMPUTF16.COMP.GenType((_6350_types).Select(_6352_i), inBinding, inFn);
            _6353_generated = _out2625;
            _6351_args = Dafny.Sequence<RAST._IType>.Concat(_6351_args, Dafny.Sequence<RAST._IType>.FromElements(_6353_generated));
            _6352_i = (_6352_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_6351_args);
        }
      } else if (_source206.is_Array) {
        DAST._IType _6354___mcc_h5 = _source206.dtor_element;
        BigInteger _6355___mcc_h6 = _source206.dtor_dims;
        BigInteger _6356_dims = _6355___mcc_h6;
        DAST._IType _6357_element = _6354___mcc_h5;
        {
          RAST._IType _6358_elem;
          RAST._IType _out2626;
          _out2626 = DCOMPUTF16.COMP.GenType(_6357_element, inBinding, inFn);
          _6358_elem = _out2626;
          s = _6358_elem;
          BigInteger _6359_i;
          _6359_i = BigInteger.Zero;
          while ((_6359_i) < (_6356_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _6359_i = (_6359_i) + (BigInteger.One);
          }
        }
      } else if (_source206.is_Seq) {
        DAST._IType _6360___mcc_h7 = _source206.dtor_element;
        DAST._IType _6361_element = _6360___mcc_h7;
        {
          RAST._IType _6362_elem;
          RAST._IType _out2627;
          _out2627 = DCOMPUTF16.COMP.GenType(_6361_element, inBinding, inFn);
          _6362_elem = _out2627;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_6362_elem));
        }
      } else if (_source206.is_Set) {
        DAST._IType _6363___mcc_h8 = _source206.dtor_element;
        DAST._IType _6364_element = _6363___mcc_h8;
        {
          RAST._IType _6365_elem;
          RAST._IType _out2628;
          _out2628 = DCOMPUTF16.COMP.GenType(_6364_element, inBinding, inFn);
          _6365_elem = _out2628;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_6365_elem));
        }
      } else if (_source206.is_Multiset) {
        DAST._IType _6366___mcc_h9 = _source206.dtor_element;
        DAST._IType _6367_element = _6366___mcc_h9;
        {
          RAST._IType _6368_elem;
          RAST._IType _out2629;
          _out2629 = DCOMPUTF16.COMP.GenType(_6367_element, inBinding, inFn);
          _6368_elem = _out2629;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_6368_elem));
        }
      } else if (_source206.is_Map) {
        DAST._IType _6369___mcc_h10 = _source206.dtor_key;
        DAST._IType _6370___mcc_h11 = _source206.dtor_value;
        DAST._IType _6371_value = _6370___mcc_h11;
        DAST._IType _6372_key = _6369___mcc_h10;
        {
          RAST._IType _6373_keyType;
          RAST._IType _out2630;
          _out2630 = DCOMPUTF16.COMP.GenType(_6372_key, inBinding, inFn);
          _6373_keyType = _out2630;
          RAST._IType _6374_valueType;
          RAST._IType _out2631;
          _out2631 = DCOMPUTF16.COMP.GenType(_6371_value, inBinding, inFn);
          _6374_valueType = _out2631;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_6373_keyType, _6374_valueType));
        }
      } else if (_source206.is_SetBuilder) {
        DAST._IType _6375___mcc_h12 = _source206.dtor_element;
        DAST._IType _6376_elem = _6375___mcc_h12;
        {
          RAST._IType _6377_elemType;
          RAST._IType _out2632;
          _out2632 = DCOMPUTF16.COMP.GenType(_6376_elem, inBinding, inFn);
          _6377_elemType = _out2632;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_6377_elemType));
        }
      } else if (_source206.is_MapBuilder) {
        DAST._IType _6378___mcc_h13 = _source206.dtor_key;
        DAST._IType _6379___mcc_h14 = _source206.dtor_value;
        DAST._IType _6380_value = _6379___mcc_h14;
        DAST._IType _6381_key = _6378___mcc_h13;
        {
          RAST._IType _6382_keyType;
          RAST._IType _out2633;
          _out2633 = DCOMPUTF16.COMP.GenType(_6381_key, inBinding, inFn);
          _6382_keyType = _out2633;
          RAST._IType _6383_valueType;
          RAST._IType _out2634;
          _out2634 = DCOMPUTF16.COMP.GenType(_6380_value, inBinding, inFn);
          _6383_valueType = _out2634;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_6382_keyType, _6383_valueType));
        }
      } else if (_source206.is_Arrow) {
        Dafny.ISequence<DAST._IType> _6384___mcc_h15 = _source206.dtor_args;
        DAST._IType _6385___mcc_h16 = _source206.dtor_result;
        DAST._IType _6386_result = _6385___mcc_h16;
        Dafny.ISequence<DAST._IType> _6387_args = _6384___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _6388_argTypes;
          _6388_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _6389_i;
          _6389_i = BigInteger.Zero;
          while ((_6389_i) < (new BigInteger((_6387_args).Count))) {
            RAST._IType _6390_generated;
            RAST._IType _out2635;
            _out2635 = DCOMPUTF16.COMP.GenType((_6387_args).Select(_6389_i), inBinding, true);
            _6390_generated = _out2635;
            _6388_argTypes = Dafny.Sequence<RAST._IType>.Concat(_6388_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_6390_generated)));
            _6389_i = (_6389_i) + (BigInteger.One);
          }
          RAST._IType _6391_resultType;
          RAST._IType _out2636;
          _out2636 = DCOMPUTF16.COMP.GenType(_6386_result, inBinding, (inFn) || (inBinding));
          _6391_resultType = _out2636;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_6388_argTypes, RAST.Type.create_IntersectionType(_6391_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source206.is_Primitive) {
        DAST._IPrimitive _6392___mcc_h17 = _source206.dtor_Primitive_a0;
        DAST._IPrimitive _6393_p = _6392___mcc_h17;
        {
          DAST._IPrimitive _source210 = _6393_p;
          if (_source210.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source210.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source210.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar)));
          } else if (_source210.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar);
          }
        }
      } else if (_source206.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _6394___mcc_h18 = _source206.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _6395_v = _6394___mcc_h18;
        s = RAST.__default.RawType(_6395_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _6396___mcc_h19 = _source206.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source211 = _6396___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _6397___mcc_h20 = _source211;
        Dafny.ISequence<Dafny.Rune> _6398_name = _6397___mcc_h20;
        s = RAST.__default.RawType(DCOMPUTF16.__default.escapeIdent(_6398_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _6399_i;
      _6399_i = BigInteger.Zero;
      while ((_6399_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source212 = (body).Select(_6399_i);
        DAST._IMethod _6400___mcc_h0 = _source212;
        DAST._IMethod _6401_m = _6400___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source213 = (_6401_m).dtor_overridingPath;
          if (_source213.is_None) {
            {
              RAST._IImplMember _6402_generated;
              RAST._IImplMember _out2637;
              _out2637 = DCOMPUTF16.COMP.GenMethod(_6401_m, forTrait, enclosingType, enclosingTypeParams);
              _6402_generated = _out2637;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_6402_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6403___mcc_h1 = _source213.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6404_p = _6403___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _6405_existing;
              _6405_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_6404_p)) {
                _6405_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_6404_p);
              }
              RAST._IImplMember _6406_genMethod;
              RAST._IImplMember _out2638;
              _out2638 = DCOMPUTF16.COMP.GenMethod(_6401_m, true, enclosingType, enclosingTypeParams);
              _6406_genMethod = _out2638;
              _6405_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_6405_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_6406_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_6404_p, _6405_existing)));
            }
          }
        }
        _6399_i = (_6399_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _6407_i;
      _6407_i = BigInteger.Zero;
      while ((_6407_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _6408_param;
        _6408_param = (@params).Select(_6407_i);
        RAST._IType _6409_paramType;
        RAST._IType _out2639;
        _out2639 = DCOMPUTF16.COMP.GenType((_6408_param).dtor_typ, false, false);
        _6409_paramType = _out2639;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_6408_param).dtor_name), RAST.Type.create_Borrowed(_6409_paramType))));
        _6407_i = (_6407_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _6410_params;
      Dafny.ISequence<RAST._IFormal> _out2640;
      _out2640 = DCOMPUTF16.COMP.GenParams((m).dtor_params);
      _6410_params = _out2640;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6411_paramNames;
      _6411_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _6412_paramOwnerships;
      _6412_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
      BigInteger _6413_paramI;
      _6413_paramI = BigInteger.Zero;
      while ((_6413_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        Dafny.ISequence<Dafny.Rune> _6414_name;
        _6414_name = (((m).dtor_params).Select(_6413_paramI)).dtor_name;
        _6411_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_6411_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6414_name));
        _6412_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_6412_paramOwnerships, _6414_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
        _6413_paramI = (_6413_paramI) + (BigInteger.One);
      }
      DCOMPUTF16._IEnvironment _6415_env;
      _6415_env = DCOMPUTF16.Environment.create(_6411_paramNames, _6412_paramOwnerships);
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _6410_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.selfBorrowed), _6410_params);
        } else {
          RAST._IType _6416_tpe;
          RAST._IType _out2641;
          _out2641 = DCOMPUTF16.COMP.GenType(enclosingType, false, false);
          _6416_tpe = _out2641;
          _6410_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_6416_tpe))), _6410_params);
        }
      }
      Dafny.ISequence<RAST._IType> _6417_retTypeArgs;
      _6417_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _6418_typeI;
      _6418_typeI = BigInteger.Zero;
      while ((_6418_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _6419_typeExpr;
        RAST._IType _out2642;
        _out2642 = DCOMPUTF16.COMP.GenType(((m).dtor_outTypes).Select(_6418_typeI), false, false);
        _6419_typeExpr = _out2642;
        _6417_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_6417_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_6419_typeExpr));
        _6418_typeI = (_6418_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _6420_visibility;
      _6420_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _6421_fnName;
      _6421_fnName = DCOMPUTF16.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _6422_typeParamsFiltered;
      _6422_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _6423_typeParamI;
      _6423_typeParamI = BigInteger.Zero;
      while ((_6423_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _6424_typeParam;
        _6424_typeParam = ((m).dtor_typeParams).Select(_6423_typeParamI);
        if (!((enclosingTypeParams).Contains(_6424_typeParam))) {
          _6422_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_6422_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_6424_typeParam));
        }
        _6423_typeParamI = (_6423_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _6425_whereClauses;
      _6425_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _6426_typeParams;
      _6426_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_6422_typeParamsFiltered).Count)).Sign == 1) {
        _6425_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_6425_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _6427_i;
        _6427_i = BigInteger.Zero;
        while ((_6427_i) < (new BigInteger((_6422_typeParamsFiltered).Count))) {
          RAST._IType _6428_typeExpr;
          RAST._IType _out2643;
          _out2643 = DCOMPUTF16.COMP.GenType((_6422_typeParamsFiltered).Select(_6427_i), false, false);
          _6428_typeExpr = _out2643;
          _6426_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_6426_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_6428_typeExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _6427_i = (_6427_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _6429_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _6430_earlyReturn;
        _6430_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source214 = (m).dtor_outVars;
        if (_source214.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6431___mcc_h0 = _source214.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6432_outVars = _6431___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _6433_tupleArgs;
            _6433_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _6434_outI;
            _6434_outI = BigInteger.Zero;
            while ((_6434_outI) < (new BigInteger((_6432_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _6435_outVar;
              _6435_outVar = (_6432_outVars).Select(_6434_outI);
              _6433_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_6433_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent((_6435_outVar)))));
              _6434_outI = (_6434_outI) + (BigInteger.One);
            }
            _6430_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_6433_tupleArgs)));
          }
        }
        RAST._IExpr _6436_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6437___v47;
        RAST._IExpr _out2644;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2645;
        DCOMPUTF16.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _6415_env, true, _6430_earlyReturn, out _out2644, out _out2645);
        _6436_body = _out2644;
        _6437___v47 = _out2645;
        _6429_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_6436_body);
      } else {
        _6429_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_6420_visibility, RAST.Fn.create(_6421_fnName, _6426_typeParams, _6410_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_6417_retTypeArgs).Count)) == (BigInteger.One)) ? ((_6417_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_6417_retTypeArgs)))), _6425_whereClauses, _6429_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6438_declarations;
      _6438_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _6439_i;
      _6439_i = BigInteger.Zero;
      while ((_6439_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _6440_stmt;
        _6440_stmt = (stmts).Select(_6439_i);
        RAST._IExpr _6441_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6442_recIdents;
        RAST._IExpr _out2646;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2647;
        DCOMPUTF16.COMP.GenStmt(_6440_stmt, selfIdent, env, (isLast) && ((_6439_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out2646, out _out2647);
        _6441_stmtExpr = _out2646;
        _6442_recIdents = _out2647;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6442_recIdents, _6438_declarations));
        DAST._IStatement _source215 = _6440_stmt;
        if (_source215.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _6443___mcc_h0 = _source215.dtor_name;
          DAST._IType _6444___mcc_h1 = _source215.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _6445___mcc_h2 = _source215.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _6446_name = _6443___mcc_h0;
          {
            _6438_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6438_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6446_name));
          }
        } else if (_source215.is_Assign) {
          DAST._IAssignLhs _6447___mcc_h6 = _source215.dtor_lhs;
          DAST._IExpression _6448___mcc_h7 = _source215.dtor_value;
        } else if (_source215.is_If) {
          DAST._IExpression _6449___mcc_h10 = _source215.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _6450___mcc_h11 = _source215.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _6451___mcc_h12 = _source215.dtor_els;
        } else if (_source215.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _6452___mcc_h16 = _source215.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _6453___mcc_h17 = _source215.dtor_body;
        } else if (_source215.is_While) {
          DAST._IExpression _6454___mcc_h20 = _source215.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _6455___mcc_h21 = _source215.dtor_body;
        } else if (_source215.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _6456___mcc_h24 = _source215.dtor_boundName;
          DAST._IType _6457___mcc_h25 = _source215.dtor_boundType;
          DAST._IExpression _6458___mcc_h26 = _source215.dtor_over;
          Dafny.ISequence<DAST._IStatement> _6459___mcc_h27 = _source215.dtor_body;
        } else if (_source215.is_Call) {
          DAST._IExpression _6460___mcc_h32 = _source215.dtor_on;
          DAST._ICallName _6461___mcc_h33 = _source215.dtor_callName;
          Dafny.ISequence<DAST._IType> _6462___mcc_h34 = _source215.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _6463___mcc_h35 = _source215.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _6464___mcc_h36 = _source215.dtor_outs;
        } else if (_source215.is_Return) {
          DAST._IExpression _6465___mcc_h42 = _source215.dtor_expr;
        } else if (_source215.is_EarlyReturn) {
        } else if (_source215.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6466___mcc_h44 = _source215.dtor_toLabel;
        } else if (_source215.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _6467___mcc_h46 = _source215.dtor_body;
        } else if (_source215.is_JumpTailCallStart) {
        } else if (_source215.is_Halt) {
        } else {
          DAST._IExpression _6468___mcc_h48 = _source215.dtor_Print_a0;
        }
        generated = (generated).Then(_6441_stmtExpr);
        _6439_i = (_6439_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source216 = lhs;
      if (_source216.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _6469___mcc_h0 = _source216.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source217 = _6469___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _6470___mcc_h1 = _source217;
        Dafny.ISequence<Dafny.Rune> _6471_id = _6470___mcc_h1;
        {
          if (((env).IsBorrowed(_6471_id)) || ((env).IsBorrowedMut(_6471_id))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMPUTF16.__default.escapeIdent(_6471_id));
          } else {
            generated = DCOMPUTF16.__default.escapeIdent(_6471_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6471_id);
          needsIIFE = false;
        }
      } else if (_source216.is_Select) {
        DAST._IExpression _6472___mcc_h2 = _source216.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _6473___mcc_h3 = _source216.dtor_field;
        Dafny.ISequence<Dafny.Rune> _6474_field = _6473___mcc_h3;
        DAST._IExpression _6475_on = _6472___mcc_h2;
        {
          RAST._IExpr _6476_onExpr;
          DCOMPUTF16._IOwnership _6477_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6478_recIdents;
          RAST._IExpr _out2648;
          DCOMPUTF16._IOwnership _out2649;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2650;
          DCOMPUTF16.COMP.GenExpr(_6475_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2648, out _out2649, out _out2650);
          _6476_onExpr = _out2648;
          _6477_onOwned = _out2649;
          _6478_recIdents = _out2650;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_6476_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _6474_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _6478_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _6479___mcc_h4 = _source216.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _6480___mcc_h5 = _source216.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _6481_indices = _6480___mcc_h5;
        DAST._IExpression _6482_on = _6479___mcc_h4;
        {
          RAST._IExpr _6483_onExpr;
          DCOMPUTF16._IOwnership _6484_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6485_recIdents;
          RAST._IExpr _out2651;
          DCOMPUTF16._IOwnership _out2652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2653;
          DCOMPUTF16.COMP.GenExpr(_6482_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2651, out _out2652, out _out2653);
          _6483_onExpr = _out2651;
          _6484_onOwned = _out2652;
          _6485_recIdents = _out2653;
          readIdents = _6485_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _6486_i;
          _6486_i = BigInteger.Zero;
          while ((_6486_i) < (new BigInteger((_6481_indices).Count))) {
            RAST._IExpr _6487_idx;
            DCOMPUTF16._IOwnership _6488___v51;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6489_recIdentsIdx;
            RAST._IExpr _out2654;
            DCOMPUTF16._IOwnership _out2655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2656;
            DCOMPUTF16.COMP.GenExpr((_6481_indices).Select(_6486_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2654, out _out2655, out _out2656);
            _6487_idx = _out2654;
            _6488___v51 = _out2655;
            _6489_recIdentsIdx = _out2656;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_6486_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_6487_idx)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6489_recIdentsIdx);
            _6486_i = (_6486_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_6483_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _6486_i = BigInteger.Zero;
          while ((_6486_i) < (new BigInteger((_6481_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_6486_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _6486_i = (_6486_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source218 = stmt;
      if (_source218.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _6490___mcc_h0 = _source218.dtor_name;
        DAST._IType _6491___mcc_h1 = _source218.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _6492___mcc_h2 = _source218.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source219 = _6492___mcc_h2;
        if (_source219.is_None) {
          DAST._IType _6493_typ = _6491___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _6494_name = _6490___mcc_h0;
          {
            RAST._IType _6495_typeString;
            RAST._IType _out2657;
            _out2657 = DCOMPUTF16.COMP.GenType(_6493_typ, true, false);
            _6495_typeString = _out2657;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_6494_name), Std.Wrappers.Option<RAST._IType>.create_Some(_6495_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _6496___mcc_h3 = _source219.dtor_value;
          DAST._IExpression _6497_expression = _6496___mcc_h3;
          DAST._IType _6498_typ = _6491___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _6499_name = _6490___mcc_h0;
          {
            RAST._IType _6500_typeString;
            RAST._IType _out2658;
            _out2658 = DCOMPUTF16.COMP.GenType(_6498_typ, true, false);
            _6500_typeString = _out2658;
            RAST._IExpr _6501_expr;
            DCOMPUTF16._IOwnership _6502___v52;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6503_recIdents;
            RAST._IExpr _out2659;
            DCOMPUTF16._IOwnership _out2660;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2661;
            DCOMPUTF16.COMP.GenExpr(_6497_expression, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2659, out _out2660, out _out2661);
            _6501_expr = _out2659;
            _6502___v52 = _out2660;
            _6503_recIdents = _out2661;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_6499_name), Std.Wrappers.Option<RAST._IType>.create_Some(_6500_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6501_expr));
            readIdents = _6503_recIdents;
          }
        }
      } else if (_source218.is_Assign) {
        DAST._IAssignLhs _6504___mcc_h4 = _source218.dtor_lhs;
        DAST._IExpression _6505___mcc_h5 = _source218.dtor_value;
        DAST._IExpression _6506_expression = _6505___mcc_h5;
        DAST._IAssignLhs _6507_lhs = _6504___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _6508_lhsGen;
          bool _6509_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6510_recIdents;
          Dafny.ISequence<Dafny.Rune> _out2662;
          bool _out2663;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2664;
          DCOMPUTF16.COMP.GenAssignLhs(_6507_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, env, out _out2662, out _out2663, out _out2664);
          _6508_lhsGen = _out2662;
          _6509_needsIIFE = _out2663;
          _6510_recIdents = _out2664;
          RAST._IExpr _6511_exprGen;
          DCOMPUTF16._IOwnership _6512___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6513_exprIdents;
          RAST._IExpr _out2665;
          DCOMPUTF16._IOwnership _out2666;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2667;
          DCOMPUTF16.COMP.GenExpr(_6506_expression, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2665, out _out2666, out _out2667);
          _6511_exprGen = _out2665;
          _6512___v53 = _out2666;
          _6513_exprIdents = _out2667;
          if (_6509_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6511_exprGen)), RAST.Expr.create_RawExpr(_6508_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_6508_lhsGen, _6511_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6510_recIdents, _6513_exprIdents);
        }
      } else if (_source218.is_If) {
        DAST._IExpression _6514___mcc_h6 = _source218.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _6515___mcc_h7 = _source218.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _6516___mcc_h8 = _source218.dtor_els;
        Dafny.ISequence<DAST._IStatement> _6517_els = _6516___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _6518_thn = _6515___mcc_h7;
        DAST._IExpression _6519_cond = _6514___mcc_h6;
        {
          RAST._IExpr _6520_cond;
          DCOMPUTF16._IOwnership _6521___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6522_recIdents;
          RAST._IExpr _out2668;
          DCOMPUTF16._IOwnership _out2669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2670;
          DCOMPUTF16.COMP.GenExpr(_6519_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2668, out _out2669, out _out2670);
          _6520_cond = _out2668;
          _6521___v54 = _out2669;
          _6522_recIdents = _out2670;
          Dafny.ISequence<Dafny.Rune> _6523_condString;
          _6523_condString = (_6520_cond)._ToString(DCOMPUTF16.__default.IND);
          readIdents = _6522_recIdents;
          RAST._IExpr _6524_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6525_thnIdents;
          RAST._IExpr _out2671;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2672;
          DCOMPUTF16.COMP.GenStmts(_6518_thn, selfIdent, env, isLast, earlyReturn, out _out2671, out _out2672);
          _6524_thn = _out2671;
          _6525_thnIdents = _out2672;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6525_thnIdents);
          RAST._IExpr _6526_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6527_elsIdents;
          RAST._IExpr _out2673;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2674;
          DCOMPUTF16.COMP.GenStmts(_6517_els, selfIdent, env, isLast, earlyReturn, out _out2673, out _out2674);
          _6526_els = _out2673;
          _6527_elsIdents = _out2674;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6527_elsIdents);
          generated = RAST.Expr.create_IfExpr(_6520_cond, _6524_thn, _6526_els);
        }
      } else if (_source218.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _6528___mcc_h9 = _source218.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _6529___mcc_h10 = _source218.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6530_body = _6529___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _6531_lbl = _6528___mcc_h9;
        {
          RAST._IExpr _6532_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6533_bodyIdents;
          RAST._IExpr _out2675;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2676;
          DCOMPUTF16.COMP.GenStmts(_6530_body, selfIdent, env, isLast, earlyReturn, out _out2675, out _out2676);
          _6532_body = _out2675;
          _6533_bodyIdents = _out2676;
          readIdents = _6533_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _6531_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_6532_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source218.is_While) {
        DAST._IExpression _6534___mcc_h11 = _source218.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _6535___mcc_h12 = _source218.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6536_body = _6535___mcc_h12;
        DAST._IExpression _6537_cond = _6534___mcc_h11;
        {
          RAST._IExpr _6538_cond;
          DCOMPUTF16._IOwnership _6539___v55;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6540_recIdents;
          RAST._IExpr _out2677;
          DCOMPUTF16._IOwnership _out2678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2679;
          DCOMPUTF16.COMP.GenExpr(_6537_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2677, out _out2678, out _out2679);
          _6538_cond = _out2677;
          _6539___v55 = _out2678;
          _6540_recIdents = _out2679;
          readIdents = _6540_recIdents;
          RAST._IExpr _6541_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6542_bodyIdents;
          RAST._IExpr _out2680;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2681;
          DCOMPUTF16.COMP.GenStmts(_6536_body, selfIdent, env, false, earlyReturn, out _out2680, out _out2681);
          _6541_body = _out2680;
          _6542_bodyIdents = _out2681;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6542_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_6538_cond), _6541_body);
        }
      } else if (_source218.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _6543___mcc_h13 = _source218.dtor_boundName;
        DAST._IType _6544___mcc_h14 = _source218.dtor_boundType;
        DAST._IExpression _6545___mcc_h15 = _source218.dtor_over;
        Dafny.ISequence<DAST._IStatement> _6546___mcc_h16 = _source218.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6547_body = _6546___mcc_h16;
        DAST._IExpression _6548_over = _6545___mcc_h15;
        DAST._IType _6549_boundType = _6544___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _6550_boundName = _6543___mcc_h13;
        {
          RAST._IExpr _6551_over;
          DCOMPUTF16._IOwnership _6552___v56;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6553_recIdents;
          RAST._IExpr _out2682;
          DCOMPUTF16._IOwnership _out2683;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2684;
          DCOMPUTF16.COMP.GenExpr(_6548_over, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2682, out _out2683, out _out2684);
          _6551_over = _out2682;
          _6552___v56 = _out2683;
          _6553_recIdents = _out2684;
          RAST._IType _6554_boundTypeStr;
          RAST._IType _out2685;
          _out2685 = DCOMPUTF16.COMP.GenType(_6549_boundType, false, false);
          _6554_boundTypeStr = _out2685;
          readIdents = _6553_recIdents;
          RAST._IExpr _6555_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6556_bodyIdents;
          RAST._IExpr _out2686;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2687;
          DCOMPUTF16.COMP.GenStmts(_6547_body, selfIdent, (env).Add(_6550_boundName, DCOMPUTF16.Ownership.create_OwnershipBorrowed()), false, earlyReturn, out _out2686, out _out2687);
          _6555_body = _out2686;
          _6556_bodyIdents = _out2687;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6556_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6550_boundName));
          generated = RAST.Expr.create_For(DCOMPUTF16.__default.escapeIdent(_6550_boundName), _6551_over, _6555_body);
        }
      } else if (_source218.is_Call) {
        DAST._IExpression _6557___mcc_h17 = _source218.dtor_on;
        DAST._ICallName _6558___mcc_h18 = _source218.dtor_callName;
        Dafny.ISequence<DAST._IType> _6559___mcc_h19 = _source218.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _6560___mcc_h20 = _source218.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _6561___mcc_h21 = _source218.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _6562_maybeOutVars = _6561___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _6563_args = _6560___mcc_h20;
        Dafny.ISequence<DAST._IType> _6564_typeArgs = _6559___mcc_h19;
        DAST._ICallName _6565_name = _6558___mcc_h18;
        DAST._IExpression _6566_on = _6557___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6567_typeArgString;
          _6567_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_6564_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _6568_typeI;
            _6568_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _6569_typeArgsR;
            _6569_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_6568_typeI) < (new BigInteger((_6564_typeArgs).Count))) {
              RAST._IType _6570_tpe;
              RAST._IType _out2688;
              _out2688 = DCOMPUTF16.COMP.GenType((_6564_typeArgs).Select(_6568_typeI), false, false);
              _6570_tpe = _out2688;
              _6569_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_6569_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_6570_tpe));
              _6568_typeI = (_6568_typeI) + (BigInteger.One);
            }
            _6567_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _6569_typeArgsR))._ToString(DCOMPUTF16.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _6571_argString;
          _6571_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _6572_i;
          _6572_i = BigInteger.Zero;
          while ((_6572_i) < (new BigInteger((_6563_args).Count))) {
            if ((_6572_i).Sign == 1) {
              _6571_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6571_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _6573_argExpr;
            DCOMPUTF16._IOwnership _6574_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6575_argIdents;
            RAST._IExpr _out2689;
            DCOMPUTF16._IOwnership _out2690;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2691;
            DCOMPUTF16.COMP.GenExpr((_6563_args).Select(_6572_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2689, out _out2690, out _out2691);
            _6573_argExpr = _out2689;
            _6574_ownership = _out2690;
            _6575_argIdents = _out2691;
            Dafny.ISequence<Dafny.Rune> _6576_argExprString;
            _6576_argExprString = (_6573_argExpr)._ToString(DCOMPUTF16.__default.IND);
            _6571_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6571_argString, _6576_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6575_argIdents);
            _6572_i = (_6572_i) + (BigInteger.One);
          }
          RAST._IExpr _6577_onExpr;
          DCOMPUTF16._IOwnership _6578___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6579_enclosingIdents;
          RAST._IExpr _out2692;
          DCOMPUTF16._IOwnership _out2693;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2694;
          DCOMPUTF16.COMP.GenExpr(_6566_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out2692, out _out2693, out _out2694);
          _6577_onExpr = _out2692;
          _6578___v57 = _out2693;
          _6579_enclosingIdents = _out2694;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6579_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _6580_enclosingString;
          _6580_enclosingString = (_6577_onExpr)._ToString(DCOMPUTF16.__default.IND);
          DAST._IExpression _source220 = _6566_on;
          if (_source220.is_Literal) {
            DAST._ILiteral _6581___mcc_h26 = _source220.dtor_Literal_a0;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _6582___mcc_h28 = _source220.dtor_Ident_a0;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6583___mcc_h30 = _source220.dtor_Companion_a0;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_6580_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source220.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _6584___mcc_h32 = _source220.dtor_Tuple_a0;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6585___mcc_h34 = _source220.dtor_path;
            Dafny.ISequence<DAST._IType> _6586___mcc_h35 = _source220.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6587___mcc_h36 = _source220.dtor_args;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _6588___mcc_h40 = _source220.dtor_dims;
            DAST._IType _6589___mcc_h41 = _source220.dtor_typ;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_DatatypeValue) {
            DAST._IDatatypeType _6590___mcc_h44 = _source220.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _6591___mcc_h45 = _source220.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _6592___mcc_h46 = _source220.dtor_variant;
            bool _6593___mcc_h47 = _source220.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6594___mcc_h48 = _source220.dtor_contents;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Convert) {
            DAST._IExpression _6595___mcc_h54 = _source220.dtor_value;
            DAST._IType _6596___mcc_h55 = _source220.dtor_from;
            DAST._IType _6597___mcc_h56 = _source220.dtor_typ;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_SeqConstruct) {
            DAST._IExpression _6598___mcc_h60 = _source220.dtor_length;
            DAST._IExpression _6599___mcc_h61 = _source220.dtor_elem;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _6600___mcc_h64 = _source220.dtor_elements;
            DAST._IType _6601___mcc_h65 = _source220.dtor_typ;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _6602___mcc_h68 = _source220.dtor_elements;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _6603___mcc_h70 = _source220.dtor_elements;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6604___mcc_h72 = _source220.dtor_mapElems;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_MapBuilder) {
            DAST._IType _6605___mcc_h74 = _source220.dtor_keyType;
            DAST._IType _6606___mcc_h75 = _source220.dtor_valueType;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_SeqUpdate) {
            DAST._IExpression _6607___mcc_h78 = _source220.dtor_expr;
            DAST._IExpression _6608___mcc_h79 = _source220.dtor_indexExpr;
            DAST._IExpression _6609___mcc_h80 = _source220.dtor_value;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_MapUpdate) {
            DAST._IExpression _6610___mcc_h84 = _source220.dtor_expr;
            DAST._IExpression _6611___mcc_h85 = _source220.dtor_indexExpr;
            DAST._IExpression _6612___mcc_h86 = _source220.dtor_value;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_SetBuilder) {
            DAST._IType _6613___mcc_h90 = _source220.dtor_elemType;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_ToMultiset) {
            DAST._IExpression _6614___mcc_h92 = _source220.dtor_ToMultiset_a0;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_This) {
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Ite) {
            DAST._IExpression _6615___mcc_h94 = _source220.dtor_cond;
            DAST._IExpression _6616___mcc_h95 = _source220.dtor_thn;
            DAST._IExpression _6617___mcc_h96 = _source220.dtor_els;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_UnOp) {
            DAST._IUnaryOp _6618___mcc_h100 = _source220.dtor_unOp;
            DAST._IExpression _6619___mcc_h101 = _source220.dtor_expr;
            DAST.Format._IUnOpFormat _6620___mcc_h102 = _source220.dtor_format1;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_BinOp) {
            DAST._IBinOp _6621___mcc_h106 = _source220.dtor_op;
            DAST._IExpression _6622___mcc_h107 = _source220.dtor_left;
            DAST._IExpression _6623___mcc_h108 = _source220.dtor_right;
            DAST.Format._IBinOpFormat _6624___mcc_h109 = _source220.dtor_format2;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_ArrayLen) {
            DAST._IExpression _6625___mcc_h114 = _source220.dtor_expr;
            BigInteger _6626___mcc_h115 = _source220.dtor_dim;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_MapKeys) {
            DAST._IExpression _6627___mcc_h118 = _source220.dtor_expr;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_MapValues) {
            DAST._IExpression _6628___mcc_h120 = _source220.dtor_expr;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Select) {
            DAST._IExpression _6629___mcc_h122 = _source220.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6630___mcc_h123 = _source220.dtor_field;
            bool _6631___mcc_h124 = _source220.dtor_isConstant;
            bool _6632___mcc_h125 = _source220.dtor_onDatatype;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_SelectFn) {
            DAST._IExpression _6633___mcc_h130 = _source220.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6634___mcc_h131 = _source220.dtor_field;
            bool _6635___mcc_h132 = _source220.dtor_onDatatype;
            bool _6636___mcc_h133 = _source220.dtor_isStatic;
            BigInteger _6637___mcc_h134 = _source220.dtor_arity;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Index) {
            DAST._IExpression _6638___mcc_h140 = _source220.dtor_expr;
            DAST._ICollKind _6639___mcc_h141 = _source220.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _6640___mcc_h142 = _source220.dtor_indices;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_IndexRange) {
            DAST._IExpression _6641___mcc_h146 = _source220.dtor_expr;
            bool _6642___mcc_h147 = _source220.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _6643___mcc_h148 = _source220.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _6644___mcc_h149 = _source220.dtor_high;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_TupleSelect) {
            DAST._IExpression _6645___mcc_h154 = _source220.dtor_expr;
            BigInteger _6646___mcc_h155 = _source220.dtor_index;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Call) {
            DAST._IExpression _6647___mcc_h158 = _source220.dtor_on;
            DAST._ICallName _6648___mcc_h159 = _source220.dtor_callName;
            Dafny.ISequence<DAST._IType> _6649___mcc_h160 = _source220.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6650___mcc_h161 = _source220.dtor_args;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _6651___mcc_h166 = _source220.dtor_params;
            DAST._IType _6652___mcc_h167 = _source220.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _6653___mcc_h168 = _source220.dtor_body;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6654___mcc_h172 = _source220.dtor_values;
            DAST._IType _6655___mcc_h173 = _source220.dtor_retType;
            DAST._IExpression _6656___mcc_h174 = _source220.dtor_expr;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _6657___mcc_h178 = _source220.dtor_name;
            DAST._IType _6658___mcc_h179 = _source220.dtor_typ;
            DAST._IExpression _6659___mcc_h180 = _source220.dtor_value;
            DAST._IExpression _6660___mcc_h181 = _source220.dtor_iifeBody;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_Apply) {
            DAST._IExpression _6661___mcc_h186 = _source220.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _6662___mcc_h187 = _source220.dtor_args;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_TypeTest) {
            DAST._IExpression _6663___mcc_h190 = _source220.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6664___mcc_h191 = _source220.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _6665___mcc_h192 = _source220.dtor_variant;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_InitializationValue) {
            DAST._IType _6666___mcc_h196 = _source220.dtor_typ;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_BoolBoundedPool) {
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_SetBoundedPool) {
            DAST._IExpression _6667___mcc_h198 = _source220.dtor_of;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source220.is_SeqBoundedPool) {
            DAST._IExpression _6668___mcc_h200 = _source220.dtor_of;
            bool _6669___mcc_h201 = _source220.dtor_includeDuplicates;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _6670___mcc_h204 = _source220.dtor_lo;
            DAST._IExpression _6671___mcc_h205 = _source220.dtor_hi;
            {
              _6580_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6580_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _6672_receiver;
          _6672_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source221 = _6562_maybeOutVars;
          if (_source221.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6673___mcc_h208 = _source221.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6674_outVars = _6673___mcc_h208;
            {
              if ((new BigInteger((_6674_outVars).Count)) > (BigInteger.One)) {
                _6672_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _6675_outI;
              _6675_outI = BigInteger.Zero;
              while ((_6675_outI) < (new BigInteger((_6674_outVars).Count))) {
                if ((_6675_outI).Sign == 1) {
                  _6672_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6672_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _6676_outVar;
                _6676_outVar = (_6674_outVars).Select(_6675_outI);
                _6672_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6672_receiver, (_6676_outVar));
                _6675_outI = (_6675_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_6674_outVars).Count)) > (BigInteger.One)) {
                _6672_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6672_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _6677_renderedName;
          _6677_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source222) => {
            if (_source222.is_Name) {
              Dafny.ISequence<Dafny.Rune> _6678___mcc_h209 = _source222.dtor_name;
              Dafny.ISequence<Dafny.Rune> _6679_name = _6678___mcc_h209;
              return DCOMPUTF16.__default.escapeIdent(_6679_name);
            } else if (_source222.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source222.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source222.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_6565_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_6672_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_6672_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _6580_enclosingString), _6677_renderedName), _6567_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _6571_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source218.is_Return) {
        DAST._IExpression _6680___mcc_h22 = _source218.dtor_expr;
        DAST._IExpression _6681_expr = _6680___mcc_h22;
        {
          RAST._IExpr _6682_expr;
          DCOMPUTF16._IOwnership _6683___v60;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6684_recIdents;
          RAST._IExpr _out2695;
          DCOMPUTF16._IOwnership _out2696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2697;
          DCOMPUTF16.COMP.GenExpr(_6681_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2695, out _out2696, out _out2697);
          _6682_expr = _out2695;
          _6683___v60 = _out2696;
          _6684_recIdents = _out2697;
          readIdents = _6684_recIdents;
          if (isLast) {
            generated = _6682_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_6682_expr));
          }
        }
      } else if (_source218.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source218.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6685___mcc_h23 = _source218.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6686_toLabel = _6685___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source223 = _6686_toLabel;
          if (_source223.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6687___mcc_h210 = _source223.dtor_value;
            Dafny.ISequence<Dafny.Rune> _6688_lbl = _6687___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _6688_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source218.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _6689___mcc_h24 = _source218.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6690_body = _6689___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _6691_paramI;
          _6691_paramI = BigInteger.Zero;
          while ((_6691_paramI) < (new BigInteger(((env).dtor_names).Count))) {
            Dafny.ISequence<Dafny.Rune> _6692_param;
            _6692_param = ((env).dtor_names).Select(_6691_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_6692_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_6692_param))))));
            _6691_paramI = (_6691_paramI) + (BigInteger.One);
          }
          RAST._IExpr _6693_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6694_bodyIdents;
          RAST._IExpr _out2698;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2699;
          DCOMPUTF16.COMP.GenStmts(_6690_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), DCOMPUTF16.Environment.Empty(), false, earlyReturn, out _out2698, out _out2699);
          _6693_body = _out2698;
          _6694_bodyIdents = _out2699;
          readIdents = _6694_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _6693_body)));
        }
      } else if (_source218.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source218.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _6695___mcc_h25 = _source218.dtor_Print_a0;
        DAST._IExpression _6696_e = _6695___mcc_h25;
        {
          RAST._IExpr _6697_printedExpr;
          DCOMPUTF16._IOwnership _6698_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6699_recIdents;
          RAST._IExpr _out2700;
          DCOMPUTF16._IOwnership _out2701;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2702;
          DCOMPUTF16.COMP.GenExpr(_6696_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2700, out _out2701, out _out2702);
          _6697_printedExpr = _out2700;
          _6698_recOwnership = _out2701;
          _6699_recIdents = _out2702;
          Dafny.ISequence<Dafny.Rune> _6700_printedExprString;
          _6700_printedExprString = (_6697_printedExpr)._ToString(DCOMPUTF16.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _6700_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _6699_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source224 = range;
      if (_source224.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source224.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source224.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source224.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source224.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source224.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source224.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source224.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source224.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source224.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source224.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMPUTF16._IOwnership ownership, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out2703;
        DCOMPUTF16._IOwnership _out2704;
        DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2703, out _out2704);
        @out = _out2703;
        resultingOwnership = _out2704;
        return ;
      } else if ((object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source225 = e;
      DAST._ILiteral _6701___mcc_h0 = _source225.dtor_Literal_a0;
      DAST._ILiteral _source226 = _6701___mcc_h0;
      if (_source226.is_BoolLiteral) {
        bool _6702___mcc_h1 = _source226.dtor_BoolLiteral_a0;
        if ((_6702___mcc_h1) == (false)) {
          {
            RAST._IExpr _out2705;
            DCOMPUTF16._IOwnership _out2706;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out2705, out _out2706);
            r = _out2705;
            resultingOwnership = _out2706;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out2707;
            DCOMPUTF16._IOwnership _out2708;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out2707, out _out2708);
            r = _out2707;
            resultingOwnership = _out2708;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source226.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _6703___mcc_h2 = _source226.dtor_IntLiteral_a0;
        DAST._IType _6704___mcc_h3 = _source226.dtor_IntLiteral_a1;
        DAST._IType _6705_t = _6704___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _6706_i = _6703___mcc_h2;
        {
          DAST._IType _source227 = _6705_t;
          if (_source227.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6707___mcc_h100 = _source227.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6708___mcc_h101 = _source227.dtor_typeArgs;
            DAST._IResolvedType _6709___mcc_h102 = _source227.dtor_resolved;
            DAST._IType _6710_o = _6705_t;
            {
              RAST._IType _6711_genType;
              RAST._IType _out2709;
              _out2709 = DCOMPUTF16.COMP.GenType(_6710_o, false, false);
              _6711_genType = _out2709;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6711_genType);
            }
          } else if (_source227.is_Nullable) {
            DAST._IType _6712___mcc_h106 = _source227.dtor_Nullable_a0;
            DAST._IType _6713_o = _6705_t;
            {
              RAST._IType _6714_genType;
              RAST._IType _out2710;
              _out2710 = DCOMPUTF16.COMP.GenType(_6713_o, false, false);
              _6714_genType = _out2710;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6714_genType);
            }
          } else if (_source227.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6715___mcc_h108 = _source227.dtor_Tuple_a0;
            DAST._IType _6716_o = _6705_t;
            {
              RAST._IType _6717_genType;
              RAST._IType _out2711;
              _out2711 = DCOMPUTF16.COMP.GenType(_6716_o, false, false);
              _6717_genType = _out2711;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6717_genType);
            }
          } else if (_source227.is_Array) {
            DAST._IType _6718___mcc_h110 = _source227.dtor_element;
            BigInteger _6719___mcc_h111 = _source227.dtor_dims;
            DAST._IType _6720_o = _6705_t;
            {
              RAST._IType _6721_genType;
              RAST._IType _out2712;
              _out2712 = DCOMPUTF16.COMP.GenType(_6720_o, false, false);
              _6721_genType = _out2712;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6721_genType);
            }
          } else if (_source227.is_Seq) {
            DAST._IType _6722___mcc_h114 = _source227.dtor_element;
            DAST._IType _6723_o = _6705_t;
            {
              RAST._IType _6724_genType;
              RAST._IType _out2713;
              _out2713 = DCOMPUTF16.COMP.GenType(_6723_o, false, false);
              _6724_genType = _out2713;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6724_genType);
            }
          } else if (_source227.is_Set) {
            DAST._IType _6725___mcc_h116 = _source227.dtor_element;
            DAST._IType _6726_o = _6705_t;
            {
              RAST._IType _6727_genType;
              RAST._IType _out2714;
              _out2714 = DCOMPUTF16.COMP.GenType(_6726_o, false, false);
              _6727_genType = _out2714;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6727_genType);
            }
          } else if (_source227.is_Multiset) {
            DAST._IType _6728___mcc_h118 = _source227.dtor_element;
            DAST._IType _6729_o = _6705_t;
            {
              RAST._IType _6730_genType;
              RAST._IType _out2715;
              _out2715 = DCOMPUTF16.COMP.GenType(_6729_o, false, false);
              _6730_genType = _out2715;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6730_genType);
            }
          } else if (_source227.is_Map) {
            DAST._IType _6731___mcc_h120 = _source227.dtor_key;
            DAST._IType _6732___mcc_h121 = _source227.dtor_value;
            DAST._IType _6733_o = _6705_t;
            {
              RAST._IType _6734_genType;
              RAST._IType _out2716;
              _out2716 = DCOMPUTF16.COMP.GenType(_6733_o, false, false);
              _6734_genType = _out2716;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6734_genType);
            }
          } else if (_source227.is_SetBuilder) {
            DAST._IType _6735___mcc_h124 = _source227.dtor_element;
            DAST._IType _6736_o = _6705_t;
            {
              RAST._IType _6737_genType;
              RAST._IType _out2717;
              _out2717 = DCOMPUTF16.COMP.GenType(_6736_o, false, false);
              _6737_genType = _out2717;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6737_genType);
            }
          } else if (_source227.is_MapBuilder) {
            DAST._IType _6738___mcc_h126 = _source227.dtor_key;
            DAST._IType _6739___mcc_h127 = _source227.dtor_value;
            DAST._IType _6740_o = _6705_t;
            {
              RAST._IType _6741_genType;
              RAST._IType _out2718;
              _out2718 = DCOMPUTF16.COMP.GenType(_6740_o, false, false);
              _6741_genType = _out2718;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6741_genType);
            }
          } else if (_source227.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6742___mcc_h130 = _source227.dtor_args;
            DAST._IType _6743___mcc_h131 = _source227.dtor_result;
            DAST._IType _6744_o = _6705_t;
            {
              RAST._IType _6745_genType;
              RAST._IType _out2719;
              _out2719 = DCOMPUTF16.COMP.GenType(_6744_o, false, false);
              _6745_genType = _out2719;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6745_genType);
            }
          } else if (_source227.is_Primitive) {
            DAST._IPrimitive _6746___mcc_h134 = _source227.dtor_Primitive_a0;
            DAST._IPrimitive _source228 = _6746___mcc_h134;
            if (_source228.is_Int) {
              {
                if ((new BigInteger((_6706_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_6706_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_6706_i, true));
                }
              }
            } else if (_source228.is_Real) {
              DAST._IType _6747_o = _6705_t;
              {
                RAST._IType _6748_genType;
                RAST._IType _out2720;
                _out2720 = DCOMPUTF16.COMP.GenType(_6747_o, false, false);
                _6748_genType = _out2720;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6748_genType);
              }
            } else if (_source228.is_String) {
              DAST._IType _6749_o = _6705_t;
              {
                RAST._IType _6750_genType;
                RAST._IType _out2721;
                _out2721 = DCOMPUTF16.COMP.GenType(_6749_o, false, false);
                _6750_genType = _out2721;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6750_genType);
              }
            } else if (_source228.is_Bool) {
              DAST._IType _6751_o = _6705_t;
              {
                RAST._IType _6752_genType;
                RAST._IType _out2722;
                _out2722 = DCOMPUTF16.COMP.GenType(_6751_o, false, false);
                _6752_genType = _out2722;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6752_genType);
              }
            } else {
              DAST._IType _6753_o = _6705_t;
              {
                RAST._IType _6754_genType;
                RAST._IType _out2723;
                _out2723 = DCOMPUTF16.COMP.GenType(_6753_o, false, false);
                _6754_genType = _out2723;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6754_genType);
              }
            }
          } else if (_source227.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6755___mcc_h136 = _source227.dtor_Passthrough_a0;
            DAST._IType _6756_o = _6705_t;
            {
              RAST._IType _6757_genType;
              RAST._IType _out2724;
              _out2724 = DCOMPUTF16.COMP.GenType(_6756_o, false, false);
              _6757_genType = _out2724;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6757_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6758___mcc_h138 = _source227.dtor_TypeArg_a0;
            DAST._IType _6759_o = _6705_t;
            {
              RAST._IType _6760_genType;
              RAST._IType _out2725;
              _out2725 = DCOMPUTF16.COMP.GenType(_6759_o, false, false);
              _6760_genType = _out2725;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6706_i), _6760_genType);
            }
          }
          RAST._IExpr _out2726;
          DCOMPUTF16._IOwnership _out2727;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2726, out _out2727);
          r = _out2726;
          resultingOwnership = _out2727;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source226.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _6761___mcc_h4 = _source226.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _6762___mcc_h5 = _source226.dtor_DecLiteral_a1;
        DAST._IType _6763___mcc_h6 = _source226.dtor_DecLiteral_a2;
        DAST._IType _6764_t = _6763___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _6765_d = _6762___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _6766_n = _6761___mcc_h4;
        {
          DAST._IType _source229 = _6764_t;
          if (_source229.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6767___mcc_h140 = _source229.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6768___mcc_h141 = _source229.dtor_typeArgs;
            DAST._IResolvedType _6769___mcc_h142 = _source229.dtor_resolved;
            DAST._IType _6770_o = _6764_t;
            {
              RAST._IType _6771_genType;
              RAST._IType _out2728;
              _out2728 = DCOMPUTF16.COMP.GenType(_6770_o, false, false);
              _6771_genType = _out2728;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6771_genType);
            }
          } else if (_source229.is_Nullable) {
            DAST._IType _6772___mcc_h146 = _source229.dtor_Nullable_a0;
            DAST._IType _6773_o = _6764_t;
            {
              RAST._IType _6774_genType;
              RAST._IType _out2729;
              _out2729 = DCOMPUTF16.COMP.GenType(_6773_o, false, false);
              _6774_genType = _out2729;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6774_genType);
            }
          } else if (_source229.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6775___mcc_h148 = _source229.dtor_Tuple_a0;
            DAST._IType _6776_o = _6764_t;
            {
              RAST._IType _6777_genType;
              RAST._IType _out2730;
              _out2730 = DCOMPUTF16.COMP.GenType(_6776_o, false, false);
              _6777_genType = _out2730;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6777_genType);
            }
          } else if (_source229.is_Array) {
            DAST._IType _6778___mcc_h150 = _source229.dtor_element;
            BigInteger _6779___mcc_h151 = _source229.dtor_dims;
            DAST._IType _6780_o = _6764_t;
            {
              RAST._IType _6781_genType;
              RAST._IType _out2731;
              _out2731 = DCOMPUTF16.COMP.GenType(_6780_o, false, false);
              _6781_genType = _out2731;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6781_genType);
            }
          } else if (_source229.is_Seq) {
            DAST._IType _6782___mcc_h154 = _source229.dtor_element;
            DAST._IType _6783_o = _6764_t;
            {
              RAST._IType _6784_genType;
              RAST._IType _out2732;
              _out2732 = DCOMPUTF16.COMP.GenType(_6783_o, false, false);
              _6784_genType = _out2732;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6784_genType);
            }
          } else if (_source229.is_Set) {
            DAST._IType _6785___mcc_h156 = _source229.dtor_element;
            DAST._IType _6786_o = _6764_t;
            {
              RAST._IType _6787_genType;
              RAST._IType _out2733;
              _out2733 = DCOMPUTF16.COMP.GenType(_6786_o, false, false);
              _6787_genType = _out2733;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6787_genType);
            }
          } else if (_source229.is_Multiset) {
            DAST._IType _6788___mcc_h158 = _source229.dtor_element;
            DAST._IType _6789_o = _6764_t;
            {
              RAST._IType _6790_genType;
              RAST._IType _out2734;
              _out2734 = DCOMPUTF16.COMP.GenType(_6789_o, false, false);
              _6790_genType = _out2734;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6790_genType);
            }
          } else if (_source229.is_Map) {
            DAST._IType _6791___mcc_h160 = _source229.dtor_key;
            DAST._IType _6792___mcc_h161 = _source229.dtor_value;
            DAST._IType _6793_o = _6764_t;
            {
              RAST._IType _6794_genType;
              RAST._IType _out2735;
              _out2735 = DCOMPUTF16.COMP.GenType(_6793_o, false, false);
              _6794_genType = _out2735;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6794_genType);
            }
          } else if (_source229.is_SetBuilder) {
            DAST._IType _6795___mcc_h164 = _source229.dtor_element;
            DAST._IType _6796_o = _6764_t;
            {
              RAST._IType _6797_genType;
              RAST._IType _out2736;
              _out2736 = DCOMPUTF16.COMP.GenType(_6796_o, false, false);
              _6797_genType = _out2736;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6797_genType);
            }
          } else if (_source229.is_MapBuilder) {
            DAST._IType _6798___mcc_h166 = _source229.dtor_key;
            DAST._IType _6799___mcc_h167 = _source229.dtor_value;
            DAST._IType _6800_o = _6764_t;
            {
              RAST._IType _6801_genType;
              RAST._IType _out2737;
              _out2737 = DCOMPUTF16.COMP.GenType(_6800_o, false, false);
              _6801_genType = _out2737;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6801_genType);
            }
          } else if (_source229.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6802___mcc_h170 = _source229.dtor_args;
            DAST._IType _6803___mcc_h171 = _source229.dtor_result;
            DAST._IType _6804_o = _6764_t;
            {
              RAST._IType _6805_genType;
              RAST._IType _out2738;
              _out2738 = DCOMPUTF16.COMP.GenType(_6804_o, false, false);
              _6805_genType = _out2738;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6805_genType);
            }
          } else if (_source229.is_Primitive) {
            DAST._IPrimitive _6806___mcc_h174 = _source229.dtor_Primitive_a0;
            DAST._IPrimitive _source230 = _6806___mcc_h174;
            if (_source230.is_Int) {
              DAST._IType _6807_o = _6764_t;
              {
                RAST._IType _6808_genType;
                RAST._IType _out2739;
                _out2739 = DCOMPUTF16.COMP.GenType(_6807_o, false, false);
                _6808_genType = _out2739;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6808_genType);
              }
            } else if (_source230.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source230.is_String) {
              DAST._IType _6809_o = _6764_t;
              {
                RAST._IType _6810_genType;
                RAST._IType _out2740;
                _out2740 = DCOMPUTF16.COMP.GenType(_6809_o, false, false);
                _6810_genType = _out2740;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6810_genType);
              }
            } else if (_source230.is_Bool) {
              DAST._IType _6811_o = _6764_t;
              {
                RAST._IType _6812_genType;
                RAST._IType _out2741;
                _out2741 = DCOMPUTF16.COMP.GenType(_6811_o, false, false);
                _6812_genType = _out2741;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6812_genType);
              }
            } else {
              DAST._IType _6813_o = _6764_t;
              {
                RAST._IType _6814_genType;
                RAST._IType _out2742;
                _out2742 = DCOMPUTF16.COMP.GenType(_6813_o, false, false);
                _6814_genType = _out2742;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6814_genType);
              }
            }
          } else if (_source229.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6815___mcc_h176 = _source229.dtor_Passthrough_a0;
            DAST._IType _6816_o = _6764_t;
            {
              RAST._IType _6817_genType;
              RAST._IType _out2743;
              _out2743 = DCOMPUTF16.COMP.GenType(_6816_o, false, false);
              _6817_genType = _out2743;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6817_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6818___mcc_h178 = _source229.dtor_TypeArg_a0;
            DAST._IType _6819_o = _6764_t;
            {
              RAST._IType _6820_genType;
              RAST._IType _out2744;
              _out2744 = DCOMPUTF16.COMP.GenType(_6819_o, false, false);
              _6820_genType = _out2744;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6766_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6765_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6820_genType);
            }
          }
          RAST._IExpr _out2745;
          DCOMPUTF16._IOwnership _out2746;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2745, out _out2746);
          r = _out2745;
          resultingOwnership = _out2746;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source226.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _6821___mcc_h7 = _source226.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _6822_l = _6821___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_6822_l, false));
          RAST._IExpr _out2747;
          DCOMPUTF16._IOwnership _out2748;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2747, out _out2748);
          r = _out2747;
          resultingOwnership = _out2748;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source226.is_CharLiteral) {
        Dafny.Rune _6823___mcc_h8 = _source226.dtor_CharLiteral_a0;
        Dafny.Rune _6824_c = _6823___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_6824_c).Value)));
          if (!(DCOMPUTF16.__default.UnicodeChars)) {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u16"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          } else {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u32"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          r = ((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out2749;
          DCOMPUTF16._IOwnership _out2750;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2749, out _out2750);
          r = _out2749;
          resultingOwnership = _out2750;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _6825___mcc_h9 = _source226.dtor_Null_a0;
        DAST._IType _6826_tpe = _6825___mcc_h9;
        {
          RAST._IType _6827_tpeGen;
          RAST._IType _out2751;
          _out2751 = DCOMPUTF16.COMP.GenType(_6826_tpe, false, false);
          _6827_tpeGen = _out2751;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _6827_tpeGen);
          RAST._IExpr _out2752;
          DCOMPUTF16._IOwnership _out2753;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2752, out _out2753);
          r = _out2752;
          resultingOwnership = _out2753;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs53 = e;
      DAST._IBinOp _6828_op = _let_tmp_rhs53.dtor_op;
      DAST._IExpression _6829_lExpr = _let_tmp_rhs53.dtor_left;
      DAST._IExpression _6830_rExpr = _let_tmp_rhs53.dtor_right;
      DAST.Format._IBinOpFormat _6831_format = _let_tmp_rhs53.dtor_format2;
      bool _6832_becomesLeftCallsRight;
      _6832_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source231) => {
        if (_source231.is_Eq) {
          bool _6833___mcc_h0 = _source231.dtor_referential;
          bool _6834___mcc_h1 = _source231.dtor_nullable;
          return false;
        } else if (_source231.is_Div) {
          return false;
        } else if (_source231.is_EuclidianDiv) {
          return false;
        } else if (_source231.is_Mod) {
          return false;
        } else if (_source231.is_EuclidianMod) {
          return false;
        } else if (_source231.is_Lt) {
          return false;
        } else if (_source231.is_LtChar) {
          return false;
        } else if (_source231.is_Plus) {
          return false;
        } else if (_source231.is_Minus) {
          return false;
        } else if (_source231.is_Times) {
          return false;
        } else if (_source231.is_BitwiseAnd) {
          return false;
        } else if (_source231.is_BitwiseOr) {
          return false;
        } else if (_source231.is_BitwiseXor) {
          return false;
        } else if (_source231.is_BitwiseShiftRight) {
          return false;
        } else if (_source231.is_BitwiseShiftLeft) {
          return false;
        } else if (_source231.is_And) {
          return false;
        } else if (_source231.is_Or) {
          return false;
        } else if (_source231.is_In) {
          return false;
        } else if (_source231.is_SeqProperPrefix) {
          return false;
        } else if (_source231.is_SeqPrefix) {
          return false;
        } else if (_source231.is_SetMerge) {
          return true;
        } else if (_source231.is_SetSubtraction) {
          return true;
        } else if (_source231.is_SetIntersection) {
          return true;
        } else if (_source231.is_Subset) {
          return false;
        } else if (_source231.is_ProperSubset) {
          return false;
        } else if (_source231.is_SetDisjoint) {
          return true;
        } else if (_source231.is_MapMerge) {
          return true;
        } else if (_source231.is_MapSubtraction) {
          return true;
        } else if (_source231.is_MultisetMerge) {
          return true;
        } else if (_source231.is_MultisetSubtraction) {
          return true;
        } else if (_source231.is_MultisetIntersection) {
          return true;
        } else if (_source231.is_Submultiset) {
          return false;
        } else if (_source231.is_ProperSubmultiset) {
          return false;
        } else if (_source231.is_MultisetDisjoint) {
          return true;
        } else if (_source231.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _6835___mcc_h4 = _source231.dtor_Passthrough_a0;
          return false;
        }
      }))(_6828_op);
      bool _6836_becomesRightCallsLeft;
      _6836_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source232) => {
        if (_source232.is_Eq) {
          bool _6837___mcc_h6 = _source232.dtor_referential;
          bool _6838___mcc_h7 = _source232.dtor_nullable;
          return false;
        } else if (_source232.is_Div) {
          return false;
        } else if (_source232.is_EuclidianDiv) {
          return false;
        } else if (_source232.is_Mod) {
          return false;
        } else if (_source232.is_EuclidianMod) {
          return false;
        } else if (_source232.is_Lt) {
          return false;
        } else if (_source232.is_LtChar) {
          return false;
        } else if (_source232.is_Plus) {
          return false;
        } else if (_source232.is_Minus) {
          return false;
        } else if (_source232.is_Times) {
          return false;
        } else if (_source232.is_BitwiseAnd) {
          return false;
        } else if (_source232.is_BitwiseOr) {
          return false;
        } else if (_source232.is_BitwiseXor) {
          return false;
        } else if (_source232.is_BitwiseShiftRight) {
          return false;
        } else if (_source232.is_BitwiseShiftLeft) {
          return false;
        } else if (_source232.is_And) {
          return false;
        } else if (_source232.is_Or) {
          return false;
        } else if (_source232.is_In) {
          return true;
        } else if (_source232.is_SeqProperPrefix) {
          return false;
        } else if (_source232.is_SeqPrefix) {
          return false;
        } else if (_source232.is_SetMerge) {
          return false;
        } else if (_source232.is_SetSubtraction) {
          return false;
        } else if (_source232.is_SetIntersection) {
          return false;
        } else if (_source232.is_Subset) {
          return false;
        } else if (_source232.is_ProperSubset) {
          return false;
        } else if (_source232.is_SetDisjoint) {
          return false;
        } else if (_source232.is_MapMerge) {
          return false;
        } else if (_source232.is_MapSubtraction) {
          return false;
        } else if (_source232.is_MultisetMerge) {
          return false;
        } else if (_source232.is_MultisetSubtraction) {
          return false;
        } else if (_source232.is_MultisetIntersection) {
          return false;
        } else if (_source232.is_Submultiset) {
          return false;
        } else if (_source232.is_ProperSubmultiset) {
          return false;
        } else if (_source232.is_MultisetDisjoint) {
          return false;
        } else if (_source232.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _6839___mcc_h10 = _source232.dtor_Passthrough_a0;
          return false;
        }
      }))(_6828_op);
      bool _6840_becomesCallLeftRight;
      _6840_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source233) => {
        if (_source233.is_Eq) {
          bool _6841___mcc_h12 = _source233.dtor_referential;
          bool _6842___mcc_h13 = _source233.dtor_nullable;
          if ((_6841___mcc_h12) == (true)) {
            if ((_6842___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source233.is_Div) {
          return false;
        } else if (_source233.is_EuclidianDiv) {
          return false;
        } else if (_source233.is_Mod) {
          return false;
        } else if (_source233.is_EuclidianMod) {
          return false;
        } else if (_source233.is_Lt) {
          return false;
        } else if (_source233.is_LtChar) {
          return false;
        } else if (_source233.is_Plus) {
          return false;
        } else if (_source233.is_Minus) {
          return false;
        } else if (_source233.is_Times) {
          return false;
        } else if (_source233.is_BitwiseAnd) {
          return false;
        } else if (_source233.is_BitwiseOr) {
          return false;
        } else if (_source233.is_BitwiseXor) {
          return false;
        } else if (_source233.is_BitwiseShiftRight) {
          return false;
        } else if (_source233.is_BitwiseShiftLeft) {
          return false;
        } else if (_source233.is_And) {
          return false;
        } else if (_source233.is_Or) {
          return false;
        } else if (_source233.is_In) {
          return false;
        } else if (_source233.is_SeqProperPrefix) {
          return false;
        } else if (_source233.is_SeqPrefix) {
          return false;
        } else if (_source233.is_SetMerge) {
          return false;
        } else if (_source233.is_SetSubtraction) {
          return false;
        } else if (_source233.is_SetIntersection) {
          return false;
        } else if (_source233.is_Subset) {
          return false;
        } else if (_source233.is_ProperSubset) {
          return false;
        } else if (_source233.is_SetDisjoint) {
          return false;
        } else if (_source233.is_MapMerge) {
          return false;
        } else if (_source233.is_MapSubtraction) {
          return false;
        } else if (_source233.is_MultisetMerge) {
          return false;
        } else if (_source233.is_MultisetSubtraction) {
          return false;
        } else if (_source233.is_MultisetIntersection) {
          return false;
        } else if (_source233.is_Submultiset) {
          return false;
        } else if (_source233.is_ProperSubmultiset) {
          return false;
        } else if (_source233.is_MultisetDisjoint) {
          return false;
        } else if (_source233.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _6843___mcc_h16 = _source233.dtor_Passthrough_a0;
          return false;
        }
      }))(_6828_op);
      DCOMPUTF16._IOwnership _6844_expectedLeftOwnership;
      _6844_expectedLeftOwnership = ((_6832_becomesLeftCallsRight) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : ((((_6836_becomesRightCallsLeft) || (_6840_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      DCOMPUTF16._IOwnership _6845_expectedRightOwnership;
      _6845_expectedRightOwnership = (((_6832_becomesLeftCallsRight) || (_6840_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (((_6836_becomesRightCallsLeft) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _6846_left;
      DCOMPUTF16._IOwnership _6847___v65;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6848_recIdentsL;
      RAST._IExpr _out2754;
      DCOMPUTF16._IOwnership _out2755;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2756;
      DCOMPUTF16.COMP.GenExpr(_6829_lExpr, selfIdent, env, _6844_expectedLeftOwnership, out _out2754, out _out2755, out _out2756);
      _6846_left = _out2754;
      _6847___v65 = _out2755;
      _6848_recIdentsL = _out2756;
      RAST._IExpr _6849_right;
      DCOMPUTF16._IOwnership _6850___v66;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6851_recIdentsR;
      RAST._IExpr _out2757;
      DCOMPUTF16._IOwnership _out2758;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2759;
      DCOMPUTF16.COMP.GenExpr(_6830_rExpr, selfIdent, env, _6845_expectedRightOwnership, out _out2757, out _out2758, out _out2759);
      _6849_right = _out2757;
      _6850___v66 = _out2758;
      _6851_recIdentsR = _out2759;
      DAST._IBinOp _source234 = _6828_op;
      if (_source234.is_Eq) {
        bool _6852___mcc_h18 = _source234.dtor_referential;
        bool _6853___mcc_h19 = _source234.dtor_nullable;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source235 = _6828_op;
            if (_source235.is_Eq) {
              bool _6854___mcc_h24 = _source235.dtor_referential;
              bool _6855___mcc_h25 = _source235.dtor_nullable;
              bool _6856_nullable = _6855___mcc_h25;
              bool _6857_referential = _6854___mcc_h24;
              {
                if (_6857_referential) {
                  if (_6856_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source235.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source235.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6858___mcc_h26 = _source235.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6859_op = _6858___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_6859_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_Div) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source236 = _6828_op;
            if (_source236.is_Eq) {
              bool _6860___mcc_h27 = _source236.dtor_referential;
              bool _6861___mcc_h28 = _source236.dtor_nullable;
              bool _6862_nullable = _6861___mcc_h28;
              bool _6863_referential = _6860___mcc_h27;
              {
                if (_6863_referential) {
                  if (_6862_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source236.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source236.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6864___mcc_h29 = _source236.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6865_op = _6864___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_6865_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_EuclidianDiv) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source237 = _6828_op;
            if (_source237.is_Eq) {
              bool _6866___mcc_h30 = _source237.dtor_referential;
              bool _6867___mcc_h31 = _source237.dtor_nullable;
              bool _6868_nullable = _6867___mcc_h31;
              bool _6869_referential = _6866___mcc_h30;
              {
                if (_6869_referential) {
                  if (_6868_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source237.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source237.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6870___mcc_h32 = _source237.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6871_op = _6870___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_6871_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_Mod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source238 = _6828_op;
            if (_source238.is_Eq) {
              bool _6872___mcc_h33 = _source238.dtor_referential;
              bool _6873___mcc_h34 = _source238.dtor_nullable;
              bool _6874_nullable = _6873___mcc_h34;
              bool _6875_referential = _6872___mcc_h33;
              {
                if (_6875_referential) {
                  if (_6874_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source238.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source238.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6876___mcc_h35 = _source238.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6877_op = _6876___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_6877_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_EuclidianMod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source239 = _6828_op;
            if (_source239.is_Eq) {
              bool _6878___mcc_h36 = _source239.dtor_referential;
              bool _6879___mcc_h37 = _source239.dtor_nullable;
              bool _6880_nullable = _6879___mcc_h37;
              bool _6881_referential = _6878___mcc_h36;
              {
                if (_6881_referential) {
                  if (_6880_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source239.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source239.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6882___mcc_h38 = _source239.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6883_op = _6882___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_6883_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_Lt) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source240 = _6828_op;
            if (_source240.is_Eq) {
              bool _6884___mcc_h39 = _source240.dtor_referential;
              bool _6885___mcc_h40 = _source240.dtor_nullable;
              bool _6886_nullable = _6885___mcc_h40;
              bool _6887_referential = _6884___mcc_h39;
              {
                if (_6887_referential) {
                  if (_6886_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source240.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source240.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6888___mcc_h41 = _source240.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6889_op = _6888___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_6889_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_LtChar) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source241 = _6828_op;
            if (_source241.is_Eq) {
              bool _6890___mcc_h42 = _source241.dtor_referential;
              bool _6891___mcc_h43 = _source241.dtor_nullable;
              bool _6892_nullable = _6891___mcc_h43;
              bool _6893_referential = _6890___mcc_h42;
              {
                if (_6893_referential) {
                  if (_6892_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source241.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source241.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6894___mcc_h44 = _source241.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6895_op = _6894___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_6895_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_Plus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source242 = _6828_op;
            if (_source242.is_Eq) {
              bool _6896___mcc_h45 = _source242.dtor_referential;
              bool _6897___mcc_h46 = _source242.dtor_nullable;
              bool _6898_nullable = _6897___mcc_h46;
              bool _6899_referential = _6896___mcc_h45;
              {
                if (_6899_referential) {
                  if (_6898_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source242.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source242.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6900___mcc_h47 = _source242.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6901_op = _6900___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_6901_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_Minus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source243 = _6828_op;
            if (_source243.is_Eq) {
              bool _6902___mcc_h48 = _source243.dtor_referential;
              bool _6903___mcc_h49 = _source243.dtor_nullable;
              bool _6904_nullable = _6903___mcc_h49;
              bool _6905_referential = _6902___mcc_h48;
              {
                if (_6905_referential) {
                  if (_6904_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source243.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source243.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6906___mcc_h50 = _source243.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6907_op = _6906___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_6907_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_Times) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source244 = _6828_op;
            if (_source244.is_Eq) {
              bool _6908___mcc_h51 = _source244.dtor_referential;
              bool _6909___mcc_h52 = _source244.dtor_nullable;
              bool _6910_nullable = _6909___mcc_h52;
              bool _6911_referential = _6908___mcc_h51;
              {
                if (_6911_referential) {
                  if (_6910_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source244.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source244.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6912___mcc_h53 = _source244.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6913_op = _6912___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_6913_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_BitwiseAnd) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source245 = _6828_op;
            if (_source245.is_Eq) {
              bool _6914___mcc_h54 = _source245.dtor_referential;
              bool _6915___mcc_h55 = _source245.dtor_nullable;
              bool _6916_nullable = _6915___mcc_h55;
              bool _6917_referential = _6914___mcc_h54;
              {
                if (_6917_referential) {
                  if (_6916_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source245.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source245.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6918___mcc_h56 = _source245.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6919_op = _6918___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_6919_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_BitwiseOr) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source246 = _6828_op;
            if (_source246.is_Eq) {
              bool _6920___mcc_h57 = _source246.dtor_referential;
              bool _6921___mcc_h58 = _source246.dtor_nullable;
              bool _6922_nullable = _6921___mcc_h58;
              bool _6923_referential = _6920___mcc_h57;
              {
                if (_6923_referential) {
                  if (_6922_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source246.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source246.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6924___mcc_h59 = _source246.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6925_op = _6924___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_6925_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_BitwiseXor) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source247 = _6828_op;
            if (_source247.is_Eq) {
              bool _6926___mcc_h60 = _source247.dtor_referential;
              bool _6927___mcc_h61 = _source247.dtor_nullable;
              bool _6928_nullable = _6927___mcc_h61;
              bool _6929_referential = _6926___mcc_h60;
              {
                if (_6929_referential) {
                  if (_6928_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source247.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source247.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6930___mcc_h62 = _source247.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6931_op = _6930___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_6931_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_BitwiseShiftRight) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source248 = _6828_op;
            if (_source248.is_Eq) {
              bool _6932___mcc_h63 = _source248.dtor_referential;
              bool _6933___mcc_h64 = _source248.dtor_nullable;
              bool _6934_nullable = _6933___mcc_h64;
              bool _6935_referential = _6932___mcc_h63;
              {
                if (_6935_referential) {
                  if (_6934_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source248.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source248.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6936___mcc_h65 = _source248.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6937_op = _6936___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_6937_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_BitwiseShiftLeft) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source249 = _6828_op;
            if (_source249.is_Eq) {
              bool _6938___mcc_h66 = _source249.dtor_referential;
              bool _6939___mcc_h67 = _source249.dtor_nullable;
              bool _6940_nullable = _6939___mcc_h67;
              bool _6941_referential = _6938___mcc_h66;
              {
                if (_6941_referential) {
                  if (_6940_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source249.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source249.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6942___mcc_h68 = _source249.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6943_op = _6942___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_6943_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_And) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source250 = _6828_op;
            if (_source250.is_Eq) {
              bool _6944___mcc_h69 = _source250.dtor_referential;
              bool _6945___mcc_h70 = _source250.dtor_nullable;
              bool _6946_nullable = _6945___mcc_h70;
              bool _6947_referential = _6944___mcc_h69;
              {
                if (_6947_referential) {
                  if (_6946_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source250.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source250.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6948___mcc_h71 = _source250.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6949_op = _6948___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_6949_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_Or) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source251 = _6828_op;
            if (_source251.is_Eq) {
              bool _6950___mcc_h72 = _source251.dtor_referential;
              bool _6951___mcc_h73 = _source251.dtor_nullable;
              bool _6952_nullable = _6951___mcc_h73;
              bool _6953_referential = _6950___mcc_h72;
              {
                if (_6953_referential) {
                  if (_6952_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source251.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source251.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6954___mcc_h74 = _source251.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6955_op = _6954___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_6955_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      } else if (_source234.is_In) {
        {
          r = ((_6849_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_6846_left);
        }
      } else if (_source234.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6846_left, _6849_right, _6831_format);
      } else if (_source234.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6846_left, _6849_right, _6831_format);
      } else if (_source234.is_SetMerge) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6849_right);
        }
      } else if (_source234.is_SetSubtraction) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6849_right);
        }
      } else if (_source234.is_SetIntersection) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_6849_right);
        }
      } else if (_source234.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6846_left, _6849_right, _6831_format);
        }
      } else if (_source234.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6846_left, _6849_right, _6831_format);
        }
      } else if (_source234.is_SetDisjoint) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_6849_right);
        }
      } else if (_source234.is_MapMerge) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6849_right);
        }
      } else if (_source234.is_MapSubtraction) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6849_right);
        }
      } else if (_source234.is_MultisetMerge) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6849_right);
        }
      } else if (_source234.is_MultisetSubtraction) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6849_right);
        }
      } else if (_source234.is_MultisetIntersection) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_6849_right);
        }
      } else if (_source234.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6846_left, _6849_right, _6831_format);
        }
      } else if (_source234.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6846_left, _6849_right, _6831_format);
        }
      } else if (_source234.is_MultisetDisjoint) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_6849_right);
        }
      } else if (_source234.is_Concat) {
        {
          r = ((_6846_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_6849_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _6956___mcc_h22 = _source234.dtor_Passthrough_a0;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6828_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6828_op), _6846_left, _6849_right, _6831_format);
          } else {
            DAST._IBinOp _source252 = _6828_op;
            if (_source252.is_Eq) {
              bool _6957___mcc_h75 = _source252.dtor_referential;
              bool _6958___mcc_h76 = _source252.dtor_nullable;
              bool _6959_nullable = _6958___mcc_h76;
              bool _6960_referential = _6957___mcc_h75;
              {
                if (_6960_referential) {
                  if (_6959_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6846_left, _6849_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source252.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else if (_source252.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6846_left, _6849_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6961___mcc_h77 = _source252.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6962_op = _6961___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_6962_op, _6846_left, _6849_right, _6831_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out2760;
      DCOMPUTF16._IOwnership _out2761;
      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2760, out _out2761);
      r = _out2760;
      resultingOwnership = _out2761;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6848_recIdentsL, _6851_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs54 = e;
      DAST._IExpression _6963_expr = _let_tmp_rhs54.dtor_value;
      DAST._IType _6964_fromTpe = _let_tmp_rhs54.dtor_from;
      DAST._IType _6965_toTpe = _let_tmp_rhs54.dtor_typ;
      if (object.Equals(_6964_fromTpe, _6965_toTpe)) {
        RAST._IExpr _6966_recursiveGen;
        DCOMPUTF16._IOwnership _6967_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6968_recIdents;
        RAST._IExpr _out2762;
        DCOMPUTF16._IOwnership _out2763;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2764;
        DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2762, out _out2763, out _out2764);
        _6966_recursiveGen = _out2762;
        _6967_recOwned = _out2763;
        _6968_recIdents = _out2764;
        r = _6966_recursiveGen;
        RAST._IExpr _out2765;
        DCOMPUTF16._IOwnership _out2766;
        DCOMPUTF16.COMP.FromOwnership(r, _6967_recOwned, expectedOwnership, out _out2765, out _out2766);
        r = _out2765;
        resultingOwnership = _out2766;
        readIdents = _6968_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source253 = _System.Tuple2<DAST._IType, DAST._IType>.create(_6964_fromTpe, _6965_toTpe);
        DAST._IType _6969___mcc_h0 = _source253.dtor__0;
        DAST._IType _6970___mcc_h1 = _source253.dtor__1;
        DAST._IType _source254 = _6969___mcc_h0;
        if (_source254.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6971___mcc_h4 = _source254.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _6972___mcc_h5 = _source254.dtor_typeArgs;
          DAST._IResolvedType _6973___mcc_h6 = _source254.dtor_resolved;
          DAST._IResolvedType _source255 = _6973___mcc_h6;
          if (_source255.is_Datatype) {
            DAST._IDatatypeType _6974___mcc_h16 = _source255.dtor_datatypeType;
            DAST._IType _source256 = _6970___mcc_h1;
            if (_source256.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6975___mcc_h20 = _source256.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _6976___mcc_h21 = _source256.dtor_typeArgs;
              DAST._IResolvedType _6977___mcc_h22 = _source256.dtor_resolved;
              DAST._IResolvedType _source257 = _6977___mcc_h22;
              if (_source257.is_Datatype) {
                DAST._IDatatypeType _6978___mcc_h26 = _source257.dtor_datatypeType;
                {
                  RAST._IExpr _6979_recursiveGen;
                  DCOMPUTF16._IOwnership _6980_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6981_recIdents;
                  RAST._IExpr _out2767;
                  DCOMPUTF16._IOwnership _out2768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2769;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2767, out _out2768, out _out2769);
                  _6979_recursiveGen = _out2767;
                  _6980_recOwned = _out2768;
                  _6981_recIdents = _out2769;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6979_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2770;
                  DCOMPUTF16._IOwnership _out2771;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2770, out _out2771);
                  r = _out2770;
                  resultingOwnership = _out2771;
                  readIdents = _6981_recIdents;
                }
              } else if (_source257.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6982___mcc_h28 = _source257.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _6983___mcc_h29 = _source257.dtor_attributes;
                {
                  RAST._IExpr _6984_recursiveGen;
                  DCOMPUTF16._IOwnership _6985_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6986_recIdents;
                  RAST._IExpr _out2772;
                  DCOMPUTF16._IOwnership _out2773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2774;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2772, out _out2773, out _out2774);
                  _6984_recursiveGen = _out2772;
                  _6985_recOwned = _out2773;
                  _6986_recIdents = _out2774;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6984_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2775;
                  DCOMPUTF16._IOwnership _out2776;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2775, out _out2776);
                  r = _out2775;
                  resultingOwnership = _out2776;
                  readIdents = _6986_recIdents;
                }
              } else {
                DAST._IType _6987___mcc_h32 = _source257.dtor_baseType;
                DAST._INewtypeRange _6988___mcc_h33 = _source257.dtor_range;
                bool _6989___mcc_h34 = _source257.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _6990___mcc_h35 = _source257.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _6991_attributes = _6990___mcc_h35;
                bool _6992_erase = _6989___mcc_h34;
                DAST._INewtypeRange _6993_range = _6988___mcc_h33;
                DAST._IType _6994_b = _6987___mcc_h32;
                {
                  if (object.Equals(_6964_fromTpe, _6994_b)) {
                    RAST._IExpr _6995_recursiveGen;
                    DCOMPUTF16._IOwnership _6996_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6997_recIdents;
                    RAST._IExpr _out2777;
                    DCOMPUTF16._IOwnership _out2778;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2779;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2777, out _out2778, out _out2779);
                    _6995_recursiveGen = _out2777;
                    _6996_recOwned = _out2778;
                    _6997_recIdents = _out2779;
                    Std.Wrappers._IOption<RAST._IType> _6998_potentialRhsType;
                    _6998_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6994_b, _6993_range);
                    Std.Wrappers._IOption<RAST._IType> _source258 = _6998_potentialRhsType;
                    if (_source258.is_None) {
                      if (_6992_erase) {
                        r = _6995_recursiveGen;
                      } else {
                        RAST._IType _6999_rhsType;
                        RAST._IType _out2780;
                        _out2780 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                        _6999_rhsType = _out2780;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6999_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6995_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2781;
                      DCOMPUTF16._IOwnership _out2782;
                      DCOMPUTF16.COMP.FromOwnership(r, _6996_recOwned, expectedOwnership, out _out2781, out _out2782);
                      r = _out2781;
                      resultingOwnership = _out2782;
                    } else {
                      RAST._IType _7000___mcc_h1246 = _source258.dtor_value;
                      RAST._IType _7001_v = _7000___mcc_h1246;
                      r = RAST.Expr.create_ConversionNum(_7001_v, _6995_recursiveGen);
                      RAST._IExpr _out2783;
                      DCOMPUTF16._IOwnership _out2784;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2783, out _out2784);
                      r = _out2783;
                      resultingOwnership = _out2784;
                    }
                    readIdents = _6997_recIdents;
                  } else {
                    RAST._IExpr _out2785;
                    DCOMPUTF16._IOwnership _out2786;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2787;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _6994_b), _6994_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out2785, out _out2786, out _out2787);
                    r = _out2785;
                    resultingOwnership = _out2786;
                    readIdents = _out2787;
                  }
                }
              }
            } else if (_source256.is_Nullable) {
              DAST._IType _7002___mcc_h40 = _source256.dtor_Nullable_a0;
              {
                RAST._IExpr _7003_recursiveGen;
                DCOMPUTF16._IOwnership _7004_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7005_recIdents;
                RAST._IExpr _out2788;
                DCOMPUTF16._IOwnership _out2789;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2790;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2788, out _out2789, out _out2790);
                _7003_recursiveGen = _out2788;
                _7004_recOwned = _out2789;
                _7005_recIdents = _out2790;
                r = _7003_recursiveGen;
                if (object.Equals(_7004_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out2791;
                DCOMPUTF16._IOwnership _out2792;
                DCOMPUTF16.COMP.FromOwnership(r, _7004_recOwned, expectedOwnership, out _out2791, out _out2792);
                r = _out2791;
                resultingOwnership = _out2792;
                readIdents = _7005_recIdents;
              }
            } else if (_source256.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7006___mcc_h42 = _source256.dtor_Tuple_a0;
              {
                RAST._IExpr _7007_recursiveGen;
                DCOMPUTF16._IOwnership _7008_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7009_recIdents;
                RAST._IExpr _out2793;
                DCOMPUTF16._IOwnership _out2794;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2795;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2793, out _out2794, out _out2795);
                _7007_recursiveGen = _out2793;
                _7008_recOwned = _out2794;
                _7009_recIdents = _out2795;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7007_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2796;
                DCOMPUTF16._IOwnership _out2797;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2796, out _out2797);
                r = _out2796;
                resultingOwnership = _out2797;
                readIdents = _7009_recIdents;
              }
            } else if (_source256.is_Array) {
              DAST._IType _7010___mcc_h44 = _source256.dtor_element;
              BigInteger _7011___mcc_h45 = _source256.dtor_dims;
              {
                RAST._IExpr _7012_recursiveGen;
                DCOMPUTF16._IOwnership _7013_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7014_recIdents;
                RAST._IExpr _out2798;
                DCOMPUTF16._IOwnership _out2799;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2800;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2798, out _out2799, out _out2800);
                _7012_recursiveGen = _out2798;
                _7013_recOwned = _out2799;
                _7014_recIdents = _out2800;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7012_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2801;
                DCOMPUTF16._IOwnership _out2802;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2801, out _out2802);
                r = _out2801;
                resultingOwnership = _out2802;
                readIdents = _7014_recIdents;
              }
            } else if (_source256.is_Seq) {
              DAST._IType _7015___mcc_h48 = _source256.dtor_element;
              {
                RAST._IExpr _7016_recursiveGen;
                DCOMPUTF16._IOwnership _7017_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7018_recIdents;
                RAST._IExpr _out2803;
                DCOMPUTF16._IOwnership _out2804;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2805;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2803, out _out2804, out _out2805);
                _7016_recursiveGen = _out2803;
                _7017_recOwned = _out2804;
                _7018_recIdents = _out2805;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7016_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2806;
                DCOMPUTF16._IOwnership _out2807;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2806, out _out2807);
                r = _out2806;
                resultingOwnership = _out2807;
                readIdents = _7018_recIdents;
              }
            } else if (_source256.is_Set) {
              DAST._IType _7019___mcc_h50 = _source256.dtor_element;
              {
                RAST._IExpr _7020_recursiveGen;
                DCOMPUTF16._IOwnership _7021_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7022_recIdents;
                RAST._IExpr _out2808;
                DCOMPUTF16._IOwnership _out2809;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2810;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2808, out _out2809, out _out2810);
                _7020_recursiveGen = _out2808;
                _7021_recOwned = _out2809;
                _7022_recIdents = _out2810;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7020_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2811;
                DCOMPUTF16._IOwnership _out2812;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2811, out _out2812);
                r = _out2811;
                resultingOwnership = _out2812;
                readIdents = _7022_recIdents;
              }
            } else if (_source256.is_Multiset) {
              DAST._IType _7023___mcc_h52 = _source256.dtor_element;
              {
                RAST._IExpr _7024_recursiveGen;
                DCOMPUTF16._IOwnership _7025_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7026_recIdents;
                RAST._IExpr _out2813;
                DCOMPUTF16._IOwnership _out2814;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2815;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2813, out _out2814, out _out2815);
                _7024_recursiveGen = _out2813;
                _7025_recOwned = _out2814;
                _7026_recIdents = _out2815;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7024_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2816;
                DCOMPUTF16._IOwnership _out2817;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2816, out _out2817);
                r = _out2816;
                resultingOwnership = _out2817;
                readIdents = _7026_recIdents;
              }
            } else if (_source256.is_Map) {
              DAST._IType _7027___mcc_h54 = _source256.dtor_key;
              DAST._IType _7028___mcc_h55 = _source256.dtor_value;
              {
                RAST._IExpr _7029_recursiveGen;
                DCOMPUTF16._IOwnership _7030_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7031_recIdents;
                RAST._IExpr _out2818;
                DCOMPUTF16._IOwnership _out2819;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2820;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2818, out _out2819, out _out2820);
                _7029_recursiveGen = _out2818;
                _7030_recOwned = _out2819;
                _7031_recIdents = _out2820;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7029_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2821;
                DCOMPUTF16._IOwnership _out2822;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2821, out _out2822);
                r = _out2821;
                resultingOwnership = _out2822;
                readIdents = _7031_recIdents;
              }
            } else if (_source256.is_SetBuilder) {
              DAST._IType _7032___mcc_h58 = _source256.dtor_element;
              {
                RAST._IExpr _7033_recursiveGen;
                DCOMPUTF16._IOwnership _7034_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7035_recIdents;
                RAST._IExpr _out2823;
                DCOMPUTF16._IOwnership _out2824;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2825;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2823, out _out2824, out _out2825);
                _7033_recursiveGen = _out2823;
                _7034_recOwned = _out2824;
                _7035_recIdents = _out2825;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7033_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2826;
                DCOMPUTF16._IOwnership _out2827;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2826, out _out2827);
                r = _out2826;
                resultingOwnership = _out2827;
                readIdents = _7035_recIdents;
              }
            } else if (_source256.is_MapBuilder) {
              DAST._IType _7036___mcc_h60 = _source256.dtor_key;
              DAST._IType _7037___mcc_h61 = _source256.dtor_value;
              {
                RAST._IExpr _7038_recursiveGen;
                DCOMPUTF16._IOwnership _7039_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7040_recIdents;
                RAST._IExpr _out2828;
                DCOMPUTF16._IOwnership _out2829;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2830;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2828, out _out2829, out _out2830);
                _7038_recursiveGen = _out2828;
                _7039_recOwned = _out2829;
                _7040_recIdents = _out2830;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7038_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2831;
                DCOMPUTF16._IOwnership _out2832;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2831, out _out2832);
                r = _out2831;
                resultingOwnership = _out2832;
                readIdents = _7040_recIdents;
              }
            } else if (_source256.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7041___mcc_h64 = _source256.dtor_args;
              DAST._IType _7042___mcc_h65 = _source256.dtor_result;
              {
                RAST._IExpr _7043_recursiveGen;
                DCOMPUTF16._IOwnership _7044_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7045_recIdents;
                RAST._IExpr _out2833;
                DCOMPUTF16._IOwnership _out2834;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2835;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2833, out _out2834, out _out2835);
                _7043_recursiveGen = _out2833;
                _7044_recOwned = _out2834;
                _7045_recIdents = _out2835;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7043_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2836;
                DCOMPUTF16._IOwnership _out2837;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2836, out _out2837);
                r = _out2836;
                resultingOwnership = _out2837;
                readIdents = _7045_recIdents;
              }
            } else if (_source256.is_Primitive) {
              DAST._IPrimitive _7046___mcc_h68 = _source256.dtor_Primitive_a0;
              {
                RAST._IExpr _7047_recursiveGen;
                DCOMPUTF16._IOwnership _7048_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7049_recIdents;
                RAST._IExpr _out2838;
                DCOMPUTF16._IOwnership _out2839;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2840;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2838, out _out2839, out _out2840);
                _7047_recursiveGen = _out2838;
                _7048_recOwned = _out2839;
                _7049_recIdents = _out2840;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7047_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2841;
                DCOMPUTF16._IOwnership _out2842;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2841, out _out2842);
                r = _out2841;
                resultingOwnership = _out2842;
                readIdents = _7049_recIdents;
              }
            } else if (_source256.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7050___mcc_h70 = _source256.dtor_Passthrough_a0;
              {
                RAST._IExpr _7051_recursiveGen;
                DCOMPUTF16._IOwnership _7052_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7053_recIdents;
                RAST._IExpr _out2843;
                DCOMPUTF16._IOwnership _out2844;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2845;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2843, out _out2844, out _out2845);
                _7051_recursiveGen = _out2843;
                _7052_recOwned = _out2844;
                _7053_recIdents = _out2845;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7051_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2846;
                DCOMPUTF16._IOwnership _out2847;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2846, out _out2847);
                r = _out2846;
                resultingOwnership = _out2847;
                readIdents = _7053_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7054___mcc_h72 = _source256.dtor_TypeArg_a0;
              {
                RAST._IExpr _7055_recursiveGen;
                DCOMPUTF16._IOwnership _7056_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7057_recIdents;
                RAST._IExpr _out2848;
                DCOMPUTF16._IOwnership _out2849;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2850;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2848, out _out2849, out _out2850);
                _7055_recursiveGen = _out2848;
                _7056_recOwned = _out2849;
                _7057_recIdents = _out2850;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7055_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2851;
                DCOMPUTF16._IOwnership _out2852;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2851, out _out2852);
                r = _out2851;
                resultingOwnership = _out2852;
                readIdents = _7057_recIdents;
              }
            }
          } else if (_source255.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7058___mcc_h74 = _source255.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _7059___mcc_h75 = _source255.dtor_attributes;
            DAST._IType _source259 = _6970___mcc_h1;
            if (_source259.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7060___mcc_h82 = _source259.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7061___mcc_h83 = _source259.dtor_typeArgs;
              DAST._IResolvedType _7062___mcc_h84 = _source259.dtor_resolved;
              DAST._IResolvedType _source260 = _7062___mcc_h84;
              if (_source260.is_Datatype) {
                DAST._IDatatypeType _7063___mcc_h88 = _source260.dtor_datatypeType;
                {
                  RAST._IExpr _7064_recursiveGen;
                  DCOMPUTF16._IOwnership _7065_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7066_recIdents;
                  RAST._IExpr _out2853;
                  DCOMPUTF16._IOwnership _out2854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2855;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2853, out _out2854, out _out2855);
                  _7064_recursiveGen = _out2853;
                  _7065_recOwned = _out2854;
                  _7066_recIdents = _out2855;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7064_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2856;
                  DCOMPUTF16._IOwnership _out2857;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2856, out _out2857);
                  r = _out2856;
                  resultingOwnership = _out2857;
                  readIdents = _7066_recIdents;
                }
              } else if (_source260.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7067___mcc_h90 = _source260.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7068___mcc_h91 = _source260.dtor_attributes;
                {
                  RAST._IExpr _7069_recursiveGen;
                  DCOMPUTF16._IOwnership _7070_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7071_recIdents;
                  RAST._IExpr _out2858;
                  DCOMPUTF16._IOwnership _out2859;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2860;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2858, out _out2859, out _out2860);
                  _7069_recursiveGen = _out2858;
                  _7070_recOwned = _out2859;
                  _7071_recIdents = _out2860;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7069_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out2861;
                  DCOMPUTF16._IOwnership _out2862;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2861, out _out2862);
                  r = _out2861;
                  resultingOwnership = _out2862;
                  readIdents = _7071_recIdents;
                }
              } else {
                DAST._IType _7072___mcc_h94 = _source260.dtor_baseType;
                DAST._INewtypeRange _7073___mcc_h95 = _source260.dtor_range;
                bool _7074___mcc_h96 = _source260.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7075___mcc_h97 = _source260.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7076_attributes = _7075___mcc_h97;
                bool _7077_erase = _7074___mcc_h96;
                DAST._INewtypeRange _7078_range = _7073___mcc_h95;
                DAST._IType _7079_b = _7072___mcc_h94;
                {
                  if (object.Equals(_6964_fromTpe, _7079_b)) {
                    RAST._IExpr _7080_recursiveGen;
                    DCOMPUTF16._IOwnership _7081_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7082_recIdents;
                    RAST._IExpr _out2863;
                    DCOMPUTF16._IOwnership _out2864;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2865;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2863, out _out2864, out _out2865);
                    _7080_recursiveGen = _out2863;
                    _7081_recOwned = _out2864;
                    _7082_recIdents = _out2865;
                    Std.Wrappers._IOption<RAST._IType> _7083_potentialRhsType;
                    _7083_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7079_b, _7078_range);
                    Std.Wrappers._IOption<RAST._IType> _source261 = _7083_potentialRhsType;
                    if (_source261.is_None) {
                      if (_7077_erase) {
                        r = _7080_recursiveGen;
                      } else {
                        RAST._IType _7084_rhsType;
                        RAST._IType _out2866;
                        _out2866 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                        _7084_rhsType = _out2866;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7084_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7080_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2867;
                      DCOMPUTF16._IOwnership _out2868;
                      DCOMPUTF16.COMP.FromOwnership(r, _7081_recOwned, expectedOwnership, out _out2867, out _out2868);
                      r = _out2867;
                      resultingOwnership = _out2868;
                    } else {
                      RAST._IType _7085___mcc_h1247 = _source261.dtor_value;
                      RAST._IType _7086_v = _7085___mcc_h1247;
                      r = RAST.Expr.create_ConversionNum(_7086_v, _7080_recursiveGen);
                      RAST._IExpr _out2869;
                      DCOMPUTF16._IOwnership _out2870;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2869, out _out2870);
                      r = _out2869;
                      resultingOwnership = _out2870;
                    }
                    readIdents = _7082_recIdents;
                  } else {
                    RAST._IExpr _out2871;
                    DCOMPUTF16._IOwnership _out2872;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2873;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7079_b), _7079_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out2871, out _out2872, out _out2873);
                    r = _out2871;
                    resultingOwnership = _out2872;
                    readIdents = _out2873;
                  }
                }
              }
            } else if (_source259.is_Nullable) {
              DAST._IType _7087___mcc_h102 = _source259.dtor_Nullable_a0;
              {
                RAST._IExpr _7088_recursiveGen;
                DCOMPUTF16._IOwnership _7089_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7090_recIdents;
                RAST._IExpr _out2874;
                DCOMPUTF16._IOwnership _out2875;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2876;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2874, out _out2875, out _out2876);
                _7088_recursiveGen = _out2874;
                _7089_recOwned = _out2875;
                _7090_recIdents = _out2876;
                r = _7088_recursiveGen;
                if (object.Equals(_7089_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out2877;
                DCOMPUTF16._IOwnership _out2878;
                DCOMPUTF16.COMP.FromOwnership(r, _7089_recOwned, expectedOwnership, out _out2877, out _out2878);
                r = _out2877;
                resultingOwnership = _out2878;
                readIdents = _7090_recIdents;
              }
            } else if (_source259.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7091___mcc_h104 = _source259.dtor_Tuple_a0;
              {
                RAST._IExpr _7092_recursiveGen;
                DCOMPUTF16._IOwnership _7093_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7094_recIdents;
                RAST._IExpr _out2879;
                DCOMPUTF16._IOwnership _out2880;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2881;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2879, out _out2880, out _out2881);
                _7092_recursiveGen = _out2879;
                _7093_recOwned = _out2880;
                _7094_recIdents = _out2881;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7092_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2882;
                DCOMPUTF16._IOwnership _out2883;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2882, out _out2883);
                r = _out2882;
                resultingOwnership = _out2883;
                readIdents = _7094_recIdents;
              }
            } else if (_source259.is_Array) {
              DAST._IType _7095___mcc_h106 = _source259.dtor_element;
              BigInteger _7096___mcc_h107 = _source259.dtor_dims;
              {
                RAST._IExpr _7097_recursiveGen;
                DCOMPUTF16._IOwnership _7098_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7099_recIdents;
                RAST._IExpr _out2884;
                DCOMPUTF16._IOwnership _out2885;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2886;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2884, out _out2885, out _out2886);
                _7097_recursiveGen = _out2884;
                _7098_recOwned = _out2885;
                _7099_recIdents = _out2886;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7097_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2887;
                DCOMPUTF16._IOwnership _out2888;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2887, out _out2888);
                r = _out2887;
                resultingOwnership = _out2888;
                readIdents = _7099_recIdents;
              }
            } else if (_source259.is_Seq) {
              DAST._IType _7100___mcc_h110 = _source259.dtor_element;
              {
                RAST._IExpr _7101_recursiveGen;
                DCOMPUTF16._IOwnership _7102_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7103_recIdents;
                RAST._IExpr _out2889;
                DCOMPUTF16._IOwnership _out2890;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2891;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2889, out _out2890, out _out2891);
                _7101_recursiveGen = _out2889;
                _7102_recOwned = _out2890;
                _7103_recIdents = _out2891;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7101_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2892;
                DCOMPUTF16._IOwnership _out2893;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2892, out _out2893);
                r = _out2892;
                resultingOwnership = _out2893;
                readIdents = _7103_recIdents;
              }
            } else if (_source259.is_Set) {
              DAST._IType _7104___mcc_h112 = _source259.dtor_element;
              {
                RAST._IExpr _7105_recursiveGen;
                DCOMPUTF16._IOwnership _7106_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7107_recIdents;
                RAST._IExpr _out2894;
                DCOMPUTF16._IOwnership _out2895;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2896;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2894, out _out2895, out _out2896);
                _7105_recursiveGen = _out2894;
                _7106_recOwned = _out2895;
                _7107_recIdents = _out2896;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7105_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2897;
                DCOMPUTF16._IOwnership _out2898;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2897, out _out2898);
                r = _out2897;
                resultingOwnership = _out2898;
                readIdents = _7107_recIdents;
              }
            } else if (_source259.is_Multiset) {
              DAST._IType _7108___mcc_h114 = _source259.dtor_element;
              {
                RAST._IExpr _7109_recursiveGen;
                DCOMPUTF16._IOwnership _7110_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7111_recIdents;
                RAST._IExpr _out2899;
                DCOMPUTF16._IOwnership _out2900;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2901;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2899, out _out2900, out _out2901);
                _7109_recursiveGen = _out2899;
                _7110_recOwned = _out2900;
                _7111_recIdents = _out2901;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7109_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2902;
                DCOMPUTF16._IOwnership _out2903;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2902, out _out2903);
                r = _out2902;
                resultingOwnership = _out2903;
                readIdents = _7111_recIdents;
              }
            } else if (_source259.is_Map) {
              DAST._IType _7112___mcc_h116 = _source259.dtor_key;
              DAST._IType _7113___mcc_h117 = _source259.dtor_value;
              {
                RAST._IExpr _7114_recursiveGen;
                DCOMPUTF16._IOwnership _7115_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7116_recIdents;
                RAST._IExpr _out2904;
                DCOMPUTF16._IOwnership _out2905;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2906;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2904, out _out2905, out _out2906);
                _7114_recursiveGen = _out2904;
                _7115_recOwned = _out2905;
                _7116_recIdents = _out2906;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7114_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2907;
                DCOMPUTF16._IOwnership _out2908;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2907, out _out2908);
                r = _out2907;
                resultingOwnership = _out2908;
                readIdents = _7116_recIdents;
              }
            } else if (_source259.is_SetBuilder) {
              DAST._IType _7117___mcc_h120 = _source259.dtor_element;
              {
                RAST._IExpr _7118_recursiveGen;
                DCOMPUTF16._IOwnership _7119_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7120_recIdents;
                RAST._IExpr _out2909;
                DCOMPUTF16._IOwnership _out2910;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2911;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2909, out _out2910, out _out2911);
                _7118_recursiveGen = _out2909;
                _7119_recOwned = _out2910;
                _7120_recIdents = _out2911;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7118_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2912;
                DCOMPUTF16._IOwnership _out2913;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2912, out _out2913);
                r = _out2912;
                resultingOwnership = _out2913;
                readIdents = _7120_recIdents;
              }
            } else if (_source259.is_MapBuilder) {
              DAST._IType _7121___mcc_h122 = _source259.dtor_key;
              DAST._IType _7122___mcc_h123 = _source259.dtor_value;
              {
                RAST._IExpr _7123_recursiveGen;
                DCOMPUTF16._IOwnership _7124_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7125_recIdents;
                RAST._IExpr _out2914;
                DCOMPUTF16._IOwnership _out2915;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2916;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2914, out _out2915, out _out2916);
                _7123_recursiveGen = _out2914;
                _7124_recOwned = _out2915;
                _7125_recIdents = _out2916;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7123_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2917;
                DCOMPUTF16._IOwnership _out2918;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2917, out _out2918);
                r = _out2917;
                resultingOwnership = _out2918;
                readIdents = _7125_recIdents;
              }
            } else if (_source259.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7126___mcc_h126 = _source259.dtor_args;
              DAST._IType _7127___mcc_h127 = _source259.dtor_result;
              {
                RAST._IExpr _7128_recursiveGen;
                DCOMPUTF16._IOwnership _7129_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7130_recIdents;
                RAST._IExpr _out2919;
                DCOMPUTF16._IOwnership _out2920;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2921;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2919, out _out2920, out _out2921);
                _7128_recursiveGen = _out2919;
                _7129_recOwned = _out2920;
                _7130_recIdents = _out2921;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7128_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2922;
                DCOMPUTF16._IOwnership _out2923;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2922, out _out2923);
                r = _out2922;
                resultingOwnership = _out2923;
                readIdents = _7130_recIdents;
              }
            } else if (_source259.is_Primitive) {
              DAST._IPrimitive _7131___mcc_h130 = _source259.dtor_Primitive_a0;
              {
                RAST._IExpr _7132_recursiveGen;
                DCOMPUTF16._IOwnership _7133_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7134_recIdents;
                RAST._IExpr _out2924;
                DCOMPUTF16._IOwnership _out2925;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2926;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2924, out _out2925, out _out2926);
                _7132_recursiveGen = _out2924;
                _7133_recOwned = _out2925;
                _7134_recIdents = _out2926;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7132_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2927;
                DCOMPUTF16._IOwnership _out2928;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2927, out _out2928);
                r = _out2927;
                resultingOwnership = _out2928;
                readIdents = _7134_recIdents;
              }
            } else if (_source259.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7135___mcc_h132 = _source259.dtor_Passthrough_a0;
              {
                RAST._IExpr _7136_recursiveGen;
                DCOMPUTF16._IOwnership _7137_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7138_recIdents;
                RAST._IExpr _out2929;
                DCOMPUTF16._IOwnership _out2930;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2931;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2929, out _out2930, out _out2931);
                _7136_recursiveGen = _out2929;
                _7137_recOwned = _out2930;
                _7138_recIdents = _out2931;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7136_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2932;
                DCOMPUTF16._IOwnership _out2933;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2932, out _out2933);
                r = _out2932;
                resultingOwnership = _out2933;
                readIdents = _7138_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7139___mcc_h134 = _source259.dtor_TypeArg_a0;
              {
                RAST._IExpr _7140_recursiveGen;
                DCOMPUTF16._IOwnership _7141_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7142_recIdents;
                RAST._IExpr _out2934;
                DCOMPUTF16._IOwnership _out2935;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2936;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2934, out _out2935, out _out2936);
                _7140_recursiveGen = _out2934;
                _7141_recOwned = _out2935;
                _7142_recIdents = _out2936;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7140_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out2937;
                DCOMPUTF16._IOwnership _out2938;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2937, out _out2938);
                r = _out2937;
                resultingOwnership = _out2938;
                readIdents = _7142_recIdents;
              }
            }
          } else {
            DAST._IType _7143___mcc_h136 = _source255.dtor_baseType;
            DAST._INewtypeRange _7144___mcc_h137 = _source255.dtor_range;
            bool _7145___mcc_h138 = _source255.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _7146___mcc_h139 = _source255.dtor_attributes;
            DAST._IType _source262 = _6970___mcc_h1;
            if (_source262.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7147___mcc_h152 = _source262.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7148___mcc_h153 = _source262.dtor_typeArgs;
              DAST._IResolvedType _7149___mcc_h154 = _source262.dtor_resolved;
              DAST._IResolvedType _source263 = _7149___mcc_h154;
              if (_source263.is_Datatype) {
                DAST._IDatatypeType _7150___mcc_h161 = _source263.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _7151_attributes = _7146___mcc_h139;
                bool _7152_erase = _7145___mcc_h138;
                DAST._INewtypeRange _7153_range = _7144___mcc_h137;
                DAST._IType _7154_b = _7143___mcc_h136;
                {
                  if (object.Equals(_7154_b, _6965_toTpe)) {
                    RAST._IExpr _7155_recursiveGen;
                    DCOMPUTF16._IOwnership _7156_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7157_recIdents;
                    RAST._IExpr _out2939;
                    DCOMPUTF16._IOwnership _out2940;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2941;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2939, out _out2940, out _out2941);
                    _7155_recursiveGen = _out2939;
                    _7156_recOwned = _out2940;
                    _7157_recIdents = _out2941;
                    if (_7152_erase) {
                      r = _7155_recursiveGen;
                    } else {
                      r = (_7155_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out2942;
                    DCOMPUTF16._IOwnership _out2943;
                    DCOMPUTF16.COMP.FromOwnership(r, _7156_recOwned, expectedOwnership, out _out2942, out _out2943);
                    r = _out2942;
                    resultingOwnership = _out2943;
                    readIdents = _7157_recIdents;
                  } else {
                    RAST._IExpr _out2944;
                    DCOMPUTF16._IOwnership _out2945;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2946;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7154_b), _7154_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out2944, out _out2945, out _out2946);
                    r = _out2944;
                    resultingOwnership = _out2945;
                    readIdents = _out2946;
                  }
                }
              } else if (_source263.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7158___mcc_h164 = _source263.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7159___mcc_h165 = _source263.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7160_attributes = _7146___mcc_h139;
                bool _7161_erase = _7145___mcc_h138;
                DAST._INewtypeRange _7162_range = _7144___mcc_h137;
                DAST._IType _7163_b = _7143___mcc_h136;
                {
                  if (object.Equals(_7163_b, _6965_toTpe)) {
                    RAST._IExpr _7164_recursiveGen;
                    DCOMPUTF16._IOwnership _7165_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7166_recIdents;
                    RAST._IExpr _out2947;
                    DCOMPUTF16._IOwnership _out2948;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2949;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2947, out _out2948, out _out2949);
                    _7164_recursiveGen = _out2947;
                    _7165_recOwned = _out2948;
                    _7166_recIdents = _out2949;
                    if (_7161_erase) {
                      r = _7164_recursiveGen;
                    } else {
                      r = (_7164_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                    }
                    RAST._IExpr _out2950;
                    DCOMPUTF16._IOwnership _out2951;
                    DCOMPUTF16.COMP.FromOwnership(r, _7165_recOwned, expectedOwnership, out _out2950, out _out2951);
                    r = _out2950;
                    resultingOwnership = _out2951;
                    readIdents = _7166_recIdents;
                  } else {
                    RAST._IExpr _out2952;
                    DCOMPUTF16._IOwnership _out2953;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2954;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7163_b), _7163_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out2952, out _out2953, out _out2954);
                    r = _out2952;
                    resultingOwnership = _out2953;
                    readIdents = _out2954;
                  }
                }
              } else {
                DAST._IType _7167___mcc_h170 = _source263.dtor_baseType;
                DAST._INewtypeRange _7168___mcc_h171 = _source263.dtor_range;
                bool _7169___mcc_h172 = _source263.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7170___mcc_h173 = _source263.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7171_attributes = _7170___mcc_h173;
                bool _7172_erase = _7169___mcc_h172;
                DAST._INewtypeRange _7173_range = _7168___mcc_h171;
                DAST._IType _7174_b = _7167___mcc_h170;
                {
                  if (object.Equals(_6964_fromTpe, _7174_b)) {
                    RAST._IExpr _7175_recursiveGen;
                    DCOMPUTF16._IOwnership _7176_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7177_recIdents;
                    RAST._IExpr _out2955;
                    DCOMPUTF16._IOwnership _out2956;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2957;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2955, out _out2956, out _out2957);
                    _7175_recursiveGen = _out2955;
                    _7176_recOwned = _out2956;
                    _7177_recIdents = _out2957;
                    Std.Wrappers._IOption<RAST._IType> _7178_potentialRhsType;
                    _7178_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7174_b, _7173_range);
                    Std.Wrappers._IOption<RAST._IType> _source264 = _7178_potentialRhsType;
                    if (_source264.is_None) {
                      if (_7172_erase) {
                        r = _7175_recursiveGen;
                      } else {
                        RAST._IType _7179_rhsType;
                        RAST._IType _out2958;
                        _out2958 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                        _7179_rhsType = _out2958;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7179_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7175_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2959;
                      DCOMPUTF16._IOwnership _out2960;
                      DCOMPUTF16.COMP.FromOwnership(r, _7176_recOwned, expectedOwnership, out _out2959, out _out2960);
                      r = _out2959;
                      resultingOwnership = _out2960;
                    } else {
                      RAST._IType _7180___mcc_h1248 = _source264.dtor_value;
                      RAST._IType _7181_v = _7180___mcc_h1248;
                      r = RAST.Expr.create_ConversionNum(_7181_v, _7175_recursiveGen);
                      RAST._IExpr _out2961;
                      DCOMPUTF16._IOwnership _out2962;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2961, out _out2962);
                      r = _out2961;
                      resultingOwnership = _out2962;
                    }
                    readIdents = _7177_recIdents;
                  } else {
                    RAST._IExpr _out2963;
                    DCOMPUTF16._IOwnership _out2964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2965;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7174_b), _7174_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out2963, out _out2964, out _out2965);
                    r = _out2963;
                    resultingOwnership = _out2964;
                    readIdents = _out2965;
                  }
                }
              }
            } else if (_source262.is_Nullable) {
              DAST._IType _7182___mcc_h182 = _source262.dtor_Nullable_a0;
              {
                RAST._IExpr _7183_recursiveGen;
                DCOMPUTF16._IOwnership _7184_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7185_recIdents;
                RAST._IExpr _out2966;
                DCOMPUTF16._IOwnership _out2967;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2968;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2966, out _out2967, out _out2968);
                _7183_recursiveGen = _out2966;
                _7184_recOwned = _out2967;
                _7185_recIdents = _out2968;
                r = _7183_recursiveGen;
                if (object.Equals(_7184_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out2969;
                DCOMPUTF16._IOwnership _out2970;
                DCOMPUTF16.COMP.FromOwnership(r, _7184_recOwned, expectedOwnership, out _out2969, out _out2970);
                r = _out2969;
                resultingOwnership = _out2970;
                readIdents = _7185_recIdents;
              }
            } else if (_source262.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7186___mcc_h185 = _source262.dtor_Tuple_a0;
              Dafny.ISequence<DAST._IAttribute> _7187_attributes = _7146___mcc_h139;
              bool _7188_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7189_range = _7144___mcc_h137;
              DAST._IType _7190_b = _7143___mcc_h136;
              {
                if (object.Equals(_7190_b, _6965_toTpe)) {
                  RAST._IExpr _7191_recursiveGen;
                  DCOMPUTF16._IOwnership _7192_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7193_recIdents;
                  RAST._IExpr _out2971;
                  DCOMPUTF16._IOwnership _out2972;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2973;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2971, out _out2972, out _out2973);
                  _7191_recursiveGen = _out2971;
                  _7192_recOwned = _out2972;
                  _7193_recIdents = _out2973;
                  if (_7188_erase) {
                    r = _7191_recursiveGen;
                  } else {
                    r = (_7191_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out2974;
                  DCOMPUTF16._IOwnership _out2975;
                  DCOMPUTF16.COMP.FromOwnership(r, _7192_recOwned, expectedOwnership, out _out2974, out _out2975);
                  r = _out2974;
                  resultingOwnership = _out2975;
                  readIdents = _7193_recIdents;
                } else {
                  RAST._IExpr _out2976;
                  DCOMPUTF16._IOwnership _out2977;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2978;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7190_b), _7190_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out2976, out _out2977, out _out2978);
                  r = _out2976;
                  resultingOwnership = _out2977;
                  readIdents = _out2978;
                }
              }
            } else if (_source262.is_Array) {
              DAST._IType _7194___mcc_h188 = _source262.dtor_element;
              BigInteger _7195___mcc_h189 = _source262.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _7196_attributes = _7146___mcc_h139;
              bool _7197_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7198_range = _7144___mcc_h137;
              DAST._IType _7199_b = _7143___mcc_h136;
              {
                if (object.Equals(_7199_b, _6965_toTpe)) {
                  RAST._IExpr _7200_recursiveGen;
                  DCOMPUTF16._IOwnership _7201_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7202_recIdents;
                  RAST._IExpr _out2979;
                  DCOMPUTF16._IOwnership _out2980;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2981;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2979, out _out2980, out _out2981);
                  _7200_recursiveGen = _out2979;
                  _7201_recOwned = _out2980;
                  _7202_recIdents = _out2981;
                  if (_7197_erase) {
                    r = _7200_recursiveGen;
                  } else {
                    r = (_7200_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out2982;
                  DCOMPUTF16._IOwnership _out2983;
                  DCOMPUTF16.COMP.FromOwnership(r, _7201_recOwned, expectedOwnership, out _out2982, out _out2983);
                  r = _out2982;
                  resultingOwnership = _out2983;
                  readIdents = _7202_recIdents;
                } else {
                  RAST._IExpr _out2984;
                  DCOMPUTF16._IOwnership _out2985;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2986;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7199_b), _7199_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out2984, out _out2985, out _out2986);
                  r = _out2984;
                  resultingOwnership = _out2985;
                  readIdents = _out2986;
                }
              }
            } else if (_source262.is_Seq) {
              DAST._IType _7203___mcc_h194 = _source262.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _7204_attributes = _7146___mcc_h139;
              bool _7205_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7206_range = _7144___mcc_h137;
              DAST._IType _7207_b = _7143___mcc_h136;
              {
                if (object.Equals(_7207_b, _6965_toTpe)) {
                  RAST._IExpr _7208_recursiveGen;
                  DCOMPUTF16._IOwnership _7209_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7210_recIdents;
                  RAST._IExpr _out2987;
                  DCOMPUTF16._IOwnership _out2988;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2989;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2987, out _out2988, out _out2989);
                  _7208_recursiveGen = _out2987;
                  _7209_recOwned = _out2988;
                  _7210_recIdents = _out2989;
                  if (_7205_erase) {
                    r = _7208_recursiveGen;
                  } else {
                    r = (_7208_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out2990;
                  DCOMPUTF16._IOwnership _out2991;
                  DCOMPUTF16.COMP.FromOwnership(r, _7209_recOwned, expectedOwnership, out _out2990, out _out2991);
                  r = _out2990;
                  resultingOwnership = _out2991;
                  readIdents = _7210_recIdents;
                } else {
                  RAST._IExpr _out2992;
                  DCOMPUTF16._IOwnership _out2993;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2994;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7207_b), _7207_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out2992, out _out2993, out _out2994);
                  r = _out2992;
                  resultingOwnership = _out2993;
                  readIdents = _out2994;
                }
              }
            } else if (_source262.is_Set) {
              DAST._IType _7211___mcc_h197 = _source262.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _7212_attributes = _7146___mcc_h139;
              bool _7213_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7214_range = _7144___mcc_h137;
              DAST._IType _7215_b = _7143___mcc_h136;
              {
                if (object.Equals(_7215_b, _6965_toTpe)) {
                  RAST._IExpr _7216_recursiveGen;
                  DCOMPUTF16._IOwnership _7217_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7218_recIdents;
                  RAST._IExpr _out2995;
                  DCOMPUTF16._IOwnership _out2996;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2997;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out2995, out _out2996, out _out2997);
                  _7216_recursiveGen = _out2995;
                  _7217_recOwned = _out2996;
                  _7218_recIdents = _out2997;
                  if (_7213_erase) {
                    r = _7216_recursiveGen;
                  } else {
                    r = (_7216_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out2998;
                  DCOMPUTF16._IOwnership _out2999;
                  DCOMPUTF16.COMP.FromOwnership(r, _7217_recOwned, expectedOwnership, out _out2998, out _out2999);
                  r = _out2998;
                  resultingOwnership = _out2999;
                  readIdents = _7218_recIdents;
                } else {
                  RAST._IExpr _out3000;
                  DCOMPUTF16._IOwnership _out3001;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3002;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7215_b), _7215_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3000, out _out3001, out _out3002);
                  r = _out3000;
                  resultingOwnership = _out3001;
                  readIdents = _out3002;
                }
              }
            } else if (_source262.is_Multiset) {
              DAST._IType _7219___mcc_h200 = _source262.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _7220_attributes = _7146___mcc_h139;
              bool _7221_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7222_range = _7144___mcc_h137;
              DAST._IType _7223_b = _7143___mcc_h136;
              {
                if (object.Equals(_7223_b, _6965_toTpe)) {
                  RAST._IExpr _7224_recursiveGen;
                  DCOMPUTF16._IOwnership _7225_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7226_recIdents;
                  RAST._IExpr _out3003;
                  DCOMPUTF16._IOwnership _out3004;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3005;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3003, out _out3004, out _out3005);
                  _7224_recursiveGen = _out3003;
                  _7225_recOwned = _out3004;
                  _7226_recIdents = _out3005;
                  if (_7221_erase) {
                    r = _7224_recursiveGen;
                  } else {
                    r = (_7224_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out3006;
                  DCOMPUTF16._IOwnership _out3007;
                  DCOMPUTF16.COMP.FromOwnership(r, _7225_recOwned, expectedOwnership, out _out3006, out _out3007);
                  r = _out3006;
                  resultingOwnership = _out3007;
                  readIdents = _7226_recIdents;
                } else {
                  RAST._IExpr _out3008;
                  DCOMPUTF16._IOwnership _out3009;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3010;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7223_b), _7223_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3008, out _out3009, out _out3010);
                  r = _out3008;
                  resultingOwnership = _out3009;
                  readIdents = _out3010;
                }
              }
            } else if (_source262.is_Map) {
              DAST._IType _7227___mcc_h203 = _source262.dtor_key;
              DAST._IType _7228___mcc_h204 = _source262.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _7229_attributes = _7146___mcc_h139;
              bool _7230_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7231_range = _7144___mcc_h137;
              DAST._IType _7232_b = _7143___mcc_h136;
              {
                if (object.Equals(_7232_b, _6965_toTpe)) {
                  RAST._IExpr _7233_recursiveGen;
                  DCOMPUTF16._IOwnership _7234_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7235_recIdents;
                  RAST._IExpr _out3011;
                  DCOMPUTF16._IOwnership _out3012;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3013;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3011, out _out3012, out _out3013);
                  _7233_recursiveGen = _out3011;
                  _7234_recOwned = _out3012;
                  _7235_recIdents = _out3013;
                  if (_7230_erase) {
                    r = _7233_recursiveGen;
                  } else {
                    r = (_7233_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out3014;
                  DCOMPUTF16._IOwnership _out3015;
                  DCOMPUTF16.COMP.FromOwnership(r, _7234_recOwned, expectedOwnership, out _out3014, out _out3015);
                  r = _out3014;
                  resultingOwnership = _out3015;
                  readIdents = _7235_recIdents;
                } else {
                  RAST._IExpr _out3016;
                  DCOMPUTF16._IOwnership _out3017;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3018;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7232_b), _7232_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3016, out _out3017, out _out3018);
                  r = _out3016;
                  resultingOwnership = _out3017;
                  readIdents = _out3018;
                }
              }
            } else if (_source262.is_SetBuilder) {
              DAST._IType _7236___mcc_h209 = _source262.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _7237_attributes = _7146___mcc_h139;
              bool _7238_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7239_range = _7144___mcc_h137;
              DAST._IType _7240_b = _7143___mcc_h136;
              {
                if (object.Equals(_7240_b, _6965_toTpe)) {
                  RAST._IExpr _7241_recursiveGen;
                  DCOMPUTF16._IOwnership _7242_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7243_recIdents;
                  RAST._IExpr _out3019;
                  DCOMPUTF16._IOwnership _out3020;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3021;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3019, out _out3020, out _out3021);
                  _7241_recursiveGen = _out3019;
                  _7242_recOwned = _out3020;
                  _7243_recIdents = _out3021;
                  if (_7238_erase) {
                    r = _7241_recursiveGen;
                  } else {
                    r = (_7241_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out3022;
                  DCOMPUTF16._IOwnership _out3023;
                  DCOMPUTF16.COMP.FromOwnership(r, _7242_recOwned, expectedOwnership, out _out3022, out _out3023);
                  r = _out3022;
                  resultingOwnership = _out3023;
                  readIdents = _7243_recIdents;
                } else {
                  RAST._IExpr _out3024;
                  DCOMPUTF16._IOwnership _out3025;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3026;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7240_b), _7240_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3024, out _out3025, out _out3026);
                  r = _out3024;
                  resultingOwnership = _out3025;
                  readIdents = _out3026;
                }
              }
            } else if (_source262.is_MapBuilder) {
              DAST._IType _7244___mcc_h212 = _source262.dtor_key;
              DAST._IType _7245___mcc_h213 = _source262.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _7246_attributes = _7146___mcc_h139;
              bool _7247_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7248_range = _7144___mcc_h137;
              DAST._IType _7249_b = _7143___mcc_h136;
              {
                if (object.Equals(_7249_b, _6965_toTpe)) {
                  RAST._IExpr _7250_recursiveGen;
                  DCOMPUTF16._IOwnership _7251_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7252_recIdents;
                  RAST._IExpr _out3027;
                  DCOMPUTF16._IOwnership _out3028;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3029;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3027, out _out3028, out _out3029);
                  _7250_recursiveGen = _out3027;
                  _7251_recOwned = _out3028;
                  _7252_recIdents = _out3029;
                  if (_7247_erase) {
                    r = _7250_recursiveGen;
                  } else {
                    r = (_7250_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out3030;
                  DCOMPUTF16._IOwnership _out3031;
                  DCOMPUTF16.COMP.FromOwnership(r, _7251_recOwned, expectedOwnership, out _out3030, out _out3031);
                  r = _out3030;
                  resultingOwnership = _out3031;
                  readIdents = _7252_recIdents;
                } else {
                  RAST._IExpr _out3032;
                  DCOMPUTF16._IOwnership _out3033;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3034;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7249_b), _7249_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3032, out _out3033, out _out3034);
                  r = _out3032;
                  resultingOwnership = _out3033;
                  readIdents = _out3034;
                }
              }
            } else if (_source262.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7253___mcc_h218 = _source262.dtor_args;
              DAST._IType _7254___mcc_h219 = _source262.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _7255_attributes = _7146___mcc_h139;
              bool _7256_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7257_range = _7144___mcc_h137;
              DAST._IType _7258_b = _7143___mcc_h136;
              {
                if (object.Equals(_7258_b, _6965_toTpe)) {
                  RAST._IExpr _7259_recursiveGen;
                  DCOMPUTF16._IOwnership _7260_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7261_recIdents;
                  RAST._IExpr _out3035;
                  DCOMPUTF16._IOwnership _out3036;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3037;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3035, out _out3036, out _out3037);
                  _7259_recursiveGen = _out3035;
                  _7260_recOwned = _out3036;
                  _7261_recIdents = _out3037;
                  if (_7256_erase) {
                    r = _7259_recursiveGen;
                  } else {
                    r = (_7259_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out3038;
                  DCOMPUTF16._IOwnership _out3039;
                  DCOMPUTF16.COMP.FromOwnership(r, _7260_recOwned, expectedOwnership, out _out3038, out _out3039);
                  r = _out3038;
                  resultingOwnership = _out3039;
                  readIdents = _7261_recIdents;
                } else {
                  RAST._IExpr _out3040;
                  DCOMPUTF16._IOwnership _out3041;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3042;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7258_b), _7258_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3040, out _out3041, out _out3042);
                  r = _out3040;
                  resultingOwnership = _out3041;
                  readIdents = _out3042;
                }
              }
            } else if (_source262.is_Primitive) {
              DAST._IPrimitive _7262___mcc_h224 = _source262.dtor_Primitive_a0;
              Dafny.ISequence<DAST._IAttribute> _7263_attributes = _7146___mcc_h139;
              bool _7264_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7265_range = _7144___mcc_h137;
              DAST._IType _7266_b = _7143___mcc_h136;
              {
                if (object.Equals(_7266_b, _6965_toTpe)) {
                  RAST._IExpr _7267_recursiveGen;
                  DCOMPUTF16._IOwnership _7268_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7269_recIdents;
                  RAST._IExpr _out3043;
                  DCOMPUTF16._IOwnership _out3044;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3045;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3043, out _out3044, out _out3045);
                  _7267_recursiveGen = _out3043;
                  _7268_recOwned = _out3044;
                  _7269_recIdents = _out3045;
                  if (_7264_erase) {
                    r = _7267_recursiveGen;
                  } else {
                    r = (_7267_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out3046;
                  DCOMPUTF16._IOwnership _out3047;
                  DCOMPUTF16.COMP.FromOwnership(r, _7268_recOwned, expectedOwnership, out _out3046, out _out3047);
                  r = _out3046;
                  resultingOwnership = _out3047;
                  readIdents = _7269_recIdents;
                } else {
                  RAST._IExpr _out3048;
                  DCOMPUTF16._IOwnership _out3049;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3050;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7266_b), _7266_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3048, out _out3049, out _out3050);
                  r = _out3048;
                  resultingOwnership = _out3049;
                  readIdents = _out3050;
                }
              }
            } else if (_source262.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7270___mcc_h227 = _source262.dtor_Passthrough_a0;
              Dafny.ISequence<DAST._IAttribute> _7271_attributes = _7146___mcc_h139;
              bool _7272_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7273_range = _7144___mcc_h137;
              DAST._IType _7274_b = _7143___mcc_h136;
              {
                if (object.Equals(_7274_b, _6965_toTpe)) {
                  RAST._IExpr _7275_recursiveGen;
                  DCOMPUTF16._IOwnership _7276_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7277_recIdents;
                  RAST._IExpr _out3051;
                  DCOMPUTF16._IOwnership _out3052;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3053;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3051, out _out3052, out _out3053);
                  _7275_recursiveGen = _out3051;
                  _7276_recOwned = _out3052;
                  _7277_recIdents = _out3053;
                  if (_7272_erase) {
                    r = _7275_recursiveGen;
                  } else {
                    r = (_7275_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out3054;
                  DCOMPUTF16._IOwnership _out3055;
                  DCOMPUTF16.COMP.FromOwnership(r, _7276_recOwned, expectedOwnership, out _out3054, out _out3055);
                  r = _out3054;
                  resultingOwnership = _out3055;
                  readIdents = _7277_recIdents;
                } else {
                  RAST._IExpr _out3056;
                  DCOMPUTF16._IOwnership _out3057;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3058;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7274_b), _7274_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3056, out _out3057, out _out3058);
                  r = _out3056;
                  resultingOwnership = _out3057;
                  readIdents = _out3058;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7278___mcc_h230 = _source262.dtor_TypeArg_a0;
              Dafny.ISequence<DAST._IAttribute> _7279_attributes = _7146___mcc_h139;
              bool _7280_erase = _7145___mcc_h138;
              DAST._INewtypeRange _7281_range = _7144___mcc_h137;
              DAST._IType _7282_b = _7143___mcc_h136;
              {
                if (object.Equals(_7282_b, _6965_toTpe)) {
                  RAST._IExpr _7283_recursiveGen;
                  DCOMPUTF16._IOwnership _7284_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7285_recIdents;
                  RAST._IExpr _out3059;
                  DCOMPUTF16._IOwnership _out3060;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3061;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3059, out _out3060, out _out3061);
                  _7283_recursiveGen = _out3059;
                  _7284_recOwned = _out3060;
                  _7285_recIdents = _out3061;
                  if (_7280_erase) {
                    r = _7283_recursiveGen;
                  } else {
                    r = (_7283_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0"));
                  }
                  RAST._IExpr _out3062;
                  DCOMPUTF16._IOwnership _out3063;
                  DCOMPUTF16.COMP.FromOwnership(r, _7284_recOwned, expectedOwnership, out _out3062, out _out3063);
                  r = _out3062;
                  resultingOwnership = _out3063;
                  readIdents = _7285_recIdents;
                } else {
                  RAST._IExpr _out3064;
                  DCOMPUTF16._IOwnership _out3065;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3066;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7282_b), _7282_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3064, out _out3065, out _out3066);
                  r = _out3064;
                  resultingOwnership = _out3065;
                  readIdents = _out3066;
                }
              }
            }
          }
        } else if (_source254.is_Nullable) {
          DAST._IType _7286___mcc_h233 = _source254.dtor_Nullable_a0;
          DAST._IType _source265 = _6970___mcc_h1;
          if (_source265.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7287___mcc_h237 = _source265.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7288___mcc_h238 = _source265.dtor_typeArgs;
            DAST._IResolvedType _7289___mcc_h239 = _source265.dtor_resolved;
            DAST._IResolvedType _source266 = _7289___mcc_h239;
            if (_source266.is_Datatype) {
              DAST._IDatatypeType _7290___mcc_h246 = _source266.dtor_datatypeType;
              {
                RAST._IExpr _7291_recursiveGen;
                DCOMPUTF16._IOwnership _7292_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7293_recIdents;
                RAST._IExpr _out3067;
                DCOMPUTF16._IOwnership _out3068;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3069;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3067, out _out3068, out _out3069);
                _7291_recursiveGen = _out3067;
                _7292_recOwned = _out3068;
                _7293_recIdents = _out3069;
                r = _7291_recursiveGen;
                if (object.Equals(_7292_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3070;
                DCOMPUTF16._IOwnership _out3071;
                DCOMPUTF16.COMP.FromOwnership(r, _7292_recOwned, expectedOwnership, out _out3070, out _out3071);
                r = _out3070;
                resultingOwnership = _out3071;
                readIdents = _7293_recIdents;
              }
            } else if (_source266.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7294___mcc_h249 = _source266.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7295___mcc_h250 = _source266.dtor_attributes;
              {
                RAST._IExpr _7296_recursiveGen;
                DCOMPUTF16._IOwnership _7297_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7298_recIdents;
                RAST._IExpr _out3072;
                DCOMPUTF16._IOwnership _out3073;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3074;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3072, out _out3073, out _out3074);
                _7296_recursiveGen = _out3072;
                _7297_recOwned = _out3073;
                _7298_recIdents = _out3074;
                r = _7296_recursiveGen;
                if (object.Equals(_7297_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3075;
                DCOMPUTF16._IOwnership _out3076;
                DCOMPUTF16.COMP.FromOwnership(r, _7297_recOwned, expectedOwnership, out _out3075, out _out3076);
                r = _out3075;
                resultingOwnership = _out3076;
                readIdents = _7298_recIdents;
              }
            } else {
              DAST._IType _7299___mcc_h255 = _source266.dtor_baseType;
              DAST._INewtypeRange _7300___mcc_h256 = _source266.dtor_range;
              bool _7301___mcc_h257 = _source266.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7302___mcc_h258 = _source266.dtor_attributes;
              {
                RAST._IExpr _7303_recursiveGen;
                DCOMPUTF16._IOwnership _7304_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7305_recIdents;
                RAST._IExpr _out3077;
                DCOMPUTF16._IOwnership _out3078;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3079;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3077, out _out3078, out _out3079);
                _7303_recursiveGen = _out3077;
                _7304_recOwned = _out3078;
                _7305_recIdents = _out3079;
                r = _7303_recursiveGen;
                if (object.Equals(_7304_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                RAST._IExpr _out3080;
                DCOMPUTF16._IOwnership _out3081;
                DCOMPUTF16.COMP.FromOwnership(r, _7304_recOwned, expectedOwnership, out _out3080, out _out3081);
                r = _out3080;
                resultingOwnership = _out3081;
                readIdents = _7305_recIdents;
              }
            }
          } else if (_source265.is_Nullable) {
            DAST._IType _7306___mcc_h267 = _source265.dtor_Nullable_a0;
            {
              RAST._IExpr _7307_recursiveGen;
              DCOMPUTF16._IOwnership _7308_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7309_recIdents;
              RAST._IExpr _out3082;
              DCOMPUTF16._IOwnership _out3083;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3084;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3082, out _out3083, out _out3084);
              _7307_recursiveGen = _out3082;
              _7308_recOwned = _out3083;
              _7309_recIdents = _out3084;
              r = _7307_recursiveGen;
              if (object.Equals(_7308_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3085;
              DCOMPUTF16._IOwnership _out3086;
              DCOMPUTF16.COMP.FromOwnership(r, _7308_recOwned, expectedOwnership, out _out3085, out _out3086);
              r = _out3085;
              resultingOwnership = _out3086;
              readIdents = _7309_recIdents;
            }
          } else if (_source265.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7310___mcc_h270 = _source265.dtor_Tuple_a0;
            {
              RAST._IExpr _7311_recursiveGen;
              DCOMPUTF16._IOwnership _7312_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7313_recIdents;
              RAST._IExpr _out3087;
              DCOMPUTF16._IOwnership _out3088;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3089;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3087, out _out3088, out _out3089);
              _7311_recursiveGen = _out3087;
              _7312_recOwned = _out3088;
              _7313_recIdents = _out3089;
              r = _7311_recursiveGen;
              if (object.Equals(_7312_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3090;
              DCOMPUTF16._IOwnership _out3091;
              DCOMPUTF16.COMP.FromOwnership(r, _7312_recOwned, expectedOwnership, out _out3090, out _out3091);
              r = _out3090;
              resultingOwnership = _out3091;
              readIdents = _7313_recIdents;
            }
          } else if (_source265.is_Array) {
            DAST._IType _7314___mcc_h273 = _source265.dtor_element;
            BigInteger _7315___mcc_h274 = _source265.dtor_dims;
            {
              RAST._IExpr _7316_recursiveGen;
              DCOMPUTF16._IOwnership _7317_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7318_recIdents;
              RAST._IExpr _out3092;
              DCOMPUTF16._IOwnership _out3093;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3094;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3092, out _out3093, out _out3094);
              _7316_recursiveGen = _out3092;
              _7317_recOwned = _out3093;
              _7318_recIdents = _out3094;
              r = _7316_recursiveGen;
              if (object.Equals(_7317_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3095;
              DCOMPUTF16._IOwnership _out3096;
              DCOMPUTF16.COMP.FromOwnership(r, _7317_recOwned, expectedOwnership, out _out3095, out _out3096);
              r = _out3095;
              resultingOwnership = _out3096;
              readIdents = _7318_recIdents;
            }
          } else if (_source265.is_Seq) {
            DAST._IType _7319___mcc_h279 = _source265.dtor_element;
            {
              RAST._IExpr _7320_recursiveGen;
              DCOMPUTF16._IOwnership _7321_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7322_recIdents;
              RAST._IExpr _out3097;
              DCOMPUTF16._IOwnership _out3098;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3099;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3097, out _out3098, out _out3099);
              _7320_recursiveGen = _out3097;
              _7321_recOwned = _out3098;
              _7322_recIdents = _out3099;
              r = _7320_recursiveGen;
              if (object.Equals(_7321_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3100;
              DCOMPUTF16._IOwnership _out3101;
              DCOMPUTF16.COMP.FromOwnership(r, _7321_recOwned, expectedOwnership, out _out3100, out _out3101);
              r = _out3100;
              resultingOwnership = _out3101;
              readIdents = _7322_recIdents;
            }
          } else if (_source265.is_Set) {
            DAST._IType _7323___mcc_h282 = _source265.dtor_element;
            {
              RAST._IExpr _7324_recursiveGen;
              DCOMPUTF16._IOwnership _7325_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7326_recIdents;
              RAST._IExpr _out3102;
              DCOMPUTF16._IOwnership _out3103;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3104;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3102, out _out3103, out _out3104);
              _7324_recursiveGen = _out3102;
              _7325_recOwned = _out3103;
              _7326_recIdents = _out3104;
              r = _7324_recursiveGen;
              if (object.Equals(_7325_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3105;
              DCOMPUTF16._IOwnership _out3106;
              DCOMPUTF16.COMP.FromOwnership(r, _7325_recOwned, expectedOwnership, out _out3105, out _out3106);
              r = _out3105;
              resultingOwnership = _out3106;
              readIdents = _7326_recIdents;
            }
          } else if (_source265.is_Multiset) {
            DAST._IType _7327___mcc_h285 = _source265.dtor_element;
            {
              RAST._IExpr _7328_recursiveGen;
              DCOMPUTF16._IOwnership _7329_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7330_recIdents;
              RAST._IExpr _out3107;
              DCOMPUTF16._IOwnership _out3108;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3109;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3107, out _out3108, out _out3109);
              _7328_recursiveGen = _out3107;
              _7329_recOwned = _out3108;
              _7330_recIdents = _out3109;
              r = _7328_recursiveGen;
              if (object.Equals(_7329_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3110;
              DCOMPUTF16._IOwnership _out3111;
              DCOMPUTF16.COMP.FromOwnership(r, _7329_recOwned, expectedOwnership, out _out3110, out _out3111);
              r = _out3110;
              resultingOwnership = _out3111;
              readIdents = _7330_recIdents;
            }
          } else if (_source265.is_Map) {
            DAST._IType _7331___mcc_h288 = _source265.dtor_key;
            DAST._IType _7332___mcc_h289 = _source265.dtor_value;
            {
              RAST._IExpr _7333_recursiveGen;
              DCOMPUTF16._IOwnership _7334_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7335_recIdents;
              RAST._IExpr _out3112;
              DCOMPUTF16._IOwnership _out3113;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3114;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3112, out _out3113, out _out3114);
              _7333_recursiveGen = _out3112;
              _7334_recOwned = _out3113;
              _7335_recIdents = _out3114;
              r = _7333_recursiveGen;
              if (object.Equals(_7334_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3115;
              DCOMPUTF16._IOwnership _out3116;
              DCOMPUTF16.COMP.FromOwnership(r, _7334_recOwned, expectedOwnership, out _out3115, out _out3116);
              r = _out3115;
              resultingOwnership = _out3116;
              readIdents = _7335_recIdents;
            }
          } else if (_source265.is_SetBuilder) {
            DAST._IType _7336___mcc_h294 = _source265.dtor_element;
            {
              RAST._IExpr _7337_recursiveGen;
              DCOMPUTF16._IOwnership _7338_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7339_recIdents;
              RAST._IExpr _out3117;
              DCOMPUTF16._IOwnership _out3118;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3119;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3117, out _out3118, out _out3119);
              _7337_recursiveGen = _out3117;
              _7338_recOwned = _out3118;
              _7339_recIdents = _out3119;
              r = _7337_recursiveGen;
              if (object.Equals(_7338_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3120;
              DCOMPUTF16._IOwnership _out3121;
              DCOMPUTF16.COMP.FromOwnership(r, _7338_recOwned, expectedOwnership, out _out3120, out _out3121);
              r = _out3120;
              resultingOwnership = _out3121;
              readIdents = _7339_recIdents;
            }
          } else if (_source265.is_MapBuilder) {
            DAST._IType _7340___mcc_h297 = _source265.dtor_key;
            DAST._IType _7341___mcc_h298 = _source265.dtor_value;
            {
              RAST._IExpr _7342_recursiveGen;
              DCOMPUTF16._IOwnership _7343_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7344_recIdents;
              RAST._IExpr _out3122;
              DCOMPUTF16._IOwnership _out3123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3124;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3122, out _out3123, out _out3124);
              _7342_recursiveGen = _out3122;
              _7343_recOwned = _out3123;
              _7344_recIdents = _out3124;
              r = _7342_recursiveGen;
              if (object.Equals(_7343_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3125;
              DCOMPUTF16._IOwnership _out3126;
              DCOMPUTF16.COMP.FromOwnership(r, _7343_recOwned, expectedOwnership, out _out3125, out _out3126);
              r = _out3125;
              resultingOwnership = _out3126;
              readIdents = _7344_recIdents;
            }
          } else if (_source265.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7345___mcc_h303 = _source265.dtor_args;
            DAST._IType _7346___mcc_h304 = _source265.dtor_result;
            {
              RAST._IExpr _7347_recursiveGen;
              DCOMPUTF16._IOwnership _7348_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7349_recIdents;
              RAST._IExpr _out3127;
              DCOMPUTF16._IOwnership _out3128;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3129;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3127, out _out3128, out _out3129);
              _7347_recursiveGen = _out3127;
              _7348_recOwned = _out3128;
              _7349_recIdents = _out3129;
              r = _7347_recursiveGen;
              if (object.Equals(_7348_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3130;
              DCOMPUTF16._IOwnership _out3131;
              DCOMPUTF16.COMP.FromOwnership(r, _7348_recOwned, expectedOwnership, out _out3130, out _out3131);
              r = _out3130;
              resultingOwnership = _out3131;
              readIdents = _7349_recIdents;
            }
          } else if (_source265.is_Primitive) {
            DAST._IPrimitive _7350___mcc_h309 = _source265.dtor_Primitive_a0;
            {
              RAST._IExpr _7351_recursiveGen;
              DCOMPUTF16._IOwnership _7352_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7353_recIdents;
              RAST._IExpr _out3132;
              DCOMPUTF16._IOwnership _out3133;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3134;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3132, out _out3133, out _out3134);
              _7351_recursiveGen = _out3132;
              _7352_recOwned = _out3133;
              _7353_recIdents = _out3134;
              r = _7351_recursiveGen;
              if (object.Equals(_7352_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3135;
              DCOMPUTF16._IOwnership _out3136;
              DCOMPUTF16.COMP.FromOwnership(r, _7352_recOwned, expectedOwnership, out _out3135, out _out3136);
              r = _out3135;
              resultingOwnership = _out3136;
              readIdents = _7353_recIdents;
            }
          } else if (_source265.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7354___mcc_h312 = _source265.dtor_Passthrough_a0;
            {
              RAST._IExpr _7355_recursiveGen;
              DCOMPUTF16._IOwnership _7356_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7357_recIdents;
              RAST._IExpr _out3137;
              DCOMPUTF16._IOwnership _out3138;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3139;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3137, out _out3138, out _out3139);
              _7355_recursiveGen = _out3137;
              _7356_recOwned = _out3138;
              _7357_recIdents = _out3139;
              r = _7355_recursiveGen;
              if (object.Equals(_7356_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3140;
              DCOMPUTF16._IOwnership _out3141;
              DCOMPUTF16.COMP.FromOwnership(r, _7356_recOwned, expectedOwnership, out _out3140, out _out3141);
              r = _out3140;
              resultingOwnership = _out3141;
              readIdents = _7357_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7358___mcc_h315 = _source265.dtor_TypeArg_a0;
            {
              RAST._IExpr _7359_recursiveGen;
              DCOMPUTF16._IOwnership _7360_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7361_recIdents;
              RAST._IExpr _out3142;
              DCOMPUTF16._IOwnership _out3143;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3144;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3142, out _out3143, out _out3144);
              _7359_recursiveGen = _out3142;
              _7360_recOwned = _out3143;
              _7361_recIdents = _out3144;
              r = _7359_recursiveGen;
              if (object.Equals(_7360_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out3145;
              DCOMPUTF16._IOwnership _out3146;
              DCOMPUTF16.COMP.FromOwnership(r, _7360_recOwned, expectedOwnership, out _out3145, out _out3146);
              r = _out3145;
              resultingOwnership = _out3146;
              readIdents = _7361_recIdents;
            }
          }
        } else if (_source254.is_Tuple) {
          Dafny.ISequence<DAST._IType> _7362___mcc_h318 = _source254.dtor_Tuple_a0;
          DAST._IType _source267 = _6970___mcc_h1;
          if (_source267.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7363___mcc_h322 = _source267.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7364___mcc_h323 = _source267.dtor_typeArgs;
            DAST._IResolvedType _7365___mcc_h324 = _source267.dtor_resolved;
            DAST._IResolvedType _source268 = _7365___mcc_h324;
            if (_source268.is_Datatype) {
              DAST._IDatatypeType _7366___mcc_h328 = _source268.dtor_datatypeType;
              {
                RAST._IExpr _7367_recursiveGen;
                DCOMPUTF16._IOwnership _7368_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7369_recIdents;
                RAST._IExpr _out3147;
                DCOMPUTF16._IOwnership _out3148;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3149;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3147, out _out3148, out _out3149);
                _7367_recursiveGen = _out3147;
                _7368_recOwned = _out3148;
                _7369_recIdents = _out3149;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7367_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3150;
                DCOMPUTF16._IOwnership _out3151;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3150, out _out3151);
                r = _out3150;
                resultingOwnership = _out3151;
                readIdents = _7369_recIdents;
              }
            } else if (_source268.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7370___mcc_h330 = _source268.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7371___mcc_h331 = _source268.dtor_attributes;
              {
                RAST._IExpr _7372_recursiveGen;
                DCOMPUTF16._IOwnership _7373_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7374_recIdents;
                RAST._IExpr _out3152;
                DCOMPUTF16._IOwnership _out3153;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3154;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3152, out _out3153, out _out3154);
                _7372_recursiveGen = _out3152;
                _7373_recOwned = _out3153;
                _7374_recIdents = _out3154;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7372_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3155;
                DCOMPUTF16._IOwnership _out3156;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3155, out _out3156);
                r = _out3155;
                resultingOwnership = _out3156;
                readIdents = _7374_recIdents;
              }
            } else {
              DAST._IType _7375___mcc_h334 = _source268.dtor_baseType;
              DAST._INewtypeRange _7376___mcc_h335 = _source268.dtor_range;
              bool _7377___mcc_h336 = _source268.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7378___mcc_h337 = _source268.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7379_attributes = _7378___mcc_h337;
              bool _7380_erase = _7377___mcc_h336;
              DAST._INewtypeRange _7381_range = _7376___mcc_h335;
              DAST._IType _7382_b = _7375___mcc_h334;
              {
                if (object.Equals(_6964_fromTpe, _7382_b)) {
                  RAST._IExpr _7383_recursiveGen;
                  DCOMPUTF16._IOwnership _7384_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7385_recIdents;
                  RAST._IExpr _out3157;
                  DCOMPUTF16._IOwnership _out3158;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3159;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3157, out _out3158, out _out3159);
                  _7383_recursiveGen = _out3157;
                  _7384_recOwned = _out3158;
                  _7385_recIdents = _out3159;
                  Std.Wrappers._IOption<RAST._IType> _7386_potentialRhsType;
                  _7386_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7382_b, _7381_range);
                  Std.Wrappers._IOption<RAST._IType> _source269 = _7386_potentialRhsType;
                  if (_source269.is_None) {
                    if (_7380_erase) {
                      r = _7383_recursiveGen;
                    } else {
                      RAST._IType _7387_rhsType;
                      RAST._IType _out3160;
                      _out3160 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _7387_rhsType = _out3160;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7387_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7383_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3161;
                    DCOMPUTF16._IOwnership _out3162;
                    DCOMPUTF16.COMP.FromOwnership(r, _7384_recOwned, expectedOwnership, out _out3161, out _out3162);
                    r = _out3161;
                    resultingOwnership = _out3162;
                  } else {
                    RAST._IType _7388___mcc_h1249 = _source269.dtor_value;
                    RAST._IType _7389_v = _7388___mcc_h1249;
                    r = RAST.Expr.create_ConversionNum(_7389_v, _7383_recursiveGen);
                    RAST._IExpr _out3163;
                    DCOMPUTF16._IOwnership _out3164;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3163, out _out3164);
                    r = _out3163;
                    resultingOwnership = _out3164;
                  }
                  readIdents = _7385_recIdents;
                } else {
                  RAST._IExpr _out3165;
                  DCOMPUTF16._IOwnership _out3166;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3167;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7382_b), _7382_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3165, out _out3166, out _out3167);
                  r = _out3165;
                  resultingOwnership = _out3166;
                  readIdents = _out3167;
                }
              }
            }
          } else if (_source267.is_Nullable) {
            DAST._IType _7390___mcc_h342 = _source267.dtor_Nullable_a0;
            {
              RAST._IExpr _7391_recursiveGen;
              DCOMPUTF16._IOwnership _7392_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7393_recIdents;
              RAST._IExpr _out3168;
              DCOMPUTF16._IOwnership _out3169;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3170;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3168, out _out3169, out _out3170);
              _7391_recursiveGen = _out3168;
              _7392_recOwned = _out3169;
              _7393_recIdents = _out3170;
              r = _7391_recursiveGen;
              if (object.Equals(_7392_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3171;
              DCOMPUTF16._IOwnership _out3172;
              DCOMPUTF16.COMP.FromOwnership(r, _7392_recOwned, expectedOwnership, out _out3171, out _out3172);
              r = _out3171;
              resultingOwnership = _out3172;
              readIdents = _7393_recIdents;
            }
          } else if (_source267.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7394___mcc_h344 = _source267.dtor_Tuple_a0;
            {
              RAST._IExpr _7395_recursiveGen;
              DCOMPUTF16._IOwnership _7396_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7397_recIdents;
              RAST._IExpr _out3173;
              DCOMPUTF16._IOwnership _out3174;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3175;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3173, out _out3174, out _out3175);
              _7395_recursiveGen = _out3173;
              _7396_recOwned = _out3174;
              _7397_recIdents = _out3175;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7395_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3176;
              DCOMPUTF16._IOwnership _out3177;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3176, out _out3177);
              r = _out3176;
              resultingOwnership = _out3177;
              readIdents = _7397_recIdents;
            }
          } else if (_source267.is_Array) {
            DAST._IType _7398___mcc_h346 = _source267.dtor_element;
            BigInteger _7399___mcc_h347 = _source267.dtor_dims;
            {
              RAST._IExpr _7400_recursiveGen;
              DCOMPUTF16._IOwnership _7401_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7402_recIdents;
              RAST._IExpr _out3178;
              DCOMPUTF16._IOwnership _out3179;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3180;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3178, out _out3179, out _out3180);
              _7400_recursiveGen = _out3178;
              _7401_recOwned = _out3179;
              _7402_recIdents = _out3180;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7400_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3181;
              DCOMPUTF16._IOwnership _out3182;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3181, out _out3182);
              r = _out3181;
              resultingOwnership = _out3182;
              readIdents = _7402_recIdents;
            }
          } else if (_source267.is_Seq) {
            DAST._IType _7403___mcc_h350 = _source267.dtor_element;
            {
              RAST._IExpr _7404_recursiveGen;
              DCOMPUTF16._IOwnership _7405_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7406_recIdents;
              RAST._IExpr _out3183;
              DCOMPUTF16._IOwnership _out3184;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3185;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3183, out _out3184, out _out3185);
              _7404_recursiveGen = _out3183;
              _7405_recOwned = _out3184;
              _7406_recIdents = _out3185;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7404_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3186;
              DCOMPUTF16._IOwnership _out3187;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3186, out _out3187);
              r = _out3186;
              resultingOwnership = _out3187;
              readIdents = _7406_recIdents;
            }
          } else if (_source267.is_Set) {
            DAST._IType _7407___mcc_h352 = _source267.dtor_element;
            {
              RAST._IExpr _7408_recursiveGen;
              DCOMPUTF16._IOwnership _7409_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7410_recIdents;
              RAST._IExpr _out3188;
              DCOMPUTF16._IOwnership _out3189;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3190;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3188, out _out3189, out _out3190);
              _7408_recursiveGen = _out3188;
              _7409_recOwned = _out3189;
              _7410_recIdents = _out3190;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7408_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3191;
              DCOMPUTF16._IOwnership _out3192;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3191, out _out3192);
              r = _out3191;
              resultingOwnership = _out3192;
              readIdents = _7410_recIdents;
            }
          } else if (_source267.is_Multiset) {
            DAST._IType _7411___mcc_h354 = _source267.dtor_element;
            {
              RAST._IExpr _7412_recursiveGen;
              DCOMPUTF16._IOwnership _7413_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7414_recIdents;
              RAST._IExpr _out3193;
              DCOMPUTF16._IOwnership _out3194;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3195;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3193, out _out3194, out _out3195);
              _7412_recursiveGen = _out3193;
              _7413_recOwned = _out3194;
              _7414_recIdents = _out3195;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7412_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3196;
              DCOMPUTF16._IOwnership _out3197;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3196, out _out3197);
              r = _out3196;
              resultingOwnership = _out3197;
              readIdents = _7414_recIdents;
            }
          } else if (_source267.is_Map) {
            DAST._IType _7415___mcc_h356 = _source267.dtor_key;
            DAST._IType _7416___mcc_h357 = _source267.dtor_value;
            {
              RAST._IExpr _7417_recursiveGen;
              DCOMPUTF16._IOwnership _7418_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7419_recIdents;
              RAST._IExpr _out3198;
              DCOMPUTF16._IOwnership _out3199;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3200;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3198, out _out3199, out _out3200);
              _7417_recursiveGen = _out3198;
              _7418_recOwned = _out3199;
              _7419_recIdents = _out3200;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7417_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3201;
              DCOMPUTF16._IOwnership _out3202;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3201, out _out3202);
              r = _out3201;
              resultingOwnership = _out3202;
              readIdents = _7419_recIdents;
            }
          } else if (_source267.is_SetBuilder) {
            DAST._IType _7420___mcc_h360 = _source267.dtor_element;
            {
              RAST._IExpr _7421_recursiveGen;
              DCOMPUTF16._IOwnership _7422_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7423_recIdents;
              RAST._IExpr _out3203;
              DCOMPUTF16._IOwnership _out3204;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3205;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3203, out _out3204, out _out3205);
              _7421_recursiveGen = _out3203;
              _7422_recOwned = _out3204;
              _7423_recIdents = _out3205;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7421_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3206;
              DCOMPUTF16._IOwnership _out3207;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3206, out _out3207);
              r = _out3206;
              resultingOwnership = _out3207;
              readIdents = _7423_recIdents;
            }
          } else if (_source267.is_MapBuilder) {
            DAST._IType _7424___mcc_h362 = _source267.dtor_key;
            DAST._IType _7425___mcc_h363 = _source267.dtor_value;
            {
              RAST._IExpr _7426_recursiveGen;
              DCOMPUTF16._IOwnership _7427_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7428_recIdents;
              RAST._IExpr _out3208;
              DCOMPUTF16._IOwnership _out3209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3210;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3208, out _out3209, out _out3210);
              _7426_recursiveGen = _out3208;
              _7427_recOwned = _out3209;
              _7428_recIdents = _out3210;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7426_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3211;
              DCOMPUTF16._IOwnership _out3212;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3211, out _out3212);
              r = _out3211;
              resultingOwnership = _out3212;
              readIdents = _7428_recIdents;
            }
          } else if (_source267.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7429___mcc_h366 = _source267.dtor_args;
            DAST._IType _7430___mcc_h367 = _source267.dtor_result;
            {
              RAST._IExpr _7431_recursiveGen;
              DCOMPUTF16._IOwnership _7432_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7433_recIdents;
              RAST._IExpr _out3213;
              DCOMPUTF16._IOwnership _out3214;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3215;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3213, out _out3214, out _out3215);
              _7431_recursiveGen = _out3213;
              _7432_recOwned = _out3214;
              _7433_recIdents = _out3215;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7431_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3216;
              DCOMPUTF16._IOwnership _out3217;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3216, out _out3217);
              r = _out3216;
              resultingOwnership = _out3217;
              readIdents = _7433_recIdents;
            }
          } else if (_source267.is_Primitive) {
            DAST._IPrimitive _7434___mcc_h370 = _source267.dtor_Primitive_a0;
            {
              RAST._IExpr _7435_recursiveGen;
              DCOMPUTF16._IOwnership _7436_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7437_recIdents;
              RAST._IExpr _out3218;
              DCOMPUTF16._IOwnership _out3219;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3220;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3218, out _out3219, out _out3220);
              _7435_recursiveGen = _out3218;
              _7436_recOwned = _out3219;
              _7437_recIdents = _out3220;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7435_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3221;
              DCOMPUTF16._IOwnership _out3222;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3221, out _out3222);
              r = _out3221;
              resultingOwnership = _out3222;
              readIdents = _7437_recIdents;
            }
          } else if (_source267.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7438___mcc_h372 = _source267.dtor_Passthrough_a0;
            {
              RAST._IExpr _7439_recursiveGen;
              DCOMPUTF16._IOwnership _7440_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7441_recIdents;
              RAST._IExpr _out3223;
              DCOMPUTF16._IOwnership _out3224;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3225;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3223, out _out3224, out _out3225);
              _7439_recursiveGen = _out3223;
              _7440_recOwned = _out3224;
              _7441_recIdents = _out3225;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7439_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3226;
              DCOMPUTF16._IOwnership _out3227;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3226, out _out3227);
              r = _out3226;
              resultingOwnership = _out3227;
              readIdents = _7441_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7442___mcc_h374 = _source267.dtor_TypeArg_a0;
            {
              RAST._IExpr _7443_recursiveGen;
              DCOMPUTF16._IOwnership _7444_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7445_recIdents;
              RAST._IExpr _out3228;
              DCOMPUTF16._IOwnership _out3229;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3230;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3228, out _out3229, out _out3230);
              _7443_recursiveGen = _out3228;
              _7444_recOwned = _out3229;
              _7445_recIdents = _out3230;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7443_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3231;
              DCOMPUTF16._IOwnership _out3232;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3231, out _out3232);
              r = _out3231;
              resultingOwnership = _out3232;
              readIdents = _7445_recIdents;
            }
          }
        } else if (_source254.is_Array) {
          DAST._IType _7446___mcc_h376 = _source254.dtor_element;
          BigInteger _7447___mcc_h377 = _source254.dtor_dims;
          DAST._IType _source270 = _6970___mcc_h1;
          if (_source270.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7448___mcc_h384 = _source270.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7449___mcc_h385 = _source270.dtor_typeArgs;
            DAST._IResolvedType _7450___mcc_h386 = _source270.dtor_resolved;
            DAST._IResolvedType _source271 = _7450___mcc_h386;
            if (_source271.is_Datatype) {
              DAST._IDatatypeType _7451___mcc_h390 = _source271.dtor_datatypeType;
              {
                RAST._IExpr _7452_recursiveGen;
                DCOMPUTF16._IOwnership _7453_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7454_recIdents;
                RAST._IExpr _out3233;
                DCOMPUTF16._IOwnership _out3234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3235;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3233, out _out3234, out _out3235);
                _7452_recursiveGen = _out3233;
                _7453_recOwned = _out3234;
                _7454_recIdents = _out3235;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7452_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3236;
                DCOMPUTF16._IOwnership _out3237;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3236, out _out3237);
                r = _out3236;
                resultingOwnership = _out3237;
                readIdents = _7454_recIdents;
              }
            } else if (_source271.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7455___mcc_h392 = _source271.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7456___mcc_h393 = _source271.dtor_attributes;
              {
                RAST._IExpr _7457_recursiveGen;
                DCOMPUTF16._IOwnership _7458_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7459_recIdents;
                RAST._IExpr _out3238;
                DCOMPUTF16._IOwnership _out3239;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3240;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3238, out _out3239, out _out3240);
                _7457_recursiveGen = _out3238;
                _7458_recOwned = _out3239;
                _7459_recIdents = _out3240;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7457_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3241;
                DCOMPUTF16._IOwnership _out3242;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3241, out _out3242);
                r = _out3241;
                resultingOwnership = _out3242;
                readIdents = _7459_recIdents;
              }
            } else {
              DAST._IType _7460___mcc_h396 = _source271.dtor_baseType;
              DAST._INewtypeRange _7461___mcc_h397 = _source271.dtor_range;
              bool _7462___mcc_h398 = _source271.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7463___mcc_h399 = _source271.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7464_attributes = _7463___mcc_h399;
              bool _7465_erase = _7462___mcc_h398;
              DAST._INewtypeRange _7466_range = _7461___mcc_h397;
              DAST._IType _7467_b = _7460___mcc_h396;
              {
                if (object.Equals(_6964_fromTpe, _7467_b)) {
                  RAST._IExpr _7468_recursiveGen;
                  DCOMPUTF16._IOwnership _7469_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7470_recIdents;
                  RAST._IExpr _out3243;
                  DCOMPUTF16._IOwnership _out3244;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3245;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3243, out _out3244, out _out3245);
                  _7468_recursiveGen = _out3243;
                  _7469_recOwned = _out3244;
                  _7470_recIdents = _out3245;
                  Std.Wrappers._IOption<RAST._IType> _7471_potentialRhsType;
                  _7471_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7467_b, _7466_range);
                  Std.Wrappers._IOption<RAST._IType> _source272 = _7471_potentialRhsType;
                  if (_source272.is_None) {
                    if (_7465_erase) {
                      r = _7468_recursiveGen;
                    } else {
                      RAST._IType _7472_rhsType;
                      RAST._IType _out3246;
                      _out3246 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _7472_rhsType = _out3246;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7472_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7468_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3247;
                    DCOMPUTF16._IOwnership _out3248;
                    DCOMPUTF16.COMP.FromOwnership(r, _7469_recOwned, expectedOwnership, out _out3247, out _out3248);
                    r = _out3247;
                    resultingOwnership = _out3248;
                  } else {
                    RAST._IType _7473___mcc_h1250 = _source272.dtor_value;
                    RAST._IType _7474_v = _7473___mcc_h1250;
                    r = RAST.Expr.create_ConversionNum(_7474_v, _7468_recursiveGen);
                    RAST._IExpr _out3249;
                    DCOMPUTF16._IOwnership _out3250;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3249, out _out3250);
                    r = _out3249;
                    resultingOwnership = _out3250;
                  }
                  readIdents = _7470_recIdents;
                } else {
                  RAST._IExpr _out3251;
                  DCOMPUTF16._IOwnership _out3252;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3253;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7467_b), _7467_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3251, out _out3252, out _out3253);
                  r = _out3251;
                  resultingOwnership = _out3252;
                  readIdents = _out3253;
                }
              }
            }
          } else if (_source270.is_Nullable) {
            DAST._IType _7475___mcc_h404 = _source270.dtor_Nullable_a0;
            {
              RAST._IExpr _7476_recursiveGen;
              DCOMPUTF16._IOwnership _7477_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7478_recIdents;
              RAST._IExpr _out3254;
              DCOMPUTF16._IOwnership _out3255;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3256;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3254, out _out3255, out _out3256);
              _7476_recursiveGen = _out3254;
              _7477_recOwned = _out3255;
              _7478_recIdents = _out3256;
              r = _7476_recursiveGen;
              if (object.Equals(_7477_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3257;
              DCOMPUTF16._IOwnership _out3258;
              DCOMPUTF16.COMP.FromOwnership(r, _7477_recOwned, expectedOwnership, out _out3257, out _out3258);
              r = _out3257;
              resultingOwnership = _out3258;
              readIdents = _7478_recIdents;
            }
          } else if (_source270.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7479___mcc_h406 = _source270.dtor_Tuple_a0;
            {
              RAST._IExpr _7480_recursiveGen;
              DCOMPUTF16._IOwnership _7481_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7482_recIdents;
              RAST._IExpr _out3259;
              DCOMPUTF16._IOwnership _out3260;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3261;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3259, out _out3260, out _out3261);
              _7480_recursiveGen = _out3259;
              _7481_recOwned = _out3260;
              _7482_recIdents = _out3261;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7480_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3262;
              DCOMPUTF16._IOwnership _out3263;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3262, out _out3263);
              r = _out3262;
              resultingOwnership = _out3263;
              readIdents = _7482_recIdents;
            }
          } else if (_source270.is_Array) {
            DAST._IType _7483___mcc_h408 = _source270.dtor_element;
            BigInteger _7484___mcc_h409 = _source270.dtor_dims;
            {
              RAST._IExpr _7485_recursiveGen;
              DCOMPUTF16._IOwnership _7486_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7487_recIdents;
              RAST._IExpr _out3264;
              DCOMPUTF16._IOwnership _out3265;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3266;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3264, out _out3265, out _out3266);
              _7485_recursiveGen = _out3264;
              _7486_recOwned = _out3265;
              _7487_recIdents = _out3266;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7485_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3267;
              DCOMPUTF16._IOwnership _out3268;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3267, out _out3268);
              r = _out3267;
              resultingOwnership = _out3268;
              readIdents = _7487_recIdents;
            }
          } else if (_source270.is_Seq) {
            DAST._IType _7488___mcc_h412 = _source270.dtor_element;
            {
              RAST._IExpr _7489_recursiveGen;
              DCOMPUTF16._IOwnership _7490_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7491_recIdents;
              RAST._IExpr _out3269;
              DCOMPUTF16._IOwnership _out3270;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3271;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3269, out _out3270, out _out3271);
              _7489_recursiveGen = _out3269;
              _7490_recOwned = _out3270;
              _7491_recIdents = _out3271;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7489_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3272;
              DCOMPUTF16._IOwnership _out3273;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3272, out _out3273);
              r = _out3272;
              resultingOwnership = _out3273;
              readIdents = _7491_recIdents;
            }
          } else if (_source270.is_Set) {
            DAST._IType _7492___mcc_h414 = _source270.dtor_element;
            {
              RAST._IExpr _7493_recursiveGen;
              DCOMPUTF16._IOwnership _7494_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7495_recIdents;
              RAST._IExpr _out3274;
              DCOMPUTF16._IOwnership _out3275;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3276;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3274, out _out3275, out _out3276);
              _7493_recursiveGen = _out3274;
              _7494_recOwned = _out3275;
              _7495_recIdents = _out3276;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7493_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3277;
              DCOMPUTF16._IOwnership _out3278;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3277, out _out3278);
              r = _out3277;
              resultingOwnership = _out3278;
              readIdents = _7495_recIdents;
            }
          } else if (_source270.is_Multiset) {
            DAST._IType _7496___mcc_h416 = _source270.dtor_element;
            {
              RAST._IExpr _7497_recursiveGen;
              DCOMPUTF16._IOwnership _7498_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7499_recIdents;
              RAST._IExpr _out3279;
              DCOMPUTF16._IOwnership _out3280;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3281;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3279, out _out3280, out _out3281);
              _7497_recursiveGen = _out3279;
              _7498_recOwned = _out3280;
              _7499_recIdents = _out3281;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7497_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3282;
              DCOMPUTF16._IOwnership _out3283;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3282, out _out3283);
              r = _out3282;
              resultingOwnership = _out3283;
              readIdents = _7499_recIdents;
            }
          } else if (_source270.is_Map) {
            DAST._IType _7500___mcc_h418 = _source270.dtor_key;
            DAST._IType _7501___mcc_h419 = _source270.dtor_value;
            {
              RAST._IExpr _7502_recursiveGen;
              DCOMPUTF16._IOwnership _7503_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7504_recIdents;
              RAST._IExpr _out3284;
              DCOMPUTF16._IOwnership _out3285;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3286;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3284, out _out3285, out _out3286);
              _7502_recursiveGen = _out3284;
              _7503_recOwned = _out3285;
              _7504_recIdents = _out3286;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7502_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3287;
              DCOMPUTF16._IOwnership _out3288;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3287, out _out3288);
              r = _out3287;
              resultingOwnership = _out3288;
              readIdents = _7504_recIdents;
            }
          } else if (_source270.is_SetBuilder) {
            DAST._IType _7505___mcc_h422 = _source270.dtor_element;
            {
              RAST._IExpr _7506_recursiveGen;
              DCOMPUTF16._IOwnership _7507_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7508_recIdents;
              RAST._IExpr _out3289;
              DCOMPUTF16._IOwnership _out3290;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3291;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3289, out _out3290, out _out3291);
              _7506_recursiveGen = _out3289;
              _7507_recOwned = _out3290;
              _7508_recIdents = _out3291;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7506_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3292;
              DCOMPUTF16._IOwnership _out3293;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3292, out _out3293);
              r = _out3292;
              resultingOwnership = _out3293;
              readIdents = _7508_recIdents;
            }
          } else if (_source270.is_MapBuilder) {
            DAST._IType _7509___mcc_h424 = _source270.dtor_key;
            DAST._IType _7510___mcc_h425 = _source270.dtor_value;
            {
              RAST._IExpr _7511_recursiveGen;
              DCOMPUTF16._IOwnership _7512_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7513_recIdents;
              RAST._IExpr _out3294;
              DCOMPUTF16._IOwnership _out3295;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3296;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3294, out _out3295, out _out3296);
              _7511_recursiveGen = _out3294;
              _7512_recOwned = _out3295;
              _7513_recIdents = _out3296;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7511_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3297;
              DCOMPUTF16._IOwnership _out3298;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3297, out _out3298);
              r = _out3297;
              resultingOwnership = _out3298;
              readIdents = _7513_recIdents;
            }
          } else if (_source270.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7514___mcc_h428 = _source270.dtor_args;
            DAST._IType _7515___mcc_h429 = _source270.dtor_result;
            {
              RAST._IExpr _7516_recursiveGen;
              DCOMPUTF16._IOwnership _7517_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7518_recIdents;
              RAST._IExpr _out3299;
              DCOMPUTF16._IOwnership _out3300;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3301;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3299, out _out3300, out _out3301);
              _7516_recursiveGen = _out3299;
              _7517_recOwned = _out3300;
              _7518_recIdents = _out3301;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7516_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3302;
              DCOMPUTF16._IOwnership _out3303;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3302, out _out3303);
              r = _out3302;
              resultingOwnership = _out3303;
              readIdents = _7518_recIdents;
            }
          } else if (_source270.is_Primitive) {
            DAST._IPrimitive _7519___mcc_h432 = _source270.dtor_Primitive_a0;
            {
              RAST._IExpr _7520_recursiveGen;
              DCOMPUTF16._IOwnership _7521_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7522_recIdents;
              RAST._IExpr _out3304;
              DCOMPUTF16._IOwnership _out3305;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3306;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3304, out _out3305, out _out3306);
              _7520_recursiveGen = _out3304;
              _7521_recOwned = _out3305;
              _7522_recIdents = _out3306;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7520_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3307;
              DCOMPUTF16._IOwnership _out3308;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3307, out _out3308);
              r = _out3307;
              resultingOwnership = _out3308;
              readIdents = _7522_recIdents;
            }
          } else if (_source270.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7523___mcc_h434 = _source270.dtor_Passthrough_a0;
            {
              RAST._IExpr _7524_recursiveGen;
              DCOMPUTF16._IOwnership _7525_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7526_recIdents;
              RAST._IExpr _out3309;
              DCOMPUTF16._IOwnership _out3310;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3311;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3309, out _out3310, out _out3311);
              _7524_recursiveGen = _out3309;
              _7525_recOwned = _out3310;
              _7526_recIdents = _out3311;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7524_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3312;
              DCOMPUTF16._IOwnership _out3313;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3312, out _out3313);
              r = _out3312;
              resultingOwnership = _out3313;
              readIdents = _7526_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7527___mcc_h436 = _source270.dtor_TypeArg_a0;
            {
              RAST._IExpr _7528_recursiveGen;
              DCOMPUTF16._IOwnership _7529_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7530_recIdents;
              RAST._IExpr _out3314;
              DCOMPUTF16._IOwnership _out3315;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3316;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3314, out _out3315, out _out3316);
              _7528_recursiveGen = _out3314;
              _7529_recOwned = _out3315;
              _7530_recIdents = _out3316;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7528_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3317;
              DCOMPUTF16._IOwnership _out3318;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3317, out _out3318);
              r = _out3317;
              resultingOwnership = _out3318;
              readIdents = _7530_recIdents;
            }
          }
        } else if (_source254.is_Seq) {
          DAST._IType _7531___mcc_h438 = _source254.dtor_element;
          DAST._IType _source273 = _6970___mcc_h1;
          if (_source273.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7532___mcc_h442 = _source273.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7533___mcc_h443 = _source273.dtor_typeArgs;
            DAST._IResolvedType _7534___mcc_h444 = _source273.dtor_resolved;
            DAST._IResolvedType _source274 = _7534___mcc_h444;
            if (_source274.is_Datatype) {
              DAST._IDatatypeType _7535___mcc_h448 = _source274.dtor_datatypeType;
              {
                RAST._IExpr _7536_recursiveGen;
                DCOMPUTF16._IOwnership _7537_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7538_recIdents;
                RAST._IExpr _out3319;
                DCOMPUTF16._IOwnership _out3320;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3321;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3319, out _out3320, out _out3321);
                _7536_recursiveGen = _out3319;
                _7537_recOwned = _out3320;
                _7538_recIdents = _out3321;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7536_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3322;
                DCOMPUTF16._IOwnership _out3323;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3322, out _out3323);
                r = _out3322;
                resultingOwnership = _out3323;
                readIdents = _7538_recIdents;
              }
            } else if (_source274.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7539___mcc_h450 = _source274.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7540___mcc_h451 = _source274.dtor_attributes;
              {
                RAST._IExpr _7541_recursiveGen;
                DCOMPUTF16._IOwnership _7542_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7543_recIdents;
                RAST._IExpr _out3324;
                DCOMPUTF16._IOwnership _out3325;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3326;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3324, out _out3325, out _out3326);
                _7541_recursiveGen = _out3324;
                _7542_recOwned = _out3325;
                _7543_recIdents = _out3326;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7541_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3327;
                DCOMPUTF16._IOwnership _out3328;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3327, out _out3328);
                r = _out3327;
                resultingOwnership = _out3328;
                readIdents = _7543_recIdents;
              }
            } else {
              DAST._IType _7544___mcc_h454 = _source274.dtor_baseType;
              DAST._INewtypeRange _7545___mcc_h455 = _source274.dtor_range;
              bool _7546___mcc_h456 = _source274.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7547___mcc_h457 = _source274.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7548_attributes = _7547___mcc_h457;
              bool _7549_erase = _7546___mcc_h456;
              DAST._INewtypeRange _7550_range = _7545___mcc_h455;
              DAST._IType _7551_b = _7544___mcc_h454;
              {
                if (object.Equals(_6964_fromTpe, _7551_b)) {
                  RAST._IExpr _7552_recursiveGen;
                  DCOMPUTF16._IOwnership _7553_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7554_recIdents;
                  RAST._IExpr _out3329;
                  DCOMPUTF16._IOwnership _out3330;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3331;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3329, out _out3330, out _out3331);
                  _7552_recursiveGen = _out3329;
                  _7553_recOwned = _out3330;
                  _7554_recIdents = _out3331;
                  Std.Wrappers._IOption<RAST._IType> _7555_potentialRhsType;
                  _7555_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7551_b, _7550_range);
                  Std.Wrappers._IOption<RAST._IType> _source275 = _7555_potentialRhsType;
                  if (_source275.is_None) {
                    if (_7549_erase) {
                      r = _7552_recursiveGen;
                    } else {
                      RAST._IType _7556_rhsType;
                      RAST._IType _out3332;
                      _out3332 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _7556_rhsType = _out3332;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7556_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7552_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3333;
                    DCOMPUTF16._IOwnership _out3334;
                    DCOMPUTF16.COMP.FromOwnership(r, _7553_recOwned, expectedOwnership, out _out3333, out _out3334);
                    r = _out3333;
                    resultingOwnership = _out3334;
                  } else {
                    RAST._IType _7557___mcc_h1251 = _source275.dtor_value;
                    RAST._IType _7558_v = _7557___mcc_h1251;
                    r = RAST.Expr.create_ConversionNum(_7558_v, _7552_recursiveGen);
                    RAST._IExpr _out3335;
                    DCOMPUTF16._IOwnership _out3336;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3335, out _out3336);
                    r = _out3335;
                    resultingOwnership = _out3336;
                  }
                  readIdents = _7554_recIdents;
                } else {
                  RAST._IExpr _out3337;
                  DCOMPUTF16._IOwnership _out3338;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3339;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7551_b), _7551_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3337, out _out3338, out _out3339);
                  r = _out3337;
                  resultingOwnership = _out3338;
                  readIdents = _out3339;
                }
              }
            }
          } else if (_source273.is_Nullable) {
            DAST._IType _7559___mcc_h462 = _source273.dtor_Nullable_a0;
            {
              RAST._IExpr _7560_recursiveGen;
              DCOMPUTF16._IOwnership _7561_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7562_recIdents;
              RAST._IExpr _out3340;
              DCOMPUTF16._IOwnership _out3341;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3342;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3340, out _out3341, out _out3342);
              _7560_recursiveGen = _out3340;
              _7561_recOwned = _out3341;
              _7562_recIdents = _out3342;
              r = _7560_recursiveGen;
              if (object.Equals(_7561_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3343;
              DCOMPUTF16._IOwnership _out3344;
              DCOMPUTF16.COMP.FromOwnership(r, _7561_recOwned, expectedOwnership, out _out3343, out _out3344);
              r = _out3343;
              resultingOwnership = _out3344;
              readIdents = _7562_recIdents;
            }
          } else if (_source273.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7563___mcc_h464 = _source273.dtor_Tuple_a0;
            {
              RAST._IExpr _7564_recursiveGen;
              DCOMPUTF16._IOwnership _7565_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7566_recIdents;
              RAST._IExpr _out3345;
              DCOMPUTF16._IOwnership _out3346;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3347;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3345, out _out3346, out _out3347);
              _7564_recursiveGen = _out3345;
              _7565_recOwned = _out3346;
              _7566_recIdents = _out3347;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7564_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3348;
              DCOMPUTF16._IOwnership _out3349;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3348, out _out3349);
              r = _out3348;
              resultingOwnership = _out3349;
              readIdents = _7566_recIdents;
            }
          } else if (_source273.is_Array) {
            DAST._IType _7567___mcc_h466 = _source273.dtor_element;
            BigInteger _7568___mcc_h467 = _source273.dtor_dims;
            {
              RAST._IExpr _7569_recursiveGen;
              DCOMPUTF16._IOwnership _7570_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7571_recIdents;
              RAST._IExpr _out3350;
              DCOMPUTF16._IOwnership _out3351;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3352;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3350, out _out3351, out _out3352);
              _7569_recursiveGen = _out3350;
              _7570_recOwned = _out3351;
              _7571_recIdents = _out3352;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7569_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3353;
              DCOMPUTF16._IOwnership _out3354;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3353, out _out3354);
              r = _out3353;
              resultingOwnership = _out3354;
              readIdents = _7571_recIdents;
            }
          } else if (_source273.is_Seq) {
            DAST._IType _7572___mcc_h470 = _source273.dtor_element;
            {
              RAST._IExpr _7573_recursiveGen;
              DCOMPUTF16._IOwnership _7574_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7575_recIdents;
              RAST._IExpr _out3355;
              DCOMPUTF16._IOwnership _out3356;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3357;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3355, out _out3356, out _out3357);
              _7573_recursiveGen = _out3355;
              _7574_recOwned = _out3356;
              _7575_recIdents = _out3357;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7573_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3358;
              DCOMPUTF16._IOwnership _out3359;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3358, out _out3359);
              r = _out3358;
              resultingOwnership = _out3359;
              readIdents = _7575_recIdents;
            }
          } else if (_source273.is_Set) {
            DAST._IType _7576___mcc_h472 = _source273.dtor_element;
            {
              RAST._IExpr _7577_recursiveGen;
              DCOMPUTF16._IOwnership _7578_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7579_recIdents;
              RAST._IExpr _out3360;
              DCOMPUTF16._IOwnership _out3361;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3362;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3360, out _out3361, out _out3362);
              _7577_recursiveGen = _out3360;
              _7578_recOwned = _out3361;
              _7579_recIdents = _out3362;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7577_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3363;
              DCOMPUTF16._IOwnership _out3364;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3363, out _out3364);
              r = _out3363;
              resultingOwnership = _out3364;
              readIdents = _7579_recIdents;
            }
          } else if (_source273.is_Multiset) {
            DAST._IType _7580___mcc_h474 = _source273.dtor_element;
            {
              RAST._IExpr _7581_recursiveGen;
              DCOMPUTF16._IOwnership _7582_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7583_recIdents;
              RAST._IExpr _out3365;
              DCOMPUTF16._IOwnership _out3366;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3367;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3365, out _out3366, out _out3367);
              _7581_recursiveGen = _out3365;
              _7582_recOwned = _out3366;
              _7583_recIdents = _out3367;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7581_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3368;
              DCOMPUTF16._IOwnership _out3369;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3368, out _out3369);
              r = _out3368;
              resultingOwnership = _out3369;
              readIdents = _7583_recIdents;
            }
          } else if (_source273.is_Map) {
            DAST._IType _7584___mcc_h476 = _source273.dtor_key;
            DAST._IType _7585___mcc_h477 = _source273.dtor_value;
            {
              RAST._IExpr _7586_recursiveGen;
              DCOMPUTF16._IOwnership _7587_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7588_recIdents;
              RAST._IExpr _out3370;
              DCOMPUTF16._IOwnership _out3371;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3372;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3370, out _out3371, out _out3372);
              _7586_recursiveGen = _out3370;
              _7587_recOwned = _out3371;
              _7588_recIdents = _out3372;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7586_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3373;
              DCOMPUTF16._IOwnership _out3374;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3373, out _out3374);
              r = _out3373;
              resultingOwnership = _out3374;
              readIdents = _7588_recIdents;
            }
          } else if (_source273.is_SetBuilder) {
            DAST._IType _7589___mcc_h480 = _source273.dtor_element;
            {
              RAST._IExpr _7590_recursiveGen;
              DCOMPUTF16._IOwnership _7591_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7592_recIdents;
              RAST._IExpr _out3375;
              DCOMPUTF16._IOwnership _out3376;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3377;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3375, out _out3376, out _out3377);
              _7590_recursiveGen = _out3375;
              _7591_recOwned = _out3376;
              _7592_recIdents = _out3377;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7590_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3378;
              DCOMPUTF16._IOwnership _out3379;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3378, out _out3379);
              r = _out3378;
              resultingOwnership = _out3379;
              readIdents = _7592_recIdents;
            }
          } else if (_source273.is_MapBuilder) {
            DAST._IType _7593___mcc_h482 = _source273.dtor_key;
            DAST._IType _7594___mcc_h483 = _source273.dtor_value;
            {
              RAST._IExpr _7595_recursiveGen;
              DCOMPUTF16._IOwnership _7596_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7597_recIdents;
              RAST._IExpr _out3380;
              DCOMPUTF16._IOwnership _out3381;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3382;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3380, out _out3381, out _out3382);
              _7595_recursiveGen = _out3380;
              _7596_recOwned = _out3381;
              _7597_recIdents = _out3382;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7595_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3383;
              DCOMPUTF16._IOwnership _out3384;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3383, out _out3384);
              r = _out3383;
              resultingOwnership = _out3384;
              readIdents = _7597_recIdents;
            }
          } else if (_source273.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7598___mcc_h486 = _source273.dtor_args;
            DAST._IType _7599___mcc_h487 = _source273.dtor_result;
            {
              RAST._IExpr _7600_recursiveGen;
              DCOMPUTF16._IOwnership _7601_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7602_recIdents;
              RAST._IExpr _out3385;
              DCOMPUTF16._IOwnership _out3386;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3387;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3385, out _out3386, out _out3387);
              _7600_recursiveGen = _out3385;
              _7601_recOwned = _out3386;
              _7602_recIdents = _out3387;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7600_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3388;
              DCOMPUTF16._IOwnership _out3389;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3388, out _out3389);
              r = _out3388;
              resultingOwnership = _out3389;
              readIdents = _7602_recIdents;
            }
          } else if (_source273.is_Primitive) {
            DAST._IPrimitive _7603___mcc_h490 = _source273.dtor_Primitive_a0;
            {
              RAST._IExpr _7604_recursiveGen;
              DCOMPUTF16._IOwnership _7605_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7606_recIdents;
              RAST._IExpr _out3390;
              DCOMPUTF16._IOwnership _out3391;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3392;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3390, out _out3391, out _out3392);
              _7604_recursiveGen = _out3390;
              _7605_recOwned = _out3391;
              _7606_recIdents = _out3392;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7604_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3393;
              DCOMPUTF16._IOwnership _out3394;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3393, out _out3394);
              r = _out3393;
              resultingOwnership = _out3394;
              readIdents = _7606_recIdents;
            }
          } else if (_source273.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7607___mcc_h492 = _source273.dtor_Passthrough_a0;
            {
              RAST._IExpr _7608_recursiveGen;
              DCOMPUTF16._IOwnership _7609_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7610_recIdents;
              RAST._IExpr _out3395;
              DCOMPUTF16._IOwnership _out3396;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3397;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3395, out _out3396, out _out3397);
              _7608_recursiveGen = _out3395;
              _7609_recOwned = _out3396;
              _7610_recIdents = _out3397;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7608_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3398;
              DCOMPUTF16._IOwnership _out3399;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3398, out _out3399);
              r = _out3398;
              resultingOwnership = _out3399;
              readIdents = _7610_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7611___mcc_h494 = _source273.dtor_TypeArg_a0;
            {
              RAST._IExpr _7612_recursiveGen;
              DCOMPUTF16._IOwnership _7613_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7614_recIdents;
              RAST._IExpr _out3400;
              DCOMPUTF16._IOwnership _out3401;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3402;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3400, out _out3401, out _out3402);
              _7612_recursiveGen = _out3400;
              _7613_recOwned = _out3401;
              _7614_recIdents = _out3402;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7612_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3403;
              DCOMPUTF16._IOwnership _out3404;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3403, out _out3404);
              r = _out3403;
              resultingOwnership = _out3404;
              readIdents = _7614_recIdents;
            }
          }
        } else if (_source254.is_Set) {
          DAST._IType _7615___mcc_h496 = _source254.dtor_element;
          DAST._IType _source276 = _6970___mcc_h1;
          if (_source276.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7616___mcc_h500 = _source276.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7617___mcc_h501 = _source276.dtor_typeArgs;
            DAST._IResolvedType _7618___mcc_h502 = _source276.dtor_resolved;
            DAST._IResolvedType _source277 = _7618___mcc_h502;
            if (_source277.is_Datatype) {
              DAST._IDatatypeType _7619___mcc_h506 = _source277.dtor_datatypeType;
              {
                RAST._IExpr _7620_recursiveGen;
                DCOMPUTF16._IOwnership _7621_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7622_recIdents;
                RAST._IExpr _out3405;
                DCOMPUTF16._IOwnership _out3406;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3407;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3405, out _out3406, out _out3407);
                _7620_recursiveGen = _out3405;
                _7621_recOwned = _out3406;
                _7622_recIdents = _out3407;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7620_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3408;
                DCOMPUTF16._IOwnership _out3409;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3408, out _out3409);
                r = _out3408;
                resultingOwnership = _out3409;
                readIdents = _7622_recIdents;
              }
            } else if (_source277.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7623___mcc_h508 = _source277.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7624___mcc_h509 = _source277.dtor_attributes;
              {
                RAST._IExpr _7625_recursiveGen;
                DCOMPUTF16._IOwnership _7626_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7627_recIdents;
                RAST._IExpr _out3410;
                DCOMPUTF16._IOwnership _out3411;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3412;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3410, out _out3411, out _out3412);
                _7625_recursiveGen = _out3410;
                _7626_recOwned = _out3411;
                _7627_recIdents = _out3412;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7625_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3413;
                DCOMPUTF16._IOwnership _out3414;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3413, out _out3414);
                r = _out3413;
                resultingOwnership = _out3414;
                readIdents = _7627_recIdents;
              }
            } else {
              DAST._IType _7628___mcc_h512 = _source277.dtor_baseType;
              DAST._INewtypeRange _7629___mcc_h513 = _source277.dtor_range;
              bool _7630___mcc_h514 = _source277.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7631___mcc_h515 = _source277.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7632_attributes = _7631___mcc_h515;
              bool _7633_erase = _7630___mcc_h514;
              DAST._INewtypeRange _7634_range = _7629___mcc_h513;
              DAST._IType _7635_b = _7628___mcc_h512;
              {
                if (object.Equals(_6964_fromTpe, _7635_b)) {
                  RAST._IExpr _7636_recursiveGen;
                  DCOMPUTF16._IOwnership _7637_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7638_recIdents;
                  RAST._IExpr _out3415;
                  DCOMPUTF16._IOwnership _out3416;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3417;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3415, out _out3416, out _out3417);
                  _7636_recursiveGen = _out3415;
                  _7637_recOwned = _out3416;
                  _7638_recIdents = _out3417;
                  Std.Wrappers._IOption<RAST._IType> _7639_potentialRhsType;
                  _7639_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7635_b, _7634_range);
                  Std.Wrappers._IOption<RAST._IType> _source278 = _7639_potentialRhsType;
                  if (_source278.is_None) {
                    if (_7633_erase) {
                      r = _7636_recursiveGen;
                    } else {
                      RAST._IType _7640_rhsType;
                      RAST._IType _out3418;
                      _out3418 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _7640_rhsType = _out3418;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7640_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7636_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3419;
                    DCOMPUTF16._IOwnership _out3420;
                    DCOMPUTF16.COMP.FromOwnership(r, _7637_recOwned, expectedOwnership, out _out3419, out _out3420);
                    r = _out3419;
                    resultingOwnership = _out3420;
                  } else {
                    RAST._IType _7641___mcc_h1252 = _source278.dtor_value;
                    RAST._IType _7642_v = _7641___mcc_h1252;
                    r = RAST.Expr.create_ConversionNum(_7642_v, _7636_recursiveGen);
                    RAST._IExpr _out3421;
                    DCOMPUTF16._IOwnership _out3422;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3421, out _out3422);
                    r = _out3421;
                    resultingOwnership = _out3422;
                  }
                  readIdents = _7638_recIdents;
                } else {
                  RAST._IExpr _out3423;
                  DCOMPUTF16._IOwnership _out3424;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3425;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7635_b), _7635_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3423, out _out3424, out _out3425);
                  r = _out3423;
                  resultingOwnership = _out3424;
                  readIdents = _out3425;
                }
              }
            }
          } else if (_source276.is_Nullable) {
            DAST._IType _7643___mcc_h520 = _source276.dtor_Nullable_a0;
            {
              RAST._IExpr _7644_recursiveGen;
              DCOMPUTF16._IOwnership _7645_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7646_recIdents;
              RAST._IExpr _out3426;
              DCOMPUTF16._IOwnership _out3427;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3428;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3426, out _out3427, out _out3428);
              _7644_recursiveGen = _out3426;
              _7645_recOwned = _out3427;
              _7646_recIdents = _out3428;
              r = _7644_recursiveGen;
              if (object.Equals(_7645_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3429;
              DCOMPUTF16._IOwnership _out3430;
              DCOMPUTF16.COMP.FromOwnership(r, _7645_recOwned, expectedOwnership, out _out3429, out _out3430);
              r = _out3429;
              resultingOwnership = _out3430;
              readIdents = _7646_recIdents;
            }
          } else if (_source276.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7647___mcc_h522 = _source276.dtor_Tuple_a0;
            {
              RAST._IExpr _7648_recursiveGen;
              DCOMPUTF16._IOwnership _7649_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7650_recIdents;
              RAST._IExpr _out3431;
              DCOMPUTF16._IOwnership _out3432;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3433;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3431, out _out3432, out _out3433);
              _7648_recursiveGen = _out3431;
              _7649_recOwned = _out3432;
              _7650_recIdents = _out3433;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7648_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3434;
              DCOMPUTF16._IOwnership _out3435;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3434, out _out3435);
              r = _out3434;
              resultingOwnership = _out3435;
              readIdents = _7650_recIdents;
            }
          } else if (_source276.is_Array) {
            DAST._IType _7651___mcc_h524 = _source276.dtor_element;
            BigInteger _7652___mcc_h525 = _source276.dtor_dims;
            {
              RAST._IExpr _7653_recursiveGen;
              DCOMPUTF16._IOwnership _7654_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7655_recIdents;
              RAST._IExpr _out3436;
              DCOMPUTF16._IOwnership _out3437;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3438;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3436, out _out3437, out _out3438);
              _7653_recursiveGen = _out3436;
              _7654_recOwned = _out3437;
              _7655_recIdents = _out3438;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7653_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3439;
              DCOMPUTF16._IOwnership _out3440;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3439, out _out3440);
              r = _out3439;
              resultingOwnership = _out3440;
              readIdents = _7655_recIdents;
            }
          } else if (_source276.is_Seq) {
            DAST._IType _7656___mcc_h528 = _source276.dtor_element;
            {
              RAST._IExpr _7657_recursiveGen;
              DCOMPUTF16._IOwnership _7658_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7659_recIdents;
              RAST._IExpr _out3441;
              DCOMPUTF16._IOwnership _out3442;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3443;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3441, out _out3442, out _out3443);
              _7657_recursiveGen = _out3441;
              _7658_recOwned = _out3442;
              _7659_recIdents = _out3443;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7657_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3444;
              DCOMPUTF16._IOwnership _out3445;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3444, out _out3445);
              r = _out3444;
              resultingOwnership = _out3445;
              readIdents = _7659_recIdents;
            }
          } else if (_source276.is_Set) {
            DAST._IType _7660___mcc_h530 = _source276.dtor_element;
            {
              RAST._IExpr _7661_recursiveGen;
              DCOMPUTF16._IOwnership _7662_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7663_recIdents;
              RAST._IExpr _out3446;
              DCOMPUTF16._IOwnership _out3447;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3448;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3446, out _out3447, out _out3448);
              _7661_recursiveGen = _out3446;
              _7662_recOwned = _out3447;
              _7663_recIdents = _out3448;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7661_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3449;
              DCOMPUTF16._IOwnership _out3450;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3449, out _out3450);
              r = _out3449;
              resultingOwnership = _out3450;
              readIdents = _7663_recIdents;
            }
          } else if (_source276.is_Multiset) {
            DAST._IType _7664___mcc_h532 = _source276.dtor_element;
            {
              RAST._IExpr _7665_recursiveGen;
              DCOMPUTF16._IOwnership _7666_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7667_recIdents;
              RAST._IExpr _out3451;
              DCOMPUTF16._IOwnership _out3452;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3453;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3451, out _out3452, out _out3453);
              _7665_recursiveGen = _out3451;
              _7666_recOwned = _out3452;
              _7667_recIdents = _out3453;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7665_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3454;
              DCOMPUTF16._IOwnership _out3455;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3454, out _out3455);
              r = _out3454;
              resultingOwnership = _out3455;
              readIdents = _7667_recIdents;
            }
          } else if (_source276.is_Map) {
            DAST._IType _7668___mcc_h534 = _source276.dtor_key;
            DAST._IType _7669___mcc_h535 = _source276.dtor_value;
            {
              RAST._IExpr _7670_recursiveGen;
              DCOMPUTF16._IOwnership _7671_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7672_recIdents;
              RAST._IExpr _out3456;
              DCOMPUTF16._IOwnership _out3457;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3458;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3456, out _out3457, out _out3458);
              _7670_recursiveGen = _out3456;
              _7671_recOwned = _out3457;
              _7672_recIdents = _out3458;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7670_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3459;
              DCOMPUTF16._IOwnership _out3460;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3459, out _out3460);
              r = _out3459;
              resultingOwnership = _out3460;
              readIdents = _7672_recIdents;
            }
          } else if (_source276.is_SetBuilder) {
            DAST._IType _7673___mcc_h538 = _source276.dtor_element;
            {
              RAST._IExpr _7674_recursiveGen;
              DCOMPUTF16._IOwnership _7675_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7676_recIdents;
              RAST._IExpr _out3461;
              DCOMPUTF16._IOwnership _out3462;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3463;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3461, out _out3462, out _out3463);
              _7674_recursiveGen = _out3461;
              _7675_recOwned = _out3462;
              _7676_recIdents = _out3463;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7674_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3464;
              DCOMPUTF16._IOwnership _out3465;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3464, out _out3465);
              r = _out3464;
              resultingOwnership = _out3465;
              readIdents = _7676_recIdents;
            }
          } else if (_source276.is_MapBuilder) {
            DAST._IType _7677___mcc_h540 = _source276.dtor_key;
            DAST._IType _7678___mcc_h541 = _source276.dtor_value;
            {
              RAST._IExpr _7679_recursiveGen;
              DCOMPUTF16._IOwnership _7680_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7681_recIdents;
              RAST._IExpr _out3466;
              DCOMPUTF16._IOwnership _out3467;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3468;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3466, out _out3467, out _out3468);
              _7679_recursiveGen = _out3466;
              _7680_recOwned = _out3467;
              _7681_recIdents = _out3468;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7679_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3469;
              DCOMPUTF16._IOwnership _out3470;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3469, out _out3470);
              r = _out3469;
              resultingOwnership = _out3470;
              readIdents = _7681_recIdents;
            }
          } else if (_source276.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7682___mcc_h544 = _source276.dtor_args;
            DAST._IType _7683___mcc_h545 = _source276.dtor_result;
            {
              RAST._IExpr _7684_recursiveGen;
              DCOMPUTF16._IOwnership _7685_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7686_recIdents;
              RAST._IExpr _out3471;
              DCOMPUTF16._IOwnership _out3472;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3473;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3471, out _out3472, out _out3473);
              _7684_recursiveGen = _out3471;
              _7685_recOwned = _out3472;
              _7686_recIdents = _out3473;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7684_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3474;
              DCOMPUTF16._IOwnership _out3475;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3474, out _out3475);
              r = _out3474;
              resultingOwnership = _out3475;
              readIdents = _7686_recIdents;
            }
          } else if (_source276.is_Primitive) {
            DAST._IPrimitive _7687___mcc_h548 = _source276.dtor_Primitive_a0;
            {
              RAST._IExpr _7688_recursiveGen;
              DCOMPUTF16._IOwnership _7689_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7690_recIdents;
              RAST._IExpr _out3476;
              DCOMPUTF16._IOwnership _out3477;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3478;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3476, out _out3477, out _out3478);
              _7688_recursiveGen = _out3476;
              _7689_recOwned = _out3477;
              _7690_recIdents = _out3478;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7688_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3479;
              DCOMPUTF16._IOwnership _out3480;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3479, out _out3480);
              r = _out3479;
              resultingOwnership = _out3480;
              readIdents = _7690_recIdents;
            }
          } else if (_source276.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7691___mcc_h550 = _source276.dtor_Passthrough_a0;
            {
              RAST._IExpr _7692_recursiveGen;
              DCOMPUTF16._IOwnership _7693_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7694_recIdents;
              RAST._IExpr _out3481;
              DCOMPUTF16._IOwnership _out3482;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3483;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3481, out _out3482, out _out3483);
              _7692_recursiveGen = _out3481;
              _7693_recOwned = _out3482;
              _7694_recIdents = _out3483;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7692_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3484;
              DCOMPUTF16._IOwnership _out3485;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3484, out _out3485);
              r = _out3484;
              resultingOwnership = _out3485;
              readIdents = _7694_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7695___mcc_h552 = _source276.dtor_TypeArg_a0;
            {
              RAST._IExpr _7696_recursiveGen;
              DCOMPUTF16._IOwnership _7697_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7698_recIdents;
              RAST._IExpr _out3486;
              DCOMPUTF16._IOwnership _out3487;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3488;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3486, out _out3487, out _out3488);
              _7696_recursiveGen = _out3486;
              _7697_recOwned = _out3487;
              _7698_recIdents = _out3488;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7696_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3489;
              DCOMPUTF16._IOwnership _out3490;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3489, out _out3490);
              r = _out3489;
              resultingOwnership = _out3490;
              readIdents = _7698_recIdents;
            }
          }
        } else if (_source254.is_Multiset) {
          DAST._IType _7699___mcc_h554 = _source254.dtor_element;
          DAST._IType _source279 = _6970___mcc_h1;
          if (_source279.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7700___mcc_h558 = _source279.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7701___mcc_h559 = _source279.dtor_typeArgs;
            DAST._IResolvedType _7702___mcc_h560 = _source279.dtor_resolved;
            DAST._IResolvedType _source280 = _7702___mcc_h560;
            if (_source280.is_Datatype) {
              DAST._IDatatypeType _7703___mcc_h564 = _source280.dtor_datatypeType;
              {
                RAST._IExpr _7704_recursiveGen;
                DCOMPUTF16._IOwnership _7705_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7706_recIdents;
                RAST._IExpr _out3491;
                DCOMPUTF16._IOwnership _out3492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3493;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3491, out _out3492, out _out3493);
                _7704_recursiveGen = _out3491;
                _7705_recOwned = _out3492;
                _7706_recIdents = _out3493;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7704_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3494;
                DCOMPUTF16._IOwnership _out3495;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3494, out _out3495);
                r = _out3494;
                resultingOwnership = _out3495;
                readIdents = _7706_recIdents;
              }
            } else if (_source280.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7707___mcc_h566 = _source280.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7708___mcc_h567 = _source280.dtor_attributes;
              {
                RAST._IExpr _7709_recursiveGen;
                DCOMPUTF16._IOwnership _7710_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7711_recIdents;
                RAST._IExpr _out3496;
                DCOMPUTF16._IOwnership _out3497;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3498;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3496, out _out3497, out _out3498);
                _7709_recursiveGen = _out3496;
                _7710_recOwned = _out3497;
                _7711_recIdents = _out3498;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7709_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3499;
                DCOMPUTF16._IOwnership _out3500;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3499, out _out3500);
                r = _out3499;
                resultingOwnership = _out3500;
                readIdents = _7711_recIdents;
              }
            } else {
              DAST._IType _7712___mcc_h570 = _source280.dtor_baseType;
              DAST._INewtypeRange _7713___mcc_h571 = _source280.dtor_range;
              bool _7714___mcc_h572 = _source280.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7715___mcc_h573 = _source280.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7716_attributes = _7715___mcc_h573;
              bool _7717_erase = _7714___mcc_h572;
              DAST._INewtypeRange _7718_range = _7713___mcc_h571;
              DAST._IType _7719_b = _7712___mcc_h570;
              {
                if (object.Equals(_6964_fromTpe, _7719_b)) {
                  RAST._IExpr _7720_recursiveGen;
                  DCOMPUTF16._IOwnership _7721_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7722_recIdents;
                  RAST._IExpr _out3501;
                  DCOMPUTF16._IOwnership _out3502;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3503;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3501, out _out3502, out _out3503);
                  _7720_recursiveGen = _out3501;
                  _7721_recOwned = _out3502;
                  _7722_recIdents = _out3503;
                  Std.Wrappers._IOption<RAST._IType> _7723_potentialRhsType;
                  _7723_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7719_b, _7718_range);
                  Std.Wrappers._IOption<RAST._IType> _source281 = _7723_potentialRhsType;
                  if (_source281.is_None) {
                    if (_7717_erase) {
                      r = _7720_recursiveGen;
                    } else {
                      RAST._IType _7724_rhsType;
                      RAST._IType _out3504;
                      _out3504 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _7724_rhsType = _out3504;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7724_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7720_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3505;
                    DCOMPUTF16._IOwnership _out3506;
                    DCOMPUTF16.COMP.FromOwnership(r, _7721_recOwned, expectedOwnership, out _out3505, out _out3506);
                    r = _out3505;
                    resultingOwnership = _out3506;
                  } else {
                    RAST._IType _7725___mcc_h1253 = _source281.dtor_value;
                    RAST._IType _7726_v = _7725___mcc_h1253;
                    r = RAST.Expr.create_ConversionNum(_7726_v, _7720_recursiveGen);
                    RAST._IExpr _out3507;
                    DCOMPUTF16._IOwnership _out3508;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3507, out _out3508);
                    r = _out3507;
                    resultingOwnership = _out3508;
                  }
                  readIdents = _7722_recIdents;
                } else {
                  RAST._IExpr _out3509;
                  DCOMPUTF16._IOwnership _out3510;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3511;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7719_b), _7719_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3509, out _out3510, out _out3511);
                  r = _out3509;
                  resultingOwnership = _out3510;
                  readIdents = _out3511;
                }
              }
            }
          } else if (_source279.is_Nullable) {
            DAST._IType _7727___mcc_h578 = _source279.dtor_Nullable_a0;
            {
              RAST._IExpr _7728_recursiveGen;
              DCOMPUTF16._IOwnership _7729_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7730_recIdents;
              RAST._IExpr _out3512;
              DCOMPUTF16._IOwnership _out3513;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3514;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3512, out _out3513, out _out3514);
              _7728_recursiveGen = _out3512;
              _7729_recOwned = _out3513;
              _7730_recIdents = _out3514;
              r = _7728_recursiveGen;
              if (object.Equals(_7729_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3515;
              DCOMPUTF16._IOwnership _out3516;
              DCOMPUTF16.COMP.FromOwnership(r, _7729_recOwned, expectedOwnership, out _out3515, out _out3516);
              r = _out3515;
              resultingOwnership = _out3516;
              readIdents = _7730_recIdents;
            }
          } else if (_source279.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7731___mcc_h580 = _source279.dtor_Tuple_a0;
            {
              RAST._IExpr _7732_recursiveGen;
              DCOMPUTF16._IOwnership _7733_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7734_recIdents;
              RAST._IExpr _out3517;
              DCOMPUTF16._IOwnership _out3518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3519;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3517, out _out3518, out _out3519);
              _7732_recursiveGen = _out3517;
              _7733_recOwned = _out3518;
              _7734_recIdents = _out3519;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7732_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3520;
              DCOMPUTF16._IOwnership _out3521;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3520, out _out3521);
              r = _out3520;
              resultingOwnership = _out3521;
              readIdents = _7734_recIdents;
            }
          } else if (_source279.is_Array) {
            DAST._IType _7735___mcc_h582 = _source279.dtor_element;
            BigInteger _7736___mcc_h583 = _source279.dtor_dims;
            {
              RAST._IExpr _7737_recursiveGen;
              DCOMPUTF16._IOwnership _7738_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7739_recIdents;
              RAST._IExpr _out3522;
              DCOMPUTF16._IOwnership _out3523;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3524;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3522, out _out3523, out _out3524);
              _7737_recursiveGen = _out3522;
              _7738_recOwned = _out3523;
              _7739_recIdents = _out3524;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7737_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3525;
              DCOMPUTF16._IOwnership _out3526;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3525, out _out3526);
              r = _out3525;
              resultingOwnership = _out3526;
              readIdents = _7739_recIdents;
            }
          } else if (_source279.is_Seq) {
            DAST._IType _7740___mcc_h586 = _source279.dtor_element;
            {
              RAST._IExpr _7741_recursiveGen;
              DCOMPUTF16._IOwnership _7742_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7743_recIdents;
              RAST._IExpr _out3527;
              DCOMPUTF16._IOwnership _out3528;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3529;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3527, out _out3528, out _out3529);
              _7741_recursiveGen = _out3527;
              _7742_recOwned = _out3528;
              _7743_recIdents = _out3529;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7741_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3530;
              DCOMPUTF16._IOwnership _out3531;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3530, out _out3531);
              r = _out3530;
              resultingOwnership = _out3531;
              readIdents = _7743_recIdents;
            }
          } else if (_source279.is_Set) {
            DAST._IType _7744___mcc_h588 = _source279.dtor_element;
            {
              RAST._IExpr _7745_recursiveGen;
              DCOMPUTF16._IOwnership _7746_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7747_recIdents;
              RAST._IExpr _out3532;
              DCOMPUTF16._IOwnership _out3533;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3534;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3532, out _out3533, out _out3534);
              _7745_recursiveGen = _out3532;
              _7746_recOwned = _out3533;
              _7747_recIdents = _out3534;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7745_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3535;
              DCOMPUTF16._IOwnership _out3536;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3535, out _out3536);
              r = _out3535;
              resultingOwnership = _out3536;
              readIdents = _7747_recIdents;
            }
          } else if (_source279.is_Multiset) {
            DAST._IType _7748___mcc_h590 = _source279.dtor_element;
            {
              RAST._IExpr _7749_recursiveGen;
              DCOMPUTF16._IOwnership _7750_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7751_recIdents;
              RAST._IExpr _out3537;
              DCOMPUTF16._IOwnership _out3538;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3539;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3537, out _out3538, out _out3539);
              _7749_recursiveGen = _out3537;
              _7750_recOwned = _out3538;
              _7751_recIdents = _out3539;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7749_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3540;
              DCOMPUTF16._IOwnership _out3541;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3540, out _out3541);
              r = _out3540;
              resultingOwnership = _out3541;
              readIdents = _7751_recIdents;
            }
          } else if (_source279.is_Map) {
            DAST._IType _7752___mcc_h592 = _source279.dtor_key;
            DAST._IType _7753___mcc_h593 = _source279.dtor_value;
            {
              RAST._IExpr _7754_recursiveGen;
              DCOMPUTF16._IOwnership _7755_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7756_recIdents;
              RAST._IExpr _out3542;
              DCOMPUTF16._IOwnership _out3543;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3544;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3542, out _out3543, out _out3544);
              _7754_recursiveGen = _out3542;
              _7755_recOwned = _out3543;
              _7756_recIdents = _out3544;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7754_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3545;
              DCOMPUTF16._IOwnership _out3546;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3545, out _out3546);
              r = _out3545;
              resultingOwnership = _out3546;
              readIdents = _7756_recIdents;
            }
          } else if (_source279.is_SetBuilder) {
            DAST._IType _7757___mcc_h596 = _source279.dtor_element;
            {
              RAST._IExpr _7758_recursiveGen;
              DCOMPUTF16._IOwnership _7759_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7760_recIdents;
              RAST._IExpr _out3547;
              DCOMPUTF16._IOwnership _out3548;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3549;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3547, out _out3548, out _out3549);
              _7758_recursiveGen = _out3547;
              _7759_recOwned = _out3548;
              _7760_recIdents = _out3549;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7758_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3550;
              DCOMPUTF16._IOwnership _out3551;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3550, out _out3551);
              r = _out3550;
              resultingOwnership = _out3551;
              readIdents = _7760_recIdents;
            }
          } else if (_source279.is_MapBuilder) {
            DAST._IType _7761___mcc_h598 = _source279.dtor_key;
            DAST._IType _7762___mcc_h599 = _source279.dtor_value;
            {
              RAST._IExpr _7763_recursiveGen;
              DCOMPUTF16._IOwnership _7764_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7765_recIdents;
              RAST._IExpr _out3552;
              DCOMPUTF16._IOwnership _out3553;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3554;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3552, out _out3553, out _out3554);
              _7763_recursiveGen = _out3552;
              _7764_recOwned = _out3553;
              _7765_recIdents = _out3554;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7763_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3555;
              DCOMPUTF16._IOwnership _out3556;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3555, out _out3556);
              r = _out3555;
              resultingOwnership = _out3556;
              readIdents = _7765_recIdents;
            }
          } else if (_source279.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7766___mcc_h602 = _source279.dtor_args;
            DAST._IType _7767___mcc_h603 = _source279.dtor_result;
            {
              RAST._IExpr _7768_recursiveGen;
              DCOMPUTF16._IOwnership _7769_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7770_recIdents;
              RAST._IExpr _out3557;
              DCOMPUTF16._IOwnership _out3558;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3559;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3557, out _out3558, out _out3559);
              _7768_recursiveGen = _out3557;
              _7769_recOwned = _out3558;
              _7770_recIdents = _out3559;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7768_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3560;
              DCOMPUTF16._IOwnership _out3561;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3560, out _out3561);
              r = _out3560;
              resultingOwnership = _out3561;
              readIdents = _7770_recIdents;
            }
          } else if (_source279.is_Primitive) {
            DAST._IPrimitive _7771___mcc_h606 = _source279.dtor_Primitive_a0;
            {
              RAST._IExpr _7772_recursiveGen;
              DCOMPUTF16._IOwnership _7773_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7774_recIdents;
              RAST._IExpr _out3562;
              DCOMPUTF16._IOwnership _out3563;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3564;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3562, out _out3563, out _out3564);
              _7772_recursiveGen = _out3562;
              _7773_recOwned = _out3563;
              _7774_recIdents = _out3564;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7772_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3565;
              DCOMPUTF16._IOwnership _out3566;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3565, out _out3566);
              r = _out3565;
              resultingOwnership = _out3566;
              readIdents = _7774_recIdents;
            }
          } else if (_source279.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7775___mcc_h608 = _source279.dtor_Passthrough_a0;
            {
              RAST._IExpr _7776_recursiveGen;
              DCOMPUTF16._IOwnership _7777_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7778_recIdents;
              RAST._IExpr _out3567;
              DCOMPUTF16._IOwnership _out3568;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3569;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3567, out _out3568, out _out3569);
              _7776_recursiveGen = _out3567;
              _7777_recOwned = _out3568;
              _7778_recIdents = _out3569;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7776_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3570;
              DCOMPUTF16._IOwnership _out3571;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3570, out _out3571);
              r = _out3570;
              resultingOwnership = _out3571;
              readIdents = _7778_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7779___mcc_h610 = _source279.dtor_TypeArg_a0;
            {
              RAST._IExpr _7780_recursiveGen;
              DCOMPUTF16._IOwnership _7781_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7782_recIdents;
              RAST._IExpr _out3572;
              DCOMPUTF16._IOwnership _out3573;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3574;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3572, out _out3573, out _out3574);
              _7780_recursiveGen = _out3572;
              _7781_recOwned = _out3573;
              _7782_recIdents = _out3574;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7780_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3575;
              DCOMPUTF16._IOwnership _out3576;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3575, out _out3576);
              r = _out3575;
              resultingOwnership = _out3576;
              readIdents = _7782_recIdents;
            }
          }
        } else if (_source254.is_Map) {
          DAST._IType _7783___mcc_h612 = _source254.dtor_key;
          DAST._IType _7784___mcc_h613 = _source254.dtor_value;
          DAST._IType _source282 = _6970___mcc_h1;
          if (_source282.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7785___mcc_h620 = _source282.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7786___mcc_h621 = _source282.dtor_typeArgs;
            DAST._IResolvedType _7787___mcc_h622 = _source282.dtor_resolved;
            DAST._IResolvedType _source283 = _7787___mcc_h622;
            if (_source283.is_Datatype) {
              DAST._IDatatypeType _7788___mcc_h626 = _source283.dtor_datatypeType;
              {
                RAST._IExpr _7789_recursiveGen;
                DCOMPUTF16._IOwnership _7790_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7791_recIdents;
                RAST._IExpr _out3577;
                DCOMPUTF16._IOwnership _out3578;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3579;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3577, out _out3578, out _out3579);
                _7789_recursiveGen = _out3577;
                _7790_recOwned = _out3578;
                _7791_recIdents = _out3579;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7789_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3580;
                DCOMPUTF16._IOwnership _out3581;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3580, out _out3581);
                r = _out3580;
                resultingOwnership = _out3581;
                readIdents = _7791_recIdents;
              }
            } else if (_source283.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7792___mcc_h628 = _source283.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7793___mcc_h629 = _source283.dtor_attributes;
              {
                RAST._IExpr _7794_recursiveGen;
                DCOMPUTF16._IOwnership _7795_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7796_recIdents;
                RAST._IExpr _out3582;
                DCOMPUTF16._IOwnership _out3583;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3584;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3582, out _out3583, out _out3584);
                _7794_recursiveGen = _out3582;
                _7795_recOwned = _out3583;
                _7796_recIdents = _out3584;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7794_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3585;
                DCOMPUTF16._IOwnership _out3586;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3585, out _out3586);
                r = _out3585;
                resultingOwnership = _out3586;
                readIdents = _7796_recIdents;
              }
            } else {
              DAST._IType _7797___mcc_h632 = _source283.dtor_baseType;
              DAST._INewtypeRange _7798___mcc_h633 = _source283.dtor_range;
              bool _7799___mcc_h634 = _source283.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7800___mcc_h635 = _source283.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7801_attributes = _7800___mcc_h635;
              bool _7802_erase = _7799___mcc_h634;
              DAST._INewtypeRange _7803_range = _7798___mcc_h633;
              DAST._IType _7804_b = _7797___mcc_h632;
              {
                if (object.Equals(_6964_fromTpe, _7804_b)) {
                  RAST._IExpr _7805_recursiveGen;
                  DCOMPUTF16._IOwnership _7806_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7807_recIdents;
                  RAST._IExpr _out3587;
                  DCOMPUTF16._IOwnership _out3588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3589;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3587, out _out3588, out _out3589);
                  _7805_recursiveGen = _out3587;
                  _7806_recOwned = _out3588;
                  _7807_recIdents = _out3589;
                  Std.Wrappers._IOption<RAST._IType> _7808_potentialRhsType;
                  _7808_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7804_b, _7803_range);
                  Std.Wrappers._IOption<RAST._IType> _source284 = _7808_potentialRhsType;
                  if (_source284.is_None) {
                    if (_7802_erase) {
                      r = _7805_recursiveGen;
                    } else {
                      RAST._IType _7809_rhsType;
                      RAST._IType _out3590;
                      _out3590 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _7809_rhsType = _out3590;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7809_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7805_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3591;
                    DCOMPUTF16._IOwnership _out3592;
                    DCOMPUTF16.COMP.FromOwnership(r, _7806_recOwned, expectedOwnership, out _out3591, out _out3592);
                    r = _out3591;
                    resultingOwnership = _out3592;
                  } else {
                    RAST._IType _7810___mcc_h1254 = _source284.dtor_value;
                    RAST._IType _7811_v = _7810___mcc_h1254;
                    r = RAST.Expr.create_ConversionNum(_7811_v, _7805_recursiveGen);
                    RAST._IExpr _out3593;
                    DCOMPUTF16._IOwnership _out3594;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3593, out _out3594);
                    r = _out3593;
                    resultingOwnership = _out3594;
                  }
                  readIdents = _7807_recIdents;
                } else {
                  RAST._IExpr _out3595;
                  DCOMPUTF16._IOwnership _out3596;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3597;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7804_b), _7804_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3595, out _out3596, out _out3597);
                  r = _out3595;
                  resultingOwnership = _out3596;
                  readIdents = _out3597;
                }
              }
            }
          } else if (_source282.is_Nullable) {
            DAST._IType _7812___mcc_h640 = _source282.dtor_Nullable_a0;
            {
              RAST._IExpr _7813_recursiveGen;
              DCOMPUTF16._IOwnership _7814_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7815_recIdents;
              RAST._IExpr _out3598;
              DCOMPUTF16._IOwnership _out3599;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3600;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3598, out _out3599, out _out3600);
              _7813_recursiveGen = _out3598;
              _7814_recOwned = _out3599;
              _7815_recIdents = _out3600;
              r = _7813_recursiveGen;
              if (object.Equals(_7814_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3601;
              DCOMPUTF16._IOwnership _out3602;
              DCOMPUTF16.COMP.FromOwnership(r, _7814_recOwned, expectedOwnership, out _out3601, out _out3602);
              r = _out3601;
              resultingOwnership = _out3602;
              readIdents = _7815_recIdents;
            }
          } else if (_source282.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7816___mcc_h642 = _source282.dtor_Tuple_a0;
            {
              RAST._IExpr _7817_recursiveGen;
              DCOMPUTF16._IOwnership _7818_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7819_recIdents;
              RAST._IExpr _out3603;
              DCOMPUTF16._IOwnership _out3604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3605;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3603, out _out3604, out _out3605);
              _7817_recursiveGen = _out3603;
              _7818_recOwned = _out3604;
              _7819_recIdents = _out3605;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7817_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3606;
              DCOMPUTF16._IOwnership _out3607;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3606, out _out3607);
              r = _out3606;
              resultingOwnership = _out3607;
              readIdents = _7819_recIdents;
            }
          } else if (_source282.is_Array) {
            DAST._IType _7820___mcc_h644 = _source282.dtor_element;
            BigInteger _7821___mcc_h645 = _source282.dtor_dims;
            {
              RAST._IExpr _7822_recursiveGen;
              DCOMPUTF16._IOwnership _7823_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7824_recIdents;
              RAST._IExpr _out3608;
              DCOMPUTF16._IOwnership _out3609;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3610;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3608, out _out3609, out _out3610);
              _7822_recursiveGen = _out3608;
              _7823_recOwned = _out3609;
              _7824_recIdents = _out3610;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7822_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3611;
              DCOMPUTF16._IOwnership _out3612;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3611, out _out3612);
              r = _out3611;
              resultingOwnership = _out3612;
              readIdents = _7824_recIdents;
            }
          } else if (_source282.is_Seq) {
            DAST._IType _7825___mcc_h648 = _source282.dtor_element;
            {
              RAST._IExpr _7826_recursiveGen;
              DCOMPUTF16._IOwnership _7827_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7828_recIdents;
              RAST._IExpr _out3613;
              DCOMPUTF16._IOwnership _out3614;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3615;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3613, out _out3614, out _out3615);
              _7826_recursiveGen = _out3613;
              _7827_recOwned = _out3614;
              _7828_recIdents = _out3615;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7826_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3616;
              DCOMPUTF16._IOwnership _out3617;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3616, out _out3617);
              r = _out3616;
              resultingOwnership = _out3617;
              readIdents = _7828_recIdents;
            }
          } else if (_source282.is_Set) {
            DAST._IType _7829___mcc_h650 = _source282.dtor_element;
            {
              RAST._IExpr _7830_recursiveGen;
              DCOMPUTF16._IOwnership _7831_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7832_recIdents;
              RAST._IExpr _out3618;
              DCOMPUTF16._IOwnership _out3619;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3620;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3618, out _out3619, out _out3620);
              _7830_recursiveGen = _out3618;
              _7831_recOwned = _out3619;
              _7832_recIdents = _out3620;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7830_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3621;
              DCOMPUTF16._IOwnership _out3622;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3621, out _out3622);
              r = _out3621;
              resultingOwnership = _out3622;
              readIdents = _7832_recIdents;
            }
          } else if (_source282.is_Multiset) {
            DAST._IType _7833___mcc_h652 = _source282.dtor_element;
            {
              RAST._IExpr _7834_recursiveGen;
              DCOMPUTF16._IOwnership _7835_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7836_recIdents;
              RAST._IExpr _out3623;
              DCOMPUTF16._IOwnership _out3624;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3625;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3623, out _out3624, out _out3625);
              _7834_recursiveGen = _out3623;
              _7835_recOwned = _out3624;
              _7836_recIdents = _out3625;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7834_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3626;
              DCOMPUTF16._IOwnership _out3627;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3626, out _out3627);
              r = _out3626;
              resultingOwnership = _out3627;
              readIdents = _7836_recIdents;
            }
          } else if (_source282.is_Map) {
            DAST._IType _7837___mcc_h654 = _source282.dtor_key;
            DAST._IType _7838___mcc_h655 = _source282.dtor_value;
            {
              RAST._IExpr _7839_recursiveGen;
              DCOMPUTF16._IOwnership _7840_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7841_recIdents;
              RAST._IExpr _out3628;
              DCOMPUTF16._IOwnership _out3629;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3630;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3628, out _out3629, out _out3630);
              _7839_recursiveGen = _out3628;
              _7840_recOwned = _out3629;
              _7841_recIdents = _out3630;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7839_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3631;
              DCOMPUTF16._IOwnership _out3632;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3631, out _out3632);
              r = _out3631;
              resultingOwnership = _out3632;
              readIdents = _7841_recIdents;
            }
          } else if (_source282.is_SetBuilder) {
            DAST._IType _7842___mcc_h658 = _source282.dtor_element;
            {
              RAST._IExpr _7843_recursiveGen;
              DCOMPUTF16._IOwnership _7844_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7845_recIdents;
              RAST._IExpr _out3633;
              DCOMPUTF16._IOwnership _out3634;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3635;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3633, out _out3634, out _out3635);
              _7843_recursiveGen = _out3633;
              _7844_recOwned = _out3634;
              _7845_recIdents = _out3635;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7843_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3636;
              DCOMPUTF16._IOwnership _out3637;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3636, out _out3637);
              r = _out3636;
              resultingOwnership = _out3637;
              readIdents = _7845_recIdents;
            }
          } else if (_source282.is_MapBuilder) {
            DAST._IType _7846___mcc_h660 = _source282.dtor_key;
            DAST._IType _7847___mcc_h661 = _source282.dtor_value;
            {
              RAST._IExpr _7848_recursiveGen;
              DCOMPUTF16._IOwnership _7849_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7850_recIdents;
              RAST._IExpr _out3638;
              DCOMPUTF16._IOwnership _out3639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3640;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3638, out _out3639, out _out3640);
              _7848_recursiveGen = _out3638;
              _7849_recOwned = _out3639;
              _7850_recIdents = _out3640;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7848_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3641;
              DCOMPUTF16._IOwnership _out3642;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3641, out _out3642);
              r = _out3641;
              resultingOwnership = _out3642;
              readIdents = _7850_recIdents;
            }
          } else if (_source282.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7851___mcc_h664 = _source282.dtor_args;
            DAST._IType _7852___mcc_h665 = _source282.dtor_result;
            {
              RAST._IExpr _7853_recursiveGen;
              DCOMPUTF16._IOwnership _7854_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7855_recIdents;
              RAST._IExpr _out3643;
              DCOMPUTF16._IOwnership _out3644;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3645;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3643, out _out3644, out _out3645);
              _7853_recursiveGen = _out3643;
              _7854_recOwned = _out3644;
              _7855_recIdents = _out3645;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7853_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3646;
              DCOMPUTF16._IOwnership _out3647;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3646, out _out3647);
              r = _out3646;
              resultingOwnership = _out3647;
              readIdents = _7855_recIdents;
            }
          } else if (_source282.is_Primitive) {
            DAST._IPrimitive _7856___mcc_h668 = _source282.dtor_Primitive_a0;
            {
              RAST._IExpr _7857_recursiveGen;
              DCOMPUTF16._IOwnership _7858_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7859_recIdents;
              RAST._IExpr _out3648;
              DCOMPUTF16._IOwnership _out3649;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3650;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3648, out _out3649, out _out3650);
              _7857_recursiveGen = _out3648;
              _7858_recOwned = _out3649;
              _7859_recIdents = _out3650;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7857_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3651;
              DCOMPUTF16._IOwnership _out3652;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3651, out _out3652);
              r = _out3651;
              resultingOwnership = _out3652;
              readIdents = _7859_recIdents;
            }
          } else if (_source282.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7860___mcc_h670 = _source282.dtor_Passthrough_a0;
            {
              RAST._IExpr _7861_recursiveGen;
              DCOMPUTF16._IOwnership _7862_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7863_recIdents;
              RAST._IExpr _out3653;
              DCOMPUTF16._IOwnership _out3654;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3655;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3653, out _out3654, out _out3655);
              _7861_recursiveGen = _out3653;
              _7862_recOwned = _out3654;
              _7863_recIdents = _out3655;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7861_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3656;
              DCOMPUTF16._IOwnership _out3657;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3656, out _out3657);
              r = _out3656;
              resultingOwnership = _out3657;
              readIdents = _7863_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7864___mcc_h672 = _source282.dtor_TypeArg_a0;
            {
              RAST._IExpr _7865_recursiveGen;
              DCOMPUTF16._IOwnership _7866_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7867_recIdents;
              RAST._IExpr _out3658;
              DCOMPUTF16._IOwnership _out3659;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3660;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3658, out _out3659, out _out3660);
              _7865_recursiveGen = _out3658;
              _7866_recOwned = _out3659;
              _7867_recIdents = _out3660;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7865_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3661;
              DCOMPUTF16._IOwnership _out3662;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3661, out _out3662);
              r = _out3661;
              resultingOwnership = _out3662;
              readIdents = _7867_recIdents;
            }
          }
        } else if (_source254.is_SetBuilder) {
          DAST._IType _7868___mcc_h674 = _source254.dtor_element;
          DAST._IType _source285 = _6970___mcc_h1;
          if (_source285.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7869___mcc_h678 = _source285.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7870___mcc_h679 = _source285.dtor_typeArgs;
            DAST._IResolvedType _7871___mcc_h680 = _source285.dtor_resolved;
            DAST._IResolvedType _source286 = _7871___mcc_h680;
            if (_source286.is_Datatype) {
              DAST._IDatatypeType _7872___mcc_h684 = _source286.dtor_datatypeType;
              {
                RAST._IExpr _7873_recursiveGen;
                DCOMPUTF16._IOwnership _7874_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7875_recIdents;
                RAST._IExpr _out3663;
                DCOMPUTF16._IOwnership _out3664;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3665;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3663, out _out3664, out _out3665);
                _7873_recursiveGen = _out3663;
                _7874_recOwned = _out3664;
                _7875_recIdents = _out3665;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7873_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3666;
                DCOMPUTF16._IOwnership _out3667;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3666, out _out3667);
                r = _out3666;
                resultingOwnership = _out3667;
                readIdents = _7875_recIdents;
              }
            } else if (_source286.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7876___mcc_h686 = _source286.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7877___mcc_h687 = _source286.dtor_attributes;
              {
                RAST._IExpr _7878_recursiveGen;
                DCOMPUTF16._IOwnership _7879_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7880_recIdents;
                RAST._IExpr _out3668;
                DCOMPUTF16._IOwnership _out3669;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3670;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3668, out _out3669, out _out3670);
                _7878_recursiveGen = _out3668;
                _7879_recOwned = _out3669;
                _7880_recIdents = _out3670;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7878_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3671;
                DCOMPUTF16._IOwnership _out3672;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3671, out _out3672);
                r = _out3671;
                resultingOwnership = _out3672;
                readIdents = _7880_recIdents;
              }
            } else {
              DAST._IType _7881___mcc_h690 = _source286.dtor_baseType;
              DAST._INewtypeRange _7882___mcc_h691 = _source286.dtor_range;
              bool _7883___mcc_h692 = _source286.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7884___mcc_h693 = _source286.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7885_attributes = _7884___mcc_h693;
              bool _7886_erase = _7883___mcc_h692;
              DAST._INewtypeRange _7887_range = _7882___mcc_h691;
              DAST._IType _7888_b = _7881___mcc_h690;
              {
                if (object.Equals(_6964_fromTpe, _7888_b)) {
                  RAST._IExpr _7889_recursiveGen;
                  DCOMPUTF16._IOwnership _7890_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7891_recIdents;
                  RAST._IExpr _out3673;
                  DCOMPUTF16._IOwnership _out3674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3675;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3673, out _out3674, out _out3675);
                  _7889_recursiveGen = _out3673;
                  _7890_recOwned = _out3674;
                  _7891_recIdents = _out3675;
                  Std.Wrappers._IOption<RAST._IType> _7892_potentialRhsType;
                  _7892_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7888_b, _7887_range);
                  Std.Wrappers._IOption<RAST._IType> _source287 = _7892_potentialRhsType;
                  if (_source287.is_None) {
                    if (_7886_erase) {
                      r = _7889_recursiveGen;
                    } else {
                      RAST._IType _7893_rhsType;
                      RAST._IType _out3676;
                      _out3676 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _7893_rhsType = _out3676;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7893_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7889_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3677;
                    DCOMPUTF16._IOwnership _out3678;
                    DCOMPUTF16.COMP.FromOwnership(r, _7890_recOwned, expectedOwnership, out _out3677, out _out3678);
                    r = _out3677;
                    resultingOwnership = _out3678;
                  } else {
                    RAST._IType _7894___mcc_h1255 = _source287.dtor_value;
                    RAST._IType _7895_v = _7894___mcc_h1255;
                    r = RAST.Expr.create_ConversionNum(_7895_v, _7889_recursiveGen);
                    RAST._IExpr _out3679;
                    DCOMPUTF16._IOwnership _out3680;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3679, out _out3680);
                    r = _out3679;
                    resultingOwnership = _out3680;
                  }
                  readIdents = _7891_recIdents;
                } else {
                  RAST._IExpr _out3681;
                  DCOMPUTF16._IOwnership _out3682;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3683;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7888_b), _7888_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3681, out _out3682, out _out3683);
                  r = _out3681;
                  resultingOwnership = _out3682;
                  readIdents = _out3683;
                }
              }
            }
          } else if (_source285.is_Nullable) {
            DAST._IType _7896___mcc_h698 = _source285.dtor_Nullable_a0;
            {
              RAST._IExpr _7897_recursiveGen;
              DCOMPUTF16._IOwnership _7898_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7899_recIdents;
              RAST._IExpr _out3684;
              DCOMPUTF16._IOwnership _out3685;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3686;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3684, out _out3685, out _out3686);
              _7897_recursiveGen = _out3684;
              _7898_recOwned = _out3685;
              _7899_recIdents = _out3686;
              r = _7897_recursiveGen;
              if (object.Equals(_7898_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3687;
              DCOMPUTF16._IOwnership _out3688;
              DCOMPUTF16.COMP.FromOwnership(r, _7898_recOwned, expectedOwnership, out _out3687, out _out3688);
              r = _out3687;
              resultingOwnership = _out3688;
              readIdents = _7899_recIdents;
            }
          } else if (_source285.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7900___mcc_h700 = _source285.dtor_Tuple_a0;
            {
              RAST._IExpr _7901_recursiveGen;
              DCOMPUTF16._IOwnership _7902_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7903_recIdents;
              RAST._IExpr _out3689;
              DCOMPUTF16._IOwnership _out3690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3691;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3689, out _out3690, out _out3691);
              _7901_recursiveGen = _out3689;
              _7902_recOwned = _out3690;
              _7903_recIdents = _out3691;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7901_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3692;
              DCOMPUTF16._IOwnership _out3693;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3692, out _out3693);
              r = _out3692;
              resultingOwnership = _out3693;
              readIdents = _7903_recIdents;
            }
          } else if (_source285.is_Array) {
            DAST._IType _7904___mcc_h702 = _source285.dtor_element;
            BigInteger _7905___mcc_h703 = _source285.dtor_dims;
            {
              RAST._IExpr _7906_recursiveGen;
              DCOMPUTF16._IOwnership _7907_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7908_recIdents;
              RAST._IExpr _out3694;
              DCOMPUTF16._IOwnership _out3695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3696;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3694, out _out3695, out _out3696);
              _7906_recursiveGen = _out3694;
              _7907_recOwned = _out3695;
              _7908_recIdents = _out3696;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7906_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3697;
              DCOMPUTF16._IOwnership _out3698;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3697, out _out3698);
              r = _out3697;
              resultingOwnership = _out3698;
              readIdents = _7908_recIdents;
            }
          } else if (_source285.is_Seq) {
            DAST._IType _7909___mcc_h706 = _source285.dtor_element;
            {
              RAST._IExpr _7910_recursiveGen;
              DCOMPUTF16._IOwnership _7911_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7912_recIdents;
              RAST._IExpr _out3699;
              DCOMPUTF16._IOwnership _out3700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3701;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3699, out _out3700, out _out3701);
              _7910_recursiveGen = _out3699;
              _7911_recOwned = _out3700;
              _7912_recIdents = _out3701;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7910_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3702;
              DCOMPUTF16._IOwnership _out3703;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3702, out _out3703);
              r = _out3702;
              resultingOwnership = _out3703;
              readIdents = _7912_recIdents;
            }
          } else if (_source285.is_Set) {
            DAST._IType _7913___mcc_h708 = _source285.dtor_element;
            {
              RAST._IExpr _7914_recursiveGen;
              DCOMPUTF16._IOwnership _7915_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7916_recIdents;
              RAST._IExpr _out3704;
              DCOMPUTF16._IOwnership _out3705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3706;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3704, out _out3705, out _out3706);
              _7914_recursiveGen = _out3704;
              _7915_recOwned = _out3705;
              _7916_recIdents = _out3706;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7914_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3707;
              DCOMPUTF16._IOwnership _out3708;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3707, out _out3708);
              r = _out3707;
              resultingOwnership = _out3708;
              readIdents = _7916_recIdents;
            }
          } else if (_source285.is_Multiset) {
            DAST._IType _7917___mcc_h710 = _source285.dtor_element;
            {
              RAST._IExpr _7918_recursiveGen;
              DCOMPUTF16._IOwnership _7919_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7920_recIdents;
              RAST._IExpr _out3709;
              DCOMPUTF16._IOwnership _out3710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3711;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3709, out _out3710, out _out3711);
              _7918_recursiveGen = _out3709;
              _7919_recOwned = _out3710;
              _7920_recIdents = _out3711;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7918_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3712;
              DCOMPUTF16._IOwnership _out3713;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3712, out _out3713);
              r = _out3712;
              resultingOwnership = _out3713;
              readIdents = _7920_recIdents;
            }
          } else if (_source285.is_Map) {
            DAST._IType _7921___mcc_h712 = _source285.dtor_key;
            DAST._IType _7922___mcc_h713 = _source285.dtor_value;
            {
              RAST._IExpr _7923_recursiveGen;
              DCOMPUTF16._IOwnership _7924_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7925_recIdents;
              RAST._IExpr _out3714;
              DCOMPUTF16._IOwnership _out3715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3716;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3714, out _out3715, out _out3716);
              _7923_recursiveGen = _out3714;
              _7924_recOwned = _out3715;
              _7925_recIdents = _out3716;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7923_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3717;
              DCOMPUTF16._IOwnership _out3718;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3717, out _out3718);
              r = _out3717;
              resultingOwnership = _out3718;
              readIdents = _7925_recIdents;
            }
          } else if (_source285.is_SetBuilder) {
            DAST._IType _7926___mcc_h716 = _source285.dtor_element;
            {
              RAST._IExpr _7927_recursiveGen;
              DCOMPUTF16._IOwnership _7928_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7929_recIdents;
              RAST._IExpr _out3719;
              DCOMPUTF16._IOwnership _out3720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3721;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3719, out _out3720, out _out3721);
              _7927_recursiveGen = _out3719;
              _7928_recOwned = _out3720;
              _7929_recIdents = _out3721;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7927_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3722;
              DCOMPUTF16._IOwnership _out3723;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3722, out _out3723);
              r = _out3722;
              resultingOwnership = _out3723;
              readIdents = _7929_recIdents;
            }
          } else if (_source285.is_MapBuilder) {
            DAST._IType _7930___mcc_h718 = _source285.dtor_key;
            DAST._IType _7931___mcc_h719 = _source285.dtor_value;
            {
              RAST._IExpr _7932_recursiveGen;
              DCOMPUTF16._IOwnership _7933_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7934_recIdents;
              RAST._IExpr _out3724;
              DCOMPUTF16._IOwnership _out3725;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3726;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3724, out _out3725, out _out3726);
              _7932_recursiveGen = _out3724;
              _7933_recOwned = _out3725;
              _7934_recIdents = _out3726;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7932_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3727;
              DCOMPUTF16._IOwnership _out3728;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3727, out _out3728);
              r = _out3727;
              resultingOwnership = _out3728;
              readIdents = _7934_recIdents;
            }
          } else if (_source285.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7935___mcc_h722 = _source285.dtor_args;
            DAST._IType _7936___mcc_h723 = _source285.dtor_result;
            {
              RAST._IExpr _7937_recursiveGen;
              DCOMPUTF16._IOwnership _7938_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7939_recIdents;
              RAST._IExpr _out3729;
              DCOMPUTF16._IOwnership _out3730;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3731;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3729, out _out3730, out _out3731);
              _7937_recursiveGen = _out3729;
              _7938_recOwned = _out3730;
              _7939_recIdents = _out3731;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7937_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3732;
              DCOMPUTF16._IOwnership _out3733;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3732, out _out3733);
              r = _out3732;
              resultingOwnership = _out3733;
              readIdents = _7939_recIdents;
            }
          } else if (_source285.is_Primitive) {
            DAST._IPrimitive _7940___mcc_h726 = _source285.dtor_Primitive_a0;
            {
              RAST._IExpr _7941_recursiveGen;
              DCOMPUTF16._IOwnership _7942_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7943_recIdents;
              RAST._IExpr _out3734;
              DCOMPUTF16._IOwnership _out3735;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3736;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3734, out _out3735, out _out3736);
              _7941_recursiveGen = _out3734;
              _7942_recOwned = _out3735;
              _7943_recIdents = _out3736;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7941_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3737;
              DCOMPUTF16._IOwnership _out3738;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3737, out _out3738);
              r = _out3737;
              resultingOwnership = _out3738;
              readIdents = _7943_recIdents;
            }
          } else if (_source285.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7944___mcc_h728 = _source285.dtor_Passthrough_a0;
            {
              RAST._IExpr _7945_recursiveGen;
              DCOMPUTF16._IOwnership _7946_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7947_recIdents;
              RAST._IExpr _out3739;
              DCOMPUTF16._IOwnership _out3740;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3741;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3739, out _out3740, out _out3741);
              _7945_recursiveGen = _out3739;
              _7946_recOwned = _out3740;
              _7947_recIdents = _out3741;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7945_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3742;
              DCOMPUTF16._IOwnership _out3743;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3742, out _out3743);
              r = _out3742;
              resultingOwnership = _out3743;
              readIdents = _7947_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7948___mcc_h730 = _source285.dtor_TypeArg_a0;
            {
              RAST._IExpr _7949_recursiveGen;
              DCOMPUTF16._IOwnership _7950_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7951_recIdents;
              RAST._IExpr _out3744;
              DCOMPUTF16._IOwnership _out3745;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3746;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3744, out _out3745, out _out3746);
              _7949_recursiveGen = _out3744;
              _7950_recOwned = _out3745;
              _7951_recIdents = _out3746;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7949_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3747;
              DCOMPUTF16._IOwnership _out3748;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3747, out _out3748);
              r = _out3747;
              resultingOwnership = _out3748;
              readIdents = _7951_recIdents;
            }
          }
        } else if (_source254.is_MapBuilder) {
          DAST._IType _7952___mcc_h732 = _source254.dtor_key;
          DAST._IType _7953___mcc_h733 = _source254.dtor_value;
          DAST._IType _source288 = _6970___mcc_h1;
          if (_source288.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7954___mcc_h740 = _source288.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7955___mcc_h741 = _source288.dtor_typeArgs;
            DAST._IResolvedType _7956___mcc_h742 = _source288.dtor_resolved;
            DAST._IResolvedType _source289 = _7956___mcc_h742;
            if (_source289.is_Datatype) {
              DAST._IDatatypeType _7957___mcc_h746 = _source289.dtor_datatypeType;
              {
                RAST._IExpr _7958_recursiveGen;
                DCOMPUTF16._IOwnership _7959_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7960_recIdents;
                RAST._IExpr _out3749;
                DCOMPUTF16._IOwnership _out3750;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3751;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3749, out _out3750, out _out3751);
                _7958_recursiveGen = _out3749;
                _7959_recOwned = _out3750;
                _7960_recIdents = _out3751;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7958_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3752;
                DCOMPUTF16._IOwnership _out3753;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3752, out _out3753);
                r = _out3752;
                resultingOwnership = _out3753;
                readIdents = _7960_recIdents;
              }
            } else if (_source289.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7961___mcc_h748 = _source289.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7962___mcc_h749 = _source289.dtor_attributes;
              {
                RAST._IExpr _7963_recursiveGen;
                DCOMPUTF16._IOwnership _7964_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7965_recIdents;
                RAST._IExpr _out3754;
                DCOMPUTF16._IOwnership _out3755;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3756;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3754, out _out3755, out _out3756);
                _7963_recursiveGen = _out3754;
                _7964_recOwned = _out3755;
                _7965_recIdents = _out3756;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7963_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3757;
                DCOMPUTF16._IOwnership _out3758;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3757, out _out3758);
                r = _out3757;
                resultingOwnership = _out3758;
                readIdents = _7965_recIdents;
              }
            } else {
              DAST._IType _7966___mcc_h752 = _source289.dtor_baseType;
              DAST._INewtypeRange _7967___mcc_h753 = _source289.dtor_range;
              bool _7968___mcc_h754 = _source289.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7969___mcc_h755 = _source289.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7970_attributes = _7969___mcc_h755;
              bool _7971_erase = _7968___mcc_h754;
              DAST._INewtypeRange _7972_range = _7967___mcc_h753;
              DAST._IType _7973_b = _7966___mcc_h752;
              {
                if (object.Equals(_6964_fromTpe, _7973_b)) {
                  RAST._IExpr _7974_recursiveGen;
                  DCOMPUTF16._IOwnership _7975_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7976_recIdents;
                  RAST._IExpr _out3759;
                  DCOMPUTF16._IOwnership _out3760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3761;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3759, out _out3760, out _out3761);
                  _7974_recursiveGen = _out3759;
                  _7975_recOwned = _out3760;
                  _7976_recIdents = _out3761;
                  Std.Wrappers._IOption<RAST._IType> _7977_potentialRhsType;
                  _7977_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7973_b, _7972_range);
                  Std.Wrappers._IOption<RAST._IType> _source290 = _7977_potentialRhsType;
                  if (_source290.is_None) {
                    if (_7971_erase) {
                      r = _7974_recursiveGen;
                    } else {
                      RAST._IType _7978_rhsType;
                      RAST._IType _out3762;
                      _out3762 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _7978_rhsType = _out3762;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7978_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7974_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3763;
                    DCOMPUTF16._IOwnership _out3764;
                    DCOMPUTF16.COMP.FromOwnership(r, _7975_recOwned, expectedOwnership, out _out3763, out _out3764);
                    r = _out3763;
                    resultingOwnership = _out3764;
                  } else {
                    RAST._IType _7979___mcc_h1256 = _source290.dtor_value;
                    RAST._IType _7980_v = _7979___mcc_h1256;
                    r = RAST.Expr.create_ConversionNum(_7980_v, _7974_recursiveGen);
                    RAST._IExpr _out3765;
                    DCOMPUTF16._IOwnership _out3766;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3765, out _out3766);
                    r = _out3765;
                    resultingOwnership = _out3766;
                  }
                  readIdents = _7976_recIdents;
                } else {
                  RAST._IExpr _out3767;
                  DCOMPUTF16._IOwnership _out3768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3769;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _7973_b), _7973_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3767, out _out3768, out _out3769);
                  r = _out3767;
                  resultingOwnership = _out3768;
                  readIdents = _out3769;
                }
              }
            }
          } else if (_source288.is_Nullable) {
            DAST._IType _7981___mcc_h760 = _source288.dtor_Nullable_a0;
            {
              RAST._IExpr _7982_recursiveGen;
              DCOMPUTF16._IOwnership _7983_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7984_recIdents;
              RAST._IExpr _out3770;
              DCOMPUTF16._IOwnership _out3771;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3772;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3770, out _out3771, out _out3772);
              _7982_recursiveGen = _out3770;
              _7983_recOwned = _out3771;
              _7984_recIdents = _out3772;
              r = _7982_recursiveGen;
              if (object.Equals(_7983_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3773;
              DCOMPUTF16._IOwnership _out3774;
              DCOMPUTF16.COMP.FromOwnership(r, _7983_recOwned, expectedOwnership, out _out3773, out _out3774);
              r = _out3773;
              resultingOwnership = _out3774;
              readIdents = _7984_recIdents;
            }
          } else if (_source288.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7985___mcc_h762 = _source288.dtor_Tuple_a0;
            {
              RAST._IExpr _7986_recursiveGen;
              DCOMPUTF16._IOwnership _7987_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7988_recIdents;
              RAST._IExpr _out3775;
              DCOMPUTF16._IOwnership _out3776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3777;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3775, out _out3776, out _out3777);
              _7986_recursiveGen = _out3775;
              _7987_recOwned = _out3776;
              _7988_recIdents = _out3777;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7986_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3778;
              DCOMPUTF16._IOwnership _out3779;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3778, out _out3779);
              r = _out3778;
              resultingOwnership = _out3779;
              readIdents = _7988_recIdents;
            }
          } else if (_source288.is_Array) {
            DAST._IType _7989___mcc_h764 = _source288.dtor_element;
            BigInteger _7990___mcc_h765 = _source288.dtor_dims;
            {
              RAST._IExpr _7991_recursiveGen;
              DCOMPUTF16._IOwnership _7992_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7993_recIdents;
              RAST._IExpr _out3780;
              DCOMPUTF16._IOwnership _out3781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3782;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3780, out _out3781, out _out3782);
              _7991_recursiveGen = _out3780;
              _7992_recOwned = _out3781;
              _7993_recIdents = _out3782;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7991_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3783;
              DCOMPUTF16._IOwnership _out3784;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3783, out _out3784);
              r = _out3783;
              resultingOwnership = _out3784;
              readIdents = _7993_recIdents;
            }
          } else if (_source288.is_Seq) {
            DAST._IType _7994___mcc_h768 = _source288.dtor_element;
            {
              RAST._IExpr _7995_recursiveGen;
              DCOMPUTF16._IOwnership _7996_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7997_recIdents;
              RAST._IExpr _out3785;
              DCOMPUTF16._IOwnership _out3786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3787;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3785, out _out3786, out _out3787);
              _7995_recursiveGen = _out3785;
              _7996_recOwned = _out3786;
              _7997_recIdents = _out3787;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7995_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3788;
              DCOMPUTF16._IOwnership _out3789;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3788, out _out3789);
              r = _out3788;
              resultingOwnership = _out3789;
              readIdents = _7997_recIdents;
            }
          } else if (_source288.is_Set) {
            DAST._IType _7998___mcc_h770 = _source288.dtor_element;
            {
              RAST._IExpr _7999_recursiveGen;
              DCOMPUTF16._IOwnership _8000_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8001_recIdents;
              RAST._IExpr _out3790;
              DCOMPUTF16._IOwnership _out3791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3792;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3790, out _out3791, out _out3792);
              _7999_recursiveGen = _out3790;
              _8000_recOwned = _out3791;
              _8001_recIdents = _out3792;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7999_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3793;
              DCOMPUTF16._IOwnership _out3794;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3793, out _out3794);
              r = _out3793;
              resultingOwnership = _out3794;
              readIdents = _8001_recIdents;
            }
          } else if (_source288.is_Multiset) {
            DAST._IType _8002___mcc_h772 = _source288.dtor_element;
            {
              RAST._IExpr _8003_recursiveGen;
              DCOMPUTF16._IOwnership _8004_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8005_recIdents;
              RAST._IExpr _out3795;
              DCOMPUTF16._IOwnership _out3796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3797;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3795, out _out3796, out _out3797);
              _8003_recursiveGen = _out3795;
              _8004_recOwned = _out3796;
              _8005_recIdents = _out3797;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8003_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3798;
              DCOMPUTF16._IOwnership _out3799;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3798, out _out3799);
              r = _out3798;
              resultingOwnership = _out3799;
              readIdents = _8005_recIdents;
            }
          } else if (_source288.is_Map) {
            DAST._IType _8006___mcc_h774 = _source288.dtor_key;
            DAST._IType _8007___mcc_h775 = _source288.dtor_value;
            {
              RAST._IExpr _8008_recursiveGen;
              DCOMPUTF16._IOwnership _8009_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8010_recIdents;
              RAST._IExpr _out3800;
              DCOMPUTF16._IOwnership _out3801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3802;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3800, out _out3801, out _out3802);
              _8008_recursiveGen = _out3800;
              _8009_recOwned = _out3801;
              _8010_recIdents = _out3802;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8008_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3803;
              DCOMPUTF16._IOwnership _out3804;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3803, out _out3804);
              r = _out3803;
              resultingOwnership = _out3804;
              readIdents = _8010_recIdents;
            }
          } else if (_source288.is_SetBuilder) {
            DAST._IType _8011___mcc_h778 = _source288.dtor_element;
            {
              RAST._IExpr _8012_recursiveGen;
              DCOMPUTF16._IOwnership _8013_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8014_recIdents;
              RAST._IExpr _out3805;
              DCOMPUTF16._IOwnership _out3806;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3807;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3805, out _out3806, out _out3807);
              _8012_recursiveGen = _out3805;
              _8013_recOwned = _out3806;
              _8014_recIdents = _out3807;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8012_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3808;
              DCOMPUTF16._IOwnership _out3809;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3808, out _out3809);
              r = _out3808;
              resultingOwnership = _out3809;
              readIdents = _8014_recIdents;
            }
          } else if (_source288.is_MapBuilder) {
            DAST._IType _8015___mcc_h780 = _source288.dtor_key;
            DAST._IType _8016___mcc_h781 = _source288.dtor_value;
            {
              RAST._IExpr _8017_recursiveGen;
              DCOMPUTF16._IOwnership _8018_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8019_recIdents;
              RAST._IExpr _out3810;
              DCOMPUTF16._IOwnership _out3811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3812;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3810, out _out3811, out _out3812);
              _8017_recursiveGen = _out3810;
              _8018_recOwned = _out3811;
              _8019_recIdents = _out3812;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8017_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3813;
              DCOMPUTF16._IOwnership _out3814;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3813, out _out3814);
              r = _out3813;
              resultingOwnership = _out3814;
              readIdents = _8019_recIdents;
            }
          } else if (_source288.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8020___mcc_h784 = _source288.dtor_args;
            DAST._IType _8021___mcc_h785 = _source288.dtor_result;
            {
              RAST._IExpr _8022_recursiveGen;
              DCOMPUTF16._IOwnership _8023_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8024_recIdents;
              RAST._IExpr _out3815;
              DCOMPUTF16._IOwnership _out3816;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3817;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3815, out _out3816, out _out3817);
              _8022_recursiveGen = _out3815;
              _8023_recOwned = _out3816;
              _8024_recIdents = _out3817;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8022_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3818;
              DCOMPUTF16._IOwnership _out3819;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3818, out _out3819);
              r = _out3818;
              resultingOwnership = _out3819;
              readIdents = _8024_recIdents;
            }
          } else if (_source288.is_Primitive) {
            DAST._IPrimitive _8025___mcc_h788 = _source288.dtor_Primitive_a0;
            {
              RAST._IExpr _8026_recursiveGen;
              DCOMPUTF16._IOwnership _8027_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8028_recIdents;
              RAST._IExpr _out3820;
              DCOMPUTF16._IOwnership _out3821;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3822;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3820, out _out3821, out _out3822);
              _8026_recursiveGen = _out3820;
              _8027_recOwned = _out3821;
              _8028_recIdents = _out3822;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8026_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3823;
              DCOMPUTF16._IOwnership _out3824;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3823, out _out3824);
              r = _out3823;
              resultingOwnership = _out3824;
              readIdents = _8028_recIdents;
            }
          } else if (_source288.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8029___mcc_h790 = _source288.dtor_Passthrough_a0;
            {
              RAST._IExpr _8030_recursiveGen;
              DCOMPUTF16._IOwnership _8031_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8032_recIdents;
              RAST._IExpr _out3825;
              DCOMPUTF16._IOwnership _out3826;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3827;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3825, out _out3826, out _out3827);
              _8030_recursiveGen = _out3825;
              _8031_recOwned = _out3826;
              _8032_recIdents = _out3827;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8030_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3828;
              DCOMPUTF16._IOwnership _out3829;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3828, out _out3829);
              r = _out3828;
              resultingOwnership = _out3829;
              readIdents = _8032_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8033___mcc_h792 = _source288.dtor_TypeArg_a0;
            {
              RAST._IExpr _8034_recursiveGen;
              DCOMPUTF16._IOwnership _8035_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8036_recIdents;
              RAST._IExpr _out3830;
              DCOMPUTF16._IOwnership _out3831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3832;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3830, out _out3831, out _out3832);
              _8034_recursiveGen = _out3830;
              _8035_recOwned = _out3831;
              _8036_recIdents = _out3832;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8034_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3833;
              DCOMPUTF16._IOwnership _out3834;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3833, out _out3834);
              r = _out3833;
              resultingOwnership = _out3834;
              readIdents = _8036_recIdents;
            }
          }
        } else if (_source254.is_Arrow) {
          Dafny.ISequence<DAST._IType> _8037___mcc_h794 = _source254.dtor_args;
          DAST._IType _8038___mcc_h795 = _source254.dtor_result;
          DAST._IType _source291 = _6970___mcc_h1;
          if (_source291.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8039___mcc_h802 = _source291.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8040___mcc_h803 = _source291.dtor_typeArgs;
            DAST._IResolvedType _8041___mcc_h804 = _source291.dtor_resolved;
            DAST._IResolvedType _source292 = _8041___mcc_h804;
            if (_source292.is_Datatype) {
              DAST._IDatatypeType _8042___mcc_h808 = _source292.dtor_datatypeType;
              {
                RAST._IExpr _8043_recursiveGen;
                DCOMPUTF16._IOwnership _8044_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8045_recIdents;
                RAST._IExpr _out3835;
                DCOMPUTF16._IOwnership _out3836;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3837;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3835, out _out3836, out _out3837);
                _8043_recursiveGen = _out3835;
                _8044_recOwned = _out3836;
                _8045_recIdents = _out3837;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8043_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3838;
                DCOMPUTF16._IOwnership _out3839;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3838, out _out3839);
                r = _out3838;
                resultingOwnership = _out3839;
                readIdents = _8045_recIdents;
              }
            } else if (_source292.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8046___mcc_h810 = _source292.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8047___mcc_h811 = _source292.dtor_attributes;
              {
                RAST._IExpr _8048_recursiveGen;
                DCOMPUTF16._IOwnership _8049_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8050_recIdents;
                RAST._IExpr _out3840;
                DCOMPUTF16._IOwnership _out3841;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3842;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3840, out _out3841, out _out3842);
                _8048_recursiveGen = _out3840;
                _8049_recOwned = _out3841;
                _8050_recIdents = _out3842;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8048_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3843;
                DCOMPUTF16._IOwnership _out3844;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3843, out _out3844);
                r = _out3843;
                resultingOwnership = _out3844;
                readIdents = _8050_recIdents;
              }
            } else {
              DAST._IType _8051___mcc_h814 = _source292.dtor_baseType;
              DAST._INewtypeRange _8052___mcc_h815 = _source292.dtor_range;
              bool _8053___mcc_h816 = _source292.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8054___mcc_h817 = _source292.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8055_attributes = _8054___mcc_h817;
              bool _8056_erase = _8053___mcc_h816;
              DAST._INewtypeRange _8057_range = _8052___mcc_h815;
              DAST._IType _8058_b = _8051___mcc_h814;
              {
                if (object.Equals(_6964_fromTpe, _8058_b)) {
                  RAST._IExpr _8059_recursiveGen;
                  DCOMPUTF16._IOwnership _8060_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8061_recIdents;
                  RAST._IExpr _out3845;
                  DCOMPUTF16._IOwnership _out3846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3847;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3845, out _out3846, out _out3847);
                  _8059_recursiveGen = _out3845;
                  _8060_recOwned = _out3846;
                  _8061_recIdents = _out3847;
                  Std.Wrappers._IOption<RAST._IType> _8062_potentialRhsType;
                  _8062_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8058_b, _8057_range);
                  Std.Wrappers._IOption<RAST._IType> _source293 = _8062_potentialRhsType;
                  if (_source293.is_None) {
                    if (_8056_erase) {
                      r = _8059_recursiveGen;
                    } else {
                      RAST._IType _8063_rhsType;
                      RAST._IType _out3848;
                      _out3848 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _8063_rhsType = _out3848;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8063_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8059_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3849;
                    DCOMPUTF16._IOwnership _out3850;
                    DCOMPUTF16.COMP.FromOwnership(r, _8060_recOwned, expectedOwnership, out _out3849, out _out3850);
                    r = _out3849;
                    resultingOwnership = _out3850;
                  } else {
                    RAST._IType _8064___mcc_h1257 = _source293.dtor_value;
                    RAST._IType _8065_v = _8064___mcc_h1257;
                    r = RAST.Expr.create_ConversionNum(_8065_v, _8059_recursiveGen);
                    RAST._IExpr _out3851;
                    DCOMPUTF16._IOwnership _out3852;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3851, out _out3852);
                    r = _out3851;
                    resultingOwnership = _out3852;
                  }
                  readIdents = _8061_recIdents;
                } else {
                  RAST._IExpr _out3853;
                  DCOMPUTF16._IOwnership _out3854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3855;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _8058_b), _8058_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3853, out _out3854, out _out3855);
                  r = _out3853;
                  resultingOwnership = _out3854;
                  readIdents = _out3855;
                }
              }
            }
          } else if (_source291.is_Nullable) {
            DAST._IType _8066___mcc_h822 = _source291.dtor_Nullable_a0;
            {
              RAST._IExpr _8067_recursiveGen;
              DCOMPUTF16._IOwnership _8068_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8069_recIdents;
              RAST._IExpr _out3856;
              DCOMPUTF16._IOwnership _out3857;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3858;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3856, out _out3857, out _out3858);
              _8067_recursiveGen = _out3856;
              _8068_recOwned = _out3857;
              _8069_recIdents = _out3858;
              r = _8067_recursiveGen;
              if (object.Equals(_8068_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out3859;
              DCOMPUTF16._IOwnership _out3860;
              DCOMPUTF16.COMP.FromOwnership(r, _8068_recOwned, expectedOwnership, out _out3859, out _out3860);
              r = _out3859;
              resultingOwnership = _out3860;
              readIdents = _8069_recIdents;
            }
          } else if (_source291.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8070___mcc_h824 = _source291.dtor_Tuple_a0;
            {
              RAST._IExpr _8071_recursiveGen;
              DCOMPUTF16._IOwnership _8072_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8073_recIdents;
              RAST._IExpr _out3861;
              DCOMPUTF16._IOwnership _out3862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3863;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3861, out _out3862, out _out3863);
              _8071_recursiveGen = _out3861;
              _8072_recOwned = _out3862;
              _8073_recIdents = _out3863;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8071_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3864;
              DCOMPUTF16._IOwnership _out3865;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3864, out _out3865);
              r = _out3864;
              resultingOwnership = _out3865;
              readIdents = _8073_recIdents;
            }
          } else if (_source291.is_Array) {
            DAST._IType _8074___mcc_h826 = _source291.dtor_element;
            BigInteger _8075___mcc_h827 = _source291.dtor_dims;
            {
              RAST._IExpr _8076_recursiveGen;
              DCOMPUTF16._IOwnership _8077_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8078_recIdents;
              RAST._IExpr _out3866;
              DCOMPUTF16._IOwnership _out3867;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3868;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3866, out _out3867, out _out3868);
              _8076_recursiveGen = _out3866;
              _8077_recOwned = _out3867;
              _8078_recIdents = _out3868;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8076_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3869;
              DCOMPUTF16._IOwnership _out3870;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3869, out _out3870);
              r = _out3869;
              resultingOwnership = _out3870;
              readIdents = _8078_recIdents;
            }
          } else if (_source291.is_Seq) {
            DAST._IType _8079___mcc_h830 = _source291.dtor_element;
            {
              RAST._IExpr _8080_recursiveGen;
              DCOMPUTF16._IOwnership _8081_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8082_recIdents;
              RAST._IExpr _out3871;
              DCOMPUTF16._IOwnership _out3872;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3873;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3871, out _out3872, out _out3873);
              _8080_recursiveGen = _out3871;
              _8081_recOwned = _out3872;
              _8082_recIdents = _out3873;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8080_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3874;
              DCOMPUTF16._IOwnership _out3875;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3874, out _out3875);
              r = _out3874;
              resultingOwnership = _out3875;
              readIdents = _8082_recIdents;
            }
          } else if (_source291.is_Set) {
            DAST._IType _8083___mcc_h832 = _source291.dtor_element;
            {
              RAST._IExpr _8084_recursiveGen;
              DCOMPUTF16._IOwnership _8085_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8086_recIdents;
              RAST._IExpr _out3876;
              DCOMPUTF16._IOwnership _out3877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3878;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3876, out _out3877, out _out3878);
              _8084_recursiveGen = _out3876;
              _8085_recOwned = _out3877;
              _8086_recIdents = _out3878;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8084_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3879;
              DCOMPUTF16._IOwnership _out3880;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3879, out _out3880);
              r = _out3879;
              resultingOwnership = _out3880;
              readIdents = _8086_recIdents;
            }
          } else if (_source291.is_Multiset) {
            DAST._IType _8087___mcc_h834 = _source291.dtor_element;
            {
              RAST._IExpr _8088_recursiveGen;
              DCOMPUTF16._IOwnership _8089_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8090_recIdents;
              RAST._IExpr _out3881;
              DCOMPUTF16._IOwnership _out3882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3883;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3881, out _out3882, out _out3883);
              _8088_recursiveGen = _out3881;
              _8089_recOwned = _out3882;
              _8090_recIdents = _out3883;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8088_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3884;
              DCOMPUTF16._IOwnership _out3885;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3884, out _out3885);
              r = _out3884;
              resultingOwnership = _out3885;
              readIdents = _8090_recIdents;
            }
          } else if (_source291.is_Map) {
            DAST._IType _8091___mcc_h836 = _source291.dtor_key;
            DAST._IType _8092___mcc_h837 = _source291.dtor_value;
            {
              RAST._IExpr _8093_recursiveGen;
              DCOMPUTF16._IOwnership _8094_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8095_recIdents;
              RAST._IExpr _out3886;
              DCOMPUTF16._IOwnership _out3887;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3888;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3886, out _out3887, out _out3888);
              _8093_recursiveGen = _out3886;
              _8094_recOwned = _out3887;
              _8095_recIdents = _out3888;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8093_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3889;
              DCOMPUTF16._IOwnership _out3890;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3889, out _out3890);
              r = _out3889;
              resultingOwnership = _out3890;
              readIdents = _8095_recIdents;
            }
          } else if (_source291.is_SetBuilder) {
            DAST._IType _8096___mcc_h840 = _source291.dtor_element;
            {
              RAST._IExpr _8097_recursiveGen;
              DCOMPUTF16._IOwnership _8098_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8099_recIdents;
              RAST._IExpr _out3891;
              DCOMPUTF16._IOwnership _out3892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3893;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3891, out _out3892, out _out3893);
              _8097_recursiveGen = _out3891;
              _8098_recOwned = _out3892;
              _8099_recIdents = _out3893;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8097_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3894;
              DCOMPUTF16._IOwnership _out3895;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3894, out _out3895);
              r = _out3894;
              resultingOwnership = _out3895;
              readIdents = _8099_recIdents;
            }
          } else if (_source291.is_MapBuilder) {
            DAST._IType _8100___mcc_h842 = _source291.dtor_key;
            DAST._IType _8101___mcc_h843 = _source291.dtor_value;
            {
              RAST._IExpr _8102_recursiveGen;
              DCOMPUTF16._IOwnership _8103_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8104_recIdents;
              RAST._IExpr _out3896;
              DCOMPUTF16._IOwnership _out3897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3898;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3896, out _out3897, out _out3898);
              _8102_recursiveGen = _out3896;
              _8103_recOwned = _out3897;
              _8104_recIdents = _out3898;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8102_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3899;
              DCOMPUTF16._IOwnership _out3900;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3899, out _out3900);
              r = _out3899;
              resultingOwnership = _out3900;
              readIdents = _8104_recIdents;
            }
          } else if (_source291.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8105___mcc_h846 = _source291.dtor_args;
            DAST._IType _8106___mcc_h847 = _source291.dtor_result;
            {
              RAST._IExpr _8107_recursiveGen;
              DCOMPUTF16._IOwnership _8108_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8109_recIdents;
              RAST._IExpr _out3901;
              DCOMPUTF16._IOwnership _out3902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3903;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3901, out _out3902, out _out3903);
              _8107_recursiveGen = _out3901;
              _8108_recOwned = _out3902;
              _8109_recIdents = _out3903;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8107_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3904;
              DCOMPUTF16._IOwnership _out3905;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3904, out _out3905);
              r = _out3904;
              resultingOwnership = _out3905;
              readIdents = _8109_recIdents;
            }
          } else if (_source291.is_Primitive) {
            DAST._IPrimitive _8110___mcc_h850 = _source291.dtor_Primitive_a0;
            {
              RAST._IExpr _8111_recursiveGen;
              DCOMPUTF16._IOwnership _8112_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8113_recIdents;
              RAST._IExpr _out3906;
              DCOMPUTF16._IOwnership _out3907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3908;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3906, out _out3907, out _out3908);
              _8111_recursiveGen = _out3906;
              _8112_recOwned = _out3907;
              _8113_recIdents = _out3908;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8111_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3909;
              DCOMPUTF16._IOwnership _out3910;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3909, out _out3910);
              r = _out3909;
              resultingOwnership = _out3910;
              readIdents = _8113_recIdents;
            }
          } else if (_source291.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8114___mcc_h852 = _source291.dtor_Passthrough_a0;
            {
              RAST._IExpr _8115_recursiveGen;
              DCOMPUTF16._IOwnership _8116_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8117_recIdents;
              RAST._IExpr _out3911;
              DCOMPUTF16._IOwnership _out3912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3913;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3911, out _out3912, out _out3913);
              _8115_recursiveGen = _out3911;
              _8116_recOwned = _out3912;
              _8117_recIdents = _out3913;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8115_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3914;
              DCOMPUTF16._IOwnership _out3915;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3914, out _out3915);
              r = _out3914;
              resultingOwnership = _out3915;
              readIdents = _8117_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8118___mcc_h854 = _source291.dtor_TypeArg_a0;
            {
              RAST._IExpr _8119_recursiveGen;
              DCOMPUTF16._IOwnership _8120_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8121_recIdents;
              RAST._IExpr _out3916;
              DCOMPUTF16._IOwnership _out3917;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3918;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3916, out _out3917, out _out3918);
              _8119_recursiveGen = _out3916;
              _8120_recOwned = _out3917;
              _8121_recIdents = _out3918;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8119_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out3919;
              DCOMPUTF16._IOwnership _out3920;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3919, out _out3920);
              r = _out3919;
              resultingOwnership = _out3920;
              readIdents = _8121_recIdents;
            }
          }
        } else if (_source254.is_Primitive) {
          DAST._IPrimitive _8122___mcc_h856 = _source254.dtor_Primitive_a0;
          DAST._IPrimitive _source294 = _8122___mcc_h856;
          if (_source294.is_Int) {
            DAST._IType _source295 = _6970___mcc_h1;
            if (_source295.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8123___mcc_h860 = _source295.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _8124___mcc_h861 = _source295.dtor_typeArgs;
              DAST._IResolvedType _8125___mcc_h862 = _source295.dtor_resolved;
              DAST._IResolvedType _source296 = _8125___mcc_h862;
              if (_source296.is_Datatype) {
                DAST._IDatatypeType _8126___mcc_h866 = _source296.dtor_datatypeType;
                {
                  RAST._IExpr _8127_recursiveGen;
                  DCOMPUTF16._IOwnership _8128_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8129_recIdents;
                  RAST._IExpr _out3921;
                  DCOMPUTF16._IOwnership _out3922;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3923;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3921, out _out3922, out _out3923);
                  _8127_recursiveGen = _out3921;
                  _8128_recOwned = _out3922;
                  _8129_recIdents = _out3923;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8127_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3924;
                  DCOMPUTF16._IOwnership _out3925;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3924, out _out3925);
                  r = _out3924;
                  resultingOwnership = _out3925;
                  readIdents = _8129_recIdents;
                }
              } else if (_source296.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8130___mcc_h868 = _source296.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _8131___mcc_h869 = _source296.dtor_attributes;
                {
                  RAST._IExpr _8132_recursiveGen;
                  DCOMPUTF16._IOwnership _8133_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8134_recIdents;
                  RAST._IExpr _out3926;
                  DCOMPUTF16._IOwnership _out3927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3928;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3926, out _out3927, out _out3928);
                  _8132_recursiveGen = _out3926;
                  _8133_recOwned = _out3927;
                  _8134_recIdents = _out3928;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8132_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3929;
                  DCOMPUTF16._IOwnership _out3930;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3929, out _out3930);
                  r = _out3929;
                  resultingOwnership = _out3930;
                  readIdents = _8134_recIdents;
                }
              } else {
                DAST._IType _8135___mcc_h872 = _source296.dtor_baseType;
                DAST._INewtypeRange _8136___mcc_h873 = _source296.dtor_range;
                bool _8137___mcc_h874 = _source296.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _8138___mcc_h875 = _source296.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8139_attributes = _8138___mcc_h875;
                bool _8140_erase = _8137___mcc_h874;
                DAST._INewtypeRange _8141_range = _8136___mcc_h873;
                DAST._IType _8142_b = _8135___mcc_h872;
                {
                  if (object.Equals(_6964_fromTpe, _8142_b)) {
                    RAST._IExpr _8143_recursiveGen;
                    DCOMPUTF16._IOwnership _8144_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8145_recIdents;
                    RAST._IExpr _out3931;
                    DCOMPUTF16._IOwnership _out3932;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3933;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3931, out _out3932, out _out3933);
                    _8143_recursiveGen = _out3931;
                    _8144_recOwned = _out3932;
                    _8145_recIdents = _out3933;
                    Std.Wrappers._IOption<RAST._IType> _8146_potentialRhsType;
                    _8146_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8142_b, _8141_range);
                    Std.Wrappers._IOption<RAST._IType> _source297 = _8146_potentialRhsType;
                    if (_source297.is_None) {
                      if (_8140_erase) {
                        r = _8143_recursiveGen;
                      } else {
                        RAST._IType _8147_rhsType;
                        RAST._IType _out3934;
                        _out3934 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                        _8147_rhsType = _out3934;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8147_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8143_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3935;
                      DCOMPUTF16._IOwnership _out3936;
                      DCOMPUTF16.COMP.FromOwnership(r, _8144_recOwned, expectedOwnership, out _out3935, out _out3936);
                      r = _out3935;
                      resultingOwnership = _out3936;
                    } else {
                      RAST._IType _8148___mcc_h1258 = _source297.dtor_value;
                      RAST._IType _8149_v = _8148___mcc_h1258;
                      r = RAST.Expr.create_ConversionNum(_8149_v, _8143_recursiveGen);
                      RAST._IExpr _out3937;
                      DCOMPUTF16._IOwnership _out3938;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3937, out _out3938);
                      r = _out3937;
                      resultingOwnership = _out3938;
                    }
                    readIdents = _8145_recIdents;
                  } else {
                    RAST._IExpr _out3939;
                    DCOMPUTF16._IOwnership _out3940;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3941;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _8142_b), _8142_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out3939, out _out3940, out _out3941);
                    r = _out3939;
                    resultingOwnership = _out3940;
                    readIdents = _out3941;
                  }
                }
              }
            } else if (_source295.is_Nullable) {
              DAST._IType _8150___mcc_h880 = _source295.dtor_Nullable_a0;
              {
                RAST._IExpr _8151_recursiveGen;
                DCOMPUTF16._IOwnership _8152_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8153_recIdents;
                RAST._IExpr _out3942;
                DCOMPUTF16._IOwnership _out3943;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3944;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3942, out _out3943, out _out3944);
                _8151_recursiveGen = _out3942;
                _8152_recOwned = _out3943;
                _8153_recIdents = _out3944;
                r = _8151_recursiveGen;
                if (object.Equals(_8152_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out3945;
                DCOMPUTF16._IOwnership _out3946;
                DCOMPUTF16.COMP.FromOwnership(r, _8152_recOwned, expectedOwnership, out _out3945, out _out3946);
                r = _out3945;
                resultingOwnership = _out3946;
                readIdents = _8153_recIdents;
              }
            } else if (_source295.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8154___mcc_h882 = _source295.dtor_Tuple_a0;
              {
                RAST._IExpr _8155_recursiveGen;
                DCOMPUTF16._IOwnership _8156_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8157_recIdents;
                RAST._IExpr _out3947;
                DCOMPUTF16._IOwnership _out3948;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3949;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3947, out _out3948, out _out3949);
                _8155_recursiveGen = _out3947;
                _8156_recOwned = _out3948;
                _8157_recIdents = _out3949;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8155_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3950;
                DCOMPUTF16._IOwnership _out3951;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3950, out _out3951);
                r = _out3950;
                resultingOwnership = _out3951;
                readIdents = _8157_recIdents;
              }
            } else if (_source295.is_Array) {
              DAST._IType _8158___mcc_h884 = _source295.dtor_element;
              BigInteger _8159___mcc_h885 = _source295.dtor_dims;
              {
                RAST._IExpr _8160_recursiveGen;
                DCOMPUTF16._IOwnership _8161_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8162_recIdents;
                RAST._IExpr _out3952;
                DCOMPUTF16._IOwnership _out3953;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3954;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3952, out _out3953, out _out3954);
                _8160_recursiveGen = _out3952;
                _8161_recOwned = _out3953;
                _8162_recIdents = _out3954;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8160_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3955;
                DCOMPUTF16._IOwnership _out3956;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3955, out _out3956);
                r = _out3955;
                resultingOwnership = _out3956;
                readIdents = _8162_recIdents;
              }
            } else if (_source295.is_Seq) {
              DAST._IType _8163___mcc_h888 = _source295.dtor_element;
              {
                RAST._IExpr _8164_recursiveGen;
                DCOMPUTF16._IOwnership _8165_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8166_recIdents;
                RAST._IExpr _out3957;
                DCOMPUTF16._IOwnership _out3958;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3959;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3957, out _out3958, out _out3959);
                _8164_recursiveGen = _out3957;
                _8165_recOwned = _out3958;
                _8166_recIdents = _out3959;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8164_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3960;
                DCOMPUTF16._IOwnership _out3961;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3960, out _out3961);
                r = _out3960;
                resultingOwnership = _out3961;
                readIdents = _8166_recIdents;
              }
            } else if (_source295.is_Set) {
              DAST._IType _8167___mcc_h890 = _source295.dtor_element;
              {
                RAST._IExpr _8168_recursiveGen;
                DCOMPUTF16._IOwnership _8169_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8170_recIdents;
                RAST._IExpr _out3962;
                DCOMPUTF16._IOwnership _out3963;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3964;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3962, out _out3963, out _out3964);
                _8168_recursiveGen = _out3962;
                _8169_recOwned = _out3963;
                _8170_recIdents = _out3964;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8168_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3965;
                DCOMPUTF16._IOwnership _out3966;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3965, out _out3966);
                r = _out3965;
                resultingOwnership = _out3966;
                readIdents = _8170_recIdents;
              }
            } else if (_source295.is_Multiset) {
              DAST._IType _8171___mcc_h892 = _source295.dtor_element;
              {
                RAST._IExpr _8172_recursiveGen;
                DCOMPUTF16._IOwnership _8173_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8174_recIdents;
                RAST._IExpr _out3967;
                DCOMPUTF16._IOwnership _out3968;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3969;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3967, out _out3968, out _out3969);
                _8172_recursiveGen = _out3967;
                _8173_recOwned = _out3968;
                _8174_recIdents = _out3969;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8172_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3970;
                DCOMPUTF16._IOwnership _out3971;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3970, out _out3971);
                r = _out3970;
                resultingOwnership = _out3971;
                readIdents = _8174_recIdents;
              }
            } else if (_source295.is_Map) {
              DAST._IType _8175___mcc_h894 = _source295.dtor_key;
              DAST._IType _8176___mcc_h895 = _source295.dtor_value;
              {
                RAST._IExpr _8177_recursiveGen;
                DCOMPUTF16._IOwnership _8178_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8179_recIdents;
                RAST._IExpr _out3972;
                DCOMPUTF16._IOwnership _out3973;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3974;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3972, out _out3973, out _out3974);
                _8177_recursiveGen = _out3972;
                _8178_recOwned = _out3973;
                _8179_recIdents = _out3974;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8177_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3975;
                DCOMPUTF16._IOwnership _out3976;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3975, out _out3976);
                r = _out3975;
                resultingOwnership = _out3976;
                readIdents = _8179_recIdents;
              }
            } else if (_source295.is_SetBuilder) {
              DAST._IType _8180___mcc_h898 = _source295.dtor_element;
              {
                RAST._IExpr _8181_recursiveGen;
                DCOMPUTF16._IOwnership _8182_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8183_recIdents;
                RAST._IExpr _out3977;
                DCOMPUTF16._IOwnership _out3978;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3979;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3977, out _out3978, out _out3979);
                _8181_recursiveGen = _out3977;
                _8182_recOwned = _out3978;
                _8183_recIdents = _out3979;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8181_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3980;
                DCOMPUTF16._IOwnership _out3981;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3980, out _out3981);
                r = _out3980;
                resultingOwnership = _out3981;
                readIdents = _8183_recIdents;
              }
            } else if (_source295.is_MapBuilder) {
              DAST._IType _8184___mcc_h900 = _source295.dtor_key;
              DAST._IType _8185___mcc_h901 = _source295.dtor_value;
              {
                RAST._IExpr _8186_recursiveGen;
                DCOMPUTF16._IOwnership _8187_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8188_recIdents;
                RAST._IExpr _out3982;
                DCOMPUTF16._IOwnership _out3983;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3984;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3982, out _out3983, out _out3984);
                _8186_recursiveGen = _out3982;
                _8187_recOwned = _out3983;
                _8188_recIdents = _out3984;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8186_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3985;
                DCOMPUTF16._IOwnership _out3986;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3985, out _out3986);
                r = _out3985;
                resultingOwnership = _out3986;
                readIdents = _8188_recIdents;
              }
            } else if (_source295.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8189___mcc_h904 = _source295.dtor_args;
              DAST._IType _8190___mcc_h905 = _source295.dtor_result;
              {
                RAST._IExpr _8191_recursiveGen;
                DCOMPUTF16._IOwnership _8192_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8193_recIdents;
                RAST._IExpr _out3987;
                DCOMPUTF16._IOwnership _out3988;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3989;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3987, out _out3988, out _out3989);
                _8191_recursiveGen = _out3987;
                _8192_recOwned = _out3988;
                _8193_recIdents = _out3989;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8191_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out3990;
                DCOMPUTF16._IOwnership _out3991;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3990, out _out3991);
                r = _out3990;
                resultingOwnership = _out3991;
                readIdents = _8193_recIdents;
              }
            } else if (_source295.is_Primitive) {
              DAST._IPrimitive _8194___mcc_h908 = _source295.dtor_Primitive_a0;
              DAST._IPrimitive _source298 = _8194___mcc_h908;
              if (_source298.is_Int) {
                {
                  RAST._IExpr _8195_recursiveGen;
                  DCOMPUTF16._IOwnership _8196_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8197_recIdents;
                  RAST._IExpr _out3992;
                  DCOMPUTF16._IOwnership _out3993;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3994;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out3992, out _out3993, out _out3994);
                  _8195_recursiveGen = _out3992;
                  _8196_recOwned = _out3993;
                  _8197_recIdents = _out3994;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8195_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out3995;
                  DCOMPUTF16._IOwnership _out3996;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3995, out _out3996);
                  r = _out3995;
                  resultingOwnership = _out3996;
                  readIdents = _8197_recIdents;
                }
              } else if (_source298.is_Real) {
                {
                  RAST._IExpr _8198_recursiveGen;
                  DCOMPUTF16._IOwnership _8199___v78;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8200_recIdents;
                  RAST._IExpr _out3997;
                  DCOMPUTF16._IOwnership _out3998;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3999;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3997, out _out3998, out _out3999);
                  _8198_recursiveGen = _out3997;
                  _8199___v78 = _out3998;
                  _8200_recIdents = _out3999;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_8198_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out4000;
                  DCOMPUTF16._IOwnership _out4001;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4000, out _out4001);
                  r = _out4000;
                  resultingOwnership = _out4001;
                  readIdents = _8200_recIdents;
                }
              } else if (_source298.is_String) {
                {
                  RAST._IExpr _8201_recursiveGen;
                  DCOMPUTF16._IOwnership _8202_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8203_recIdents;
                  RAST._IExpr _out4002;
                  DCOMPUTF16._IOwnership _out4003;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4004;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4002, out _out4003, out _out4004);
                  _8201_recursiveGen = _out4002;
                  _8202_recOwned = _out4003;
                  _8203_recIdents = _out4004;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8201_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4005;
                  DCOMPUTF16._IOwnership _out4006;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4005, out _out4006);
                  r = _out4005;
                  resultingOwnership = _out4006;
                  readIdents = _8203_recIdents;
                }
              } else if (_source298.is_Bool) {
                {
                  RAST._IExpr _8204_recursiveGen;
                  DCOMPUTF16._IOwnership _8205_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8206_recIdents;
                  RAST._IExpr _out4007;
                  DCOMPUTF16._IOwnership _out4008;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4009;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4007, out _out4008, out _out4009);
                  _8204_recursiveGen = _out4007;
                  _8205_recOwned = _out4008;
                  _8206_recIdents = _out4009;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8204_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4010;
                  DCOMPUTF16._IOwnership _out4011;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4010, out _out4011);
                  r = _out4010;
                  resultingOwnership = _out4011;
                  readIdents = _8206_recIdents;
                }
              } else {
                {
                  RAST._IType _8207_rhsType;
                  RAST._IType _out4012;
                  _out4012 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                  _8207_rhsType = _out4012;
                  RAST._IExpr _8208_recursiveGen;
                  DCOMPUTF16._IOwnership _8209___v84;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8210_recIdents;
                  RAST._IExpr _out4013;
                  DCOMPUTF16._IOwnership _out4014;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4015;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4013, out _out4014, out _out4015);
                  _8208_recursiveGen = _out4013;
                  _8209___v84 = _out4014;
                  _8210_recIdents = _out4015;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_8208_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out4016;
                  DCOMPUTF16._IOwnership _out4017;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4016, out _out4017);
                  r = _out4016;
                  resultingOwnership = _out4017;
                  readIdents = _8210_recIdents;
                }
              }
            } else if (_source295.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8211___mcc_h910 = _source295.dtor_Passthrough_a0;
              {
                RAST._IType _8212_rhsType;
                RAST._IType _out4018;
                _out4018 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                _8212_rhsType = _out4018;
                RAST._IExpr _8213_recursiveGen;
                DCOMPUTF16._IOwnership _8214___v81;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8215_recIdents;
                RAST._IExpr _out4019;
                DCOMPUTF16._IOwnership _out4020;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4021;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4019, out _out4020, out _out4021);
                _8213_recursiveGen = _out4019;
                _8214___v81 = _out4020;
                _8215_recIdents = _out4021;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_8212_rhsType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_8213_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out4022;
                DCOMPUTF16._IOwnership _out4023;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4022, out _out4023);
                r = _out4022;
                resultingOwnership = _out4023;
                readIdents = _8215_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8216___mcc_h912 = _source295.dtor_TypeArg_a0;
              {
                RAST._IExpr _8217_recursiveGen;
                DCOMPUTF16._IOwnership _8218_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8219_recIdents;
                RAST._IExpr _out4024;
                DCOMPUTF16._IOwnership _out4025;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4026;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4024, out _out4025, out _out4026);
                _8217_recursiveGen = _out4024;
                _8218_recOwned = _out4025;
                _8219_recIdents = _out4026;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8217_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4027;
                DCOMPUTF16._IOwnership _out4028;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4027, out _out4028);
                r = _out4027;
                resultingOwnership = _out4028;
                readIdents = _8219_recIdents;
              }
            }
          } else if (_source294.is_Real) {
            DAST._IType _source299 = _6970___mcc_h1;
            if (_source299.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8220___mcc_h914 = _source299.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _8221___mcc_h915 = _source299.dtor_typeArgs;
              DAST._IResolvedType _8222___mcc_h916 = _source299.dtor_resolved;
              DAST._IResolvedType _source300 = _8222___mcc_h916;
              if (_source300.is_Datatype) {
                DAST._IDatatypeType _8223___mcc_h920 = _source300.dtor_datatypeType;
                {
                  RAST._IExpr _8224_recursiveGen;
                  DCOMPUTF16._IOwnership _8225_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8226_recIdents;
                  RAST._IExpr _out4029;
                  DCOMPUTF16._IOwnership _out4030;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4031;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4029, out _out4030, out _out4031);
                  _8224_recursiveGen = _out4029;
                  _8225_recOwned = _out4030;
                  _8226_recIdents = _out4031;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8224_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4032;
                  DCOMPUTF16._IOwnership _out4033;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4032, out _out4033);
                  r = _out4032;
                  resultingOwnership = _out4033;
                  readIdents = _8226_recIdents;
                }
              } else if (_source300.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8227___mcc_h922 = _source300.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _8228___mcc_h923 = _source300.dtor_attributes;
                {
                  RAST._IExpr _8229_recursiveGen;
                  DCOMPUTF16._IOwnership _8230_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8231_recIdents;
                  RAST._IExpr _out4034;
                  DCOMPUTF16._IOwnership _out4035;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4036;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4034, out _out4035, out _out4036);
                  _8229_recursiveGen = _out4034;
                  _8230_recOwned = _out4035;
                  _8231_recIdents = _out4036;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8229_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4037;
                  DCOMPUTF16._IOwnership _out4038;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4037, out _out4038);
                  r = _out4037;
                  resultingOwnership = _out4038;
                  readIdents = _8231_recIdents;
                }
              } else {
                DAST._IType _8232___mcc_h926 = _source300.dtor_baseType;
                DAST._INewtypeRange _8233___mcc_h927 = _source300.dtor_range;
                bool _8234___mcc_h928 = _source300.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _8235___mcc_h929 = _source300.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8236_attributes = _8235___mcc_h929;
                bool _8237_erase = _8234___mcc_h928;
                DAST._INewtypeRange _8238_range = _8233___mcc_h927;
                DAST._IType _8239_b = _8232___mcc_h926;
                {
                  if (object.Equals(_6964_fromTpe, _8239_b)) {
                    RAST._IExpr _8240_recursiveGen;
                    DCOMPUTF16._IOwnership _8241_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8242_recIdents;
                    RAST._IExpr _out4039;
                    DCOMPUTF16._IOwnership _out4040;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4041;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4039, out _out4040, out _out4041);
                    _8240_recursiveGen = _out4039;
                    _8241_recOwned = _out4040;
                    _8242_recIdents = _out4041;
                    Std.Wrappers._IOption<RAST._IType> _8243_potentialRhsType;
                    _8243_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8239_b, _8238_range);
                    Std.Wrappers._IOption<RAST._IType> _source301 = _8243_potentialRhsType;
                    if (_source301.is_None) {
                      if (_8237_erase) {
                        r = _8240_recursiveGen;
                      } else {
                        RAST._IType _8244_rhsType;
                        RAST._IType _out4042;
                        _out4042 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                        _8244_rhsType = _out4042;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8244_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8240_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4043;
                      DCOMPUTF16._IOwnership _out4044;
                      DCOMPUTF16.COMP.FromOwnership(r, _8241_recOwned, expectedOwnership, out _out4043, out _out4044);
                      r = _out4043;
                      resultingOwnership = _out4044;
                    } else {
                      RAST._IType _8245___mcc_h1259 = _source301.dtor_value;
                      RAST._IType _8246_v = _8245___mcc_h1259;
                      r = RAST.Expr.create_ConversionNum(_8246_v, _8240_recursiveGen);
                      RAST._IExpr _out4045;
                      DCOMPUTF16._IOwnership _out4046;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4045, out _out4046);
                      r = _out4045;
                      resultingOwnership = _out4046;
                    }
                    readIdents = _8242_recIdents;
                  } else {
                    RAST._IExpr _out4047;
                    DCOMPUTF16._IOwnership _out4048;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4049;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _8239_b), _8239_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out4047, out _out4048, out _out4049);
                    r = _out4047;
                    resultingOwnership = _out4048;
                    readIdents = _out4049;
                  }
                }
              }
            } else if (_source299.is_Nullable) {
              DAST._IType _8247___mcc_h934 = _source299.dtor_Nullable_a0;
              {
                RAST._IExpr _8248_recursiveGen;
                DCOMPUTF16._IOwnership _8249_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8250_recIdents;
                RAST._IExpr _out4050;
                DCOMPUTF16._IOwnership _out4051;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4052;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4050, out _out4051, out _out4052);
                _8248_recursiveGen = _out4050;
                _8249_recOwned = _out4051;
                _8250_recIdents = _out4052;
                r = _8248_recursiveGen;
                if (object.Equals(_8249_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4053;
                DCOMPUTF16._IOwnership _out4054;
                DCOMPUTF16.COMP.FromOwnership(r, _8249_recOwned, expectedOwnership, out _out4053, out _out4054);
                r = _out4053;
                resultingOwnership = _out4054;
                readIdents = _8250_recIdents;
              }
            } else if (_source299.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8251___mcc_h936 = _source299.dtor_Tuple_a0;
              {
                RAST._IExpr _8252_recursiveGen;
                DCOMPUTF16._IOwnership _8253_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8254_recIdents;
                RAST._IExpr _out4055;
                DCOMPUTF16._IOwnership _out4056;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4057;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4055, out _out4056, out _out4057);
                _8252_recursiveGen = _out4055;
                _8253_recOwned = _out4056;
                _8254_recIdents = _out4057;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8252_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4058;
                DCOMPUTF16._IOwnership _out4059;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4058, out _out4059);
                r = _out4058;
                resultingOwnership = _out4059;
                readIdents = _8254_recIdents;
              }
            } else if (_source299.is_Array) {
              DAST._IType _8255___mcc_h938 = _source299.dtor_element;
              BigInteger _8256___mcc_h939 = _source299.dtor_dims;
              {
                RAST._IExpr _8257_recursiveGen;
                DCOMPUTF16._IOwnership _8258_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8259_recIdents;
                RAST._IExpr _out4060;
                DCOMPUTF16._IOwnership _out4061;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4062;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4060, out _out4061, out _out4062);
                _8257_recursiveGen = _out4060;
                _8258_recOwned = _out4061;
                _8259_recIdents = _out4062;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8257_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4063;
                DCOMPUTF16._IOwnership _out4064;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4063, out _out4064);
                r = _out4063;
                resultingOwnership = _out4064;
                readIdents = _8259_recIdents;
              }
            } else if (_source299.is_Seq) {
              DAST._IType _8260___mcc_h942 = _source299.dtor_element;
              {
                RAST._IExpr _8261_recursiveGen;
                DCOMPUTF16._IOwnership _8262_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8263_recIdents;
                RAST._IExpr _out4065;
                DCOMPUTF16._IOwnership _out4066;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4067;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4065, out _out4066, out _out4067);
                _8261_recursiveGen = _out4065;
                _8262_recOwned = _out4066;
                _8263_recIdents = _out4067;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8261_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4068;
                DCOMPUTF16._IOwnership _out4069;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4068, out _out4069);
                r = _out4068;
                resultingOwnership = _out4069;
                readIdents = _8263_recIdents;
              }
            } else if (_source299.is_Set) {
              DAST._IType _8264___mcc_h944 = _source299.dtor_element;
              {
                RAST._IExpr _8265_recursiveGen;
                DCOMPUTF16._IOwnership _8266_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8267_recIdents;
                RAST._IExpr _out4070;
                DCOMPUTF16._IOwnership _out4071;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4072;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4070, out _out4071, out _out4072);
                _8265_recursiveGen = _out4070;
                _8266_recOwned = _out4071;
                _8267_recIdents = _out4072;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8265_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4073;
                DCOMPUTF16._IOwnership _out4074;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4073, out _out4074);
                r = _out4073;
                resultingOwnership = _out4074;
                readIdents = _8267_recIdents;
              }
            } else if (_source299.is_Multiset) {
              DAST._IType _8268___mcc_h946 = _source299.dtor_element;
              {
                RAST._IExpr _8269_recursiveGen;
                DCOMPUTF16._IOwnership _8270_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8271_recIdents;
                RAST._IExpr _out4075;
                DCOMPUTF16._IOwnership _out4076;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4077;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4075, out _out4076, out _out4077);
                _8269_recursiveGen = _out4075;
                _8270_recOwned = _out4076;
                _8271_recIdents = _out4077;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8269_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4078;
                DCOMPUTF16._IOwnership _out4079;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4078, out _out4079);
                r = _out4078;
                resultingOwnership = _out4079;
                readIdents = _8271_recIdents;
              }
            } else if (_source299.is_Map) {
              DAST._IType _8272___mcc_h948 = _source299.dtor_key;
              DAST._IType _8273___mcc_h949 = _source299.dtor_value;
              {
                RAST._IExpr _8274_recursiveGen;
                DCOMPUTF16._IOwnership _8275_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8276_recIdents;
                RAST._IExpr _out4080;
                DCOMPUTF16._IOwnership _out4081;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4082;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4080, out _out4081, out _out4082);
                _8274_recursiveGen = _out4080;
                _8275_recOwned = _out4081;
                _8276_recIdents = _out4082;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8274_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4083;
                DCOMPUTF16._IOwnership _out4084;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4083, out _out4084);
                r = _out4083;
                resultingOwnership = _out4084;
                readIdents = _8276_recIdents;
              }
            } else if (_source299.is_SetBuilder) {
              DAST._IType _8277___mcc_h952 = _source299.dtor_element;
              {
                RAST._IExpr _8278_recursiveGen;
                DCOMPUTF16._IOwnership _8279_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8280_recIdents;
                RAST._IExpr _out4085;
                DCOMPUTF16._IOwnership _out4086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4087;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4085, out _out4086, out _out4087);
                _8278_recursiveGen = _out4085;
                _8279_recOwned = _out4086;
                _8280_recIdents = _out4087;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8278_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4088;
                DCOMPUTF16._IOwnership _out4089;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4088, out _out4089);
                r = _out4088;
                resultingOwnership = _out4089;
                readIdents = _8280_recIdents;
              }
            } else if (_source299.is_MapBuilder) {
              DAST._IType _8281___mcc_h954 = _source299.dtor_key;
              DAST._IType _8282___mcc_h955 = _source299.dtor_value;
              {
                RAST._IExpr _8283_recursiveGen;
                DCOMPUTF16._IOwnership _8284_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8285_recIdents;
                RAST._IExpr _out4090;
                DCOMPUTF16._IOwnership _out4091;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4092;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4090, out _out4091, out _out4092);
                _8283_recursiveGen = _out4090;
                _8284_recOwned = _out4091;
                _8285_recIdents = _out4092;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8283_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4093;
                DCOMPUTF16._IOwnership _out4094;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4093, out _out4094);
                r = _out4093;
                resultingOwnership = _out4094;
                readIdents = _8285_recIdents;
              }
            } else if (_source299.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8286___mcc_h958 = _source299.dtor_args;
              DAST._IType _8287___mcc_h959 = _source299.dtor_result;
              {
                RAST._IExpr _8288_recursiveGen;
                DCOMPUTF16._IOwnership _8289_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8290_recIdents;
                RAST._IExpr _out4095;
                DCOMPUTF16._IOwnership _out4096;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4097;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4095, out _out4096, out _out4097);
                _8288_recursiveGen = _out4095;
                _8289_recOwned = _out4096;
                _8290_recIdents = _out4097;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8288_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4098;
                DCOMPUTF16._IOwnership _out4099;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4098, out _out4099);
                r = _out4098;
                resultingOwnership = _out4099;
                readIdents = _8290_recIdents;
              }
            } else if (_source299.is_Primitive) {
              DAST._IPrimitive _8291___mcc_h962 = _source299.dtor_Primitive_a0;
              DAST._IPrimitive _source302 = _8291___mcc_h962;
              if (_source302.is_Int) {
                {
                  RAST._IExpr _8292_recursiveGen;
                  DCOMPUTF16._IOwnership _8293___v79;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8294_recIdents;
                  RAST._IExpr _out4100;
                  DCOMPUTF16._IOwnership _out4101;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4102;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4100, out _out4101, out _out4102);
                  _8292_recursiveGen = _out4100;
                  _8293___v79 = _out4101;
                  _8294_recIdents = _out4102;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_8292_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out4103;
                  DCOMPUTF16._IOwnership _out4104;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4103, out _out4104);
                  r = _out4103;
                  resultingOwnership = _out4104;
                  readIdents = _8294_recIdents;
                }
              } else if (_source302.is_Real) {
                {
                  RAST._IExpr _8295_recursiveGen;
                  DCOMPUTF16._IOwnership _8296_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8297_recIdents;
                  RAST._IExpr _out4105;
                  DCOMPUTF16._IOwnership _out4106;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4107;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4105, out _out4106, out _out4107);
                  _8295_recursiveGen = _out4105;
                  _8296_recOwned = _out4106;
                  _8297_recIdents = _out4107;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8295_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4108;
                  DCOMPUTF16._IOwnership _out4109;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4108, out _out4109);
                  r = _out4108;
                  resultingOwnership = _out4109;
                  readIdents = _8297_recIdents;
                }
              } else if (_source302.is_String) {
                {
                  RAST._IExpr _8298_recursiveGen;
                  DCOMPUTF16._IOwnership _8299_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8300_recIdents;
                  RAST._IExpr _out4110;
                  DCOMPUTF16._IOwnership _out4111;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4112;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4110, out _out4111, out _out4112);
                  _8298_recursiveGen = _out4110;
                  _8299_recOwned = _out4111;
                  _8300_recIdents = _out4112;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8298_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4113;
                  DCOMPUTF16._IOwnership _out4114;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4113, out _out4114);
                  r = _out4113;
                  resultingOwnership = _out4114;
                  readIdents = _8300_recIdents;
                }
              } else if (_source302.is_Bool) {
                {
                  RAST._IExpr _8301_recursiveGen;
                  DCOMPUTF16._IOwnership _8302_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8303_recIdents;
                  RAST._IExpr _out4115;
                  DCOMPUTF16._IOwnership _out4116;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4117;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4115, out _out4116, out _out4117);
                  _8301_recursiveGen = _out4115;
                  _8302_recOwned = _out4116;
                  _8303_recIdents = _out4117;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8301_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4118;
                  DCOMPUTF16._IOwnership _out4119;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4118, out _out4119);
                  r = _out4118;
                  resultingOwnership = _out4119;
                  readIdents = _8303_recIdents;
                }
              } else {
                {
                  RAST._IExpr _8304_recursiveGen;
                  DCOMPUTF16._IOwnership _8305_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8306_recIdents;
                  RAST._IExpr _out4120;
                  DCOMPUTF16._IOwnership _out4121;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4122;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4120, out _out4121, out _out4122);
                  _8304_recursiveGen = _out4120;
                  _8305_recOwned = _out4121;
                  _8306_recIdents = _out4122;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8304_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4123;
                  DCOMPUTF16._IOwnership _out4124;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4123, out _out4124);
                  r = _out4123;
                  resultingOwnership = _out4124;
                  readIdents = _8306_recIdents;
                }
              }
            } else if (_source299.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8307___mcc_h964 = _source299.dtor_Passthrough_a0;
              {
                RAST._IExpr _8308_recursiveGen;
                DCOMPUTF16._IOwnership _8309_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8310_recIdents;
                RAST._IExpr _out4125;
                DCOMPUTF16._IOwnership _out4126;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4127;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4125, out _out4126, out _out4127);
                _8308_recursiveGen = _out4125;
                _8309_recOwned = _out4126;
                _8310_recIdents = _out4127;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8308_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4128;
                DCOMPUTF16._IOwnership _out4129;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4128, out _out4129);
                r = _out4128;
                resultingOwnership = _out4129;
                readIdents = _8310_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8311___mcc_h966 = _source299.dtor_TypeArg_a0;
              {
                RAST._IExpr _8312_recursiveGen;
                DCOMPUTF16._IOwnership _8313_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8314_recIdents;
                RAST._IExpr _out4130;
                DCOMPUTF16._IOwnership _out4131;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4132;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4130, out _out4131, out _out4132);
                _8312_recursiveGen = _out4130;
                _8313_recOwned = _out4131;
                _8314_recIdents = _out4132;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8312_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4133;
                DCOMPUTF16._IOwnership _out4134;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4133, out _out4134);
                r = _out4133;
                resultingOwnership = _out4134;
                readIdents = _8314_recIdents;
              }
            }
          } else if (_source294.is_String) {
            DAST._IType _source303 = _6970___mcc_h1;
            if (_source303.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8315___mcc_h968 = _source303.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _8316___mcc_h969 = _source303.dtor_typeArgs;
              DAST._IResolvedType _8317___mcc_h970 = _source303.dtor_resolved;
              DAST._IResolvedType _source304 = _8317___mcc_h970;
              if (_source304.is_Datatype) {
                DAST._IDatatypeType _8318___mcc_h974 = _source304.dtor_datatypeType;
                {
                  RAST._IExpr _8319_recursiveGen;
                  DCOMPUTF16._IOwnership _8320_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8321_recIdents;
                  RAST._IExpr _out4135;
                  DCOMPUTF16._IOwnership _out4136;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4137;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4135, out _out4136, out _out4137);
                  _8319_recursiveGen = _out4135;
                  _8320_recOwned = _out4136;
                  _8321_recIdents = _out4137;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8319_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4138;
                  DCOMPUTF16._IOwnership _out4139;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4138, out _out4139);
                  r = _out4138;
                  resultingOwnership = _out4139;
                  readIdents = _8321_recIdents;
                }
              } else if (_source304.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8322___mcc_h976 = _source304.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _8323___mcc_h977 = _source304.dtor_attributes;
                {
                  RAST._IExpr _8324_recursiveGen;
                  DCOMPUTF16._IOwnership _8325_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8326_recIdents;
                  RAST._IExpr _out4140;
                  DCOMPUTF16._IOwnership _out4141;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4142;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4140, out _out4141, out _out4142);
                  _8324_recursiveGen = _out4140;
                  _8325_recOwned = _out4141;
                  _8326_recIdents = _out4142;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8324_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4143;
                  DCOMPUTF16._IOwnership _out4144;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4143, out _out4144);
                  r = _out4143;
                  resultingOwnership = _out4144;
                  readIdents = _8326_recIdents;
                }
              } else {
                DAST._IType _8327___mcc_h980 = _source304.dtor_baseType;
                DAST._INewtypeRange _8328___mcc_h981 = _source304.dtor_range;
                bool _8329___mcc_h982 = _source304.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _8330___mcc_h983 = _source304.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8331_attributes = _8330___mcc_h983;
                bool _8332_erase = _8329___mcc_h982;
                DAST._INewtypeRange _8333_range = _8328___mcc_h981;
                DAST._IType _8334_b = _8327___mcc_h980;
                {
                  if (object.Equals(_6964_fromTpe, _8334_b)) {
                    RAST._IExpr _8335_recursiveGen;
                    DCOMPUTF16._IOwnership _8336_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8337_recIdents;
                    RAST._IExpr _out4145;
                    DCOMPUTF16._IOwnership _out4146;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4147;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4145, out _out4146, out _out4147);
                    _8335_recursiveGen = _out4145;
                    _8336_recOwned = _out4146;
                    _8337_recIdents = _out4147;
                    Std.Wrappers._IOption<RAST._IType> _8338_potentialRhsType;
                    _8338_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8334_b, _8333_range);
                    Std.Wrappers._IOption<RAST._IType> _source305 = _8338_potentialRhsType;
                    if (_source305.is_None) {
                      if (_8332_erase) {
                        r = _8335_recursiveGen;
                      } else {
                        RAST._IType _8339_rhsType;
                        RAST._IType _out4148;
                        _out4148 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                        _8339_rhsType = _out4148;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8339_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8335_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4149;
                      DCOMPUTF16._IOwnership _out4150;
                      DCOMPUTF16.COMP.FromOwnership(r, _8336_recOwned, expectedOwnership, out _out4149, out _out4150);
                      r = _out4149;
                      resultingOwnership = _out4150;
                    } else {
                      RAST._IType _8340___mcc_h1260 = _source305.dtor_value;
                      RAST._IType _8341_v = _8340___mcc_h1260;
                      r = RAST.Expr.create_ConversionNum(_8341_v, _8335_recursiveGen);
                      RAST._IExpr _out4151;
                      DCOMPUTF16._IOwnership _out4152;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4151, out _out4152);
                      r = _out4151;
                      resultingOwnership = _out4152;
                    }
                    readIdents = _8337_recIdents;
                  } else {
                    RAST._IExpr _out4153;
                    DCOMPUTF16._IOwnership _out4154;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4155;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _8334_b), _8334_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out4153, out _out4154, out _out4155);
                    r = _out4153;
                    resultingOwnership = _out4154;
                    readIdents = _out4155;
                  }
                }
              }
            } else if (_source303.is_Nullable) {
              DAST._IType _8342___mcc_h988 = _source303.dtor_Nullable_a0;
              {
                RAST._IExpr _8343_recursiveGen;
                DCOMPUTF16._IOwnership _8344_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8345_recIdents;
                RAST._IExpr _out4156;
                DCOMPUTF16._IOwnership _out4157;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4158;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4156, out _out4157, out _out4158);
                _8343_recursiveGen = _out4156;
                _8344_recOwned = _out4157;
                _8345_recIdents = _out4158;
                r = _8343_recursiveGen;
                if (object.Equals(_8344_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4159;
                DCOMPUTF16._IOwnership _out4160;
                DCOMPUTF16.COMP.FromOwnership(r, _8344_recOwned, expectedOwnership, out _out4159, out _out4160);
                r = _out4159;
                resultingOwnership = _out4160;
                readIdents = _8345_recIdents;
              }
            } else if (_source303.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8346___mcc_h990 = _source303.dtor_Tuple_a0;
              {
                RAST._IExpr _8347_recursiveGen;
                DCOMPUTF16._IOwnership _8348_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8349_recIdents;
                RAST._IExpr _out4161;
                DCOMPUTF16._IOwnership _out4162;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4163;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4161, out _out4162, out _out4163);
                _8347_recursiveGen = _out4161;
                _8348_recOwned = _out4162;
                _8349_recIdents = _out4163;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8347_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4164;
                DCOMPUTF16._IOwnership _out4165;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4164, out _out4165);
                r = _out4164;
                resultingOwnership = _out4165;
                readIdents = _8349_recIdents;
              }
            } else if (_source303.is_Array) {
              DAST._IType _8350___mcc_h992 = _source303.dtor_element;
              BigInteger _8351___mcc_h993 = _source303.dtor_dims;
              {
                RAST._IExpr _8352_recursiveGen;
                DCOMPUTF16._IOwnership _8353_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8354_recIdents;
                RAST._IExpr _out4166;
                DCOMPUTF16._IOwnership _out4167;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4168;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4166, out _out4167, out _out4168);
                _8352_recursiveGen = _out4166;
                _8353_recOwned = _out4167;
                _8354_recIdents = _out4168;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8352_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4169;
                DCOMPUTF16._IOwnership _out4170;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4169, out _out4170);
                r = _out4169;
                resultingOwnership = _out4170;
                readIdents = _8354_recIdents;
              }
            } else if (_source303.is_Seq) {
              DAST._IType _8355___mcc_h996 = _source303.dtor_element;
              {
                RAST._IExpr _8356_recursiveGen;
                DCOMPUTF16._IOwnership _8357_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8358_recIdents;
                RAST._IExpr _out4171;
                DCOMPUTF16._IOwnership _out4172;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4173;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4171, out _out4172, out _out4173);
                _8356_recursiveGen = _out4171;
                _8357_recOwned = _out4172;
                _8358_recIdents = _out4173;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8356_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4174;
                DCOMPUTF16._IOwnership _out4175;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4174, out _out4175);
                r = _out4174;
                resultingOwnership = _out4175;
                readIdents = _8358_recIdents;
              }
            } else if (_source303.is_Set) {
              DAST._IType _8359___mcc_h998 = _source303.dtor_element;
              {
                RAST._IExpr _8360_recursiveGen;
                DCOMPUTF16._IOwnership _8361_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8362_recIdents;
                RAST._IExpr _out4176;
                DCOMPUTF16._IOwnership _out4177;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4178;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4176, out _out4177, out _out4178);
                _8360_recursiveGen = _out4176;
                _8361_recOwned = _out4177;
                _8362_recIdents = _out4178;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8360_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4179;
                DCOMPUTF16._IOwnership _out4180;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4179, out _out4180);
                r = _out4179;
                resultingOwnership = _out4180;
                readIdents = _8362_recIdents;
              }
            } else if (_source303.is_Multiset) {
              DAST._IType _8363___mcc_h1000 = _source303.dtor_element;
              {
                RAST._IExpr _8364_recursiveGen;
                DCOMPUTF16._IOwnership _8365_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8366_recIdents;
                RAST._IExpr _out4181;
                DCOMPUTF16._IOwnership _out4182;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4183;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4181, out _out4182, out _out4183);
                _8364_recursiveGen = _out4181;
                _8365_recOwned = _out4182;
                _8366_recIdents = _out4183;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8364_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4184;
                DCOMPUTF16._IOwnership _out4185;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4184, out _out4185);
                r = _out4184;
                resultingOwnership = _out4185;
                readIdents = _8366_recIdents;
              }
            } else if (_source303.is_Map) {
              DAST._IType _8367___mcc_h1002 = _source303.dtor_key;
              DAST._IType _8368___mcc_h1003 = _source303.dtor_value;
              {
                RAST._IExpr _8369_recursiveGen;
                DCOMPUTF16._IOwnership _8370_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8371_recIdents;
                RAST._IExpr _out4186;
                DCOMPUTF16._IOwnership _out4187;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4188;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4186, out _out4187, out _out4188);
                _8369_recursiveGen = _out4186;
                _8370_recOwned = _out4187;
                _8371_recIdents = _out4188;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8369_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4189;
                DCOMPUTF16._IOwnership _out4190;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4189, out _out4190);
                r = _out4189;
                resultingOwnership = _out4190;
                readIdents = _8371_recIdents;
              }
            } else if (_source303.is_SetBuilder) {
              DAST._IType _8372___mcc_h1006 = _source303.dtor_element;
              {
                RAST._IExpr _8373_recursiveGen;
                DCOMPUTF16._IOwnership _8374_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8375_recIdents;
                RAST._IExpr _out4191;
                DCOMPUTF16._IOwnership _out4192;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4193;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4191, out _out4192, out _out4193);
                _8373_recursiveGen = _out4191;
                _8374_recOwned = _out4192;
                _8375_recIdents = _out4193;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8373_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4194;
                DCOMPUTF16._IOwnership _out4195;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4194, out _out4195);
                r = _out4194;
                resultingOwnership = _out4195;
                readIdents = _8375_recIdents;
              }
            } else if (_source303.is_MapBuilder) {
              DAST._IType _8376___mcc_h1008 = _source303.dtor_key;
              DAST._IType _8377___mcc_h1009 = _source303.dtor_value;
              {
                RAST._IExpr _8378_recursiveGen;
                DCOMPUTF16._IOwnership _8379_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8380_recIdents;
                RAST._IExpr _out4196;
                DCOMPUTF16._IOwnership _out4197;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4198;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4196, out _out4197, out _out4198);
                _8378_recursiveGen = _out4196;
                _8379_recOwned = _out4197;
                _8380_recIdents = _out4198;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8378_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4199;
                DCOMPUTF16._IOwnership _out4200;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4199, out _out4200);
                r = _out4199;
                resultingOwnership = _out4200;
                readIdents = _8380_recIdents;
              }
            } else if (_source303.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8381___mcc_h1012 = _source303.dtor_args;
              DAST._IType _8382___mcc_h1013 = _source303.dtor_result;
              {
                RAST._IExpr _8383_recursiveGen;
                DCOMPUTF16._IOwnership _8384_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8385_recIdents;
                RAST._IExpr _out4201;
                DCOMPUTF16._IOwnership _out4202;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4203;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4201, out _out4202, out _out4203);
                _8383_recursiveGen = _out4201;
                _8384_recOwned = _out4202;
                _8385_recIdents = _out4203;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8383_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4204;
                DCOMPUTF16._IOwnership _out4205;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4204, out _out4205);
                r = _out4204;
                resultingOwnership = _out4205;
                readIdents = _8385_recIdents;
              }
            } else if (_source303.is_Primitive) {
              DAST._IPrimitive _8386___mcc_h1016 = _source303.dtor_Primitive_a0;
              {
                RAST._IExpr _8387_recursiveGen;
                DCOMPUTF16._IOwnership _8388_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8389_recIdents;
                RAST._IExpr _out4206;
                DCOMPUTF16._IOwnership _out4207;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4208;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4206, out _out4207, out _out4208);
                _8387_recursiveGen = _out4206;
                _8388_recOwned = _out4207;
                _8389_recIdents = _out4208;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8387_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4209;
                DCOMPUTF16._IOwnership _out4210;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4209, out _out4210);
                r = _out4209;
                resultingOwnership = _out4210;
                readIdents = _8389_recIdents;
              }
            } else if (_source303.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8390___mcc_h1018 = _source303.dtor_Passthrough_a0;
              {
                RAST._IExpr _8391_recursiveGen;
                DCOMPUTF16._IOwnership _8392_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8393_recIdents;
                RAST._IExpr _out4211;
                DCOMPUTF16._IOwnership _out4212;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4213;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4211, out _out4212, out _out4213);
                _8391_recursiveGen = _out4211;
                _8392_recOwned = _out4212;
                _8393_recIdents = _out4213;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8391_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4214;
                DCOMPUTF16._IOwnership _out4215;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4214, out _out4215);
                r = _out4214;
                resultingOwnership = _out4215;
                readIdents = _8393_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8394___mcc_h1020 = _source303.dtor_TypeArg_a0;
              {
                RAST._IExpr _8395_recursiveGen;
                DCOMPUTF16._IOwnership _8396_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8397_recIdents;
                RAST._IExpr _out4216;
                DCOMPUTF16._IOwnership _out4217;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4218;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4216, out _out4217, out _out4218);
                _8395_recursiveGen = _out4216;
                _8396_recOwned = _out4217;
                _8397_recIdents = _out4218;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8395_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4219;
                DCOMPUTF16._IOwnership _out4220;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4219, out _out4220);
                r = _out4219;
                resultingOwnership = _out4220;
                readIdents = _8397_recIdents;
              }
            }
          } else if (_source294.is_Bool) {
            DAST._IType _source306 = _6970___mcc_h1;
            if (_source306.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8398___mcc_h1022 = _source306.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _8399___mcc_h1023 = _source306.dtor_typeArgs;
              DAST._IResolvedType _8400___mcc_h1024 = _source306.dtor_resolved;
              DAST._IResolvedType _source307 = _8400___mcc_h1024;
              if (_source307.is_Datatype) {
                DAST._IDatatypeType _8401___mcc_h1028 = _source307.dtor_datatypeType;
                {
                  RAST._IExpr _8402_recursiveGen;
                  DCOMPUTF16._IOwnership _8403_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8404_recIdents;
                  RAST._IExpr _out4221;
                  DCOMPUTF16._IOwnership _out4222;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4223;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4221, out _out4222, out _out4223);
                  _8402_recursiveGen = _out4221;
                  _8403_recOwned = _out4222;
                  _8404_recIdents = _out4223;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8402_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4224;
                  DCOMPUTF16._IOwnership _out4225;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4224, out _out4225);
                  r = _out4224;
                  resultingOwnership = _out4225;
                  readIdents = _8404_recIdents;
                }
              } else if (_source307.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8405___mcc_h1030 = _source307.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _8406___mcc_h1031 = _source307.dtor_attributes;
                {
                  RAST._IExpr _8407_recursiveGen;
                  DCOMPUTF16._IOwnership _8408_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8409_recIdents;
                  RAST._IExpr _out4226;
                  DCOMPUTF16._IOwnership _out4227;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4228;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4226, out _out4227, out _out4228);
                  _8407_recursiveGen = _out4226;
                  _8408_recOwned = _out4227;
                  _8409_recIdents = _out4228;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8407_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4229;
                  DCOMPUTF16._IOwnership _out4230;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4229, out _out4230);
                  r = _out4229;
                  resultingOwnership = _out4230;
                  readIdents = _8409_recIdents;
                }
              } else {
                DAST._IType _8410___mcc_h1034 = _source307.dtor_baseType;
                DAST._INewtypeRange _8411___mcc_h1035 = _source307.dtor_range;
                bool _8412___mcc_h1036 = _source307.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _8413___mcc_h1037 = _source307.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8414_attributes = _8413___mcc_h1037;
                bool _8415_erase = _8412___mcc_h1036;
                DAST._INewtypeRange _8416_range = _8411___mcc_h1035;
                DAST._IType _8417_b = _8410___mcc_h1034;
                {
                  if (object.Equals(_6964_fromTpe, _8417_b)) {
                    RAST._IExpr _8418_recursiveGen;
                    DCOMPUTF16._IOwnership _8419_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8420_recIdents;
                    RAST._IExpr _out4231;
                    DCOMPUTF16._IOwnership _out4232;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4233;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4231, out _out4232, out _out4233);
                    _8418_recursiveGen = _out4231;
                    _8419_recOwned = _out4232;
                    _8420_recIdents = _out4233;
                    Std.Wrappers._IOption<RAST._IType> _8421_potentialRhsType;
                    _8421_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8417_b, _8416_range);
                    Std.Wrappers._IOption<RAST._IType> _source308 = _8421_potentialRhsType;
                    if (_source308.is_None) {
                      if (_8415_erase) {
                        r = _8418_recursiveGen;
                      } else {
                        RAST._IType _8422_rhsType;
                        RAST._IType _out4234;
                        _out4234 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                        _8422_rhsType = _out4234;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8422_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8418_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4235;
                      DCOMPUTF16._IOwnership _out4236;
                      DCOMPUTF16.COMP.FromOwnership(r, _8419_recOwned, expectedOwnership, out _out4235, out _out4236);
                      r = _out4235;
                      resultingOwnership = _out4236;
                    } else {
                      RAST._IType _8423___mcc_h1261 = _source308.dtor_value;
                      RAST._IType _8424_v = _8423___mcc_h1261;
                      r = RAST.Expr.create_ConversionNum(_8424_v, _8418_recursiveGen);
                      RAST._IExpr _out4237;
                      DCOMPUTF16._IOwnership _out4238;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4237, out _out4238);
                      r = _out4237;
                      resultingOwnership = _out4238;
                    }
                    readIdents = _8420_recIdents;
                  } else {
                    RAST._IExpr _out4239;
                    DCOMPUTF16._IOwnership _out4240;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4241;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _8417_b), _8417_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out4239, out _out4240, out _out4241);
                    r = _out4239;
                    resultingOwnership = _out4240;
                    readIdents = _out4241;
                  }
                }
              }
            } else if (_source306.is_Nullable) {
              DAST._IType _8425___mcc_h1042 = _source306.dtor_Nullable_a0;
              {
                RAST._IExpr _8426_recursiveGen;
                DCOMPUTF16._IOwnership _8427_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8428_recIdents;
                RAST._IExpr _out4242;
                DCOMPUTF16._IOwnership _out4243;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4244;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4242, out _out4243, out _out4244);
                _8426_recursiveGen = _out4242;
                _8427_recOwned = _out4243;
                _8428_recIdents = _out4244;
                r = _8426_recursiveGen;
                if (object.Equals(_8427_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4245;
                DCOMPUTF16._IOwnership _out4246;
                DCOMPUTF16.COMP.FromOwnership(r, _8427_recOwned, expectedOwnership, out _out4245, out _out4246);
                r = _out4245;
                resultingOwnership = _out4246;
                readIdents = _8428_recIdents;
              }
            } else if (_source306.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8429___mcc_h1044 = _source306.dtor_Tuple_a0;
              {
                RAST._IExpr _8430_recursiveGen;
                DCOMPUTF16._IOwnership _8431_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8432_recIdents;
                RAST._IExpr _out4247;
                DCOMPUTF16._IOwnership _out4248;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4249;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4247, out _out4248, out _out4249);
                _8430_recursiveGen = _out4247;
                _8431_recOwned = _out4248;
                _8432_recIdents = _out4249;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8430_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4250;
                DCOMPUTF16._IOwnership _out4251;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4250, out _out4251);
                r = _out4250;
                resultingOwnership = _out4251;
                readIdents = _8432_recIdents;
              }
            } else if (_source306.is_Array) {
              DAST._IType _8433___mcc_h1046 = _source306.dtor_element;
              BigInteger _8434___mcc_h1047 = _source306.dtor_dims;
              {
                RAST._IExpr _8435_recursiveGen;
                DCOMPUTF16._IOwnership _8436_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8437_recIdents;
                RAST._IExpr _out4252;
                DCOMPUTF16._IOwnership _out4253;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4254;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4252, out _out4253, out _out4254);
                _8435_recursiveGen = _out4252;
                _8436_recOwned = _out4253;
                _8437_recIdents = _out4254;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8435_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4255;
                DCOMPUTF16._IOwnership _out4256;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4255, out _out4256);
                r = _out4255;
                resultingOwnership = _out4256;
                readIdents = _8437_recIdents;
              }
            } else if (_source306.is_Seq) {
              DAST._IType _8438___mcc_h1050 = _source306.dtor_element;
              {
                RAST._IExpr _8439_recursiveGen;
                DCOMPUTF16._IOwnership _8440_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8441_recIdents;
                RAST._IExpr _out4257;
                DCOMPUTF16._IOwnership _out4258;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4259;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4257, out _out4258, out _out4259);
                _8439_recursiveGen = _out4257;
                _8440_recOwned = _out4258;
                _8441_recIdents = _out4259;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8439_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4260;
                DCOMPUTF16._IOwnership _out4261;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4260, out _out4261);
                r = _out4260;
                resultingOwnership = _out4261;
                readIdents = _8441_recIdents;
              }
            } else if (_source306.is_Set) {
              DAST._IType _8442___mcc_h1052 = _source306.dtor_element;
              {
                RAST._IExpr _8443_recursiveGen;
                DCOMPUTF16._IOwnership _8444_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8445_recIdents;
                RAST._IExpr _out4262;
                DCOMPUTF16._IOwnership _out4263;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4264;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4262, out _out4263, out _out4264);
                _8443_recursiveGen = _out4262;
                _8444_recOwned = _out4263;
                _8445_recIdents = _out4264;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8443_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4265;
                DCOMPUTF16._IOwnership _out4266;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4265, out _out4266);
                r = _out4265;
                resultingOwnership = _out4266;
                readIdents = _8445_recIdents;
              }
            } else if (_source306.is_Multiset) {
              DAST._IType _8446___mcc_h1054 = _source306.dtor_element;
              {
                RAST._IExpr _8447_recursiveGen;
                DCOMPUTF16._IOwnership _8448_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8449_recIdents;
                RAST._IExpr _out4267;
                DCOMPUTF16._IOwnership _out4268;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4269;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4267, out _out4268, out _out4269);
                _8447_recursiveGen = _out4267;
                _8448_recOwned = _out4268;
                _8449_recIdents = _out4269;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8447_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4270;
                DCOMPUTF16._IOwnership _out4271;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4270, out _out4271);
                r = _out4270;
                resultingOwnership = _out4271;
                readIdents = _8449_recIdents;
              }
            } else if (_source306.is_Map) {
              DAST._IType _8450___mcc_h1056 = _source306.dtor_key;
              DAST._IType _8451___mcc_h1057 = _source306.dtor_value;
              {
                RAST._IExpr _8452_recursiveGen;
                DCOMPUTF16._IOwnership _8453_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8454_recIdents;
                RAST._IExpr _out4272;
                DCOMPUTF16._IOwnership _out4273;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4274;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4272, out _out4273, out _out4274);
                _8452_recursiveGen = _out4272;
                _8453_recOwned = _out4273;
                _8454_recIdents = _out4274;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8452_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4275;
                DCOMPUTF16._IOwnership _out4276;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4275, out _out4276);
                r = _out4275;
                resultingOwnership = _out4276;
                readIdents = _8454_recIdents;
              }
            } else if (_source306.is_SetBuilder) {
              DAST._IType _8455___mcc_h1060 = _source306.dtor_element;
              {
                RAST._IExpr _8456_recursiveGen;
                DCOMPUTF16._IOwnership _8457_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8458_recIdents;
                RAST._IExpr _out4277;
                DCOMPUTF16._IOwnership _out4278;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4279;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4277, out _out4278, out _out4279);
                _8456_recursiveGen = _out4277;
                _8457_recOwned = _out4278;
                _8458_recIdents = _out4279;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8456_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4280;
                DCOMPUTF16._IOwnership _out4281;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4280, out _out4281);
                r = _out4280;
                resultingOwnership = _out4281;
                readIdents = _8458_recIdents;
              }
            } else if (_source306.is_MapBuilder) {
              DAST._IType _8459___mcc_h1062 = _source306.dtor_key;
              DAST._IType _8460___mcc_h1063 = _source306.dtor_value;
              {
                RAST._IExpr _8461_recursiveGen;
                DCOMPUTF16._IOwnership _8462_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8463_recIdents;
                RAST._IExpr _out4282;
                DCOMPUTF16._IOwnership _out4283;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4284;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4282, out _out4283, out _out4284);
                _8461_recursiveGen = _out4282;
                _8462_recOwned = _out4283;
                _8463_recIdents = _out4284;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8461_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4285;
                DCOMPUTF16._IOwnership _out4286;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4285, out _out4286);
                r = _out4285;
                resultingOwnership = _out4286;
                readIdents = _8463_recIdents;
              }
            } else if (_source306.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8464___mcc_h1066 = _source306.dtor_args;
              DAST._IType _8465___mcc_h1067 = _source306.dtor_result;
              {
                RAST._IExpr _8466_recursiveGen;
                DCOMPUTF16._IOwnership _8467_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8468_recIdents;
                RAST._IExpr _out4287;
                DCOMPUTF16._IOwnership _out4288;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4289;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4287, out _out4288, out _out4289);
                _8466_recursiveGen = _out4287;
                _8467_recOwned = _out4288;
                _8468_recIdents = _out4289;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8466_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4290;
                DCOMPUTF16._IOwnership _out4291;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4290, out _out4291);
                r = _out4290;
                resultingOwnership = _out4291;
                readIdents = _8468_recIdents;
              }
            } else if (_source306.is_Primitive) {
              DAST._IPrimitive _8469___mcc_h1070 = _source306.dtor_Primitive_a0;
              {
                RAST._IExpr _8470_recursiveGen;
                DCOMPUTF16._IOwnership _8471_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8472_recIdents;
                RAST._IExpr _out4292;
                DCOMPUTF16._IOwnership _out4293;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4294;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4292, out _out4293, out _out4294);
                _8470_recursiveGen = _out4292;
                _8471_recOwned = _out4293;
                _8472_recIdents = _out4294;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8470_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4295;
                DCOMPUTF16._IOwnership _out4296;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4295, out _out4296);
                r = _out4295;
                resultingOwnership = _out4296;
                readIdents = _8472_recIdents;
              }
            } else if (_source306.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8473___mcc_h1072 = _source306.dtor_Passthrough_a0;
              {
                RAST._IExpr _8474_recursiveGen;
                DCOMPUTF16._IOwnership _8475_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8476_recIdents;
                RAST._IExpr _out4297;
                DCOMPUTF16._IOwnership _out4298;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4299;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4297, out _out4298, out _out4299);
                _8474_recursiveGen = _out4297;
                _8475_recOwned = _out4298;
                _8476_recIdents = _out4299;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8474_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4300;
                DCOMPUTF16._IOwnership _out4301;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4300, out _out4301);
                r = _out4300;
                resultingOwnership = _out4301;
                readIdents = _8476_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8477___mcc_h1074 = _source306.dtor_TypeArg_a0;
              {
                RAST._IExpr _8478_recursiveGen;
                DCOMPUTF16._IOwnership _8479_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8480_recIdents;
                RAST._IExpr _out4302;
                DCOMPUTF16._IOwnership _out4303;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4304;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4302, out _out4303, out _out4304);
                _8478_recursiveGen = _out4302;
                _8479_recOwned = _out4303;
                _8480_recIdents = _out4304;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8478_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4305;
                DCOMPUTF16._IOwnership _out4306;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4305, out _out4306);
                r = _out4305;
                resultingOwnership = _out4306;
                readIdents = _8480_recIdents;
              }
            }
          } else {
            DAST._IType _source309 = _6970___mcc_h1;
            if (_source309.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8481___mcc_h1076 = _source309.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _8482___mcc_h1077 = _source309.dtor_typeArgs;
              DAST._IResolvedType _8483___mcc_h1078 = _source309.dtor_resolved;
              DAST._IResolvedType _source310 = _8483___mcc_h1078;
              if (_source310.is_Datatype) {
                DAST._IDatatypeType _8484___mcc_h1082 = _source310.dtor_datatypeType;
                {
                  RAST._IExpr _8485_recursiveGen;
                  DCOMPUTF16._IOwnership _8486_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8487_recIdents;
                  RAST._IExpr _out4307;
                  DCOMPUTF16._IOwnership _out4308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4309;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4307, out _out4308, out _out4309);
                  _8485_recursiveGen = _out4307;
                  _8486_recOwned = _out4308;
                  _8487_recIdents = _out4309;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8485_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4310;
                  DCOMPUTF16._IOwnership _out4311;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4310, out _out4311);
                  r = _out4310;
                  resultingOwnership = _out4311;
                  readIdents = _8487_recIdents;
                }
              } else if (_source310.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8488___mcc_h1084 = _source310.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _8489___mcc_h1085 = _source310.dtor_attributes;
                {
                  RAST._IExpr _8490_recursiveGen;
                  DCOMPUTF16._IOwnership _8491_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8492_recIdents;
                  RAST._IExpr _out4312;
                  DCOMPUTF16._IOwnership _out4313;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4314;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4312, out _out4313, out _out4314);
                  _8490_recursiveGen = _out4312;
                  _8491_recOwned = _out4313;
                  _8492_recIdents = _out4314;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8490_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4315;
                  DCOMPUTF16._IOwnership _out4316;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4315, out _out4316);
                  r = _out4315;
                  resultingOwnership = _out4316;
                  readIdents = _8492_recIdents;
                }
              } else {
                DAST._IType _8493___mcc_h1088 = _source310.dtor_baseType;
                DAST._INewtypeRange _8494___mcc_h1089 = _source310.dtor_range;
                bool _8495___mcc_h1090 = _source310.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _8496___mcc_h1091 = _source310.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8497_attributes = _8496___mcc_h1091;
                bool _8498_erase = _8495___mcc_h1090;
                DAST._INewtypeRange _8499_range = _8494___mcc_h1089;
                DAST._IType _8500_b = _8493___mcc_h1088;
                {
                  if (object.Equals(_6964_fromTpe, _8500_b)) {
                    RAST._IExpr _8501_recursiveGen;
                    DCOMPUTF16._IOwnership _8502_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8503_recIdents;
                    RAST._IExpr _out4317;
                    DCOMPUTF16._IOwnership _out4318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4319;
                    DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4317, out _out4318, out _out4319);
                    _8501_recursiveGen = _out4317;
                    _8502_recOwned = _out4318;
                    _8503_recIdents = _out4319;
                    Std.Wrappers._IOption<RAST._IType> _8504_potentialRhsType;
                    _8504_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8500_b, _8499_range);
                    Std.Wrappers._IOption<RAST._IType> _source311 = _8504_potentialRhsType;
                    if (_source311.is_None) {
                      if (_8498_erase) {
                        r = _8501_recursiveGen;
                      } else {
                        RAST._IType _8505_rhsType;
                        RAST._IType _out4320;
                        _out4320 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                        _8505_rhsType = _out4320;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8505_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8501_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4321;
                      DCOMPUTF16._IOwnership _out4322;
                      DCOMPUTF16.COMP.FromOwnership(r, _8502_recOwned, expectedOwnership, out _out4321, out _out4322);
                      r = _out4321;
                      resultingOwnership = _out4322;
                    } else {
                      RAST._IType _8506___mcc_h1262 = _source311.dtor_value;
                      RAST._IType _8507_v = _8506___mcc_h1262;
                      r = RAST.Expr.create_ConversionNum(_8507_v, _8501_recursiveGen);
                      RAST._IExpr _out4323;
                      DCOMPUTF16._IOwnership _out4324;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4323, out _out4324);
                      r = _out4323;
                      resultingOwnership = _out4324;
                    }
                    readIdents = _8503_recIdents;
                  } else {
                    RAST._IExpr _out4325;
                    DCOMPUTF16._IOwnership _out4326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4327;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _8500_b), _8500_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out4325, out _out4326, out _out4327);
                    r = _out4325;
                    resultingOwnership = _out4326;
                    readIdents = _out4327;
                  }
                }
              }
            } else if (_source309.is_Nullable) {
              DAST._IType _8508___mcc_h1096 = _source309.dtor_Nullable_a0;
              {
                RAST._IExpr _8509_recursiveGen;
                DCOMPUTF16._IOwnership _8510_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8511_recIdents;
                RAST._IExpr _out4328;
                DCOMPUTF16._IOwnership _out4329;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4330;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4328, out _out4329, out _out4330);
                _8509_recursiveGen = _out4328;
                _8510_recOwned = _out4329;
                _8511_recIdents = _out4330;
                r = _8509_recursiveGen;
                if (object.Equals(_8510_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
                }
                r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
                RAST._IExpr _out4331;
                DCOMPUTF16._IOwnership _out4332;
                DCOMPUTF16.COMP.FromOwnership(r, _8510_recOwned, expectedOwnership, out _out4331, out _out4332);
                r = _out4331;
                resultingOwnership = _out4332;
                readIdents = _8511_recIdents;
              }
            } else if (_source309.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8512___mcc_h1098 = _source309.dtor_Tuple_a0;
              {
                RAST._IExpr _8513_recursiveGen;
                DCOMPUTF16._IOwnership _8514_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8515_recIdents;
                RAST._IExpr _out4333;
                DCOMPUTF16._IOwnership _out4334;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4335;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4333, out _out4334, out _out4335);
                _8513_recursiveGen = _out4333;
                _8514_recOwned = _out4334;
                _8515_recIdents = _out4335;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8513_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4336;
                DCOMPUTF16._IOwnership _out4337;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4336, out _out4337);
                r = _out4336;
                resultingOwnership = _out4337;
                readIdents = _8515_recIdents;
              }
            } else if (_source309.is_Array) {
              DAST._IType _8516___mcc_h1100 = _source309.dtor_element;
              BigInteger _8517___mcc_h1101 = _source309.dtor_dims;
              {
                RAST._IExpr _8518_recursiveGen;
                DCOMPUTF16._IOwnership _8519_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8520_recIdents;
                RAST._IExpr _out4338;
                DCOMPUTF16._IOwnership _out4339;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4340;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4338, out _out4339, out _out4340);
                _8518_recursiveGen = _out4338;
                _8519_recOwned = _out4339;
                _8520_recIdents = _out4340;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8518_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4341;
                DCOMPUTF16._IOwnership _out4342;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4341, out _out4342);
                r = _out4341;
                resultingOwnership = _out4342;
                readIdents = _8520_recIdents;
              }
            } else if (_source309.is_Seq) {
              DAST._IType _8521___mcc_h1104 = _source309.dtor_element;
              {
                RAST._IExpr _8522_recursiveGen;
                DCOMPUTF16._IOwnership _8523_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8524_recIdents;
                RAST._IExpr _out4343;
                DCOMPUTF16._IOwnership _out4344;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4345;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4343, out _out4344, out _out4345);
                _8522_recursiveGen = _out4343;
                _8523_recOwned = _out4344;
                _8524_recIdents = _out4345;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8522_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4346;
                DCOMPUTF16._IOwnership _out4347;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4346, out _out4347);
                r = _out4346;
                resultingOwnership = _out4347;
                readIdents = _8524_recIdents;
              }
            } else if (_source309.is_Set) {
              DAST._IType _8525___mcc_h1106 = _source309.dtor_element;
              {
                RAST._IExpr _8526_recursiveGen;
                DCOMPUTF16._IOwnership _8527_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8528_recIdents;
                RAST._IExpr _out4348;
                DCOMPUTF16._IOwnership _out4349;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4350;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4348, out _out4349, out _out4350);
                _8526_recursiveGen = _out4348;
                _8527_recOwned = _out4349;
                _8528_recIdents = _out4350;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8526_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4351;
                DCOMPUTF16._IOwnership _out4352;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4351, out _out4352);
                r = _out4351;
                resultingOwnership = _out4352;
                readIdents = _8528_recIdents;
              }
            } else if (_source309.is_Multiset) {
              DAST._IType _8529___mcc_h1108 = _source309.dtor_element;
              {
                RAST._IExpr _8530_recursiveGen;
                DCOMPUTF16._IOwnership _8531_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8532_recIdents;
                RAST._IExpr _out4353;
                DCOMPUTF16._IOwnership _out4354;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4355;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4353, out _out4354, out _out4355);
                _8530_recursiveGen = _out4353;
                _8531_recOwned = _out4354;
                _8532_recIdents = _out4355;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8530_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4356;
                DCOMPUTF16._IOwnership _out4357;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4356, out _out4357);
                r = _out4356;
                resultingOwnership = _out4357;
                readIdents = _8532_recIdents;
              }
            } else if (_source309.is_Map) {
              DAST._IType _8533___mcc_h1110 = _source309.dtor_key;
              DAST._IType _8534___mcc_h1111 = _source309.dtor_value;
              {
                RAST._IExpr _8535_recursiveGen;
                DCOMPUTF16._IOwnership _8536_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8537_recIdents;
                RAST._IExpr _out4358;
                DCOMPUTF16._IOwnership _out4359;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4360;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4358, out _out4359, out _out4360);
                _8535_recursiveGen = _out4358;
                _8536_recOwned = _out4359;
                _8537_recIdents = _out4360;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8535_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4361;
                DCOMPUTF16._IOwnership _out4362;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4361, out _out4362);
                r = _out4361;
                resultingOwnership = _out4362;
                readIdents = _8537_recIdents;
              }
            } else if (_source309.is_SetBuilder) {
              DAST._IType _8538___mcc_h1114 = _source309.dtor_element;
              {
                RAST._IExpr _8539_recursiveGen;
                DCOMPUTF16._IOwnership _8540_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8541_recIdents;
                RAST._IExpr _out4363;
                DCOMPUTF16._IOwnership _out4364;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4365;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4363, out _out4364, out _out4365);
                _8539_recursiveGen = _out4363;
                _8540_recOwned = _out4364;
                _8541_recIdents = _out4365;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8539_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4366;
                DCOMPUTF16._IOwnership _out4367;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4366, out _out4367);
                r = _out4366;
                resultingOwnership = _out4367;
                readIdents = _8541_recIdents;
              }
            } else if (_source309.is_MapBuilder) {
              DAST._IType _8542___mcc_h1116 = _source309.dtor_key;
              DAST._IType _8543___mcc_h1117 = _source309.dtor_value;
              {
                RAST._IExpr _8544_recursiveGen;
                DCOMPUTF16._IOwnership _8545_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8546_recIdents;
                RAST._IExpr _out4368;
                DCOMPUTF16._IOwnership _out4369;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4370;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4368, out _out4369, out _out4370);
                _8544_recursiveGen = _out4368;
                _8545_recOwned = _out4369;
                _8546_recIdents = _out4370;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8544_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4371;
                DCOMPUTF16._IOwnership _out4372;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4371, out _out4372);
                r = _out4371;
                resultingOwnership = _out4372;
                readIdents = _8546_recIdents;
              }
            } else if (_source309.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8547___mcc_h1120 = _source309.dtor_args;
              DAST._IType _8548___mcc_h1121 = _source309.dtor_result;
              {
                RAST._IExpr _8549_recursiveGen;
                DCOMPUTF16._IOwnership _8550_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8551_recIdents;
                RAST._IExpr _out4373;
                DCOMPUTF16._IOwnership _out4374;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4375;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4373, out _out4374, out _out4375);
                _8549_recursiveGen = _out4373;
                _8550_recOwned = _out4374;
                _8551_recIdents = _out4375;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8549_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4376;
                DCOMPUTF16._IOwnership _out4377;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4376, out _out4377);
                r = _out4376;
                resultingOwnership = _out4377;
                readIdents = _8551_recIdents;
              }
            } else if (_source309.is_Primitive) {
              DAST._IPrimitive _8552___mcc_h1124 = _source309.dtor_Primitive_a0;
              DAST._IPrimitive _source312 = _8552___mcc_h1124;
              if (_source312.is_Int) {
                {
                  RAST._IType _8553_rhsType;
                  RAST._IType _out4378;
                  _out4378 = DCOMPUTF16.COMP.GenType(_6964_fromTpe, true, false);
                  _8553_rhsType = _out4378;
                  RAST._IExpr _8554_recursiveGen;
                  DCOMPUTF16._IOwnership _8555___v85;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8556_recIdents;
                  RAST._IExpr _out4379;
                  DCOMPUTF16._IOwnership _out4380;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4381;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4379, out _out4380, out _out4381);
                  _8554_recursiveGen = _out4379;
                  _8555___v85 = _out4380;
                  _8556_recIdents = _out4381;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::BigInt::from("), (_8554_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out4382;
                  DCOMPUTF16._IOwnership _out4383;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4382, out _out4383);
                  r = _out4382;
                  resultingOwnership = _out4383;
                  readIdents = _8556_recIdents;
                }
              } else if (_source312.is_Real) {
                {
                  RAST._IExpr _8557_recursiveGen;
                  DCOMPUTF16._IOwnership _8558_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8559_recIdents;
                  RAST._IExpr _out4384;
                  DCOMPUTF16._IOwnership _out4385;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4386;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4384, out _out4385, out _out4386);
                  _8557_recursiveGen = _out4384;
                  _8558_recOwned = _out4385;
                  _8559_recIdents = _out4386;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8557_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4387;
                  DCOMPUTF16._IOwnership _out4388;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4387, out _out4388);
                  r = _out4387;
                  resultingOwnership = _out4388;
                  readIdents = _8559_recIdents;
                }
              } else if (_source312.is_String) {
                {
                  RAST._IExpr _8560_recursiveGen;
                  DCOMPUTF16._IOwnership _8561_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8562_recIdents;
                  RAST._IExpr _out4389;
                  DCOMPUTF16._IOwnership _out4390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4391;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4389, out _out4390, out _out4391);
                  _8560_recursiveGen = _out4389;
                  _8561_recOwned = _out4390;
                  _8562_recIdents = _out4391;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8560_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4392;
                  DCOMPUTF16._IOwnership _out4393;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4392, out _out4393);
                  r = _out4392;
                  resultingOwnership = _out4393;
                  readIdents = _8562_recIdents;
                }
              } else if (_source312.is_Bool) {
                {
                  RAST._IExpr _8563_recursiveGen;
                  DCOMPUTF16._IOwnership _8564_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8565_recIdents;
                  RAST._IExpr _out4394;
                  DCOMPUTF16._IOwnership _out4395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4396;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4394, out _out4395, out _out4396);
                  _8563_recursiveGen = _out4394;
                  _8564_recOwned = _out4395;
                  _8565_recIdents = _out4396;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8563_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4397;
                  DCOMPUTF16._IOwnership _out4398;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4397, out _out4398);
                  r = _out4397;
                  resultingOwnership = _out4398;
                  readIdents = _8565_recIdents;
                }
              } else {
                {
                  RAST._IExpr _8566_recursiveGen;
                  DCOMPUTF16._IOwnership _8567_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8568_recIdents;
                  RAST._IExpr _out4399;
                  DCOMPUTF16._IOwnership _out4400;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4401;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4399, out _out4400, out _out4401);
                  _8566_recursiveGen = _out4399;
                  _8567_recOwned = _out4400;
                  _8568_recIdents = _out4401;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8566_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                  RAST._IExpr _out4402;
                  DCOMPUTF16._IOwnership _out4403;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4402, out _out4403);
                  r = _out4402;
                  resultingOwnership = _out4403;
                  readIdents = _8568_recIdents;
                }
              }
            } else if (_source309.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8569___mcc_h1126 = _source309.dtor_Passthrough_a0;
              {
                RAST._IExpr _8570_recursiveGen;
                DCOMPUTF16._IOwnership _8571_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8572_recIdents;
                RAST._IExpr _out4404;
                DCOMPUTF16._IOwnership _out4405;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4406;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4404, out _out4405, out _out4406);
                _8570_recursiveGen = _out4404;
                _8571_recOwned = _out4405;
                _8572_recIdents = _out4406;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8570_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4407;
                DCOMPUTF16._IOwnership _out4408;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4407, out _out4408);
                r = _out4407;
                resultingOwnership = _out4408;
                readIdents = _8572_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8573___mcc_h1128 = _source309.dtor_TypeArg_a0;
              {
                RAST._IExpr _8574_recursiveGen;
                DCOMPUTF16._IOwnership _8575_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8576_recIdents;
                RAST._IExpr _out4409;
                DCOMPUTF16._IOwnership _out4410;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4411;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4409, out _out4410, out _out4411);
                _8574_recursiveGen = _out4409;
                _8575_recOwned = _out4410;
                _8576_recIdents = _out4411;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8574_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4412;
                DCOMPUTF16._IOwnership _out4413;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4412, out _out4413);
                r = _out4412;
                resultingOwnership = _out4413;
                readIdents = _8576_recIdents;
              }
            }
          }
        } else if (_source254.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _8577___mcc_h1130 = _source254.dtor_Passthrough_a0;
          DAST._IType _source313 = _6970___mcc_h1;
          if (_source313.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8578___mcc_h1134 = _source313.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8579___mcc_h1135 = _source313.dtor_typeArgs;
            DAST._IResolvedType _8580___mcc_h1136 = _source313.dtor_resolved;
            DAST._IResolvedType _source314 = _8580___mcc_h1136;
            if (_source314.is_Datatype) {
              DAST._IDatatypeType _8581___mcc_h1140 = _source314.dtor_datatypeType;
              {
                RAST._IExpr _8582_recursiveGen;
                DCOMPUTF16._IOwnership _8583_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8584_recIdents;
                RAST._IExpr _out4414;
                DCOMPUTF16._IOwnership _out4415;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4416;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4414, out _out4415, out _out4416);
                _8582_recursiveGen = _out4414;
                _8583_recOwned = _out4415;
                _8584_recIdents = _out4416;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8582_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4417;
                DCOMPUTF16._IOwnership _out4418;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4417, out _out4418);
                r = _out4417;
                resultingOwnership = _out4418;
                readIdents = _8584_recIdents;
              }
            } else if (_source314.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8585___mcc_h1142 = _source314.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8586___mcc_h1143 = _source314.dtor_attributes;
              {
                RAST._IExpr _8587_recursiveGen;
                DCOMPUTF16._IOwnership _8588_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8589_recIdents;
                RAST._IExpr _out4419;
                DCOMPUTF16._IOwnership _out4420;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4421;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4419, out _out4420, out _out4421);
                _8587_recursiveGen = _out4419;
                _8588_recOwned = _out4420;
                _8589_recIdents = _out4421;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8587_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4422;
                DCOMPUTF16._IOwnership _out4423;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4422, out _out4423);
                r = _out4422;
                resultingOwnership = _out4423;
                readIdents = _8589_recIdents;
              }
            } else {
              DAST._IType _8590___mcc_h1146 = _source314.dtor_baseType;
              DAST._INewtypeRange _8591___mcc_h1147 = _source314.dtor_range;
              bool _8592___mcc_h1148 = _source314.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8593___mcc_h1149 = _source314.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8594_attributes = _8593___mcc_h1149;
              bool _8595_erase = _8592___mcc_h1148;
              DAST._INewtypeRange _8596_range = _8591___mcc_h1147;
              DAST._IType _8597_b = _8590___mcc_h1146;
              {
                if (object.Equals(_6964_fromTpe, _8597_b)) {
                  RAST._IExpr _8598_recursiveGen;
                  DCOMPUTF16._IOwnership _8599_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8600_recIdents;
                  RAST._IExpr _out4424;
                  DCOMPUTF16._IOwnership _out4425;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4426;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4424, out _out4425, out _out4426);
                  _8598_recursiveGen = _out4424;
                  _8599_recOwned = _out4425;
                  _8600_recIdents = _out4426;
                  Std.Wrappers._IOption<RAST._IType> _8601_potentialRhsType;
                  _8601_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8597_b, _8596_range);
                  Std.Wrappers._IOption<RAST._IType> _source315 = _8601_potentialRhsType;
                  if (_source315.is_None) {
                    if (_8595_erase) {
                      r = _8598_recursiveGen;
                    } else {
                      RAST._IType _8602_rhsType;
                      RAST._IType _out4427;
                      _out4427 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _8602_rhsType = _out4427;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8602_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8598_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4428;
                    DCOMPUTF16._IOwnership _out4429;
                    DCOMPUTF16.COMP.FromOwnership(r, _8599_recOwned, expectedOwnership, out _out4428, out _out4429);
                    r = _out4428;
                    resultingOwnership = _out4429;
                  } else {
                    RAST._IType _8603___mcc_h1263 = _source315.dtor_value;
                    RAST._IType _8604_v = _8603___mcc_h1263;
                    r = RAST.Expr.create_ConversionNum(_8604_v, _8598_recursiveGen);
                    RAST._IExpr _out4430;
                    DCOMPUTF16._IOwnership _out4431;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4430, out _out4431);
                    r = _out4430;
                    resultingOwnership = _out4431;
                  }
                  readIdents = _8600_recIdents;
                } else {
                  RAST._IExpr _out4432;
                  DCOMPUTF16._IOwnership _out4433;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4434;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _8597_b), _8597_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out4432, out _out4433, out _out4434);
                  r = _out4432;
                  resultingOwnership = _out4433;
                  readIdents = _out4434;
                }
              }
            }
          } else if (_source313.is_Nullable) {
            DAST._IType _8605___mcc_h1154 = _source313.dtor_Nullable_a0;
            {
              RAST._IExpr _8606_recursiveGen;
              DCOMPUTF16._IOwnership _8607_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8608_recIdents;
              RAST._IExpr _out4435;
              DCOMPUTF16._IOwnership _out4436;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4437;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4435, out _out4436, out _out4437);
              _8606_recursiveGen = _out4435;
              _8607_recOwned = _out4436;
              _8608_recIdents = _out4437;
              r = _8606_recursiveGen;
              if (object.Equals(_8607_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4438;
              DCOMPUTF16._IOwnership _out4439;
              DCOMPUTF16.COMP.FromOwnership(r, _8607_recOwned, expectedOwnership, out _out4438, out _out4439);
              r = _out4438;
              resultingOwnership = _out4439;
              readIdents = _8608_recIdents;
            }
          } else if (_source313.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8609___mcc_h1156 = _source313.dtor_Tuple_a0;
            {
              RAST._IExpr _8610_recursiveGen;
              DCOMPUTF16._IOwnership _8611_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8612_recIdents;
              RAST._IExpr _out4440;
              DCOMPUTF16._IOwnership _out4441;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4442;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4440, out _out4441, out _out4442);
              _8610_recursiveGen = _out4440;
              _8611_recOwned = _out4441;
              _8612_recIdents = _out4442;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8610_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4443;
              DCOMPUTF16._IOwnership _out4444;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4443, out _out4444);
              r = _out4443;
              resultingOwnership = _out4444;
              readIdents = _8612_recIdents;
            }
          } else if (_source313.is_Array) {
            DAST._IType _8613___mcc_h1158 = _source313.dtor_element;
            BigInteger _8614___mcc_h1159 = _source313.dtor_dims;
            {
              RAST._IExpr _8615_recursiveGen;
              DCOMPUTF16._IOwnership _8616_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8617_recIdents;
              RAST._IExpr _out4445;
              DCOMPUTF16._IOwnership _out4446;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4447;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4445, out _out4446, out _out4447);
              _8615_recursiveGen = _out4445;
              _8616_recOwned = _out4446;
              _8617_recIdents = _out4447;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8615_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4448;
              DCOMPUTF16._IOwnership _out4449;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4448, out _out4449);
              r = _out4448;
              resultingOwnership = _out4449;
              readIdents = _8617_recIdents;
            }
          } else if (_source313.is_Seq) {
            DAST._IType _8618___mcc_h1162 = _source313.dtor_element;
            {
              RAST._IExpr _8619_recursiveGen;
              DCOMPUTF16._IOwnership _8620_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8621_recIdents;
              RAST._IExpr _out4450;
              DCOMPUTF16._IOwnership _out4451;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4452;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4450, out _out4451, out _out4452);
              _8619_recursiveGen = _out4450;
              _8620_recOwned = _out4451;
              _8621_recIdents = _out4452;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8619_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4453;
              DCOMPUTF16._IOwnership _out4454;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4453, out _out4454);
              r = _out4453;
              resultingOwnership = _out4454;
              readIdents = _8621_recIdents;
            }
          } else if (_source313.is_Set) {
            DAST._IType _8622___mcc_h1164 = _source313.dtor_element;
            {
              RAST._IExpr _8623_recursiveGen;
              DCOMPUTF16._IOwnership _8624_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8625_recIdents;
              RAST._IExpr _out4455;
              DCOMPUTF16._IOwnership _out4456;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4457;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4455, out _out4456, out _out4457);
              _8623_recursiveGen = _out4455;
              _8624_recOwned = _out4456;
              _8625_recIdents = _out4457;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8623_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4458;
              DCOMPUTF16._IOwnership _out4459;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4458, out _out4459);
              r = _out4458;
              resultingOwnership = _out4459;
              readIdents = _8625_recIdents;
            }
          } else if (_source313.is_Multiset) {
            DAST._IType _8626___mcc_h1166 = _source313.dtor_element;
            {
              RAST._IExpr _8627_recursiveGen;
              DCOMPUTF16._IOwnership _8628_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8629_recIdents;
              RAST._IExpr _out4460;
              DCOMPUTF16._IOwnership _out4461;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4462;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4460, out _out4461, out _out4462);
              _8627_recursiveGen = _out4460;
              _8628_recOwned = _out4461;
              _8629_recIdents = _out4462;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8627_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4463;
              DCOMPUTF16._IOwnership _out4464;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4463, out _out4464);
              r = _out4463;
              resultingOwnership = _out4464;
              readIdents = _8629_recIdents;
            }
          } else if (_source313.is_Map) {
            DAST._IType _8630___mcc_h1168 = _source313.dtor_key;
            DAST._IType _8631___mcc_h1169 = _source313.dtor_value;
            {
              RAST._IExpr _8632_recursiveGen;
              DCOMPUTF16._IOwnership _8633_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8634_recIdents;
              RAST._IExpr _out4465;
              DCOMPUTF16._IOwnership _out4466;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4467;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4465, out _out4466, out _out4467);
              _8632_recursiveGen = _out4465;
              _8633_recOwned = _out4466;
              _8634_recIdents = _out4467;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8632_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4468;
              DCOMPUTF16._IOwnership _out4469;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4468, out _out4469);
              r = _out4468;
              resultingOwnership = _out4469;
              readIdents = _8634_recIdents;
            }
          } else if (_source313.is_SetBuilder) {
            DAST._IType _8635___mcc_h1172 = _source313.dtor_element;
            {
              RAST._IExpr _8636_recursiveGen;
              DCOMPUTF16._IOwnership _8637_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8638_recIdents;
              RAST._IExpr _out4470;
              DCOMPUTF16._IOwnership _out4471;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4472;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4470, out _out4471, out _out4472);
              _8636_recursiveGen = _out4470;
              _8637_recOwned = _out4471;
              _8638_recIdents = _out4472;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8636_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4473;
              DCOMPUTF16._IOwnership _out4474;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4473, out _out4474);
              r = _out4473;
              resultingOwnership = _out4474;
              readIdents = _8638_recIdents;
            }
          } else if (_source313.is_MapBuilder) {
            DAST._IType _8639___mcc_h1174 = _source313.dtor_key;
            DAST._IType _8640___mcc_h1175 = _source313.dtor_value;
            {
              RAST._IExpr _8641_recursiveGen;
              DCOMPUTF16._IOwnership _8642_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8643_recIdents;
              RAST._IExpr _out4475;
              DCOMPUTF16._IOwnership _out4476;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4477;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4475, out _out4476, out _out4477);
              _8641_recursiveGen = _out4475;
              _8642_recOwned = _out4476;
              _8643_recIdents = _out4477;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8641_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4478;
              DCOMPUTF16._IOwnership _out4479;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4478, out _out4479);
              r = _out4478;
              resultingOwnership = _out4479;
              readIdents = _8643_recIdents;
            }
          } else if (_source313.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8644___mcc_h1178 = _source313.dtor_args;
            DAST._IType _8645___mcc_h1179 = _source313.dtor_result;
            {
              RAST._IExpr _8646_recursiveGen;
              DCOMPUTF16._IOwnership _8647_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8648_recIdents;
              RAST._IExpr _out4480;
              DCOMPUTF16._IOwnership _out4481;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4482;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4480, out _out4481, out _out4482);
              _8646_recursiveGen = _out4480;
              _8647_recOwned = _out4481;
              _8648_recIdents = _out4482;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8646_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4483;
              DCOMPUTF16._IOwnership _out4484;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4483, out _out4484);
              r = _out4483;
              resultingOwnership = _out4484;
              readIdents = _8648_recIdents;
            }
          } else if (_source313.is_Primitive) {
            DAST._IPrimitive _8649___mcc_h1182 = _source313.dtor_Primitive_a0;
            DAST._IPrimitive _source316 = _8649___mcc_h1182;
            if (_source316.is_Int) {
              {
                RAST._IType _8650_rhsType;
                RAST._IType _out4485;
                _out4485 = DCOMPUTF16.COMP.GenType(_6964_fromTpe, true, false);
                _8650_rhsType = _out4485;
                RAST._IExpr _8651_recursiveGen;
                DCOMPUTF16._IOwnership _8652___v83;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8653_recIdents;
                RAST._IExpr _out4486;
                DCOMPUTF16._IOwnership _out4487;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4488;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4486, out _out4487, out _out4488);
                _8651_recursiveGen = _out4486;
                _8652___v83 = _out4487;
                _8653_recIdents = _out4488;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_8651_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out4489;
                DCOMPUTF16._IOwnership _out4490;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4489, out _out4490);
                r = _out4489;
                resultingOwnership = _out4490;
                readIdents = _8653_recIdents;
              }
            } else if (_source316.is_Real) {
              {
                RAST._IExpr _8654_recursiveGen;
                DCOMPUTF16._IOwnership _8655_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8656_recIdents;
                RAST._IExpr _out4491;
                DCOMPUTF16._IOwnership _out4492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4493;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4491, out _out4492, out _out4493);
                _8654_recursiveGen = _out4491;
                _8655_recOwned = _out4492;
                _8656_recIdents = _out4493;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8654_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4494;
                DCOMPUTF16._IOwnership _out4495;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4494, out _out4495);
                r = _out4494;
                resultingOwnership = _out4495;
                readIdents = _8656_recIdents;
              }
            } else if (_source316.is_String) {
              {
                RAST._IExpr _8657_recursiveGen;
                DCOMPUTF16._IOwnership _8658_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8659_recIdents;
                RAST._IExpr _out4496;
                DCOMPUTF16._IOwnership _out4497;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4498;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4496, out _out4497, out _out4498);
                _8657_recursiveGen = _out4496;
                _8658_recOwned = _out4497;
                _8659_recIdents = _out4498;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8657_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4499;
                DCOMPUTF16._IOwnership _out4500;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4499, out _out4500);
                r = _out4499;
                resultingOwnership = _out4500;
                readIdents = _8659_recIdents;
              }
            } else if (_source316.is_Bool) {
              {
                RAST._IExpr _8660_recursiveGen;
                DCOMPUTF16._IOwnership _8661_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8662_recIdents;
                RAST._IExpr _out4501;
                DCOMPUTF16._IOwnership _out4502;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4503;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4501, out _out4502, out _out4503);
                _8660_recursiveGen = _out4501;
                _8661_recOwned = _out4502;
                _8662_recIdents = _out4503;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8660_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4504;
                DCOMPUTF16._IOwnership _out4505;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4504, out _out4505);
                r = _out4504;
                resultingOwnership = _out4505;
                readIdents = _8662_recIdents;
              }
            } else {
              {
                RAST._IExpr _8663_recursiveGen;
                DCOMPUTF16._IOwnership _8664_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8665_recIdents;
                RAST._IExpr _out4506;
                DCOMPUTF16._IOwnership _out4507;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4508;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4506, out _out4507, out _out4508);
                _8663_recursiveGen = _out4506;
                _8664_recOwned = _out4507;
                _8665_recIdents = _out4508;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8663_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4509;
                DCOMPUTF16._IOwnership _out4510;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4509, out _out4510);
                r = _out4509;
                resultingOwnership = _out4510;
                readIdents = _8665_recIdents;
              }
            }
          } else if (_source313.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8666___mcc_h1184 = _source313.dtor_Passthrough_a0;
            {
              RAST._IExpr _8667_recursiveGen;
              DCOMPUTF16._IOwnership _8668___v88;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8669_recIdents;
              RAST._IExpr _out4511;
              DCOMPUTF16._IOwnership _out4512;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4513;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4511, out _out4512, out _out4513);
              _8667_recursiveGen = _out4511;
              _8668___v88 = _out4512;
              _8669_recIdents = _out4513;
              RAST._IType _8670_toTpeGen;
              RAST._IType _out4514;
              _out4514 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
              _8670_toTpeGen = _out4514;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_8667_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_8670_toTpeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out4515;
              DCOMPUTF16._IOwnership _out4516;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4515, out _out4516);
              r = _out4515;
              resultingOwnership = _out4516;
              readIdents = _8669_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8671___mcc_h1186 = _source313.dtor_TypeArg_a0;
            {
              RAST._IExpr _8672_recursiveGen;
              DCOMPUTF16._IOwnership _8673_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8674_recIdents;
              RAST._IExpr _out4517;
              DCOMPUTF16._IOwnership _out4518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4519;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4517, out _out4518, out _out4519);
              _8672_recursiveGen = _out4517;
              _8673_recOwned = _out4518;
              _8674_recIdents = _out4519;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8672_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4520;
              DCOMPUTF16._IOwnership _out4521;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4520, out _out4521);
              r = _out4520;
              resultingOwnership = _out4521;
              readIdents = _8674_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _8675___mcc_h1188 = _source254.dtor_TypeArg_a0;
          DAST._IType _source317 = _6970___mcc_h1;
          if (_source317.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8676___mcc_h1192 = _source317.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8677___mcc_h1193 = _source317.dtor_typeArgs;
            DAST._IResolvedType _8678___mcc_h1194 = _source317.dtor_resolved;
            DAST._IResolvedType _source318 = _8678___mcc_h1194;
            if (_source318.is_Datatype) {
              DAST._IDatatypeType _8679___mcc_h1198 = _source318.dtor_datatypeType;
              {
                RAST._IExpr _8680_recursiveGen;
                DCOMPUTF16._IOwnership _8681_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8682_recIdents;
                RAST._IExpr _out4522;
                DCOMPUTF16._IOwnership _out4523;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4524;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4522, out _out4523, out _out4524);
                _8680_recursiveGen = _out4522;
                _8681_recOwned = _out4523;
                _8682_recIdents = _out4524;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8680_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4525;
                DCOMPUTF16._IOwnership _out4526;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4525, out _out4526);
                r = _out4525;
                resultingOwnership = _out4526;
                readIdents = _8682_recIdents;
              }
            } else if (_source318.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8683___mcc_h1200 = _source318.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8684___mcc_h1201 = _source318.dtor_attributes;
              {
                RAST._IExpr _8685_recursiveGen;
                DCOMPUTF16._IOwnership _8686_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8687_recIdents;
                RAST._IExpr _out4527;
                DCOMPUTF16._IOwnership _out4528;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4529;
                DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4527, out _out4528, out _out4529);
                _8685_recursiveGen = _out4527;
                _8686_recOwned = _out4528;
                _8687_recIdents = _out4529;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8685_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
                RAST._IExpr _out4530;
                DCOMPUTF16._IOwnership _out4531;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4530, out _out4531);
                r = _out4530;
                resultingOwnership = _out4531;
                readIdents = _8687_recIdents;
              }
            } else {
              DAST._IType _8688___mcc_h1204 = _source318.dtor_baseType;
              DAST._INewtypeRange _8689___mcc_h1205 = _source318.dtor_range;
              bool _8690___mcc_h1206 = _source318.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8691___mcc_h1207 = _source318.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8692_attributes = _8691___mcc_h1207;
              bool _8693_erase = _8690___mcc_h1206;
              DAST._INewtypeRange _8694_range = _8689___mcc_h1205;
              DAST._IType _8695_b = _8688___mcc_h1204;
              {
                if (object.Equals(_6964_fromTpe, _8695_b)) {
                  RAST._IExpr _8696_recursiveGen;
                  DCOMPUTF16._IOwnership _8697_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8698_recIdents;
                  RAST._IExpr _out4532;
                  DCOMPUTF16._IOwnership _out4533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4534;
                  DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4532, out _out4533, out _out4534);
                  _8696_recursiveGen = _out4532;
                  _8697_recOwned = _out4533;
                  _8698_recIdents = _out4534;
                  Std.Wrappers._IOption<RAST._IType> _8699_potentialRhsType;
                  _8699_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8695_b, _8694_range);
                  Std.Wrappers._IOption<RAST._IType> _source319 = _8699_potentialRhsType;
                  if (_source319.is_None) {
                    if (_8693_erase) {
                      r = _8696_recursiveGen;
                    } else {
                      RAST._IType _8700_rhsType;
                      RAST._IType _out4535;
                      _out4535 = DCOMPUTF16.COMP.GenType(_6965_toTpe, true, false);
                      _8700_rhsType = _out4535;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8700_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8696_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4536;
                    DCOMPUTF16._IOwnership _out4537;
                    DCOMPUTF16.COMP.FromOwnership(r, _8697_recOwned, expectedOwnership, out _out4536, out _out4537);
                    r = _out4536;
                    resultingOwnership = _out4537;
                  } else {
                    RAST._IType _8701___mcc_h1264 = _source319.dtor_value;
                    RAST._IType _8702_v = _8701___mcc_h1264;
                    r = RAST.Expr.create_ConversionNum(_8702_v, _8696_recursiveGen);
                    RAST._IExpr _out4538;
                    DCOMPUTF16._IOwnership _out4539;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4538, out _out4539);
                    r = _out4538;
                    resultingOwnership = _out4539;
                  }
                  readIdents = _8698_recIdents;
                } else {
                  RAST._IExpr _out4540;
                  DCOMPUTF16._IOwnership _out4541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4542;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6963_expr, _6964_fromTpe, _8695_b), _8695_b, _6965_toTpe), selfIdent, env, expectedOwnership, out _out4540, out _out4541, out _out4542);
                  r = _out4540;
                  resultingOwnership = _out4541;
                  readIdents = _out4542;
                }
              }
            }
          } else if (_source317.is_Nullable) {
            DAST._IType _8703___mcc_h1212 = _source317.dtor_Nullable_a0;
            {
              RAST._IExpr _8704_recursiveGen;
              DCOMPUTF16._IOwnership _8705_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8706_recIdents;
              RAST._IExpr _out4543;
              DCOMPUTF16._IOwnership _out4544;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4545;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4543, out _out4544, out _out4545);
              _8704_recursiveGen = _out4543;
              _8705_recOwned = _out4544;
              _8706_recIdents = _out4545;
              r = _8704_recursiveGen;
              if (object.Equals(_8705_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              }
              r = RAST.Expr.create_Call(RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some")), Dafny.Sequence<RAST._IExpr>.FromElements(r));
              RAST._IExpr _out4546;
              DCOMPUTF16._IOwnership _out4547;
              DCOMPUTF16.COMP.FromOwnership(r, _8705_recOwned, expectedOwnership, out _out4546, out _out4547);
              r = _out4546;
              resultingOwnership = _out4547;
              readIdents = _8706_recIdents;
            }
          } else if (_source317.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8707___mcc_h1214 = _source317.dtor_Tuple_a0;
            {
              RAST._IExpr _8708_recursiveGen;
              DCOMPUTF16._IOwnership _8709_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8710_recIdents;
              RAST._IExpr _out4548;
              DCOMPUTF16._IOwnership _out4549;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4550;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4548, out _out4549, out _out4550);
              _8708_recursiveGen = _out4548;
              _8709_recOwned = _out4549;
              _8710_recIdents = _out4550;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8708_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4551;
              DCOMPUTF16._IOwnership _out4552;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4551, out _out4552);
              r = _out4551;
              resultingOwnership = _out4552;
              readIdents = _8710_recIdents;
            }
          } else if (_source317.is_Array) {
            DAST._IType _8711___mcc_h1216 = _source317.dtor_element;
            BigInteger _8712___mcc_h1217 = _source317.dtor_dims;
            {
              RAST._IExpr _8713_recursiveGen;
              DCOMPUTF16._IOwnership _8714_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8715_recIdents;
              RAST._IExpr _out4553;
              DCOMPUTF16._IOwnership _out4554;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4555;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4553, out _out4554, out _out4555);
              _8713_recursiveGen = _out4553;
              _8714_recOwned = _out4554;
              _8715_recIdents = _out4555;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8713_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4556;
              DCOMPUTF16._IOwnership _out4557;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4556, out _out4557);
              r = _out4556;
              resultingOwnership = _out4557;
              readIdents = _8715_recIdents;
            }
          } else if (_source317.is_Seq) {
            DAST._IType _8716___mcc_h1220 = _source317.dtor_element;
            {
              RAST._IExpr _8717_recursiveGen;
              DCOMPUTF16._IOwnership _8718_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8719_recIdents;
              RAST._IExpr _out4558;
              DCOMPUTF16._IOwnership _out4559;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4560;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4558, out _out4559, out _out4560);
              _8717_recursiveGen = _out4558;
              _8718_recOwned = _out4559;
              _8719_recIdents = _out4560;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8717_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4561;
              DCOMPUTF16._IOwnership _out4562;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4561, out _out4562);
              r = _out4561;
              resultingOwnership = _out4562;
              readIdents = _8719_recIdents;
            }
          } else if (_source317.is_Set) {
            DAST._IType _8720___mcc_h1222 = _source317.dtor_element;
            {
              RAST._IExpr _8721_recursiveGen;
              DCOMPUTF16._IOwnership _8722_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8723_recIdents;
              RAST._IExpr _out4563;
              DCOMPUTF16._IOwnership _out4564;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4565;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4563, out _out4564, out _out4565);
              _8721_recursiveGen = _out4563;
              _8722_recOwned = _out4564;
              _8723_recIdents = _out4565;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8721_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4566;
              DCOMPUTF16._IOwnership _out4567;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4566, out _out4567);
              r = _out4566;
              resultingOwnership = _out4567;
              readIdents = _8723_recIdents;
            }
          } else if (_source317.is_Multiset) {
            DAST._IType _8724___mcc_h1224 = _source317.dtor_element;
            {
              RAST._IExpr _8725_recursiveGen;
              DCOMPUTF16._IOwnership _8726_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8727_recIdents;
              RAST._IExpr _out4568;
              DCOMPUTF16._IOwnership _out4569;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4570;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4568, out _out4569, out _out4570);
              _8725_recursiveGen = _out4568;
              _8726_recOwned = _out4569;
              _8727_recIdents = _out4570;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8725_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4571;
              DCOMPUTF16._IOwnership _out4572;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4571, out _out4572);
              r = _out4571;
              resultingOwnership = _out4572;
              readIdents = _8727_recIdents;
            }
          } else if (_source317.is_Map) {
            DAST._IType _8728___mcc_h1226 = _source317.dtor_key;
            DAST._IType _8729___mcc_h1227 = _source317.dtor_value;
            {
              RAST._IExpr _8730_recursiveGen;
              DCOMPUTF16._IOwnership _8731_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8732_recIdents;
              RAST._IExpr _out4573;
              DCOMPUTF16._IOwnership _out4574;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4575;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4573, out _out4574, out _out4575);
              _8730_recursiveGen = _out4573;
              _8731_recOwned = _out4574;
              _8732_recIdents = _out4575;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8730_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4576;
              DCOMPUTF16._IOwnership _out4577;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4576, out _out4577);
              r = _out4576;
              resultingOwnership = _out4577;
              readIdents = _8732_recIdents;
            }
          } else if (_source317.is_SetBuilder) {
            DAST._IType _8733___mcc_h1230 = _source317.dtor_element;
            {
              RAST._IExpr _8734_recursiveGen;
              DCOMPUTF16._IOwnership _8735_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8736_recIdents;
              RAST._IExpr _out4578;
              DCOMPUTF16._IOwnership _out4579;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4580;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4578, out _out4579, out _out4580);
              _8734_recursiveGen = _out4578;
              _8735_recOwned = _out4579;
              _8736_recIdents = _out4580;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8734_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4581;
              DCOMPUTF16._IOwnership _out4582;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4581, out _out4582);
              r = _out4581;
              resultingOwnership = _out4582;
              readIdents = _8736_recIdents;
            }
          } else if (_source317.is_MapBuilder) {
            DAST._IType _8737___mcc_h1232 = _source317.dtor_key;
            DAST._IType _8738___mcc_h1233 = _source317.dtor_value;
            {
              RAST._IExpr _8739_recursiveGen;
              DCOMPUTF16._IOwnership _8740_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8741_recIdents;
              RAST._IExpr _out4583;
              DCOMPUTF16._IOwnership _out4584;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4585;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4583, out _out4584, out _out4585);
              _8739_recursiveGen = _out4583;
              _8740_recOwned = _out4584;
              _8741_recIdents = _out4585;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8739_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4586;
              DCOMPUTF16._IOwnership _out4587;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4586, out _out4587);
              r = _out4586;
              resultingOwnership = _out4587;
              readIdents = _8741_recIdents;
            }
          } else if (_source317.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8742___mcc_h1236 = _source317.dtor_args;
            DAST._IType _8743___mcc_h1237 = _source317.dtor_result;
            {
              RAST._IExpr _8744_recursiveGen;
              DCOMPUTF16._IOwnership _8745_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8746_recIdents;
              RAST._IExpr _out4588;
              DCOMPUTF16._IOwnership _out4589;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4590;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4588, out _out4589, out _out4590);
              _8744_recursiveGen = _out4588;
              _8745_recOwned = _out4589;
              _8746_recIdents = _out4590;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8744_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4591;
              DCOMPUTF16._IOwnership _out4592;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4591, out _out4592);
              r = _out4591;
              resultingOwnership = _out4592;
              readIdents = _8746_recIdents;
            }
          } else if (_source317.is_Primitive) {
            DAST._IPrimitive _8747___mcc_h1240 = _source317.dtor_Primitive_a0;
            {
              RAST._IExpr _8748_recursiveGen;
              DCOMPUTF16._IOwnership _8749_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8750_recIdents;
              RAST._IExpr _out4593;
              DCOMPUTF16._IOwnership _out4594;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4595;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4593, out _out4594, out _out4595);
              _8748_recursiveGen = _out4593;
              _8749_recOwned = _out4594;
              _8750_recIdents = _out4595;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8748_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4596;
              DCOMPUTF16._IOwnership _out4597;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4596, out _out4597);
              r = _out4596;
              resultingOwnership = _out4597;
              readIdents = _8750_recIdents;
            }
          } else if (_source317.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8751___mcc_h1242 = _source317.dtor_Passthrough_a0;
            {
              RAST._IExpr _8752_recursiveGen;
              DCOMPUTF16._IOwnership _8753_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8754_recIdents;
              RAST._IExpr _out4598;
              DCOMPUTF16._IOwnership _out4599;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4600;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4598, out _out4599, out _out4600);
              _8752_recursiveGen = _out4598;
              _8753_recOwned = _out4599;
              _8754_recIdents = _out4600;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8752_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4601;
              DCOMPUTF16._IOwnership _out4602;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4601, out _out4602);
              r = _out4601;
              resultingOwnership = _out4602;
              readIdents = _8754_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8755___mcc_h1244 = _source317.dtor_TypeArg_a0;
            {
              RAST._IExpr _8756_recursiveGen;
              DCOMPUTF16._IOwnership _8757_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8758_recIdents;
              RAST._IExpr _out4603;
              DCOMPUTF16._IOwnership _out4604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4605;
              DCOMPUTF16.COMP.GenExpr(_6963_expr, selfIdent, env, expectedOwnership, out _out4603, out _out4604, out _out4605);
              _8756_recursiveGen = _out4603;
              _8757_recOwned = _out4604;
              _8758_recIdents = _out4605;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8756_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* <i>Coercion</i> not yet implemented */)")));
              RAST._IExpr _out4606;
              DCOMPUTF16._IOwnership _out4607;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4606, out _out4607);
              r = _out4606;
              resultingOwnership = _out4607;
              readIdents = _8758_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source320 = e;
      if (_source320.is_Literal) {
        DAST._ILiteral _8759___mcc_h0 = _source320.dtor_Literal_a0;
        RAST._IExpr _out4608;
        DCOMPUTF16._IOwnership _out4609;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4610;
        DCOMPUTF16.COMP.GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out4608, out _out4609, out _out4610);
        r = _out4608;
        resultingOwnership = _out4609;
        readIdents = _out4610;
      } else if (_source320.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _8760___mcc_h1 = _source320.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _8761_name = _8760___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_8761_name));
          bool _8762_currentlyBorrowed;
          _8762_currentlyBorrowed = (env).IsBorrowed(_8761_name);
          if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (_8762_currentlyBorrowed) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8761_name);
          return ;
        }
      } else if (_source320.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8763___mcc_h2 = _source320.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8764_path = _8763___mcc_h2;
        {
          RAST._IExpr _out4611;
          _out4611 = DCOMPUTF16.COMP.GenPathExpr(_8764_path);
          r = _out4611;
          RAST._IExpr _out4612;
          DCOMPUTF16._IOwnership _out4613;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4612, out _out4613);
          r = _out4612;
          resultingOwnership = _out4613;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source320.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _8765___mcc_h3 = _source320.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _8766_values = _8765___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _8767_s;
          _8767_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8768_i;
          _8768_i = BigInteger.Zero;
          while ((_8768_i) < (new BigInteger((_8766_values).Count))) {
            if ((_8768_i).Sign == 1) {
              _8767_s = Dafny.Sequence<Dafny.Rune>.Concat(_8767_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _8769_recursiveGen;
            DCOMPUTF16._IOwnership _8770___v91;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8771_recIdents;
            RAST._IExpr _out4614;
            DCOMPUTF16._IOwnership _out4615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4616;
            DCOMPUTF16.COMP.GenExpr((_8766_values).Select(_8768_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4614, out _out4615, out _out4616);
            _8769_recursiveGen = _out4614;
            _8770___v91 = _out4615;
            _8771_recIdents = _out4616;
            _8767_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8767_s, (_8769_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8771_recIdents);
            _8768_i = (_8768_i) + (BigInteger.One);
          }
          _8767_s = Dafny.Sequence<Dafny.Rune>.Concat(_8767_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_8767_s);
          RAST._IExpr _out4617;
          DCOMPUTF16._IOwnership _out4618;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4617, out _out4618);
          r = _out4617;
          resultingOwnership = _out4618;
          return ;
        }
      } else if (_source320.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8772___mcc_h4 = _source320.dtor_path;
        Dafny.ISequence<DAST._IType> _8773___mcc_h5 = _source320.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _8774___mcc_h6 = _source320.dtor_args;
        Dafny.ISequence<DAST._IExpression> _8775_args = _8774___mcc_h6;
        Dafny.ISequence<DAST._IType> _8776_typeArgs = _8773___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8777_path = _8772___mcc_h4;
        {
          RAST._IExpr _out4619;
          _out4619 = DCOMPUTF16.COMP.GenPathExpr(_8777_path);
          r = _out4619;
          if ((new BigInteger((_8776_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _8778_typeExprs;
            _8778_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi12 = new BigInteger((_8776_typeArgs).Count);
            for (BigInteger _8779_i = BigInteger.Zero; _8779_i < _hi12; _8779_i++) {
              RAST._IType _8780_typeExpr;
              RAST._IType _out4620;
              _out4620 = DCOMPUTF16.COMP.GenType((_8776_typeArgs).Select(_8779_i), false, false);
              _8780_typeExpr = _out4620;
              _8778_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_8778_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_8780_typeExpr));
            }
            r = (r).ApplyType(_8778_typeExprs);
          }
          r = (r).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _8781_arguments;
          _8781_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi13 = new BigInteger((_8775_args).Count);
          for (BigInteger _8782_i = BigInteger.Zero; _8782_i < _hi13; _8782_i++) {
            RAST._IExpr _8783_recursiveGen;
            DCOMPUTF16._IOwnership _8784___v92;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8785_recIdents;
            RAST._IExpr _out4621;
            DCOMPUTF16._IOwnership _out4622;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4623;
            DCOMPUTF16.COMP.GenExpr((_8775_args).Select(_8782_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4621, out _out4622, out _out4623);
            _8783_recursiveGen = _out4621;
            _8784___v92 = _out4622;
            _8785_recIdents = _out4623;
            _8781_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_8781_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_8783_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8785_recIdents);
          }
          r = (r).Apply(_8781_arguments);
          r = RAST.__default.RcNew(r);
          RAST._IExpr _out4624;
          DCOMPUTF16._IOwnership _out4625;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4624, out _out4625);
          r = _out4624;
          resultingOwnership = _out4625;
          return ;
        }
      } else if (_source320.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _8786___mcc_h7 = _source320.dtor_dims;
        DAST._IType _8787___mcc_h8 = _source320.dtor_typ;
        DAST._IType _8788_typ = _8787___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _8789_dims = _8786___mcc_h7;
        {
          BigInteger _8790_i;
          _8790_i = (new BigInteger((_8789_dims).Count)) - (BigInteger.One);
          RAST._IType _8791_genTyp;
          RAST._IType _out4626;
          _out4626 = DCOMPUTF16.COMP.GenType(_8788_typ, false, false);
          _8791_genTyp = _out4626;
          Dafny.ISequence<Dafny.Rune> _8792_s;
          _8792_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_8791_genTyp)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_8790_i).Sign != -1) {
            RAST._IExpr _8793_recursiveGen;
            DCOMPUTF16._IOwnership _8794___v93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8795_recIdents;
            RAST._IExpr _out4627;
            DCOMPUTF16._IOwnership _out4628;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4629;
            DCOMPUTF16.COMP.GenExpr((_8789_dims).Select(_8790_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4627, out _out4628, out _out4629);
            _8793_recursiveGen = _out4627;
            _8794___v93 = _out4628;
            _8795_recIdents = _out4629;
            _8792_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _8792_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_8793_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8795_recIdents);
            _8790_i = (_8790_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_8792_s);
          RAST._IExpr _out4630;
          DCOMPUTF16._IOwnership _out4631;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4630, out _out4631);
          r = _out4630;
          resultingOwnership = _out4631;
          return ;
        }
      } else if (_source320.is_DatatypeValue) {
        DAST._IDatatypeType _8796___mcc_h9 = _source320.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _8797___mcc_h10 = _source320.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _8798___mcc_h11 = _source320.dtor_variant;
        bool _8799___mcc_h12 = _source320.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8800___mcc_h13 = _source320.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8801_values = _8800___mcc_h13;
        bool _8802_isCo = _8799___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _8803_variant = _8798___mcc_h11;
        Dafny.ISequence<DAST._IType> _8804_typeArgs = _8797___mcc_h10;
        DAST._IDatatypeType _8805_datatypeType = _8796___mcc_h9;
        {
          RAST._IExpr _out4632;
          _out4632 = DCOMPUTF16.COMP.GenPathExpr((_8805_datatypeType).dtor_path);
          r = _out4632;
          Dafny.ISequence<RAST._IType> _8806_genTypeArgs;
          _8806_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi14 = new BigInteger((_8804_typeArgs).Count);
          for (BigInteger _8807_i = BigInteger.Zero; _8807_i < _hi14; _8807_i++) {
            RAST._IType _8808_typeExpr;
            RAST._IType _out4633;
            _out4633 = DCOMPUTF16.COMP.GenType((_8804_typeArgs).Select(_8807_i), false, false);
            _8808_typeExpr = _out4633;
            _8806_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_8806_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_8808_typeExpr));
          }
          if ((new BigInteger((_8804_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_8806_genTypeArgs);
          }
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(_8803_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _8809_assignments;
          _8809_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi15 = new BigInteger((_8801_values).Count);
          for (BigInteger _8810_i = BigInteger.Zero; _8810_i < _hi15; _8810_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs55 = (_8801_values).Select(_8810_i);
            Dafny.ISequence<Dafny.Rune> _8811_name = _let_tmp_rhs55.dtor__0;
            DAST._IExpression _8812_value = _let_tmp_rhs55.dtor__1;
            if (_8802_isCo) {
              RAST._IExpr _8813_recursiveGen;
              DCOMPUTF16._IOwnership _8814___v94;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8815_recIdents;
              RAST._IExpr _out4634;
              DCOMPUTF16._IOwnership _out4635;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4636;
              DCOMPUTF16.COMP.GenExpr(_8812_value, selfIdent, DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4634, out _out4635, out _out4636);
              _8813_recursiveGen = _out4634;
              _8814___v94 = _out4635;
              _8815_recIdents = _out4636;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8815_recIdents);
              Dafny.ISequence<Dafny.Rune> _8816_allReadCloned;
              _8816_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_8815_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _8817_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_4 in (_8815_recIdents).Elements) {
                  _8817_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_4;
                  if ((_8815_recIdents).Contains(_8817_next)) {
                    goto after__ASSIGN_SUCH_THAT_4;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2826)");
              after__ASSIGN_SUCH_THAT_4: ;
                _8816_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8816_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_8817_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_8817_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _8815_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_8815_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8817_next));
              }
              Dafny.ISequence<Dafny.Rune> _8818_assigned;
              _8818_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _8816_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_8813_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _8809_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_8809_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(_8811_name), RAST.Expr.create_RawExpr(_8818_assigned))));
            } else {
              RAST._IExpr _8819_recursiveGen;
              DCOMPUTF16._IOwnership _8820___v95;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8821_recIdents;
              RAST._IExpr _out4637;
              DCOMPUTF16._IOwnership _out4638;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4639;
              DCOMPUTF16.COMP.GenExpr(_8812_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4637, out _out4638, out _out4639);
              _8819_recursiveGen = _out4637;
              _8820___v95 = _out4638;
              _8821_recIdents = _out4639;
              _8809_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_8809_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(_8811_name), _8819_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8821_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _8809_assignments);
          if (DCOMPUTF16.COMP.IsRcWrapped((_8805_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out4640;
          DCOMPUTF16._IOwnership _out4641;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4640, out _out4641);
          r = _out4640;
          resultingOwnership = _out4641;
          return ;
        }
      } else if (_source320.is_Convert) {
        DAST._IExpression _8822___mcc_h14 = _source320.dtor_value;
        DAST._IType _8823___mcc_h15 = _source320.dtor_from;
        DAST._IType _8824___mcc_h16 = _source320.dtor_typ;
        {
          RAST._IExpr _out4642;
          DCOMPUTF16._IOwnership _out4643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4644;
          DCOMPUTF16.COMP.GenExprConvert(e, selfIdent, env, expectedOwnership, out _out4642, out _out4643, out _out4644);
          r = _out4642;
          resultingOwnership = _out4643;
          readIdents = _out4644;
        }
      } else if (_source320.is_SeqConstruct) {
        DAST._IExpression _8825___mcc_h17 = _source320.dtor_length;
        DAST._IExpression _8826___mcc_h18 = _source320.dtor_elem;
        DAST._IExpression _8827_expr = _8826___mcc_h18;
        DAST._IExpression _8828_length = _8825___mcc_h17;
        {
          RAST._IExpr _8829_recursiveGen;
          DCOMPUTF16._IOwnership _8830___v99;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8831_recIdents;
          RAST._IExpr _out4645;
          DCOMPUTF16._IOwnership _out4646;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4647;
          DCOMPUTF16.COMP.GenExpr(_8827_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4645, out _out4646, out _out4647);
          _8829_recursiveGen = _out4645;
          _8830___v99 = _out4646;
          _8831_recIdents = _out4647;
          RAST._IExpr _8832_lengthGen;
          DCOMPUTF16._IOwnership _8833___v100;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8834_lengthIdents;
          RAST._IExpr _out4648;
          DCOMPUTF16._IOwnership _out4649;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4650;
          DCOMPUTF16.COMP.GenExpr(_8828_length, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4648, out _out4649, out _out4650);
          _8832_lengthGen = _out4648;
          _8833___v100 = _out4649;
          _8834_lengthIdents = _out4650;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_8829_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_8832_lengthGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8831_recIdents, _8834_lengthIdents);
          RAST._IExpr _out4651;
          DCOMPUTF16._IOwnership _out4652;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4651, out _out4652);
          r = _out4651;
          resultingOwnership = _out4652;
          return ;
        }
      } else if (_source320.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _8835___mcc_h19 = _source320.dtor_elements;
        DAST._IType _8836___mcc_h20 = _source320.dtor_typ;
        DAST._IType _8837_typ = _8836___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _8838_exprs = _8835___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _8839_genTpe;
          RAST._IType _out4653;
          _out4653 = DCOMPUTF16.COMP.GenType(_8837_typ, false, false);
          _8839_genTpe = _out4653;
          BigInteger _8840_i;
          _8840_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _8841_args;
          _8841_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_8840_i) < (new BigInteger((_8838_exprs).Count))) {
            RAST._IExpr _8842_recursiveGen;
            DCOMPUTF16._IOwnership _8843___v101;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8844_recIdents;
            RAST._IExpr _out4654;
            DCOMPUTF16._IOwnership _out4655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4656;
            DCOMPUTF16.COMP.GenExpr((_8838_exprs).Select(_8840_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4654, out _out4655, out _out4656);
            _8842_recursiveGen = _out4654;
            _8843___v101 = _out4655;
            _8844_recIdents = _out4656;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8844_recIdents);
            _8841_args = Dafny.Sequence<RAST._IExpr>.Concat(_8841_args, Dafny.Sequence<RAST._IExpr>.FromElements(_8842_recursiveGen));
            _8840_i = (_8840_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_8841_args);
          if ((new BigInteger((_8841_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_8839_genTpe));
          }
          RAST._IExpr _out4657;
          DCOMPUTF16._IOwnership _out4658;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4657, out _out4658);
          r = _out4657;
          resultingOwnership = _out4658;
          return ;
        }
      } else if (_source320.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _8845___mcc_h21 = _source320.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _8846_exprs = _8845___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _8847_generatedValues;
          _8847_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8848_i;
          _8848_i = BigInteger.Zero;
          while ((_8848_i) < (new BigInteger((_8846_exprs).Count))) {
            RAST._IExpr _8849_recursiveGen;
            DCOMPUTF16._IOwnership _8850___v102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8851_recIdents;
            RAST._IExpr _out4659;
            DCOMPUTF16._IOwnership _out4660;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4661;
            DCOMPUTF16.COMP.GenExpr((_8846_exprs).Select(_8848_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4659, out _out4660, out _out4661);
            _8849_recursiveGen = _out4659;
            _8850___v102 = _out4660;
            _8851_recIdents = _out4661;
            _8847_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_8847_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_8849_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8851_recIdents);
            _8848_i = (_8848_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_8847_generatedValues);
          RAST._IExpr _out4662;
          DCOMPUTF16._IOwnership _out4663;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4662, out _out4663);
          r = _out4662;
          resultingOwnership = _out4663;
          return ;
        }
      } else if (_source320.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _8852___mcc_h22 = _source320.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _8853_exprs = _8852___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _8854_generatedValues;
          _8854_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8855_i;
          _8855_i = BigInteger.Zero;
          while ((_8855_i) < (new BigInteger((_8853_exprs).Count))) {
            RAST._IExpr _8856_recursiveGen;
            DCOMPUTF16._IOwnership _8857___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8858_recIdents;
            RAST._IExpr _out4664;
            DCOMPUTF16._IOwnership _out4665;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4666;
            DCOMPUTF16.COMP.GenExpr((_8853_exprs).Select(_8855_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4664, out _out4665, out _out4666);
            _8856_recursiveGen = _out4664;
            _8857___v103 = _out4665;
            _8858_recIdents = _out4666;
            _8854_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_8854_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_8856_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8858_recIdents);
            _8855_i = (_8855_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_8854_generatedValues);
          RAST._IExpr _out4667;
          DCOMPUTF16._IOwnership _out4668;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4667, out _out4668);
          r = _out4667;
          resultingOwnership = _out4668;
          return ;
        }
      } else if (_source320.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8859___mcc_h23 = _source320.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8860_mapElems = _8859___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _8861_generatedValues;
          _8861_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8862_i;
          _8862_i = BigInteger.Zero;
          while ((_8862_i) < (new BigInteger((_8860_mapElems).Count))) {
            RAST._IExpr _8863_recursiveGenKey;
            DCOMPUTF16._IOwnership _8864___v105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8865_recIdentsKey;
            RAST._IExpr _out4669;
            DCOMPUTF16._IOwnership _out4670;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4671;
            DCOMPUTF16.COMP.GenExpr(((_8860_mapElems).Select(_8862_i)).dtor__0, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4669, out _out4670, out _out4671);
            _8863_recursiveGenKey = _out4669;
            _8864___v105 = _out4670;
            _8865_recIdentsKey = _out4671;
            RAST._IExpr _8866_recursiveGenValue;
            DCOMPUTF16._IOwnership _8867___v106;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8868_recIdentsValue;
            RAST._IExpr _out4672;
            DCOMPUTF16._IOwnership _out4673;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4674;
            DCOMPUTF16.COMP.GenExpr(((_8860_mapElems).Select(_8862_i)).dtor__1, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4672, out _out4673, out _out4674);
            _8866_recursiveGenValue = _out4672;
            _8867___v106 = _out4673;
            _8868_recIdentsValue = _out4674;
            _8861_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_8861_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_8863_recursiveGenKey, _8866_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8865_recIdentsKey), _8868_recIdentsValue);
            _8862_i = (_8862_i) + (BigInteger.One);
          }
          _8862_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _8869_arguments;
          _8869_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_8862_i) < (new BigInteger((_8861_generatedValues).Count))) {
            RAST._IExpr _8870_genKey;
            _8870_genKey = ((_8861_generatedValues).Select(_8862_i)).dtor__0;
            RAST._IExpr _8871_genValue;
            _8871_genValue = ((_8861_generatedValues).Select(_8862_i)).dtor__1;
            _8869_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_8869_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _8870_genKey, _8871_genValue, DAST.Format.BinOpFormat.create_NoFormat())));
            _8862_i = (_8862_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_8869_arguments);
          RAST._IExpr _out4675;
          DCOMPUTF16._IOwnership _out4676;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4675, out _out4676);
          r = _out4675;
          resultingOwnership = _out4676;
          return ;
        }
      } else if (_source320.is_MapBuilder) {
        DAST._IType _8872___mcc_h24 = _source320.dtor_keyType;
        DAST._IType _8873___mcc_h25 = _source320.dtor_valueType;
        DAST._IType _8874_valueType = _8873___mcc_h25;
        DAST._IType _8875_keyType = _8872___mcc_h24;
        {
          RAST._IType _8876_kType;
          RAST._IType _out4677;
          _out4677 = DCOMPUTF16.COMP.GenType(_8875_keyType, false, false);
          _8876_kType = _out4677;
          RAST._IType _8877_vType;
          RAST._IType _out4678;
          _out4678 = DCOMPUTF16.COMP.GenType(_8874_valueType, false, false);
          _8877_vType = _out4678;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_8876_kType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_8877_vType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out4679;
          DCOMPUTF16._IOwnership _out4680;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4679, out _out4680);
          r = _out4679;
          resultingOwnership = _out4680;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source320.is_SeqUpdate) {
        DAST._IExpression _8878___mcc_h26 = _source320.dtor_expr;
        DAST._IExpression _8879___mcc_h27 = _source320.dtor_indexExpr;
        DAST._IExpression _8880___mcc_h28 = _source320.dtor_value;
        DAST._IExpression _8881_value = _8880___mcc_h28;
        DAST._IExpression _8882_index = _8879___mcc_h27;
        DAST._IExpression _8883_expr = _8878___mcc_h26;
        {
          RAST._IExpr _8884_exprR;
          DCOMPUTF16._IOwnership _8885___v107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8886_exprIdents;
          RAST._IExpr _out4681;
          DCOMPUTF16._IOwnership _out4682;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4683;
          DCOMPUTF16.COMP.GenExpr(_8883_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4681, out _out4682, out _out4683);
          _8884_exprR = _out4681;
          _8885___v107 = _out4682;
          _8886_exprIdents = _out4683;
          RAST._IExpr _8887_indexR;
          DCOMPUTF16._IOwnership _8888_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8889_indexIdents;
          RAST._IExpr _out4684;
          DCOMPUTF16._IOwnership _out4685;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4686;
          DCOMPUTF16.COMP.GenExpr(_8882_index, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4684, out _out4685, out _out4686);
          _8887_indexR = _out4684;
          _8888_indexOwnership = _out4685;
          _8889_indexIdents = _out4686;
          RAST._IExpr _8890_valueR;
          DCOMPUTF16._IOwnership _8891_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8892_valueIdents;
          RAST._IExpr _out4687;
          DCOMPUTF16._IOwnership _out4688;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4689;
          DCOMPUTF16.COMP.GenExpr(_8881_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4687, out _out4688, out _out4689);
          _8890_valueR = _out4687;
          _8891_valueOwnership = _out4688;
          _8892_valueIdents = _out4689;
          r = ((_8884_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8887_indexR, _8890_valueR));
          RAST._IExpr _out4690;
          DCOMPUTF16._IOwnership _out4691;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4690, out _out4691);
          r = _out4690;
          resultingOwnership = _out4691;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8886_exprIdents, _8889_indexIdents), _8892_valueIdents);
          return ;
        }
      } else if (_source320.is_MapUpdate) {
        DAST._IExpression _8893___mcc_h29 = _source320.dtor_expr;
        DAST._IExpression _8894___mcc_h30 = _source320.dtor_indexExpr;
        DAST._IExpression _8895___mcc_h31 = _source320.dtor_value;
        DAST._IExpression _8896_value = _8895___mcc_h31;
        DAST._IExpression _8897_index = _8894___mcc_h30;
        DAST._IExpression _8898_expr = _8893___mcc_h29;
        {
          RAST._IExpr _8899_exprR;
          DCOMPUTF16._IOwnership _8900___v108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8901_exprIdents;
          RAST._IExpr _out4692;
          DCOMPUTF16._IOwnership _out4693;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4694;
          DCOMPUTF16.COMP.GenExpr(_8898_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4692, out _out4693, out _out4694);
          _8899_exprR = _out4692;
          _8900___v108 = _out4693;
          _8901_exprIdents = _out4694;
          RAST._IExpr _8902_indexR;
          DCOMPUTF16._IOwnership _8903_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8904_indexIdents;
          RAST._IExpr _out4695;
          DCOMPUTF16._IOwnership _out4696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4697;
          DCOMPUTF16.COMP.GenExpr(_8897_index, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4695, out _out4696, out _out4697);
          _8902_indexR = _out4695;
          _8903_indexOwnership = _out4696;
          _8904_indexIdents = _out4697;
          RAST._IExpr _8905_valueR;
          DCOMPUTF16._IOwnership _8906_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8907_valueIdents;
          RAST._IExpr _out4698;
          DCOMPUTF16._IOwnership _out4699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4700;
          DCOMPUTF16.COMP.GenExpr(_8896_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4698, out _out4699, out _out4700);
          _8905_valueR = _out4698;
          _8906_valueOwnership = _out4699;
          _8907_valueIdents = _out4700;
          r = ((_8899_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8902_indexR, _8905_valueR));
          RAST._IExpr _out4701;
          DCOMPUTF16._IOwnership _out4702;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4701, out _out4702);
          r = _out4701;
          resultingOwnership = _out4702;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8901_exprIdents, _8904_indexIdents), _8907_valueIdents);
          return ;
        }
      } else if (_source320.is_SetBuilder) {
        DAST._IType _8908___mcc_h32 = _source320.dtor_elemType;
        DAST._IType _8909_elemType = _8908___mcc_h32;
        {
          RAST._IType _8910_eType;
          RAST._IType _out4703;
          _out4703 = DCOMPUTF16.COMP.GenType(_8909_elemType, false, false);
          _8910_eType = _out4703;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_8910_eType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out4704;
          DCOMPUTF16._IOwnership _out4705;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4704, out _out4705);
          r = _out4704;
          resultingOwnership = _out4705;
          return ;
        }
      } else if (_source320.is_ToMultiset) {
        DAST._IExpression _8911___mcc_h33 = _source320.dtor_ToMultiset_a0;
        DAST._IExpression _8912_expr = _8911___mcc_h33;
        {
          RAST._IExpr _8913_recursiveGen;
          DCOMPUTF16._IOwnership _8914___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8915_recIdents;
          RAST._IExpr _out4706;
          DCOMPUTF16._IOwnership _out4707;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4708;
          DCOMPUTF16.COMP.GenExpr(_8912_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4706, out _out4707, out _out4708);
          _8913_recursiveGen = _out4706;
          _8914___v104 = _out4707;
          _8915_recIdents = _out4708;
          r = ((_8913_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _8915_recIdents;
          RAST._IExpr _out4709;
          DCOMPUTF16._IOwnership _out4710;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4709, out _out4710);
          r = _out4709;
          resultingOwnership = _out4710;
          return ;
        }
      } else if (_source320.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source321 = selfIdent;
          if (_source321.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out4711;
              DCOMPUTF16._IOwnership _out4712;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4711, out _out4712);
              r = _out4711;
              resultingOwnership = _out4712;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8916___mcc_h273 = _source321.dtor_value;
            Dafny.ISequence<Dafny.Rune> _8917_id = _8916___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_8917_id);
              if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_8917_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_8917_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8917_id);
            }
          }
          return ;
        }
      } else if (_source320.is_Ite) {
        DAST._IExpression _8918___mcc_h34 = _source320.dtor_cond;
        DAST._IExpression _8919___mcc_h35 = _source320.dtor_thn;
        DAST._IExpression _8920___mcc_h36 = _source320.dtor_els;
        DAST._IExpression _8921_f = _8920___mcc_h36;
        DAST._IExpression _8922_t = _8919___mcc_h35;
        DAST._IExpression _8923_cond = _8918___mcc_h34;
        {
          RAST._IExpr _8924_cond;
          DCOMPUTF16._IOwnership _8925___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8926_recIdentsCond;
          RAST._IExpr _out4713;
          DCOMPUTF16._IOwnership _out4714;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4715;
          DCOMPUTF16.COMP.GenExpr(_8923_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4713, out _out4714, out _out4715);
          _8924_cond = _out4713;
          _8925___v109 = _out4714;
          _8926_recIdentsCond = _out4715;
          Dafny.ISequence<Dafny.Rune> _8927_condString;
          _8927_condString = (_8924_cond)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _8928___v110;
          DCOMPUTF16._IOwnership _8929_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8930___v111;
          RAST._IExpr _out4716;
          DCOMPUTF16._IOwnership _out4717;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4718;
          DCOMPUTF16.COMP.GenExpr(_8922_t, selfIdent, env, expectedOwnership, out _out4716, out _out4717, out _out4718);
          _8928___v110 = _out4716;
          _8929_tHasToBeOwned = _out4717;
          _8930___v111 = _out4718;
          RAST._IExpr _8931_fExpr;
          DCOMPUTF16._IOwnership _8932_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8933_recIdentsF;
          RAST._IExpr _out4719;
          DCOMPUTF16._IOwnership _out4720;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4721;
          DCOMPUTF16.COMP.GenExpr(_8921_f, selfIdent, env, _8929_tHasToBeOwned, out _out4719, out _out4720, out _out4721);
          _8931_fExpr = _out4719;
          _8932_fOwned = _out4720;
          _8933_recIdentsF = _out4721;
          Dafny.ISequence<Dafny.Rune> _8934_fString;
          _8934_fString = (_8931_fExpr)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _8935_tExpr;
          DCOMPUTF16._IOwnership _8936___v112;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8937_recIdentsT;
          RAST._IExpr _out4722;
          DCOMPUTF16._IOwnership _out4723;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4724;
          DCOMPUTF16.COMP.GenExpr(_8922_t, selfIdent, env, _8932_fOwned, out _out4722, out _out4723, out _out4724);
          _8935_tExpr = _out4722;
          _8936___v112 = _out4723;
          _8937_recIdentsT = _out4724;
          Dafny.ISequence<Dafny.Rune> _8938_tString;
          _8938_tString = (_8935_tExpr)._ToString(DCOMPUTF16.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _8927_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _8938_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _8934_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out4725;
          DCOMPUTF16._IOwnership _out4726;
          DCOMPUTF16.COMP.FromOwnership(r, _8932_fOwned, expectedOwnership, out _out4725, out _out4726);
          r = _out4725;
          resultingOwnership = _out4726;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8926_recIdentsCond, _8937_recIdentsT), _8933_recIdentsF);
          return ;
        }
      } else if (_source320.is_UnOp) {
        DAST._IUnaryOp _8939___mcc_h37 = _source320.dtor_unOp;
        DAST._IExpression _8940___mcc_h38 = _source320.dtor_expr;
        DAST.Format._IUnOpFormat _8941___mcc_h39 = _source320.dtor_format1;
        DAST._IUnaryOp _source322 = _8939___mcc_h37;
        if (_source322.is_Not) {
          DAST.Format._IUnOpFormat _8942_format = _8941___mcc_h39;
          DAST._IExpression _8943_e = _8940___mcc_h38;
          {
            RAST._IExpr _8944_recursiveGen;
            DCOMPUTF16._IOwnership _8945___v113;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8946_recIdents;
            RAST._IExpr _out4727;
            DCOMPUTF16._IOwnership _out4728;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4729;
            DCOMPUTF16.COMP.GenExpr(_8943_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4727, out _out4728, out _out4729);
            _8944_recursiveGen = _out4727;
            _8945___v113 = _out4728;
            _8946_recIdents = _out4729;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _8944_recursiveGen, _8942_format);
            RAST._IExpr _out4730;
            DCOMPUTF16._IOwnership _out4731;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4730, out _out4731);
            r = _out4730;
            resultingOwnership = _out4731;
            readIdents = _8946_recIdents;
            return ;
          }
        } else if (_source322.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _8947_format = _8941___mcc_h39;
          DAST._IExpression _8948_e = _8940___mcc_h38;
          {
            RAST._IExpr _8949_recursiveGen;
            DCOMPUTF16._IOwnership _8950___v114;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8951_recIdents;
            RAST._IExpr _out4732;
            DCOMPUTF16._IOwnership _out4733;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4734;
            DCOMPUTF16.COMP.GenExpr(_8948_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4732, out _out4733, out _out4734);
            _8949_recursiveGen = _out4732;
            _8950___v114 = _out4733;
            _8951_recIdents = _out4734;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _8949_recursiveGen, _8947_format);
            RAST._IExpr _out4735;
            DCOMPUTF16._IOwnership _out4736;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4735, out _out4736);
            r = _out4735;
            resultingOwnership = _out4736;
            readIdents = _8951_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnOpFormat _8952_format = _8941___mcc_h39;
          DAST._IExpression _8953_e = _8940___mcc_h38;
          {
            RAST._IExpr _8954_recursiveGen;
            DCOMPUTF16._IOwnership _8955_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8956_recIdents;
            RAST._IExpr _out4737;
            DCOMPUTF16._IOwnership _out4738;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4739;
            DCOMPUTF16.COMP.GenExpr(_8953_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4737, out _out4738, out _out4739);
            _8954_recursiveGen = _out4737;
            _8955_recOwned = _out4738;
            _8956_recIdents = _out4739;
            r = ((_8954_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out4740;
            DCOMPUTF16._IOwnership _out4741;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4740, out _out4741);
            r = _out4740;
            resultingOwnership = _out4741;
            readIdents = _8956_recIdents;
            return ;
          }
        }
      } else if (_source320.is_BinOp) {
        DAST._IBinOp _8957___mcc_h40 = _source320.dtor_op;
        DAST._IExpression _8958___mcc_h41 = _source320.dtor_left;
        DAST._IExpression _8959___mcc_h42 = _source320.dtor_right;
        DAST.Format._IBinOpFormat _8960___mcc_h43 = _source320.dtor_format2;
        RAST._IExpr _out4742;
        DCOMPUTF16._IOwnership _out4743;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4744;
        DCOMPUTF16.COMP.GenExprBinary(e, selfIdent, env, expectedOwnership, out _out4742, out _out4743, out _out4744);
        r = _out4742;
        resultingOwnership = _out4743;
        readIdents = _out4744;
      } else if (_source320.is_ArrayLen) {
        DAST._IExpression _8961___mcc_h44 = _source320.dtor_expr;
        BigInteger _8962___mcc_h45 = _source320.dtor_dim;
        BigInteger _8963_dim = _8962___mcc_h45;
        DAST._IExpression _8964_expr = _8961___mcc_h44;
        {
          RAST._IExpr _8965_recursiveGen;
          DCOMPUTF16._IOwnership _8966___v119;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8967_recIdents;
          RAST._IExpr _out4745;
          DCOMPUTF16._IOwnership _out4746;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4747;
          DCOMPUTF16.COMP.GenExpr(_8964_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4745, out _out4746, out _out4747);
          _8965_recursiveGen = _out4745;
          _8966___v119 = _out4746;
          _8967_recIdents = _out4747;
          if ((_8963_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_8965_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _8968_s;
            _8968_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMPUTF16.__default.IND);
            BigInteger _8969_i;
            _8969_i = BigInteger.One;
            while ((_8969_i) < (_8963_dim)) {
              _8968_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _8968_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _8969_i = (_8969_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8965_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _8968_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out4748;
          DCOMPUTF16._IOwnership _out4749;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4748, out _out4749);
          r = _out4748;
          resultingOwnership = _out4749;
          readIdents = _8967_recIdents;
          return ;
        }
      } else if (_source320.is_MapKeys) {
        DAST._IExpression _8970___mcc_h46 = _source320.dtor_expr;
        DAST._IExpression _8971_expr = _8970___mcc_h46;
        {
          RAST._IExpr _8972_recursiveGen;
          DCOMPUTF16._IOwnership _8973___v120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8974_recIdents;
          RAST._IExpr _out4750;
          DCOMPUTF16._IOwnership _out4751;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4752;
          DCOMPUTF16.COMP.GenExpr(_8971_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4750, out _out4751, out _out4752);
          _8972_recursiveGen = _out4750;
          _8973___v120 = _out4751;
          _8974_recIdents = _out4752;
          readIdents = _8974_recIdents;
          r = ((_8972_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out4753;
          DCOMPUTF16._IOwnership _out4754;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4753, out _out4754);
          r = _out4753;
          resultingOwnership = _out4754;
          return ;
        }
      } else if (_source320.is_MapValues) {
        DAST._IExpression _8975___mcc_h47 = _source320.dtor_expr;
        DAST._IExpression _8976_expr = _8975___mcc_h47;
        {
          RAST._IExpr _8977_recursiveGen;
          DCOMPUTF16._IOwnership _8978___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8979_recIdents;
          RAST._IExpr _out4755;
          DCOMPUTF16._IOwnership _out4756;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4757;
          DCOMPUTF16.COMP.GenExpr(_8976_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4755, out _out4756, out _out4757);
          _8977_recursiveGen = _out4755;
          _8978___v121 = _out4756;
          _8979_recIdents = _out4757;
          readIdents = _8979_recIdents;
          r = ((_8977_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out4758;
          DCOMPUTF16._IOwnership _out4759;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4758, out _out4759);
          r = _out4758;
          resultingOwnership = _out4759;
          return ;
        }
      } else if (_source320.is_Select) {
        DAST._IExpression _8980___mcc_h48 = _source320.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _8981___mcc_h49 = _source320.dtor_field;
        bool _8982___mcc_h50 = _source320.dtor_isConstant;
        bool _8983___mcc_h51 = _source320.dtor_onDatatype;
        DAST._IExpression _source323 = _8980___mcc_h48;
        if (_source323.is_Literal) {
          DAST._ILiteral _8984___mcc_h52 = _source323.dtor_Literal_a0;
          bool _8985_isDatatype = _8983___mcc_h51;
          bool _8986_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8987_field = _8981___mcc_h49;
          DAST._IExpression _8988_on = _8980___mcc_h48;
          {
            RAST._IExpr _8989_onExpr;
            DCOMPUTF16._IOwnership _8990_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8991_recIdents;
            RAST._IExpr _out4760;
            DCOMPUTF16._IOwnership _out4761;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4762;
            DCOMPUTF16.COMP.GenExpr(_8988_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4760, out _out4761, out _out4762);
            _8989_onExpr = _out4760;
            _8990_onOwned = _out4761;
            _8991_recIdents = _out4762;
            if ((_8985_isDatatype) || (_8986_isConstant)) {
              r = ((_8989_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8987_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4763;
              DCOMPUTF16._IOwnership _out4764;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4763, out _out4764);
              r = _out4763;
              resultingOwnership = _out4764;
            } else {
              Dafny.ISequence<Dafny.Rune> _8992_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8992_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8989_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8987_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4765;
              DCOMPUTF16._IOwnership _out4766;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8992_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4765, out _out4766);
              r = _out4765;
              resultingOwnership = _out4766;
            }
            readIdents = _8991_recIdents;
            return ;
          }
        } else if (_source323.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _8993___mcc_h54 = _source323.dtor_Ident_a0;
          bool _8994_isDatatype = _8983___mcc_h51;
          bool _8995_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8996_field = _8981___mcc_h49;
          DAST._IExpression _8997_on = _8980___mcc_h48;
          {
            RAST._IExpr _8998_onExpr;
            DCOMPUTF16._IOwnership _8999_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9000_recIdents;
            RAST._IExpr _out4767;
            DCOMPUTF16._IOwnership _out4768;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4769;
            DCOMPUTF16.COMP.GenExpr(_8997_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4767, out _out4768, out _out4769);
            _8998_onExpr = _out4767;
            _8999_onOwned = _out4768;
            _9000_recIdents = _out4769;
            if ((_8994_isDatatype) || (_8995_isConstant)) {
              r = ((_8998_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8996_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4770;
              DCOMPUTF16._IOwnership _out4771;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4770, out _out4771);
              r = _out4770;
              resultingOwnership = _out4771;
            } else {
              Dafny.ISequence<Dafny.Rune> _9001_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9001_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8998_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8996_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4772;
              DCOMPUTF16._IOwnership _out4773;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9001_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4772, out _out4773);
              r = _out4772;
              resultingOwnership = _out4773;
            }
            readIdents = _9000_recIdents;
            return ;
          }
        } else if (_source323.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9002___mcc_h56 = _source323.dtor_Companion_a0;
          bool _9003_isDatatype = _8983___mcc_h51;
          bool _9004_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9005_field = _8981___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9006_c = _9002___mcc_h56;
          {
            RAST._IExpr _9007_onExpr;
            DCOMPUTF16._IOwnership _9008_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9009_recIdents;
            RAST._IExpr _out4774;
            DCOMPUTF16._IOwnership _out4775;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4776;
            DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Companion(_9006_c), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4774, out _out4775, out _out4776);
            _9007_onExpr = _out4774;
            _9008_onOwned = _out4775;
            _9009_recIdents = _out4776;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_9007_onExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_9005_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out4777;
            DCOMPUTF16._IOwnership _out4778;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4777, out _out4778);
            r = _out4777;
            resultingOwnership = _out4778;
            readIdents = _9009_recIdents;
            return ;
          }
        } else if (_source323.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _9010___mcc_h58 = _source323.dtor_Tuple_a0;
          bool _9011_isDatatype = _8983___mcc_h51;
          bool _9012_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9013_field = _8981___mcc_h49;
          DAST._IExpression _9014_on = _8980___mcc_h48;
          {
            RAST._IExpr _9015_onExpr;
            DCOMPUTF16._IOwnership _9016_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9017_recIdents;
            RAST._IExpr _out4779;
            DCOMPUTF16._IOwnership _out4780;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4781;
            DCOMPUTF16.COMP.GenExpr(_9014_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4779, out _out4780, out _out4781);
            _9015_onExpr = _out4779;
            _9016_onOwned = _out4780;
            _9017_recIdents = _out4781;
            if ((_9011_isDatatype) || (_9012_isConstant)) {
              r = ((_9015_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9013_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4782;
              DCOMPUTF16._IOwnership _out4783;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4782, out _out4783);
              r = _out4782;
              resultingOwnership = _out4783;
            } else {
              Dafny.ISequence<Dafny.Rune> _9018_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9018_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9015_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9013_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4784;
              DCOMPUTF16._IOwnership _out4785;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9018_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4784, out _out4785);
              r = _out4784;
              resultingOwnership = _out4785;
            }
            readIdents = _9017_recIdents;
            return ;
          }
        } else if (_source323.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9019___mcc_h60 = _source323.dtor_path;
          Dafny.ISequence<DAST._IType> _9020___mcc_h61 = _source323.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _9021___mcc_h62 = _source323.dtor_args;
          bool _9022_isDatatype = _8983___mcc_h51;
          bool _9023_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9024_field = _8981___mcc_h49;
          DAST._IExpression _9025_on = _8980___mcc_h48;
          {
            RAST._IExpr _9026_onExpr;
            DCOMPUTF16._IOwnership _9027_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9028_recIdents;
            RAST._IExpr _out4786;
            DCOMPUTF16._IOwnership _out4787;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4788;
            DCOMPUTF16.COMP.GenExpr(_9025_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4786, out _out4787, out _out4788);
            _9026_onExpr = _out4786;
            _9027_onOwned = _out4787;
            _9028_recIdents = _out4788;
            if ((_9022_isDatatype) || (_9023_isConstant)) {
              r = ((_9026_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9024_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4789;
              DCOMPUTF16._IOwnership _out4790;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4789, out _out4790);
              r = _out4789;
              resultingOwnership = _out4790;
            } else {
              Dafny.ISequence<Dafny.Rune> _9029_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9029_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9026_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9024_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4791;
              DCOMPUTF16._IOwnership _out4792;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9029_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4791, out _out4792);
              r = _out4791;
              resultingOwnership = _out4792;
            }
            readIdents = _9028_recIdents;
            return ;
          }
        } else if (_source323.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _9030___mcc_h66 = _source323.dtor_dims;
          DAST._IType _9031___mcc_h67 = _source323.dtor_typ;
          bool _9032_isDatatype = _8983___mcc_h51;
          bool _9033_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9034_field = _8981___mcc_h49;
          DAST._IExpression _9035_on = _8980___mcc_h48;
          {
            RAST._IExpr _9036_onExpr;
            DCOMPUTF16._IOwnership _9037_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9038_recIdents;
            RAST._IExpr _out4793;
            DCOMPUTF16._IOwnership _out4794;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4795;
            DCOMPUTF16.COMP.GenExpr(_9035_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4793, out _out4794, out _out4795);
            _9036_onExpr = _out4793;
            _9037_onOwned = _out4794;
            _9038_recIdents = _out4795;
            if ((_9032_isDatatype) || (_9033_isConstant)) {
              r = ((_9036_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9034_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4796;
              DCOMPUTF16._IOwnership _out4797;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4796, out _out4797);
              r = _out4796;
              resultingOwnership = _out4797;
            } else {
              Dafny.ISequence<Dafny.Rune> _9039_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9039_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9036_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9034_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4798;
              DCOMPUTF16._IOwnership _out4799;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9039_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4798, out _out4799);
              r = _out4798;
              resultingOwnership = _out4799;
            }
            readIdents = _9038_recIdents;
            return ;
          }
        } else if (_source323.is_DatatypeValue) {
          DAST._IDatatypeType _9040___mcc_h70 = _source323.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _9041___mcc_h71 = _source323.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _9042___mcc_h72 = _source323.dtor_variant;
          bool _9043___mcc_h73 = _source323.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _9044___mcc_h74 = _source323.dtor_contents;
          bool _9045_isDatatype = _8983___mcc_h51;
          bool _9046_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9047_field = _8981___mcc_h49;
          DAST._IExpression _9048_on = _8980___mcc_h48;
          {
            RAST._IExpr _9049_onExpr;
            DCOMPUTF16._IOwnership _9050_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9051_recIdents;
            RAST._IExpr _out4800;
            DCOMPUTF16._IOwnership _out4801;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4802;
            DCOMPUTF16.COMP.GenExpr(_9048_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4800, out _out4801, out _out4802);
            _9049_onExpr = _out4800;
            _9050_onOwned = _out4801;
            _9051_recIdents = _out4802;
            if ((_9045_isDatatype) || (_9046_isConstant)) {
              r = ((_9049_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9047_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4803;
              DCOMPUTF16._IOwnership _out4804;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4803, out _out4804);
              r = _out4803;
              resultingOwnership = _out4804;
            } else {
              Dafny.ISequence<Dafny.Rune> _9052_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9052_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9049_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9047_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4805;
              DCOMPUTF16._IOwnership _out4806;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9052_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4805, out _out4806);
              r = _out4805;
              resultingOwnership = _out4806;
            }
            readIdents = _9051_recIdents;
            return ;
          }
        } else if (_source323.is_Convert) {
          DAST._IExpression _9053___mcc_h80 = _source323.dtor_value;
          DAST._IType _9054___mcc_h81 = _source323.dtor_from;
          DAST._IType _9055___mcc_h82 = _source323.dtor_typ;
          bool _9056_isDatatype = _8983___mcc_h51;
          bool _9057_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9058_field = _8981___mcc_h49;
          DAST._IExpression _9059_on = _8980___mcc_h48;
          {
            RAST._IExpr _9060_onExpr;
            DCOMPUTF16._IOwnership _9061_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9062_recIdents;
            RAST._IExpr _out4807;
            DCOMPUTF16._IOwnership _out4808;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4809;
            DCOMPUTF16.COMP.GenExpr(_9059_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4807, out _out4808, out _out4809);
            _9060_onExpr = _out4807;
            _9061_onOwned = _out4808;
            _9062_recIdents = _out4809;
            if ((_9056_isDatatype) || (_9057_isConstant)) {
              r = ((_9060_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9058_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4810;
              DCOMPUTF16._IOwnership _out4811;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4810, out _out4811);
              r = _out4810;
              resultingOwnership = _out4811;
            } else {
              Dafny.ISequence<Dafny.Rune> _9063_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9063_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9060_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9058_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4812;
              DCOMPUTF16._IOwnership _out4813;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9063_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4812, out _out4813);
              r = _out4812;
              resultingOwnership = _out4813;
            }
            readIdents = _9062_recIdents;
            return ;
          }
        } else if (_source323.is_SeqConstruct) {
          DAST._IExpression _9064___mcc_h86 = _source323.dtor_length;
          DAST._IExpression _9065___mcc_h87 = _source323.dtor_elem;
          bool _9066_isDatatype = _8983___mcc_h51;
          bool _9067_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9068_field = _8981___mcc_h49;
          DAST._IExpression _9069_on = _8980___mcc_h48;
          {
            RAST._IExpr _9070_onExpr;
            DCOMPUTF16._IOwnership _9071_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9072_recIdents;
            RAST._IExpr _out4814;
            DCOMPUTF16._IOwnership _out4815;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4816;
            DCOMPUTF16.COMP.GenExpr(_9069_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4814, out _out4815, out _out4816);
            _9070_onExpr = _out4814;
            _9071_onOwned = _out4815;
            _9072_recIdents = _out4816;
            if ((_9066_isDatatype) || (_9067_isConstant)) {
              r = ((_9070_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9068_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4817;
              DCOMPUTF16._IOwnership _out4818;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4817, out _out4818);
              r = _out4817;
              resultingOwnership = _out4818;
            } else {
              Dafny.ISequence<Dafny.Rune> _9073_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9073_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9070_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9068_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4819;
              DCOMPUTF16._IOwnership _out4820;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9073_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4819, out _out4820);
              r = _out4819;
              resultingOwnership = _out4820;
            }
            readIdents = _9072_recIdents;
            return ;
          }
        } else if (_source323.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _9074___mcc_h90 = _source323.dtor_elements;
          DAST._IType _9075___mcc_h91 = _source323.dtor_typ;
          bool _9076_isDatatype = _8983___mcc_h51;
          bool _9077_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9078_field = _8981___mcc_h49;
          DAST._IExpression _9079_on = _8980___mcc_h48;
          {
            RAST._IExpr _9080_onExpr;
            DCOMPUTF16._IOwnership _9081_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9082_recIdents;
            RAST._IExpr _out4821;
            DCOMPUTF16._IOwnership _out4822;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4823;
            DCOMPUTF16.COMP.GenExpr(_9079_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4821, out _out4822, out _out4823);
            _9080_onExpr = _out4821;
            _9081_onOwned = _out4822;
            _9082_recIdents = _out4823;
            if ((_9076_isDatatype) || (_9077_isConstant)) {
              r = ((_9080_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9078_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4824;
              DCOMPUTF16._IOwnership _out4825;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4824, out _out4825);
              r = _out4824;
              resultingOwnership = _out4825;
            } else {
              Dafny.ISequence<Dafny.Rune> _9083_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9083_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9080_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9078_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4826;
              DCOMPUTF16._IOwnership _out4827;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9083_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4826, out _out4827);
              r = _out4826;
              resultingOwnership = _out4827;
            }
            readIdents = _9082_recIdents;
            return ;
          }
        } else if (_source323.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _9084___mcc_h94 = _source323.dtor_elements;
          bool _9085_isDatatype = _8983___mcc_h51;
          bool _9086_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9087_field = _8981___mcc_h49;
          DAST._IExpression _9088_on = _8980___mcc_h48;
          {
            RAST._IExpr _9089_onExpr;
            DCOMPUTF16._IOwnership _9090_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9091_recIdents;
            RAST._IExpr _out4828;
            DCOMPUTF16._IOwnership _out4829;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4830;
            DCOMPUTF16.COMP.GenExpr(_9088_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4828, out _out4829, out _out4830);
            _9089_onExpr = _out4828;
            _9090_onOwned = _out4829;
            _9091_recIdents = _out4830;
            if ((_9085_isDatatype) || (_9086_isConstant)) {
              r = ((_9089_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9087_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4831;
              DCOMPUTF16._IOwnership _out4832;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4831, out _out4832);
              r = _out4831;
              resultingOwnership = _out4832;
            } else {
              Dafny.ISequence<Dafny.Rune> _9092_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9092_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9089_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9087_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4833;
              DCOMPUTF16._IOwnership _out4834;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9092_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4833, out _out4834);
              r = _out4833;
              resultingOwnership = _out4834;
            }
            readIdents = _9091_recIdents;
            return ;
          }
        } else if (_source323.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _9093___mcc_h96 = _source323.dtor_elements;
          bool _9094_isDatatype = _8983___mcc_h51;
          bool _9095_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9096_field = _8981___mcc_h49;
          DAST._IExpression _9097_on = _8980___mcc_h48;
          {
            RAST._IExpr _9098_onExpr;
            DCOMPUTF16._IOwnership _9099_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9100_recIdents;
            RAST._IExpr _out4835;
            DCOMPUTF16._IOwnership _out4836;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4837;
            DCOMPUTF16.COMP.GenExpr(_9097_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4835, out _out4836, out _out4837);
            _9098_onExpr = _out4835;
            _9099_onOwned = _out4836;
            _9100_recIdents = _out4837;
            if ((_9094_isDatatype) || (_9095_isConstant)) {
              r = ((_9098_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9096_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4838;
              DCOMPUTF16._IOwnership _out4839;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4838, out _out4839);
              r = _out4838;
              resultingOwnership = _out4839;
            } else {
              Dafny.ISequence<Dafny.Rune> _9101_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9101_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9098_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9096_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4840;
              DCOMPUTF16._IOwnership _out4841;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9101_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4840, out _out4841);
              r = _out4840;
              resultingOwnership = _out4841;
            }
            readIdents = _9100_recIdents;
            return ;
          }
        } else if (_source323.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _9102___mcc_h98 = _source323.dtor_mapElems;
          bool _9103_isDatatype = _8983___mcc_h51;
          bool _9104_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9105_field = _8981___mcc_h49;
          DAST._IExpression _9106_on = _8980___mcc_h48;
          {
            RAST._IExpr _9107_onExpr;
            DCOMPUTF16._IOwnership _9108_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9109_recIdents;
            RAST._IExpr _out4842;
            DCOMPUTF16._IOwnership _out4843;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4844;
            DCOMPUTF16.COMP.GenExpr(_9106_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4842, out _out4843, out _out4844);
            _9107_onExpr = _out4842;
            _9108_onOwned = _out4843;
            _9109_recIdents = _out4844;
            if ((_9103_isDatatype) || (_9104_isConstant)) {
              r = ((_9107_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9105_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4845;
              DCOMPUTF16._IOwnership _out4846;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4845, out _out4846);
              r = _out4845;
              resultingOwnership = _out4846;
            } else {
              Dafny.ISequence<Dafny.Rune> _9110_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9110_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9107_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9105_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4847;
              DCOMPUTF16._IOwnership _out4848;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9110_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4847, out _out4848);
              r = _out4847;
              resultingOwnership = _out4848;
            }
            readIdents = _9109_recIdents;
            return ;
          }
        } else if (_source323.is_MapBuilder) {
          DAST._IType _9111___mcc_h100 = _source323.dtor_keyType;
          DAST._IType _9112___mcc_h101 = _source323.dtor_valueType;
          bool _9113_isDatatype = _8983___mcc_h51;
          bool _9114_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9115_field = _8981___mcc_h49;
          DAST._IExpression _9116_on = _8980___mcc_h48;
          {
            RAST._IExpr _9117_onExpr;
            DCOMPUTF16._IOwnership _9118_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9119_recIdents;
            RAST._IExpr _out4849;
            DCOMPUTF16._IOwnership _out4850;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4851;
            DCOMPUTF16.COMP.GenExpr(_9116_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4849, out _out4850, out _out4851);
            _9117_onExpr = _out4849;
            _9118_onOwned = _out4850;
            _9119_recIdents = _out4851;
            if ((_9113_isDatatype) || (_9114_isConstant)) {
              r = ((_9117_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9115_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4852;
              DCOMPUTF16._IOwnership _out4853;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4852, out _out4853);
              r = _out4852;
              resultingOwnership = _out4853;
            } else {
              Dafny.ISequence<Dafny.Rune> _9120_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9120_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9117_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9115_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4854;
              DCOMPUTF16._IOwnership _out4855;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9120_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4854, out _out4855);
              r = _out4854;
              resultingOwnership = _out4855;
            }
            readIdents = _9119_recIdents;
            return ;
          }
        } else if (_source323.is_SeqUpdate) {
          DAST._IExpression _9121___mcc_h104 = _source323.dtor_expr;
          DAST._IExpression _9122___mcc_h105 = _source323.dtor_indexExpr;
          DAST._IExpression _9123___mcc_h106 = _source323.dtor_value;
          bool _9124_isDatatype = _8983___mcc_h51;
          bool _9125_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9126_field = _8981___mcc_h49;
          DAST._IExpression _9127_on = _8980___mcc_h48;
          {
            RAST._IExpr _9128_onExpr;
            DCOMPUTF16._IOwnership _9129_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9130_recIdents;
            RAST._IExpr _out4856;
            DCOMPUTF16._IOwnership _out4857;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4858;
            DCOMPUTF16.COMP.GenExpr(_9127_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4856, out _out4857, out _out4858);
            _9128_onExpr = _out4856;
            _9129_onOwned = _out4857;
            _9130_recIdents = _out4858;
            if ((_9124_isDatatype) || (_9125_isConstant)) {
              r = ((_9128_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9126_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4859;
              DCOMPUTF16._IOwnership _out4860;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4859, out _out4860);
              r = _out4859;
              resultingOwnership = _out4860;
            } else {
              Dafny.ISequence<Dafny.Rune> _9131_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9131_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9128_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9126_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4861;
              DCOMPUTF16._IOwnership _out4862;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9131_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4861, out _out4862);
              r = _out4861;
              resultingOwnership = _out4862;
            }
            readIdents = _9130_recIdents;
            return ;
          }
        } else if (_source323.is_MapUpdate) {
          DAST._IExpression _9132___mcc_h110 = _source323.dtor_expr;
          DAST._IExpression _9133___mcc_h111 = _source323.dtor_indexExpr;
          DAST._IExpression _9134___mcc_h112 = _source323.dtor_value;
          bool _9135_isDatatype = _8983___mcc_h51;
          bool _9136_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9137_field = _8981___mcc_h49;
          DAST._IExpression _9138_on = _8980___mcc_h48;
          {
            RAST._IExpr _9139_onExpr;
            DCOMPUTF16._IOwnership _9140_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9141_recIdents;
            RAST._IExpr _out4863;
            DCOMPUTF16._IOwnership _out4864;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4865;
            DCOMPUTF16.COMP.GenExpr(_9138_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4863, out _out4864, out _out4865);
            _9139_onExpr = _out4863;
            _9140_onOwned = _out4864;
            _9141_recIdents = _out4865;
            if ((_9135_isDatatype) || (_9136_isConstant)) {
              r = ((_9139_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9137_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4866;
              DCOMPUTF16._IOwnership _out4867;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4866, out _out4867);
              r = _out4866;
              resultingOwnership = _out4867;
            } else {
              Dafny.ISequence<Dafny.Rune> _9142_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9142_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9139_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9137_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4868;
              DCOMPUTF16._IOwnership _out4869;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9142_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4868, out _out4869);
              r = _out4868;
              resultingOwnership = _out4869;
            }
            readIdents = _9141_recIdents;
            return ;
          }
        } else if (_source323.is_SetBuilder) {
          DAST._IType _9143___mcc_h116 = _source323.dtor_elemType;
          bool _9144_isDatatype = _8983___mcc_h51;
          bool _9145_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9146_field = _8981___mcc_h49;
          DAST._IExpression _9147_on = _8980___mcc_h48;
          {
            RAST._IExpr _9148_onExpr;
            DCOMPUTF16._IOwnership _9149_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9150_recIdents;
            RAST._IExpr _out4870;
            DCOMPUTF16._IOwnership _out4871;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4872;
            DCOMPUTF16.COMP.GenExpr(_9147_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4870, out _out4871, out _out4872);
            _9148_onExpr = _out4870;
            _9149_onOwned = _out4871;
            _9150_recIdents = _out4872;
            if ((_9144_isDatatype) || (_9145_isConstant)) {
              r = ((_9148_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9146_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4873;
              DCOMPUTF16._IOwnership _out4874;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4873, out _out4874);
              r = _out4873;
              resultingOwnership = _out4874;
            } else {
              Dafny.ISequence<Dafny.Rune> _9151_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9151_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9148_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9146_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4875;
              DCOMPUTF16._IOwnership _out4876;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9151_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4875, out _out4876);
              r = _out4875;
              resultingOwnership = _out4876;
            }
            readIdents = _9150_recIdents;
            return ;
          }
        } else if (_source323.is_ToMultiset) {
          DAST._IExpression _9152___mcc_h118 = _source323.dtor_ToMultiset_a0;
          bool _9153_isDatatype = _8983___mcc_h51;
          bool _9154_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9155_field = _8981___mcc_h49;
          DAST._IExpression _9156_on = _8980___mcc_h48;
          {
            RAST._IExpr _9157_onExpr;
            DCOMPUTF16._IOwnership _9158_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9159_recIdents;
            RAST._IExpr _out4877;
            DCOMPUTF16._IOwnership _out4878;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4879;
            DCOMPUTF16.COMP.GenExpr(_9156_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4877, out _out4878, out _out4879);
            _9157_onExpr = _out4877;
            _9158_onOwned = _out4878;
            _9159_recIdents = _out4879;
            if ((_9153_isDatatype) || (_9154_isConstant)) {
              r = ((_9157_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9155_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4880;
              DCOMPUTF16._IOwnership _out4881;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4880, out _out4881);
              r = _out4880;
              resultingOwnership = _out4881;
            } else {
              Dafny.ISequence<Dafny.Rune> _9160_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9160_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9157_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9155_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4882;
              DCOMPUTF16._IOwnership _out4883;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9160_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4882, out _out4883);
              r = _out4882;
              resultingOwnership = _out4883;
            }
            readIdents = _9159_recIdents;
            return ;
          }
        } else if (_source323.is_This) {
          bool _9161_isDatatype = _8983___mcc_h51;
          bool _9162_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9163_field = _8981___mcc_h49;
          DAST._IExpression _9164_on = _8980___mcc_h48;
          {
            RAST._IExpr _9165_onExpr;
            DCOMPUTF16._IOwnership _9166_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9167_recIdents;
            RAST._IExpr _out4884;
            DCOMPUTF16._IOwnership _out4885;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4886;
            DCOMPUTF16.COMP.GenExpr(_9164_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4884, out _out4885, out _out4886);
            _9165_onExpr = _out4884;
            _9166_onOwned = _out4885;
            _9167_recIdents = _out4886;
            if ((_9161_isDatatype) || (_9162_isConstant)) {
              r = ((_9165_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9163_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4887;
              DCOMPUTF16._IOwnership _out4888;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4887, out _out4888);
              r = _out4887;
              resultingOwnership = _out4888;
            } else {
              Dafny.ISequence<Dafny.Rune> _9168_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9168_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9165_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9163_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4889;
              DCOMPUTF16._IOwnership _out4890;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9168_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4889, out _out4890);
              r = _out4889;
              resultingOwnership = _out4890;
            }
            readIdents = _9167_recIdents;
            return ;
          }
        } else if (_source323.is_Ite) {
          DAST._IExpression _9169___mcc_h120 = _source323.dtor_cond;
          DAST._IExpression _9170___mcc_h121 = _source323.dtor_thn;
          DAST._IExpression _9171___mcc_h122 = _source323.dtor_els;
          bool _9172_isDatatype = _8983___mcc_h51;
          bool _9173_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9174_field = _8981___mcc_h49;
          DAST._IExpression _9175_on = _8980___mcc_h48;
          {
            RAST._IExpr _9176_onExpr;
            DCOMPUTF16._IOwnership _9177_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9178_recIdents;
            RAST._IExpr _out4891;
            DCOMPUTF16._IOwnership _out4892;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4893;
            DCOMPUTF16.COMP.GenExpr(_9175_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4891, out _out4892, out _out4893);
            _9176_onExpr = _out4891;
            _9177_onOwned = _out4892;
            _9178_recIdents = _out4893;
            if ((_9172_isDatatype) || (_9173_isConstant)) {
              r = ((_9176_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9174_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4894;
              DCOMPUTF16._IOwnership _out4895;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4894, out _out4895);
              r = _out4894;
              resultingOwnership = _out4895;
            } else {
              Dafny.ISequence<Dafny.Rune> _9179_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9179_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9176_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9174_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4896;
              DCOMPUTF16._IOwnership _out4897;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9179_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4896, out _out4897);
              r = _out4896;
              resultingOwnership = _out4897;
            }
            readIdents = _9178_recIdents;
            return ;
          }
        } else if (_source323.is_UnOp) {
          DAST._IUnaryOp _9180___mcc_h126 = _source323.dtor_unOp;
          DAST._IExpression _9181___mcc_h127 = _source323.dtor_expr;
          DAST.Format._IUnOpFormat _9182___mcc_h128 = _source323.dtor_format1;
          bool _9183_isDatatype = _8983___mcc_h51;
          bool _9184_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9185_field = _8981___mcc_h49;
          DAST._IExpression _9186_on = _8980___mcc_h48;
          {
            RAST._IExpr _9187_onExpr;
            DCOMPUTF16._IOwnership _9188_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9189_recIdents;
            RAST._IExpr _out4898;
            DCOMPUTF16._IOwnership _out4899;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4900;
            DCOMPUTF16.COMP.GenExpr(_9186_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4898, out _out4899, out _out4900);
            _9187_onExpr = _out4898;
            _9188_onOwned = _out4899;
            _9189_recIdents = _out4900;
            if ((_9183_isDatatype) || (_9184_isConstant)) {
              r = ((_9187_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9185_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4901;
              DCOMPUTF16._IOwnership _out4902;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4901, out _out4902);
              r = _out4901;
              resultingOwnership = _out4902;
            } else {
              Dafny.ISequence<Dafny.Rune> _9190_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9190_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9187_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9185_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4903;
              DCOMPUTF16._IOwnership _out4904;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9190_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4903, out _out4904);
              r = _out4903;
              resultingOwnership = _out4904;
            }
            readIdents = _9189_recIdents;
            return ;
          }
        } else if (_source323.is_BinOp) {
          DAST._IBinOp _9191___mcc_h132 = _source323.dtor_op;
          DAST._IExpression _9192___mcc_h133 = _source323.dtor_left;
          DAST._IExpression _9193___mcc_h134 = _source323.dtor_right;
          DAST.Format._IBinOpFormat _9194___mcc_h135 = _source323.dtor_format2;
          bool _9195_isDatatype = _8983___mcc_h51;
          bool _9196_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9197_field = _8981___mcc_h49;
          DAST._IExpression _9198_on = _8980___mcc_h48;
          {
            RAST._IExpr _9199_onExpr;
            DCOMPUTF16._IOwnership _9200_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9201_recIdents;
            RAST._IExpr _out4905;
            DCOMPUTF16._IOwnership _out4906;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4907;
            DCOMPUTF16.COMP.GenExpr(_9198_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4905, out _out4906, out _out4907);
            _9199_onExpr = _out4905;
            _9200_onOwned = _out4906;
            _9201_recIdents = _out4907;
            if ((_9195_isDatatype) || (_9196_isConstant)) {
              r = ((_9199_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9197_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4908;
              DCOMPUTF16._IOwnership _out4909;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4908, out _out4909);
              r = _out4908;
              resultingOwnership = _out4909;
            } else {
              Dafny.ISequence<Dafny.Rune> _9202_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9202_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9199_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9197_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4910;
              DCOMPUTF16._IOwnership _out4911;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9202_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4910, out _out4911);
              r = _out4910;
              resultingOwnership = _out4911;
            }
            readIdents = _9201_recIdents;
            return ;
          }
        } else if (_source323.is_ArrayLen) {
          DAST._IExpression _9203___mcc_h140 = _source323.dtor_expr;
          BigInteger _9204___mcc_h141 = _source323.dtor_dim;
          bool _9205_isDatatype = _8983___mcc_h51;
          bool _9206_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9207_field = _8981___mcc_h49;
          DAST._IExpression _9208_on = _8980___mcc_h48;
          {
            RAST._IExpr _9209_onExpr;
            DCOMPUTF16._IOwnership _9210_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9211_recIdents;
            RAST._IExpr _out4912;
            DCOMPUTF16._IOwnership _out4913;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4914;
            DCOMPUTF16.COMP.GenExpr(_9208_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4912, out _out4913, out _out4914);
            _9209_onExpr = _out4912;
            _9210_onOwned = _out4913;
            _9211_recIdents = _out4914;
            if ((_9205_isDatatype) || (_9206_isConstant)) {
              r = ((_9209_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9207_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4915;
              DCOMPUTF16._IOwnership _out4916;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4915, out _out4916);
              r = _out4915;
              resultingOwnership = _out4916;
            } else {
              Dafny.ISequence<Dafny.Rune> _9212_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9212_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9209_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9207_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4917;
              DCOMPUTF16._IOwnership _out4918;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9212_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4917, out _out4918);
              r = _out4917;
              resultingOwnership = _out4918;
            }
            readIdents = _9211_recIdents;
            return ;
          }
        } else if (_source323.is_MapKeys) {
          DAST._IExpression _9213___mcc_h144 = _source323.dtor_expr;
          bool _9214_isDatatype = _8983___mcc_h51;
          bool _9215_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9216_field = _8981___mcc_h49;
          DAST._IExpression _9217_on = _8980___mcc_h48;
          {
            RAST._IExpr _9218_onExpr;
            DCOMPUTF16._IOwnership _9219_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9220_recIdents;
            RAST._IExpr _out4919;
            DCOMPUTF16._IOwnership _out4920;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4921;
            DCOMPUTF16.COMP.GenExpr(_9217_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4919, out _out4920, out _out4921);
            _9218_onExpr = _out4919;
            _9219_onOwned = _out4920;
            _9220_recIdents = _out4921;
            if ((_9214_isDatatype) || (_9215_isConstant)) {
              r = ((_9218_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9216_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4922;
              DCOMPUTF16._IOwnership _out4923;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4922, out _out4923);
              r = _out4922;
              resultingOwnership = _out4923;
            } else {
              Dafny.ISequence<Dafny.Rune> _9221_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9221_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9218_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9216_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4924;
              DCOMPUTF16._IOwnership _out4925;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9221_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4924, out _out4925);
              r = _out4924;
              resultingOwnership = _out4925;
            }
            readIdents = _9220_recIdents;
            return ;
          }
        } else if (_source323.is_MapValues) {
          DAST._IExpression _9222___mcc_h146 = _source323.dtor_expr;
          bool _9223_isDatatype = _8983___mcc_h51;
          bool _9224_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9225_field = _8981___mcc_h49;
          DAST._IExpression _9226_on = _8980___mcc_h48;
          {
            RAST._IExpr _9227_onExpr;
            DCOMPUTF16._IOwnership _9228_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9229_recIdents;
            RAST._IExpr _out4926;
            DCOMPUTF16._IOwnership _out4927;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4928;
            DCOMPUTF16.COMP.GenExpr(_9226_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4926, out _out4927, out _out4928);
            _9227_onExpr = _out4926;
            _9228_onOwned = _out4927;
            _9229_recIdents = _out4928;
            if ((_9223_isDatatype) || (_9224_isConstant)) {
              r = ((_9227_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9225_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4929;
              DCOMPUTF16._IOwnership _out4930;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4929, out _out4930);
              r = _out4929;
              resultingOwnership = _out4930;
            } else {
              Dafny.ISequence<Dafny.Rune> _9230_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9230_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9227_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9225_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4931;
              DCOMPUTF16._IOwnership _out4932;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9230_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4931, out _out4932);
              r = _out4931;
              resultingOwnership = _out4932;
            }
            readIdents = _9229_recIdents;
            return ;
          }
        } else if (_source323.is_Select) {
          DAST._IExpression _9231___mcc_h148 = _source323.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _9232___mcc_h149 = _source323.dtor_field;
          bool _9233___mcc_h150 = _source323.dtor_isConstant;
          bool _9234___mcc_h151 = _source323.dtor_onDatatype;
          bool _9235_isDatatype = _8983___mcc_h51;
          bool _9236_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9237_field = _8981___mcc_h49;
          DAST._IExpression _9238_on = _8980___mcc_h48;
          {
            RAST._IExpr _9239_onExpr;
            DCOMPUTF16._IOwnership _9240_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9241_recIdents;
            RAST._IExpr _out4933;
            DCOMPUTF16._IOwnership _out4934;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4935;
            DCOMPUTF16.COMP.GenExpr(_9238_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4933, out _out4934, out _out4935);
            _9239_onExpr = _out4933;
            _9240_onOwned = _out4934;
            _9241_recIdents = _out4935;
            if ((_9235_isDatatype) || (_9236_isConstant)) {
              r = ((_9239_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9237_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4936;
              DCOMPUTF16._IOwnership _out4937;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4936, out _out4937);
              r = _out4936;
              resultingOwnership = _out4937;
            } else {
              Dafny.ISequence<Dafny.Rune> _9242_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9242_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9239_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9237_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4938;
              DCOMPUTF16._IOwnership _out4939;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9242_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4938, out _out4939);
              r = _out4938;
              resultingOwnership = _out4939;
            }
            readIdents = _9241_recIdents;
            return ;
          }
        } else if (_source323.is_SelectFn) {
          DAST._IExpression _9243___mcc_h156 = _source323.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _9244___mcc_h157 = _source323.dtor_field;
          bool _9245___mcc_h158 = _source323.dtor_onDatatype;
          bool _9246___mcc_h159 = _source323.dtor_isStatic;
          BigInteger _9247___mcc_h160 = _source323.dtor_arity;
          bool _9248_isDatatype = _8983___mcc_h51;
          bool _9249_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9250_field = _8981___mcc_h49;
          DAST._IExpression _9251_on = _8980___mcc_h48;
          {
            RAST._IExpr _9252_onExpr;
            DCOMPUTF16._IOwnership _9253_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9254_recIdents;
            RAST._IExpr _out4940;
            DCOMPUTF16._IOwnership _out4941;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4942;
            DCOMPUTF16.COMP.GenExpr(_9251_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4940, out _out4941, out _out4942);
            _9252_onExpr = _out4940;
            _9253_onOwned = _out4941;
            _9254_recIdents = _out4942;
            if ((_9248_isDatatype) || (_9249_isConstant)) {
              r = ((_9252_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9250_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4943;
              DCOMPUTF16._IOwnership _out4944;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4943, out _out4944);
              r = _out4943;
              resultingOwnership = _out4944;
            } else {
              Dafny.ISequence<Dafny.Rune> _9255_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9255_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9252_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9250_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4945;
              DCOMPUTF16._IOwnership _out4946;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9255_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4945, out _out4946);
              r = _out4945;
              resultingOwnership = _out4946;
            }
            readIdents = _9254_recIdents;
            return ;
          }
        } else if (_source323.is_Index) {
          DAST._IExpression _9256___mcc_h166 = _source323.dtor_expr;
          DAST._ICollKind _9257___mcc_h167 = _source323.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _9258___mcc_h168 = _source323.dtor_indices;
          bool _9259_isDatatype = _8983___mcc_h51;
          bool _9260_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9261_field = _8981___mcc_h49;
          DAST._IExpression _9262_on = _8980___mcc_h48;
          {
            RAST._IExpr _9263_onExpr;
            DCOMPUTF16._IOwnership _9264_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9265_recIdents;
            RAST._IExpr _out4947;
            DCOMPUTF16._IOwnership _out4948;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4949;
            DCOMPUTF16.COMP.GenExpr(_9262_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4947, out _out4948, out _out4949);
            _9263_onExpr = _out4947;
            _9264_onOwned = _out4948;
            _9265_recIdents = _out4949;
            if ((_9259_isDatatype) || (_9260_isConstant)) {
              r = ((_9263_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9261_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4950;
              DCOMPUTF16._IOwnership _out4951;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4950, out _out4951);
              r = _out4950;
              resultingOwnership = _out4951;
            } else {
              Dafny.ISequence<Dafny.Rune> _9266_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9266_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9263_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9261_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4952;
              DCOMPUTF16._IOwnership _out4953;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9266_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4952, out _out4953);
              r = _out4952;
              resultingOwnership = _out4953;
            }
            readIdents = _9265_recIdents;
            return ;
          }
        } else if (_source323.is_IndexRange) {
          DAST._IExpression _9267___mcc_h172 = _source323.dtor_expr;
          bool _9268___mcc_h173 = _source323.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _9269___mcc_h174 = _source323.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _9270___mcc_h175 = _source323.dtor_high;
          bool _9271_isDatatype = _8983___mcc_h51;
          bool _9272_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9273_field = _8981___mcc_h49;
          DAST._IExpression _9274_on = _8980___mcc_h48;
          {
            RAST._IExpr _9275_onExpr;
            DCOMPUTF16._IOwnership _9276_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9277_recIdents;
            RAST._IExpr _out4954;
            DCOMPUTF16._IOwnership _out4955;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4956;
            DCOMPUTF16.COMP.GenExpr(_9274_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4954, out _out4955, out _out4956);
            _9275_onExpr = _out4954;
            _9276_onOwned = _out4955;
            _9277_recIdents = _out4956;
            if ((_9271_isDatatype) || (_9272_isConstant)) {
              r = ((_9275_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9273_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4957;
              DCOMPUTF16._IOwnership _out4958;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4957, out _out4958);
              r = _out4957;
              resultingOwnership = _out4958;
            } else {
              Dafny.ISequence<Dafny.Rune> _9278_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9278_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9275_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9273_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4959;
              DCOMPUTF16._IOwnership _out4960;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9278_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4959, out _out4960);
              r = _out4959;
              resultingOwnership = _out4960;
            }
            readIdents = _9277_recIdents;
            return ;
          }
        } else if (_source323.is_TupleSelect) {
          DAST._IExpression _9279___mcc_h180 = _source323.dtor_expr;
          BigInteger _9280___mcc_h181 = _source323.dtor_index;
          bool _9281_isDatatype = _8983___mcc_h51;
          bool _9282_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9283_field = _8981___mcc_h49;
          DAST._IExpression _9284_on = _8980___mcc_h48;
          {
            RAST._IExpr _9285_onExpr;
            DCOMPUTF16._IOwnership _9286_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9287_recIdents;
            RAST._IExpr _out4961;
            DCOMPUTF16._IOwnership _out4962;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4963;
            DCOMPUTF16.COMP.GenExpr(_9284_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4961, out _out4962, out _out4963);
            _9285_onExpr = _out4961;
            _9286_onOwned = _out4962;
            _9287_recIdents = _out4963;
            if ((_9281_isDatatype) || (_9282_isConstant)) {
              r = ((_9285_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9283_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4964;
              DCOMPUTF16._IOwnership _out4965;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4964, out _out4965);
              r = _out4964;
              resultingOwnership = _out4965;
            } else {
              Dafny.ISequence<Dafny.Rune> _9288_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9288_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9285_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9283_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4966;
              DCOMPUTF16._IOwnership _out4967;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9288_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4966, out _out4967);
              r = _out4966;
              resultingOwnership = _out4967;
            }
            readIdents = _9287_recIdents;
            return ;
          }
        } else if (_source323.is_Call) {
          DAST._IExpression _9289___mcc_h184 = _source323.dtor_on;
          DAST._ICallName _9290___mcc_h185 = _source323.dtor_callName;
          Dafny.ISequence<DAST._IType> _9291___mcc_h186 = _source323.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _9292___mcc_h187 = _source323.dtor_args;
          bool _9293_isDatatype = _8983___mcc_h51;
          bool _9294_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9295_field = _8981___mcc_h49;
          DAST._IExpression _9296_on = _8980___mcc_h48;
          {
            RAST._IExpr _9297_onExpr;
            DCOMPUTF16._IOwnership _9298_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9299_recIdents;
            RAST._IExpr _out4968;
            DCOMPUTF16._IOwnership _out4969;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4970;
            DCOMPUTF16.COMP.GenExpr(_9296_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4968, out _out4969, out _out4970);
            _9297_onExpr = _out4968;
            _9298_onOwned = _out4969;
            _9299_recIdents = _out4970;
            if ((_9293_isDatatype) || (_9294_isConstant)) {
              r = ((_9297_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9295_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4971;
              DCOMPUTF16._IOwnership _out4972;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4971, out _out4972);
              r = _out4971;
              resultingOwnership = _out4972;
            } else {
              Dafny.ISequence<Dafny.Rune> _9300_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9300_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9297_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9295_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4973;
              DCOMPUTF16._IOwnership _out4974;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9300_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4973, out _out4974);
              r = _out4973;
              resultingOwnership = _out4974;
            }
            readIdents = _9299_recIdents;
            return ;
          }
        } else if (_source323.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _9301___mcc_h192 = _source323.dtor_params;
          DAST._IType _9302___mcc_h193 = _source323.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _9303___mcc_h194 = _source323.dtor_body;
          bool _9304_isDatatype = _8983___mcc_h51;
          bool _9305_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9306_field = _8981___mcc_h49;
          DAST._IExpression _9307_on = _8980___mcc_h48;
          {
            RAST._IExpr _9308_onExpr;
            DCOMPUTF16._IOwnership _9309_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9310_recIdents;
            RAST._IExpr _out4975;
            DCOMPUTF16._IOwnership _out4976;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4977;
            DCOMPUTF16.COMP.GenExpr(_9307_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4975, out _out4976, out _out4977);
            _9308_onExpr = _out4975;
            _9309_onOwned = _out4976;
            _9310_recIdents = _out4977;
            if ((_9304_isDatatype) || (_9305_isConstant)) {
              r = ((_9308_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9306_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4978;
              DCOMPUTF16._IOwnership _out4979;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4978, out _out4979);
              r = _out4978;
              resultingOwnership = _out4979;
            } else {
              Dafny.ISequence<Dafny.Rune> _9311_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9311_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9308_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9306_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4980;
              DCOMPUTF16._IOwnership _out4981;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9311_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4980, out _out4981);
              r = _out4980;
              resultingOwnership = _out4981;
            }
            readIdents = _9310_recIdents;
            return ;
          }
        } else if (_source323.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9312___mcc_h198 = _source323.dtor_values;
          DAST._IType _9313___mcc_h199 = _source323.dtor_retType;
          DAST._IExpression _9314___mcc_h200 = _source323.dtor_expr;
          bool _9315_isDatatype = _8983___mcc_h51;
          bool _9316_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9317_field = _8981___mcc_h49;
          DAST._IExpression _9318_on = _8980___mcc_h48;
          {
            RAST._IExpr _9319_onExpr;
            DCOMPUTF16._IOwnership _9320_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9321_recIdents;
            RAST._IExpr _out4982;
            DCOMPUTF16._IOwnership _out4983;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4984;
            DCOMPUTF16.COMP.GenExpr(_9318_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4982, out _out4983, out _out4984);
            _9319_onExpr = _out4982;
            _9320_onOwned = _out4983;
            _9321_recIdents = _out4984;
            if ((_9315_isDatatype) || (_9316_isConstant)) {
              r = ((_9319_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9317_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4985;
              DCOMPUTF16._IOwnership _out4986;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4985, out _out4986);
              r = _out4985;
              resultingOwnership = _out4986;
            } else {
              Dafny.ISequence<Dafny.Rune> _9322_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9322_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9319_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9317_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4987;
              DCOMPUTF16._IOwnership _out4988;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9322_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4987, out _out4988);
              r = _out4987;
              resultingOwnership = _out4988;
            }
            readIdents = _9321_recIdents;
            return ;
          }
        } else if (_source323.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _9323___mcc_h204 = _source323.dtor_name;
          DAST._IType _9324___mcc_h205 = _source323.dtor_typ;
          DAST._IExpression _9325___mcc_h206 = _source323.dtor_value;
          DAST._IExpression _9326___mcc_h207 = _source323.dtor_iifeBody;
          bool _9327_isDatatype = _8983___mcc_h51;
          bool _9328_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9329_field = _8981___mcc_h49;
          DAST._IExpression _9330_on = _8980___mcc_h48;
          {
            RAST._IExpr _9331_onExpr;
            DCOMPUTF16._IOwnership _9332_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9333_recIdents;
            RAST._IExpr _out4989;
            DCOMPUTF16._IOwnership _out4990;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4991;
            DCOMPUTF16.COMP.GenExpr(_9330_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4989, out _out4990, out _out4991);
            _9331_onExpr = _out4989;
            _9332_onOwned = _out4990;
            _9333_recIdents = _out4991;
            if ((_9327_isDatatype) || (_9328_isConstant)) {
              r = ((_9331_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9329_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4992;
              DCOMPUTF16._IOwnership _out4993;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4992, out _out4993);
              r = _out4992;
              resultingOwnership = _out4993;
            } else {
              Dafny.ISequence<Dafny.Rune> _9334_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9334_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9331_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9329_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4994;
              DCOMPUTF16._IOwnership _out4995;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9334_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4994, out _out4995);
              r = _out4994;
              resultingOwnership = _out4995;
            }
            readIdents = _9333_recIdents;
            return ;
          }
        } else if (_source323.is_Apply) {
          DAST._IExpression _9335___mcc_h212 = _source323.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _9336___mcc_h213 = _source323.dtor_args;
          bool _9337_isDatatype = _8983___mcc_h51;
          bool _9338_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9339_field = _8981___mcc_h49;
          DAST._IExpression _9340_on = _8980___mcc_h48;
          {
            RAST._IExpr _9341_onExpr;
            DCOMPUTF16._IOwnership _9342_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9343_recIdents;
            RAST._IExpr _out4996;
            DCOMPUTF16._IOwnership _out4997;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4998;
            DCOMPUTF16.COMP.GenExpr(_9340_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4996, out _out4997, out _out4998);
            _9341_onExpr = _out4996;
            _9342_onOwned = _out4997;
            _9343_recIdents = _out4998;
            if ((_9337_isDatatype) || (_9338_isConstant)) {
              r = ((_9341_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9339_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4999;
              DCOMPUTF16._IOwnership _out5000;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4999, out _out5000);
              r = _out4999;
              resultingOwnership = _out5000;
            } else {
              Dafny.ISequence<Dafny.Rune> _9344_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9344_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9341_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9339_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5001;
              DCOMPUTF16._IOwnership _out5002;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9344_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5001, out _out5002);
              r = _out5001;
              resultingOwnership = _out5002;
            }
            readIdents = _9343_recIdents;
            return ;
          }
        } else if (_source323.is_TypeTest) {
          DAST._IExpression _9345___mcc_h216 = _source323.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9346___mcc_h217 = _source323.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _9347___mcc_h218 = _source323.dtor_variant;
          bool _9348_isDatatype = _8983___mcc_h51;
          bool _9349_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9350_field = _8981___mcc_h49;
          DAST._IExpression _9351_on = _8980___mcc_h48;
          {
            RAST._IExpr _9352_onExpr;
            DCOMPUTF16._IOwnership _9353_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9354_recIdents;
            RAST._IExpr _out5003;
            DCOMPUTF16._IOwnership _out5004;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5005;
            DCOMPUTF16.COMP.GenExpr(_9351_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5003, out _out5004, out _out5005);
            _9352_onExpr = _out5003;
            _9353_onOwned = _out5004;
            _9354_recIdents = _out5005;
            if ((_9348_isDatatype) || (_9349_isConstant)) {
              r = ((_9352_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9350_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5006;
              DCOMPUTF16._IOwnership _out5007;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5006, out _out5007);
              r = _out5006;
              resultingOwnership = _out5007;
            } else {
              Dafny.ISequence<Dafny.Rune> _9355_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9355_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9352_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9350_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5008;
              DCOMPUTF16._IOwnership _out5009;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9355_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5008, out _out5009);
              r = _out5008;
              resultingOwnership = _out5009;
            }
            readIdents = _9354_recIdents;
            return ;
          }
        } else if (_source323.is_InitializationValue) {
          DAST._IType _9356___mcc_h222 = _source323.dtor_typ;
          bool _9357_isDatatype = _8983___mcc_h51;
          bool _9358_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9359_field = _8981___mcc_h49;
          DAST._IExpression _9360_on = _8980___mcc_h48;
          {
            RAST._IExpr _9361_onExpr;
            DCOMPUTF16._IOwnership _9362_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9363_recIdents;
            RAST._IExpr _out5010;
            DCOMPUTF16._IOwnership _out5011;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5012;
            DCOMPUTF16.COMP.GenExpr(_9360_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5010, out _out5011, out _out5012);
            _9361_onExpr = _out5010;
            _9362_onOwned = _out5011;
            _9363_recIdents = _out5012;
            if ((_9357_isDatatype) || (_9358_isConstant)) {
              r = ((_9361_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9359_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5013;
              DCOMPUTF16._IOwnership _out5014;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5013, out _out5014);
              r = _out5013;
              resultingOwnership = _out5014;
            } else {
              Dafny.ISequence<Dafny.Rune> _9364_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9364_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9361_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9359_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5015;
              DCOMPUTF16._IOwnership _out5016;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9364_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5015, out _out5016);
              r = _out5015;
              resultingOwnership = _out5016;
            }
            readIdents = _9363_recIdents;
            return ;
          }
        } else if (_source323.is_BoolBoundedPool) {
          bool _9365_isDatatype = _8983___mcc_h51;
          bool _9366_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9367_field = _8981___mcc_h49;
          DAST._IExpression _9368_on = _8980___mcc_h48;
          {
            RAST._IExpr _9369_onExpr;
            DCOMPUTF16._IOwnership _9370_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9371_recIdents;
            RAST._IExpr _out5017;
            DCOMPUTF16._IOwnership _out5018;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5019;
            DCOMPUTF16.COMP.GenExpr(_9368_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5017, out _out5018, out _out5019);
            _9369_onExpr = _out5017;
            _9370_onOwned = _out5018;
            _9371_recIdents = _out5019;
            if ((_9365_isDatatype) || (_9366_isConstant)) {
              r = ((_9369_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9367_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5020;
              DCOMPUTF16._IOwnership _out5021;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5020, out _out5021);
              r = _out5020;
              resultingOwnership = _out5021;
            } else {
              Dafny.ISequence<Dafny.Rune> _9372_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9372_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9369_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9367_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5022;
              DCOMPUTF16._IOwnership _out5023;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9372_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5022, out _out5023);
              r = _out5022;
              resultingOwnership = _out5023;
            }
            readIdents = _9371_recIdents;
            return ;
          }
        } else if (_source323.is_SetBoundedPool) {
          DAST._IExpression _9373___mcc_h224 = _source323.dtor_of;
          bool _9374_isDatatype = _8983___mcc_h51;
          bool _9375_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9376_field = _8981___mcc_h49;
          DAST._IExpression _9377_on = _8980___mcc_h48;
          {
            RAST._IExpr _9378_onExpr;
            DCOMPUTF16._IOwnership _9379_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9380_recIdents;
            RAST._IExpr _out5024;
            DCOMPUTF16._IOwnership _out5025;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5026;
            DCOMPUTF16.COMP.GenExpr(_9377_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5024, out _out5025, out _out5026);
            _9378_onExpr = _out5024;
            _9379_onOwned = _out5025;
            _9380_recIdents = _out5026;
            if ((_9374_isDatatype) || (_9375_isConstant)) {
              r = ((_9378_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9376_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5027;
              DCOMPUTF16._IOwnership _out5028;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5027, out _out5028);
              r = _out5027;
              resultingOwnership = _out5028;
            } else {
              Dafny.ISequence<Dafny.Rune> _9381_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9381_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9378_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9376_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5029;
              DCOMPUTF16._IOwnership _out5030;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9381_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5029, out _out5030);
              r = _out5029;
              resultingOwnership = _out5030;
            }
            readIdents = _9380_recIdents;
            return ;
          }
        } else if (_source323.is_SeqBoundedPool) {
          DAST._IExpression _9382___mcc_h226 = _source323.dtor_of;
          bool _9383___mcc_h227 = _source323.dtor_includeDuplicates;
          bool _9384_isDatatype = _8983___mcc_h51;
          bool _9385_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9386_field = _8981___mcc_h49;
          DAST._IExpression _9387_on = _8980___mcc_h48;
          {
            RAST._IExpr _9388_onExpr;
            DCOMPUTF16._IOwnership _9389_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9390_recIdents;
            RAST._IExpr _out5031;
            DCOMPUTF16._IOwnership _out5032;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5033;
            DCOMPUTF16.COMP.GenExpr(_9387_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5031, out _out5032, out _out5033);
            _9388_onExpr = _out5031;
            _9389_onOwned = _out5032;
            _9390_recIdents = _out5033;
            if ((_9384_isDatatype) || (_9385_isConstant)) {
              r = ((_9388_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9386_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5034;
              DCOMPUTF16._IOwnership _out5035;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5034, out _out5035);
              r = _out5034;
              resultingOwnership = _out5035;
            } else {
              Dafny.ISequence<Dafny.Rune> _9391_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9391_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9388_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9386_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5036;
              DCOMPUTF16._IOwnership _out5037;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9391_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5036, out _out5037);
              r = _out5036;
              resultingOwnership = _out5037;
            }
            readIdents = _9390_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _9392___mcc_h230 = _source323.dtor_lo;
          DAST._IExpression _9393___mcc_h231 = _source323.dtor_hi;
          bool _9394_isDatatype = _8983___mcc_h51;
          bool _9395_isConstant = _8982___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9396_field = _8981___mcc_h49;
          DAST._IExpression _9397_on = _8980___mcc_h48;
          {
            RAST._IExpr _9398_onExpr;
            DCOMPUTF16._IOwnership _9399_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9400_recIdents;
            RAST._IExpr _out5038;
            DCOMPUTF16._IOwnership _out5039;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5040;
            DCOMPUTF16.COMP.GenExpr(_9397_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5038, out _out5039, out _out5040);
            _9398_onExpr = _out5038;
            _9399_onOwned = _out5039;
            _9400_recIdents = _out5040;
            if ((_9394_isDatatype) || (_9395_isConstant)) {
              r = ((_9398_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9396_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5041;
              DCOMPUTF16._IOwnership _out5042;
              DCOMPUTF16.COMP.FromOwnership(r, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5041, out _out5042);
              r = _out5041;
              resultingOwnership = _out5042;
            } else {
              Dafny.ISequence<Dafny.Rune> _9401_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9401_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9398_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9396_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5043;
              DCOMPUTF16._IOwnership _out5044;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9401_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5043, out _out5044);
              r = _out5043;
              resultingOwnership = _out5044;
            }
            readIdents = _9400_recIdents;
            return ;
          }
        }
      } else if (_source320.is_SelectFn) {
        DAST._IExpression _9402___mcc_h234 = _source320.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _9403___mcc_h235 = _source320.dtor_field;
        bool _9404___mcc_h236 = _source320.dtor_onDatatype;
        bool _9405___mcc_h237 = _source320.dtor_isStatic;
        BigInteger _9406___mcc_h238 = _source320.dtor_arity;
        BigInteger _9407_arity = _9406___mcc_h238;
        bool _9408_isStatic = _9405___mcc_h237;
        bool _9409_isDatatype = _9404___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _9410_field = _9403___mcc_h235;
        DAST._IExpression _9411_on = _9402___mcc_h234;
        {
          RAST._IExpr _9412_onExpr;
          DCOMPUTF16._IOwnership _9413_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9414_recIdents;
          RAST._IExpr _out5045;
          DCOMPUTF16._IOwnership _out5046;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5047;
          DCOMPUTF16.COMP.GenExpr(_9411_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5045, out _out5046, out _out5047);
          _9412_onExpr = _out5045;
          _9413_onOwned = _out5046;
          _9414_recIdents = _out5047;
          Dafny.ISequence<Dafny.Rune> _9415_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _9416_onString;
          _9416_onString = (_9412_onExpr)._ToString(DCOMPUTF16.__default.IND);
          if (_9408_isStatic) {
            _9415_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9416_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_9410_field));
          } else {
            _9415_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _9415_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9415_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _9416_onString), ((object.Equals(_9413_onOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _9417_args;
            _9417_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _9418_i;
            _9418_i = BigInteger.Zero;
            while ((_9418_i) < (_9407_arity)) {
              if ((_9418_i).Sign == 1) {
                _9417_args = Dafny.Sequence<Dafny.Rune>.Concat(_9417_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _9417_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9417_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_9418_i));
              _9418_i = (_9418_i) + (BigInteger.One);
            }
            _9415_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9415_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _9417_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _9415_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9415_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _9410_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _9417_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _9415_s = Dafny.Sequence<Dafny.Rune>.Concat(_9415_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _9415_s = Dafny.Sequence<Dafny.Rune>.Concat(_9415_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _9419_typeShape;
          _9419_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _9420_i;
          _9420_i = BigInteger.Zero;
          while ((_9420_i) < (_9407_arity)) {
            if ((_9420_i).Sign == 1) {
              _9419_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_9419_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _9419_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_9419_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _9420_i = (_9420_i) + (BigInteger.One);
          }
          _9419_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_9419_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _9415_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _9415_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _9419_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_9415_s);
          RAST._IExpr _out5048;
          DCOMPUTF16._IOwnership _out5049;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5048, out _out5049);
          r = _out5048;
          resultingOwnership = _out5049;
          readIdents = _9414_recIdents;
          return ;
        }
      } else if (_source320.is_Index) {
        DAST._IExpression _9421___mcc_h239 = _source320.dtor_expr;
        DAST._ICollKind _9422___mcc_h240 = _source320.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _9423___mcc_h241 = _source320.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _9424_indices = _9423___mcc_h241;
        DAST._ICollKind _9425_collKind = _9422___mcc_h240;
        DAST._IExpression _9426_on = _9421___mcc_h239;
        {
          RAST._IExpr _9427_onExpr;
          DCOMPUTF16._IOwnership _9428_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9429_recIdents;
          RAST._IExpr _out5050;
          DCOMPUTF16._IOwnership _out5051;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5052;
          DCOMPUTF16.COMP.GenExpr(_9426_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5050, out _out5051, out _out5052);
          _9427_onExpr = _out5050;
          _9428_onOwned = _out5051;
          _9429_recIdents = _out5052;
          readIdents = _9429_recIdents;
          r = _9427_onExpr;
          BigInteger _9430_i;
          _9430_i = BigInteger.Zero;
          while ((_9430_i) < (new BigInteger((_9424_indices).Count))) {
            if (object.Equals(_9425_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _9431_idx;
            DCOMPUTF16._IOwnership _9432_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9433_recIdentsIdx;
            RAST._IExpr _out5053;
            DCOMPUTF16._IOwnership _out5054;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5055;
            DCOMPUTF16.COMP.GenExpr((_9424_indices).Select(_9430_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5053, out _out5054, out _out5055);
            _9431_idx = _out5053;
            _9432_idxOwned = _out5054;
            _9433_recIdentsIdx = _out5055;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_9431_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9433_recIdentsIdx);
            _9430_i = (_9430_i) + (BigInteger.One);
          }
          RAST._IExpr _out5056;
          DCOMPUTF16._IOwnership _out5057;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5056, out _out5057);
          r = _out5056;
          resultingOwnership = _out5057;
          return ;
        }
      } else if (_source320.is_IndexRange) {
        DAST._IExpression _9434___mcc_h242 = _source320.dtor_expr;
        bool _9435___mcc_h243 = _source320.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _9436___mcc_h244 = _source320.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _9437___mcc_h245 = _source320.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _9438_high = _9437___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _9439_low = _9436___mcc_h244;
        bool _9440_isArray = _9435___mcc_h243;
        DAST._IExpression _9441_on = _9434___mcc_h242;
        {
          RAST._IExpr _9442_onExpr;
          DCOMPUTF16._IOwnership _9443_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9444_recIdents;
          RAST._IExpr _out5058;
          DCOMPUTF16._IOwnership _out5059;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5060;
          DCOMPUTF16.COMP.GenExpr(_9441_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5058, out _out5059, out _out5060);
          _9442_onExpr = _out5058;
          _9443_onOwned = _out5059;
          _9444_recIdents = _out5060;
          readIdents = _9444_recIdents;
          Dafny.ISequence<Dafny.Rune> _9445_methodName;
          _9445_methodName = (((_9439_low).is_Some) ? ((((_9438_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_9438_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _9446_arguments;
          _9446_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source324 = _9439_low;
          if (_source324.is_None) {
          } else {
            DAST._IExpression _9447___mcc_h274 = _source324.dtor_value;
            DAST._IExpression _9448_l = _9447___mcc_h274;
            {
              RAST._IExpr _9449_lExpr;
              DCOMPUTF16._IOwnership _9450___v122;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9451_recIdentsL;
              RAST._IExpr _out5061;
              DCOMPUTF16._IOwnership _out5062;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5063;
              DCOMPUTF16.COMP.GenExpr(_9448_l, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5061, out _out5062, out _out5063);
              _9449_lExpr = _out5061;
              _9450___v122 = _out5062;
              _9451_recIdentsL = _out5063;
              _9446_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_9446_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_9449_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9451_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source325 = _9438_high;
          if (_source325.is_None) {
          } else {
            DAST._IExpression _9452___mcc_h275 = _source325.dtor_value;
            DAST._IExpression _9453_h = _9452___mcc_h275;
            {
              RAST._IExpr _9454_hExpr;
              DCOMPUTF16._IOwnership _9455___v123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9456_recIdentsH;
              RAST._IExpr _out5064;
              DCOMPUTF16._IOwnership _out5065;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5066;
              DCOMPUTF16.COMP.GenExpr(_9453_h, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5064, out _out5065, out _out5066);
              _9454_hExpr = _out5064;
              _9455___v123 = _out5065;
              _9456_recIdentsH = _out5066;
              _9446_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_9446_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_9454_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9456_recIdentsH);
            }
          }
          r = _9442_onExpr;
          if (_9440_isArray) {
            if (!(_9445_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _9445_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _9445_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _9445_methodName))).Apply(_9446_arguments);
          } else {
            if (!(_9445_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_9445_methodName)).Apply(_9446_arguments);
            }
          }
          RAST._IExpr _out5067;
          DCOMPUTF16._IOwnership _out5068;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5067, out _out5068);
          r = _out5067;
          resultingOwnership = _out5068;
          return ;
        }
      } else if (_source320.is_TupleSelect) {
        DAST._IExpression _9457___mcc_h246 = _source320.dtor_expr;
        BigInteger _9458___mcc_h247 = _source320.dtor_index;
        BigInteger _9459_idx = _9458___mcc_h247;
        DAST._IExpression _9460_on = _9457___mcc_h246;
        {
          RAST._IExpr _9461_onExpr;
          DCOMPUTF16._IOwnership _9462_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9463_recIdents;
          RAST._IExpr _out5069;
          DCOMPUTF16._IOwnership _out5070;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5071;
          DCOMPUTF16.COMP.GenExpr(_9460_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5069, out _out5070, out _out5071);
          _9461_onExpr = _out5069;
          _9462_onOwnership = _out5070;
          _9463_recIdents = _out5071;
          r = (_9461_onExpr).Sel(Std.Strings.__default.OfNat(_9459_idx));
          RAST._IExpr _out5072;
          DCOMPUTF16._IOwnership _out5073;
          DCOMPUTF16.COMP.FromOwnership(r, _9462_onOwnership, expectedOwnership, out _out5072, out _out5073);
          r = _out5072;
          resultingOwnership = _out5073;
          readIdents = _9463_recIdents;
          return ;
        }
      } else if (_source320.is_Call) {
        DAST._IExpression _9464___mcc_h248 = _source320.dtor_on;
        DAST._ICallName _9465___mcc_h249 = _source320.dtor_callName;
        Dafny.ISequence<DAST._IType> _9466___mcc_h250 = _source320.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _9467___mcc_h251 = _source320.dtor_args;
        Dafny.ISequence<DAST._IExpression> _9468_args = _9467___mcc_h251;
        Dafny.ISequence<DAST._IType> _9469_typeArgs = _9466___mcc_h250;
        DAST._ICallName _9470_name = _9465___mcc_h249;
        DAST._IExpression _9471_on = _9464___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _9472_typeExprs;
          _9472_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_9469_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _9473_typeI;
            _9473_typeI = BigInteger.Zero;
            while ((_9473_typeI) < (new BigInteger((_9469_typeArgs).Count))) {
              RAST._IType _9474_typeExpr;
              RAST._IType _out5074;
              _out5074 = DCOMPUTF16.COMP.GenType((_9469_typeArgs).Select(_9473_typeI), false, false);
              _9474_typeExpr = _out5074;
              _9472_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_9472_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_9474_typeExpr));
              _9473_typeI = (_9473_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _9475_argExprs;
          _9475_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _9476_i;
          _9476_i = BigInteger.Zero;
          while ((_9476_i) < (new BigInteger((_9468_args).Count))) {
            RAST._IExpr _9477_argExpr;
            DCOMPUTF16._IOwnership _9478_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9479_argIdents;
            RAST._IExpr _out5075;
            DCOMPUTF16._IOwnership _out5076;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5077;
            DCOMPUTF16.COMP.GenExpr((_9468_args).Select(_9476_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5075, out _out5076, out _out5077);
            _9477_argExpr = _out5075;
            _9478_argOwnership = _out5076;
            _9479_argIdents = _out5077;
            _9475_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_9475_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_9477_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9479_argIdents);
            _9476_i = (_9476_i) + (BigInteger.One);
          }
          RAST._IExpr _9480_onExpr;
          DCOMPUTF16._IOwnership _9481___v124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9482_recIdents;
          RAST._IExpr _out5078;
          DCOMPUTF16._IOwnership _out5079;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5080;
          DCOMPUTF16.COMP.GenExpr(_9471_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5078, out _out5079, out _out5080);
          _9480_onExpr = _out5078;
          _9481___v124 = _out5079;
          _9482_recIdents = _out5080;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9482_recIdents);
          Dafny.ISequence<Dafny.Rune> _9483_renderedName;
          _9483_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source326) => {
            if (_source326.is_Name) {
              Dafny.ISequence<Dafny.Rune> _9484___mcc_h276 = _source326.dtor_name;
              Dafny.ISequence<Dafny.Rune> _9485_ident = _9484___mcc_h276;
              return DCOMPUTF16.__default.escapeIdent(_9485_ident);
            } else if (_source326.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source326.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source326.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_9470_name);
          DAST._IExpression _source327 = _9471_on;
          if (_source327.is_Literal) {
            DAST._ILiteral _9486___mcc_h277 = _source327.dtor_Literal_a0;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _9487___mcc_h279 = _source327.dtor_Ident_a0;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9488___mcc_h281 = _source327.dtor_Companion_a0;
            {
              _9480_onExpr = (_9480_onExpr).MSel(_9483_renderedName);
            }
          } else if (_source327.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _9489___mcc_h283 = _source327.dtor_Tuple_a0;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9490___mcc_h285 = _source327.dtor_path;
            Dafny.ISequence<DAST._IType> _9491___mcc_h286 = _source327.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _9492___mcc_h287 = _source327.dtor_args;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _9493___mcc_h291 = _source327.dtor_dims;
            DAST._IType _9494___mcc_h292 = _source327.dtor_typ;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_DatatypeValue) {
            DAST._IDatatypeType _9495___mcc_h295 = _source327.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _9496___mcc_h296 = _source327.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _9497___mcc_h297 = _source327.dtor_variant;
            bool _9498___mcc_h298 = _source327.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _9499___mcc_h299 = _source327.dtor_contents;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Convert) {
            DAST._IExpression _9500___mcc_h305 = _source327.dtor_value;
            DAST._IType _9501___mcc_h306 = _source327.dtor_from;
            DAST._IType _9502___mcc_h307 = _source327.dtor_typ;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_SeqConstruct) {
            DAST._IExpression _9503___mcc_h311 = _source327.dtor_length;
            DAST._IExpression _9504___mcc_h312 = _source327.dtor_elem;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _9505___mcc_h315 = _source327.dtor_elements;
            DAST._IType _9506___mcc_h316 = _source327.dtor_typ;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _9507___mcc_h319 = _source327.dtor_elements;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _9508___mcc_h321 = _source327.dtor_elements;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _9509___mcc_h323 = _source327.dtor_mapElems;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_MapBuilder) {
            DAST._IType _9510___mcc_h325 = _source327.dtor_keyType;
            DAST._IType _9511___mcc_h326 = _source327.dtor_valueType;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_SeqUpdate) {
            DAST._IExpression _9512___mcc_h329 = _source327.dtor_expr;
            DAST._IExpression _9513___mcc_h330 = _source327.dtor_indexExpr;
            DAST._IExpression _9514___mcc_h331 = _source327.dtor_value;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_MapUpdate) {
            DAST._IExpression _9515___mcc_h335 = _source327.dtor_expr;
            DAST._IExpression _9516___mcc_h336 = _source327.dtor_indexExpr;
            DAST._IExpression _9517___mcc_h337 = _source327.dtor_value;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_SetBuilder) {
            DAST._IType _9518___mcc_h341 = _source327.dtor_elemType;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_ToMultiset) {
            DAST._IExpression _9519___mcc_h343 = _source327.dtor_ToMultiset_a0;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_This) {
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Ite) {
            DAST._IExpression _9520___mcc_h345 = _source327.dtor_cond;
            DAST._IExpression _9521___mcc_h346 = _source327.dtor_thn;
            DAST._IExpression _9522___mcc_h347 = _source327.dtor_els;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_UnOp) {
            DAST._IUnaryOp _9523___mcc_h351 = _source327.dtor_unOp;
            DAST._IExpression _9524___mcc_h352 = _source327.dtor_expr;
            DAST.Format._IUnOpFormat _9525___mcc_h353 = _source327.dtor_format1;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_BinOp) {
            DAST._IBinOp _9526___mcc_h357 = _source327.dtor_op;
            DAST._IExpression _9527___mcc_h358 = _source327.dtor_left;
            DAST._IExpression _9528___mcc_h359 = _source327.dtor_right;
            DAST.Format._IBinOpFormat _9529___mcc_h360 = _source327.dtor_format2;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_ArrayLen) {
            DAST._IExpression _9530___mcc_h365 = _source327.dtor_expr;
            BigInteger _9531___mcc_h366 = _source327.dtor_dim;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_MapKeys) {
            DAST._IExpression _9532___mcc_h369 = _source327.dtor_expr;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_MapValues) {
            DAST._IExpression _9533___mcc_h371 = _source327.dtor_expr;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Select) {
            DAST._IExpression _9534___mcc_h373 = _source327.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _9535___mcc_h374 = _source327.dtor_field;
            bool _9536___mcc_h375 = _source327.dtor_isConstant;
            bool _9537___mcc_h376 = _source327.dtor_onDatatype;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_SelectFn) {
            DAST._IExpression _9538___mcc_h381 = _source327.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _9539___mcc_h382 = _source327.dtor_field;
            bool _9540___mcc_h383 = _source327.dtor_onDatatype;
            bool _9541___mcc_h384 = _source327.dtor_isStatic;
            BigInteger _9542___mcc_h385 = _source327.dtor_arity;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Index) {
            DAST._IExpression _9543___mcc_h391 = _source327.dtor_expr;
            DAST._ICollKind _9544___mcc_h392 = _source327.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _9545___mcc_h393 = _source327.dtor_indices;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_IndexRange) {
            DAST._IExpression _9546___mcc_h397 = _source327.dtor_expr;
            bool _9547___mcc_h398 = _source327.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _9548___mcc_h399 = _source327.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _9549___mcc_h400 = _source327.dtor_high;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_TupleSelect) {
            DAST._IExpression _9550___mcc_h405 = _source327.dtor_expr;
            BigInteger _9551___mcc_h406 = _source327.dtor_index;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Call) {
            DAST._IExpression _9552___mcc_h409 = _source327.dtor_on;
            DAST._ICallName _9553___mcc_h410 = _source327.dtor_callName;
            Dafny.ISequence<DAST._IType> _9554___mcc_h411 = _source327.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _9555___mcc_h412 = _source327.dtor_args;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _9556___mcc_h417 = _source327.dtor_params;
            DAST._IType _9557___mcc_h418 = _source327.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _9558___mcc_h419 = _source327.dtor_body;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9559___mcc_h423 = _source327.dtor_values;
            DAST._IType _9560___mcc_h424 = _source327.dtor_retType;
            DAST._IExpression _9561___mcc_h425 = _source327.dtor_expr;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _9562___mcc_h429 = _source327.dtor_name;
            DAST._IType _9563___mcc_h430 = _source327.dtor_typ;
            DAST._IExpression _9564___mcc_h431 = _source327.dtor_value;
            DAST._IExpression _9565___mcc_h432 = _source327.dtor_iifeBody;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_Apply) {
            DAST._IExpression _9566___mcc_h437 = _source327.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _9567___mcc_h438 = _source327.dtor_args;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_TypeTest) {
            DAST._IExpression _9568___mcc_h441 = _source327.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9569___mcc_h442 = _source327.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _9570___mcc_h443 = _source327.dtor_variant;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_InitializationValue) {
            DAST._IType _9571___mcc_h447 = _source327.dtor_typ;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_BoolBoundedPool) {
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_SetBoundedPool) {
            DAST._IExpression _9572___mcc_h449 = _source327.dtor_of;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else if (_source327.is_SeqBoundedPool) {
            DAST._IExpression _9573___mcc_h451 = _source327.dtor_of;
            bool _9574___mcc_h452 = _source327.dtor_includeDuplicates;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          } else {
            DAST._IExpression _9575___mcc_h455 = _source327.dtor_lo;
            DAST._IExpression _9576___mcc_h456 = _source327.dtor_hi;
            {
              _9480_onExpr = (_9480_onExpr).Sel(_9483_renderedName);
            }
          }
          r = _9480_onExpr;
          if ((new BigInteger((_9472_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_9472_typeExprs);
          }
          r = (r).Apply(_9475_argExprs);
          RAST._IExpr _out5081;
          DCOMPUTF16._IOwnership _out5082;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5081, out _out5082);
          r = _out5081;
          resultingOwnership = _out5082;
          return ;
        }
      } else if (_source320.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _9577___mcc_h252 = _source320.dtor_params;
        DAST._IType _9578___mcc_h253 = _source320.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _9579___mcc_h254 = _source320.dtor_body;
        Dafny.ISequence<DAST._IStatement> _9580_body = _9579___mcc_h254;
        DAST._IType _9581_retType = _9578___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _9582_params = _9577___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9583_paramNames;
          _9583_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _9584_paramOwnerships;
          _9584_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
          BigInteger _9585_i;
          _9585_i = BigInteger.Zero;
          while ((_9585_i) < (new BigInteger((_9582_params).Count))) {
            Dafny.ISequence<Dafny.Rune> _9586_name;
            _9586_name = ((_9582_params).Select(_9585_i)).dtor_name;
            _9583_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_9583_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_9586_name));
            _9584_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_9584_paramOwnerships, _9586_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
            _9585_i = (_9585_i) + (BigInteger.One);
          }
          DCOMPUTF16._IEnvironment _9587_env;
          _9587_env = DCOMPUTF16.Environment.create(_9583_paramNames, _9584_paramOwnerships);
          RAST._IExpr _9588_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9589_recIdents;
          RAST._IExpr _out5083;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5084;
          DCOMPUTF16.COMP.GenStmts(_9580_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _9587_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out5083, out _out5084);
          _9588_recursiveGen = _out5083;
          _9589_recIdents = _out5084;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _9590_allReadCloned;
          _9590_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_9589_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _9591_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_5 in (_9589_recIdents).Elements) {
              _9591_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_5;
              if ((_9589_recIdents).Contains(_9591_next)) {
                goto after__ASSIGN_SUCH_THAT_5;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3266)");
          after__ASSIGN_SUCH_THAT_5: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_9591_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _9590_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_9590_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_9583_paramNames).Contains(_9591_next))) {
              _9590_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9590_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_9591_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_9591_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_9591_next));
            }
            _9589_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9589_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_9591_next));
          }
          Dafny.ISequence<Dafny.Rune> _9592_paramsString;
          _9592_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _9593_paramTypes;
          _9593_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _9585_i = BigInteger.Zero;
          while ((_9585_i) < (new BigInteger((_9582_params).Count))) {
            if ((_9585_i).Sign == 1) {
              _9592_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_9592_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _9593_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_9593_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _9594_typStr;
            RAST._IType _out5085;
            _out5085 = DCOMPUTF16.COMP.GenType(((_9582_params).Select(_9585_i)).dtor_typ, false, true);
            _9594_typStr = _out5085;
            _9592_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9592_paramsString, DCOMPUTF16.__default.escapeIdent(((_9582_params).Select(_9585_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_9594_typStr))._ToString(DCOMPUTF16.__default.IND));
            _9593_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_9593_paramTypes, (RAST.Type.create_Borrowed(_9594_typStr))._ToString(DCOMPUTF16.__default.IND));
            _9585_i = (_9585_i) + (BigInteger.One);
          }
          RAST._IType _9595_retTypeGen;
          RAST._IType _out5086;
          _out5086 = DCOMPUTF16.COMP.GenType(_9581_retType, false, true);
          _9595_retTypeGen = _out5086;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _9593_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_9595_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _9590_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _9592_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_9595_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_9588_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out5087;
          DCOMPUTF16._IOwnership _out5088;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5087, out _out5088);
          r = _out5087;
          resultingOwnership = _out5088;
          return ;
        }
      } else if (_source320.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9596___mcc_h255 = _source320.dtor_values;
        DAST._IType _9597___mcc_h256 = _source320.dtor_retType;
        DAST._IExpression _9598___mcc_h257 = _source320.dtor_expr;
        DAST._IExpression _9599_expr = _9598___mcc_h257;
        DAST._IType _9600_retType = _9597___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9601_values = _9596___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9602_paramNames;
          _9602_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _9603_paramOwnerships;
          _9603_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9604_paramNamesSet;
          _9604_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _9605_i;
          _9605_i = BigInteger.Zero;
          while ((_9605_i) < (new BigInteger((_9601_values).Count))) {
            Dafny.ISequence<Dafny.Rune> _9606_name;
            _9606_name = (((_9601_values).Select(_9605_i)).dtor__0).dtor_name;
            _9602_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_9602_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_9606_name));
            _9603_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_9603_paramOwnerships, _9606_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
            _9604_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_9604_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_9606_name));
            _9605_i = (_9605_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _9607_s;
          _9607_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _9608_paramsString;
          _9608_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _9605_i = BigInteger.Zero;
          while ((_9605_i) < (new BigInteger((_9601_values).Count))) {
            if ((_9605_i).Sign == 1) {
              _9608_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_9608_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _9609_typStr;
            RAST._IType _out5089;
            _out5089 = DCOMPUTF16.COMP.GenType((((_9601_values).Select(_9605_i)).dtor__0).dtor_typ, false, true);
            _9609_typStr = _out5089;
            RAST._IExpr _9610_valueGen;
            DCOMPUTF16._IOwnership _9611___v127;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9612_recIdents;
            RAST._IExpr _out5090;
            DCOMPUTF16._IOwnership _out5091;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5092;
            DCOMPUTF16.COMP.GenExpr(((_9601_values).Select(_9605_i)).dtor__1, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5090, out _out5091, out _out5092);
            _9610_valueGen = _out5090;
            _9611___v127 = _out5091;
            _9612_recIdents = _out5092;
            _9607_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9607_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent((((_9601_values).Select(_9605_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_9609_typStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9612_recIdents);
            _9607_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9607_s, (_9610_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _9605_i = (_9605_i) + (BigInteger.One);
          }
          DCOMPUTF16._IEnvironment _9613_newEnv;
          _9613_newEnv = DCOMPUTF16.Environment.create(_9602_paramNames, _9603_paramOwnerships);
          RAST._IExpr _9614_recGen;
          DCOMPUTF16._IOwnership _9615_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9616_recIdents;
          RAST._IExpr _out5093;
          DCOMPUTF16._IOwnership _out5094;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5095;
          DCOMPUTF16.COMP.GenExpr(_9599_expr, selfIdent, _9613_newEnv, expectedOwnership, out _out5093, out _out5094, out _out5095);
          _9614_recGen = _out5093;
          _9615_recOwned = _out5094;
          _9616_recIdents = _out5095;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9616_recIdents, _9604_paramNamesSet);
          _9607_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9607_s, (_9614_recGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_9607_s);
          RAST._IExpr _out5096;
          DCOMPUTF16._IOwnership _out5097;
          DCOMPUTF16.COMP.FromOwnership(r, _9615_recOwned, expectedOwnership, out _out5096, out _out5097);
          r = _out5096;
          resultingOwnership = _out5097;
          return ;
        }
      } else if (_source320.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _9617___mcc_h258 = _source320.dtor_name;
        DAST._IType _9618___mcc_h259 = _source320.dtor_typ;
        DAST._IExpression _9619___mcc_h260 = _source320.dtor_value;
        DAST._IExpression _9620___mcc_h261 = _source320.dtor_iifeBody;
        DAST._IExpression _9621_iifeBody = _9620___mcc_h261;
        DAST._IExpression _9622_value = _9619___mcc_h260;
        DAST._IType _9623_tpe = _9618___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _9624_name = _9617___mcc_h258;
        {
          RAST._IExpr _9625_valueGen;
          DCOMPUTF16._IOwnership _9626___v128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9627_recIdents;
          RAST._IExpr _out5098;
          DCOMPUTF16._IOwnership _out5099;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5100;
          DCOMPUTF16.COMP.GenExpr(_9622_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5098, out _out5099, out _out5100);
          _9625_valueGen = _out5098;
          _9626___v128 = _out5099;
          _9627_recIdents = _out5100;
          readIdents = _9627_recIdents;
          RAST._IType _9628_valueTypeGen;
          RAST._IType _out5101;
          _out5101 = DCOMPUTF16.COMP.GenType(_9623_tpe, false, true);
          _9628_valueTypeGen = _out5101;
          RAST._IExpr _9629_bodyGen;
          DCOMPUTF16._IOwnership _9630___v129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9631_bodyIdents;
          RAST._IExpr _out5102;
          DCOMPUTF16._IOwnership _out5103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5104;
          DCOMPUTF16.COMP.GenExpr(_9621_iifeBody, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5102, out _out5103, out _out5104);
          _9629_bodyGen = _out5102;
          _9630___v129 = _out5103;
          _9631_bodyIdents = _out5104;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9631_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_9624_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMPUTF16.__default.escapeIdent((_9624_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_9628_valueTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_9625_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_9629_bodyGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out5105;
          DCOMPUTF16._IOwnership _out5106;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5105, out _out5106);
          r = _out5105;
          resultingOwnership = _out5106;
          return ;
        }
      } else if (_source320.is_Apply) {
        DAST._IExpression _9632___mcc_h262 = _source320.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _9633___mcc_h263 = _source320.dtor_args;
        Dafny.ISequence<DAST._IExpression> _9634_args = _9633___mcc_h263;
        DAST._IExpression _9635_func = _9632___mcc_h262;
        {
          RAST._IExpr _9636_funcExpr;
          DCOMPUTF16._IOwnership _9637___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9638_recIdents;
          RAST._IExpr _out5107;
          DCOMPUTF16._IOwnership _out5108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5109;
          DCOMPUTF16.COMP.GenExpr(_9635_func, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5107, out _out5108, out _out5109);
          _9636_funcExpr = _out5107;
          _9637___v130 = _out5108;
          _9638_recIdents = _out5109;
          readIdents = _9638_recIdents;
          Dafny.ISequence<Dafny.Rune> _9639_argString;
          _9639_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _9640_i;
          _9640_i = BigInteger.Zero;
          while ((_9640_i) < (new BigInteger((_9634_args).Count))) {
            if ((_9640_i).Sign == 1) {
              _9639_argString = Dafny.Sequence<Dafny.Rune>.Concat(_9639_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _9641_argExpr;
            DCOMPUTF16._IOwnership _9642_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9643_argIdents;
            RAST._IExpr _out5110;
            DCOMPUTF16._IOwnership _out5111;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5112;
            DCOMPUTF16.COMP.GenExpr((_9634_args).Select(_9640_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5110, out _out5111, out _out5112);
            _9641_argExpr = _out5110;
            _9642_argOwned = _out5111;
            _9643_argIdents = _out5112;
            Dafny.ISequence<Dafny.Rune> _9644_argExprString;
            _9644_argExprString = (_9641_argExpr)._ToString(DCOMPUTF16.__default.IND);
            if (object.Equals(_9642_argOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
              _9644_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _9644_argExprString);
            }
            _9639_argString = Dafny.Sequence<Dafny.Rune>.Concat(_9639_argString, _9644_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9643_argIdents);
            _9640_i = (_9640_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_9636_funcExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _9639_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out5113;
          DCOMPUTF16._IOwnership _out5114;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5113, out _out5114);
          r = _out5113;
          resultingOwnership = _out5114;
          return ;
        }
      } else if (_source320.is_TypeTest) {
        DAST._IExpression _9645___mcc_h264 = _source320.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9646___mcc_h265 = _source320.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _9647___mcc_h266 = _source320.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _9648_variant = _9647___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9649_dType = _9646___mcc_h265;
        DAST._IExpression _9650_on = _9645___mcc_h264;
        {
          RAST._IExpr _9651_exprGen;
          DCOMPUTF16._IOwnership _9652___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9653_recIdents;
          RAST._IExpr _out5115;
          DCOMPUTF16._IOwnership _out5116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5117;
          DCOMPUTF16.COMP.GenExpr(_9650_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5115, out _out5116, out _out5117);
          _9651_exprGen = _out5115;
          _9652___v131 = _out5116;
          _9653_recIdents = _out5117;
          RAST._IType _9654_dTypePath;
          RAST._IType _out5118;
          _out5118 = DCOMPUTF16.COMP.GenPath(_9649_dType);
          _9654_dTypePath = _out5118;
          r = (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(((_9651_exprGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_ref"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements()), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(((_9654_dTypePath).MSel(DCOMPUTF16.__default.escapeIdent(_9648_variant)))._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. }")))));
          RAST._IExpr _out5119;
          DCOMPUTF16._IOwnership _out5120;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5119, out _out5120);
          r = _out5119;
          resultingOwnership = _out5120;
          readIdents = _9653_recIdents;
          return ;
        }
      } else if (_source320.is_InitializationValue) {
        DAST._IType _9655___mcc_h267 = _source320.dtor_typ;
        DAST._IType _9656_typ = _9655___mcc_h267;
        {
          RAST._IType _9657_typExpr;
          RAST._IType _out5121;
          _out5121 = DCOMPUTF16.COMP.GenType(_9656_typ, false, false);
          _9657_typExpr = _out5121;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_9657_typExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out5122;
          DCOMPUTF16._IOwnership _out5123;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5122, out _out5123);
          r = _out5122;
          resultingOwnership = _out5123;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source320.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out5124;
          DCOMPUTF16._IOwnership _out5125;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5124, out _out5125);
          r = _out5124;
          resultingOwnership = _out5125;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source320.is_SetBoundedPool) {
        DAST._IExpression _9658___mcc_h268 = _source320.dtor_of;
        DAST._IExpression _9659_of = _9658___mcc_h268;
        {
          RAST._IExpr _9660_exprGen;
          DCOMPUTF16._IOwnership _9661___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9662_recIdents;
          RAST._IExpr _out5126;
          DCOMPUTF16._IOwnership _out5127;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5128;
          DCOMPUTF16.COMP.GenExpr(_9659_of, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5126, out _out5127, out _out5128);
          _9660_exprGen = _out5126;
          _9661___v132 = _out5127;
          _9662_recIdents = _out5128;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9660_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out5129;
          DCOMPUTF16._IOwnership _out5130;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5129, out _out5130);
          r = _out5129;
          resultingOwnership = _out5130;
          readIdents = _9662_recIdents;
          return ;
        }
      } else if (_source320.is_SeqBoundedPool) {
        DAST._IExpression _9663___mcc_h269 = _source320.dtor_of;
        bool _9664___mcc_h270 = _source320.dtor_includeDuplicates;
        bool _9665_includeDuplicates = _9664___mcc_h270;
        DAST._IExpression _9666_of = _9663___mcc_h269;
        {
          RAST._IExpr _9667_exprGen;
          DCOMPUTF16._IOwnership _9668___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9669_recIdents;
          RAST._IExpr _out5131;
          DCOMPUTF16._IOwnership _out5132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5133;
          DCOMPUTF16.COMP.GenExpr(_9666_of, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5131, out _out5132, out _out5133);
          _9667_exprGen = _out5131;
          _9668___v133 = _out5132;
          _9669_recIdents = _out5133;
          Dafny.ISequence<Dafny.Rune> _9670_s;
          _9670_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9667_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_9665_includeDuplicates)) {
            _9670_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _9670_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_9670_s);
          RAST._IExpr _out5134;
          DCOMPUTF16._IOwnership _out5135;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5134, out _out5135);
          r = _out5134;
          resultingOwnership = _out5135;
          readIdents = _9669_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _9671___mcc_h271 = _source320.dtor_lo;
        DAST._IExpression _9672___mcc_h272 = _source320.dtor_hi;
        DAST._IExpression _9673_hi = _9672___mcc_h272;
        DAST._IExpression _9674_lo = _9671___mcc_h271;
        {
          RAST._IExpr _9675_lo;
          DCOMPUTF16._IOwnership _9676___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9677_recIdentsLo;
          RAST._IExpr _out5136;
          DCOMPUTF16._IOwnership _out5137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5138;
          DCOMPUTF16.COMP.GenExpr(_9674_lo, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5136, out _out5137, out _out5138);
          _9675_lo = _out5136;
          _9676___v134 = _out5137;
          _9677_recIdentsLo = _out5138;
          RAST._IExpr _9678_hi;
          DCOMPUTF16._IOwnership _9679___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9680_recIdentsHi;
          RAST._IExpr _out5139;
          DCOMPUTF16._IOwnership _out5140;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5141;
          DCOMPUTF16.COMP.GenExpr(_9673_hi, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5139, out _out5140, out _out5141);
          _9678_hi = _out5139;
          _9679___v135 = _out5140;
          _9680_recIdentsHi = _out5141;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_9675_lo)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_9678_hi)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out5142;
          DCOMPUTF16._IOwnership _out5143;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5142, out _out5143);
          r = _out5142;
          resultingOwnership = _out5143;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_9677_recIdentsLo, _9680_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _9681_i;
      _9681_i = BigInteger.Zero;
      while ((_9681_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _9682_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _9683_m;
        RAST._IMod _out5144;
        _out5144 = DCOMPUTF16.COMP.GenModule((p).Select(_9681_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _9683_m = _out5144;
        _9682_generated = (_9683_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_9681_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _9682_generated);
        _9681_i = (_9681_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _9684_i;
      _9684_i = BigInteger.Zero;
      while ((_9684_i) < (new BigInteger((fullName).Count))) {
        if ((_9684_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMPUTF16.__default.escapeIdent((fullName).Select(_9684_i)));
        _9684_i = (_9684_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMPUTF16

