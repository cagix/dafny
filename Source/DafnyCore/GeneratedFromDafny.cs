// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent)
    {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object) ((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error)
    {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default)
    {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error)
    {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int) hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b)
    {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c)
    {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs)
    {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).CloneAsArray()) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v)
    {
    TAIL_CALL_START: ;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v)
    {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos)
    {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length)
    {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys)
    {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator)
    {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START: ;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim)
    {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs)
    {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7247)");
      after__ASSIGN_SUCH_THAT_0: ;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R)
    {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a)
    {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq)
    {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y)
    {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y)
    {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d)
    {
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d)
    {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d)
    {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m)
    {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e)
    {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START: ;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow)
    {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit,_148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.HexConversion.__default.HEX__DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus)
    {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit,_165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus)
    {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START: ;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
    TAIL_CALL_START: ;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n)
    {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len)
    {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys)
    {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
    } }
    public static Dafny.ISequence<Dafny.Rune> chars { get {
      return Std.Strings.DecimalConversion.__default.DIGITS;
    } }
    public static BigInteger @base { get {
      return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
    } }
    public static Dafny.IMap<Dafny.Rune,BigInteger> charToDigit { get {
      return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
    } }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape)
    {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape)
    {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST.Format {


  public interface _IUnOpFormat {
    bool is_NoFormat { get; }
    bool is_CombineNotInner { get; }
    _IUnOpFormat DowncastClone();
  }
  public abstract class UnOpFormat : _IUnOpFormat {
    public UnOpFormat() {
    }
    private static readonly DAST.Format._IUnOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IUnOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IUnOpFormat>(DAST.Format.UnOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IUnOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnOpFormat create_NoFormat() {
      return new UnOpFormat_NoFormat();
    }
    public static _IUnOpFormat create_CombineNotInner() {
      return new UnOpFormat_CombineNotInner();
    }
    public bool is_NoFormat { get { return this is UnOpFormat_NoFormat; } }
    public bool is_CombineNotInner { get { return this is UnOpFormat_CombineNotInner; } }
    public static System.Collections.Generic.IEnumerable<_IUnOpFormat> AllSingletonConstructors {
      get {
        yield return UnOpFormat.create_NoFormat();
        yield return UnOpFormat.create_CombineNotInner();
      }
    }
    public abstract _IUnOpFormat DowncastClone();
  }
  public class UnOpFormat_NoFormat : UnOpFormat {
    public UnOpFormat_NoFormat() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.NoFormat";
      return s;
    }
  }
  public class UnOpFormat_CombineNotInner : UnOpFormat {
    public UnOpFormat_CombineNotInner() : base() {
    }
    public override _IUnOpFormat DowncastClone() {
      if (this is _IUnOpFormat dt) { return dt; }
      return new UnOpFormat_CombineNotInner();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.UnOpFormat_CombineNotInner;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.UnOpFormat.CombineNotInner";
      return s;
    }
  }

  public interface _IBinOpFormat {
    bool is_NoFormat { get; }
    bool is_ImpliesFormat { get; }
    bool is_Equivalence { get; }
    bool is_ReverseOperands { get; }
    _IBinOpFormat DowncastClone();
  }
  public abstract class BinOpFormat : _IBinOpFormat {
    public BinOpFormat() {
    }
    private static readonly DAST.Format._IBinOpFormat theDefault = create_NoFormat();
    public static DAST.Format._IBinOpFormat Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TYPE = new Dafny.TypeDescriptor<DAST.Format._IBinOpFormat>(DAST.Format.BinOpFormat.Default());
    public static Dafny.TypeDescriptor<DAST.Format._IBinOpFormat> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOpFormat create_NoFormat() {
      return new BinOpFormat_NoFormat();
    }
    public static _IBinOpFormat create_ImpliesFormat() {
      return new BinOpFormat_ImpliesFormat();
    }
    public static _IBinOpFormat create_Equivalence() {
      return new BinOpFormat_Equivalence();
    }
    public static _IBinOpFormat create_ReverseOperands() {
      return new BinOpFormat_ReverseOperands();
    }
    public bool is_NoFormat { get { return this is BinOpFormat_NoFormat; } }
    public bool is_ImpliesFormat { get { return this is BinOpFormat_ImpliesFormat; } }
    public bool is_Equivalence { get { return this is BinOpFormat_Equivalence; } }
    public bool is_ReverseOperands { get { return this is BinOpFormat_ReverseOperands; } }
    public static System.Collections.Generic.IEnumerable<_IBinOpFormat> AllSingletonConstructors {
      get {
        yield return BinOpFormat.create_NoFormat();
        yield return BinOpFormat.create_ImpliesFormat();
        yield return BinOpFormat.create_Equivalence();
        yield return BinOpFormat.create_ReverseOperands();
      }
    }
    public abstract _IBinOpFormat DowncastClone();
  }
  public class BinOpFormat_NoFormat : BinOpFormat {
    public BinOpFormat_NoFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_NoFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_NoFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.NoFormat";
      return s;
    }
  }
  public class BinOpFormat_ImpliesFormat : BinOpFormat {
    public BinOpFormat_ImpliesFormat() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ImpliesFormat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ImpliesFormat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ImpliesFormat";
      return s;
    }
  }
  public class BinOpFormat_Equivalence : BinOpFormat {
    public BinOpFormat_Equivalence() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_Equivalence();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_Equivalence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.Equivalence";
      return s;
    }
  }
  public class BinOpFormat_ReverseOperands : BinOpFormat {
    public BinOpFormat_ReverseOperands() : base() {
    }
    public override _IBinOpFormat DowncastClone() {
      if (this is _IBinOpFormat dt) { return dt; }
      return new BinOpFormat_ReverseOperands();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Format.BinOpFormat_ReverseOperands;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "Format.BinOpFormat.ReverseOperands";
      return s;
    }
  }
} // end of namespace DAST.Format
namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_SetBuilder { get; }
    bool is_MapBuilder { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_SetBuilder(DAST._IType element) {
      return new Type_SetBuilder(element);
    }
    public static _IType create_MapBuilder(DAST._IType key, DAST._IType @value) {
      return new Type_MapBuilder(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_SetBuilder { get { return this is Type_SetBuilder; } }
    public bool is_MapBuilder { get { return this is Type_MapBuilder; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        if (d is Type_Multiset) { return ((Type_Multiset)d)._element; }
        return ((Type_SetBuilder)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._key; }
        return ((Type_MapBuilder)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        if (d is Type_Map) { return ((Type_Map)d)._value; }
        return ((Type_MapBuilder)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_SetBuilder : Type {
    public readonly DAST._IType _element;
    public Type_SetBuilder(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SetBuilder(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_SetBuilder;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_MapBuilder : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_MapBuilder(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_MapBuilder(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_MapBuilder;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _INewtypeRange {
    bool is_U8 { get; }
    bool is_I8 { get; }
    bool is_U16 { get; }
    bool is_I16 { get; }
    bool is_U32 { get; }
    bool is_I32 { get; }
    bool is_U64 { get; }
    bool is_I64 { get; }
    bool is_U128 { get; }
    bool is_I128 { get; }
    bool is_BigInt { get; }
    bool is_NoRange { get; }
    _INewtypeRange DowncastClone();
  }
  public abstract class NewtypeRange : _INewtypeRange {
    public NewtypeRange() {
    }
    private static readonly DAST._INewtypeRange theDefault = create_U8();
    public static DAST._INewtypeRange Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtypeRange> _TYPE = new Dafny.TypeDescriptor<DAST._INewtypeRange>(DAST.NewtypeRange.Default());
    public static Dafny.TypeDescriptor<DAST._INewtypeRange> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtypeRange create_U8() {
      return new NewtypeRange_U8();
    }
    public static _INewtypeRange create_I8() {
      return new NewtypeRange_I8();
    }
    public static _INewtypeRange create_U16() {
      return new NewtypeRange_U16();
    }
    public static _INewtypeRange create_I16() {
      return new NewtypeRange_I16();
    }
    public static _INewtypeRange create_U32() {
      return new NewtypeRange_U32();
    }
    public static _INewtypeRange create_I32() {
      return new NewtypeRange_I32();
    }
    public static _INewtypeRange create_U64() {
      return new NewtypeRange_U64();
    }
    public static _INewtypeRange create_I64() {
      return new NewtypeRange_I64();
    }
    public static _INewtypeRange create_U128() {
      return new NewtypeRange_U128();
    }
    public static _INewtypeRange create_I128() {
      return new NewtypeRange_I128();
    }
    public static _INewtypeRange create_BigInt() {
      return new NewtypeRange_BigInt();
    }
    public static _INewtypeRange create_NoRange() {
      return new NewtypeRange_NoRange();
    }
    public bool is_U8 { get { return this is NewtypeRange_U8; } }
    public bool is_I8 { get { return this is NewtypeRange_I8; } }
    public bool is_U16 { get { return this is NewtypeRange_U16; } }
    public bool is_I16 { get { return this is NewtypeRange_I16; } }
    public bool is_U32 { get { return this is NewtypeRange_U32; } }
    public bool is_I32 { get { return this is NewtypeRange_I32; } }
    public bool is_U64 { get { return this is NewtypeRange_U64; } }
    public bool is_I64 { get { return this is NewtypeRange_I64; } }
    public bool is_U128 { get { return this is NewtypeRange_U128; } }
    public bool is_I128 { get { return this is NewtypeRange_I128; } }
    public bool is_BigInt { get { return this is NewtypeRange_BigInt; } }
    public bool is_NoRange { get { return this is NewtypeRange_NoRange; } }
    public static System.Collections.Generic.IEnumerable<_INewtypeRange> AllSingletonConstructors {
      get {
        yield return NewtypeRange.create_U8();
        yield return NewtypeRange.create_I8();
        yield return NewtypeRange.create_U16();
        yield return NewtypeRange.create_I16();
        yield return NewtypeRange.create_U32();
        yield return NewtypeRange.create_I32();
        yield return NewtypeRange.create_U64();
        yield return NewtypeRange.create_I64();
        yield return NewtypeRange.create_U128();
        yield return NewtypeRange.create_I128();
        yield return NewtypeRange.create_BigInt();
        yield return NewtypeRange.create_NoRange();
      }
    }
    public abstract _INewtypeRange DowncastClone();
  }
  public class NewtypeRange_U8 : NewtypeRange {
    public NewtypeRange_U8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U8";
      return s;
    }
  }
  public class NewtypeRange_I8 : NewtypeRange {
    public NewtypeRange_I8() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I8();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I8";
      return s;
    }
  }
  public class NewtypeRange_U16 : NewtypeRange {
    public NewtypeRange_U16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U16";
      return s;
    }
  }
  public class NewtypeRange_I16 : NewtypeRange {
    public NewtypeRange_I16() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I16();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I16";
      return s;
    }
  }
  public class NewtypeRange_U32 : NewtypeRange {
    public NewtypeRange_U32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U32";
      return s;
    }
  }
  public class NewtypeRange_I32 : NewtypeRange {
    public NewtypeRange_I32() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I32();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I32";
      return s;
    }
  }
  public class NewtypeRange_U64 : NewtypeRange {
    public NewtypeRange_U64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U64";
      return s;
    }
  }
  public class NewtypeRange_I64 : NewtypeRange {
    public NewtypeRange_I64() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I64();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I64";
      return s;
    }
  }
  public class NewtypeRange_U128 : NewtypeRange {
    public NewtypeRange_U128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_U128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.U128";
      return s;
    }
  }
  public class NewtypeRange_I128 : NewtypeRange {
    public NewtypeRange_I128() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_I128();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.I128";
      return s;
    }
  }
  public class NewtypeRange_BigInt : NewtypeRange {
    public NewtypeRange_BigInt() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_BigInt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_BigInt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.BigInt";
      return s;
    }
  }
  public class NewtypeRange_NoRange : NewtypeRange {
    public NewtypeRange_NoRange() : base() {
    }
    public override _INewtypeRange DowncastClone() {
      if (this is _INewtypeRange dt) { return dt; }
      return new NewtypeRange_NoRange();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.NewtypeRange_NoRange;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.NewtypeRange.NoRange";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_Attribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_args { get; }
    _IAttribute DowncastClone();
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _args;
    public Attribute(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      this._name = name;
      this._args = args;
    }
    public _IAttribute DowncastClone() {
      if (this is _IAttribute dt) { return dt; }
      return new Attribute(_name, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Attribute;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Attribute.Attribute";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
    private static readonly DAST._IAttribute theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IAttribute Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAttribute> _TYPE = new Dafny.TypeDescriptor<DAST._IAttribute>(DAST.Attribute.Default());
    public static Dafny.TypeDescriptor<DAST._IAttribute> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      return new Attribute(name, args);
    }
    public static _IAttribute create_Attribute(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> args) {
      return create(name, args);
    }
    public bool is_Attribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_args {
      get {
        return this._args;
      }
    }
  }

  public interface _IDatatypeType {
    bool is_DatatypeType { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IDatatypeType DowncastClone();
  }
  public class DatatypeType : _IDatatypeType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public DatatypeType(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._path = path;
      this._attributes = attributes;
    }
    public _IDatatypeType DowncastClone() {
      if (this is _IDatatypeType dt) { return dt; }
      return new DatatypeType(_path, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeType;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeType.DatatypeType";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeType theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IDatatypeType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeType> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeType>(DAST.DatatypeType.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeType create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new DatatypeType(path, attributes);
    }
    public static _IDatatypeType create_DatatypeType(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(path, attributes);
    }
    public bool is_DatatypeType { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        return this._path;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    DAST._IDatatypeType dtor_datatypeType { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    DAST._IType dtor_baseType { get; }
    DAST._INewtypeRange dtor_range { get; }
    bool dtor_erase { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(DAST.DatatypeType.Default());
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(DAST._IDatatypeType datatypeType) {
      return new ResolvedType_Datatype(datatypeType);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new ResolvedType_Trait(path, attributes);
    }
    public static _IResolvedType create_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new ResolvedType_Newtype(baseType, range, erase, attributes);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public DAST._IDatatypeType dtor_datatypeType {
      get {
        var d = this;
        return ((ResolvedType_Datatype)d)._datatypeType;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        var d = this;
        if (d is ResolvedType_Trait) { return ((ResolvedType_Trait)d)._attributes; }
        return ((ResolvedType_Newtype)d)._attributes;
      }
    }
    public DAST._IType dtor_baseType {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._baseType;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._range;
      }
    }
    public bool dtor_erase {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._erase;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly DAST._IDatatypeType _datatypeType;
    public ResolvedType_Datatype(DAST._IDatatypeType datatypeType) : base() {
      this._datatypeType = datatypeType;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_datatypeType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._datatypeType, oth._datatypeType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._datatypeType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._datatypeType);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IAttribute> attributes) : base() {
      this._path = path;
      this._attributes = attributes;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _baseType;
    public readonly DAST._INewtypeRange _range;
    public readonly bool _erase;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public ResolvedType_Newtype(DAST._IType baseType, DAST._INewtypeRange range, bool erase, Dafny.ISequence<DAST._IAttribute> attributes) : base() {
      this._baseType = baseType;
      this._range = range;
      this._erase = erase;
      this._attributes = attributes;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_baseType, _range, _erase, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._baseType, oth._baseType) && object.Equals(this._range, oth._range) && this._erase == oth._erase && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._erase));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._erase);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
      this._attributes = attributes;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body, attributes);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body, attributes);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
      this._attributes = attributes;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Trait(name, typeParams, body, attributes);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, typeParams, body, attributes);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
      this._attributes = attributes;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false, Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo, attributes);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo, attributes);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    DAST._INewtypeRange dtor_range { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    Dafny.ISequence<DAST._IAttribute> dtor_attributes { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly DAST._INewtypeRange _range;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public readonly Dafny.ISequence<DAST._IAttribute> _attributes;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._range = range;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
      this._attributes = attributes;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _range, _witnessStmts, _witnessExpr, _attributes);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._range, oth._range) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr) && object.Equals(this._attributes, oth._attributes);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), DAST.NewtypeRange.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default(), Dafny.Sequence<DAST._IAttribute>.Empty);
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      return new Newtype(name, typeParams, @base, range, witnessStmts, witnessExpr, attributes);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, DAST._INewtypeRange range, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr, Dafny.ISequence<DAST._IAttribute> attributes) {
      return create(name, typeParams, @base, range, witnessStmts, witnessExpr, attributes);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public DAST._INewtypeRange dtor_range {
      get {
        return this._range;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
    public Dafny.ISequence<DAST._IAttribute> dtor_attributes {
      get {
        return this._attributes;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _ICallName {
    bool is_Name { get; }
    bool is_MapBuilderAdd { get; }
    bool is_MapBuilderBuild { get; }
    bool is_SetBuilderAdd { get; }
    bool is_SetBuilderBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    _ICallName DowncastClone();
  }
  public abstract class CallName : _ICallName {
    public CallName() {
    }
    private static readonly DAST._ICallName theDefault = create_Name(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._ICallName Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICallName> _TYPE = new Dafny.TypeDescriptor<DAST._ICallName>(DAST.CallName.Default());
    public static Dafny.TypeDescriptor<DAST._ICallName> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICallName create_Name(Dafny.ISequence<Dafny.Rune> name) {
      return new CallName_Name(name);
    }
    public static _ICallName create_MapBuilderAdd() {
      return new CallName_MapBuilderAdd();
    }
    public static _ICallName create_MapBuilderBuild() {
      return new CallName_MapBuilderBuild();
    }
    public static _ICallName create_SetBuilderAdd() {
      return new CallName_SetBuilderAdd();
    }
    public static _ICallName create_SetBuilderBuild() {
      return new CallName_SetBuilderBuild();
    }
    public bool is_Name { get { return this is CallName_Name; } }
    public bool is_MapBuilderAdd { get { return this is CallName_MapBuilderAdd; } }
    public bool is_MapBuilderBuild { get { return this is CallName_MapBuilderBuild; } }
    public bool is_SetBuilderAdd { get { return this is CallName_SetBuilderAdd; } }
    public bool is_SetBuilderBuild { get { return this is CallName_SetBuilderBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((CallName_Name)d)._name;
      }
    }
    public abstract _ICallName DowncastClone();
  }
  public class CallName_Name : CallName {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public CallName_Name(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_Name(_name);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_Name;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.Name";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class CallName_MapBuilderAdd : CallName {
    public CallName_MapBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderAdd";
      return s;
    }
  }
  public class CallName_MapBuilderBuild : CallName {
    public CallName_MapBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_MapBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_MapBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.MapBuilderBuild";
      return s;
    }
  }
  public class CallName_SetBuilderAdd : CallName {
    public CallName_SetBuilderAdd() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderAdd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderAdd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderAdd";
      return s;
    }
  }
  public class CallName_SetBuilderBuild : CallName {
    public CallName_SetBuilderBuild() : base() {
    }
    public override _ICallName DowncastClone() {
      if (this is _ICallName dt) { return dt; }
      return new CallName_SetBuilderBuild();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CallName_SetBuilderBuild;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CallName.SetBuilderBuild";
      return s;
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, callName, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Statement_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _callName, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Lt { get; }
    bool is_LtChar { get; }
    bool is_Plus { get; }
    bool is_Minus { get; }
    bool is_Times { get; }
    bool is_BitwiseAnd { get; }
    bool is_BitwiseOr { get; }
    bool is_BitwiseXor { get; }
    bool is_BitwiseShiftRight { get; }
    bool is_BitwiseShiftLeft { get; }
    bool is_And { get; }
    bool is_Or { get; }
    bool is_In { get; }
    bool is_SeqProperPrefix { get; }
    bool is_SeqPrefix { get; }
    bool is_SetMerge { get; }
    bool is_SetSubtraction { get; }
    bool is_SetIntersection { get; }
    bool is_Subset { get; }
    bool is_ProperSubset { get; }
    bool is_SetDisjoint { get; }
    bool is_MapMerge { get; }
    bool is_MapSubtraction { get; }
    bool is_MultisetMerge { get; }
    bool is_MultisetSubtraction { get; }
    bool is_MultisetIntersection { get; }
    bool is_Submultiset { get; }
    bool is_ProperSubmultiset { get; }
    bool is_MultisetDisjoint { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Lt() {
      return new BinOp_Lt();
    }
    public static _IBinOp create_LtChar() {
      return new BinOp_LtChar();
    }
    public static _IBinOp create_Plus() {
      return new BinOp_Plus();
    }
    public static _IBinOp create_Minus() {
      return new BinOp_Minus();
    }
    public static _IBinOp create_Times() {
      return new BinOp_Times();
    }
    public static _IBinOp create_BitwiseAnd() {
      return new BinOp_BitwiseAnd();
    }
    public static _IBinOp create_BitwiseOr() {
      return new BinOp_BitwiseOr();
    }
    public static _IBinOp create_BitwiseXor() {
      return new BinOp_BitwiseXor();
    }
    public static _IBinOp create_BitwiseShiftRight() {
      return new BinOp_BitwiseShiftRight();
    }
    public static _IBinOp create_BitwiseShiftLeft() {
      return new BinOp_BitwiseShiftLeft();
    }
    public static _IBinOp create_And() {
      return new BinOp_And();
    }
    public static _IBinOp create_Or() {
      return new BinOp_Or();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_SeqProperPrefix() {
      return new BinOp_SeqProperPrefix();
    }
    public static _IBinOp create_SeqPrefix() {
      return new BinOp_SeqPrefix();
    }
    public static _IBinOp create_SetMerge() {
      return new BinOp_SetMerge();
    }
    public static _IBinOp create_SetSubtraction() {
      return new BinOp_SetSubtraction();
    }
    public static _IBinOp create_SetIntersection() {
      return new BinOp_SetIntersection();
    }
    public static _IBinOp create_Subset() {
      return new BinOp_Subset();
    }
    public static _IBinOp create_ProperSubset() {
      return new BinOp_ProperSubset();
    }
    public static _IBinOp create_SetDisjoint() {
      return new BinOp_SetDisjoint();
    }
    public static _IBinOp create_MapMerge() {
      return new BinOp_MapMerge();
    }
    public static _IBinOp create_MapSubtraction() {
      return new BinOp_MapSubtraction();
    }
    public static _IBinOp create_MultisetMerge() {
      return new BinOp_MultisetMerge();
    }
    public static _IBinOp create_MultisetSubtraction() {
      return new BinOp_MultisetSubtraction();
    }
    public static _IBinOp create_MultisetIntersection() {
      return new BinOp_MultisetIntersection();
    }
    public static _IBinOp create_Submultiset() {
      return new BinOp_Submultiset();
    }
    public static _IBinOp create_ProperSubmultiset() {
      return new BinOp_ProperSubmultiset();
    }
    public static _IBinOp create_MultisetDisjoint() {
      return new BinOp_MultisetDisjoint();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Lt { get { return this is BinOp_Lt; } }
    public bool is_LtChar { get { return this is BinOp_LtChar; } }
    public bool is_Plus { get { return this is BinOp_Plus; } }
    public bool is_Minus { get { return this is BinOp_Minus; } }
    public bool is_Times { get { return this is BinOp_Times; } }
    public bool is_BitwiseAnd { get { return this is BinOp_BitwiseAnd; } }
    public bool is_BitwiseOr { get { return this is BinOp_BitwiseOr; } }
    public bool is_BitwiseXor { get { return this is BinOp_BitwiseXor; } }
    public bool is_BitwiseShiftRight { get { return this is BinOp_BitwiseShiftRight; } }
    public bool is_BitwiseShiftLeft { get { return this is BinOp_BitwiseShiftLeft; } }
    public bool is_And { get { return this is BinOp_And; } }
    public bool is_Or { get { return this is BinOp_Or; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_SeqProperPrefix { get { return this is BinOp_SeqProperPrefix; } }
    public bool is_SeqPrefix { get { return this is BinOp_SeqPrefix; } }
    public bool is_SetMerge { get { return this is BinOp_SetMerge; } }
    public bool is_SetSubtraction { get { return this is BinOp_SetSubtraction; } }
    public bool is_SetIntersection { get { return this is BinOp_SetIntersection; } }
    public bool is_Subset { get { return this is BinOp_Subset; } }
    public bool is_ProperSubset { get { return this is BinOp_ProperSubset; } }
    public bool is_SetDisjoint { get { return this is BinOp_SetDisjoint; } }
    public bool is_MapMerge { get { return this is BinOp_MapMerge; } }
    public bool is_MapSubtraction { get { return this is BinOp_MapSubtraction; } }
    public bool is_MultisetMerge { get { return this is BinOp_MultisetMerge; } }
    public bool is_MultisetSubtraction { get { return this is BinOp_MultisetSubtraction; } }
    public bool is_MultisetIntersection { get { return this is BinOp_MultisetIntersection; } }
    public bool is_Submultiset { get { return this is BinOp_Submultiset; } }
    public bool is_ProperSubmultiset { get { return this is BinOp_ProperSubmultiset; } }
    public bool is_MultisetDisjoint { get { return this is BinOp_MultisetDisjoint; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        return ((BinOp_Eq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        return ((BinOp_Eq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Lt : BinOp {
    public BinOp_Lt() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Lt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Lt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Lt";
      return s;
    }
  }
  public class BinOp_LtChar : BinOp {
    public BinOp_LtChar() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_LtChar();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_LtChar;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.LtChar";
      return s;
    }
  }
  public class BinOp_Plus : BinOp {
    public BinOp_Plus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Plus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Plus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Plus";
      return s;
    }
  }
  public class BinOp_Minus : BinOp {
    public BinOp_Minus() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Minus();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Minus;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Minus";
      return s;
    }
  }
  public class BinOp_Times : BinOp {
    public BinOp_Times() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Times();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Times;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Times";
      return s;
    }
  }
  public class BinOp_BitwiseAnd : BinOp {
    public BinOp_BitwiseAnd() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseAnd();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseAnd;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseAnd";
      return s;
    }
  }
  public class BinOp_BitwiseOr : BinOp {
    public BinOp_BitwiseOr() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseOr();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseOr;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseOr";
      return s;
    }
  }
  public class BinOp_BitwiseXor : BinOp {
    public BinOp_BitwiseXor() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseXor();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseXor;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseXor";
      return s;
    }
  }
  public class BinOp_BitwiseShiftRight : BinOp {
    public BinOp_BitwiseShiftRight() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftRight();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftRight";
      return s;
    }
  }
  public class BinOp_BitwiseShiftLeft : BinOp {
    public BinOp_BitwiseShiftLeft() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_BitwiseShiftLeft();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_BitwiseShiftLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.BitwiseShiftLeft";
      return s;
    }
  }
  public class BinOp_And : BinOp {
    public BinOp_And() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_And();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_And;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.And";
      return s;
    }
  }
  public class BinOp_Or : BinOp {
    public BinOp_Or() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Or();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Or;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Or";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_SeqProperPrefix : BinOp {
    public BinOp_SeqProperPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqProperPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqProperPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqProperPrefix";
      return s;
    }
  }
  public class BinOp_SeqPrefix : BinOp {
    public BinOp_SeqPrefix() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SeqPrefix();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SeqPrefix;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SeqPrefix";
      return s;
    }
  }
  public class BinOp_SetMerge : BinOp {
    public BinOp_SetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetMerge";
      return s;
    }
  }
  public class BinOp_SetSubtraction : BinOp {
    public BinOp_SetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetSubtraction";
      return s;
    }
  }
  public class BinOp_SetIntersection : BinOp {
    public BinOp_SetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetIntersection";
      return s;
    }
  }
  public class BinOp_Subset : BinOp {
    public BinOp_Subset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Subset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Subset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Subset";
      return s;
    }
  }
  public class BinOp_ProperSubset : BinOp {
    public BinOp_ProperSubset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubset";
      return s;
    }
  }
  public class BinOp_SetDisjoint : BinOp {
    public BinOp_SetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDisjoint";
      return s;
    }
  }
  public class BinOp_MapMerge : BinOp {
    public BinOp_MapMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapMerge";
      return s;
    }
  }
  public class BinOp_MapSubtraction : BinOp {
    public BinOp_MapSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MapSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MapSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MapSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetMerge : BinOp {
    public BinOp_MultisetMerge() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetMerge();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetMerge;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetMerge";
      return s;
    }
  }
  public class BinOp_MultisetSubtraction : BinOp {
    public BinOp_MultisetSubtraction() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetSubtraction();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetSubtraction;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetSubtraction";
      return s;
    }
  }
  public class BinOp_MultisetIntersection : BinOp {
    public BinOp_MultisetIntersection() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetIntersection();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetIntersection;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetIntersection";
      return s;
    }
  }
  public class BinOp_Submultiset : BinOp {
    public BinOp_Submultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Submultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Submultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Submultiset";
      return s;
    }
  }
  public class BinOp_ProperSubmultiset : BinOp {
    public BinOp_ProperSubmultiset() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_ProperSubmultiset();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_ProperSubmultiset;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.ProperSubmultiset";
      return s;
    }
  }
  public class BinOp_MultisetDisjoint : BinOp {
    public BinOp_MultisetDisjoint() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_MultisetDisjoint();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_MultisetDisjoint;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.MultisetDisjoint";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MultisetValue { get; }
    bool is_MapValue { get; }
    bool is_MapBuilder { get; }
    bool is_SeqUpdate { get; }
    bool is_MapUpdate { get; }
    bool is_SetBuilder { get; }
    bool is_ToMultiset { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_MapKeys { get; }
    bool is_MapValues { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    DAST._IDatatypeType dtor_datatypeType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IType dtor_keyType { get; }
    DAST._IType dtor_valueType { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IExpression dtor_indexExpr { get; }
    DAST._IType dtor_elemType { get; }
    DAST._IExpression dtor_ToMultiset_a0 { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST.Format._IUnOpFormat dtor_format1 { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    DAST._ICallName dtor_callName { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(DAST._IDatatypeType datatypeType, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(datatypeType, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_MultisetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_MapBuilder(DAST._IType keyType, DAST._IType valueType) {
      return new Expression_MapBuilder(keyType, valueType);
    }
    public static _IExpression create_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_SeqUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) {
      return new Expression_MapUpdate(expr, indexExpr, @value);
    }
    public static _IExpression create_SetBuilder(DAST._IType elemType) {
      return new Expression_SetBuilder(elemType);
    }
    public static _IExpression create_ToMultiset(DAST._IExpression _a0) {
      return new Expression_ToMultiset(_a0);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) {
      return new Expression_UnOp(unOp, expr, format1);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) {
      return new Expression_BinOp(op, left, right, format2);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_MapKeys(DAST._IExpression expr) {
      return new Expression_MapKeys(expr);
    }
    public static _IExpression create_MapValues(DAST._IExpression expr) {
      return new Expression_MapValues(expr);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, callName, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MultisetValue { get { return this is Expression_MultisetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_MapBuilder { get { return this is Expression_MapBuilder; } }
    public bool is_SeqUpdate { get { return this is Expression_SeqUpdate; } }
    public bool is_MapUpdate { get { return this is Expression_MapUpdate; } }
    public bool is_SetBuilder { get { return this is Expression_SetBuilder; } }
    public bool is_ToMultiset { get { return this is Expression_ToMultiset; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_MapKeys { get { return this is Expression_MapKeys; } }
    public bool is_MapValues { get { return this is Expression_MapValues; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        return ((Expression_New)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public DAST._IDatatypeType dtor_datatypeType {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._datatypeType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._value; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        if (d is Expression_SetValue) { return ((Expression_SetValue)d)._elements; }
        return ((Expression_MultisetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IType dtor_keyType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._keyType;
      }
    }
    public DAST._IType dtor_valueType {
      get {
        var d = this;
        return ((Expression_MapBuilder)d)._valueType;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._expr; }
        if (d is Expression_MapUpdate) { return ((Expression_MapUpdate)d)._expr; }
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_MapKeys) { return ((Expression_MapKeys)d)._expr; }
        if (d is Expression_MapValues) { return ((Expression_MapValues)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IExpression dtor_indexExpr {
      get {
        var d = this;
        if (d is Expression_SeqUpdate) { return ((Expression_SeqUpdate)d)._indexExpr; }
        return ((Expression_MapUpdate)d)._indexExpr;
      }
    }
    public DAST._IType dtor_elemType {
      get {
        var d = this;
        return ((Expression_SetBuilder)d)._elemType;
      }
    }
    public DAST._IExpression dtor_ToMultiset_a0 {
      get {
        var d = this;
        return ((Expression_ToMultiset)d)._a0;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format1 {
      get {
        var d = this;
        return ((Expression_UnOp)d)._format1;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expression_BinOp)d)._format2;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public DAST._ICallName dtor_callName {
      get {
        var d = this;
        return ((Expression_Call)d)._callName;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expression_IIFE)d)._name;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly DAST._IDatatypeType _datatypeType;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(DAST._IDatatypeType datatypeType, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._datatypeType = datatypeType;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_datatypeType, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._datatypeType, oth._datatypeType) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._datatypeType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._datatypeType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MultisetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_MultisetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MultisetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MultisetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MultisetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_MapBuilder : Expression {
    public readonly DAST._IType _keyType;
    public readonly DAST._IType _valueType;
    public Expression_MapBuilder(DAST._IType keyType, DAST._IType valueType) : base() {
      this._keyType = keyType;
      this._valueType = valueType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapBuilder(_keyType, _valueType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapBuilder;
      return oth != null && object.Equals(this._keyType, oth._keyType) && object.Equals(this._valueType, oth._valueType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._keyType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._valueType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._keyType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._valueType);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_SeqUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_MapUpdate : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._IExpression _indexExpr;
    public readonly DAST._IExpression _value;
    public Expression_MapUpdate(DAST._IExpression expr, DAST._IExpression indexExpr, DAST._IExpression @value) : base() {
      this._expr = expr;
      this._indexExpr = indexExpr;
      this._value = @value;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapUpdate(_expr, _indexExpr, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapUpdate;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indexExpr, oth._indexExpr) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indexExpr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapUpdate";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indexExpr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Expression_SetBuilder : Expression {
    public readonly DAST._IType _elemType;
    public Expression_SetBuilder(DAST._IType elemType) : base() {
      this._elemType = elemType;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBuilder(_elemType);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBuilder;
      return oth != null && object.Equals(this._elemType, oth._elemType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elemType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBuilder";
      s += "(";
      s += Dafny.Helpers.ToString(this._elemType);
      s += ")";
      return s;
    }
  }
  public class Expression_ToMultiset : Expression {
    public readonly DAST._IExpression _a0;
    public Expression_ToMultiset(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ToMultiset(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ToMultiset;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ToMultiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public readonly DAST.Format._IUnOpFormat _format1;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr, DAST.Format._IUnOpFormat format1) : base() {
      this._unOp = unOp;
      this._expr = expr;
      this._format1 = format1;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr, _format1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr) && object.Equals(this._format1, oth._format1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format1);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right, DAST.Format._IBinOpFormat format2) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_MapKeys : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapKeys(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapKeys(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapKeys;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapKeys";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValues : Expression {
    public readonly DAST._IExpression _expr;
    public Expression_MapValues(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValues(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValues;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValues";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly DAST._ICallName _callName;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, DAST._ICallName callName, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._callName = callName;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _callName, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._callName, oth._callName) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._callName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._callName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 33;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 34;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 35;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 36;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 37;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 38;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 39;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 40;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static BigInteger SeqToHeight<__T>(Dafny.ISequence<__T> s, Func<__T, BigInteger> f)
    {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        BigInteger _801_i = Dafny.Helpers.Id<Func<__T, BigInteger>>(f)((s).Select(BigInteger.Zero));
        BigInteger _802_j = RAST.__default.SeqToHeight<__T>((s).Drop(BigInteger.One), f);
        if ((_801_i) < (_802_j)) {
          return _802_j;
        } else {
          return _801_i;
        }
      }
    }
    public static RAST._IType Rc(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType RefCell(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IType Vec(RAST._IType underlying) {
      return RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec")), Dafny.Sequence<RAST._IType>.FromElements(underlying));
    }
    public static RAST._IExpr NewVec(Dafny.ISequence<RAST._IExpr> elements) {
      return (RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec!"))).Apply(elements);
    }
    public static RAST._IExpr Clone(RAST._IExpr underlying) {
      return (RAST.Expr.create_Select(underlying, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
    }
    public static RAST._IExpr Borrow(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IExpr BorrowMut(RAST._IExpr underlying) {
      return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"), underlying, DAST.Format.UnOpFormat.create_NoFormat());
    }
    public static RAST._IType RawType(Dafny.ISequence<Dafny.Rune> content) {
      return RAST.Type.create_TIdentifier(content);
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind)
    {
      Dafny.ISequence<Dafny.Rune> _803___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _803___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_803___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger max(BigInteger i, BigInteger j)
    {
      if ((i) < (j)) {
        return j;
      } else {
        return i;
      }
    }
    public static RAST._IExpr RcNew(RAST._IExpr underlying) {
      return RAST.Expr.create_Call(RAST.__default.std__rc__Rc__new, Dafny.Sequence<RAST._IExpr>.FromElements(underlying));
    }
    public static RAST._IType Self { get {
      return RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType SelfMut { get {
      return RAST.Type.create_BorrowedMut(RAST.Type.create_SelfOwned());
    } }
    public static RAST._IType global__type { get {
      return RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IType std__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IType CloneTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Clone"));
    } }
    public static RAST._IType DafnyPrintTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint"));
    } }
    public static RAST._IType DefaultTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default"));
    } }
    public static RAST._IType StaticTrait { get {
      return RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'static"));
    } }
    public static RAST._IType cell__type { get {
      return (RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cell"));
    } }
    public static RAST._IType refcell__type { get {
      return (RAST.__default.cell__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("RefCell"));
    } }
    public static RAST._IType dafny__runtime__type { get {
      return (RAST.__default.global__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
    } }
    public static RAST._IExpr self { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"));
    } }
    public static RAST._IExpr @global { get {
      return RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    } }
    public static RAST._IExpr dafny__runtime { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"));
    } }
    public static RAST._IExpr dafny__runtime__Set { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set"));
    } }
    public static RAST._IExpr dafny__runtime__Set__from__array { get {
      return (RAST.__default.dafny__runtime__Set).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Sequence { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"));
    } }
    public static RAST._IExpr Sequence__from__array__owned { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array_owned"));
    } }
    public static RAST._IExpr Sequence__from__array { get {
      return (RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset { get {
      return (RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset"));
    } }
    public static RAST._IExpr dafny__runtime__Multiset__from__array { get {
      return (RAST.__default.dafny__runtime__Multiset).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"));
    } }
    public static RAST._IExpr std { get {
      return (RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"));
    } }
    public static RAST._IExpr std__rc { get {
      return (RAST.__default.std).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rc"));
    } }
    public static RAST._IExpr std__rc__Rc { get {
      return (RAST.__default.std__rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Rc"));
    } }
    public static RAST._IExpr std__rc__Rc__new { get {
      return (RAST.__default.std__rc__Rc).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
    } }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _804___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _805___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _806_body = _805___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _807_name = _804___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _807_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_806_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_808_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_809_modDecl) => {
          return (_809_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_808_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _810___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _811_name = _810___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _811_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind)
    {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_812_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_813_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_813_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _812_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _INamelessFormal {
    bool is_NamelessFormal { get; }
    RAST._IVisibility dtor_visibility { get; }
    RAST._IType dtor_tpe { get; }
    _INamelessFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class NamelessFormal : _INamelessFormal {
    public readonly RAST._IVisibility _visibility;
    public readonly RAST._IType _tpe;
    public NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      this._visibility = visibility;
      this._tpe = tpe;
    }
    public _INamelessFormal DowncastClone() {
      if (this is _INamelessFormal dt) { return dt; }
      return new NamelessFormal(_visibility, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.NamelessFormal;
      return oth != null && object.Equals(this._visibility, oth._visibility) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._visibility));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.NamelessFormal.NamelessFormal";
      s += "(";
      s += Dafny.Helpers.ToString(this._visibility);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._INamelessFormal theDefault = create(RAST.Visibility.Default(), RAST.Type.Default());
    public static RAST._INamelessFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._INamelessFormal> _TYPE = new Dafny.TypeDescriptor<RAST._INamelessFormal>(RAST.NamelessFormal.Default());
    public static Dafny.TypeDescriptor<RAST._INamelessFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INamelessFormal create(RAST._IVisibility visibility, RAST._IType tpe) {
      return new NamelessFormal(visibility, tpe);
    }
    public static _INamelessFormal create_NamelessFormal(RAST._IVisibility visibility, RAST._IType tpe) {
      return create(visibility, tpe);
    }
    public bool is_NamelessFormal { get { return true; } }
    public RAST._IVisibility dtor_visibility {
      get {
        return this._visibility;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_visibility, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_tpe)._ToString(ind));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._INamelessFormal> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._INamelessFormal> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _814_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _815_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _816_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _815_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_817_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_818_field) => {
          return (_818_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_817_ind, RAST.__default.IND));
        })))(ind), _814_separator)), _816_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _819_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._INamelessFormal>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._INamelessFormal, Dafny.ISequence<Dafny.Rune>>)((_821_t) => {
          return (_821_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND));
        })))(ind), _819_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._INamelessFormal> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._INamelessFormal> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine)
    {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_823_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _822_ind), RAST.__default.IND), (_823_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<RAST._IType> dtor_constraints { get; }
    _ITypeParam DowncastClone();
    RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints);
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public readonly Dafny.ISequence<RAST._IType> _constraints;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      this._content = content;
      this._constraints = constraints;
    }
    public _ITypeParam DowncastClone() {
      if (this is _ITypeParam dt) { return dt; }
      return new TypeParam(_content, _constraints);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content) && object.Equals(this._constraints, oth._constraints);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._constraints));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._constraints);
      s += ")";
      return s;
    }
    private static readonly RAST._ITypeParam theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IType>.Empty);
    public static RAST._ITypeParam Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITypeParam> _TYPE = new Dafny.TypeDescriptor<RAST._ITypeParam>(RAST.TypeParam.Default());
    public static Dafny.TypeDescriptor<RAST._ITypeParam> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return new TypeParam(content, constraints);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content, Dafny.ISequence<RAST._IType> constraints) {
      return create(content, constraints);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_constraints {
      get {
        return this._constraints;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<Dafny.Rune> ind)
    {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._ITypeParam>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._ITypeParam, Dafny.ISequence<Dafny.Rune>>)((_825_t) => {
          return (_825_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._ITypeParam> AddConstraintsMultiple(Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IType> constraints)
    {
      Dafny.ISequence<RAST._ITypeParam> _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements());
      } else {
        _826___accumulator = Dafny.Sequence<RAST._ITypeParam>.Concat(_826___accumulator, Dafny.Sequence<RAST._ITypeParam>.FromElements(((typeParams).Select(BigInteger.Zero)).AddConstraints(constraints)));
        Dafny.ISequence<RAST._ITypeParam> _in111 = (typeParams).Drop(BigInteger.One);
        Dafny.ISequence<RAST._IType> _in112 = constraints;
        typeParams = _in111;
        constraints = _in112;
        goto TAIL_CALL_START;
      }
    }
    public RAST._ITypeParam AddConstraints(Dafny.ISequence<RAST._IType> constraints) {
      RAST._ITypeParam _827_dt__update__tmp_h0 = this;
      Dafny.ISequence<RAST._IType> _828_dt__update_hconstraints_h0 = Dafny.Sequence<RAST._IType>.Concat((this).dtor_constraints, constraints);
      return RAST.TypeParam.create((_827_dt__update__tmp_h0).dtor_content, _828_dt__update_hconstraints_h0);
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_content, (((new BigInteger(((this).dtor_constraints).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), RAST.__default.SeqToString<RAST._IType>((this).dtor_constraints, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_829_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_830_t) => {
        return (_830_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_829_ind, RAST.__default.IND));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + "))))));
    }
  }

  public interface _IType {
    bool is_SelfOwned { get; }
    bool is_U8 { get; }
    bool is_U16 { get; }
    bool is_U32 { get; }
    bool is_U64 { get; }
    bool is_U128 { get; }
    bool is_I8 { get; }
    bool is_I16 { get; }
    bool is_I32 { get; }
    bool is_I64 { get; }
    bool is_I128 { get; }
    bool is_TIdentifier { get; }
    bool is_TMemberSelect { get; }
    bool is_TypeApp { get; }
    bool is_Borrowed { get; }
    bool is_BorrowedMut { get; }
    bool is_ImplType { get; }
    bool is_DynType { get; }
    bool is_TupleType { get; }
    bool is_FnType { get; }
    bool is_IntersectionType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_base { get; }
    RAST._IType dtor_baseName { get; }
    Dafny.ISequence<RAST._IType> dtor_arguments { get; }
    RAST._IType dtor_underlying { get; }
    RAST._IType dtor_returnType { get; }
    RAST._IType dtor_left { get; }
    RAST._IType dtor_right { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IType Apply1(RAST._IType arg);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_SelfOwned();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_U8() {
      return new Type_U8();
    }
    public static _IType create_U16() {
      return new Type_U16();
    }
    public static _IType create_U32() {
      return new Type_U32();
    }
    public static _IType create_U64() {
      return new Type_U64();
    }
    public static _IType create_U128() {
      return new Type_U128();
    }
    public static _IType create_I8() {
      return new Type_I8();
    }
    public static _IType create_I16() {
      return new Type_I16();
    }
    public static _IType create_I32() {
      return new Type_I32();
    }
    public static _IType create_I64() {
      return new Type_I64();
    }
    public static _IType create_I128() {
      return new Type_I128();
    }
    public static _IType create_TIdentifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TIdentifier(name);
    }
    public static _IType create_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) {
      return new Type_TMemberSelect(@base, name);
    }
    public static _IType create_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TypeApp(baseName, arguments);
    }
    public static _IType create_Borrowed(RAST._IType underlying) {
      return new Type_Borrowed(underlying);
    }
    public static _IType create_BorrowedMut(RAST._IType underlying) {
      return new Type_BorrowedMut(underlying);
    }
    public static _IType create_ImplType(RAST._IType underlying) {
      return new Type_ImplType(underlying);
    }
    public static _IType create_DynType(RAST._IType underlying) {
      return new Type_DynType(underlying);
    }
    public static _IType create_TupleType(Dafny.ISequence<RAST._IType> arguments) {
      return new Type_TupleType(arguments);
    }
    public static _IType create_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) {
      return new Type_FnType(arguments, returnType);
    }
    public static _IType create_IntersectionType(RAST._IType left, RAST._IType right) {
      return new Type_IntersectionType(left, right);
    }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_U8 { get { return this is Type_U8; } }
    public bool is_U16 { get { return this is Type_U16; } }
    public bool is_U32 { get { return this is Type_U32; } }
    public bool is_U64 { get { return this is Type_U64; } }
    public bool is_U128 { get { return this is Type_U128; } }
    public bool is_I8 { get { return this is Type_I8; } }
    public bool is_I16 { get { return this is Type_I16; } }
    public bool is_I32 { get { return this is Type_I32; } }
    public bool is_I64 { get { return this is Type_I64; } }
    public bool is_I128 { get { return this is Type_I128; } }
    public bool is_TIdentifier { get { return this is Type_TIdentifier; } }
    public bool is_TMemberSelect { get { return this is Type_TMemberSelect; } }
    public bool is_TypeApp { get { return this is Type_TypeApp; } }
    public bool is_Borrowed { get { return this is Type_Borrowed; } }
    public bool is_BorrowedMut { get { return this is Type_BorrowedMut; } }
    public bool is_ImplType { get { return this is Type_ImplType; } }
    public bool is_DynType { get { return this is Type_DynType; } }
    public bool is_TupleType { get { return this is Type_TupleType; } }
    public bool is_FnType { get { return this is Type_FnType; } }
    public bool is_IntersectionType { get { return this is Type_IntersectionType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Type_TIdentifier) { return ((Type_TIdentifier)d)._name; }
        return ((Type_TMemberSelect)d)._name;
      }
    }
    public RAST._IType dtor_base {
      get {
        var d = this;
        return ((Type_TMemberSelect)d)._base;
      }
    }
    public RAST._IType dtor_baseName {
      get {
        var d = this;
        return ((Type_TypeApp)d)._baseName;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_arguments {
      get {
        var d = this;
        if (d is Type_TypeApp) { return ((Type_TypeApp)d)._arguments; }
        if (d is Type_TupleType) { return ((Type_TupleType)d)._arguments; }
        return ((Type_FnType)d)._arguments;
      }
    }
    public RAST._IType dtor_underlying {
      get {
        var d = this;
        if (d is Type_Borrowed) { return ((Type_Borrowed)d)._underlying; }
        if (d is Type_BorrowedMut) { return ((Type_BorrowedMut)d)._underlying; }
        if (d is Type_ImplType) { return ((Type_ImplType)d)._underlying; }
        return ((Type_DynType)d)._underlying;
      }
    }
    public RAST._IType dtor_returnType {
      get {
        var d = this;
        return ((Type_FnType)d)._returnType;
      }
    }
    public RAST._IType dtor_left {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._left;
      }
    }
    public RAST._IType dtor_right {
      get {
        var d = this;
        return ((Type_IntersectionType)d)._right;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IType _source26 = this;
      if (_source26.is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if (_source26.is_U8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8");
      } else if (_source26.is_U16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16");
      } else if (_source26.is_U32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32");
      } else if (_source26.is_U64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64");
      } else if (_source26.is_U128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128");
      } else if (_source26.is_I8) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8");
      } else if (_source26.is_I16) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16");
      } else if (_source26.is_I32) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32");
      } else if (_source26.is_I64) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64");
      } else if (_source26.is_I128) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128");
      } else if (_source26.is_TIdentifier) {
        Dafny.ISequence<Dafny.Rune> _831___mcc_h0 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _832_underlying = _831___mcc_h0;
        return _832_underlying;
      } else if (_source26.is_TMemberSelect) {
        RAST._IType _833___mcc_h1 = _source26.dtor_base;
        Dafny.ISequence<Dafny.Rune> _834___mcc_h2 = _source26.dtor_name;
        Dafny.ISequence<Dafny.Rune> _835_name = _834___mcc_h2;
        RAST._IType _836_underlying = _833___mcc_h1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_836_underlying)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _835_name);
      } else if (_source26.is_TypeApp) {
        RAST._IType _837___mcc_h3 = _source26.dtor_baseName;
        Dafny.ISequence<RAST._IType> _838___mcc_h4 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _839_args = _838___mcc_h4;
        RAST._IType _840_base = _837___mcc_h3;
        return Dafny.Sequence<Dafny.Rune>.Concat((_840_base)._ToString(ind), (((_839_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<RAST._IType>(_839_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_841_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_842_arg) => {
          return (_842_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_841_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
      } else if (_source26.is_Borrowed) {
        RAST._IType _843___mcc_h5 = _source26.dtor_underlying;
        RAST._IType _844_underlying = _843___mcc_h5;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), (_844_underlying)._ToString(ind));
      } else if (_source26.is_BorrowedMut) {
        RAST._IType _845___mcc_h6 = _source26.dtor_underlying;
        RAST._IType _846_underlying = _845___mcc_h6;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut "), (_846_underlying)._ToString(ind));
      } else if (_source26.is_ImplType) {
        RAST._IType _847___mcc_h7 = _source26.dtor_underlying;
        RAST._IType _848_underlying = _847___mcc_h7;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), (_848_underlying)._ToString(ind));
      } else if (_source26.is_DynType) {
        RAST._IType _849___mcc_h8 = _source26.dtor_underlying;
        RAST._IType _850_underlying = _849___mcc_h8;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn "), (_850_underlying)._ToString(ind));
      } else if (_source26.is_TupleType) {
        Dafny.ISequence<RAST._IType> _851___mcc_h9 = _source26.dtor_arguments;
        Dafny.ISequence<RAST._IType> _852_args = _851___mcc_h9;
        if ((_852_args).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()");
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>(_852_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_853_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_854_arg) => {
            return (_854_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_853_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
        }
      } else if (_source26.is_FnType) {
        Dafny.ISequence<RAST._IType> _855___mcc_h10 = _source26.dtor_arguments;
        RAST._IType _856___mcc_h11 = _source26.dtor_returnType;
        RAST._IType _857_returnType = _856___mcc_h11;
        Dafny.ISequence<RAST._IType> _858_arguments = _855___mcc_h10;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Fn("), RAST.__default.SeqToString<RAST._IType>(_858_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_859_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_860_arg) => {
          return (_860_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_859_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_857_returnType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      } else {
        RAST._IType _861___mcc_h12 = _source26.dtor_left;
        RAST._IType _862___mcc_h13 = _source26.dtor_right;
        RAST._IType _863_right = _862___mcc_h13;
        RAST._IType _864_left = _861___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_864_left)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ")), (_863_right)._ToString(ind));
      }
    }
    public RAST._IType MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Type.create_TMemberSelect(this, name);
    }
    public RAST._IType Apply1(RAST._IType arg) {
      return RAST.Type.create_TypeApp(this, Dafny.Sequence<RAST._IType>.FromElements(arg));
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_U8 : Type {
    public Type_U8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U8";
      return s;
    }
  }
  public class Type_U16 : Type {
    public Type_U16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U16";
      return s;
    }
  }
  public class Type_U32 : Type {
    public Type_U32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U32";
      return s;
    }
  }
  public class Type_U64 : Type {
    public Type_U64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U64";
      return s;
    }
  }
  public class Type_U128 : Type {
    public Type_U128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_U128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_U128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.U128";
      return s;
    }
  }
  public class Type_I8 : Type {
    public Type_I8() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I8();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I8;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I8";
      return s;
    }
  }
  public class Type_I16 : Type {
    public Type_I16() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I16();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I16;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I16";
      return s;
    }
  }
  public class Type_I32 : Type {
    public Type_I32() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I32();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I32;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I32";
      return s;
    }
  }
  public class Type_I64 : Type {
    public Type_I64() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I64();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I64;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I64";
      return s;
    }
  }
  public class Type_I128 : Type {
    public Type_I128() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_I128();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_I128;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.I128";
      return s;
    }
  }
  public class Type_TIdentifier : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TIdentifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TIdentifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TIdentifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TIdentifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TMemberSelect : Type {
    public readonly RAST._IType _base;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Type_TMemberSelect(RAST._IType @base, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._base = @base;
      this._name = name;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TMemberSelect(_base, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TMemberSelect;
      return oth != null && object.Equals(this._base, oth._base) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TMemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeApp : Type {
    public readonly RAST._IType _baseName;
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TypeApp(RAST._IType baseName, Dafny.ISequence<RAST._IType> arguments) : base() {
      this._baseName = baseName;
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeApp(_baseName, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TypeApp;
      return oth != null && object.Equals(this._baseName, oth._baseName) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._baseName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TypeApp";
      s += "(";
      s += Dafny.Helpers.ToString(this._baseName);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_Borrowed : Type {
    public readonly RAST._IType _underlying;
    public Type_Borrowed(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Borrowed(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Borrowed;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Borrowed";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_BorrowedMut : Type {
    public readonly RAST._IType _underlying;
    public Type_BorrowedMut(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_BorrowedMut(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_BorrowedMut;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.BorrowedMut";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_ImplType : Type {
    public readonly RAST._IType _underlying;
    public Type_ImplType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_ImplType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_ImplType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.ImplType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_DynType : Type {
    public readonly RAST._IType _underlying;
    public Type_DynType(RAST._IType underlying) : base() {
      this._underlying = underlying;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_DynType(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_DynType;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.DynType";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Type_TupleType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public Type_TupleType(Dafny.ISequence<RAST._IType> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TupleType(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_TupleType;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.TupleType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Type_FnType : Type {
    public readonly Dafny.ISequence<RAST._IType> _arguments;
    public readonly RAST._IType _returnType;
    public Type_FnType(Dafny.ISequence<RAST._IType> arguments, RAST._IType returnType) : base() {
      this._arguments = arguments;
      this._returnType = returnType;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_FnType(_arguments, _returnType);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_FnType;
      return oth != null && object.Equals(this._arguments, oth._arguments) && object.Equals(this._returnType, oth._returnType);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.FnType";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ")";
      return s;
    }
  }
  public class Type_IntersectionType : Type {
    public readonly RAST._IType _left;
    public readonly RAST._IType _right;
    public Type_IntersectionType(RAST._IType left, RAST._IType right) : base() {
      this._left = left;
      this._right = right;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_IntersectionType(_left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_IntersectionType;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Type.IntersectionType";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_865_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_866_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _865_ind), RAST.__default.IND), (_866_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_865_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<RAST._ITypeParam>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_867_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_868_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _867_ind), RAST.__default.IND), (_868_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_867_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<RAST._ITypeParam> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IVisibility dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(RAST._IVisibility pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public RAST._IVisibility dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((object.Equals((this).dtor_pub, RAST.Visibility.create_PUB())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly RAST._IVisibility _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(RAST._IVisibility pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && object.Equals(this._pub, oth._pub) && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public interface _IVisibility {
    bool is_PUB { get; }
    bool is_PRIV { get; }
    _IVisibility DowncastClone();
  }
  public abstract class Visibility : _IVisibility {
    public Visibility() {
    }
    private static readonly RAST._IVisibility theDefault = create_PUB();
    public static RAST._IVisibility Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IVisibility> _TYPE = new Dafny.TypeDescriptor<RAST._IVisibility>(RAST.Visibility.Default());
    public static Dafny.TypeDescriptor<RAST._IVisibility> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IVisibility create_PUB() {
      return new Visibility_PUB();
    }
    public static _IVisibility create_PRIV() {
      return new Visibility_PRIV();
    }
    public bool is_PUB { get { return this is Visibility_PUB; } }
    public bool is_PRIV { get { return this is Visibility_PRIV; } }
    public static System.Collections.Generic.IEnumerable<_IVisibility> AllSingletonConstructors {
      get {
        yield return Visibility.create_PUB();
        yield return Visibility.create_PRIV();
      }
    }
    public abstract _IVisibility DowncastClone();
  }
  public class Visibility_PUB : Visibility {
    public Visibility_PUB() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PUB();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PUB;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PUB";
      return s;
    }
  }
  public class Visibility_PRIV : Visibility {
    public Visibility_PRIV() : base() {
    }
    public override _IVisibility DowncastClone() {
      if (this is _IVisibility dt) { return dt; }
      return new Visibility_PRIV();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Visibility_PRIV;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Visibility.PRIV";
      return s;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.Type.create_SelfOwned())))) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (object.Equals((this).dtor_tpe, RAST.Type.create_Borrowed(RAST.__default.SelfMut)))) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.__default.Self);
    } }
    public static RAST._IFormal selfOwned { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
    } }
    public static RAST._IFormal selfMut { get {
      return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.__default.SelfMut);
    } }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _869_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _870_rhsString = ((this).dtor_rhs)._ToString(_869_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_870_rhsString).Contains(new Dafny.Rune('\n'))) && (((_870_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _870_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _870_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    BigInteger Height();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public BigInteger Height() {
      return (BigInteger.One) + (((this).dtor_rhs).Height());
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IDeclareType {
    bool is_MUT { get; }
    bool is_CONST { get; }
    _IDeclareType DowncastClone();
  }
  public abstract class DeclareType : _IDeclareType {
    public DeclareType() {
    }
    private static readonly RAST._IDeclareType theDefault = create_MUT();
    public static RAST._IDeclareType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IDeclareType> _TYPE = new Dafny.TypeDescriptor<RAST._IDeclareType>(RAST.DeclareType.Default());
    public static Dafny.TypeDescriptor<RAST._IDeclareType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDeclareType create_MUT() {
      return new DeclareType_MUT();
    }
    public static _IDeclareType create_CONST() {
      return new DeclareType_CONST();
    }
    public bool is_MUT { get { return this is DeclareType_MUT; } }
    public bool is_CONST { get { return this is DeclareType_CONST; } }
    public static System.Collections.Generic.IEnumerable<_IDeclareType> AllSingletonConstructors {
      get {
        yield return DeclareType.create_MUT();
        yield return DeclareType.create_CONST();
      }
    }
    public abstract _IDeclareType DowncastClone();
  }
  public class DeclareType_MUT : DeclareType {
    public DeclareType_MUT() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_MUT();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_MUT;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.MUT";
      return s;
    }
  }
  public class DeclareType_CONST : DeclareType {
    public DeclareType_CONST() : base() {
    }
    public override _IDeclareType DowncastClone() {
      if (this is _IDeclareType dt) { return dt; }
      return new DeclareType_CONST();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.DeclareType_CONST;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.DeclareType.CONST";
      return s;
    }
  }

  public interface _IAssociativity {
    bool is_LeftToRight { get; }
    bool is_RightToLeft { get; }
    bool is_RequiresParentheses { get; }
    _IAssociativity DowncastClone();
  }
  public abstract class Associativity : _IAssociativity {
    public Associativity() {
    }
    private static readonly RAST._IAssociativity theDefault = create_LeftToRight();
    public static RAST._IAssociativity Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssociativity> _TYPE = new Dafny.TypeDescriptor<RAST._IAssociativity>(RAST.Associativity.Default());
    public static Dafny.TypeDescriptor<RAST._IAssociativity> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssociativity create_LeftToRight() {
      return new Associativity_LeftToRight();
    }
    public static _IAssociativity create_RightToLeft() {
      return new Associativity_RightToLeft();
    }
    public static _IAssociativity create_RequiresParentheses() {
      return new Associativity_RequiresParentheses();
    }
    public bool is_LeftToRight { get { return this is Associativity_LeftToRight; } }
    public bool is_RightToLeft { get { return this is Associativity_RightToLeft; } }
    public bool is_RequiresParentheses { get { return this is Associativity_RequiresParentheses; } }
    public static System.Collections.Generic.IEnumerable<_IAssociativity> AllSingletonConstructors {
      get {
        yield return Associativity.create_LeftToRight();
        yield return Associativity.create_RightToLeft();
        yield return Associativity.create_RequiresParentheses();
      }
    }
    public abstract _IAssociativity DowncastClone();
  }
  public class Associativity_LeftToRight : Associativity {
    public Associativity_LeftToRight() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_LeftToRight();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_LeftToRight;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.LeftToRight";
      return s;
    }
  }
  public class Associativity_RightToLeft : Associativity {
    public Associativity_RightToLeft() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RightToLeft();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RightToLeft;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RightToLeft";
      return s;
    }
  }
  public class Associativity_RequiresParentheses : Associativity {
    public Associativity_RequiresParentheses() : base() {
    }
    public override _IAssociativity DowncastClone() {
      if (this is _IAssociativity dt) { return dt; }
      return new Associativity_RequiresParentheses();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Associativity_RequiresParentheses;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Associativity.RequiresParentheses";
      return s;
    }
  }

  public interface _IPrintingInfo {
    bool is_UnknownPrecedence { get; }
    bool is_Precedence { get; }
    bool is_SuffixPrecedence { get; }
    bool is_PrecedenceAssociativity { get; }
    BigInteger dtor_precedence { get; }
    RAST._IAssociativity dtor_associativity { get; }
    _IPrintingInfo DowncastClone();
    bool NeedParenthesesFor(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying);
    bool NeedParenthesesForRight(RAST._IPrintingInfo underlying);
  }
  public abstract class PrintingInfo : _IPrintingInfo {
    public PrintingInfo() {
    }
    private static readonly RAST._IPrintingInfo theDefault = create_UnknownPrecedence();
    public static RAST._IPrintingInfo Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IPrintingInfo> _TYPE = new Dafny.TypeDescriptor<RAST._IPrintingInfo>(RAST.PrintingInfo.Default());
    public static Dafny.TypeDescriptor<RAST._IPrintingInfo> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrintingInfo create_UnknownPrecedence() {
      return new PrintingInfo_UnknownPrecedence();
    }
    public static _IPrintingInfo create_Precedence(BigInteger precedence) {
      return new PrintingInfo_Precedence(precedence);
    }
    public static _IPrintingInfo create_SuffixPrecedence(BigInteger precedence) {
      return new PrintingInfo_SuffixPrecedence(precedence);
    }
    public static _IPrintingInfo create_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) {
      return new PrintingInfo_PrecedenceAssociativity(precedence, associativity);
    }
    public bool is_UnknownPrecedence { get { return this is PrintingInfo_UnknownPrecedence; } }
    public bool is_Precedence { get { return this is PrintingInfo_Precedence; } }
    public bool is_SuffixPrecedence { get { return this is PrintingInfo_SuffixPrecedence; } }
    public bool is_PrecedenceAssociativity { get { return this is PrintingInfo_PrecedenceAssociativity; } }
    public BigInteger dtor_precedence {
      get {
        var d = this;
        if (d is PrintingInfo_Precedence) { return ((PrintingInfo_Precedence)d)._precedence; }
        if (d is PrintingInfo_SuffixPrecedence) { return ((PrintingInfo_SuffixPrecedence)d)._precedence; }
        return ((PrintingInfo_PrecedenceAssociativity)d)._precedence;
      }
    }
    public RAST._IAssociativity dtor_associativity {
      get {
        var d = this;
        return ((PrintingInfo_PrecedenceAssociativity)d)._associativity;
      }
    }
    public abstract _IPrintingInfo DowncastClone();
    public bool NeedParenthesesFor(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return true;
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForLeft(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_LeftToRight));
      } else {
        return false;
      }
    }
    public bool NeedParenthesesForRight(RAST._IPrintingInfo underlying) {
      if ((this).is_UnknownPrecedence) {
        return true;
      } else if ((underlying).is_UnknownPrecedence) {
        return true;
      } else if (((this).dtor_precedence) <= ((underlying).dtor_precedence)) {
        return ((((this).dtor_precedence) < ((underlying).dtor_precedence)) || (!((this).is_PrecedenceAssociativity))) || (!(((this).dtor_associativity).is_RightToLeft));
      } else {
        return false;
      }
    }
  }
  public class PrintingInfo_UnknownPrecedence : PrintingInfo {
    public PrintingInfo_UnknownPrecedence() : base() {
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_UnknownPrecedence();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_UnknownPrecedence;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.UnknownPrecedence";
      return s;
    }
  }
  public class PrintingInfo_Precedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_Precedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_Precedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_Precedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.Precedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_SuffixPrecedence : PrintingInfo {
    public readonly BigInteger _precedence;
    public PrintingInfo_SuffixPrecedence(BigInteger precedence) : base() {
      this._precedence = precedence;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_SuffixPrecedence(_precedence);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_SuffixPrecedence;
      return oth != null && this._precedence == oth._precedence;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.SuffixPrecedence";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ")";
      return s;
    }
  }
  public class PrintingInfo_PrecedenceAssociativity : PrintingInfo {
    public readonly BigInteger _precedence;
    public readonly RAST._IAssociativity _associativity;
    public PrintingInfo_PrecedenceAssociativity(BigInteger precedence, RAST._IAssociativity associativity) : base() {
      this._precedence = precedence;
      this._associativity = associativity;
    }
    public override _IPrintingInfo DowncastClone() {
      if (this is _IPrintingInfo dt) { return dt; }
      return new PrintingInfo_PrecedenceAssociativity(_precedence, _associativity);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.PrintingInfo_PrecedenceAssociativity;
      return oth != null && this._precedence == oth._precedence && object.Equals(this._associativity, oth._associativity);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._precedence));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._associativity));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.PrintingInfo.PrecedenceAssociativity";
      s += "(";
      s += Dafny.Helpers.ToString(this._precedence);
      s += ", ";
      s += Dafny.Helpers.ToString(this._associativity);
      s += ")";
      return s;
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Identifier { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    bool is_Tuple { get; }
    bool is_UnaryOp { get; }
    bool is_BinaryOp { get; }
    bool is_TypeAscription { get; }
    bool is_LiteralInt { get; }
    bool is_LiteralString { get; }
    bool is_ConversionNum { get; }
    bool is_DeclareVar { get; }
    bool is_AssignVar { get; }
    bool is_IfExpr { get; }
    bool is_Loop { get; }
    bool is_For { get; }
    bool is_Labelled { get; }
    bool is_Break { get; }
    bool is_Continue { get; }
    bool is_Return { get; }
    bool is_CallType { get; }
    bool is_Call { get; }
    bool is_Select { get; }
    bool is_MemberSelect { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    Dafny.ISequence<RAST._IExpr> dtor_arguments { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op1 { get; }
    DAST.Format._IUnOpFormat dtor_format { get; }
    Dafny.ISequence<Dafny.Rune> dtor_op2 { get; }
    RAST._IExpr dtor_left { get; }
    RAST._IExpr dtor_right { get; }
    DAST.Format._IBinOpFormat dtor_format2 { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_value { get; }
    bool dtor_binary { get; }
    RAST._IDeclareType dtor_declareType { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_optType { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs { get; }
    RAST._IExpr dtor_cond { get; }
    RAST._IExpr dtor_thn { get; }
    RAST._IExpr dtor_els { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optCond { get; }
    RAST._IExpr dtor_range { get; }
    RAST._IExpr dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr { get; }
    RAST._IExpr dtor_obj { get; }
    Dafny.ISequence<RAST._IType> dtor_typeParameters { get; }
    _IExpr DowncastClone();
    bool NoExtraSemicolonAfter();
    RAST._IPrintingInfo printingInfo { get; }
    BigInteger Height();
    RAST._IExpr Optimize();
    bool LeftRequiresParentheses(RAST._IExpr left);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left);
    bool RightRequiresParentheses(RAST._IExpr right);
    _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right);
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
    RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name);
    RAST._IExpr ApplyType(Dafny.ISequence<RAST._IType> typeParameters);
    RAST._IExpr ApplyType1(RAST._IType typeParameter);
    RAST._IExpr Apply(Dafny.ISequence<RAST._IExpr> arguments);
    RAST._IExpr Apply1(RAST._IExpr argument);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Identifier(Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Identifier(name);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(RAST._IExpr underlying, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(underlying, assignments);
    }
    public static _IExpr create_Tuple(Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Tuple(arguments);
    }
    public static _IExpr create_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) {
      return new Expr_UnaryOp(op1, underlying, format);
    }
    public static _IExpr create_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) {
      return new Expr_BinaryOp(op2, left, right, format2);
    }
    public static _IExpr create_TypeAscription(RAST._IExpr left, RAST._IType tpe) {
      return new Expr_TypeAscription(left, tpe);
    }
    public static _IExpr create_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) {
      return new Expr_LiteralInt(@value);
    }
    public static _IExpr create_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) {
      return new Expr_LiteralString(@value, binary);
    }
    public static _IExpr create_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) {
      return new Expr_ConversionNum(tpe, underlying);
    }
    public static _IExpr create_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) {
      return new Expr_DeclareVar(declareType, name, optType, optRhs);
    }
    public static _IExpr create_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) {
      return new Expr_AssignVar(name, rhs);
    }
    public static _IExpr create_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) {
      return new Expr_IfExpr(cond, thn, els);
    }
    public static _IExpr create_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) {
      return new Expr_Loop(optCond, underlying);
    }
    public static _IExpr create_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) {
      return new Expr_For(name, range, body);
    }
    public static _IExpr create_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) {
      return new Expr_Labelled(lbl, underlying);
    }
    public static _IExpr create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Break(optLbl);
    }
    public static _IExpr create_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) {
      return new Expr_Continue(optLbl);
    }
    public static _IExpr create_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) {
      return new Expr_Return(optExpr);
    }
    public static _IExpr create_CallType(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters) {
      return new Expr_CallType(obj, typeParameters);
    }
    public static _IExpr create_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IExpr> arguments) {
      return new Expr_Call(obj, arguments);
    }
    public static _IExpr create_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_Select(obj, name);
    }
    public static _IExpr create_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) {
      return new Expr_MemberSelect(obj, name);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Identifier { get { return this is Expr_Identifier; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public bool is_Tuple { get { return this is Expr_Tuple; } }
    public bool is_UnaryOp { get { return this is Expr_UnaryOp; } }
    public bool is_BinaryOp { get { return this is Expr_BinaryOp; } }
    public bool is_TypeAscription { get { return this is Expr_TypeAscription; } }
    public bool is_LiteralInt { get { return this is Expr_LiteralInt; } }
    public bool is_LiteralString { get { return this is Expr_LiteralString; } }
    public bool is_ConversionNum { get { return this is Expr_ConversionNum; } }
    public bool is_DeclareVar { get { return this is Expr_DeclareVar; } }
    public bool is_AssignVar { get { return this is Expr_AssignVar; } }
    public bool is_IfExpr { get { return this is Expr_IfExpr; } }
    public bool is_Loop { get { return this is Expr_Loop; } }
    public bool is_For { get { return this is Expr_For; } }
    public bool is_Labelled { get { return this is Expr_Labelled; } }
    public bool is_Break { get { return this is Expr_Break; } }
    public bool is_Continue { get { return this is Expr_Continue; } }
    public bool is_Return { get { return this is Expr_Return; } }
    public bool is_CallType { get { return this is Expr_CallType; } }
    public bool is_Call { get { return this is Expr_Call; } }
    public bool is_Select { get { return this is Expr_Select; } }
    public bool is_MemberSelect { get { return this is Expr_MemberSelect; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expr_Identifier) { return ((Expr_Identifier)d)._name; }
        if (d is Expr_DeclareVar) { return ((Expr_DeclareVar)d)._name; }
        if (d is Expr_AssignVar) { return ((Expr_AssignVar)d)._name; }
        if (d is Expr_For) { return ((Expr_For)d)._name; }
        if (d is Expr_Select) { return ((Expr_Select)d)._name; }
        return ((Expr_MemberSelect)d)._name;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        if (d is Expr_StmtExpr) { return ((Expr_StmtExpr)d)._rhs; }
        return ((Expr_AssignVar)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        if (d is Expr_Block) { return ((Expr_Block)d)._underlying; }
        if (d is Expr_StructBuild) { return ((Expr_StructBuild)d)._underlying; }
        if (d is Expr_UnaryOp) { return ((Expr_UnaryOp)d)._underlying; }
        if (d is Expr_ConversionNum) { return ((Expr_ConversionNum)d)._underlying; }
        if (d is Expr_Loop) { return ((Expr_Loop)d)._underlying; }
        return ((Expr_Labelled)d)._underlying;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public Dafny.ISequence<RAST._IExpr> dtor_arguments {
      get {
        var d = this;
        if (d is Expr_Tuple) { return ((Expr_Tuple)d)._arguments; }
        return ((Expr_Call)d)._arguments;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op1 {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._op1;
      }
    }
    public DAST.Format._IUnOpFormat dtor_format {
      get {
        var d = this;
        return ((Expr_UnaryOp)d)._format;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_op2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._op2;
      }
    }
    public RAST._IExpr dtor_left {
      get {
        var d = this;
        if (d is Expr_BinaryOp) { return ((Expr_BinaryOp)d)._left; }
        return ((Expr_TypeAscription)d)._left;
      }
    }
    public RAST._IExpr dtor_right {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._right;
      }
    }
    public DAST.Format._IBinOpFormat dtor_format2 {
      get {
        var d = this;
        return ((Expr_BinaryOp)d)._format2;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Expr_TypeAscription) { return ((Expr_TypeAscription)d)._tpe; }
        return ((Expr_ConversionNum)d)._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_value {
      get {
        var d = this;
        if (d is Expr_LiteralInt) { return ((Expr_LiteralInt)d)._value; }
        return ((Expr_LiteralString)d)._value;
      }
    }
    public bool dtor_binary {
      get {
        var d = this;
        return ((Expr_LiteralString)d)._binary;
      }
    }
    public RAST._IDeclareType dtor_declareType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._declareType;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_optType {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optType;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optRhs {
      get {
        var d = this;
        return ((Expr_DeclareVar)d)._optRhs;
      }
    }
    public RAST._IExpr dtor_cond {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._cond;
      }
    }
    public RAST._IExpr dtor_thn {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._thn;
      }
    }
    public RAST._IExpr dtor_els {
      get {
        var d = this;
        return ((Expr_IfExpr)d)._els;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optCond {
      get {
        var d = this;
        return ((Expr_Loop)d)._optCond;
      }
    }
    public RAST._IExpr dtor_range {
      get {
        var d = this;
        return ((Expr_For)d)._range;
      }
    }
    public RAST._IExpr dtor_body {
      get {
        var d = this;
        return ((Expr_For)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Expr_Labelled)d)._lbl;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_optLbl {
      get {
        var d = this;
        if (d is Expr_Break) { return ((Expr_Break)d)._optLbl; }
        return ((Expr_Continue)d)._optLbl;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_optExpr {
      get {
        var d = this;
        return ((Expr_Return)d)._optExpr;
      }
    }
    public RAST._IExpr dtor_obj {
      get {
        var d = this;
        if (d is Expr_CallType) { return ((Expr_CallType)d)._obj; }
        if (d is Expr_Call) { return ((Expr_Call)d)._obj; }
        if (d is Expr_Select) { return ((Expr_Select)d)._obj; }
        return ((Expr_MemberSelect)d)._obj;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_typeParameters {
      get {
        var d = this;
        return ((Expr_CallType)d)._typeParameters;
      }
    }
    public abstract _IExpr DowncastClone();
    public bool NoExtraSemicolonAfter() {
      return ((((((this).is_DeclareVar) || ((this).is_AssignVar)) || ((this).is_Break)) || ((this).is_Continue)) || ((this).is_Return)) || ((((this).is_RawExpr) && ((new BigInteger(((this).dtor_content).Count)).Sign == 1)) && ((((this).dtor_content).Select((new BigInteger(((this).dtor_content).Count)) - (BigInteger.One))) == (new Dafny.Rune(';'))));
    }
    public BigInteger Height() {
      RAST._IExpr _source27 = this;
      if (_source27.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _871___mcc_h0 = _source27.dtor_content;
        return BigInteger.One;
      } else if (_source27.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _872___mcc_h2 = _source27.dtor_name;
        return BigInteger.One;
      } else if (_source27.is_Match) {
        RAST._IExpr _873___mcc_h4 = _source27.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _874___mcc_h5 = _source27.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _875_cases = _874___mcc_h5;
        RAST._IExpr _876_matchee = _873___mcc_h4;
        return (BigInteger.One) + (RAST.__default.max((_876_matchee).Height(), RAST.__default.SeqToHeight<RAST._IMatchCase>(_875_cases, ((System.Func<RAST._IMatchCase, BigInteger>)((_877_oneCase) => {
          return (_877_oneCase).Height();
        })))));
      } else if (_source27.is_StmtExpr) {
        RAST._IExpr _878___mcc_h8 = _source27.dtor_stmt;
        RAST._IExpr _879___mcc_h9 = _source27.dtor_rhs;
        RAST._IExpr _880_rhs = _879___mcc_h9;
        RAST._IExpr _881_stmt = _878___mcc_h8;
        BigInteger _882_default = (BigInteger.One) + (RAST.__default.max((_881_stmt).Height(), (_880_rhs).Height()));
        RAST._IExpr _source28 = this;
        if (_source28.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _883___mcc_h102 = _source28.dtor_content;
          return _882_default;
        } else if (_source28.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _884___mcc_h104 = _source28.dtor_name;
          return _882_default;
        } else if (_source28.is_Match) {
          RAST._IExpr _885___mcc_h106 = _source28.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _886___mcc_h107 = _source28.dtor_cases;
          return _882_default;
        } else if (_source28.is_StmtExpr) {
          RAST._IExpr _887___mcc_h110 = _source28.dtor_stmt;
          RAST._IExpr _888___mcc_h111 = _source28.dtor_rhs;
          RAST._IExpr _source29 = _887___mcc_h110;
          if (_source29.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _889___mcc_h114 = _source29.dtor_content;
            return _882_default;
          } else if (_source29.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _890___mcc_h116 = _source29.dtor_name;
            return _882_default;
          } else if (_source29.is_Match) {
            RAST._IExpr _891___mcc_h118 = _source29.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _892___mcc_h119 = _source29.dtor_cases;
            return _882_default;
          } else if (_source29.is_StmtExpr) {
            RAST._IExpr _893___mcc_h122 = _source29.dtor_stmt;
            RAST._IExpr _894___mcc_h123 = _source29.dtor_rhs;
            return _882_default;
          } else if (_source29.is_Block) {
            RAST._IExpr _895___mcc_h126 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_StructBuild) {
            RAST._IExpr _896___mcc_h128 = _source29.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _897___mcc_h129 = _source29.dtor_assignments;
            return _882_default;
          } else if (_source29.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _898___mcc_h132 = _source29.dtor_arguments;
            return _882_default;
          } else if (_source29.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _899___mcc_h134 = _source29.dtor_op1;
            RAST._IExpr _900___mcc_h135 = _source29.dtor_underlying;
            DAST.Format._IUnOpFormat _901___mcc_h136 = _source29.dtor_format;
            return _882_default;
          } else if (_source29.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _902___mcc_h140 = _source29.dtor_op2;
            RAST._IExpr _903___mcc_h141 = _source29.dtor_left;
            RAST._IExpr _904___mcc_h142 = _source29.dtor_right;
            DAST.Format._IBinOpFormat _905___mcc_h143 = _source29.dtor_format2;
            return _882_default;
          } else if (_source29.is_TypeAscription) {
            RAST._IExpr _906___mcc_h148 = _source29.dtor_left;
            RAST._IType _907___mcc_h149 = _source29.dtor_tpe;
            return _882_default;
          } else if (_source29.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _908___mcc_h152 = _source29.dtor_value;
            return _882_default;
          } else if (_source29.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _909___mcc_h154 = _source29.dtor_value;
            bool _910___mcc_h155 = _source29.dtor_binary;
            return _882_default;
          } else if (_source29.is_ConversionNum) {
            RAST._IType _911___mcc_h158 = _source29.dtor_tpe;
            RAST._IExpr _912___mcc_h159 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_DeclareVar) {
            RAST._IDeclareType _913___mcc_h162 = _source29.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _914___mcc_h163 = _source29.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _915___mcc_h164 = _source29.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _916___mcc_h165 = _source29.dtor_optRhs;
            Std.Wrappers._IOption<RAST._IType> _source30 = _915___mcc_h164;
            if (_source30.is_None) {
              return _882_default;
            } else {
              RAST._IType _917___mcc_h170 = _source30.dtor_value;
              Std.Wrappers._IOption<RAST._IExpr> _source31 = _916___mcc_h165;
              if (_source31.is_None) {
                RAST._IExpr _source32 = _888___mcc_h111;
                if (_source32.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _918___mcc_h172 = _source32.dtor_content;
                  return _882_default;
                } else if (_source32.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _919___mcc_h174 = _source32.dtor_name;
                  return _882_default;
                } else if (_source32.is_Match) {
                  RAST._IExpr _920___mcc_h176 = _source32.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _921___mcc_h177 = _source32.dtor_cases;
                  return _882_default;
                } else if (_source32.is_StmtExpr) {
                  RAST._IExpr _922___mcc_h180 = _source32.dtor_stmt;
                  RAST._IExpr _923___mcc_h181 = _source32.dtor_rhs;
                  RAST._IExpr _source33 = _922___mcc_h180;
                  if (_source33.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _924___mcc_h184 = _source33.dtor_content;
                    return _882_default;
                  } else if (_source33.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _925___mcc_h186 = _source33.dtor_name;
                    return _882_default;
                  } else if (_source33.is_Match) {
                    RAST._IExpr _926___mcc_h188 = _source33.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _927___mcc_h189 = _source33.dtor_cases;
                    return _882_default;
                  } else if (_source33.is_StmtExpr) {
                    RAST._IExpr _928___mcc_h192 = _source33.dtor_stmt;
                    RAST._IExpr _929___mcc_h193 = _source33.dtor_rhs;
                    return _882_default;
                  } else if (_source33.is_Block) {
                    RAST._IExpr _930___mcc_h196 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_StructBuild) {
                    RAST._IExpr _931___mcc_h198 = _source33.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _932___mcc_h199 = _source33.dtor_assignments;
                    return _882_default;
                  } else if (_source33.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _933___mcc_h202 = _source33.dtor_arguments;
                    return _882_default;
                  } else if (_source33.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _934___mcc_h204 = _source33.dtor_op1;
                    RAST._IExpr _935___mcc_h205 = _source33.dtor_underlying;
                    DAST.Format._IUnOpFormat _936___mcc_h206 = _source33.dtor_format;
                    return _882_default;
                  } else if (_source33.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _937___mcc_h210 = _source33.dtor_op2;
                    RAST._IExpr _938___mcc_h211 = _source33.dtor_left;
                    RAST._IExpr _939___mcc_h212 = _source33.dtor_right;
                    DAST.Format._IBinOpFormat _940___mcc_h213 = _source33.dtor_format2;
                    return _882_default;
                  } else if (_source33.is_TypeAscription) {
                    RAST._IExpr _941___mcc_h218 = _source33.dtor_left;
                    RAST._IType _942___mcc_h219 = _source33.dtor_tpe;
                    return _882_default;
                  } else if (_source33.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _943___mcc_h222 = _source33.dtor_value;
                    return _882_default;
                  } else if (_source33.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _944___mcc_h224 = _source33.dtor_value;
                    bool _945___mcc_h225 = _source33.dtor_binary;
                    return _882_default;
                  } else if (_source33.is_ConversionNum) {
                    RAST._IType _946___mcc_h228 = _source33.dtor_tpe;
                    RAST._IExpr _947___mcc_h229 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_DeclareVar) {
                    RAST._IDeclareType _948___mcc_h232 = _source33.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _949___mcc_h233 = _source33.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _950___mcc_h234 = _source33.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _951___mcc_h235 = _source33.dtor_optRhs;
                    return _882_default;
                  } else if (_source33.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _952___mcc_h240 = _source33.dtor_name;
                    RAST._IExpr _953___mcc_h241 = _source33.dtor_rhs;
                    RAST._IExpr _954_last = _923___mcc_h181;
                    RAST._IExpr _955_rhs = _953___mcc_h241;
                    Dafny.ISequence<Dafny.Rune> _956_name2 = _952___mcc_h240;
                    RAST._IType _957_tpe = _917___mcc_h170;
                    Dafny.ISequence<Dafny.Rune> _958_name = _914___mcc_h163;
                    RAST._IDeclareType _959_mod = _913___mcc_h162;
                    if ((_958_name).Equals(_956_name2)) {
                      return (BigInteger.One) + (_882_default);
                    } else {
                      return _882_default;
                    }
                  } else if (_source33.is_IfExpr) {
                    RAST._IExpr _960___mcc_h244 = _source33.dtor_cond;
                    RAST._IExpr _961___mcc_h245 = _source33.dtor_thn;
                    RAST._IExpr _962___mcc_h246 = _source33.dtor_els;
                    return _882_default;
                  } else if (_source33.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _963___mcc_h250 = _source33.dtor_optCond;
                    RAST._IExpr _964___mcc_h251 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_For) {
                    Dafny.ISequence<Dafny.Rune> _965___mcc_h254 = _source33.dtor_name;
                    RAST._IExpr _966___mcc_h255 = _source33.dtor_range;
                    RAST._IExpr _967___mcc_h256 = _source33.dtor_body;
                    return _882_default;
                  } else if (_source33.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _968___mcc_h260 = _source33.dtor_lbl;
                    RAST._IExpr _969___mcc_h261 = _source33.dtor_underlying;
                    return _882_default;
                  } else if (_source33.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _970___mcc_h264 = _source33.dtor_optLbl;
                    return _882_default;
                  } else if (_source33.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _971___mcc_h266 = _source33.dtor_optLbl;
                    return _882_default;
                  } else if (_source33.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _972___mcc_h268 = _source33.dtor_optExpr;
                    return _882_default;
                  } else if (_source33.is_CallType) {
                    RAST._IExpr _973___mcc_h270 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IType> _974___mcc_h271 = _source33.dtor_typeParameters;
                    return _882_default;
                  } else if (_source33.is_Call) {
                    RAST._IExpr _975___mcc_h274 = _source33.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _976___mcc_h275 = _source33.dtor_arguments;
                    return _882_default;
                  } else if (_source33.is_Select) {
                    RAST._IExpr _977___mcc_h278 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _978___mcc_h279 = _source33.dtor_name;
                    return _882_default;
                  } else {
                    RAST._IExpr _979___mcc_h282 = _source33.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _980___mcc_h283 = _source33.dtor_name;
                    return _882_default;
                  }
                } else if (_source32.is_Block) {
                  RAST._IExpr _981___mcc_h286 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_StructBuild) {
                  RAST._IExpr _982___mcc_h288 = _source32.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _983___mcc_h289 = _source32.dtor_assignments;
                  return _882_default;
                } else if (_source32.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _984___mcc_h292 = _source32.dtor_arguments;
                  return _882_default;
                } else if (_source32.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _985___mcc_h294 = _source32.dtor_op1;
                  RAST._IExpr _986___mcc_h295 = _source32.dtor_underlying;
                  DAST.Format._IUnOpFormat _987___mcc_h296 = _source32.dtor_format;
                  return _882_default;
                } else if (_source32.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _988___mcc_h300 = _source32.dtor_op2;
                  RAST._IExpr _989___mcc_h301 = _source32.dtor_left;
                  RAST._IExpr _990___mcc_h302 = _source32.dtor_right;
                  DAST.Format._IBinOpFormat _991___mcc_h303 = _source32.dtor_format2;
                  return _882_default;
                } else if (_source32.is_TypeAscription) {
                  RAST._IExpr _992___mcc_h308 = _source32.dtor_left;
                  RAST._IType _993___mcc_h309 = _source32.dtor_tpe;
                  return _882_default;
                } else if (_source32.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _994___mcc_h312 = _source32.dtor_value;
                  return _882_default;
                } else if (_source32.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _995___mcc_h314 = _source32.dtor_value;
                  bool _996___mcc_h315 = _source32.dtor_binary;
                  return _882_default;
                } else if (_source32.is_ConversionNum) {
                  RAST._IType _997___mcc_h318 = _source32.dtor_tpe;
                  RAST._IExpr _998___mcc_h319 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_DeclareVar) {
                  RAST._IDeclareType _999___mcc_h322 = _source32.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1000___mcc_h323 = _source32.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1001___mcc_h324 = _source32.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1002___mcc_h325 = _source32.dtor_optRhs;
                  return _882_default;
                } else if (_source32.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1003___mcc_h330 = _source32.dtor_name;
                  RAST._IExpr _1004___mcc_h331 = _source32.dtor_rhs;
                  return _882_default;
                } else if (_source32.is_IfExpr) {
                  RAST._IExpr _1005___mcc_h334 = _source32.dtor_cond;
                  RAST._IExpr _1006___mcc_h335 = _source32.dtor_thn;
                  RAST._IExpr _1007___mcc_h336 = _source32.dtor_els;
                  return _882_default;
                } else if (_source32.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1008___mcc_h340 = _source32.dtor_optCond;
                  RAST._IExpr _1009___mcc_h341 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1010___mcc_h344 = _source32.dtor_name;
                  RAST._IExpr _1011___mcc_h345 = _source32.dtor_range;
                  RAST._IExpr _1012___mcc_h346 = _source32.dtor_body;
                  return _882_default;
                } else if (_source32.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1013___mcc_h350 = _source32.dtor_lbl;
                  RAST._IExpr _1014___mcc_h351 = _source32.dtor_underlying;
                  return _882_default;
                } else if (_source32.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1015___mcc_h354 = _source32.dtor_optLbl;
                  return _882_default;
                } else if (_source32.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1016___mcc_h356 = _source32.dtor_optLbl;
                  return _882_default;
                } else if (_source32.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1017___mcc_h358 = _source32.dtor_optExpr;
                  return _882_default;
                } else if (_source32.is_CallType) {
                  RAST._IExpr _1018___mcc_h360 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1019___mcc_h361 = _source32.dtor_typeParameters;
                  return _882_default;
                } else if (_source32.is_Call) {
                  RAST._IExpr _1020___mcc_h364 = _source32.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1021___mcc_h365 = _source32.dtor_arguments;
                  return _882_default;
                } else if (_source32.is_Select) {
                  RAST._IExpr _1022___mcc_h368 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1023___mcc_h369 = _source32.dtor_name;
                  return _882_default;
                } else {
                  RAST._IExpr _1024___mcc_h372 = _source32.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1025___mcc_h373 = _source32.dtor_name;
                  return _882_default;
                }
              } else {
                RAST._IExpr _1026___mcc_h376 = _source31.dtor_value;
                return _882_default;
              }
            }
          } else if (_source29.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1027___mcc_h378 = _source29.dtor_name;
            RAST._IExpr _1028___mcc_h379 = _source29.dtor_rhs;
            return _882_default;
          } else if (_source29.is_IfExpr) {
            RAST._IExpr _1029___mcc_h382 = _source29.dtor_cond;
            RAST._IExpr _1030___mcc_h383 = _source29.dtor_thn;
            RAST._IExpr _1031___mcc_h384 = _source29.dtor_els;
            return _882_default;
          } else if (_source29.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1032___mcc_h388 = _source29.dtor_optCond;
            RAST._IExpr _1033___mcc_h389 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_For) {
            Dafny.ISequence<Dafny.Rune> _1034___mcc_h392 = _source29.dtor_name;
            RAST._IExpr _1035___mcc_h393 = _source29.dtor_range;
            RAST._IExpr _1036___mcc_h394 = _source29.dtor_body;
            return _882_default;
          } else if (_source29.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1037___mcc_h398 = _source29.dtor_lbl;
            RAST._IExpr _1038___mcc_h399 = _source29.dtor_underlying;
            return _882_default;
          } else if (_source29.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1039___mcc_h402 = _source29.dtor_optLbl;
            return _882_default;
          } else if (_source29.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1040___mcc_h404 = _source29.dtor_optLbl;
            return _882_default;
          } else if (_source29.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1041___mcc_h406 = _source29.dtor_optExpr;
            return _882_default;
          } else if (_source29.is_CallType) {
            RAST._IExpr _1042___mcc_h408 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IType> _1043___mcc_h409 = _source29.dtor_typeParameters;
            return _882_default;
          } else if (_source29.is_Call) {
            RAST._IExpr _1044___mcc_h412 = _source29.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1045___mcc_h413 = _source29.dtor_arguments;
            return _882_default;
          } else if (_source29.is_Select) {
            RAST._IExpr _1046___mcc_h416 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1047___mcc_h417 = _source29.dtor_name;
            return _882_default;
          } else {
            RAST._IExpr _1048___mcc_h420 = _source29.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1049___mcc_h421 = _source29.dtor_name;
            return _882_default;
          }
        } else if (_source28.is_Block) {
          RAST._IExpr _1050___mcc_h424 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_StructBuild) {
          RAST._IExpr _1051___mcc_h426 = _source28.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1052___mcc_h427 = _source28.dtor_assignments;
          return _882_default;
        } else if (_source28.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1053___mcc_h430 = _source28.dtor_arguments;
          return _882_default;
        } else if (_source28.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1054___mcc_h432 = _source28.dtor_op1;
          RAST._IExpr _1055___mcc_h433 = _source28.dtor_underlying;
          DAST.Format._IUnOpFormat _1056___mcc_h434 = _source28.dtor_format;
          return _882_default;
        } else if (_source28.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1057___mcc_h438 = _source28.dtor_op2;
          RAST._IExpr _1058___mcc_h439 = _source28.dtor_left;
          RAST._IExpr _1059___mcc_h440 = _source28.dtor_right;
          DAST.Format._IBinOpFormat _1060___mcc_h441 = _source28.dtor_format2;
          return _882_default;
        } else if (_source28.is_TypeAscription) {
          RAST._IExpr _1061___mcc_h446 = _source28.dtor_left;
          RAST._IType _1062___mcc_h447 = _source28.dtor_tpe;
          return _882_default;
        } else if (_source28.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1063___mcc_h450 = _source28.dtor_value;
          return _882_default;
        } else if (_source28.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1064___mcc_h452 = _source28.dtor_value;
          bool _1065___mcc_h453 = _source28.dtor_binary;
          return _882_default;
        } else if (_source28.is_ConversionNum) {
          RAST._IType _1066___mcc_h456 = _source28.dtor_tpe;
          RAST._IExpr _1067___mcc_h457 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_DeclareVar) {
          RAST._IDeclareType _1068___mcc_h460 = _source28.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1069___mcc_h461 = _source28.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1070___mcc_h462 = _source28.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1071___mcc_h463 = _source28.dtor_optRhs;
          return _882_default;
        } else if (_source28.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1072___mcc_h468 = _source28.dtor_name;
          RAST._IExpr _1073___mcc_h469 = _source28.dtor_rhs;
          return _882_default;
        } else if (_source28.is_IfExpr) {
          RAST._IExpr _1074___mcc_h472 = _source28.dtor_cond;
          RAST._IExpr _1075___mcc_h473 = _source28.dtor_thn;
          RAST._IExpr _1076___mcc_h474 = _source28.dtor_els;
          return _882_default;
        } else if (_source28.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1077___mcc_h478 = _source28.dtor_optCond;
          RAST._IExpr _1078___mcc_h479 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_For) {
          Dafny.ISequence<Dafny.Rune> _1079___mcc_h482 = _source28.dtor_name;
          RAST._IExpr _1080___mcc_h483 = _source28.dtor_range;
          RAST._IExpr _1081___mcc_h484 = _source28.dtor_body;
          return _882_default;
        } else if (_source28.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1082___mcc_h488 = _source28.dtor_lbl;
          RAST._IExpr _1083___mcc_h489 = _source28.dtor_underlying;
          return _882_default;
        } else if (_source28.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1084___mcc_h492 = _source28.dtor_optLbl;
          return _882_default;
        } else if (_source28.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1085___mcc_h494 = _source28.dtor_optLbl;
          return _882_default;
        } else if (_source28.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1086___mcc_h496 = _source28.dtor_optExpr;
          return _882_default;
        } else if (_source28.is_CallType) {
          RAST._IExpr _1087___mcc_h498 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IType> _1088___mcc_h499 = _source28.dtor_typeParameters;
          return _882_default;
        } else if (_source28.is_Call) {
          RAST._IExpr _1089___mcc_h502 = _source28.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1090___mcc_h503 = _source28.dtor_arguments;
          return _882_default;
        } else if (_source28.is_Select) {
          RAST._IExpr _1091___mcc_h506 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1092___mcc_h507 = _source28.dtor_name;
          return _882_default;
        } else {
          RAST._IExpr _1093___mcc_h510 = _source28.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1094___mcc_h511 = _source28.dtor_name;
          return _882_default;
        }
      } else if (_source27.is_Block) {
        RAST._IExpr _1095___mcc_h12 = _source27.dtor_underlying;
        RAST._IExpr _1096_underlying = _1095___mcc_h12;
        return (BigInteger.One) + ((_1096_underlying).Height());
      } else if (_source27.is_StructBuild) {
        RAST._IExpr _1097___mcc_h14 = _source27.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1098___mcc_h15 = _source27.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1099_assignments = _1098___mcc_h15;
        RAST._IExpr _1100_name = _1097___mcc_h14;
        return (BigInteger.One) + (RAST.__default.max((_1100_name).Height(), RAST.__default.SeqToHeight<RAST._IAssignIdentifier>(_1099_assignments, ((System.Func<RAST._IAssignIdentifier, BigInteger>)((_1101_assignment) => {
          return (_1101_assignment).Height();
        })))));
      } else if (_source27.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1102___mcc_h18 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1103_arguments = _1102___mcc_h18;
        return (BigInteger.One) + (RAST.__default.SeqToHeight<RAST._IExpr>(_1103_arguments, ((System.Func<RAST._IExpr, BigInteger>)((_1104_argument) => {
          return (_1104_argument).Height();
        }))));
      } else if (_source27.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1105___mcc_h20 = _source27.dtor_op1;
        RAST._IExpr _1106___mcc_h21 = _source27.dtor_underlying;
        DAST.Format._IUnOpFormat _1107___mcc_h22 = _source27.dtor_format;
        RAST._IExpr _1108_underlying = _1106___mcc_h21;
        return (BigInteger.One) + ((_1108_underlying).Height());
      } else if (_source27.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1109___mcc_h26 = _source27.dtor_op2;
        RAST._IExpr _1110___mcc_h27 = _source27.dtor_left;
        RAST._IExpr _1111___mcc_h28 = _source27.dtor_right;
        DAST.Format._IBinOpFormat _1112___mcc_h29 = _source27.dtor_format2;
        DAST.Format._IBinOpFormat _1113_format = _1112___mcc_h29;
        RAST._IExpr _1114_right = _1111___mcc_h28;
        RAST._IExpr _1115_left = _1110___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1116_op = _1109___mcc_h26;
        return (BigInteger.One) + (RAST.__default.max((_1115_left).Height(), (_1114_right).Height()));
      } else if (_source27.is_TypeAscription) {
        RAST._IExpr _1117___mcc_h34 = _source27.dtor_left;
        RAST._IType _1118___mcc_h35 = _source27.dtor_tpe;
        RAST._IType _1119_tpe = _1118___mcc_h35;
        RAST._IExpr _1120_left = _1117___mcc_h34;
        return (BigInteger.One) + ((_1120_left).Height());
      } else if (_source27.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1121___mcc_h38 = _source27.dtor_value;
        return BigInteger.One;
      } else if (_source27.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1122___mcc_h40 = _source27.dtor_value;
        bool _1123___mcc_h41 = _source27.dtor_binary;
        return BigInteger.One;
      } else if (_source27.is_ConversionNum) {
        RAST._IType _1124___mcc_h44 = _source27.dtor_tpe;
        RAST._IExpr _1125___mcc_h45 = _source27.dtor_underlying;
        RAST._IExpr _1126_underlying = _1125___mcc_h45;
        return (BigInteger.One) + ((_1126_underlying).Height());
      } else if (_source27.is_DeclareVar) {
        RAST._IDeclareType _1127___mcc_h48 = _source27.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1128___mcc_h49 = _source27.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1129___mcc_h50 = _source27.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1130___mcc_h51 = _source27.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1131_expr = _1130___mcc_h51;
        Std.Wrappers._IOption<RAST._IType> _1132_tpe = _1129___mcc_h50;
        Dafny.ISequence<Dafny.Rune> _1133_name = _1128___mcc_h49;
        RAST._IDeclareType _1134_declareType = _1127___mcc_h48;
        return (BigInteger.One) + (((System.Func<Std.Wrappers._IOption<RAST._IExpr>, BigInteger>)((_source34) => {
          if (_source34.is_None) {
            return BigInteger.Zero;
          } else {
            RAST._IExpr _1135___mcc_h514 = _source34.dtor_value;
            RAST._IExpr _1136_e = _1135___mcc_h514;
            return (_1136_e).Height();
          }
        }))(_1131_expr));
      } else if (_source27.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1137___mcc_h56 = _source27.dtor_name;
        RAST._IExpr _1138___mcc_h57 = _source27.dtor_rhs;
        RAST._IExpr _1139_expr = _1138___mcc_h57;
        Dafny.ISequence<Dafny.Rune> _1140_name = _1137___mcc_h56;
        return (BigInteger.One) + ((_1139_expr).Height());
      } else if (_source27.is_IfExpr) {
        RAST._IExpr _1141___mcc_h60 = _source27.dtor_cond;
        RAST._IExpr _1142___mcc_h61 = _source27.dtor_thn;
        RAST._IExpr _1143___mcc_h62 = _source27.dtor_els;
        RAST._IExpr _1144_els = _1143___mcc_h62;
        RAST._IExpr _1145_thn = _1142___mcc_h61;
        RAST._IExpr _1146_cond = _1141___mcc_h60;
        return (BigInteger.One) + (RAST.__default.max((_1146_cond).Height(), RAST.__default.max((_1145_thn).Height(), (_1144_els).Height())));
      } else if (_source27.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1147___mcc_h66 = _source27.dtor_optCond;
        RAST._IExpr _1148___mcc_h67 = _source27.dtor_underlying;
        RAST._IExpr _1149_underlying = _1148___mcc_h67;
        Std.Wrappers._IOption<RAST._IExpr> _1150_optCond = _1147___mcc_h66;
        return (BigInteger.One) + ((((_1150_optCond).is_Some) ? (RAST.__default.max(((_1150_optCond).dtor_value).Height(), (_1149_underlying).Height())) : ((_1149_underlying).Height())));
      } else if (_source27.is_For) {
        Dafny.ISequence<Dafny.Rune> _1151___mcc_h70 = _source27.dtor_name;
        RAST._IExpr _1152___mcc_h71 = _source27.dtor_range;
        RAST._IExpr _1153___mcc_h72 = _source27.dtor_body;
        RAST._IExpr _1154_body = _1153___mcc_h72;
        RAST._IExpr _1155_range = _1152___mcc_h71;
        Dafny.ISequence<Dafny.Rune> _1156_name = _1151___mcc_h70;
        return (BigInteger.One) + (RAST.__default.max((_1155_range).Height(), (_1154_body).Height()));
      } else if (_source27.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1157___mcc_h76 = _source27.dtor_lbl;
        RAST._IExpr _1158___mcc_h77 = _source27.dtor_underlying;
        RAST._IExpr _1159_underlying = _1158___mcc_h77;
        Dafny.ISequence<Dafny.Rune> _1160_lbl = _1157___mcc_h76;
        return (BigInteger.One) + ((_1159_underlying).Height());
      } else if (_source27.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1161___mcc_h80 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1162___mcc_h82 = _source27.dtor_optLbl;
        return BigInteger.One;
      } else if (_source27.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1163___mcc_h84 = _source27.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _1164_optExpr = _1163___mcc_h84;
        if ((_1164_optExpr).is_Some) {
          return (BigInteger.One) + (((_1164_optExpr).dtor_value).Height());
        } else {
          return BigInteger.One;
        }
      } else if (_source27.is_CallType) {
        RAST._IExpr _1165___mcc_h86 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IType> _1166___mcc_h87 = _source27.dtor_typeParameters;
        Dafny.ISequence<RAST._IType> _1167_tpes = _1166___mcc_h87;
        RAST._IExpr _1168_obj = _1165___mcc_h86;
        return (BigInteger.One) + (RAST.__default.max((_1168_obj).Height(), RAST.__default.SeqToHeight<RAST._IType>(_1167_tpes, ((System.Func<RAST._IType, BigInteger>)((_1169_tpe) => {
          return BigInteger.One;
        })))));
      } else if (_source27.is_Call) {
        RAST._IExpr _1170___mcc_h90 = _source27.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _1171___mcc_h91 = _source27.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1172_args = _1171___mcc_h91;
        RAST._IExpr _1173_obj = _1170___mcc_h90;
        return (BigInteger.One) + (RAST.__default.max((_1173_obj).Height(), RAST.__default.SeqToHeight<RAST._IExpr>(_1172_args, ((System.Func<RAST._IExpr, BigInteger>)((_1174_arg) => {
          return (_1174_arg).Height();
        })))));
      } else if (_source27.is_Select) {
        RAST._IExpr _1175___mcc_h94 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1176___mcc_h95 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1177_name = _1176___mcc_h95;
        RAST._IExpr _1178_expression = _1175___mcc_h94;
        return (BigInteger.One) + ((_1178_expression).Height());
      } else {
        RAST._IExpr _1179___mcc_h98 = _source27.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1180___mcc_h99 = _source27.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1181_name = _1180___mcc_h99;
        RAST._IExpr _1182_expression = _1179___mcc_h98;
        return (BigInteger.One) + ((_1182_expression).Height());
      }
    }
    public RAST._IExpr Optimize() {
      RAST._IExpr _source35 = this;
      if (_source35.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1183___mcc_h0 = _source35.dtor_content;
        return this;
      } else if (_source35.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1184___mcc_h2 = _source35.dtor_name;
        return this;
      } else if (_source35.is_Match) {
        RAST._IExpr _1185___mcc_h4 = _source35.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1186___mcc_h5 = _source35.dtor_cases;
        return this;
      } else if (_source35.is_StmtExpr) {
        RAST._IExpr _1187___mcc_h8 = _source35.dtor_stmt;
        RAST._IExpr _1188___mcc_h9 = _source35.dtor_rhs;
        RAST._IExpr _source36 = _1187___mcc_h8;
        if (_source36.is_RawExpr) {
          Dafny.ISequence<Dafny.Rune> _1189___mcc_h12 = _source36.dtor_content;
          return this;
        } else if (_source36.is_Identifier) {
          Dafny.ISequence<Dafny.Rune> _1190___mcc_h14 = _source36.dtor_name;
          return this;
        } else if (_source36.is_Match) {
          RAST._IExpr _1191___mcc_h16 = _source36.dtor_matchee;
          Dafny.ISequence<RAST._IMatchCase> _1192___mcc_h17 = _source36.dtor_cases;
          return this;
        } else if (_source36.is_StmtExpr) {
          RAST._IExpr _1193___mcc_h20 = _source36.dtor_stmt;
          RAST._IExpr _1194___mcc_h21 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_Block) {
          RAST._IExpr _1195___mcc_h24 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_StructBuild) {
          RAST._IExpr _1196___mcc_h26 = _source36.dtor_underlying;
          Dafny.ISequence<RAST._IAssignIdentifier> _1197___mcc_h27 = _source36.dtor_assignments;
          return this;
        } else if (_source36.is_Tuple) {
          Dafny.ISequence<RAST._IExpr> _1198___mcc_h30 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_UnaryOp) {
          Dafny.ISequence<Dafny.Rune> _1199___mcc_h32 = _source36.dtor_op1;
          RAST._IExpr _1200___mcc_h33 = _source36.dtor_underlying;
          DAST.Format._IUnOpFormat _1201___mcc_h34 = _source36.dtor_format;
          return this;
        } else if (_source36.is_BinaryOp) {
          Dafny.ISequence<Dafny.Rune> _1202___mcc_h38 = _source36.dtor_op2;
          RAST._IExpr _1203___mcc_h39 = _source36.dtor_left;
          RAST._IExpr _1204___mcc_h40 = _source36.dtor_right;
          DAST.Format._IBinOpFormat _1205___mcc_h41 = _source36.dtor_format2;
          return this;
        } else if (_source36.is_TypeAscription) {
          RAST._IExpr _1206___mcc_h46 = _source36.dtor_left;
          RAST._IType _1207___mcc_h47 = _source36.dtor_tpe;
          return this;
        } else if (_source36.is_LiteralInt) {
          Dafny.ISequence<Dafny.Rune> _1208___mcc_h50 = _source36.dtor_value;
          return this;
        } else if (_source36.is_LiteralString) {
          Dafny.ISequence<Dafny.Rune> _1209___mcc_h52 = _source36.dtor_value;
          bool _1210___mcc_h53 = _source36.dtor_binary;
          return this;
        } else if (_source36.is_ConversionNum) {
          RAST._IType _1211___mcc_h56 = _source36.dtor_tpe;
          RAST._IExpr _1212___mcc_h57 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_DeclareVar) {
          RAST._IDeclareType _1213___mcc_h60 = _source36.dtor_declareType;
          Dafny.ISequence<Dafny.Rune> _1214___mcc_h61 = _source36.dtor_name;
          Std.Wrappers._IOption<RAST._IType> _1215___mcc_h62 = _source36.dtor_optType;
          Std.Wrappers._IOption<RAST._IExpr> _1216___mcc_h63 = _source36.dtor_optRhs;
          Std.Wrappers._IOption<RAST._IType> _source37 = _1215___mcc_h62;
          if (_source37.is_None) {
            return this;
          } else {
            RAST._IType _1217___mcc_h68 = _source37.dtor_value;
            Std.Wrappers._IOption<RAST._IExpr> _source38 = _1216___mcc_h63;
            if (_source38.is_None) {
              RAST._IExpr _source39 = _1188___mcc_h9;
              if (_source39.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1218___mcc_h70 = _source39.dtor_content;
                return this;
              } else if (_source39.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1219___mcc_h72 = _source39.dtor_name;
                return this;
              } else if (_source39.is_Match) {
                RAST._IExpr _1220___mcc_h74 = _source39.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1221___mcc_h75 = _source39.dtor_cases;
                return this;
              } else if (_source39.is_StmtExpr) {
                RAST._IExpr _1222___mcc_h78 = _source39.dtor_stmt;
                RAST._IExpr _1223___mcc_h79 = _source39.dtor_rhs;
                RAST._IExpr _source40 = _1222___mcc_h78;
                if (_source40.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1224___mcc_h82 = _source40.dtor_content;
                  return this;
                } else if (_source40.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1225___mcc_h84 = _source40.dtor_name;
                  return this;
                } else if (_source40.is_Match) {
                  RAST._IExpr _1226___mcc_h86 = _source40.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1227___mcc_h87 = _source40.dtor_cases;
                  return this;
                } else if (_source40.is_StmtExpr) {
                  RAST._IExpr _1228___mcc_h90 = _source40.dtor_stmt;
                  RAST._IExpr _1229___mcc_h91 = _source40.dtor_rhs;
                  return this;
                } else if (_source40.is_Block) {
                  RAST._IExpr _1230___mcc_h94 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_StructBuild) {
                  RAST._IExpr _1231___mcc_h96 = _source40.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1232___mcc_h97 = _source40.dtor_assignments;
                  return this;
                } else if (_source40.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1233___mcc_h100 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1234___mcc_h102 = _source40.dtor_op1;
                  RAST._IExpr _1235___mcc_h103 = _source40.dtor_underlying;
                  DAST.Format._IUnOpFormat _1236___mcc_h104 = _source40.dtor_format;
                  return this;
                } else if (_source40.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1237___mcc_h108 = _source40.dtor_op2;
                  RAST._IExpr _1238___mcc_h109 = _source40.dtor_left;
                  RAST._IExpr _1239___mcc_h110 = _source40.dtor_right;
                  DAST.Format._IBinOpFormat _1240___mcc_h111 = _source40.dtor_format2;
                  return this;
                } else if (_source40.is_TypeAscription) {
                  RAST._IExpr _1241___mcc_h116 = _source40.dtor_left;
                  RAST._IType _1242___mcc_h117 = _source40.dtor_tpe;
                  return this;
                } else if (_source40.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1243___mcc_h120 = _source40.dtor_value;
                  return this;
                } else if (_source40.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1244___mcc_h122 = _source40.dtor_value;
                  bool _1245___mcc_h123 = _source40.dtor_binary;
                  return this;
                } else if (_source40.is_ConversionNum) {
                  RAST._IType _1246___mcc_h126 = _source40.dtor_tpe;
                  RAST._IExpr _1247___mcc_h127 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_DeclareVar) {
                  RAST._IDeclareType _1248___mcc_h130 = _source40.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1249___mcc_h131 = _source40.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1250___mcc_h132 = _source40.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1251___mcc_h133 = _source40.dtor_optRhs;
                  return this;
                } else if (_source40.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1252___mcc_h138 = _source40.dtor_name;
                  RAST._IExpr _1253___mcc_h139 = _source40.dtor_rhs;
                  RAST._IExpr _1254_last = _1223___mcc_h79;
                  RAST._IExpr _1255_rhs = _1253___mcc_h139;
                  Dafny.ISequence<Dafny.Rune> _1256_name2 = _1252___mcc_h138;
                  RAST._IType _1257_tpe = _1217___mcc_h68;
                  Dafny.ISequence<Dafny.Rune> _1258_name = _1214___mcc_h61;
                  RAST._IDeclareType _1259_mod = _1213___mcc_h60;
                  if ((_1258_name).Equals(_1256_name2)) {
                    RAST._IExpr _1260_rewriting = RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(_1259_mod, _1258_name, Std.Wrappers.Option<RAST._IType>.create_Some(_1257_tpe), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1255_rhs)), _1254_last);
                    return _1260_rewriting;
                  } else {
                    return this;
                  }
                } else if (_source40.is_IfExpr) {
                  RAST._IExpr _1261___mcc_h142 = _source40.dtor_cond;
                  RAST._IExpr _1262___mcc_h143 = _source40.dtor_thn;
                  RAST._IExpr _1263___mcc_h144 = _source40.dtor_els;
                  return this;
                } else if (_source40.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1264___mcc_h148 = _source40.dtor_optCond;
                  RAST._IExpr _1265___mcc_h149 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1266___mcc_h152 = _source40.dtor_name;
                  RAST._IExpr _1267___mcc_h153 = _source40.dtor_range;
                  RAST._IExpr _1268___mcc_h154 = _source40.dtor_body;
                  return this;
                } else if (_source40.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1269___mcc_h158 = _source40.dtor_lbl;
                  RAST._IExpr _1270___mcc_h159 = _source40.dtor_underlying;
                  return this;
                } else if (_source40.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1271___mcc_h162 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1272___mcc_h164 = _source40.dtor_optLbl;
                  return this;
                } else if (_source40.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1273___mcc_h166 = _source40.dtor_optExpr;
                  return this;
                } else if (_source40.is_CallType) {
                  RAST._IExpr _1274___mcc_h168 = _source40.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1275___mcc_h169 = _source40.dtor_typeParameters;
                  return this;
                } else if (_source40.is_Call) {
                  RAST._IExpr _1276___mcc_h172 = _source40.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1277___mcc_h173 = _source40.dtor_arguments;
                  return this;
                } else if (_source40.is_Select) {
                  RAST._IExpr _1278___mcc_h176 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1279___mcc_h177 = _source40.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1280___mcc_h180 = _source40.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1281___mcc_h181 = _source40.dtor_name;
                  return this;
                }
              } else if (_source39.is_Block) {
                RAST._IExpr _1282___mcc_h184 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_StructBuild) {
                RAST._IExpr _1283___mcc_h186 = _source39.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _1284___mcc_h187 = _source39.dtor_assignments;
                return this;
              } else if (_source39.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1285___mcc_h190 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1286___mcc_h192 = _source39.dtor_op1;
                RAST._IExpr _1287___mcc_h193 = _source39.dtor_underlying;
                DAST.Format._IUnOpFormat _1288___mcc_h194 = _source39.dtor_format;
                return this;
              } else if (_source39.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1289___mcc_h198 = _source39.dtor_op2;
                RAST._IExpr _1290___mcc_h199 = _source39.dtor_left;
                RAST._IExpr _1291___mcc_h200 = _source39.dtor_right;
                DAST.Format._IBinOpFormat _1292___mcc_h201 = _source39.dtor_format2;
                return this;
              } else if (_source39.is_TypeAscription) {
                RAST._IExpr _1293___mcc_h206 = _source39.dtor_left;
                RAST._IType _1294___mcc_h207 = _source39.dtor_tpe;
                return this;
              } else if (_source39.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1295___mcc_h210 = _source39.dtor_value;
                return this;
              } else if (_source39.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1296___mcc_h212 = _source39.dtor_value;
                bool _1297___mcc_h213 = _source39.dtor_binary;
                return this;
              } else if (_source39.is_ConversionNum) {
                RAST._IType _1298___mcc_h216 = _source39.dtor_tpe;
                RAST._IExpr _1299___mcc_h217 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_DeclareVar) {
                RAST._IDeclareType _1300___mcc_h220 = _source39.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1301___mcc_h221 = _source39.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1302___mcc_h222 = _source39.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1303___mcc_h223 = _source39.dtor_optRhs;
                return this;
              } else if (_source39.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1304___mcc_h228 = _source39.dtor_name;
                RAST._IExpr _1305___mcc_h229 = _source39.dtor_rhs;
                return this;
              } else if (_source39.is_IfExpr) {
                RAST._IExpr _1306___mcc_h232 = _source39.dtor_cond;
                RAST._IExpr _1307___mcc_h233 = _source39.dtor_thn;
                RAST._IExpr _1308___mcc_h234 = _source39.dtor_els;
                return this;
              } else if (_source39.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1309___mcc_h238 = _source39.dtor_optCond;
                RAST._IExpr _1310___mcc_h239 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_For) {
                Dafny.ISequence<Dafny.Rune> _1311___mcc_h242 = _source39.dtor_name;
                RAST._IExpr _1312___mcc_h243 = _source39.dtor_range;
                RAST._IExpr _1313___mcc_h244 = _source39.dtor_body;
                return this;
              } else if (_source39.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1314___mcc_h248 = _source39.dtor_lbl;
                RAST._IExpr _1315___mcc_h249 = _source39.dtor_underlying;
                return this;
              } else if (_source39.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1316___mcc_h252 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1317___mcc_h254 = _source39.dtor_optLbl;
                return this;
              } else if (_source39.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1318___mcc_h256 = _source39.dtor_optExpr;
                return this;
              } else if (_source39.is_CallType) {
                RAST._IExpr _1319___mcc_h258 = _source39.dtor_obj;
                Dafny.ISequence<RAST._IType> _1320___mcc_h259 = _source39.dtor_typeParameters;
                return this;
              } else if (_source39.is_Call) {
                RAST._IExpr _1321___mcc_h262 = _source39.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _1322___mcc_h263 = _source39.dtor_arguments;
                return this;
              } else if (_source39.is_Select) {
                RAST._IExpr _1323___mcc_h266 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1324___mcc_h267 = _source39.dtor_name;
                return this;
              } else {
                RAST._IExpr _1325___mcc_h270 = _source39.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1326___mcc_h271 = _source39.dtor_name;
                return this;
              }
            } else {
              RAST._IExpr _1327___mcc_h274 = _source38.dtor_value;
              return this;
            }
          }
        } else if (_source36.is_AssignVar) {
          Dafny.ISequence<Dafny.Rune> _1328___mcc_h276 = _source36.dtor_name;
          RAST._IExpr _1329___mcc_h277 = _source36.dtor_rhs;
          return this;
        } else if (_source36.is_IfExpr) {
          RAST._IExpr _1330___mcc_h280 = _source36.dtor_cond;
          RAST._IExpr _1331___mcc_h281 = _source36.dtor_thn;
          RAST._IExpr _1332___mcc_h282 = _source36.dtor_els;
          return this;
        } else if (_source36.is_Loop) {
          Std.Wrappers._IOption<RAST._IExpr> _1333___mcc_h286 = _source36.dtor_optCond;
          RAST._IExpr _1334___mcc_h287 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_For) {
          Dafny.ISequence<Dafny.Rune> _1335___mcc_h290 = _source36.dtor_name;
          RAST._IExpr _1336___mcc_h291 = _source36.dtor_range;
          RAST._IExpr _1337___mcc_h292 = _source36.dtor_body;
          return this;
        } else if (_source36.is_Labelled) {
          Dafny.ISequence<Dafny.Rune> _1338___mcc_h296 = _source36.dtor_lbl;
          RAST._IExpr _1339___mcc_h297 = _source36.dtor_underlying;
          return this;
        } else if (_source36.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1340___mcc_h300 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Continue) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1341___mcc_h302 = _source36.dtor_optLbl;
          return this;
        } else if (_source36.is_Return) {
          Std.Wrappers._IOption<RAST._IExpr> _1342___mcc_h304 = _source36.dtor_optExpr;
          return this;
        } else if (_source36.is_CallType) {
          RAST._IExpr _1343___mcc_h306 = _source36.dtor_obj;
          Dafny.ISequence<RAST._IType> _1344___mcc_h307 = _source36.dtor_typeParameters;
          return this;
        } else if (_source36.is_Call) {
          RAST._IExpr _1345___mcc_h310 = _source36.dtor_obj;
          Dafny.ISequence<RAST._IExpr> _1346___mcc_h311 = _source36.dtor_arguments;
          return this;
        } else if (_source36.is_Select) {
          RAST._IExpr _1347___mcc_h314 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1348___mcc_h315 = _source36.dtor_name;
          return this;
        } else {
          RAST._IExpr _1349___mcc_h318 = _source36.dtor_obj;
          Dafny.ISequence<Dafny.Rune> _1350___mcc_h319 = _source36.dtor_name;
          return this;
        }
      } else if (_source35.is_Block) {
        RAST._IExpr _1351___mcc_h322 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_StructBuild) {
        RAST._IExpr _1352___mcc_h324 = _source35.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1353___mcc_h325 = _source35.dtor_assignments;
        return this;
      } else if (_source35.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1354___mcc_h328 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1355___mcc_h330 = _source35.dtor_op1;
        RAST._IExpr _1356___mcc_h331 = _source35.dtor_underlying;
        DAST.Format._IUnOpFormat _1357___mcc_h332 = _source35.dtor_format;
        if (object.Equals(_1355___mcc_h330, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          RAST._IExpr _source41 = _1356___mcc_h331;
          if (_source41.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1358___mcc_h336 = _source41.dtor_content;
            return this;
          } else if (_source41.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1359___mcc_h338 = _source41.dtor_name;
            return this;
          } else if (_source41.is_Match) {
            RAST._IExpr _1360___mcc_h340 = _source41.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1361___mcc_h341 = _source41.dtor_cases;
            return this;
          } else if (_source41.is_StmtExpr) {
            RAST._IExpr _1362___mcc_h344 = _source41.dtor_stmt;
            RAST._IExpr _1363___mcc_h345 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_Block) {
            RAST._IExpr _1364___mcc_h348 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_StructBuild) {
            RAST._IExpr _1365___mcc_h350 = _source41.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1366___mcc_h351 = _source41.dtor_assignments;
            return this;
          } else if (_source41.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1367___mcc_h354 = _source41.dtor_arguments;
            return this;
          } else if (_source41.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1368___mcc_h356 = _source41.dtor_op1;
            RAST._IExpr _1369___mcc_h357 = _source41.dtor_underlying;
            DAST.Format._IUnOpFormat _1370___mcc_h358 = _source41.dtor_format;
            return this;
          } else if (_source41.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1371___mcc_h362 = _source41.dtor_op2;
            RAST._IExpr _1372___mcc_h363 = _source41.dtor_left;
            RAST._IExpr _1373___mcc_h364 = _source41.dtor_right;
            DAST.Format._IBinOpFormat _1374___mcc_h365 = _source41.dtor_format2;
            return this;
          } else if (_source41.is_TypeAscription) {
            RAST._IExpr _1375___mcc_h370 = _source41.dtor_left;
            RAST._IType _1376___mcc_h371 = _source41.dtor_tpe;
            return this;
          } else if (_source41.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1377___mcc_h374 = _source41.dtor_value;
            return this;
          } else if (_source41.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1378___mcc_h376 = _source41.dtor_value;
            bool _1379___mcc_h377 = _source41.dtor_binary;
            return this;
          } else if (_source41.is_ConversionNum) {
            RAST._IType _1380___mcc_h380 = _source41.dtor_tpe;
            RAST._IExpr _1381___mcc_h381 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_DeclareVar) {
            RAST._IDeclareType _1382___mcc_h384 = _source41.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1383___mcc_h385 = _source41.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1384___mcc_h386 = _source41.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1385___mcc_h387 = _source41.dtor_optRhs;
            return this;
          } else if (_source41.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1386___mcc_h392 = _source41.dtor_name;
            RAST._IExpr _1387___mcc_h393 = _source41.dtor_rhs;
            return this;
          } else if (_source41.is_IfExpr) {
            RAST._IExpr _1388___mcc_h396 = _source41.dtor_cond;
            RAST._IExpr _1389___mcc_h397 = _source41.dtor_thn;
            RAST._IExpr _1390___mcc_h398 = _source41.dtor_els;
            return this;
          } else if (_source41.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1391___mcc_h402 = _source41.dtor_optCond;
            RAST._IExpr _1392___mcc_h403 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_For) {
            Dafny.ISequence<Dafny.Rune> _1393___mcc_h406 = _source41.dtor_name;
            RAST._IExpr _1394___mcc_h407 = _source41.dtor_range;
            RAST._IExpr _1395___mcc_h408 = _source41.dtor_body;
            return this;
          } else if (_source41.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1396___mcc_h412 = _source41.dtor_lbl;
            RAST._IExpr _1397___mcc_h413 = _source41.dtor_underlying;
            return this;
          } else if (_source41.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1398___mcc_h416 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1399___mcc_h418 = _source41.dtor_optLbl;
            return this;
          } else if (_source41.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1400___mcc_h420 = _source41.dtor_optExpr;
            return this;
          } else if (_source41.is_CallType) {
            RAST._IExpr _1401___mcc_h422 = _source41.dtor_obj;
            Dafny.ISequence<RAST._IType> _1402___mcc_h423 = _source41.dtor_typeParameters;
            return this;
          } else if (_source41.is_Call) {
            RAST._IExpr _1403___mcc_h426 = _source41.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1404___mcc_h427 = _source41.dtor_arguments;
            RAST._IExpr _source42 = _1403___mcc_h426;
            if (_source42.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1405___mcc_h430 = _source42.dtor_content;
              return this;
            } else if (_source42.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1406___mcc_h432 = _source42.dtor_name;
              return this;
            } else if (_source42.is_Match) {
              RAST._IExpr _1407___mcc_h434 = _source42.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1408___mcc_h435 = _source42.dtor_cases;
              return this;
            } else if (_source42.is_StmtExpr) {
              RAST._IExpr _1409___mcc_h438 = _source42.dtor_stmt;
              RAST._IExpr _1410___mcc_h439 = _source42.dtor_rhs;
              return this;
            } else if (_source42.is_Block) {
              RAST._IExpr _1411___mcc_h442 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_StructBuild) {
              RAST._IExpr _1412___mcc_h444 = _source42.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _1413___mcc_h445 = _source42.dtor_assignments;
              return this;
            } else if (_source42.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1414___mcc_h448 = _source42.dtor_arguments;
              return this;
            } else if (_source42.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1415___mcc_h450 = _source42.dtor_op1;
              RAST._IExpr _1416___mcc_h451 = _source42.dtor_underlying;
              DAST.Format._IUnOpFormat _1417___mcc_h452 = _source42.dtor_format;
              return this;
            } else if (_source42.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1418___mcc_h456 = _source42.dtor_op2;
              RAST._IExpr _1419___mcc_h457 = _source42.dtor_left;
              RAST._IExpr _1420___mcc_h458 = _source42.dtor_right;
              DAST.Format._IBinOpFormat _1421___mcc_h459 = _source42.dtor_format2;
              return this;
            } else if (_source42.is_TypeAscription) {
              RAST._IExpr _1422___mcc_h464 = _source42.dtor_left;
              RAST._IType _1423___mcc_h465 = _source42.dtor_tpe;
              return this;
            } else if (_source42.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1424___mcc_h468 = _source42.dtor_value;
              return this;
            } else if (_source42.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1425___mcc_h470 = _source42.dtor_value;
              bool _1426___mcc_h471 = _source42.dtor_binary;
              return this;
            } else if (_source42.is_ConversionNum) {
              RAST._IType _1427___mcc_h474 = _source42.dtor_tpe;
              RAST._IExpr _1428___mcc_h475 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_DeclareVar) {
              RAST._IDeclareType _1429___mcc_h478 = _source42.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1430___mcc_h479 = _source42.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1431___mcc_h480 = _source42.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1432___mcc_h481 = _source42.dtor_optRhs;
              return this;
            } else if (_source42.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1433___mcc_h486 = _source42.dtor_name;
              RAST._IExpr _1434___mcc_h487 = _source42.dtor_rhs;
              return this;
            } else if (_source42.is_IfExpr) {
              RAST._IExpr _1435___mcc_h490 = _source42.dtor_cond;
              RAST._IExpr _1436___mcc_h491 = _source42.dtor_thn;
              RAST._IExpr _1437___mcc_h492 = _source42.dtor_els;
              return this;
            } else if (_source42.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1438___mcc_h496 = _source42.dtor_optCond;
              RAST._IExpr _1439___mcc_h497 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_For) {
              Dafny.ISequence<Dafny.Rune> _1440___mcc_h500 = _source42.dtor_name;
              RAST._IExpr _1441___mcc_h501 = _source42.dtor_range;
              RAST._IExpr _1442___mcc_h502 = _source42.dtor_body;
              return this;
            } else if (_source42.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1443___mcc_h506 = _source42.dtor_lbl;
              RAST._IExpr _1444___mcc_h507 = _source42.dtor_underlying;
              return this;
            } else if (_source42.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1445___mcc_h510 = _source42.dtor_optLbl;
              return this;
            } else if (_source42.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1446___mcc_h512 = _source42.dtor_optLbl;
              return this;
            } else if (_source42.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1447___mcc_h514 = _source42.dtor_optExpr;
              return this;
            } else if (_source42.is_CallType) {
              RAST._IExpr _1448___mcc_h516 = _source42.dtor_obj;
              Dafny.ISequence<RAST._IType> _1449___mcc_h517 = _source42.dtor_typeParameters;
              return this;
            } else if (_source42.is_Call) {
              RAST._IExpr _1450___mcc_h520 = _source42.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _1451___mcc_h521 = _source42.dtor_arguments;
              return this;
            } else if (_source42.is_Select) {
              RAST._IExpr _1452___mcc_h524 = _source42.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1453___mcc_h525 = _source42.dtor_name;
              if (object.Equals(_1453___mcc_h525, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("clone"))) {
                DAST.Format._IUnOpFormat _1454_format = _1357___mcc_h332;
                Dafny.ISequence<RAST._IExpr> _1455_args = _1404___mcc_h427;
                RAST._IExpr _1456_underlying = _1452___mcc_h524;
                if ((_1455_args).Equals(Dafny.Sequence<RAST._IExpr>.FromElements())) {
                  return RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1456_underlying, _1454_format);
                } else {
                  return this;
                }
              } else {
                return this;
              }
            } else {
              RAST._IExpr _1457___mcc_h528 = _source42.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1458___mcc_h529 = _source42.dtor_name;
              return this;
            }
          } else if (_source41.is_Select) {
            RAST._IExpr _1459___mcc_h532 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1460___mcc_h533 = _source41.dtor_name;
            return this;
          } else {
            RAST._IExpr _1461___mcc_h536 = _source41.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1462___mcc_h537 = _source41.dtor_name;
            return this;
          }
        } else if (object.Equals(_1355___mcc_h330, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          RAST._IExpr _source43 = _1356___mcc_h331;
          if (_source43.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1463___mcc_h540 = _source43.dtor_content;
            return this;
          } else if (_source43.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1464___mcc_h542 = _source43.dtor_name;
            return this;
          } else if (_source43.is_Match) {
            RAST._IExpr _1465___mcc_h544 = _source43.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1466___mcc_h545 = _source43.dtor_cases;
            return this;
          } else if (_source43.is_StmtExpr) {
            RAST._IExpr _1467___mcc_h548 = _source43.dtor_stmt;
            RAST._IExpr _1468___mcc_h549 = _source43.dtor_rhs;
            return this;
          } else if (_source43.is_Block) {
            RAST._IExpr _1469___mcc_h552 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_StructBuild) {
            RAST._IExpr _1470___mcc_h554 = _source43.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1471___mcc_h555 = _source43.dtor_assignments;
            return this;
          } else if (_source43.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1472___mcc_h558 = _source43.dtor_arguments;
            return this;
          } else if (_source43.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1473___mcc_h560 = _source43.dtor_op1;
            RAST._IExpr _1474___mcc_h561 = _source43.dtor_underlying;
            DAST.Format._IUnOpFormat _1475___mcc_h562 = _source43.dtor_format;
            return this;
          } else if (_source43.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1476___mcc_h566 = _source43.dtor_op2;
            RAST._IExpr _1477___mcc_h567 = _source43.dtor_left;
            RAST._IExpr _1478___mcc_h568 = _source43.dtor_right;
            DAST.Format._IBinOpFormat _1479___mcc_h569 = _source43.dtor_format2;
            if (object.Equals(_1476___mcc_h566, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
              DAST.Format._IUnOpFormat _source44 = _1357___mcc_h332;
              if (_source44.is_NoFormat) {
                return this;
              } else {
                DAST.Format._IBinOpFormat _1480_format = _1479___mcc_h569;
                RAST._IExpr _1481_right = _1478___mcc_h568;
                RAST._IExpr _1482_left = _1477___mcc_h567;
                return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="), _1482_left, _1481_right, DAST.Format.BinOpFormat.create_NoFormat());
              }
            } else if (object.Equals(_1476___mcc_h566, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
              DAST.Format._IBinOpFormat _source45 = _1479___mcc_h569;
              if (_source45.is_NoFormat) {
                DAST.Format._IUnOpFormat _source46 = _1357___mcc_h332;
                if (_source46.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1483_right = _1478___mcc_h568;
                  RAST._IExpr _1484_left = _1477___mcc_h567;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="), _1484_left, _1483_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              } else if (_source45.is_ImpliesFormat) {
                return this;
              } else if (_source45.is_Equivalence) {
                return this;
              } else {
                DAST.Format._IUnOpFormat _source47 = _1357___mcc_h332;
                if (_source47.is_NoFormat) {
                  return this;
                } else {
                  RAST._IExpr _1485_right = _1478___mcc_h568;
                  RAST._IExpr _1486_left = _1477___mcc_h567;
                  return RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _1485_right, _1486_left, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else {
              return this;
            }
          } else if (_source43.is_TypeAscription) {
            RAST._IExpr _1487___mcc_h574 = _source43.dtor_left;
            RAST._IType _1488___mcc_h575 = _source43.dtor_tpe;
            return this;
          } else if (_source43.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1489___mcc_h578 = _source43.dtor_value;
            return this;
          } else if (_source43.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1490___mcc_h580 = _source43.dtor_value;
            bool _1491___mcc_h581 = _source43.dtor_binary;
            return this;
          } else if (_source43.is_ConversionNum) {
            RAST._IType _1492___mcc_h584 = _source43.dtor_tpe;
            RAST._IExpr _1493___mcc_h585 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_DeclareVar) {
            RAST._IDeclareType _1494___mcc_h588 = _source43.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1495___mcc_h589 = _source43.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1496___mcc_h590 = _source43.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1497___mcc_h591 = _source43.dtor_optRhs;
            return this;
          } else if (_source43.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1498___mcc_h596 = _source43.dtor_name;
            RAST._IExpr _1499___mcc_h597 = _source43.dtor_rhs;
            return this;
          } else if (_source43.is_IfExpr) {
            RAST._IExpr _1500___mcc_h600 = _source43.dtor_cond;
            RAST._IExpr _1501___mcc_h601 = _source43.dtor_thn;
            RAST._IExpr _1502___mcc_h602 = _source43.dtor_els;
            return this;
          } else if (_source43.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1503___mcc_h606 = _source43.dtor_optCond;
            RAST._IExpr _1504___mcc_h607 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_For) {
            Dafny.ISequence<Dafny.Rune> _1505___mcc_h610 = _source43.dtor_name;
            RAST._IExpr _1506___mcc_h611 = _source43.dtor_range;
            RAST._IExpr _1507___mcc_h612 = _source43.dtor_body;
            return this;
          } else if (_source43.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1508___mcc_h616 = _source43.dtor_lbl;
            RAST._IExpr _1509___mcc_h617 = _source43.dtor_underlying;
            return this;
          } else if (_source43.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1510___mcc_h620 = _source43.dtor_optLbl;
            return this;
          } else if (_source43.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1511___mcc_h622 = _source43.dtor_optLbl;
            return this;
          } else if (_source43.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1512___mcc_h624 = _source43.dtor_optExpr;
            return this;
          } else if (_source43.is_CallType) {
            RAST._IExpr _1513___mcc_h626 = _source43.dtor_obj;
            Dafny.ISequence<RAST._IType> _1514___mcc_h627 = _source43.dtor_typeParameters;
            return this;
          } else if (_source43.is_Call) {
            RAST._IExpr _1515___mcc_h630 = _source43.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1516___mcc_h631 = _source43.dtor_arguments;
            return this;
          } else if (_source43.is_Select) {
            RAST._IExpr _1517___mcc_h634 = _source43.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1518___mcc_h635 = _source43.dtor_name;
            return this;
          } else {
            RAST._IExpr _1519___mcc_h638 = _source43.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1520___mcc_h639 = _source43.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1521___mcc_h642 = _source35.dtor_op2;
        RAST._IExpr _1522___mcc_h643 = _source35.dtor_left;
        RAST._IExpr _1523___mcc_h644 = _source35.dtor_right;
        DAST.Format._IBinOpFormat _1524___mcc_h645 = _source35.dtor_format2;
        return this;
      } else if (_source35.is_TypeAscription) {
        RAST._IExpr _1525___mcc_h650 = _source35.dtor_left;
        RAST._IType _1526___mcc_h651 = _source35.dtor_tpe;
        return this;
      } else if (_source35.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1527___mcc_h654 = _source35.dtor_value;
        return this;
      } else if (_source35.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1528___mcc_h656 = _source35.dtor_value;
        bool _1529___mcc_h657 = _source35.dtor_binary;
        return this;
      } else if (_source35.is_ConversionNum) {
        RAST._IType _1530___mcc_h660 = _source35.dtor_tpe;
        RAST._IExpr _1531___mcc_h661 = _source35.dtor_underlying;
        RAST._IExpr _1532_expr = _1531___mcc_h661;
        RAST._IType _1533_tpe = _1530___mcc_h660;
        if (((((((((((_1533_tpe).is_U8) || ((_1533_tpe).is_U16)) || ((_1533_tpe).is_U32)) || ((_1533_tpe).is_U64)) || ((_1533_tpe).is_U128)) || ((_1533_tpe).is_I8)) || ((_1533_tpe).is_I16)) || ((_1533_tpe).is_I32)) || ((_1533_tpe).is_I64)) || ((_1533_tpe).is_I128)) {
          RAST._IExpr _source48 = _1532_expr;
          if (_source48.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1534___mcc_h718 = _source48.dtor_content;
            return this;
          } else if (_source48.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1535___mcc_h720 = _source48.dtor_name;
            return this;
          } else if (_source48.is_Match) {
            RAST._IExpr _1536___mcc_h722 = _source48.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _1537___mcc_h723 = _source48.dtor_cases;
            return this;
          } else if (_source48.is_StmtExpr) {
            RAST._IExpr _1538___mcc_h726 = _source48.dtor_stmt;
            RAST._IExpr _1539___mcc_h727 = _source48.dtor_rhs;
            return this;
          } else if (_source48.is_Block) {
            RAST._IExpr _1540___mcc_h730 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_StructBuild) {
            RAST._IExpr _1541___mcc_h732 = _source48.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _1542___mcc_h733 = _source48.dtor_assignments;
            return this;
          } else if (_source48.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _1543___mcc_h736 = _source48.dtor_arguments;
            return this;
          } else if (_source48.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _1544___mcc_h738 = _source48.dtor_op1;
            RAST._IExpr _1545___mcc_h739 = _source48.dtor_underlying;
            DAST.Format._IUnOpFormat _1546___mcc_h740 = _source48.dtor_format;
            return this;
          } else if (_source48.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _1547___mcc_h744 = _source48.dtor_op2;
            RAST._IExpr _1548___mcc_h745 = _source48.dtor_left;
            RAST._IExpr _1549___mcc_h746 = _source48.dtor_right;
            DAST.Format._IBinOpFormat _1550___mcc_h747 = _source48.dtor_format2;
            return this;
          } else if (_source48.is_TypeAscription) {
            RAST._IExpr _1551___mcc_h752 = _source48.dtor_left;
            RAST._IType _1552___mcc_h753 = _source48.dtor_tpe;
            return this;
          } else if (_source48.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _1553___mcc_h756 = _source48.dtor_value;
            return this;
          } else if (_source48.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _1554___mcc_h758 = _source48.dtor_value;
            bool _1555___mcc_h759 = _source48.dtor_binary;
            return this;
          } else if (_source48.is_ConversionNum) {
            RAST._IType _1556___mcc_h762 = _source48.dtor_tpe;
            RAST._IExpr _1557___mcc_h763 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_DeclareVar) {
            RAST._IDeclareType _1558___mcc_h766 = _source48.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _1559___mcc_h767 = _source48.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _1560___mcc_h768 = _source48.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _1561___mcc_h769 = _source48.dtor_optRhs;
            return this;
          } else if (_source48.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _1562___mcc_h774 = _source48.dtor_name;
            RAST._IExpr _1563___mcc_h775 = _source48.dtor_rhs;
            return this;
          } else if (_source48.is_IfExpr) {
            RAST._IExpr _1564___mcc_h778 = _source48.dtor_cond;
            RAST._IExpr _1565___mcc_h779 = _source48.dtor_thn;
            RAST._IExpr _1566___mcc_h780 = _source48.dtor_els;
            return this;
          } else if (_source48.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _1567___mcc_h784 = _source48.dtor_optCond;
            RAST._IExpr _1568___mcc_h785 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_For) {
            Dafny.ISequence<Dafny.Rune> _1569___mcc_h788 = _source48.dtor_name;
            RAST._IExpr _1570___mcc_h789 = _source48.dtor_range;
            RAST._IExpr _1571___mcc_h790 = _source48.dtor_body;
            return this;
          } else if (_source48.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _1572___mcc_h794 = _source48.dtor_lbl;
            RAST._IExpr _1573___mcc_h795 = _source48.dtor_underlying;
            return this;
          } else if (_source48.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1574___mcc_h798 = _source48.dtor_optLbl;
            return this;
          } else if (_source48.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1575___mcc_h800 = _source48.dtor_optLbl;
            return this;
          } else if (_source48.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _1576___mcc_h802 = _source48.dtor_optExpr;
            return this;
          } else if (_source48.is_CallType) {
            RAST._IExpr _1577___mcc_h804 = _source48.dtor_obj;
            Dafny.ISequence<RAST._IType> _1578___mcc_h805 = _source48.dtor_typeParameters;
            return this;
          } else if (_source48.is_Call) {
            RAST._IExpr _1579___mcc_h808 = _source48.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _1580___mcc_h809 = _source48.dtor_arguments;
            RAST._IExpr _source49 = _1579___mcc_h808;
            if (_source49.is_RawExpr) {
              Dafny.ISequence<Dafny.Rune> _1581___mcc_h812 = _source49.dtor_content;
              return this;
            } else if (_source49.is_Identifier) {
              Dafny.ISequence<Dafny.Rune> _1582___mcc_h814 = _source49.dtor_name;
              return this;
            } else if (_source49.is_Match) {
              RAST._IExpr _1583___mcc_h816 = _source49.dtor_matchee;
              Dafny.ISequence<RAST._IMatchCase> _1584___mcc_h817 = _source49.dtor_cases;
              return this;
            } else if (_source49.is_StmtExpr) {
              RAST._IExpr _1585___mcc_h820 = _source49.dtor_stmt;
              RAST._IExpr _1586___mcc_h821 = _source49.dtor_rhs;
              return this;
            } else if (_source49.is_Block) {
              RAST._IExpr _1587___mcc_h824 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_StructBuild) {
              RAST._IExpr _1588___mcc_h826 = _source49.dtor_underlying;
              Dafny.ISequence<RAST._IAssignIdentifier> _1589___mcc_h827 = _source49.dtor_assignments;
              return this;
            } else if (_source49.is_Tuple) {
              Dafny.ISequence<RAST._IExpr> _1590___mcc_h830 = _source49.dtor_arguments;
              return this;
            } else if (_source49.is_UnaryOp) {
              Dafny.ISequence<Dafny.Rune> _1591___mcc_h832 = _source49.dtor_op1;
              RAST._IExpr _1592___mcc_h833 = _source49.dtor_underlying;
              DAST.Format._IUnOpFormat _1593___mcc_h834 = _source49.dtor_format;
              return this;
            } else if (_source49.is_BinaryOp) {
              Dafny.ISequence<Dafny.Rune> _1594___mcc_h838 = _source49.dtor_op2;
              RAST._IExpr _1595___mcc_h839 = _source49.dtor_left;
              RAST._IExpr _1596___mcc_h840 = _source49.dtor_right;
              DAST.Format._IBinOpFormat _1597___mcc_h841 = _source49.dtor_format2;
              return this;
            } else if (_source49.is_TypeAscription) {
              RAST._IExpr _1598___mcc_h846 = _source49.dtor_left;
              RAST._IType _1599___mcc_h847 = _source49.dtor_tpe;
              return this;
            } else if (_source49.is_LiteralInt) {
              Dafny.ISequence<Dafny.Rune> _1600___mcc_h850 = _source49.dtor_value;
              return this;
            } else if (_source49.is_LiteralString) {
              Dafny.ISequence<Dafny.Rune> _1601___mcc_h852 = _source49.dtor_value;
              bool _1602___mcc_h853 = _source49.dtor_binary;
              return this;
            } else if (_source49.is_ConversionNum) {
              RAST._IType _1603___mcc_h856 = _source49.dtor_tpe;
              RAST._IExpr _1604___mcc_h857 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_DeclareVar) {
              RAST._IDeclareType _1605___mcc_h860 = _source49.dtor_declareType;
              Dafny.ISequence<Dafny.Rune> _1606___mcc_h861 = _source49.dtor_name;
              Std.Wrappers._IOption<RAST._IType> _1607___mcc_h862 = _source49.dtor_optType;
              Std.Wrappers._IOption<RAST._IExpr> _1608___mcc_h863 = _source49.dtor_optRhs;
              return this;
            } else if (_source49.is_AssignVar) {
              Dafny.ISequence<Dafny.Rune> _1609___mcc_h868 = _source49.dtor_name;
              RAST._IExpr _1610___mcc_h869 = _source49.dtor_rhs;
              return this;
            } else if (_source49.is_IfExpr) {
              RAST._IExpr _1611___mcc_h872 = _source49.dtor_cond;
              RAST._IExpr _1612___mcc_h873 = _source49.dtor_thn;
              RAST._IExpr _1613___mcc_h874 = _source49.dtor_els;
              return this;
            } else if (_source49.is_Loop) {
              Std.Wrappers._IOption<RAST._IExpr> _1614___mcc_h878 = _source49.dtor_optCond;
              RAST._IExpr _1615___mcc_h879 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_For) {
              Dafny.ISequence<Dafny.Rune> _1616___mcc_h882 = _source49.dtor_name;
              RAST._IExpr _1617___mcc_h883 = _source49.dtor_range;
              RAST._IExpr _1618___mcc_h884 = _source49.dtor_body;
              return this;
            } else if (_source49.is_Labelled) {
              Dafny.ISequence<Dafny.Rune> _1619___mcc_h888 = _source49.dtor_lbl;
              RAST._IExpr _1620___mcc_h889 = _source49.dtor_underlying;
              return this;
            } else if (_source49.is_Break) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1621___mcc_h892 = _source49.dtor_optLbl;
              return this;
            } else if (_source49.is_Continue) {
              Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1622___mcc_h894 = _source49.dtor_optLbl;
              return this;
            } else if (_source49.is_Return) {
              Std.Wrappers._IOption<RAST._IExpr> _1623___mcc_h896 = _source49.dtor_optExpr;
              return this;
            } else if (_source49.is_CallType) {
              RAST._IExpr _1624___mcc_h898 = _source49.dtor_obj;
              Dafny.ISequence<RAST._IType> _1625___mcc_h899 = _source49.dtor_typeParameters;
              return this;
            } else if (_source49.is_Call) {
              RAST._IExpr _1626___mcc_h902 = _source49.dtor_obj;
              Dafny.ISequence<RAST._IExpr> _1627___mcc_h903 = _source49.dtor_arguments;
              return this;
            } else if (_source49.is_Select) {
              RAST._IExpr _1628___mcc_h906 = _source49.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1629___mcc_h907 = _source49.dtor_name;
              return this;
            } else {
              RAST._IExpr _1630___mcc_h910 = _source49.dtor_obj;
              Dafny.ISequence<Dafny.Rune> _1631___mcc_h911 = _source49.dtor_name;
              RAST._IExpr _source50 = _1630___mcc_h910;
              if (_source50.is_RawExpr) {
                Dafny.ISequence<Dafny.Rune> _1632___mcc_h914 = _source50.dtor_content;
                return this;
              } else if (_source50.is_Identifier) {
                Dafny.ISequence<Dafny.Rune> _1633___mcc_h916 = _source50.dtor_name;
                return this;
              } else if (_source50.is_Match) {
                RAST._IExpr _1634___mcc_h918 = _source50.dtor_matchee;
                Dafny.ISequence<RAST._IMatchCase> _1635___mcc_h919 = _source50.dtor_cases;
                return this;
              } else if (_source50.is_StmtExpr) {
                RAST._IExpr _1636___mcc_h922 = _source50.dtor_stmt;
                RAST._IExpr _1637___mcc_h923 = _source50.dtor_rhs;
                return this;
              } else if (_source50.is_Block) {
                RAST._IExpr _1638___mcc_h926 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_StructBuild) {
                RAST._IExpr _1639___mcc_h928 = _source50.dtor_underlying;
                Dafny.ISequence<RAST._IAssignIdentifier> _1640___mcc_h929 = _source50.dtor_assignments;
                return this;
              } else if (_source50.is_Tuple) {
                Dafny.ISequence<RAST._IExpr> _1641___mcc_h932 = _source50.dtor_arguments;
                return this;
              } else if (_source50.is_UnaryOp) {
                Dafny.ISequence<Dafny.Rune> _1642___mcc_h934 = _source50.dtor_op1;
                RAST._IExpr _1643___mcc_h935 = _source50.dtor_underlying;
                DAST.Format._IUnOpFormat _1644___mcc_h936 = _source50.dtor_format;
                return this;
              } else if (_source50.is_BinaryOp) {
                Dafny.ISequence<Dafny.Rune> _1645___mcc_h940 = _source50.dtor_op2;
                RAST._IExpr _1646___mcc_h941 = _source50.dtor_left;
                RAST._IExpr _1647___mcc_h942 = _source50.dtor_right;
                DAST.Format._IBinOpFormat _1648___mcc_h943 = _source50.dtor_format2;
                return this;
              } else if (_source50.is_TypeAscription) {
                RAST._IExpr _1649___mcc_h948 = _source50.dtor_left;
                RAST._IType _1650___mcc_h949 = _source50.dtor_tpe;
                return this;
              } else if (_source50.is_LiteralInt) {
                Dafny.ISequence<Dafny.Rune> _1651___mcc_h952 = _source50.dtor_value;
                return this;
              } else if (_source50.is_LiteralString) {
                Dafny.ISequence<Dafny.Rune> _1652___mcc_h954 = _source50.dtor_value;
                bool _1653___mcc_h955 = _source50.dtor_binary;
                return this;
              } else if (_source50.is_ConversionNum) {
                RAST._IType _1654___mcc_h958 = _source50.dtor_tpe;
                RAST._IExpr _1655___mcc_h959 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_DeclareVar) {
                RAST._IDeclareType _1656___mcc_h962 = _source50.dtor_declareType;
                Dafny.ISequence<Dafny.Rune> _1657___mcc_h963 = _source50.dtor_name;
                Std.Wrappers._IOption<RAST._IType> _1658___mcc_h964 = _source50.dtor_optType;
                Std.Wrappers._IOption<RAST._IExpr> _1659___mcc_h965 = _source50.dtor_optRhs;
                return this;
              } else if (_source50.is_AssignVar) {
                Dafny.ISequence<Dafny.Rune> _1660___mcc_h970 = _source50.dtor_name;
                RAST._IExpr _1661___mcc_h971 = _source50.dtor_rhs;
                return this;
              } else if (_source50.is_IfExpr) {
                RAST._IExpr _1662___mcc_h974 = _source50.dtor_cond;
                RAST._IExpr _1663___mcc_h975 = _source50.dtor_thn;
                RAST._IExpr _1664___mcc_h976 = _source50.dtor_els;
                return this;
              } else if (_source50.is_Loop) {
                Std.Wrappers._IOption<RAST._IExpr> _1665___mcc_h980 = _source50.dtor_optCond;
                RAST._IExpr _1666___mcc_h981 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_For) {
                Dafny.ISequence<Dafny.Rune> _1667___mcc_h984 = _source50.dtor_name;
                RAST._IExpr _1668___mcc_h985 = _source50.dtor_range;
                RAST._IExpr _1669___mcc_h986 = _source50.dtor_body;
                return this;
              } else if (_source50.is_Labelled) {
                Dafny.ISequence<Dafny.Rune> _1670___mcc_h990 = _source50.dtor_lbl;
                RAST._IExpr _1671___mcc_h991 = _source50.dtor_underlying;
                return this;
              } else if (_source50.is_Break) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1672___mcc_h994 = _source50.dtor_optLbl;
                return this;
              } else if (_source50.is_Continue) {
                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1673___mcc_h996 = _source50.dtor_optLbl;
                return this;
              } else if (_source50.is_Return) {
                Std.Wrappers._IOption<RAST._IExpr> _1674___mcc_h998 = _source50.dtor_optExpr;
                return this;
              } else if (_source50.is_CallType) {
                RAST._IExpr _1675___mcc_h1000 = _source50.dtor_obj;
                Dafny.ISequence<RAST._IType> _1676___mcc_h1001 = _source50.dtor_typeParameters;
                return this;
              } else if (_source50.is_Call) {
                RAST._IExpr _1677___mcc_h1004 = _source50.dtor_obj;
                Dafny.ISequence<RAST._IExpr> _1678___mcc_h1005 = _source50.dtor_arguments;
                return this;
              } else if (_source50.is_Select) {
                RAST._IExpr _1679___mcc_h1008 = _source50.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1680___mcc_h1009 = _source50.dtor_name;
                return this;
              } else {
                RAST._IExpr _1681___mcc_h1012 = _source50.dtor_obj;
                Dafny.ISequence<Dafny.Rune> _1682___mcc_h1013 = _source50.dtor_name;
                RAST._IExpr _source51 = _1681___mcc_h1012;
                if (_source51.is_RawExpr) {
                  Dafny.ISequence<Dafny.Rune> _1683___mcc_h1016 = _source51.dtor_content;
                  return this;
                } else if (_source51.is_Identifier) {
                  Dafny.ISequence<Dafny.Rune> _1684___mcc_h1018 = _source51.dtor_name;
                  return this;
                } else if (_source51.is_Match) {
                  RAST._IExpr _1685___mcc_h1020 = _source51.dtor_matchee;
                  Dafny.ISequence<RAST._IMatchCase> _1686___mcc_h1021 = _source51.dtor_cases;
                  return this;
                } else if (_source51.is_StmtExpr) {
                  RAST._IExpr _1687___mcc_h1024 = _source51.dtor_stmt;
                  RAST._IExpr _1688___mcc_h1025 = _source51.dtor_rhs;
                  return this;
                } else if (_source51.is_Block) {
                  RAST._IExpr _1689___mcc_h1028 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_StructBuild) {
                  RAST._IExpr _1690___mcc_h1030 = _source51.dtor_underlying;
                  Dafny.ISequence<RAST._IAssignIdentifier> _1691___mcc_h1031 = _source51.dtor_assignments;
                  return this;
                } else if (_source51.is_Tuple) {
                  Dafny.ISequence<RAST._IExpr> _1692___mcc_h1034 = _source51.dtor_arguments;
                  return this;
                } else if (_source51.is_UnaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1693___mcc_h1036 = _source51.dtor_op1;
                  RAST._IExpr _1694___mcc_h1037 = _source51.dtor_underlying;
                  DAST.Format._IUnOpFormat _1695___mcc_h1038 = _source51.dtor_format;
                  return this;
                } else if (_source51.is_BinaryOp) {
                  Dafny.ISequence<Dafny.Rune> _1696___mcc_h1042 = _source51.dtor_op2;
                  RAST._IExpr _1697___mcc_h1043 = _source51.dtor_left;
                  RAST._IExpr _1698___mcc_h1044 = _source51.dtor_right;
                  DAST.Format._IBinOpFormat _1699___mcc_h1045 = _source51.dtor_format2;
                  return this;
                } else if (_source51.is_TypeAscription) {
                  RAST._IExpr _1700___mcc_h1050 = _source51.dtor_left;
                  RAST._IType _1701___mcc_h1051 = _source51.dtor_tpe;
                  return this;
                } else if (_source51.is_LiteralInt) {
                  Dafny.ISequence<Dafny.Rune> _1702___mcc_h1054 = _source51.dtor_value;
                  return this;
                } else if (_source51.is_LiteralString) {
                  Dafny.ISequence<Dafny.Rune> _1703___mcc_h1056 = _source51.dtor_value;
                  bool _1704___mcc_h1057 = _source51.dtor_binary;
                  return this;
                } else if (_source51.is_ConversionNum) {
                  RAST._IType _1705___mcc_h1060 = _source51.dtor_tpe;
                  RAST._IExpr _1706___mcc_h1061 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_DeclareVar) {
                  RAST._IDeclareType _1707___mcc_h1064 = _source51.dtor_declareType;
                  Dafny.ISequence<Dafny.Rune> _1708___mcc_h1065 = _source51.dtor_name;
                  Std.Wrappers._IOption<RAST._IType> _1709___mcc_h1066 = _source51.dtor_optType;
                  Std.Wrappers._IOption<RAST._IExpr> _1710___mcc_h1067 = _source51.dtor_optRhs;
                  return this;
                } else if (_source51.is_AssignVar) {
                  Dafny.ISequence<Dafny.Rune> _1711___mcc_h1072 = _source51.dtor_name;
                  RAST._IExpr _1712___mcc_h1073 = _source51.dtor_rhs;
                  return this;
                } else if (_source51.is_IfExpr) {
                  RAST._IExpr _1713___mcc_h1076 = _source51.dtor_cond;
                  RAST._IExpr _1714___mcc_h1077 = _source51.dtor_thn;
                  RAST._IExpr _1715___mcc_h1078 = _source51.dtor_els;
                  return this;
                } else if (_source51.is_Loop) {
                  Std.Wrappers._IOption<RAST._IExpr> _1716___mcc_h1082 = _source51.dtor_optCond;
                  RAST._IExpr _1717___mcc_h1083 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_For) {
                  Dafny.ISequence<Dafny.Rune> _1718___mcc_h1086 = _source51.dtor_name;
                  RAST._IExpr _1719___mcc_h1087 = _source51.dtor_range;
                  RAST._IExpr _1720___mcc_h1088 = _source51.dtor_body;
                  return this;
                } else if (_source51.is_Labelled) {
                  Dafny.ISequence<Dafny.Rune> _1721___mcc_h1092 = _source51.dtor_lbl;
                  RAST._IExpr _1722___mcc_h1093 = _source51.dtor_underlying;
                  return this;
                } else if (_source51.is_Break) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1723___mcc_h1096 = _source51.dtor_optLbl;
                  return this;
                } else if (_source51.is_Continue) {
                  Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1724___mcc_h1098 = _source51.dtor_optLbl;
                  return this;
                } else if (_source51.is_Return) {
                  Std.Wrappers._IOption<RAST._IExpr> _1725___mcc_h1100 = _source51.dtor_optExpr;
                  return this;
                } else if (_source51.is_CallType) {
                  RAST._IExpr _1726___mcc_h1102 = _source51.dtor_obj;
                  Dafny.ISequence<RAST._IType> _1727___mcc_h1103 = _source51.dtor_typeParameters;
                  return this;
                } else if (_source51.is_Call) {
                  RAST._IExpr _1728___mcc_h1106 = _source51.dtor_obj;
                  Dafny.ISequence<RAST._IExpr> _1729___mcc_h1107 = _source51.dtor_arguments;
                  return this;
                } else if (_source51.is_Select) {
                  RAST._IExpr _1730___mcc_h1110 = _source51.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1731___mcc_h1111 = _source51.dtor_name;
                  return this;
                } else {
                  RAST._IExpr _1732___mcc_h1114 = _source51.dtor_obj;
                  Dafny.ISequence<Dafny.Rune> _1733___mcc_h1115 = _source51.dtor_name;
                  RAST._IExpr _source52 = _1732___mcc_h1114;
                  if (_source52.is_RawExpr) {
                    Dafny.ISequence<Dafny.Rune> _1734___mcc_h1118 = _source52.dtor_content;
                    return this;
                  } else if (_source52.is_Identifier) {
                    Dafny.ISequence<Dafny.Rune> _1735___mcc_h1120 = _source52.dtor_name;
                    if (object.Equals(_1735___mcc_h1120, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
                      if (object.Equals(_1733___mcc_h1115, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dafny_runtime"))) {
                        if (object.Equals(_1682___mcc_h1013, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))) {
                          if (object.Equals(_1631___mcc_h911, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))) {
                            Dafny.ISequence<RAST._IExpr> _1736_args = _1580___mcc_h809;
                            if ((new BigInteger((_1736_args).Count)) == (BigInteger.One)) {
                              RAST._IExpr _source53 = (_1736_args).Select(BigInteger.Zero);
                              if (_source53.is_RawExpr) {
                                Dafny.ISequence<Dafny.Rune> _1737___mcc_h1228 = _source53.dtor_content;
                                return this;
                              } else if (_source53.is_Identifier) {
                                Dafny.ISequence<Dafny.Rune> _1738___mcc_h1230 = _source53.dtor_name;
                                return this;
                              } else if (_source53.is_Match) {
                                RAST._IExpr _1739___mcc_h1232 = _source53.dtor_matchee;
                                Dafny.ISequence<RAST._IMatchCase> _1740___mcc_h1233 = _source53.dtor_cases;
                                return this;
                              } else if (_source53.is_StmtExpr) {
                                RAST._IExpr _1741___mcc_h1236 = _source53.dtor_stmt;
                                RAST._IExpr _1742___mcc_h1237 = _source53.dtor_rhs;
                                return this;
                              } else if (_source53.is_Block) {
                                RAST._IExpr _1743___mcc_h1240 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_StructBuild) {
                                RAST._IExpr _1744___mcc_h1242 = _source53.dtor_underlying;
                                Dafny.ISequence<RAST._IAssignIdentifier> _1745___mcc_h1243 = _source53.dtor_assignments;
                                return this;
                              } else if (_source53.is_Tuple) {
                                Dafny.ISequence<RAST._IExpr> _1746___mcc_h1246 = _source53.dtor_arguments;
                                return this;
                              } else if (_source53.is_UnaryOp) {
                                Dafny.ISequence<Dafny.Rune> _1747___mcc_h1248 = _source53.dtor_op1;
                                RAST._IExpr _1748___mcc_h1249 = _source53.dtor_underlying;
                                DAST.Format._IUnOpFormat _1749___mcc_h1250 = _source53.dtor_format;
                                return this;
                              } else if (_source53.is_BinaryOp) {
                                Dafny.ISequence<Dafny.Rune> _1750___mcc_h1254 = _source53.dtor_op2;
                                RAST._IExpr _1751___mcc_h1255 = _source53.dtor_left;
                                RAST._IExpr _1752___mcc_h1256 = _source53.dtor_right;
                                DAST.Format._IBinOpFormat _1753___mcc_h1257 = _source53.dtor_format2;
                                return this;
                              } else if (_source53.is_TypeAscription) {
                                RAST._IExpr _1754___mcc_h1262 = _source53.dtor_left;
                                RAST._IType _1755___mcc_h1263 = _source53.dtor_tpe;
                                return this;
                              } else if (_source53.is_LiteralInt) {
                                Dafny.ISequence<Dafny.Rune> _1756___mcc_h1266 = _source53.dtor_value;
                                Dafny.ISequence<Dafny.Rune> _1757_number = _1756___mcc_h1266;
                                return RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/*optimized*/"), _1757_number));
                              } else if (_source53.is_LiteralString) {
                                Dafny.ISequence<Dafny.Rune> _1758___mcc_h1268 = _source53.dtor_value;
                                bool _1759___mcc_h1269 = _source53.dtor_binary;
                                Dafny.ISequence<Dafny.Rune> _1760_number = _1758___mcc_h1268;
                                return RAST.Expr.create_LiteralInt(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/*optimized*/"), _1760_number));
                              } else if (_source53.is_ConversionNum) {
                                RAST._IType _1761___mcc_h1272 = _source53.dtor_tpe;
                                RAST._IExpr _1762___mcc_h1273 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_DeclareVar) {
                                RAST._IDeclareType _1763___mcc_h1276 = _source53.dtor_declareType;
                                Dafny.ISequence<Dafny.Rune> _1764___mcc_h1277 = _source53.dtor_name;
                                Std.Wrappers._IOption<RAST._IType> _1765___mcc_h1278 = _source53.dtor_optType;
                                Std.Wrappers._IOption<RAST._IExpr> _1766___mcc_h1279 = _source53.dtor_optRhs;
                                return this;
                              } else if (_source53.is_AssignVar) {
                                Dafny.ISequence<Dafny.Rune> _1767___mcc_h1284 = _source53.dtor_name;
                                RAST._IExpr _1768___mcc_h1285 = _source53.dtor_rhs;
                                return this;
                              } else if (_source53.is_IfExpr) {
                                RAST._IExpr _1769___mcc_h1288 = _source53.dtor_cond;
                                RAST._IExpr _1770___mcc_h1289 = _source53.dtor_thn;
                                RAST._IExpr _1771___mcc_h1290 = _source53.dtor_els;
                                return this;
                              } else if (_source53.is_Loop) {
                                Std.Wrappers._IOption<RAST._IExpr> _1772___mcc_h1294 = _source53.dtor_optCond;
                                RAST._IExpr _1773___mcc_h1295 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_For) {
                                Dafny.ISequence<Dafny.Rune> _1774___mcc_h1298 = _source53.dtor_name;
                                RAST._IExpr _1775___mcc_h1299 = _source53.dtor_range;
                                RAST._IExpr _1776___mcc_h1300 = _source53.dtor_body;
                                return this;
                              } else if (_source53.is_Labelled) {
                                Dafny.ISequence<Dafny.Rune> _1777___mcc_h1304 = _source53.dtor_lbl;
                                RAST._IExpr _1778___mcc_h1305 = _source53.dtor_underlying;
                                return this;
                              } else if (_source53.is_Break) {
                                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1779___mcc_h1308 = _source53.dtor_optLbl;
                                return this;
                              } else if (_source53.is_Continue) {
                                Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1780___mcc_h1310 = _source53.dtor_optLbl;
                                return this;
                              } else if (_source53.is_Return) {
                                Std.Wrappers._IOption<RAST._IExpr> _1781___mcc_h1312 = _source53.dtor_optExpr;
                                return this;
                              } else if (_source53.is_CallType) {
                                RAST._IExpr _1782___mcc_h1314 = _source53.dtor_obj;
                                Dafny.ISequence<RAST._IType> _1783___mcc_h1315 = _source53.dtor_typeParameters;
                                return this;
                              } else if (_source53.is_Call) {
                                RAST._IExpr _1784___mcc_h1318 = _source53.dtor_obj;
                                Dafny.ISequence<RAST._IExpr> _1785___mcc_h1319 = _source53.dtor_arguments;
                                return this;
                              } else if (_source53.is_Select) {
                                RAST._IExpr _1786___mcc_h1322 = _source53.dtor_obj;
                                Dafny.ISequence<Dafny.Rune> _1787___mcc_h1323 = _source53.dtor_name;
                                return this;
                              } else {
                                RAST._IExpr _1788___mcc_h1326 = _source53.dtor_obj;
                                Dafny.ISequence<Dafny.Rune> _1789___mcc_h1327 = _source53.dtor_name;
                                return this;
                              }
                            } else {
                              return this;
                            }
                          } else {
                            return this;
                          }
                        } else {
                          return this;
                        }
                      } else {
                        return this;
                      }
                    } else {
                      return this;
                    }
                  } else if (_source52.is_Match) {
                    RAST._IExpr _1790___mcc_h1122 = _source52.dtor_matchee;
                    Dafny.ISequence<RAST._IMatchCase> _1791___mcc_h1123 = _source52.dtor_cases;
                    return this;
                  } else if (_source52.is_StmtExpr) {
                    RAST._IExpr _1792___mcc_h1126 = _source52.dtor_stmt;
                    RAST._IExpr _1793___mcc_h1127 = _source52.dtor_rhs;
                    return this;
                  } else if (_source52.is_Block) {
                    RAST._IExpr _1794___mcc_h1130 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_StructBuild) {
                    RAST._IExpr _1795___mcc_h1132 = _source52.dtor_underlying;
                    Dafny.ISequence<RAST._IAssignIdentifier> _1796___mcc_h1133 = _source52.dtor_assignments;
                    return this;
                  } else if (_source52.is_Tuple) {
                    Dafny.ISequence<RAST._IExpr> _1797___mcc_h1136 = _source52.dtor_arguments;
                    return this;
                  } else if (_source52.is_UnaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1798___mcc_h1138 = _source52.dtor_op1;
                    RAST._IExpr _1799___mcc_h1139 = _source52.dtor_underlying;
                    DAST.Format._IUnOpFormat _1800___mcc_h1140 = _source52.dtor_format;
                    return this;
                  } else if (_source52.is_BinaryOp) {
                    Dafny.ISequence<Dafny.Rune> _1801___mcc_h1144 = _source52.dtor_op2;
                    RAST._IExpr _1802___mcc_h1145 = _source52.dtor_left;
                    RAST._IExpr _1803___mcc_h1146 = _source52.dtor_right;
                    DAST.Format._IBinOpFormat _1804___mcc_h1147 = _source52.dtor_format2;
                    return this;
                  } else if (_source52.is_TypeAscription) {
                    RAST._IExpr _1805___mcc_h1152 = _source52.dtor_left;
                    RAST._IType _1806___mcc_h1153 = _source52.dtor_tpe;
                    return this;
                  } else if (_source52.is_LiteralInt) {
                    Dafny.ISequence<Dafny.Rune> _1807___mcc_h1156 = _source52.dtor_value;
                    return this;
                  } else if (_source52.is_LiteralString) {
                    Dafny.ISequence<Dafny.Rune> _1808___mcc_h1158 = _source52.dtor_value;
                    bool _1809___mcc_h1159 = _source52.dtor_binary;
                    return this;
                  } else if (_source52.is_ConversionNum) {
                    RAST._IType _1810___mcc_h1162 = _source52.dtor_tpe;
                    RAST._IExpr _1811___mcc_h1163 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_DeclareVar) {
                    RAST._IDeclareType _1812___mcc_h1166 = _source52.dtor_declareType;
                    Dafny.ISequence<Dafny.Rune> _1813___mcc_h1167 = _source52.dtor_name;
                    Std.Wrappers._IOption<RAST._IType> _1814___mcc_h1168 = _source52.dtor_optType;
                    Std.Wrappers._IOption<RAST._IExpr> _1815___mcc_h1169 = _source52.dtor_optRhs;
                    return this;
                  } else if (_source52.is_AssignVar) {
                    Dafny.ISequence<Dafny.Rune> _1816___mcc_h1174 = _source52.dtor_name;
                    RAST._IExpr _1817___mcc_h1175 = _source52.dtor_rhs;
                    return this;
                  } else if (_source52.is_IfExpr) {
                    RAST._IExpr _1818___mcc_h1178 = _source52.dtor_cond;
                    RAST._IExpr _1819___mcc_h1179 = _source52.dtor_thn;
                    RAST._IExpr _1820___mcc_h1180 = _source52.dtor_els;
                    return this;
                  } else if (_source52.is_Loop) {
                    Std.Wrappers._IOption<RAST._IExpr> _1821___mcc_h1184 = _source52.dtor_optCond;
                    RAST._IExpr _1822___mcc_h1185 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_For) {
                    Dafny.ISequence<Dafny.Rune> _1823___mcc_h1188 = _source52.dtor_name;
                    RAST._IExpr _1824___mcc_h1189 = _source52.dtor_range;
                    RAST._IExpr _1825___mcc_h1190 = _source52.dtor_body;
                    return this;
                  } else if (_source52.is_Labelled) {
                    Dafny.ISequence<Dafny.Rune> _1826___mcc_h1194 = _source52.dtor_lbl;
                    RAST._IExpr _1827___mcc_h1195 = _source52.dtor_underlying;
                    return this;
                  } else if (_source52.is_Break) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1828___mcc_h1198 = _source52.dtor_optLbl;
                    return this;
                  } else if (_source52.is_Continue) {
                    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1829___mcc_h1200 = _source52.dtor_optLbl;
                    return this;
                  } else if (_source52.is_Return) {
                    Std.Wrappers._IOption<RAST._IExpr> _1830___mcc_h1202 = _source52.dtor_optExpr;
                    return this;
                  } else if (_source52.is_CallType) {
                    RAST._IExpr _1831___mcc_h1204 = _source52.dtor_obj;
                    Dafny.ISequence<RAST._IType> _1832___mcc_h1205 = _source52.dtor_typeParameters;
                    return this;
                  } else if (_source52.is_Call) {
                    RAST._IExpr _1833___mcc_h1208 = _source52.dtor_obj;
                    Dafny.ISequence<RAST._IExpr> _1834___mcc_h1209 = _source52.dtor_arguments;
                    return this;
                  } else if (_source52.is_Select) {
                    RAST._IExpr _1835___mcc_h1212 = _source52.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1836___mcc_h1213 = _source52.dtor_name;
                    return this;
                  } else {
                    RAST._IExpr _1837___mcc_h1216 = _source52.dtor_obj;
                    Dafny.ISequence<Dafny.Rune> _1838___mcc_h1217 = _source52.dtor_name;
                    return this;
                  }
                }
              }
            }
          } else if (_source48.is_Select) {
            RAST._IExpr _1839___mcc_h1220 = _source48.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1840___mcc_h1221 = _source48.dtor_name;
            return this;
          } else {
            RAST._IExpr _1841___mcc_h1224 = _source48.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _1842___mcc_h1225 = _source48.dtor_name;
            return this;
          }
        } else {
          return this;
        }
      } else if (_source35.is_DeclareVar) {
        RAST._IDeclareType _1843___mcc_h664 = _source35.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1844___mcc_h665 = _source35.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1845___mcc_h666 = _source35.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1846___mcc_h667 = _source35.dtor_optRhs;
        return this;
      } else if (_source35.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1847___mcc_h672 = _source35.dtor_name;
        RAST._IExpr _1848___mcc_h673 = _source35.dtor_rhs;
        return this;
      } else if (_source35.is_IfExpr) {
        RAST._IExpr _1849___mcc_h676 = _source35.dtor_cond;
        RAST._IExpr _1850___mcc_h677 = _source35.dtor_thn;
        RAST._IExpr _1851___mcc_h678 = _source35.dtor_els;
        return this;
      } else if (_source35.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1852___mcc_h682 = _source35.dtor_optCond;
        RAST._IExpr _1853___mcc_h683 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_For) {
        Dafny.ISequence<Dafny.Rune> _1854___mcc_h686 = _source35.dtor_name;
        RAST._IExpr _1855___mcc_h687 = _source35.dtor_range;
        RAST._IExpr _1856___mcc_h688 = _source35.dtor_body;
        return this;
      } else if (_source35.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1857___mcc_h692 = _source35.dtor_lbl;
        RAST._IExpr _1858___mcc_h693 = _source35.dtor_underlying;
        return this;
      } else if (_source35.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1859___mcc_h696 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1860___mcc_h698 = _source35.dtor_optLbl;
        return this;
      } else if (_source35.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1861___mcc_h700 = _source35.dtor_optExpr;
        return this;
      } else if (_source35.is_CallType) {
        RAST._IExpr _1862___mcc_h702 = _source35.dtor_obj;
        Dafny.ISequence<RAST._IType> _1863___mcc_h703 = _source35.dtor_typeParameters;
        return this;
      } else if (_source35.is_Call) {
        RAST._IExpr _1864___mcc_h706 = _source35.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _1865___mcc_h707 = _source35.dtor_arguments;
        return this;
      } else if (_source35.is_Select) {
        RAST._IExpr _1866___mcc_h710 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1867___mcc_h711 = _source35.dtor_name;
        return this;
      } else {
        RAST._IExpr _1868___mcc_h714 = _source35.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1869___mcc_h715 = _source35.dtor_name;
        return this;
      }
    }
    public bool LeftRequiresParentheses(RAST._IExpr left) {
      return ((this).printingInfo).NeedParenthesesForLeft((left).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> LeftParentheses(RAST._IExpr left) {
      if ((this).LeftRequiresParentheses(left)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public bool RightRequiresParentheses(RAST._IExpr right) {
      return ((this).printingInfo).NeedParenthesesForRight((right).printingInfo);
    }
    public _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> RightParentheses(RAST._IExpr right) {
      if ((this).RightRequiresParentheses(right)) {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else {
        return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> RightMostIdentifier() {
      RAST._IExpr _source54 = this;
      if (_source54.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1870___mcc_h0 = _source54.dtor_content;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1871___mcc_h2 = _source54.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Match) {
        RAST._IExpr _1872___mcc_h4 = _source54.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1873___mcc_h5 = _source54.dtor_cases;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_StmtExpr) {
        RAST._IExpr _1874___mcc_h8 = _source54.dtor_stmt;
        RAST._IExpr _1875___mcc_h9 = _source54.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Block) {
        RAST._IExpr _1876___mcc_h12 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_StructBuild) {
        RAST._IExpr _1877___mcc_h14 = _source54.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1878___mcc_h15 = _source54.dtor_assignments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1879___mcc_h18 = _source54.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1880___mcc_h20 = _source54.dtor_op1;
        RAST._IExpr _1881___mcc_h21 = _source54.dtor_underlying;
        DAST.Format._IUnOpFormat _1882___mcc_h22 = _source54.dtor_format;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1883___mcc_h26 = _source54.dtor_op2;
        RAST._IExpr _1884___mcc_h27 = _source54.dtor_left;
        RAST._IExpr _1885___mcc_h28 = _source54.dtor_right;
        DAST.Format._IBinOpFormat _1886___mcc_h29 = _source54.dtor_format2;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_TypeAscription) {
        RAST._IExpr _1887___mcc_h34 = _source54.dtor_left;
        RAST._IType _1888___mcc_h35 = _source54.dtor_tpe;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1889___mcc_h38 = _source54.dtor_value;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1890___mcc_h40 = _source54.dtor_value;
        bool _1891___mcc_h41 = _source54.dtor_binary;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_ConversionNum) {
        RAST._IType _1892___mcc_h44 = _source54.dtor_tpe;
        RAST._IExpr _1893___mcc_h45 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_DeclareVar) {
        RAST._IDeclareType _1894___mcc_h48 = _source54.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1895___mcc_h49 = _source54.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1896___mcc_h50 = _source54.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1897___mcc_h51 = _source54.dtor_optRhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _1898___mcc_h56 = _source54.dtor_name;
        RAST._IExpr _1899___mcc_h57 = _source54.dtor_rhs;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_IfExpr) {
        RAST._IExpr _1900___mcc_h60 = _source54.dtor_cond;
        RAST._IExpr _1901___mcc_h61 = _source54.dtor_thn;
        RAST._IExpr _1902___mcc_h62 = _source54.dtor_els;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _1903___mcc_h66 = _source54.dtor_optCond;
        RAST._IExpr _1904___mcc_h67 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_For) {
        Dafny.ISequence<Dafny.Rune> _1905___mcc_h70 = _source54.dtor_name;
        RAST._IExpr _1906___mcc_h71 = _source54.dtor_range;
        RAST._IExpr _1907___mcc_h72 = _source54.dtor_body;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _1908___mcc_h76 = _source54.dtor_lbl;
        RAST._IExpr _1909___mcc_h77 = _source54.dtor_underlying;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1910___mcc_h80 = _source54.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1911___mcc_h82 = _source54.dtor_optLbl;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _1912___mcc_h84 = _source54.dtor_optExpr;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_CallType) {
        RAST._IExpr _1913___mcc_h86 = _source54.dtor_obj;
        Dafny.ISequence<RAST._IType> _1914___mcc_h87 = _source54.dtor_typeParameters;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Call) {
        RAST._IExpr _1915___mcc_h90 = _source54.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _1916___mcc_h91 = _source54.dtor_arguments;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else if (_source54.is_Select) {
        RAST._IExpr _1917___mcc_h94 = _source54.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1918___mcc_h95 = _source54.dtor_name;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
      } else {
        RAST._IExpr _1919___mcc_h98 = _source54.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _1920___mcc_h99 = _source54.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1921_id = _1920___mcc_h99;
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_1921_id);
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      RAST._IExpr _source55 = (this).Optimize();
      if (_source55.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _1922___mcc_h0 = _source55.dtor_content;
        RAST._IExpr _1923_r = (this).Optimize();
        return RAST.__default.AddIndent((_1923_r).dtor_content, ind);
      } else if (_source55.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _1924___mcc_h2 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _1925_name = _1924___mcc_h2;
        return _1925_name;
      } else if (_source55.is_Match) {
        RAST._IExpr _1926___mcc_h4 = _source55.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _1927___mcc_h5 = _source55.dtor_cases;
        Dafny.ISequence<RAST._IMatchCase> _1928_cases = _1927___mcc_h5;
        RAST._IExpr _1929_matchee = _1926___mcc_h4;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), (_1929_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>(_1928_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_1930_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_1931_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1930_ind), RAST.__default.IND), (_1931_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1930_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_StmtExpr) {
        RAST._IExpr _1932___mcc_h8 = _source55.dtor_stmt;
        RAST._IExpr _1933___mcc_h9 = _source55.dtor_rhs;
        RAST._IExpr _1934_rhs = _1933___mcc_h9;
        RAST._IExpr _1935_stmt = _1932___mcc_h8;
        if (((_1935_stmt).is_RawExpr) && (((_1935_stmt).dtor_content).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))) {
          return (_1934_rhs)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1935_stmt)._ToString(ind), (((_1935_stmt).NoExtraSemicolonAfter()) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), (_1934_rhs)._ToString(ind));
        }
      } else if (_source55.is_Block) {
        RAST._IExpr _1936___mcc_h12 = _source55.dtor_underlying;
        RAST._IExpr _1937_underlying = _1936___mcc_h12;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), (_1937_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_StructBuild) {
        RAST._IExpr _1938___mcc_h14 = _source55.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _1939___mcc_h15 = _source55.dtor_assignments;
        Dafny.ISequence<RAST._IAssignIdentifier> _1940_assignments = _1939___mcc_h15;
        RAST._IExpr _1941_name = _1938___mcc_h14;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_1941_name)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>(_1940_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_1942_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_1943_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1942_ind), RAST.__default.IND), (_1943_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1942_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1940_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _1944___mcc_h18 = _source55.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _1945_arguments = _1944___mcc_h18;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IExpr>(_1945_arguments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_1946_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_1947_arg) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _1946_ind), RAST.__default.IND), (_1947_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_1946_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger((_1945_arguments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source55.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _1948___mcc_h20 = _source55.dtor_op1;
        RAST._IExpr _1949___mcc_h21 = _source55.dtor_underlying;
        DAST.Format._IUnOpFormat _1950___mcc_h22 = _source55.dtor_format;
        DAST.Format._IUnOpFormat _1951_format = _1950___mcc_h22;
        RAST._IExpr _1952_underlying = _1949___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1953_op = _1948___mcc_h20;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs41 = ((((this).printingInfo).NeedParenthesesFor((_1952_underlying).printingInfo)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
        Dafny.ISequence<Dafny.Rune> _1954_leftP = _let_tmp_rhs41.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1955_rightP = _let_tmp_rhs41.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1956_leftOp = ((((_1953_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) && (!(_1954_leftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1953_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : ((((_1953_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (_1953_op))));
        Dafny.ISequence<Dafny.Rune> _1957_rightOp = (((_1953_op).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) ? (_1953_op) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1956_leftOp, _1954_leftP), (_1952_underlying)._ToString(ind)), _1955_rightP), _1957_rightOp);
      } else if (_source55.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _1958___mcc_h26 = _source55.dtor_op2;
        RAST._IExpr _1959___mcc_h27 = _source55.dtor_left;
        RAST._IExpr _1960___mcc_h28 = _source55.dtor_right;
        DAST.Format._IBinOpFormat _1961___mcc_h29 = _source55.dtor_format2;
        DAST.Format._IBinOpFormat _1962_format = _1961___mcc_h29;
        RAST._IExpr _1963_right = _1960___mcc_h28;
        RAST._IExpr _1964_left = _1959___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _1965_op2 = _1958___mcc_h26;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs42 = (this).LeftParentheses(_1964_left);
        Dafny.ISequence<Dafny.Rune> _1966_leftLeftP = _let_tmp_rhs42.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1967_leftRighP = _let_tmp_rhs42.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs43 = (this).RightParentheses(_1963_right);
        Dafny.ISequence<Dafny.Rune> _1968_rightLeftP = _let_tmp_rhs43.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1969_rightRightP = _let_tmp_rhs43.dtor__1;
        Dafny.ISequence<Dafny.Rune> _1970_opRendered = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _1965_op2), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
        Dafny.ISequence<Dafny.Rune> _1971_indLeft = (((_1966_leftLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        Dafny.ISequence<Dafny.Rune> _1972_indRight = (((_1968_rightLeftP).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("))) ? (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)) : (ind));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1966_leftLeftP, (_1964_left)._ToString(_1971_indLeft)), _1967_leftRighP), _1970_opRendered), _1968_rightLeftP), (_1963_right)._ToString(_1972_indRight)), _1969_rightRightP);
      } else if (_source55.is_TypeAscription) {
        RAST._IExpr _1973___mcc_h34 = _source55.dtor_left;
        RAST._IType _1974___mcc_h35 = _source55.dtor_tpe;
        RAST._IType _1975_tpe = _1974___mcc_h35;
        RAST._IExpr _1976_left = _1973___mcc_h34;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs44 = (this).LeftParentheses(_1976_left);
        Dafny.ISequence<Dafny.Rune> _1977_leftLeftP = _let_tmp_rhs44.dtor__0;
        Dafny.ISequence<Dafny.Rune> _1978_leftRightP = _let_tmp_rhs44.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1977_leftLeftP, (_1976_left)._ToString(RAST.__default.IND)), _1978_leftRightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), (_1975_tpe)._ToString(RAST.__default.IND));
      } else if (_source55.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _1979___mcc_h38 = _source55.dtor_value;
        Dafny.ISequence<Dafny.Rune> _1980_number = _1979___mcc_h38;
        return _1980_number;
      } else if (_source55.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _1981___mcc_h40 = _source55.dtor_value;
        bool _1982___mcc_h41 = _source55.dtor_binary;
        bool _1983_binary = _1982___mcc_h41;
        Dafny.ISequence<Dafny.Rune> _1984_characters = _1981___mcc_h40;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((_1983_binary) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("b")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\"")), _1984_characters), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""));
      } else if (_source55.is_ConversionNum) {
        RAST._IType _1985___mcc_h44 = _source55.dtor_tpe;
        RAST._IExpr _1986___mcc_h45 = _source55.dtor_underlying;
        RAST._IExpr _1987_expr = _1986___mcc_h45;
        RAST._IType _1988_tpe = _1985___mcc_h44;
        if (((((((((((_1988_tpe).is_U8) || ((_1988_tpe).is_U16)) || ((_1988_tpe).is_U32)) || ((_1988_tpe).is_U64)) || ((_1988_tpe).is_U128)) || ((_1988_tpe).is_I8)) || ((_1988_tpe).is_I16)) || ((_1988_tpe).is_I32)) || ((_1988_tpe).is_I64)) || ((_1988_tpe).is_I128)) {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("num::ToPrimitive::to_"), (_1988_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_1987_expr)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<b>Unsupported: Numeric conversion to "), (_1988_tpe)._ToString(ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("</b>"));
        }
      } else if (_source55.is_DeclareVar) {
        RAST._IDeclareType _1989___mcc_h48 = _source55.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _1990___mcc_h49 = _source55.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _1991___mcc_h50 = _source55.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _1992___mcc_h51 = _source55.dtor_optRhs;
        Std.Wrappers._IOption<RAST._IExpr> _1993_optExpr = _1992___mcc_h51;
        Std.Wrappers._IOption<RAST._IType> _1994_optType = _1991___mcc_h50;
        Dafny.ISequence<Dafny.Rune> _1995_name = _1990___mcc_h49;
        RAST._IDeclareType _1996_declareType = _1989___mcc_h48;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let "), ((object.Equals(_1996_declareType, RAST.DeclareType.create_MUT())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _1995_name), (((_1994_optType).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": "), ((_1994_optType).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), (((_1993_optExpr).is_Some) ? (Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(((_1993_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)), _pat_let6_0 => Dafny.Helpers.Let<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>(_pat_let6_0, _1997_optExprString => (((_1997_optExprString).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("= /*issue with empty RHS*/"), ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_source56) => {
          if (_source56.is_RawExpr) {
            Dafny.ISequence<Dafny.Rune> _1998___mcc_h102 = _source56.dtor_content;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty Raw expr");
          } else if (_source56.is_Identifier) {
            Dafny.ISequence<Dafny.Rune> _1999___mcc_h104 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Match) {
            RAST._IExpr _2000___mcc_h106 = _source56.dtor_matchee;
            Dafny.ISequence<RAST._IMatchCase> _2001___mcc_h107 = _source56.dtor_cases;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_StmtExpr) {
            RAST._IExpr _2002___mcc_h110 = _source56.dtor_stmt;
            RAST._IExpr _2003___mcc_h111 = _source56.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Block) {
            RAST._IExpr _2004___mcc_h114 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_StructBuild) {
            RAST._IExpr _2005___mcc_h116 = _source56.dtor_underlying;
            Dafny.ISequence<RAST._IAssignIdentifier> _2006___mcc_h117 = _source56.dtor_assignments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Tuple) {
            Dafny.ISequence<RAST._IExpr> _2007___mcc_h120 = _source56.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_UnaryOp) {
            Dafny.ISequence<Dafny.Rune> _2008___mcc_h122 = _source56.dtor_op1;
            RAST._IExpr _2009___mcc_h123 = _source56.dtor_underlying;
            DAST.Format._IUnOpFormat _2010___mcc_h124 = _source56.dtor_format;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_BinaryOp) {
            Dafny.ISequence<Dafny.Rune> _2011___mcc_h128 = _source56.dtor_op2;
            RAST._IExpr _2012___mcc_h129 = _source56.dtor_left;
            RAST._IExpr _2013___mcc_h130 = _source56.dtor_right;
            DAST.Format._IBinOpFormat _2014___mcc_h131 = _source56.dtor_format2;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_TypeAscription) {
            RAST._IExpr _2015___mcc_h136 = _source56.dtor_left;
            RAST._IType _2016___mcc_h137 = _source56.dtor_tpe;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_LiteralInt) {
            Dafny.ISequence<Dafny.Rune> _2017___mcc_h140 = _source56.dtor_value;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty int literal");
          } else if (_source56.is_LiteralString) {
            Dafny.ISequence<Dafny.Rune> _2018___mcc_h142 = _source56.dtor_value;
            bool _2019___mcc_h143 = _source56.dtor_binary;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Empty string literal");
          } else if (_source56.is_ConversionNum) {
            RAST._IType _2020___mcc_h146 = _source56.dtor_tpe;
            RAST._IExpr _2021___mcc_h147 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_DeclareVar) {
            RAST._IDeclareType _2022___mcc_h150 = _source56.dtor_declareType;
            Dafny.ISequence<Dafny.Rune> _2023___mcc_h151 = _source56.dtor_name;
            Std.Wrappers._IOption<RAST._IType> _2024___mcc_h152 = _source56.dtor_optType;
            Std.Wrappers._IOption<RAST._IExpr> _2025___mcc_h153 = _source56.dtor_optRhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_AssignVar) {
            Dafny.ISequence<Dafny.Rune> _2026___mcc_h158 = _source56.dtor_name;
            RAST._IExpr _2027___mcc_h159 = _source56.dtor_rhs;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_IfExpr) {
            RAST._IExpr _2028___mcc_h162 = _source56.dtor_cond;
            RAST._IExpr _2029___mcc_h163 = _source56.dtor_thn;
            RAST._IExpr _2030___mcc_h164 = _source56.dtor_els;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Loop) {
            Std.Wrappers._IOption<RAST._IExpr> _2031___mcc_h168 = _source56.dtor_optCond;
            RAST._IExpr _2032___mcc_h169 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_For) {
            Dafny.ISequence<Dafny.Rune> _2033___mcc_h172 = _source56.dtor_name;
            RAST._IExpr _2034___mcc_h173 = _source56.dtor_range;
            RAST._IExpr _2035___mcc_h174 = _source56.dtor_body;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Labelled) {
            Dafny.ISequence<Dafny.Rune> _2036___mcc_h178 = _source56.dtor_lbl;
            RAST._IExpr _2037___mcc_h179 = _source56.dtor_underlying;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Break) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2038___mcc_h182 = _source56.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Continue) {
            Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2039___mcc_h184 = _source56.dtor_optLbl;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Return) {
            Std.Wrappers._IOption<RAST._IExpr> _2040___mcc_h186 = _source56.dtor_optExpr;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_CallType) {
            RAST._IExpr _2041___mcc_h188 = _source56.dtor_obj;
            Dafny.ISequence<RAST._IType> _2042___mcc_h189 = _source56.dtor_typeParameters;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Call) {
            RAST._IExpr _2043___mcc_h192 = _source56.dtor_obj;
            Dafny.ISequence<RAST._IExpr> _2044___mcc_h193 = _source56.dtor_arguments;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else if (_source56.is_Select) {
            RAST._IExpr _2045___mcc_h196 = _source56.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2046___mcc_h197 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          } else {
            RAST._IExpr _2047___mcc_h200 = _source56.dtor_obj;
            Dafny.ISequence<Dafny.Rune> _2048___mcc_h201 = _source56.dtor_name;
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Another case");
          }
        }))((_1993_optExpr).dtor_value))) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "), _1997_optExprString)))))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2049___mcc_h56 = _source55.dtor_name;
        RAST._IExpr _2050___mcc_h57 = _source55.dtor_rhs;
        RAST._IExpr _2051_expr = _2050___mcc_h57;
        Dafny.ISequence<Dafny.Rune> _2052_name = _2049___mcc_h56;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2052_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_2051_expr)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_IfExpr) {
        RAST._IExpr _2053___mcc_h60 = _source55.dtor_cond;
        RAST._IExpr _2054___mcc_h61 = _source55.dtor_thn;
        RAST._IExpr _2055___mcc_h62 = _source55.dtor_els;
        RAST._IExpr _2056_els = _2055___mcc_h62;
        RAST._IExpr _2057_thn = _2054___mcc_h61;
        RAST._IExpr _2058_cond = _2053___mcc_h60;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), (_2058_cond)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2057_thn)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("} else {\n")), ind), RAST.__default.IND), (_2056_els)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2059___mcc_h66 = _source55.dtor_optCond;
        RAST._IExpr _2060___mcc_h67 = _source55.dtor_underlying;
        RAST._IExpr _2061_underlying = _2060___mcc_h67;
        Std.Wrappers._IOption<RAST._IExpr> _2062_optCond = _2059___mcc_h66;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source57) => {
          if (_source57.is_None) {
            return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop");
          } else {
            RAST._IExpr _2063___mcc_h204 = _source57.dtor_value;
            RAST._IExpr _2064_c = _2063___mcc_h204;
            return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), (_2064_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv4, RAST.__default.IND)));
          }
        }))(_2062_optCond), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2061_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_For) {
        Dafny.ISequence<Dafny.Rune> _2065___mcc_h70 = _source55.dtor_name;
        RAST._IExpr _2066___mcc_h71 = _source55.dtor_range;
        RAST._IExpr _2067___mcc_h72 = _source55.dtor_body;
        RAST._IExpr _2068_body = _2067___mcc_h72;
        RAST._IExpr _2069_range = _2066___mcc_h71;
        Dafny.ISequence<Dafny.Rune> _2070_name = _2065___mcc_h70;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for "), _2070_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" in ")), (_2069_range)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), ind), RAST.__default.IND), (_2068_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if (_source55.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2071___mcc_h76 = _source55.dtor_lbl;
        RAST._IExpr _2072___mcc_h77 = _source55.dtor_underlying;
        RAST._IExpr _2073_underlying = _2072___mcc_h77;
        Dafny.ISequence<Dafny.Rune> _2074_name = _2071___mcc_h76;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'"), _2074_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_2073_underlying)._ToString(ind));
      } else if (_source55.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2075___mcc_h80 = _source55.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2076_optLbl = _2075___mcc_h80;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source58 = _2076_optLbl;
        if (_source58.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2077___mcc_h205 = _source58.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2078_lbl = _2077___mcc_h205;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break '"), _2078_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source55.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2079___mcc_h82 = _source55.dtor_optLbl;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2080_optLbl = _2079___mcc_h82;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source59 = _2080_optLbl;
        if (_source59.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue;");
        } else {
          Dafny.ISequence<Dafny.Rune> _2081___mcc_h206 = _source59.dtor_value;
          Dafny.ISequence<Dafny.Rune> _2082_lbl = _2081___mcc_h206;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue '"), _2082_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
        }
      } else if (_source55.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2083___mcc_h84 = _source55.dtor_optExpr;
        Std.Wrappers._IOption<RAST._IExpr> _2084_optExpr = _2083___mcc_h84;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), (((_2084_optExpr).is_Some) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), ((_2084_optExpr).dtor_value)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      } else if (_source55.is_CallType) {
        RAST._IExpr _2085___mcc_h86 = _source55.dtor_obj;
        Dafny.ISequence<RAST._IType> _2086___mcc_h87 = _source55.dtor_typeParameters;
        Dafny.ISequence<RAST._IType> _2087_tpes = _2086___mcc_h87;
        RAST._IExpr _2088_expr = _2085___mcc_h86;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs45 = (this).LeftParentheses(_2088_expr);
        Dafny.ISequence<Dafny.Rune> _2089_leftP = _let_tmp_rhs45.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2090_rightP = _let_tmp_rhs45.dtor__1;
        if ((_2087_tpes).Equals(Dafny.Sequence<RAST._IType>.FromElements())) {
          return (_2088_expr)._ToString(ind);
        } else {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2089_leftP, (_2088_expr)._ToString(ind)), _2090_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<")), RAST.__default.SeqToString<RAST._IType>(_2087_tpes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_2091_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_2092_tpe) => {
            return (_2092_tpe)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2091_ind, RAST.__default.IND));
          })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        }
      } else if (_source55.is_Call) {
        RAST._IExpr _2093___mcc_h90 = _source55.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2094___mcc_h91 = _source55.dtor_arguments;
        Dafny.ISequence<RAST._IExpr> _2095_args = _2094___mcc_h91;
        RAST._IExpr _2096_expr = _2093___mcc_h90;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs46 = (this).LeftParentheses(_2096_expr);
        Dafny.ISequence<Dafny.Rune> _2097_leftP = _let_tmp_rhs46.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2098_rightP = _let_tmp_rhs46.dtor__1;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs47 = ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>)((_source60) => {
          if (_source60.is_None) {
            return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          } else {
            Dafny.ISequence<Dafny.Rune> _2099___mcc_h207 = _source60.dtor_value;
            if (object.Equals(_2099___mcc_h207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2099___mcc_h207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            } else if (object.Equals(_2099___mcc_h207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else if (object.Equals(_2099___mcc_h207, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))) {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
            } else {
              return _System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
        }))((_2096_expr).RightMostIdentifier());
        Dafny.ISequence<Dafny.Rune> _2100_leftCallP = _let_tmp_rhs47.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2101_rightCallP = _let_tmp_rhs47.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2097_leftP, (_2096_expr)._ToString(ind)), _2098_rightP), _2100_leftCallP), RAST.__default.SeqToString<RAST._IExpr>(_2095_args, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>>>((_2102_ind) => ((System.Func<RAST._IExpr, Dafny.ISequence<Dafny.Rune>>)((_2103_arg) => {
          return (_2103_arg)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_2102_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), _2101_rightCallP);
      } else if (_source55.is_Select) {
        RAST._IExpr _2104___mcc_h94 = _source55.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2105___mcc_h95 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2106_name = _2105___mcc_h95;
        RAST._IExpr _2107_expression = _2104___mcc_h94;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs48 = (this).LeftParentheses(_2107_expression);
        Dafny.ISequence<Dafny.Rune> _2108_leftP = _let_tmp_rhs48.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2109_rightP = _let_tmp_rhs48.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2108_leftP, (_2107_expression)._ToString(ind)), _2109_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2106_name);
      } else {
        RAST._IExpr _2110___mcc_h98 = _source55.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2111___mcc_h99 = _source55.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2112_name = _2111___mcc_h99;
        RAST._IExpr _2113_expression = _2110___mcc_h98;
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs49 = (this).LeftParentheses(_2113_expression);
        Dafny.ISequence<Dafny.Rune> _2114_leftP = _let_tmp_rhs49.dtor__0;
        Dafny.ISequence<Dafny.Rune> _2115_rightP = _let_tmp_rhs49.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2114_leftP, (_2113_expression)._ToString(ind)), _2115_rightP), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2112_name);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      if ((this).is_StmtExpr) {
        return RAST.Expr.create_StmtExpr((this).dtor_stmt, ((this).dtor_rhs).Then(rhs2));
      } else {
        return RAST.Expr.create_StmtExpr(this, rhs2);
      }
    }
    public RAST._IExpr Sel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_Select(this, name);
    }
    public RAST._IExpr MSel(Dafny.ISequence<Dafny.Rune> name) {
      return RAST.Expr.create_MemberSelect(this, name);
    }
    public RAST._IExpr ApplyType(Dafny.ISequence<RAST._IType> typeParameters) {
      return RAST.Expr.create_CallType(this, typeParameters);
    }
    public RAST._IExpr ApplyType1(RAST._IType typeParameter) {
      return RAST.Expr.create_CallType(this, Dafny.Sequence<RAST._IType>.FromElements(typeParameter));
    }
    public RAST._IExpr Apply(Dafny.ISequence<RAST._IExpr> arguments) {
      return RAST.Expr.create_Call(this, arguments);
    }
    public RAST._IExpr Apply1(RAST._IExpr argument) {
      return RAST.Expr.create_Call(this, Dafny.Sequence<RAST._IExpr>.FromElements(argument));
    }
    public RAST._IPrintingInfo printingInfo { get {
      RAST._IExpr _source61 = this;
      if (_source61.is_RawExpr) {
        Dafny.ISequence<Dafny.Rune> _2116___mcc_h0 = _source61.dtor_content;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Identifier) {
        Dafny.ISequence<Dafny.Rune> _2117___mcc_h2 = _source61.dtor_name;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_Match) {
        RAST._IExpr _2118___mcc_h4 = _source61.dtor_matchee;
        Dafny.ISequence<RAST._IMatchCase> _2119___mcc_h5 = _source61.dtor_cases;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_StmtExpr) {
        RAST._IExpr _2120___mcc_h8 = _source61.dtor_stmt;
        RAST._IExpr _2121___mcc_h9 = _source61.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Block) {
        RAST._IExpr _2122___mcc_h12 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_StructBuild) {
        RAST._IExpr _2123___mcc_h14 = _source61.dtor_underlying;
        Dafny.ISequence<RAST._IAssignIdentifier> _2124___mcc_h15 = _source61.dtor_assignments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Tuple) {
        Dafny.ISequence<RAST._IExpr> _2125___mcc_h18 = _source61.dtor_arguments;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_UnaryOp) {
        Dafny.ISequence<Dafny.Rune> _2126___mcc_h20 = _source61.dtor_op1;
        RAST._IExpr _2127___mcc_h21 = _source61.dtor_underlying;
        DAST.Format._IUnOpFormat _2128___mcc_h22 = _source61.dtor_format;
        DAST.Format._IUnOpFormat _2129_format = _2128___mcc_h22;
        RAST._IExpr _2130_underlying = _2127___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _2131_op = _2126___mcc_h20;
        if (object.Equals(_2131_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("?"))) {
          return RAST.PrintingInfo.create_SuffixPrecedence(new BigInteger(5));
        } else if (object.Equals(_2131_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2131_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2131_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2131_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else if (object.Equals(_2131_op, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut"))) {
          return RAST.PrintingInfo.create_Precedence(new BigInteger(6));
        } else {
          return RAST.PrintingInfo.create_UnknownPrecedence();
        }
      } else if (_source61.is_BinaryOp) {
        Dafny.ISequence<Dafny.Rune> _2132___mcc_h26 = _source61.dtor_op2;
        RAST._IExpr _2133___mcc_h27 = _source61.dtor_left;
        RAST._IExpr _2134___mcc_h28 = _source61.dtor_right;
        DAST.Format._IBinOpFormat _2135___mcc_h29 = _source61.dtor_format2;
        DAST.Format._IBinOpFormat _2136_format = _2135___mcc_h29;
        RAST._IExpr _2137_right = _2134___mcc_h28;
        RAST._IExpr _2138_left = _2133___mcc_h27;
        Dafny.ISequence<Dafny.Rune> _2139_op2 = _2132___mcc_h26;
        if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(20), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(30), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(40), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(50), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(60), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(70), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(80), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(90), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||"))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(100), RAST.Associativity.create_LeftToRight());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".."))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RequiresParentheses());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else if (object.Equals(_2139_op2, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>="))) {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(110), RAST.Associativity.create_RightToLeft());
        } else {
          return RAST.PrintingInfo.create_PrecedenceAssociativity(BigInteger.Zero, RAST.Associativity.create_RequiresParentheses());
        }
      } else if (_source61.is_TypeAscription) {
        RAST._IExpr _2140___mcc_h34 = _source61.dtor_left;
        RAST._IType _2141___mcc_h35 = _source61.dtor_tpe;
        RAST._IType _2142_tpe = _2141___mcc_h35;
        RAST._IExpr _2143_left = _2140___mcc_h34;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(10), RAST.Associativity.create_LeftToRight());
      } else if (_source61.is_LiteralInt) {
        Dafny.ISequence<Dafny.Rune> _2144___mcc_h38 = _source61.dtor_value;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_LiteralString) {
        Dafny.ISequence<Dafny.Rune> _2145___mcc_h40 = _source61.dtor_value;
        bool _2146___mcc_h41 = _source61.dtor_binary;
        return RAST.PrintingInfo.create_Precedence(BigInteger.One);
      } else if (_source61.is_ConversionNum) {
        RAST._IType _2147___mcc_h44 = _source61.dtor_tpe;
        RAST._IExpr _2148___mcc_h45 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_DeclareVar) {
        RAST._IDeclareType _2149___mcc_h48 = _source61.dtor_declareType;
        Dafny.ISequence<Dafny.Rune> _2150___mcc_h49 = _source61.dtor_name;
        Std.Wrappers._IOption<RAST._IType> _2151___mcc_h50 = _source61.dtor_optType;
        Std.Wrappers._IOption<RAST._IExpr> _2152___mcc_h51 = _source61.dtor_optRhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_AssignVar) {
        Dafny.ISequence<Dafny.Rune> _2153___mcc_h56 = _source61.dtor_name;
        RAST._IExpr _2154___mcc_h57 = _source61.dtor_rhs;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_IfExpr) {
        RAST._IExpr _2155___mcc_h60 = _source61.dtor_cond;
        RAST._IExpr _2156___mcc_h61 = _source61.dtor_thn;
        RAST._IExpr _2157___mcc_h62 = _source61.dtor_els;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Loop) {
        Std.Wrappers._IOption<RAST._IExpr> _2158___mcc_h66 = _source61.dtor_optCond;
        RAST._IExpr _2159___mcc_h67 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_For) {
        Dafny.ISequence<Dafny.Rune> _2160___mcc_h70 = _source61.dtor_name;
        RAST._IExpr _2161___mcc_h71 = _source61.dtor_range;
        RAST._IExpr _2162___mcc_h72 = _source61.dtor_body;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Labelled) {
        Dafny.ISequence<Dafny.Rune> _2163___mcc_h76 = _source61.dtor_lbl;
        RAST._IExpr _2164___mcc_h77 = _source61.dtor_underlying;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2165___mcc_h80 = _source61.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Continue) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2166___mcc_h82 = _source61.dtor_optLbl;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_Return) {
        Std.Wrappers._IOption<RAST._IExpr> _2167___mcc_h84 = _source61.dtor_optExpr;
        return RAST.PrintingInfo.create_UnknownPrecedence();
      } else if (_source61.is_CallType) {
        RAST._IExpr _2168___mcc_h86 = _source61.dtor_obj;
        Dafny.ISequence<RAST._IType> _2169___mcc_h87 = _source61.dtor_typeParameters;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source61.is_Call) {
        RAST._IExpr _2170___mcc_h90 = _source61.dtor_obj;
        Dafny.ISequence<RAST._IExpr> _2171___mcc_h91 = _source61.dtor_arguments;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else if (_source61.is_Select) {
        RAST._IExpr _2172___mcc_h94 = _source61.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2173___mcc_h95 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2174_name = _2173___mcc_h95;
        RAST._IExpr _2175_underlying = _2172___mcc_h94;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      } else {
        RAST._IExpr _2176___mcc_h98 = _source61.dtor_obj;
        Dafny.ISequence<Dafny.Rune> _2177___mcc_h99 = _source61.dtor_name;
        Dafny.ISequence<Dafny.Rune> _2178_name = _2177___mcc_h99;
        RAST._IExpr _2179_underlying = _2176___mcc_h98;
        return RAST.PrintingInfo.create_PrecedenceAssociativity(new BigInteger(2), RAST.Associativity.create_LeftToRight());
      }
    } }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Identifier : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Identifier(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Identifier(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Identifier;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Identifier";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly RAST._IExpr _underlying;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(RAST._IExpr underlying, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._underlying = underlying;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_underlying, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._underlying, oth._underlying) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }
  public class Expr_Tuple : Expr {
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Tuple(Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Tuple(_arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Tuple;
      return oth != null && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_UnaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op1;
    public readonly RAST._IExpr _underlying;
    public readonly DAST.Format._IUnOpFormat _format;
    public Expr_UnaryOp(Dafny.ISequence<Dafny.Rune> op1, RAST._IExpr underlying, DAST.Format._IUnOpFormat format) : base() {
      this._op1 = op1;
      this._underlying = underlying;
      this._format = format;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_UnaryOp(_op1, _underlying, _format);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_UnaryOp;
      return oth != null && object.Equals(this._op1, oth._op1) && object.Equals(this._underlying, oth._underlying) && object.Equals(this._format, oth._format);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.UnaryOp";
      s += "(";
      s += this._op1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format);
      s += ")";
      return s;
    }
  }
  public class Expr_BinaryOp : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _op2;
    public readonly RAST._IExpr _left;
    public readonly RAST._IExpr _right;
    public readonly DAST.Format._IBinOpFormat _format2;
    public Expr_BinaryOp(Dafny.ISequence<Dafny.Rune> op2, RAST._IExpr left, RAST._IExpr right, DAST.Format._IBinOpFormat format2) : base() {
      this._op2 = op2;
      this._left = left;
      this._right = right;
      this._format2 = format2;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_BinaryOp(_op2, _left, _right, _format2);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_BinaryOp;
      return oth != null && object.Equals(this._op2, oth._op2) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right) && object.Equals(this._format2, oth._format2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op2));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._format2));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.BinaryOp";
      s += "(";
      s += this._op2.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ", ";
      s += Dafny.Helpers.ToString(this._format2);
      s += ")";
      return s;
    }
  }
  public class Expr_TypeAscription : Expr {
    public readonly RAST._IExpr _left;
    public readonly RAST._IType _tpe;
    public Expr_TypeAscription(RAST._IExpr left, RAST._IType tpe) : base() {
      this._left = left;
      this._tpe = tpe;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_TypeAscription(_left, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_TypeAscription;
      return oth != null && object.Equals(this._left, oth._left) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.TypeAscription";
      s += "(";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralInt : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public Expr_LiteralInt(Dafny.ISequence<Dafny.Rune> @value) : base() {
      this._value = @value;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralInt(_value);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralInt;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralInt";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_LiteralString : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _value;
    public readonly bool _binary;
    public Expr_LiteralString(Dafny.ISequence<Dafny.Rune> @value, bool binary) : base() {
      this._value = @value;
      this._binary = binary;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_LiteralString(_value, _binary);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_LiteralString;
      return oth != null && object.Equals(this._value, oth._value) && this._binary == oth._binary;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._binary));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.LiteralString";
      s += "(";
      s += this._value.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._binary);
      s += ")";
      return s;
    }
  }
  public class Expr_ConversionNum : Expr {
    public readonly RAST._IType _tpe;
    public readonly RAST._IExpr _underlying;
    public Expr_ConversionNum(RAST._IType tpe, RAST._IExpr underlying) : base() {
      this._tpe = tpe;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_ConversionNum(_tpe, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_ConversionNum;
      return oth != null && object.Equals(this._tpe, oth._tpe) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.ConversionNum";
      s += "(";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_DeclareVar : Expr {
    public readonly RAST._IDeclareType _declareType;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Std.Wrappers._IOption<RAST._IType> _optType;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optRhs;
    public Expr_DeclareVar(RAST._IDeclareType declareType, Dafny.ISequence<Dafny.Rune> name, Std.Wrappers._IOption<RAST._IType> optType, Std.Wrappers._IOption<RAST._IExpr> optRhs) : base() {
      this._declareType = declareType;
      this._name = name;
      this._optType = optType;
      this._optRhs = optRhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_DeclareVar(_declareType, _name, _optType, _optRhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_DeclareVar;
      return oth != null && object.Equals(this._declareType, oth._declareType) && object.Equals(this._name, oth._name) && object.Equals(this._optType, oth._optType) && object.Equals(this._optRhs, oth._optRhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._declareType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optRhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.DeclareVar";
      s += "(";
      s += Dafny.Helpers.ToString(this._declareType);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._optRhs);
      s += ")";
      return s;
    }
  }
  public class Expr_AssignVar : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _rhs;
    public Expr_AssignVar(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr rhs) : base() {
      this._name = name;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_AssignVar(_name, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_AssignVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.AssignVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_IfExpr : Expr {
    public readonly RAST._IExpr _cond;
    public readonly RAST._IExpr _thn;
    public readonly RAST._IExpr _els;
    public Expr_IfExpr(RAST._IExpr cond, RAST._IExpr thn, RAST._IExpr els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_IfExpr(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_IfExpr;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.IfExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expr_Loop : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optCond;
    public readonly RAST._IExpr _underlying;
    public Expr_Loop(Std.Wrappers._IOption<RAST._IExpr> optCond, RAST._IExpr underlying) : base() {
      this._optCond = optCond;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Loop(_optCond, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Loop;
      return oth != null && object.Equals(this._optCond, oth._optCond) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optCond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Loop";
      s += "(";
      s += Dafny.Helpers.ToString(this._optCond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_For : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IExpr _range;
    public readonly RAST._IExpr _body;
    public Expr_For(Dafny.ISequence<Dafny.Rune> name, RAST._IExpr range, RAST._IExpr body) : base() {
      this._name = name;
      this._range = range;
      this._body = body;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_For(_name, _range, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_For;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._range, oth._range) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._range));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.For";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._range);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expr_Labelled : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly RAST._IExpr _underlying;
    public Expr_Labelled(Dafny.ISequence<Dafny.Rune> lbl, RAST._IExpr underlying) : base() {
      this._lbl = lbl;
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Labelled(_lbl, _underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Labelled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Labelled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_Break : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Break(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Break;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Continue : Expr {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _optLbl;
    public Expr_Continue(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> optLbl) : base() {
      this._optLbl = optLbl;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Continue(_optLbl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Continue;
      return oth != null && object.Equals(this._optLbl, oth._optLbl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optLbl));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Continue";
      s += "(";
      s += Dafny.Helpers.ToString(this._optLbl);
      s += ")";
      return s;
    }
  }
  public class Expr_Return : Expr {
    public readonly Std.Wrappers._IOption<RAST._IExpr> _optExpr;
    public Expr_Return(Std.Wrappers._IOption<RAST._IExpr> optExpr) : base() {
      this._optExpr = optExpr;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Return(_optExpr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Return;
      return oth != null && object.Equals(this._optExpr, oth._optExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._optExpr));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._optExpr);
      s += ")";
      return s;
    }
  }
  public class Expr_CallType : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IType> _typeParameters;
    public Expr_CallType(RAST._IExpr obj, Dafny.ISequence<RAST._IType> typeParameters) : base() {
      this._obj = obj;
      this._typeParameters = typeParameters;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_CallType(_obj, _typeParameters);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_CallType;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._typeParameters, oth._typeParameters);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParameters));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.CallType";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParameters);
      s += ")";
      return s;
    }
  }
  public class Expr_Call : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<RAST._IExpr> _arguments;
    public Expr_Call(RAST._IExpr obj, Dafny.ISequence<RAST._IExpr> arguments) : base() {
      this._obj = obj;
      this._arguments = arguments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Call(_obj, _arguments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Call;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._arguments, oth._arguments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arguments));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arguments);
      s += ")";
      return s;
    }
  }
  public class Expr_Select : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_Select(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Select(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Select;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_MemberSelect : Expr {
    public readonly RAST._IExpr _obj;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Expr_MemberSelect(RAST._IExpr obj, Dafny.ISequence<Dafny.Rune> name) : base() {
      this._obj = obj;
      this._name = name;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_MemberSelect(_obj, _name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_MemberSelect;
      return oth != null && object.Equals(this._obj, oth._obj) && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._obj));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.MemberSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._obj);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._ITypeParam> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._ITypeParam> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int) hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._ITypeParam>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._ITypeParam> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<RAST._ITypeParam> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      var _pat_let_tv8 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_2180_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_2181_formal) => {
        return (_2181_formal)._ToString(_2180_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source62) => {
        if (_source62.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _2182___mcc_h0 = _source62.dtor_value;
          RAST._IType _2183_t = _2182___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_2183_t)._ToString(_pat_let_tv5));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source63) => {
        if (_source63.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _2184___mcc_h2 = _source63.dtor_value;
          RAST._IExpr _2185_body = _2184___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv6), RAST.__default.IND), (_2185_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv7, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv8), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
            i = _in113;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2186___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2186___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _2186___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2186___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(new BigInteger(2));
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _2186___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2186___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _2187___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_2187___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _2187___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2187___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in117 = (i).Drop(BigInteger.One);
        i = _in117;
        goto TAIL_CALL_START;
      } else {
        _2187___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_2187___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in118 = (i).Drop(BigInteger.One);
        i = _in118;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i))) && (!(DCOMP.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust__id(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _2188_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _2188_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static bool UnicodeChars { get {
      return true;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMP.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMP._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMP._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMP._IOwnership>(DCOMP.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMP._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> dtor_ownerships { get; }
    _IEnvironment DowncastClone();
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMP._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMP._IOwnership ownership);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _ownerships;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      this._names = names;
      this._ownerships = ownerships;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_names, _ownerships);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMP.Environment;
      return oth != null && object.Equals(this._names, oth._names) && object.Equals(this._ownerships, oth._ownerships);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ownerships));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompiler.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ownerships);
      s += ")";
      return s;
    }
    private static readonly DCOMP._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Empty);
    public static DCOMP._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMP._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMP._IEnvironment>(DCOMP.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMP._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      return new Environment(names, ownerships);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> ownerships) {
      return create(names, ownerships);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> dtor_ownerships {
      get {
        return this._ownerships;
      }
    }
    public static DCOMP._IEnvironment Empty() {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements());
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Select((this).dtor_ownerships,name), DCOMP.Ownership.create_OwnershipBorrowed()));
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Select((this).dtor_ownerships,name), DCOMP.Ownership.create_OwnershipBorrowedMut()));
    }
    public DCOMP._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMP._IOwnership ownership)
    {
      return DCOMP.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update((this).dtor_ownerships, name, ownership));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _2189_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _2189_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _2189_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _2190_i;
      _2190_i = BigInteger.Zero;
      while ((_2190_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _2191_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source64 = (body).Select(_2190_i);
        if (_source64.is_Module) {
          DAST._IModule _2192___mcc_h0 = _source64.dtor_Module_a0;
          DAST._IModule _2193_m = _2192___mcc_h0;
          RAST._IMod _2194_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_2193_m, containingPath);
          _2194_mm = _out16;
          _2191_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_2194_mm));
        } else if (_source64.is_Class) {
          DAST._IClass _2195___mcc_h1 = _source64.dtor_Class_a0;
          DAST._IClass _2196_c = _2195___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_2196_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_2196_c).dtor_name)));
          _2191_generated = _out17;
        } else if (_source64.is_Trait) {
          DAST._ITrait _2197___mcc_h2 = _source64.dtor_Trait_a0;
          DAST._ITrait _2198_t = _2197___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _2199_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_2198_t, containingPath);
          _2199_tt = _out18;
          _2191_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_2199_tt));
        } else if (_source64.is_Newtype) {
          DAST._INewtype _2200___mcc_h3 = _source64.dtor_Newtype_a0;
          DAST._INewtype _2201_n = _2200___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_2201_n);
          _2191_generated = _out19;
        } else {
          DAST._IDatatype _2202___mcc_h4 = _source64.dtor_Datatype_a0;
          DAST._IDatatype _2203_d = _2202___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_2203_d);
          _2191_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _2191_generated);
        _2190_i = (_2190_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _2204_tpI;
      _2204_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_2204_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _2205_tp;
          _2205_tp = (@params).Select(_2204_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2205_tp));
          RAST._IType _2206_genTp;
          RAST._IType _out21;
          _out21 = DCOMP.COMP.GenType(_2205_tp, false, false);
          _2206_genTp = _out21;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2206_genTp)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _2204_tpI = (_2204_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _2207_baseConstraints;
      _2207_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _2207_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2208_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2209_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2210_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2211_whereConstraints;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<RAST._ITypeParam> _out23;
      Dafny.ISequence<RAST._ITypeParam> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25);
      _2208_typeParamsSet = _out22;
      _2209_sTypeParams = _out23;
      _2210_sConstrainedTypeParams = _out24;
      _2211_whereConstraints = _out25;
      Dafny.ISequence<Dafny.Rune> _2212_constrainedTypeParams;
      _2212_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2210_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _2213_fields;
      _2213_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _2214_fieldInits;
      _2214_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _2215_fieldI;
      _2215_fieldI = BigInteger.Zero;
      while ((_2215_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _2216_field;
        _2216_field = ((c).dtor_fields).Select(_2215_fieldI);
        RAST._IType _2217_fieldType;
        RAST._IType _out26;
        _out26 = DCOMP.COMP.GenType(((_2216_field).dtor_formal).dtor_typ, false, false);
        _2217_fieldType = _out26;
        _2213_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2213_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_2216_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_2217_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source65 = (_2216_field).dtor_defaultValue;
        if (_source65.is_None) {
          {
            _2214_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2214_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2216_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _2218___mcc_h0 = _source65.dtor_value;
          DAST._IExpression _2219_e = _2218___mcc_h0;
          {
            RAST._IExpr _2220_eStr;
            DCOMP._IOwnership _2221___v36;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2222___v37;
            RAST._IExpr _out27;
            DCOMP._IOwnership _out28;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out29;
            DCOMP.COMP.GenExpr(_2219_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out27, out _out28, out _out29);
            _2220_eStr = _out27;
            _2221___v36 = _out28;
            _2222___v37 = _out29;
            _2214_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2214_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_2216_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), (_2220_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _2215_fieldI = (_2215_fieldI) + (BigInteger.One);
      }
      BigInteger _2223_typeParamI;
      _2223_typeParamI = BigInteger.Zero;
      while ((_2223_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _2224_tpeGen;
        RAST._IType _out30;
        _out30 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2223_typeParamI), false, false);
        _2224_tpeGen = _out30;
        _2213_fields = Dafny.Sequence<RAST._IFormal>.Concat(_2213_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2223_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_2224_tpeGen)))));
        _2214_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2214_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_2223_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _2223_typeParamI = (_2223_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _2225_struct;
      _2225_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _2209_sTypeParams, RAST.Formals.create_NamedFormals(_2213_fields));
      Dafny.ISequence<RAST._IType> _2226_typeParamsAsTypes;
      _2226_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2227_typeParam) => {
        return RAST.__default.RawType((_2227_typeParam).dtor_content);
      })), _2209_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_2225_struct));
      Dafny.ISequence<RAST._IImplMember> _2228_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2229_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out31;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out32;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _2208_typeParamsSet, out _out31, out _out32);
      _2228_implBodyRaw = _out31;
      _2229_traitBodies = _out32;
      Dafny.ISequence<RAST._IImplMember> _2230_implBody;
      _2230_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2214_fieldInits))))), _2228_implBodyRaw);
      RAST._IImpl _2231_i;
      _2231_i = RAST.Impl.create_Impl(_2210_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2226_typeParamsAsTypes), _2211_whereConstraints, _2230_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2231_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _2232_i;
        _2232_i = BigInteger.Zero;
        while ((_2232_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _2233_superClass;
          _2233_superClass = ((c).dtor_superClasses).Select(_2232_i);
          DAST._IType _source66 = _2233_superClass;
          if (_source66.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2234___mcc_h1 = _source66.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2235___mcc_h2 = _source66.dtor_typeArgs;
            DAST._IResolvedType _2236___mcc_h3 = _source66.dtor_resolved;
            DAST._IResolvedType _source67 = _2236___mcc_h3;
            if (_source67.is_Datatype) {
              DAST._IDatatypeType _2237___mcc_h7 = _source67.dtor_datatypeType;
            } else if (_source67.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2238___mcc_h9 = _source67.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _2239___mcc_h10 = _source67.dtor_attributes;
              Dafny.ISequence<DAST._IType> _2240_typeArgs = _2235___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2241_traitPath = _2234___mcc_h1;
              {
                RAST._IType _2242_pathStr;
                RAST._IType _out33;
                _out33 = DCOMP.COMP.GenPath(_2241_traitPath);
                _2242_pathStr = _out33;
                Dafny.ISequence<RAST._IType> _2243_typeArgs;
                Dafny.ISequence<RAST._IType> _out34;
                _out34 = DCOMP.COMP.GenTypeArgs(_2240_typeArgs, false, false);
                _2243_typeArgs = _out34;
                Dafny.ISequence<RAST._IImplMember> _2244_body;
                _2244_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_2229_traitBodies).Contains(_2241_traitPath)) {
                  _2244_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_2229_traitBodies,_2241_traitPath);
                }
                RAST._IType _2245_genSelfPath;
                RAST._IType _out35;
                _out35 = DCOMP.COMP.GenPath(path);
                _2245_genSelfPath = _out35;
                RAST._IModDecl _2246_x;
                _2246_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2210_sConstrainedTypeParams, RAST.Type.create_TypeApp(_2242_pathStr, _2243_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_2245_genSelfPath, _2226_typeParamsAsTypes)), _2211_whereConstraints, _2244_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_2246_x));
              }
            } else {
              DAST._IType _2247___mcc_h13 = _source67.dtor_baseType;
              DAST._INewtypeRange _2248___mcc_h14 = _source67.dtor_range;
              bool _2249___mcc_h15 = _source67.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _2250___mcc_h16 = _source67.dtor_attributes;
            }
          } else if (_source66.is_Nullable) {
            DAST._IType _2251___mcc_h21 = _source66.dtor_Nullable_a0;
          } else if (_source66.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2252___mcc_h23 = _source66.dtor_Tuple_a0;
          } else if (_source66.is_Array) {
            DAST._IType _2253___mcc_h25 = _source66.dtor_element;
            BigInteger _2254___mcc_h26 = _source66.dtor_dims;
          } else if (_source66.is_Seq) {
            DAST._IType _2255___mcc_h29 = _source66.dtor_element;
          } else if (_source66.is_Set) {
            DAST._IType _2256___mcc_h31 = _source66.dtor_element;
          } else if (_source66.is_Multiset) {
            DAST._IType _2257___mcc_h33 = _source66.dtor_element;
          } else if (_source66.is_Map) {
            DAST._IType _2258___mcc_h35 = _source66.dtor_key;
            DAST._IType _2259___mcc_h36 = _source66.dtor_value;
          } else if (_source66.is_SetBuilder) {
            DAST._IType _2260___mcc_h39 = _source66.dtor_element;
          } else if (_source66.is_MapBuilder) {
            DAST._IType _2261___mcc_h41 = _source66.dtor_key;
            DAST._IType _2262___mcc_h42 = _source66.dtor_value;
          } else if (_source66.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2263___mcc_h45 = _source66.dtor_args;
            DAST._IType _2264___mcc_h46 = _source66.dtor_result;
          } else if (_source66.is_Primitive) {
            DAST._IPrimitive _2265___mcc_h49 = _source66.dtor_Primitive_a0;
          } else if (_source66.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2266___mcc_h51 = _source66.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _2267___mcc_h53 = _source66.dtor_TypeArg_a0;
          }
          _2232_i = (_2232_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _2268_d;
      _2268_d = RAST.Impl.create_ImplFor(_2210_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2226_typeParamsAsTypes), _2211_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _2269_defaultImpl;
      _2269_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2268_d));
      RAST._IImpl _2270_p;
      _2270_p = RAST.Impl.create_ImplFor(_2210_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2226_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _2271_printImpl;
      _2271_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2270_p));
      RAST._IImpl _2272_pp;
      _2272_pp = RAST.Impl.create_ImplFor(_2209_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2226_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.Self)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _2273_ptrPartialEqImpl;
      _2273_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_2272_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _2269_defaultImpl), _2271_printImpl), _2273_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _2274_typeParamsSet;
      _2274_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _2275_typeParams;
      _2275_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2276_tpI;
      _2276_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_2276_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _2277_tp;
          _2277_tp = ((t).dtor_typeParams).Select(_2276_tpI);
          _2274_typeParamsSet = Dafny.Set<DAST._IType>.Union(_2274_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_2277_tp));
          RAST._IType _2278_genTp;
          RAST._IType _out36;
          _out36 = DCOMP.COMP.GenType(_2277_tp, false, false);
          _2278_genTp = _out36;
          _2275_typeParams = Dafny.Sequence<RAST._IType>.Concat(_2275_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_2278_genTp));
          _2276_tpI = (_2276_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2279_fullPath;
      _2279_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _2280_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2281___v41;
      Dafny.ISequence<RAST._IImplMember> _out37;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out38;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_2279_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_2279_fullPath, (t).dtor_attributes)), _2274_typeParamsSet, out _out37, out _out38);
      _2280_implBody = _out37;
      _2281___v41 = _out38;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((t).dtor_name)), _2275_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _2280_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2282_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2283_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2284_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2285_whereConstraints;
      Dafny.ISet<DAST._IType> _out39;
      Dafny.ISequence<RAST._ITypeParam> _out40;
      Dafny.ISequence<RAST._ITypeParam> _out41;
      Dafny.ISequence<Dafny.Rune> _out42;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out39, out _out40, out _out41, out _out42);
      _2282_typeParamsSet = _out39;
      _2283_sTypeParams = _out40;
      _2284_sConstrainedTypeParams = _out41;
      _2285_whereConstraints = _out42;
      Dafny.ISequence<RAST._IType> _2286_typeParamsAsTypes;
      _2286_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2287_t) => {
        return RAST.__default.RawType((_2287_t).dtor_content);
      })), _2283_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2288_constrainedTypeParams;
      _2288_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2284_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _2289_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source68 = DCOMP.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source68.is_None) {
        RAST._IType _out43;
        _out43 = DCOMP.COMP.GenType((c).dtor_base, false, false);
        _2289_underlyingType = _out43;
      } else {
        RAST._IType _2290___mcc_h0 = _source68.dtor_value;
        RAST._IType _2291_v = _2290___mcc_h0;
        _2289_underlyingType = _2291_v;
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _2283_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _2289_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _2292_fnBody;
      _2292_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source69 = (c).dtor_witnessExpr;
      if (_source69.is_None) {
        {
          _2292_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _2293___mcc_h1 = _source69.dtor_value;
        DAST._IExpression _2294_e = _2293___mcc_h1;
        {
          RAST._IExpr _2295_eStr;
          DCOMP._IOwnership _2296___v42;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2297___v43;
          RAST._IExpr _out44;
          DCOMP._IOwnership _out45;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out46;
          DCOMP.COMP.GenExpr(_2294_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out44, out _out45, out _out46);
          _2295_eStr = _out44;
          _2296___v42 = _out45;
          _2297___v43 = _out46;
          _2292_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2292_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_2295_eStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _2298_body;
      _2298_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_2292_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2284_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2286_typeParamsAsTypes), _2285_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_2298_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2284_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2286_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2284_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2286_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_2289_underlyingType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _2299_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _2300_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _2301_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _2302_whereConstraints;
      Dafny.ISet<DAST._IType> _out47;
      Dafny.ISequence<RAST._ITypeParam> _out48;
      Dafny.ISequence<RAST._ITypeParam> _out49;
      Dafny.ISequence<Dafny.Rune> _out50;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out47, out _out48, out _out49, out _out50);
      _2299_typeParamsSet = _out47;
      _2300_sTypeParams = _out48;
      _2301_sConstrainedTypeParams = _out49;
      _2302_whereConstraints = _out50;
      Dafny.ISequence<RAST._IType> _2303_typeParamsAsTypes;
      _2303_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_2304_t) => {
        return RAST.__default.RawType((_2304_t).dtor_content);
      })), _2300_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _2305_constrainedTypeParams;
      _2305_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_2301_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<RAST._IEnumCase> _2306_ctors;
      _2306_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _2307_i;
      _2307_i = BigInteger.Zero;
      while ((_2307_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2308_ctor;
        _2308_ctor = ((c).dtor_ctors).Select(_2307_i);
        Dafny.ISequence<RAST._IFormal> _2309_ctorArgs;
        _2309_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _2310_j;
        _2310_j = BigInteger.Zero;
        while ((_2310_j) < (new BigInteger(((_2308_ctor).dtor_args).Count))) {
          DAST._IFormal _2311_formal;
          _2311_formal = ((_2308_ctor).dtor_args).Select(_2310_j);
          RAST._IType _2312_formalType;
          RAST._IType _out51;
          _out51 = DCOMP.COMP.GenType((_2311_formal).dtor_typ, false, false);
          _2312_formalType = _out51;
          if ((c).dtor_isCo) {
            _2309_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2309_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2311_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_2312_formalType)))));
          } else {
            _2309_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_2309_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2311_formal).dtor_name), _2312_formalType)));
          }
          _2310_j = (_2310_j) + (BigInteger.One);
        }
        _2306_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2306_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_2308_ctor).dtor_name), RAST.Formals.create_NamedFormals(_2309_ctorArgs))));
        _2307_i = (_2307_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2313_selfPath;
      _2313_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _2314_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _2315_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out52;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out53;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_2313_selfPath, (c).dtor_attributes))), _2299_typeParamsSet, out _out52, out _out53);
      _2314_implBodyRaw = _out52;
      _2315_traitBodies = _out53;
      Dafny.ISequence<RAST._IImplMember> _2316_implBody;
      _2316_implBody = _2314_implBodyRaw;
      _2307_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2317_emittedFields;
      _2317_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_2307_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2318_ctor;
        _2318_ctor = ((c).dtor_ctors).Select(_2307_i);
        BigInteger _2319_j;
        _2319_j = BigInteger.Zero;
        while ((_2319_j) < (new BigInteger(((_2318_ctor).dtor_args).Count))) {
          DAST._IFormal _2320_formal;
          _2320_formal = ((_2318_ctor).dtor_args).Select(_2319_j);
          if (!((_2317_emittedFields).Contains((_2320_formal).dtor_name))) {
            _2317_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2317_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_2320_formal).dtor_name));
            RAST._IType _2321_formalType;
            RAST._IType _out54;
            _out54 = DCOMP.COMP.GenType((_2320_formal).dtor_typ, false, false);
            _2321_formalType = _out54;
            Dafny.ISequence<RAST._IMatchCase> _2322_cases;
            _2322_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _2323_k;
            _2323_k = BigInteger.Zero;
            while ((_2323_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _2324_ctor2;
              _2324_ctor2 = ((c).dtor_ctors).Select(_2323_k);
              Dafny.ISequence<Dafny.Rune> _2325_pattern;
              _2325_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_2324_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _2326_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _2327_l;
              _2327_l = BigInteger.Zero;
              bool _2328_hasMatchingField;
              _2328_hasMatchingField = false;
              while ((_2327_l) < (new BigInteger(((_2324_ctor2).dtor_args).Count))) {
                DAST._IFormal _2329_formal2;
                _2329_formal2 = ((_2324_ctor2).dtor_args).Select(_2327_l);
                if (((_2320_formal).dtor_name).Equals((_2329_formal2).dtor_name)) {
                  _2328_hasMatchingField = true;
                }
                _2325_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2325_pattern, DCOMP.__default.escapeIdent((_2329_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _2327_l = (_2327_l) + (BigInteger.One);
              }
              _2325_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_2325_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_2328_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _2326_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_2320_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _2326_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2320_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _2326_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _2330_ctorMatch;
              _2330_ctorMatch = RAST.MatchCase.create(_2325_pattern, RAST.Expr.create_RawExpr(_2326_rhs));
              _2322_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2322_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_2330_ctorMatch));
              _2323_k = (_2323_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _2322_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2322_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _2331_methodBody;
            _2331_methodBody = RAST.Expr.create_Match(RAST.__default.self, _2322_cases);
            _2316_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_2316_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMP.__default.escapeIdent((_2320_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_2321_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2331_methodBody)))));
          }
          _2319_j = (_2319_j) + (BigInteger.One);
        }
        _2307_i = (_2307_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _2332_typeI;
        _2332_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _2333_types;
        _2333_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_2332_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _2334_genTp;
          RAST._IType _out55;
          _out55 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_2332_typeI), false, false);
          _2334_genTp = _out55;
          _2333_types = Dafny.Sequence<RAST._IType>.Concat(_2333_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_2334_genTp))));
          _2332_typeI = (_2332_typeI) + (BigInteger.One);
        }
        _2306_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_2306_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_2335_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _2335_tpe);
})), _2333_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _2336_enumBody;
      _2336_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _2300_sTypeParams, _2306_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_2301_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2303_typeParamsAsTypes), _2302_whereConstraints, _2316_implBody)));
      _2307_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _2337_printImplBodyCases;
      _2337_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_2307_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _2338_ctor;
        _2338_ctor = ((c).dtor_ctors).Select(_2307_i);
        Dafny.ISequence<Dafny.Rune> _2339_ctorMatch;
        _2339_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_2338_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _2340_modulePrefix;
        _2340_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _2341_printRhs;
        _2341_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _2340_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_2338_ctor).dtor_name)), (((_2338_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _2342_j;
        _2342_j = BigInteger.Zero;
        while ((_2342_j) < (new BigInteger(((_2338_ctor).dtor_args).Count))) {
          DAST._IFormal _2343_formal;
          _2343_formal = ((_2338_ctor).dtor_args).Select(_2342_j);
          _2339_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_2339_ctorMatch, DCOMP.__default.escapeIdent((_2343_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_2342_j).Sign == 1) {
            _2341_printRhs = (_2341_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _2341_printRhs = (_2341_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_2343_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _2342_j = (_2342_j) + (BigInteger.One);
        }
        _2339_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_2339_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_2338_ctor).dtor_hasAnyArgs) {
          _2341_printRhs = (_2341_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _2341_printRhs = (_2341_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _2337_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2337_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2339_ctorMatch), RAST.Expr.create_Block(_2341_printRhs))));
        _2307_i = (_2307_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _2337_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_2337_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _2344_printImplBody;
      _2344_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _2337_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _2345_printImpl;
      _2345_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2301_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2303_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2344_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _2346_defaultImpl;
      _2346_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _2307_i = BigInteger.Zero;
        RAST._IExpr _2347_structName;
        _2347_structName = (RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((c).dtor_name))).MSel(DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _2348_structAssignments;
        _2348_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_2307_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _2349_formal;
          _2349_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_2307_i);
          _2348_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_2348_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_2349_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _2307_i = (_2307_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _2350_defaultConstrainedTypeParams;
        _2350_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_2300_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        _2346_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_2350_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMP.__default.escapeIdent((c).dtor_name)), _2303_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_2347_structName, _2348_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_2336_enumBody, _2345_printImpl), _2346_defaultImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"));
        BigInteger _hi4 = new BigInteger((p).Count);
        for (BigInteger _2351_i = BigInteger.Zero; _2351_i < _hi4; _2351_i++) {
          r = (r).MSel(DCOMP.__default.escapeIdent(((p).Select(_2351_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"));
        BigInteger _hi5 = new BigInteger((p).Count);
        for (BigInteger _2352_i = BigInteger.Zero; _2352_i < _hi5; _2352_i++) {
          r = (r).MSel(DCOMP.__default.escapeIdent(((p).Select(_2352_i))));
        }
      }
      return r;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _2353_i;
        _2353_i = BigInteger.Zero;
        while ((_2353_i) < (new BigInteger((args).Count))) {
          RAST._IType _2354_genTp;
          RAST._IType _out56;
          _out56 = DCOMP.COMP.GenType((args).Select(_2353_i), inBinding, inFn);
          _2354_genTp = _out56;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_2354_genTp));
          _2353_i = (_2353_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source70 = c;
      if (_source70.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2355___mcc_h0 = _source70.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _2356___mcc_h1 = _source70.dtor_typeArgs;
        DAST._IResolvedType _2357___mcc_h2 = _source70.dtor_resolved;
        DAST._IResolvedType _2358_resolved = _2357___mcc_h2;
        Dafny.ISequence<DAST._IType> _2359_args = _2356___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2360_p = _2355___mcc_h0;
        {
          RAST._IType _2361_t;
          RAST._IType _out57;
          _out57 = DCOMP.COMP.GenPath(_2360_p);
          _2361_t = _out57;
          Dafny.ISequence<RAST._IType> _2362_typeArgs;
          Dafny.ISequence<RAST._IType> _out58;
          _out58 = DCOMP.COMP.GenTypeArgs(_2359_args, inBinding, inFn);
          _2362_typeArgs = _out58;
          s = RAST.Type.create_TypeApp(_2361_t, _2362_typeArgs);
          DAST._IResolvedType _source71 = _2358_resolved;
          if (_source71.is_Datatype) {
            DAST._IDatatypeType _2363___mcc_h21 = _source71.dtor_datatypeType;
            DAST._IDatatypeType _source72 = _2363___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2364___mcc_h22 = _source72.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2365___mcc_h23 = _source72.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2366_attributes = _2365___mcc_h23;
            {
              if (DCOMP.COMP.IsRcWrapped(_2366_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source71.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2367___mcc_h24 = _source71.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _2368___mcc_h25 = _source71.dtor_attributes;
            {
              if ((_2360_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::any::Any")));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _2369___mcc_h26 = _source71.dtor_baseType;
            DAST._INewtypeRange _2370___mcc_h27 = _source71.dtor_range;
            bool _2371___mcc_h28 = _source71.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _2372___mcc_h29 = _source71.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _2373_attributes = _2372___mcc_h29;
            bool _2374_erased = _2371___mcc_h28;
            DAST._INewtypeRange _2375_range = _2370___mcc_h27;
            DAST._IType _2376_t = _2369___mcc_h26;
            {
              if (_2374_erased) {
                Std.Wrappers._IOption<RAST._IType> _source73 = DCOMP.COMP.NewtypeToRustType(_2376_t, _2375_range);
                if (_source73.is_None) {
                } else {
                  RAST._IType _2377___mcc_h30 = _source73.dtor_value;
                  RAST._IType _2378_v = _2377___mcc_h30;
                  s = _2378_v;
                }
              }
            }
          }
        }
      } else if (_source70.is_Nullable) {
        DAST._IType _2379___mcc_h3 = _source70.dtor_Nullable_a0;
        DAST._IType _2380_inner = _2379___mcc_h3;
        {
          RAST._IType _2381_innerExpr;
          RAST._IType _out59;
          _out59 = DCOMP.COMP.GenType(_2380_inner, inBinding, inFn);
          _2381_innerExpr = _out59;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_2381_innerExpr));
        }
      } else if (_source70.is_Tuple) {
        Dafny.ISequence<DAST._IType> _2382___mcc_h4 = _source70.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _2383_types = _2382___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _2384_args;
          _2384_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2385_i;
          _2385_i = BigInteger.Zero;
          while ((_2385_i) < (new BigInteger((_2383_types).Count))) {
            RAST._IType _2386_generated;
            RAST._IType _out60;
            _out60 = DCOMP.COMP.GenType((_2383_types).Select(_2385_i), inBinding, inFn);
            _2386_generated = _out60;
            _2384_args = Dafny.Sequence<RAST._IType>.Concat(_2384_args, Dafny.Sequence<RAST._IType>.FromElements(_2386_generated));
            _2385_i = (_2385_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_2384_args);
        }
      } else if (_source70.is_Array) {
        DAST._IType _2387___mcc_h5 = _source70.dtor_element;
        BigInteger _2388___mcc_h6 = _source70.dtor_dims;
        BigInteger _2389_dims = _2388___mcc_h6;
        DAST._IType _2390_element = _2387___mcc_h5;
        {
          RAST._IType _2391_elem;
          RAST._IType _out61;
          _out61 = DCOMP.COMP.GenType(_2390_element, inBinding, inFn);
          _2391_elem = _out61;
          s = _2391_elem;
          BigInteger _2392_i;
          _2392_i = BigInteger.Zero;
          while ((_2392_i) < (_2389_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _2392_i = (_2392_i) + (BigInteger.One);
          }
        }
      } else if (_source70.is_Seq) {
        DAST._IType _2393___mcc_h7 = _source70.dtor_element;
        DAST._IType _2394_element = _2393___mcc_h7;
        {
          RAST._IType _2395_elem;
          RAST._IType _out62;
          _out62 = DCOMP.COMP.GenType(_2394_element, inBinding, inFn);
          _2395_elem = _out62;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_2395_elem));
        }
      } else if (_source70.is_Set) {
        DAST._IType _2396___mcc_h8 = _source70.dtor_element;
        DAST._IType _2397_element = _2396___mcc_h8;
        {
          RAST._IType _2398_elem;
          RAST._IType _out63;
          _out63 = DCOMP.COMP.GenType(_2397_element, inBinding, inFn);
          _2398_elem = _out63;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_2398_elem));
        }
      } else if (_source70.is_Multiset) {
        DAST._IType _2399___mcc_h9 = _source70.dtor_element;
        DAST._IType _2400_element = _2399___mcc_h9;
        {
          RAST._IType _2401_elem;
          RAST._IType _out64;
          _out64 = DCOMP.COMP.GenType(_2400_element, inBinding, inFn);
          _2401_elem = _out64;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_2401_elem));
        }
      } else if (_source70.is_Map) {
        DAST._IType _2402___mcc_h10 = _source70.dtor_key;
        DAST._IType _2403___mcc_h11 = _source70.dtor_value;
        DAST._IType _2404_value = _2403___mcc_h11;
        DAST._IType _2405_key = _2402___mcc_h10;
        {
          RAST._IType _2406_keyType;
          RAST._IType _out65;
          _out65 = DCOMP.COMP.GenType(_2405_key, inBinding, inFn);
          _2406_keyType = _out65;
          RAST._IType _2407_valueType;
          RAST._IType _out66;
          _out66 = DCOMP.COMP.GenType(_2404_value, inBinding, inFn);
          _2407_valueType = _out66;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_2406_keyType, _2407_valueType));
        }
      } else if (_source70.is_SetBuilder) {
        DAST._IType _2408___mcc_h12 = _source70.dtor_element;
        DAST._IType _2409_elem = _2408___mcc_h12;
        {
          RAST._IType _2410_elemType;
          RAST._IType _out67;
          _out67 = DCOMP.COMP.GenType(_2409_elem, inBinding, inFn);
          _2410_elemType = _out67;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2410_elemType));
        }
      } else if (_source70.is_MapBuilder) {
        DAST._IType _2411___mcc_h13 = _source70.dtor_key;
        DAST._IType _2412___mcc_h14 = _source70.dtor_value;
        DAST._IType _2413_value = _2412___mcc_h14;
        DAST._IType _2414_key = _2411___mcc_h13;
        {
          RAST._IType _2415_keyType;
          RAST._IType _out68;
          _out68 = DCOMP.COMP.GenType(_2414_key, inBinding, inFn);
          _2415_keyType = _out68;
          RAST._IType _2416_valueType;
          RAST._IType _out69;
          _out69 = DCOMP.COMP.GenType(_2413_value, inBinding, inFn);
          _2416_valueType = _out69;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_2415_keyType, _2416_valueType));
        }
      } else if (_source70.is_Arrow) {
        Dafny.ISequence<DAST._IType> _2417___mcc_h15 = _source70.dtor_args;
        DAST._IType _2418___mcc_h16 = _source70.dtor_result;
        DAST._IType _2419_result = _2418___mcc_h16;
        Dafny.ISequence<DAST._IType> _2420_args = _2417___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _2421_argTypes;
          _2421_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _2422_i;
          _2422_i = BigInteger.Zero;
          while ((_2422_i) < (new BigInteger((_2420_args).Count))) {
            RAST._IType _2423_generated;
            RAST._IType _out70;
            _out70 = DCOMP.COMP.GenType((_2420_args).Select(_2422_i), inBinding, true);
            _2423_generated = _out70;
            _2421_argTypes = Dafny.Sequence<RAST._IType>.Concat(_2421_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_2423_generated)));
            _2422_i = (_2422_i) + (BigInteger.One);
          }
          RAST._IType _2424_resultType;
          RAST._IType _out71;
          _out71 = DCOMP.COMP.GenType(_2419_result, inBinding, (inFn) || (inBinding));
          _2424_resultType = _out71;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_2421_argTypes, RAST.Type.create_IntersectionType(_2424_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source70.is_Primitive) {
        DAST._IPrimitive _2425___mcc_h17 = _source70.dtor_Primitive_a0;
        DAST._IPrimitive _2426_p = _2425___mcc_h17;
        {
          DAST._IPrimitive _source74 = _2426_p;
          if (_source74.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source74.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source74.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar)));
          } else if (_source74.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMP.__default.DafnyChar);
          }
        }
      } else if (_source70.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _2427___mcc_h18 = _source70.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _2428_v = _2427___mcc_h18;
        s = RAST.__default.RawType(_2428_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _2429___mcc_h19 = _source70.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source75 = _2429___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _2430___mcc_h20 = _source75;
        Dafny.ISequence<Dafny.Rune> _2431_name = _2430___mcc_h20;
        s = RAST.__default.RawType(DCOMP.__default.escapeIdent(_2431_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _2432_i;
      _2432_i = BigInteger.Zero;
      while ((_2432_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source76 = (body).Select(_2432_i);
        DAST._IMethod _2433___mcc_h0 = _source76;
        DAST._IMethod _2434_m = _2433___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source77 = (_2434_m).dtor_overridingPath;
          if (_source77.is_None) {
            {
              RAST._IImplMember _2435_generated;
              RAST._IImplMember _out72;
              _out72 = DCOMP.COMP.GenMethod(_2434_m, forTrait, enclosingType, enclosingTypeParams);
              _2435_generated = _out72;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_2435_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2436___mcc_h1 = _source77.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2437_p = _2436___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _2438_existing;
              _2438_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_2437_p)) {
                _2438_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_2437_p);
              }
              RAST._IImplMember _2439_genMethod;
              RAST._IImplMember _out73;
              _out73 = DCOMP.COMP.GenMethod(_2434_m, true, enclosingType, enclosingTypeParams);
              _2439_genMethod = _out73;
              _2438_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_2438_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_2439_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_2437_p, _2438_existing)));
            }
          }
        }
        _2432_i = (_2432_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _2440_i;
      _2440_i = BigInteger.Zero;
      while ((_2440_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _2441_param;
        _2441_param = (@params).Select(_2440_i);
        RAST._IType _2442_paramType;
        RAST._IType _out74;
        _out74 = DCOMP.COMP.GenType((_2441_param).dtor_typ, false, false);
        _2442_paramType = _out74;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_2441_param).dtor_name), RAST.Type.create_Borrowed(_2442_paramType))));
        _2440_i = (_2440_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _2443_params;
      Dafny.ISequence<RAST._IFormal> _out75;
      _out75 = DCOMP.COMP.GenParams((m).dtor_params);
      _2443_params = _out75;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2444_paramNames;
      _2444_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _2445_paramOwnerships;
      _2445_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
      BigInteger _2446_paramI;
      _2446_paramI = BigInteger.Zero;
      while ((_2446_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        Dafny.ISequence<Dafny.Rune> _2447_name;
        _2447_name = (((m).dtor_params).Select(_2446_paramI)).dtor_name;
        _2444_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_2444_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_2447_name));
        _2445_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_2445_paramOwnerships, _2447_name, DCOMP.Ownership.create_OwnershipBorrowed());
        _2446_paramI = (_2446_paramI) + (BigInteger.One);
      }
      DCOMP._IEnvironment _2448_env;
      _2448_env = DCOMP.Environment.create(_2444_paramNames, _2445_paramOwnerships);
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _2443_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _2443_params);
        } else {
          RAST._IType _2449_tpe;
          RAST._IType _out76;
          _out76 = DCOMP.COMP.GenType(enclosingType, false, false);
          _2449_tpe = _out76;
          _2443_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_2449_tpe))), _2443_params);
        }
      }
      Dafny.ISequence<RAST._IType> _2450_retTypeArgs;
      _2450_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _2451_typeI;
      _2451_typeI = BigInteger.Zero;
      while ((_2451_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _2452_typeExpr;
        RAST._IType _out77;
        _out77 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_2451_typeI), false, false);
        _2452_typeExpr = _out77;
        _2450_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_2450_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_2452_typeExpr));
        _2451_typeI = (_2451_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _2453_visibility;
      _2453_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _2454_fnName;
      _2454_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _2455_typeParamsFiltered;
      _2455_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _2456_typeParamI;
      _2456_typeParamI = BigInteger.Zero;
      while ((_2456_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _2457_typeParam;
        _2457_typeParam = ((m).dtor_typeParams).Select(_2456_typeParamI);
        if (!((enclosingTypeParams).Contains(_2457_typeParam))) {
          _2455_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_2455_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_2457_typeParam));
        }
        _2456_typeParamI = (_2456_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _2458_whereClauses;
      _2458_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _2459_typeParams;
      _2459_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_2455_typeParamsFiltered).Count)).Sign == 1) {
        _2458_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_2458_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _2460_i;
        _2460_i = BigInteger.Zero;
        while ((_2460_i) < (new BigInteger((_2455_typeParamsFiltered).Count))) {
          RAST._IType _2461_typeExpr;
          RAST._IType _out78;
          _out78 = DCOMP.COMP.GenType((_2455_typeParamsFiltered).Select(_2460_i), false, false);
          _2461_typeExpr = _out78;
          _2459_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_2459_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_2461_typeExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _2460_i = (_2460_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _2462_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _2463_earlyReturn;
        _2463_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source78 = (m).dtor_outVars;
        if (_source78.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2464___mcc_h0 = _source78.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2465_outVars = _2464___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _2466_tupleArgs;
            _2466_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _2467_outI;
            _2467_outI = BigInteger.Zero;
            while ((_2467_outI) < (new BigInteger((_2465_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _2468_outVar;
              _2468_outVar = (_2465_outVars).Select(_2467_outI);
              _2466_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_2466_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent((_2468_outVar)))));
              _2467_outI = (_2467_outI) + (BigInteger.One);
            }
            _2463_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_2466_tupleArgs)));
          }
        }
        RAST._IExpr _2469_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2470___v47;
        RAST._IExpr _out79;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out80;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _2448_env, true, _2463_earlyReturn, out _out79, out _out80);
        _2469_body = _out79;
        _2470___v47 = _out80;
        _2462_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_2469_body);
      } else {
        _2462_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_2453_visibility, RAST.Fn.create(_2454_fnName, _2459_typeParams, _2443_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_2450_retTypeArgs).Count)) == (BigInteger.One)) ? ((_2450_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_2450_retTypeArgs)))), _2458_whereClauses, _2462_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2471_declarations;
      _2471_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _2472_i;
      _2472_i = BigInteger.Zero;
      while ((_2472_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _2473_stmt;
        _2473_stmt = (stmts).Select(_2472_i);
        RAST._IExpr _2474_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2475_recIdents;
        RAST._IExpr _out81;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out82;
        DCOMP.COMP.GenStmt(_2473_stmt, selfIdent, env, (isLast) && ((_2472_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out81, out _out82);
        _2474_stmtExpr = _out81;
        _2475_recIdents = _out82;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_2475_recIdents, _2471_declarations));
        DAST._IStatement _source79 = _2473_stmt;
        if (_source79.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _2476___mcc_h0 = _source79.dtor_name;
          DAST._IType _2477___mcc_h1 = _source79.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _2478___mcc_h2 = _source79.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _2479_name = _2476___mcc_h0;
          {
            _2471_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2471_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2479_name));
          }
        } else if (_source79.is_Assign) {
          DAST._IAssignLhs _2480___mcc_h6 = _source79.dtor_lhs;
          DAST._IExpression _2481___mcc_h7 = _source79.dtor_value;
        } else if (_source79.is_If) {
          DAST._IExpression _2482___mcc_h10 = _source79.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2483___mcc_h11 = _source79.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _2484___mcc_h12 = _source79.dtor_els;
        } else if (_source79.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _2485___mcc_h16 = _source79.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _2486___mcc_h17 = _source79.dtor_body;
        } else if (_source79.is_While) {
          DAST._IExpression _2487___mcc_h20 = _source79.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _2488___mcc_h21 = _source79.dtor_body;
        } else if (_source79.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _2489___mcc_h24 = _source79.dtor_boundName;
          DAST._IType _2490___mcc_h25 = _source79.dtor_boundType;
          DAST._IExpression _2491___mcc_h26 = _source79.dtor_over;
          Dafny.ISequence<DAST._IStatement> _2492___mcc_h27 = _source79.dtor_body;
        } else if (_source79.is_Call) {
          DAST._IExpression _2493___mcc_h32 = _source79.dtor_on;
          DAST._ICallName _2494___mcc_h33 = _source79.dtor_callName;
          Dafny.ISequence<DAST._IType> _2495___mcc_h34 = _source79.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _2496___mcc_h35 = _source79.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2497___mcc_h36 = _source79.dtor_outs;
        } else if (_source79.is_Return) {
          DAST._IExpression _2498___mcc_h42 = _source79.dtor_expr;
        } else if (_source79.is_EarlyReturn) {
        } else if (_source79.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2499___mcc_h44 = _source79.dtor_toLabel;
        } else if (_source79.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _2500___mcc_h46 = _source79.dtor_body;
        } else if (_source79.is_JumpTailCallStart) {
        } else if (_source79.is_Halt) {
        } else {
          DAST._IExpression _2501___mcc_h48 = _source79.dtor_Print_a0;
        }
        generated = (generated).Then(_2474_stmtExpr);
        _2472_i = (_2472_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source80 = lhs;
      if (_source80.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _2502___mcc_h0 = _source80.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source81 = _2502___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _2503___mcc_h1 = _source81;
        Dafny.ISequence<Dafny.Rune> _2504_id = _2503___mcc_h1;
        {
          if (((env).IsBorrowed(_2504_id)) || ((env).IsBorrowedMut(_2504_id))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_2504_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_2504_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2504_id);
          needsIIFE = false;
        }
      } else if (_source80.is_Select) {
        DAST._IExpression _2505___mcc_h2 = _source80.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _2506___mcc_h3 = _source80.dtor_field;
        Dafny.ISequence<Dafny.Rune> _2507_field = _2506___mcc_h3;
        DAST._IExpression _2508_on = _2505___mcc_h2;
        {
          RAST._IExpr _2509_onExpr;
          DCOMP._IOwnership _2510_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2511_recIdents;
          RAST._IExpr _out83;
          DCOMP._IOwnership _out84;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out85;
          DCOMP.COMP.GenExpr(_2508_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out83, out _out84, out _out85);
          _2509_onExpr = _out83;
          _2510_onOwned = _out84;
          _2511_recIdents = _out85;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_2509_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _2507_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _2511_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _2512___mcc_h4 = _source80.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _2513___mcc_h5 = _source80.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _2514_indices = _2513___mcc_h5;
        DAST._IExpression _2515_on = _2512___mcc_h4;
        {
          RAST._IExpr _2516_onExpr;
          DCOMP._IOwnership _2517_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2518_recIdents;
          RAST._IExpr _out86;
          DCOMP._IOwnership _out87;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
          DCOMP.COMP.GenExpr(_2515_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out86, out _out87, out _out88);
          _2516_onExpr = _out86;
          _2517_onOwned = _out87;
          _2518_recIdents = _out88;
          readIdents = _2518_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _2519_i;
          _2519_i = BigInteger.Zero;
          while ((_2519_i) < (new BigInteger((_2514_indices).Count))) {
            RAST._IExpr _2520_idx;
            DCOMP._IOwnership _2521___v51;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2522_recIdentsIdx;
            RAST._IExpr _out89;
            DCOMP._IOwnership _out90;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out91;
            DCOMP.COMP.GenExpr((_2514_indices).Select(_2519_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out89, out _out90, out _out91);
            _2520_idx = _out89;
            _2521___v51 = _out90;
            _2522_recIdentsIdx = _out91;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_2519_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_2520_idx)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2522_recIdentsIdx);
            _2519_i = (_2519_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_2516_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _2519_i = BigInteger.Zero;
          while ((_2519_i) < (new BigInteger((_2514_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_2519_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _2519_i = (_2519_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source82 = stmt;
      if (_source82.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _2523___mcc_h0 = _source82.dtor_name;
        DAST._IType _2524___mcc_h1 = _source82.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _2525___mcc_h2 = _source82.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source83 = _2525___mcc_h2;
        if (_source83.is_None) {
          DAST._IType _2526_typ = _2524___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2527_name = _2523___mcc_h0;
          {
            RAST._IType _2528_typeString;
            RAST._IType _out92;
            _out92 = DCOMP.COMP.GenType(_2526_typ, true, false);
            _2528_typeString = _out92;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2527_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2528_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _2529___mcc_h3 = _source83.dtor_value;
          DAST._IExpression _2530_expression = _2529___mcc_h3;
          DAST._IType _2531_typ = _2524___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _2532_name = _2523___mcc_h0;
          {
            RAST._IType _2533_typeString;
            RAST._IType _out93;
            _out93 = DCOMP.COMP.GenType(_2531_typ, true, false);
            _2533_typeString = _out93;
            RAST._IExpr _2534_expr;
            DCOMP._IOwnership _2535___v52;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2536_recIdents;
            RAST._IExpr _out94;
            DCOMP._IOwnership _out95;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out96;
            DCOMP.COMP.GenExpr(_2530_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out94, out _out95, out _out96);
            _2534_expr = _out94;
            _2535___v52 = _out95;
            _2536_recIdents = _out96;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2532_name), Std.Wrappers.Option<RAST._IType>.create_Some(_2533_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2534_expr));
            readIdents = _2536_recIdents;
          }
        }
      } else if (_source82.is_Assign) {
        DAST._IAssignLhs _2537___mcc_h4 = _source82.dtor_lhs;
        DAST._IExpression _2538___mcc_h5 = _source82.dtor_value;
        DAST._IExpression _2539_expression = _2538___mcc_h5;
        DAST._IAssignLhs _2540_lhs = _2537___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _2541_lhsGen;
          bool _2542_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2543_recIdents;
          Dafny.ISequence<Dafny.Rune> _out97;
          bool _out98;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out99;
          DCOMP.COMP.GenAssignLhs(_2540_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, env, out _out97, out _out98, out _out99);
          _2541_lhsGen = _out97;
          _2542_needsIIFE = _out98;
          _2543_recIdents = _out99;
          RAST._IExpr _2544_exprGen;
          DCOMP._IOwnership _2545___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2546_exprIdents;
          RAST._IExpr _out100;
          DCOMP._IOwnership _out101;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
          DCOMP.COMP.GenExpr(_2539_expression, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out100, out _out101, out _out102);
          _2544_exprGen = _out100;
          _2545___v53 = _out101;
          _2546_exprIdents = _out102;
          if (_2542_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_2544_exprGen)), RAST.Expr.create_RawExpr(_2541_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_2541_lhsGen, _2544_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2543_recIdents, _2546_exprIdents);
        }
      } else if (_source82.is_If) {
        DAST._IExpression _2547___mcc_h6 = _source82.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2548___mcc_h7 = _source82.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _2549___mcc_h8 = _source82.dtor_els;
        Dafny.ISequence<DAST._IStatement> _2550_els = _2549___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _2551_thn = _2548___mcc_h7;
        DAST._IExpression _2552_cond = _2547___mcc_h6;
        {
          RAST._IExpr _2553_cond;
          DCOMP._IOwnership _2554___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2555_recIdents;
          RAST._IExpr _out103;
          DCOMP._IOwnership _out104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out105;
          DCOMP.COMP.GenExpr(_2552_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out103, out _out104, out _out105);
          _2553_cond = _out103;
          _2554___v54 = _out104;
          _2555_recIdents = _out105;
          Dafny.ISequence<Dafny.Rune> _2556_condString;
          _2556_condString = (_2553_cond)._ToString(DCOMP.__default.IND);
          readIdents = _2555_recIdents;
          RAST._IExpr _2557_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2558_thnIdents;
          RAST._IExpr _out106;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out107;
          DCOMP.COMP.GenStmts(_2551_thn, selfIdent, env, isLast, earlyReturn, out _out106, out _out107);
          _2557_thn = _out106;
          _2558_thnIdents = _out107;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2558_thnIdents);
          RAST._IExpr _2559_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2560_elsIdents;
          RAST._IExpr _out108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out109;
          DCOMP.COMP.GenStmts(_2550_els, selfIdent, env, isLast, earlyReturn, out _out108, out _out109);
          _2559_els = _out108;
          _2560_elsIdents = _out109;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2560_elsIdents);
          generated = RAST.Expr.create_IfExpr(_2553_cond, _2557_thn, _2559_els);
        }
      } else if (_source82.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _2561___mcc_h9 = _source82.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _2562___mcc_h10 = _source82.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2563_body = _2562___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _2564_lbl = _2561___mcc_h9;
        {
          RAST._IExpr _2565_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2566_bodyIdents;
          RAST._IExpr _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenStmts(_2563_body, selfIdent, env, isLast, earlyReturn, out _out110, out _out111);
          _2565_body = _out110;
          _2566_bodyIdents = _out111;
          readIdents = _2566_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2564_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_2565_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source82.is_While) {
        DAST._IExpression _2567___mcc_h11 = _source82.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _2568___mcc_h12 = _source82.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2569_body = _2568___mcc_h12;
        DAST._IExpression _2570_cond = _2567___mcc_h11;
        {
          RAST._IExpr _2571_cond;
          DCOMP._IOwnership _2572___v55;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2573_recIdents;
          RAST._IExpr _out112;
          DCOMP._IOwnership _out113;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out114;
          DCOMP.COMP.GenExpr(_2570_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out112, out _out113, out _out114);
          _2571_cond = _out112;
          _2572___v55 = _out113;
          _2573_recIdents = _out114;
          readIdents = _2573_recIdents;
          RAST._IExpr _2574_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2575_bodyIdents;
          RAST._IExpr _out115;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out116;
          DCOMP.COMP.GenStmts(_2569_body, selfIdent, env, false, earlyReturn, out _out115, out _out116);
          _2574_body = _out115;
          _2575_bodyIdents = _out116;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2575_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2571_cond), _2574_body);
        }
      } else if (_source82.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _2576___mcc_h13 = _source82.dtor_boundName;
        DAST._IType _2577___mcc_h14 = _source82.dtor_boundType;
        DAST._IExpression _2578___mcc_h15 = _source82.dtor_over;
        Dafny.ISequence<DAST._IStatement> _2579___mcc_h16 = _source82.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2580_body = _2579___mcc_h16;
        DAST._IExpression _2581_over = _2578___mcc_h15;
        DAST._IType _2582_boundType = _2577___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _2583_boundName = _2576___mcc_h13;
        {
          RAST._IExpr _2584_over;
          DCOMP._IOwnership _2585___v56;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2586_recIdents;
          RAST._IExpr _out117;
          DCOMP._IOwnership _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_2581_over, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out117, out _out118, out _out119);
          _2584_over = _out117;
          _2585___v56 = _out118;
          _2586_recIdents = _out119;
          RAST._IType _2587_boundTypeStr;
          RAST._IType _out120;
          _out120 = DCOMP.COMP.GenType(_2582_boundType, false, false);
          _2587_boundTypeStr = _out120;
          readIdents = _2586_recIdents;
          RAST._IExpr _2588_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2589_bodyIdents;
          RAST._IExpr _out121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out122;
          DCOMP.COMP.GenStmts(_2580_body, selfIdent, (env).Add(_2583_boundName, DCOMP.Ownership.create_OwnershipBorrowed()), false, earlyReturn, out _out121, out _out122);
          _2588_body = _out121;
          _2589_bodyIdents = _out122;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2589_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_2583_boundName));
          generated = RAST.Expr.create_For(DCOMP.__default.escapeIdent(_2583_boundName), _2584_over, _2588_body);
        }
      } else if (_source82.is_Call) {
        DAST._IExpression _2590___mcc_h17 = _source82.dtor_on;
        DAST._ICallName _2591___mcc_h18 = _source82.dtor_callName;
        Dafny.ISequence<DAST._IType> _2592___mcc_h19 = _source82.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _2593___mcc_h20 = _source82.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2594___mcc_h21 = _source82.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _2595_maybeOutVars = _2594___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _2596_args = _2593___mcc_h20;
        Dafny.ISequence<DAST._IType> _2597_typeArgs = _2592___mcc_h19;
        DAST._ICallName _2598_name = _2591___mcc_h18;
        DAST._IExpression _2599_on = _2590___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _2600_typeArgString;
          _2600_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_2597_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _2601_typeI;
            _2601_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _2602_typeArgsR;
            _2602_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_2601_typeI) < (new BigInteger((_2597_typeArgs).Count))) {
              RAST._IType _2603_tpe;
              RAST._IType _out123;
              _out123 = DCOMP.COMP.GenType((_2597_typeArgs).Select(_2601_typeI), false, false);
              _2603_tpe = _out123;
              _2602_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_2602_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_2603_tpe));
              _2601_typeI = (_2601_typeI) + (BigInteger.One);
            }
            _2600_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _2602_typeArgsR))._ToString(DCOMP.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _2604_argString;
          _2604_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _2605_i;
          _2605_i = BigInteger.Zero;
          while ((_2605_i) < (new BigInteger((_2596_args).Count))) {
            if ((_2605_i).Sign == 1) {
              _2604_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2604_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _2606_argExpr;
            DCOMP._IOwnership _2607_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2608_argIdents;
            RAST._IExpr _out124;
            DCOMP._IOwnership _out125;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out126;
            DCOMP.COMP.GenExpr((_2596_args).Select(_2605_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out124, out _out125, out _out126);
            _2606_argExpr = _out124;
            _2607_ownership = _out125;
            _2608_argIdents = _out126;
            Dafny.ISequence<Dafny.Rune> _2609_argExprString;
            _2609_argExprString = (_2606_argExpr)._ToString(DCOMP.__default.IND);
            _2604_argString = Dafny.Sequence<Dafny.Rune>.Concat(_2604_argString, _2609_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2608_argIdents);
            _2605_i = (_2605_i) + (BigInteger.One);
          }
          RAST._IExpr _2610_onExpr;
          DCOMP._IOwnership _2611___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2612_enclosingIdents;
          RAST._IExpr _out127;
          DCOMP._IOwnership _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_2599_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out127, out _out128, out _out129);
          _2610_onExpr = _out127;
          _2611___v57 = _out128;
          _2612_enclosingIdents = _out129;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _2612_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _2613_enclosingString;
          _2613_enclosingString = (_2610_onExpr)._ToString(DCOMP.__default.IND);
          DAST._IExpression _source84 = _2599_on;
          if (_source84.is_Literal) {
            DAST._ILiteral _2614___mcc_h26 = _source84.dtor_Literal_a0;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _2615___mcc_h28 = _source84.dtor_Ident_a0;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2616___mcc_h30 = _source84.dtor_Companion_a0;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_2613_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source84.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _2617___mcc_h32 = _source84.dtor_Tuple_a0;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2618___mcc_h34 = _source84.dtor_path;
            Dafny.ISequence<DAST._IType> _2619___mcc_h35 = _source84.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2620___mcc_h36 = _source84.dtor_args;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _2621___mcc_h40 = _source84.dtor_dims;
            DAST._IType _2622___mcc_h41 = _source84.dtor_typ;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_DatatypeValue) {
            DAST._IDatatypeType _2623___mcc_h44 = _source84.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _2624___mcc_h45 = _source84.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _2625___mcc_h46 = _source84.dtor_variant;
            bool _2626___mcc_h47 = _source84.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _2627___mcc_h48 = _source84.dtor_contents;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Convert) {
            DAST._IExpression _2628___mcc_h54 = _source84.dtor_value;
            DAST._IType _2629___mcc_h55 = _source84.dtor_from;
            DAST._IType _2630___mcc_h56 = _source84.dtor_typ;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_SeqConstruct) {
            DAST._IExpression _2631___mcc_h60 = _source84.dtor_length;
            DAST._IExpression _2632___mcc_h61 = _source84.dtor_elem;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _2633___mcc_h64 = _source84.dtor_elements;
            DAST._IType _2634___mcc_h65 = _source84.dtor_typ;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _2635___mcc_h68 = _source84.dtor_elements;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _2636___mcc_h70 = _source84.dtor_elements;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _2637___mcc_h72 = _source84.dtor_mapElems;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_MapBuilder) {
            DAST._IType _2638___mcc_h74 = _source84.dtor_keyType;
            DAST._IType _2639___mcc_h75 = _source84.dtor_valueType;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_SeqUpdate) {
            DAST._IExpression _2640___mcc_h78 = _source84.dtor_expr;
            DAST._IExpression _2641___mcc_h79 = _source84.dtor_indexExpr;
            DAST._IExpression _2642___mcc_h80 = _source84.dtor_value;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_MapUpdate) {
            DAST._IExpression _2643___mcc_h84 = _source84.dtor_expr;
            DAST._IExpression _2644___mcc_h85 = _source84.dtor_indexExpr;
            DAST._IExpression _2645___mcc_h86 = _source84.dtor_value;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_SetBuilder) {
            DAST._IType _2646___mcc_h90 = _source84.dtor_elemType;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_ToMultiset) {
            DAST._IExpression _2647___mcc_h92 = _source84.dtor_ToMultiset_a0;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_This) {
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Ite) {
            DAST._IExpression _2648___mcc_h94 = _source84.dtor_cond;
            DAST._IExpression _2649___mcc_h95 = _source84.dtor_thn;
            DAST._IExpression _2650___mcc_h96 = _source84.dtor_els;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_UnOp) {
            DAST._IUnaryOp _2651___mcc_h100 = _source84.dtor_unOp;
            DAST._IExpression _2652___mcc_h101 = _source84.dtor_expr;
            DAST.Format._IUnOpFormat _2653___mcc_h102 = _source84.dtor_format1;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_BinOp) {
            DAST._IBinOp _2654___mcc_h106 = _source84.dtor_op;
            DAST._IExpression _2655___mcc_h107 = _source84.dtor_left;
            DAST._IExpression _2656___mcc_h108 = _source84.dtor_right;
            DAST.Format._IBinOpFormat _2657___mcc_h109 = _source84.dtor_format2;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_ArrayLen) {
            DAST._IExpression _2658___mcc_h114 = _source84.dtor_expr;
            BigInteger _2659___mcc_h115 = _source84.dtor_dim;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_MapKeys) {
            DAST._IExpression _2660___mcc_h118 = _source84.dtor_expr;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_MapValues) {
            DAST._IExpression _2661___mcc_h120 = _source84.dtor_expr;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Select) {
            DAST._IExpression _2662___mcc_h122 = _source84.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2663___mcc_h123 = _source84.dtor_field;
            bool _2664___mcc_h124 = _source84.dtor_isConstant;
            bool _2665___mcc_h125 = _source84.dtor_onDatatype;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_SelectFn) {
            DAST._IExpression _2666___mcc_h130 = _source84.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _2667___mcc_h131 = _source84.dtor_field;
            bool _2668___mcc_h132 = _source84.dtor_onDatatype;
            bool _2669___mcc_h133 = _source84.dtor_isStatic;
            BigInteger _2670___mcc_h134 = _source84.dtor_arity;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Index) {
            DAST._IExpression _2671___mcc_h140 = _source84.dtor_expr;
            DAST._ICollKind _2672___mcc_h141 = _source84.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _2673___mcc_h142 = _source84.dtor_indices;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_IndexRange) {
            DAST._IExpression _2674___mcc_h146 = _source84.dtor_expr;
            bool _2675___mcc_h147 = _source84.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _2676___mcc_h148 = _source84.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _2677___mcc_h149 = _source84.dtor_high;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_TupleSelect) {
            DAST._IExpression _2678___mcc_h154 = _source84.dtor_expr;
            BigInteger _2679___mcc_h155 = _source84.dtor_index;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Call) {
            DAST._IExpression _2680___mcc_h158 = _source84.dtor_on;
            DAST._ICallName _2681___mcc_h159 = _source84.dtor_callName;
            Dafny.ISequence<DAST._IType> _2682___mcc_h160 = _source84.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _2683___mcc_h161 = _source84.dtor_args;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _2684___mcc_h166 = _source84.dtor_params;
            DAST._IType _2685___mcc_h167 = _source84.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _2686___mcc_h168 = _source84.dtor_body;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _2687___mcc_h172 = _source84.dtor_values;
            DAST._IType _2688___mcc_h173 = _source84.dtor_retType;
            DAST._IExpression _2689___mcc_h174 = _source84.dtor_expr;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _2690___mcc_h178 = _source84.dtor_name;
            DAST._IType _2691___mcc_h179 = _source84.dtor_typ;
            DAST._IExpression _2692___mcc_h180 = _source84.dtor_value;
            DAST._IExpression _2693___mcc_h181 = _source84.dtor_iifeBody;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_Apply) {
            DAST._IExpression _2694___mcc_h186 = _source84.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _2695___mcc_h187 = _source84.dtor_args;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_TypeTest) {
            DAST._IExpression _2696___mcc_h190 = _source84.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2697___mcc_h191 = _source84.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _2698___mcc_h192 = _source84.dtor_variant;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_InitializationValue) {
            DAST._IType _2699___mcc_h196 = _source84.dtor_typ;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_BoolBoundedPool) {
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_SetBoundedPool) {
            DAST._IExpression _2700___mcc_h198 = _source84.dtor_of;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source84.is_SeqBoundedPool) {
            DAST._IExpression _2701___mcc_h200 = _source84.dtor_of;
            bool _2702___mcc_h201 = _source84.dtor_includeDuplicates;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _2703___mcc_h204 = _source84.dtor_lo;
            DAST._IExpression _2704___mcc_h205 = _source84.dtor_hi;
            {
              _2613_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2613_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _2705_receiver;
          _2705_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source85 = _2595_maybeOutVars;
          if (_source85.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2706___mcc_h208 = _source85.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2707_outVars = _2706___mcc_h208;
            {
              if ((new BigInteger((_2707_outVars).Count)) > (BigInteger.One)) {
                _2705_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _2708_outI;
              _2708_outI = BigInteger.Zero;
              while ((_2708_outI) < (new BigInteger((_2707_outVars).Count))) {
                if ((_2708_outI).Sign == 1) {
                  _2705_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2705_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _2709_outVar;
                _2709_outVar = (_2707_outVars).Select(_2708_outI);
                _2705_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2705_receiver, (_2709_outVar));
                _2708_outI = (_2708_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_2707_outVars).Count)) > (BigInteger.One)) {
                _2705_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_2705_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _2710_renderedName;
          _2710_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source86) => {
            if (_source86.is_Name) {
              Dafny.ISequence<Dafny.Rune> _2711___mcc_h209 = _source86.dtor_name;
              Dafny.ISequence<Dafny.Rune> _2712_name = _2711___mcc_h209;
              return DCOMP.__default.escapeIdent(_2712_name);
            } else if (_source86.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source86.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source86.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_2598_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_2705_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_2705_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _2613_enclosingString), _2710_renderedName), _2600_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2604_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source82.is_Return) {
        DAST._IExpression _2713___mcc_h22 = _source82.dtor_expr;
        DAST._IExpression _2714_expr = _2713___mcc_h22;
        {
          RAST._IExpr _2715_expr;
          DCOMP._IOwnership _2716___v60;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2717_recIdents;
          RAST._IExpr _out130;
          DCOMP._IOwnership _out131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out132;
          DCOMP.COMP.GenExpr(_2714_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out130, out _out131, out _out132);
          _2715_expr = _out130;
          _2716___v60 = _out131;
          _2717_recIdents = _out132;
          readIdents = _2717_recIdents;
          if (isLast) {
            generated = _2715_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_2715_expr));
          }
        }
      } else if (_source82.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source82.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2718___mcc_h23 = _source82.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _2719_toLabel = _2718___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source87 = _2719_toLabel;
          if (_source87.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2720___mcc_h210 = _source87.dtor_value;
            Dafny.ISequence<Dafny.Rune> _2721_lbl = _2720___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _2721_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source82.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _2722___mcc_h24 = _source82.dtor_body;
        Dafny.ISequence<DAST._IStatement> _2723_body = _2722___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _2724_paramI;
          _2724_paramI = BigInteger.Zero;
          while ((_2724_paramI) < (new BigInteger(((env).dtor_names).Count))) {
            Dafny.ISequence<Dafny.Rune> _2725_param;
            _2725_param = ((env).dtor_names).Select(_2724_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMP.__default.escapeIdent(_2725_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_2725_param))))));
            _2724_paramI = (_2724_paramI) + (BigInteger.One);
          }
          RAST._IExpr _2726_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2727_bodyIdents;
          RAST._IExpr _out133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out134;
          DCOMP.COMP.GenStmts(_2723_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), DCOMP.Environment.Empty(), false, earlyReturn, out _out133, out _out134);
          _2726_body = _out133;
          _2727_bodyIdents = _out134;
          readIdents = _2727_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _2726_body)));
        }
      } else if (_source82.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source82.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _2728___mcc_h25 = _source82.dtor_Print_a0;
        DAST._IExpression _2729_e = _2728___mcc_h25;
        {
          RAST._IExpr _2730_printedExpr;
          DCOMP._IOwnership _2731_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2732_recIdents;
          RAST._IExpr _out135;
          DCOMP._IOwnership _out136;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out137;
          DCOMP.COMP.GenExpr(_2729_e, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out135, out _out136, out _out137);
          _2730_printedExpr = _out135;
          _2731_recOwnership = _out136;
          _2732_recIdents = _out137;
          Dafny.ISequence<Dafny.Rune> _2733_printedExprString;
          _2733_printedExprString = (_2730_printedExpr)._ToString(DCOMP.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _2733_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _2732_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source88 = range;
      if (_source88.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source88.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source88.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source88.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source88.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source88.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source88.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source88.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source88.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source88.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source88.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMP._IOwnership ownership, DCOMP._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMP._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      if (object.Equals(ownership, DCOMP.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out138;
        DCOMP._IOwnership _out139;
        DCOMP.COMP.FromOwned(r, expectedOwnership, out _out138, out _out139);
        @out = _out138;
        resultingOwnership = _out139;
        return ;
      } else if ((object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMP.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source89 = e;
      DAST._ILiteral _2734___mcc_h0 = _source89.dtor_Literal_a0;
      DAST._ILiteral _source90 = _2734___mcc_h0;
      if (_source90.is_BoolLiteral) {
        bool _2735___mcc_h1 = _source90.dtor_BoolLiteral_a0;
        if ((_2735___mcc_h1) == (false)) {
          {
            RAST._IExpr _out140;
            DCOMP._IOwnership _out141;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out140, out _out141);
            r = _out140;
            resultingOwnership = _out141;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out142;
            DCOMP._IOwnership _out143;
            DCOMP.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out142, out _out143);
            r = _out142;
            resultingOwnership = _out143;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source90.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _2736___mcc_h2 = _source90.dtor_IntLiteral_a0;
        DAST._IType _2737___mcc_h3 = _source90.dtor_IntLiteral_a1;
        DAST._IType _2738_t = _2737___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _2739_i = _2736___mcc_h2;
        {
          DAST._IType _source91 = _2738_t;
          if (_source91.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2740___mcc_h100 = _source91.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2741___mcc_h101 = _source91.dtor_typeArgs;
            DAST._IResolvedType _2742___mcc_h102 = _source91.dtor_resolved;
            DAST._IType _2743_o = _2738_t;
            {
              RAST._IType _2744_genType;
              RAST._IType _out144;
              _out144 = DCOMP.COMP.GenType(_2743_o, false, false);
              _2744_genType = _out144;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2744_genType);
            }
          } else if (_source91.is_Nullable) {
            DAST._IType _2745___mcc_h106 = _source91.dtor_Nullable_a0;
            DAST._IType _2746_o = _2738_t;
            {
              RAST._IType _2747_genType;
              RAST._IType _out145;
              _out145 = DCOMP.COMP.GenType(_2746_o, false, false);
              _2747_genType = _out145;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2747_genType);
            }
          } else if (_source91.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2748___mcc_h108 = _source91.dtor_Tuple_a0;
            DAST._IType _2749_o = _2738_t;
            {
              RAST._IType _2750_genType;
              RAST._IType _out146;
              _out146 = DCOMP.COMP.GenType(_2749_o, false, false);
              _2750_genType = _out146;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2750_genType);
            }
          } else if (_source91.is_Array) {
            DAST._IType _2751___mcc_h110 = _source91.dtor_element;
            BigInteger _2752___mcc_h111 = _source91.dtor_dims;
            DAST._IType _2753_o = _2738_t;
            {
              RAST._IType _2754_genType;
              RAST._IType _out147;
              _out147 = DCOMP.COMP.GenType(_2753_o, false, false);
              _2754_genType = _out147;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2754_genType);
            }
          } else if (_source91.is_Seq) {
            DAST._IType _2755___mcc_h114 = _source91.dtor_element;
            DAST._IType _2756_o = _2738_t;
            {
              RAST._IType _2757_genType;
              RAST._IType _out148;
              _out148 = DCOMP.COMP.GenType(_2756_o, false, false);
              _2757_genType = _out148;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2757_genType);
            }
          } else if (_source91.is_Set) {
            DAST._IType _2758___mcc_h116 = _source91.dtor_element;
            DAST._IType _2759_o = _2738_t;
            {
              RAST._IType _2760_genType;
              RAST._IType _out149;
              _out149 = DCOMP.COMP.GenType(_2759_o, false, false);
              _2760_genType = _out149;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2760_genType);
            }
          } else if (_source91.is_Multiset) {
            DAST._IType _2761___mcc_h118 = _source91.dtor_element;
            DAST._IType _2762_o = _2738_t;
            {
              RAST._IType _2763_genType;
              RAST._IType _out150;
              _out150 = DCOMP.COMP.GenType(_2762_o, false, false);
              _2763_genType = _out150;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2763_genType);
            }
          } else if (_source91.is_Map) {
            DAST._IType _2764___mcc_h120 = _source91.dtor_key;
            DAST._IType _2765___mcc_h121 = _source91.dtor_value;
            DAST._IType _2766_o = _2738_t;
            {
              RAST._IType _2767_genType;
              RAST._IType _out151;
              _out151 = DCOMP.COMP.GenType(_2766_o, false, false);
              _2767_genType = _out151;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2767_genType);
            }
          } else if (_source91.is_SetBuilder) {
            DAST._IType _2768___mcc_h124 = _source91.dtor_element;
            DAST._IType _2769_o = _2738_t;
            {
              RAST._IType _2770_genType;
              RAST._IType _out152;
              _out152 = DCOMP.COMP.GenType(_2769_o, false, false);
              _2770_genType = _out152;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2770_genType);
            }
          } else if (_source91.is_MapBuilder) {
            DAST._IType _2771___mcc_h126 = _source91.dtor_key;
            DAST._IType _2772___mcc_h127 = _source91.dtor_value;
            DAST._IType _2773_o = _2738_t;
            {
              RAST._IType _2774_genType;
              RAST._IType _out153;
              _out153 = DCOMP.COMP.GenType(_2773_o, false, false);
              _2774_genType = _out153;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2774_genType);
            }
          } else if (_source91.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2775___mcc_h130 = _source91.dtor_args;
            DAST._IType _2776___mcc_h131 = _source91.dtor_result;
            DAST._IType _2777_o = _2738_t;
            {
              RAST._IType _2778_genType;
              RAST._IType _out154;
              _out154 = DCOMP.COMP.GenType(_2777_o, false, false);
              _2778_genType = _out154;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2778_genType);
            }
          } else if (_source91.is_Primitive) {
            DAST._IPrimitive _2779___mcc_h134 = _source91.dtor_Primitive_a0;
            DAST._IPrimitive _source92 = _2779___mcc_h134;
            if (_source92.is_Int) {
              {
                if ((new BigInteger((_2739_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_2739_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_2739_i, true));
                }
              }
            } else if (_source92.is_Real) {
              DAST._IType _2780_o = _2738_t;
              {
                RAST._IType _2781_genType;
                RAST._IType _out155;
                _out155 = DCOMP.COMP.GenType(_2780_o, false, false);
                _2781_genType = _out155;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2781_genType);
              }
            } else if (_source92.is_String) {
              DAST._IType _2782_o = _2738_t;
              {
                RAST._IType _2783_genType;
                RAST._IType _out156;
                _out156 = DCOMP.COMP.GenType(_2782_o, false, false);
                _2783_genType = _out156;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2783_genType);
              }
            } else if (_source92.is_Bool) {
              DAST._IType _2784_o = _2738_t;
              {
                RAST._IType _2785_genType;
                RAST._IType _out157;
                _out157 = DCOMP.COMP.GenType(_2784_o, false, false);
                _2785_genType = _out157;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2785_genType);
              }
            } else {
              DAST._IType _2786_o = _2738_t;
              {
                RAST._IType _2787_genType;
                RAST._IType _out158;
                _out158 = DCOMP.COMP.GenType(_2786_o, false, false);
                _2787_genType = _out158;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2787_genType);
              }
            }
          } else if (_source91.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2788___mcc_h136 = _source91.dtor_Passthrough_a0;
            DAST._IType _2789_o = _2738_t;
            {
              RAST._IType _2790_genType;
              RAST._IType _out159;
              _out159 = DCOMP.COMP.GenType(_2789_o, false, false);
              _2790_genType = _out159;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2790_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2791___mcc_h138 = _source91.dtor_TypeArg_a0;
            DAST._IType _2792_o = _2738_t;
            {
              RAST._IType _2793_genType;
              RAST._IType _out160;
              _out160 = DCOMP.COMP.GenType(_2792_o, false, false);
              _2793_genType = _out160;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_2739_i), _2793_genType);
            }
          }
          RAST._IExpr _out161;
          DCOMP._IOwnership _out162;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out161, out _out162);
          r = _out161;
          resultingOwnership = _out162;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source90.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _2794___mcc_h4 = _source90.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _2795___mcc_h5 = _source90.dtor_DecLiteral_a1;
        DAST._IType _2796___mcc_h6 = _source90.dtor_DecLiteral_a2;
        DAST._IType _2797_t = _2796___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _2798_d = _2795___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _2799_n = _2794___mcc_h4;
        {
          DAST._IType _source93 = _2797_t;
          if (_source93.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2800___mcc_h140 = _source93.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _2801___mcc_h141 = _source93.dtor_typeArgs;
            DAST._IResolvedType _2802___mcc_h142 = _source93.dtor_resolved;
            DAST._IType _2803_o = _2797_t;
            {
              RAST._IType _2804_genType;
              RAST._IType _out163;
              _out163 = DCOMP.COMP.GenType(_2803_o, false, false);
              _2804_genType = _out163;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2804_genType);
            }
          } else if (_source93.is_Nullable) {
            DAST._IType _2805___mcc_h146 = _source93.dtor_Nullable_a0;
            DAST._IType _2806_o = _2797_t;
            {
              RAST._IType _2807_genType;
              RAST._IType _out164;
              _out164 = DCOMP.COMP.GenType(_2806_o, false, false);
              _2807_genType = _out164;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2807_genType);
            }
          } else if (_source93.is_Tuple) {
            Dafny.ISequence<DAST._IType> _2808___mcc_h148 = _source93.dtor_Tuple_a0;
            DAST._IType _2809_o = _2797_t;
            {
              RAST._IType _2810_genType;
              RAST._IType _out165;
              _out165 = DCOMP.COMP.GenType(_2809_o, false, false);
              _2810_genType = _out165;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2810_genType);
            }
          } else if (_source93.is_Array) {
            DAST._IType _2811___mcc_h150 = _source93.dtor_element;
            BigInteger _2812___mcc_h151 = _source93.dtor_dims;
            DAST._IType _2813_o = _2797_t;
            {
              RAST._IType _2814_genType;
              RAST._IType _out166;
              _out166 = DCOMP.COMP.GenType(_2813_o, false, false);
              _2814_genType = _out166;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2814_genType);
            }
          } else if (_source93.is_Seq) {
            DAST._IType _2815___mcc_h154 = _source93.dtor_element;
            DAST._IType _2816_o = _2797_t;
            {
              RAST._IType _2817_genType;
              RAST._IType _out167;
              _out167 = DCOMP.COMP.GenType(_2816_o, false, false);
              _2817_genType = _out167;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2817_genType);
            }
          } else if (_source93.is_Set) {
            DAST._IType _2818___mcc_h156 = _source93.dtor_element;
            DAST._IType _2819_o = _2797_t;
            {
              RAST._IType _2820_genType;
              RAST._IType _out168;
              _out168 = DCOMP.COMP.GenType(_2819_o, false, false);
              _2820_genType = _out168;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2820_genType);
            }
          } else if (_source93.is_Multiset) {
            DAST._IType _2821___mcc_h158 = _source93.dtor_element;
            DAST._IType _2822_o = _2797_t;
            {
              RAST._IType _2823_genType;
              RAST._IType _out169;
              _out169 = DCOMP.COMP.GenType(_2822_o, false, false);
              _2823_genType = _out169;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2823_genType);
            }
          } else if (_source93.is_Map) {
            DAST._IType _2824___mcc_h160 = _source93.dtor_key;
            DAST._IType _2825___mcc_h161 = _source93.dtor_value;
            DAST._IType _2826_o = _2797_t;
            {
              RAST._IType _2827_genType;
              RAST._IType _out170;
              _out170 = DCOMP.COMP.GenType(_2826_o, false, false);
              _2827_genType = _out170;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2827_genType);
            }
          } else if (_source93.is_SetBuilder) {
            DAST._IType _2828___mcc_h164 = _source93.dtor_element;
            DAST._IType _2829_o = _2797_t;
            {
              RAST._IType _2830_genType;
              RAST._IType _out171;
              _out171 = DCOMP.COMP.GenType(_2829_o, false, false);
              _2830_genType = _out171;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2830_genType);
            }
          } else if (_source93.is_MapBuilder) {
            DAST._IType _2831___mcc_h166 = _source93.dtor_key;
            DAST._IType _2832___mcc_h167 = _source93.dtor_value;
            DAST._IType _2833_o = _2797_t;
            {
              RAST._IType _2834_genType;
              RAST._IType _out172;
              _out172 = DCOMP.COMP.GenType(_2833_o, false, false);
              _2834_genType = _out172;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2834_genType);
            }
          } else if (_source93.is_Arrow) {
            Dafny.ISequence<DAST._IType> _2835___mcc_h170 = _source93.dtor_args;
            DAST._IType _2836___mcc_h171 = _source93.dtor_result;
            DAST._IType _2837_o = _2797_t;
            {
              RAST._IType _2838_genType;
              RAST._IType _out173;
              _out173 = DCOMP.COMP.GenType(_2837_o, false, false);
              _2838_genType = _out173;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2838_genType);
            }
          } else if (_source93.is_Primitive) {
            DAST._IPrimitive _2839___mcc_h174 = _source93.dtor_Primitive_a0;
            DAST._IPrimitive _source94 = _2839___mcc_h174;
            if (_source94.is_Int) {
              DAST._IType _2840_o = _2797_t;
              {
                RAST._IType _2841_genType;
                RAST._IType _out174;
                _out174 = DCOMP.COMP.GenType(_2840_o, false, false);
                _2841_genType = _out174;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2841_genType);
              }
            } else if (_source94.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source94.is_String) {
              DAST._IType _2842_o = _2797_t;
              {
                RAST._IType _2843_genType;
                RAST._IType _out175;
                _out175 = DCOMP.COMP.GenType(_2842_o, false, false);
                _2843_genType = _out175;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2843_genType);
              }
            } else if (_source94.is_Bool) {
              DAST._IType _2844_o = _2797_t;
              {
                RAST._IType _2845_genType;
                RAST._IType _out176;
                _out176 = DCOMP.COMP.GenType(_2844_o, false, false);
                _2845_genType = _out176;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2845_genType);
              }
            } else {
              DAST._IType _2846_o = _2797_t;
              {
                RAST._IType _2847_genType;
                RAST._IType _out177;
                _out177 = DCOMP.COMP.GenType(_2846_o, false, false);
                _2847_genType = _out177;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2847_genType);
              }
            }
          } else if (_source93.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _2848___mcc_h176 = _source93.dtor_Passthrough_a0;
            DAST._IType _2849_o = _2797_t;
            {
              RAST._IType _2850_genType;
              RAST._IType _out178;
              _out178 = DCOMP.COMP.GenType(_2849_o, false, false);
              _2850_genType = _out178;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2850_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _2851___mcc_h178 = _source93.dtor_TypeArg_a0;
            DAST._IType _2852_o = _2797_t;
            {
              RAST._IType _2853_genType;
              RAST._IType _out179;
              _out179 = DCOMP.COMP.GenType(_2852_o, false, false);
              _2853_genType = _out179;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2799_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _2798_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _2853_genType);
            }
          }
          RAST._IExpr _out180;
          DCOMP._IOwnership _out181;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out180, out _out181);
          r = _out180;
          resultingOwnership = _out181;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source90.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _2854___mcc_h7 = _source90.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _2855_l = _2854___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_2855_l, false));
          RAST._IExpr _out182;
          DCOMP._IOwnership _out183;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out182, out _out183);
          r = _out182;
          resultingOwnership = _out183;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source90.is_CharLiteral) {
        Dafny.Rune _2856___mcc_h8 = _source90.dtor_CharLiteral_a0;
        Dafny.Rune _2857_c = _2856___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_2857_c).Value)));
          if (!(DCOMP.__default.UnicodeChars)) {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u16"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          } else {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u32"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          r = ((RAST.__default.dafny__runtime).MSel(DCOMP.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out184;
          DCOMP._IOwnership _out185;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out184, out _out185);
          r = _out184;
          resultingOwnership = _out185;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _2858___mcc_h9 = _source90.dtor_Null_a0;
        DAST._IType _2859_tpe = _2858___mcc_h9;
        {
          RAST._IType _2860_tpeGen;
          RAST._IType _out186;
          _out186 = DCOMP.COMP.GenType(_2859_tpe, false, false);
          _2860_tpeGen = _out186;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _2860_tpeGen);
          RAST._IExpr _out187;
          DCOMP._IOwnership _out188;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out187, out _out188);
          r = _out187;
          resultingOwnership = _out188;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs50 = e;
      DAST._IBinOp _2861_op = _let_tmp_rhs50.dtor_op;
      DAST._IExpression _2862_lExpr = _let_tmp_rhs50.dtor_left;
      DAST._IExpression _2863_rExpr = _let_tmp_rhs50.dtor_right;
      DAST.Format._IBinOpFormat _2864_format = _let_tmp_rhs50.dtor_format2;
      bool _2865_becomesLeftCallsRight;
      _2865_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source95) => {
        if (_source95.is_Eq) {
          bool _2866___mcc_h0 = _source95.dtor_referential;
          bool _2867___mcc_h1 = _source95.dtor_nullable;
          return false;
        } else if (_source95.is_Div) {
          return false;
        } else if (_source95.is_EuclidianDiv) {
          return false;
        } else if (_source95.is_Mod) {
          return false;
        } else if (_source95.is_EuclidianMod) {
          return false;
        } else if (_source95.is_Lt) {
          return false;
        } else if (_source95.is_LtChar) {
          return false;
        } else if (_source95.is_Plus) {
          return false;
        } else if (_source95.is_Minus) {
          return false;
        } else if (_source95.is_Times) {
          return false;
        } else if (_source95.is_BitwiseAnd) {
          return false;
        } else if (_source95.is_BitwiseOr) {
          return false;
        } else if (_source95.is_BitwiseXor) {
          return false;
        } else if (_source95.is_BitwiseShiftRight) {
          return false;
        } else if (_source95.is_BitwiseShiftLeft) {
          return false;
        } else if (_source95.is_And) {
          return false;
        } else if (_source95.is_Or) {
          return false;
        } else if (_source95.is_In) {
          return false;
        } else if (_source95.is_SeqProperPrefix) {
          return false;
        } else if (_source95.is_SeqPrefix) {
          return false;
        } else if (_source95.is_SetMerge) {
          return true;
        } else if (_source95.is_SetSubtraction) {
          return true;
        } else if (_source95.is_SetIntersection) {
          return true;
        } else if (_source95.is_Subset) {
          return false;
        } else if (_source95.is_ProperSubset) {
          return false;
        } else if (_source95.is_SetDisjoint) {
          return true;
        } else if (_source95.is_MapMerge) {
          return true;
        } else if (_source95.is_MapSubtraction) {
          return true;
        } else if (_source95.is_MultisetMerge) {
          return true;
        } else if (_source95.is_MultisetSubtraction) {
          return true;
        } else if (_source95.is_MultisetIntersection) {
          return true;
        } else if (_source95.is_Submultiset) {
          return false;
        } else if (_source95.is_ProperSubmultiset) {
          return false;
        } else if (_source95.is_MultisetDisjoint) {
          return true;
        } else if (_source95.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _2868___mcc_h4 = _source95.dtor_Passthrough_a0;
          return false;
        }
      }))(_2861_op);
      bool _2869_becomesRightCallsLeft;
      _2869_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source96) => {
        if (_source96.is_Eq) {
          bool _2870___mcc_h6 = _source96.dtor_referential;
          bool _2871___mcc_h7 = _source96.dtor_nullable;
          return false;
        } else if (_source96.is_Div) {
          return false;
        } else if (_source96.is_EuclidianDiv) {
          return false;
        } else if (_source96.is_Mod) {
          return false;
        } else if (_source96.is_EuclidianMod) {
          return false;
        } else if (_source96.is_Lt) {
          return false;
        } else if (_source96.is_LtChar) {
          return false;
        } else if (_source96.is_Plus) {
          return false;
        } else if (_source96.is_Minus) {
          return false;
        } else if (_source96.is_Times) {
          return false;
        } else if (_source96.is_BitwiseAnd) {
          return false;
        } else if (_source96.is_BitwiseOr) {
          return false;
        } else if (_source96.is_BitwiseXor) {
          return false;
        } else if (_source96.is_BitwiseShiftRight) {
          return false;
        } else if (_source96.is_BitwiseShiftLeft) {
          return false;
        } else if (_source96.is_And) {
          return false;
        } else if (_source96.is_Or) {
          return false;
        } else if (_source96.is_In) {
          return true;
        } else if (_source96.is_SeqProperPrefix) {
          return false;
        } else if (_source96.is_SeqPrefix) {
          return false;
        } else if (_source96.is_SetMerge) {
          return false;
        } else if (_source96.is_SetSubtraction) {
          return false;
        } else if (_source96.is_SetIntersection) {
          return false;
        } else if (_source96.is_Subset) {
          return false;
        } else if (_source96.is_ProperSubset) {
          return false;
        } else if (_source96.is_SetDisjoint) {
          return false;
        } else if (_source96.is_MapMerge) {
          return false;
        } else if (_source96.is_MapSubtraction) {
          return false;
        } else if (_source96.is_MultisetMerge) {
          return false;
        } else if (_source96.is_MultisetSubtraction) {
          return false;
        } else if (_source96.is_MultisetIntersection) {
          return false;
        } else if (_source96.is_Submultiset) {
          return false;
        } else if (_source96.is_ProperSubmultiset) {
          return false;
        } else if (_source96.is_MultisetDisjoint) {
          return false;
        } else if (_source96.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _2872___mcc_h10 = _source96.dtor_Passthrough_a0;
          return false;
        }
      }))(_2861_op);
      bool _2873_becomesCallLeftRight;
      _2873_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source97) => {
        if (_source97.is_Eq) {
          bool _2874___mcc_h12 = _source97.dtor_referential;
          bool _2875___mcc_h13 = _source97.dtor_nullable;
          if ((_2874___mcc_h12) == (true)) {
            if ((_2875___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source97.is_Div) {
          return false;
        } else if (_source97.is_EuclidianDiv) {
          return false;
        } else if (_source97.is_Mod) {
          return false;
        } else if (_source97.is_EuclidianMod) {
          return false;
        } else if (_source97.is_Lt) {
          return false;
        } else if (_source97.is_LtChar) {
          return false;
        } else if (_source97.is_Plus) {
          return false;
        } else if (_source97.is_Minus) {
          return false;
        } else if (_source97.is_Times) {
          return false;
        } else if (_source97.is_BitwiseAnd) {
          return false;
        } else if (_source97.is_BitwiseOr) {
          return false;
        } else if (_source97.is_BitwiseXor) {
          return false;
        } else if (_source97.is_BitwiseShiftRight) {
          return false;
        } else if (_source97.is_BitwiseShiftLeft) {
          return false;
        } else if (_source97.is_And) {
          return false;
        } else if (_source97.is_Or) {
          return false;
        } else if (_source97.is_In) {
          return false;
        } else if (_source97.is_SeqProperPrefix) {
          return false;
        } else if (_source97.is_SeqPrefix) {
          return false;
        } else if (_source97.is_SetMerge) {
          return false;
        } else if (_source97.is_SetSubtraction) {
          return false;
        } else if (_source97.is_SetIntersection) {
          return false;
        } else if (_source97.is_Subset) {
          return false;
        } else if (_source97.is_ProperSubset) {
          return false;
        } else if (_source97.is_SetDisjoint) {
          return false;
        } else if (_source97.is_MapMerge) {
          return false;
        } else if (_source97.is_MapSubtraction) {
          return false;
        } else if (_source97.is_MultisetMerge) {
          return false;
        } else if (_source97.is_MultisetSubtraction) {
          return false;
        } else if (_source97.is_MultisetIntersection) {
          return false;
        } else if (_source97.is_Submultiset) {
          return false;
        } else if (_source97.is_ProperSubmultiset) {
          return false;
        } else if (_source97.is_MultisetDisjoint) {
          return false;
        } else if (_source97.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _2876___mcc_h16 = _source97.dtor_Passthrough_a0;
          return false;
        }
      }))(_2861_op);
      DCOMP._IOwnership _2877_expectedLeftOwnership;
      _2877_expectedLeftOwnership = ((_2865_becomesLeftCallsRight) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : ((((_2869_becomesRightCallsLeft) || (_2873_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      DCOMP._IOwnership _2878_expectedRightOwnership;
      _2878_expectedRightOwnership = (((_2865_becomesLeftCallsRight) || (_2873_becomesCallLeftRight)) ? (DCOMP.Ownership.create_OwnershipBorrowed()) : (((_2869_becomesRightCallsLeft) ? (DCOMP.Ownership.create_OwnershipAutoBorrowed()) : (DCOMP.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _2879_left;
      DCOMP._IOwnership _2880___v65;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2881_recIdentsL;
      RAST._IExpr _out189;
      DCOMP._IOwnership _out190;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out191;
      DCOMP.COMP.GenExpr(_2862_lExpr, selfIdent, env, _2877_expectedLeftOwnership, out _out189, out _out190, out _out191);
      _2879_left = _out189;
      _2880___v65 = _out190;
      _2881_recIdentsL = _out191;
      RAST._IExpr _2882_right;
      DCOMP._IOwnership _2883___v66;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2884_recIdentsR;
      RAST._IExpr _out192;
      DCOMP._IOwnership _out193;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out194;
      DCOMP.COMP.GenExpr(_2863_rExpr, selfIdent, env, _2878_expectedRightOwnership, out _out192, out _out193, out _out194);
      _2882_right = _out192;
      _2883___v66 = _out193;
      _2884_recIdentsR = _out194;
      DAST._IBinOp _source98 = _2861_op;
      if (_source98.is_Eq) {
        bool _2885___mcc_h18 = _source98.dtor_referential;
        bool _2886___mcc_h19 = _source98.dtor_nullable;
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source99 = _2861_op;
            if (_source99.is_Eq) {
              bool _2887___mcc_h24 = _source99.dtor_referential;
              bool _2888___mcc_h25 = _source99.dtor_nullable;
              bool _2889_nullable = _2888___mcc_h25;
              bool _2890_referential = _2887___mcc_h24;
              {
                if (_2890_referential) {
                  if (_2889_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source99.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source99.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2891___mcc_h26 = _source99.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2892_op = _2891___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_2892_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_Div) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source100 = _2861_op;
            if (_source100.is_Eq) {
              bool _2893___mcc_h27 = _source100.dtor_referential;
              bool _2894___mcc_h28 = _source100.dtor_nullable;
              bool _2895_nullable = _2894___mcc_h28;
              bool _2896_referential = _2893___mcc_h27;
              {
                if (_2896_referential) {
                  if (_2895_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source100.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source100.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2897___mcc_h29 = _source100.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2898_op = _2897___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_2898_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_EuclidianDiv) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source101 = _2861_op;
            if (_source101.is_Eq) {
              bool _2899___mcc_h30 = _source101.dtor_referential;
              bool _2900___mcc_h31 = _source101.dtor_nullable;
              bool _2901_nullable = _2900___mcc_h31;
              bool _2902_referential = _2899___mcc_h30;
              {
                if (_2902_referential) {
                  if (_2901_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source101.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source101.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2903___mcc_h32 = _source101.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2904_op = _2903___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_2904_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_Mod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source102 = _2861_op;
            if (_source102.is_Eq) {
              bool _2905___mcc_h33 = _source102.dtor_referential;
              bool _2906___mcc_h34 = _source102.dtor_nullable;
              bool _2907_nullable = _2906___mcc_h34;
              bool _2908_referential = _2905___mcc_h33;
              {
                if (_2908_referential) {
                  if (_2907_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source102.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source102.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2909___mcc_h35 = _source102.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2910_op = _2909___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_2910_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_EuclidianMod) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source103 = _2861_op;
            if (_source103.is_Eq) {
              bool _2911___mcc_h36 = _source103.dtor_referential;
              bool _2912___mcc_h37 = _source103.dtor_nullable;
              bool _2913_nullable = _2912___mcc_h37;
              bool _2914_referential = _2911___mcc_h36;
              {
                if (_2914_referential) {
                  if (_2913_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source103.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source103.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2915___mcc_h38 = _source103.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2916_op = _2915___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_2916_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_Lt) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source104 = _2861_op;
            if (_source104.is_Eq) {
              bool _2917___mcc_h39 = _source104.dtor_referential;
              bool _2918___mcc_h40 = _source104.dtor_nullable;
              bool _2919_nullable = _2918___mcc_h40;
              bool _2920_referential = _2917___mcc_h39;
              {
                if (_2920_referential) {
                  if (_2919_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source104.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source104.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2921___mcc_h41 = _source104.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2922_op = _2921___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_2922_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_LtChar) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source105 = _2861_op;
            if (_source105.is_Eq) {
              bool _2923___mcc_h42 = _source105.dtor_referential;
              bool _2924___mcc_h43 = _source105.dtor_nullable;
              bool _2925_nullable = _2924___mcc_h43;
              bool _2926_referential = _2923___mcc_h42;
              {
                if (_2926_referential) {
                  if (_2925_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source105.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source105.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2927___mcc_h44 = _source105.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2928_op = _2927___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_2928_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_Plus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source106 = _2861_op;
            if (_source106.is_Eq) {
              bool _2929___mcc_h45 = _source106.dtor_referential;
              bool _2930___mcc_h46 = _source106.dtor_nullable;
              bool _2931_nullable = _2930___mcc_h46;
              bool _2932_referential = _2929___mcc_h45;
              {
                if (_2932_referential) {
                  if (_2931_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source106.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source106.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2933___mcc_h47 = _source106.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2934_op = _2933___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_2934_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_Minus) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source107 = _2861_op;
            if (_source107.is_Eq) {
              bool _2935___mcc_h48 = _source107.dtor_referential;
              bool _2936___mcc_h49 = _source107.dtor_nullable;
              bool _2937_nullable = _2936___mcc_h49;
              bool _2938_referential = _2935___mcc_h48;
              {
                if (_2938_referential) {
                  if (_2937_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source107.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source107.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2939___mcc_h50 = _source107.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2940_op = _2939___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_2940_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_Times) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source108 = _2861_op;
            if (_source108.is_Eq) {
              bool _2941___mcc_h51 = _source108.dtor_referential;
              bool _2942___mcc_h52 = _source108.dtor_nullable;
              bool _2943_nullable = _2942___mcc_h52;
              bool _2944_referential = _2941___mcc_h51;
              {
                if (_2944_referential) {
                  if (_2943_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source108.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source108.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2945___mcc_h53 = _source108.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2946_op = _2945___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_2946_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_BitwiseAnd) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source109 = _2861_op;
            if (_source109.is_Eq) {
              bool _2947___mcc_h54 = _source109.dtor_referential;
              bool _2948___mcc_h55 = _source109.dtor_nullable;
              bool _2949_nullable = _2948___mcc_h55;
              bool _2950_referential = _2947___mcc_h54;
              {
                if (_2950_referential) {
                  if (_2949_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source109.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source109.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2951___mcc_h56 = _source109.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2952_op = _2951___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_2952_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_BitwiseOr) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source110 = _2861_op;
            if (_source110.is_Eq) {
              bool _2953___mcc_h57 = _source110.dtor_referential;
              bool _2954___mcc_h58 = _source110.dtor_nullable;
              bool _2955_nullable = _2954___mcc_h58;
              bool _2956_referential = _2953___mcc_h57;
              {
                if (_2956_referential) {
                  if (_2955_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source110.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source110.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2957___mcc_h59 = _source110.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2958_op = _2957___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_2958_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_BitwiseXor) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source111 = _2861_op;
            if (_source111.is_Eq) {
              bool _2959___mcc_h60 = _source111.dtor_referential;
              bool _2960___mcc_h61 = _source111.dtor_nullable;
              bool _2961_nullable = _2960___mcc_h61;
              bool _2962_referential = _2959___mcc_h60;
              {
                if (_2962_referential) {
                  if (_2961_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source111.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source111.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2963___mcc_h62 = _source111.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2964_op = _2963___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_2964_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_BitwiseShiftRight) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source112 = _2861_op;
            if (_source112.is_Eq) {
              bool _2965___mcc_h63 = _source112.dtor_referential;
              bool _2966___mcc_h64 = _source112.dtor_nullable;
              bool _2967_nullable = _2966___mcc_h64;
              bool _2968_referential = _2965___mcc_h63;
              {
                if (_2968_referential) {
                  if (_2967_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source112.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source112.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2969___mcc_h65 = _source112.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2970_op = _2969___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_2970_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_BitwiseShiftLeft) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source113 = _2861_op;
            if (_source113.is_Eq) {
              bool _2971___mcc_h66 = _source113.dtor_referential;
              bool _2972___mcc_h67 = _source113.dtor_nullable;
              bool _2973_nullable = _2972___mcc_h67;
              bool _2974_referential = _2971___mcc_h66;
              {
                if (_2974_referential) {
                  if (_2973_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source113.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source113.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2975___mcc_h68 = _source113.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2976_op = _2975___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_2976_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_And) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source114 = _2861_op;
            if (_source114.is_Eq) {
              bool _2977___mcc_h69 = _source114.dtor_referential;
              bool _2978___mcc_h70 = _source114.dtor_nullable;
              bool _2979_nullable = _2978___mcc_h70;
              bool _2980_referential = _2977___mcc_h69;
              {
                if (_2980_referential) {
                  if (_2979_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source114.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source114.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2981___mcc_h71 = _source114.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2982_op = _2981___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_2982_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_Or) {
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source115 = _2861_op;
            if (_source115.is_Eq) {
              bool _2983___mcc_h72 = _source115.dtor_referential;
              bool _2984___mcc_h73 = _source115.dtor_nullable;
              bool _2985_nullable = _2984___mcc_h73;
              bool _2986_referential = _2983___mcc_h72;
              {
                if (_2986_referential) {
                  if (_2985_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source115.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source115.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2987___mcc_h74 = _source115.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2988_op = _2987___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_2988_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      } else if (_source98.is_In) {
        {
          r = ((_2882_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_2879_left);
        }
      } else if (_source98.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2879_left, _2882_right, _2864_format);
      } else if (_source98.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2879_left, _2882_right, _2864_format);
      } else if (_source98.is_SetMerge) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2882_right);
        }
      } else if (_source98.is_SetSubtraction) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2882_right);
        }
      } else if (_source98.is_SetIntersection) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_2882_right);
        }
      } else if (_source98.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2879_left, _2882_right, _2864_format);
        }
      } else if (_source98.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2879_left, _2882_right, _2864_format);
        }
      } else if (_source98.is_SetDisjoint) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_2882_right);
        }
      } else if (_source98.is_MapMerge) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2882_right);
        }
      } else if (_source98.is_MapSubtraction) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2882_right);
        }
      } else if (_source98.is_MultisetMerge) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_2882_right);
        }
      } else if (_source98.is_MultisetSubtraction) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_2882_right);
        }
      } else if (_source98.is_MultisetIntersection) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_2882_right);
        }
      } else if (_source98.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _2879_left, _2882_right, _2864_format);
        }
      } else if (_source98.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2879_left, _2882_right, _2864_format);
        }
      } else if (_source98.is_MultisetDisjoint) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_2882_right);
        }
      } else if (_source98.is_Concat) {
        {
          r = ((_2879_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_2882_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _2989___mcc_h22 = _source98.dtor_Passthrough_a0;
        {
          if ((DCOMP.COMP.OpTable).Contains(_2861_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMP.COMP.OpTable,_2861_op), _2879_left, _2882_right, _2864_format);
          } else {
            DAST._IBinOp _source116 = _2861_op;
            if (_source116.is_Eq) {
              bool _2990___mcc_h75 = _source116.dtor_referential;
              bool _2991___mcc_h76 = _source116.dtor_nullable;
              bool _2992_nullable = _2991___mcc_h76;
              bool _2993_referential = _2990___mcc_h75;
              {
                if (_2993_referential) {
                  if (_2992_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _2879_left, _2882_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source116.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else if (_source116.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_2879_left, _2882_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2994___mcc_h77 = _source116.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _2995_op = _2994___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_2995_op, _2879_left, _2882_right, _2864_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out195;
      DCOMP._IOwnership _out196;
      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out195, out _out196);
      r = _out195;
      resultingOwnership = _out196;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_2881_recIdentsL, _2884_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs51 = e;
      DAST._IExpression _2996_expr = _let_tmp_rhs51.dtor_value;
      DAST._IType _2997_fromTpe = _let_tmp_rhs51.dtor_from;
      DAST._IType _2998_toTpe = _let_tmp_rhs51.dtor_typ;
      if (object.Equals(_2997_fromTpe, _2998_toTpe)) {
        RAST._IExpr _2999_recursiveGen;
        DCOMP._IOwnership _3000_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3001_recIdents;
        RAST._IExpr _out197;
        DCOMP._IOwnership _out198;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
        DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out197, out _out198, out _out199);
        _2999_recursiveGen = _out197;
        _3000_recOwned = _out198;
        _3001_recIdents = _out199;
        r = _2999_recursiveGen;
        RAST._IExpr _out200;
        DCOMP._IOwnership _out201;
        DCOMP.COMP.FromOwnership(r, _3000_recOwned, expectedOwnership, out _out200, out _out201);
        r = _out200;
        resultingOwnership = _out201;
        readIdents = _3001_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source117 = _System.Tuple2<DAST._IType, DAST._IType>.create(_2997_fromTpe, _2998_toTpe);
        DAST._IType _3002___mcc_h0 = _source117.dtor__0;
        DAST._IType _3003___mcc_h1 = _source117.dtor__1;
        DAST._IType _source118 = _3002___mcc_h0;
        if (_source118.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3004___mcc_h4 = _source118.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _3005___mcc_h5 = _source118.dtor_typeArgs;
          DAST._IResolvedType _3006___mcc_h6 = _source118.dtor_resolved;
          DAST._IResolvedType _source119 = _3006___mcc_h6;
          if (_source119.is_Datatype) {
            DAST._IDatatypeType _3007___mcc_h16 = _source119.dtor_datatypeType;
            DAST._IType _source120 = _3003___mcc_h1;
            if (_source120.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3008___mcc_h20 = _source120.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3009___mcc_h21 = _source120.dtor_typeArgs;
              DAST._IResolvedType _3010___mcc_h22 = _source120.dtor_resolved;
              DAST._IResolvedType _source121 = _3010___mcc_h22;
              if (_source121.is_Datatype) {
                DAST._IDatatypeType _3011___mcc_h26 = _source121.dtor_datatypeType;
                {
                  RAST._IExpr _3012_recursiveGen;
                  DCOMP._IOwnership _3013_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3014_recIdents;
                  RAST._IExpr _out202;
                  DCOMP._IOwnership _out203;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out202, out _out203, out _out204);
                  _3012_recursiveGen = _out202;
                  _3013_recOwned = _out203;
                  _3014_recIdents = _out204;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3012_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out205;
                  DCOMP._IOwnership _out206;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out205, out _out206);
                  r = _out205;
                  resultingOwnership = _out206;
                  readIdents = _3014_recIdents;
                }
              } else if (_source121.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3015___mcc_h28 = _source121.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3016___mcc_h29 = _source121.dtor_attributes;
                {
                  RAST._IExpr _3017_recursiveGen;
                  DCOMP._IOwnership _3018_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3019_recIdents;
                  RAST._IExpr _out207;
                  DCOMP._IOwnership _out208;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out209;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out207, out _out208, out _out209);
                  _3017_recursiveGen = _out207;
                  _3018_recOwned = _out208;
                  _3019_recIdents = _out209;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3017_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out210;
                  DCOMP._IOwnership _out211;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out210, out _out211);
                  r = _out210;
                  resultingOwnership = _out211;
                  readIdents = _3019_recIdents;
                }
              } else {
                DAST._IType _3020___mcc_h32 = _source121.dtor_baseType;
                DAST._INewtypeRange _3021___mcc_h33 = _source121.dtor_range;
                bool _3022___mcc_h34 = _source121.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3023___mcc_h35 = _source121.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3024_attributes = _3023___mcc_h35;
                bool _3025_erase = _3022___mcc_h34;
                DAST._INewtypeRange _3026_range = _3021___mcc_h33;
                DAST._IType _3027_b = _3020___mcc_h32;
                {
                  if (object.Equals(_2997_fromTpe, _3027_b)) {
                    RAST._IExpr _3028_recursiveGen;
                    DCOMP._IOwnership _3029_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3030_recIdents;
                    RAST._IExpr _out212;
                    DCOMP._IOwnership _out213;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out212, out _out213, out _out214);
                    _3028_recursiveGen = _out212;
                    _3029_recOwned = _out213;
                    _3030_recIdents = _out214;
                    Std.Wrappers._IOption<RAST._IType> _3031_potentialRhsType;
                    _3031_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3027_b, _3026_range);
                    Std.Wrappers._IOption<RAST._IType> _source122 = _3031_potentialRhsType;
                    if (_source122.is_None) {
                      if (_3025_erase) {
                        r = _3028_recursiveGen;
                      } else {
                        RAST._IType _3032_rhsType;
                        RAST._IType _out215;
                        _out215 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                        _3032_rhsType = _out215;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3032_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3028_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out216;
                      DCOMP._IOwnership _out217;
                      DCOMP.COMP.FromOwnership(r, _3029_recOwned, expectedOwnership, out _out216, out _out217);
                      r = _out216;
                      resultingOwnership = _out217;
                    } else {
                      RAST._IType _3033___mcc_h1246 = _source122.dtor_value;
                      RAST._IType _3034_v = _3033___mcc_h1246;
                      r = RAST.Expr.create_ConversionNum(_3034_v, _3028_recursiveGen);
                      RAST._IExpr _out218;
                      DCOMP._IOwnership _out219;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out218, out _out219);
                      r = _out218;
                      resultingOwnership = _out219;
                    }
                    readIdents = _3030_recIdents;
                  } else {
                    RAST._IExpr _out220;
                    DCOMP._IOwnership _out221;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3027_b), _3027_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out220, out _out221, out _out222);
                    r = _out220;
                    resultingOwnership = _out221;
                    readIdents = _out222;
                  }
                }
              }
            } else if (_source120.is_Nullable) {
              DAST._IType _3035___mcc_h40 = _source120.dtor_Nullable_a0;
              {
                RAST._IExpr _3036_recursiveGen;
                DCOMP._IOwnership _3037_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3038_recIdents;
                RAST._IExpr _out223;
                DCOMP._IOwnership _out224;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out225;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out223, out _out224, out _out225);
                _3036_recursiveGen = _out223;
                _3037_recOwned = _out224;
                _3038_recIdents = _out225;
                Dafny.ISequence<Dafny.Rune> _3039_s;
                _3039_s = (_3036_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3037_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3039_s = Dafny.Sequence<Dafny.Rune>.Concat(_3039_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _3039_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3039_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_3039_s);
                RAST._IExpr _out226;
                DCOMP._IOwnership _out227;
                DCOMP.COMP.FromOwnership(r, _3037_recOwned, expectedOwnership, out _out226, out _out227);
                r = _out226;
                resultingOwnership = _out227;
                readIdents = _3038_recIdents;
              }
            } else if (_source120.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3040___mcc_h42 = _source120.dtor_Tuple_a0;
              {
                RAST._IExpr _3041_recursiveGen;
                DCOMP._IOwnership _3042_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3043_recIdents;
                RAST._IExpr _out228;
                DCOMP._IOwnership _out229;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out228, out _out229, out _out230);
                _3041_recursiveGen = _out228;
                _3042_recOwned = _out229;
                _3043_recIdents = _out230;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3041_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out231;
                DCOMP._IOwnership _out232;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out231, out _out232);
                r = _out231;
                resultingOwnership = _out232;
                readIdents = _3043_recIdents;
              }
            } else if (_source120.is_Array) {
              DAST._IType _3044___mcc_h44 = _source120.dtor_element;
              BigInteger _3045___mcc_h45 = _source120.dtor_dims;
              {
                RAST._IExpr _3046_recursiveGen;
                DCOMP._IOwnership _3047_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3048_recIdents;
                RAST._IExpr _out233;
                DCOMP._IOwnership _out234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out233, out _out234, out _out235);
                _3046_recursiveGen = _out233;
                _3047_recOwned = _out234;
                _3048_recIdents = _out235;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3046_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out236;
                DCOMP._IOwnership _out237;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out236, out _out237);
                r = _out236;
                resultingOwnership = _out237;
                readIdents = _3048_recIdents;
              }
            } else if (_source120.is_Seq) {
              DAST._IType _3049___mcc_h48 = _source120.dtor_element;
              {
                RAST._IExpr _3050_recursiveGen;
                DCOMP._IOwnership _3051_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3052_recIdents;
                RAST._IExpr _out238;
                DCOMP._IOwnership _out239;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out240;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out238, out _out239, out _out240);
                _3050_recursiveGen = _out238;
                _3051_recOwned = _out239;
                _3052_recIdents = _out240;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3050_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out241;
                DCOMP._IOwnership _out242;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out241, out _out242);
                r = _out241;
                resultingOwnership = _out242;
                readIdents = _3052_recIdents;
              }
            } else if (_source120.is_Set) {
              DAST._IType _3053___mcc_h50 = _source120.dtor_element;
              {
                RAST._IExpr _3054_recursiveGen;
                DCOMP._IOwnership _3055_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3056_recIdents;
                RAST._IExpr _out243;
                DCOMP._IOwnership _out244;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out245;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out243, out _out244, out _out245);
                _3054_recursiveGen = _out243;
                _3055_recOwned = _out244;
                _3056_recIdents = _out245;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3054_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out246;
                DCOMP._IOwnership _out247;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out246, out _out247);
                r = _out246;
                resultingOwnership = _out247;
                readIdents = _3056_recIdents;
              }
            } else if (_source120.is_Multiset) {
              DAST._IType _3057___mcc_h52 = _source120.dtor_element;
              {
                RAST._IExpr _3058_recursiveGen;
                DCOMP._IOwnership _3059_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3060_recIdents;
                RAST._IExpr _out248;
                DCOMP._IOwnership _out249;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out250;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out248, out _out249, out _out250);
                _3058_recursiveGen = _out248;
                _3059_recOwned = _out249;
                _3060_recIdents = _out250;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3058_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out251;
                DCOMP._IOwnership _out252;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out251, out _out252);
                r = _out251;
                resultingOwnership = _out252;
                readIdents = _3060_recIdents;
              }
            } else if (_source120.is_Map) {
              DAST._IType _3061___mcc_h54 = _source120.dtor_key;
              DAST._IType _3062___mcc_h55 = _source120.dtor_value;
              {
                RAST._IExpr _3063_recursiveGen;
                DCOMP._IOwnership _3064_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3065_recIdents;
                RAST._IExpr _out253;
                DCOMP._IOwnership _out254;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out253, out _out254, out _out255);
                _3063_recursiveGen = _out253;
                _3064_recOwned = _out254;
                _3065_recIdents = _out255;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3063_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out256;
                DCOMP._IOwnership _out257;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out256, out _out257);
                r = _out256;
                resultingOwnership = _out257;
                readIdents = _3065_recIdents;
              }
            } else if (_source120.is_SetBuilder) {
              DAST._IType _3066___mcc_h58 = _source120.dtor_element;
              {
                RAST._IExpr _3067_recursiveGen;
                DCOMP._IOwnership _3068_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3069_recIdents;
                RAST._IExpr _out258;
                DCOMP._IOwnership _out259;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out260;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out258, out _out259, out _out260);
                _3067_recursiveGen = _out258;
                _3068_recOwned = _out259;
                _3069_recIdents = _out260;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3067_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out261;
                DCOMP._IOwnership _out262;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out261, out _out262);
                r = _out261;
                resultingOwnership = _out262;
                readIdents = _3069_recIdents;
              }
            } else if (_source120.is_MapBuilder) {
              DAST._IType _3070___mcc_h60 = _source120.dtor_key;
              DAST._IType _3071___mcc_h61 = _source120.dtor_value;
              {
                RAST._IExpr _3072_recursiveGen;
                DCOMP._IOwnership _3073_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3074_recIdents;
                RAST._IExpr _out263;
                DCOMP._IOwnership _out264;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out265;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out263, out _out264, out _out265);
                _3072_recursiveGen = _out263;
                _3073_recOwned = _out264;
                _3074_recIdents = _out265;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3072_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out266;
                DCOMP._IOwnership _out267;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out266, out _out267);
                r = _out266;
                resultingOwnership = _out267;
                readIdents = _3074_recIdents;
              }
            } else if (_source120.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3075___mcc_h64 = _source120.dtor_args;
              DAST._IType _3076___mcc_h65 = _source120.dtor_result;
              {
                RAST._IExpr _3077_recursiveGen;
                DCOMP._IOwnership _3078_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3079_recIdents;
                RAST._IExpr _out268;
                DCOMP._IOwnership _out269;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out270;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out268, out _out269, out _out270);
                _3077_recursiveGen = _out268;
                _3078_recOwned = _out269;
                _3079_recIdents = _out270;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3077_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out271;
                DCOMP._IOwnership _out272;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out271, out _out272);
                r = _out271;
                resultingOwnership = _out272;
                readIdents = _3079_recIdents;
              }
            } else if (_source120.is_Primitive) {
              DAST._IPrimitive _3080___mcc_h68 = _source120.dtor_Primitive_a0;
              {
                RAST._IExpr _3081_recursiveGen;
                DCOMP._IOwnership _3082_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3083_recIdents;
                RAST._IExpr _out273;
                DCOMP._IOwnership _out274;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out273, out _out274, out _out275);
                _3081_recursiveGen = _out273;
                _3082_recOwned = _out274;
                _3083_recIdents = _out275;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3081_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out276;
                DCOMP._IOwnership _out277;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out276, out _out277);
                r = _out276;
                resultingOwnership = _out277;
                readIdents = _3083_recIdents;
              }
            } else if (_source120.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3084___mcc_h70 = _source120.dtor_Passthrough_a0;
              {
                RAST._IExpr _3085_recursiveGen;
                DCOMP._IOwnership _3086_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3087_recIdents;
                RAST._IExpr _out278;
                DCOMP._IOwnership _out279;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out280;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out278, out _out279, out _out280);
                _3085_recursiveGen = _out278;
                _3086_recOwned = _out279;
                _3087_recIdents = _out280;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3085_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out281;
                DCOMP._IOwnership _out282;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out281, out _out282);
                r = _out281;
                resultingOwnership = _out282;
                readIdents = _3087_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3088___mcc_h72 = _source120.dtor_TypeArg_a0;
              {
                RAST._IExpr _3089_recursiveGen;
                DCOMP._IOwnership _3090_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3091_recIdents;
                RAST._IExpr _out283;
                DCOMP._IOwnership _out284;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out285;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out283, out _out284, out _out285);
                _3089_recursiveGen = _out283;
                _3090_recOwned = _out284;
                _3091_recIdents = _out285;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3089_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out286;
                DCOMP._IOwnership _out287;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out286, out _out287);
                r = _out286;
                resultingOwnership = _out287;
                readIdents = _3091_recIdents;
              }
            }
          } else if (_source119.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3092___mcc_h74 = _source119.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _3093___mcc_h75 = _source119.dtor_attributes;
            DAST._IType _source123 = _3003___mcc_h1;
            if (_source123.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3094___mcc_h82 = _source123.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3095___mcc_h83 = _source123.dtor_typeArgs;
              DAST._IResolvedType _3096___mcc_h84 = _source123.dtor_resolved;
              DAST._IResolvedType _source124 = _3096___mcc_h84;
              if (_source124.is_Datatype) {
                DAST._IDatatypeType _3097___mcc_h88 = _source124.dtor_datatypeType;
                {
                  RAST._IExpr _3098_recursiveGen;
                  DCOMP._IOwnership _3099_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3100_recIdents;
                  RAST._IExpr _out288;
                  DCOMP._IOwnership _out289;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out290;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out288, out _out289, out _out290);
                  _3098_recursiveGen = _out288;
                  _3099_recOwned = _out289;
                  _3100_recIdents = _out290;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3098_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out291;
                  DCOMP._IOwnership _out292;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out291, out _out292);
                  r = _out291;
                  resultingOwnership = _out292;
                  readIdents = _3100_recIdents;
                }
              } else if (_source124.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3101___mcc_h90 = _source124.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3102___mcc_h91 = _source124.dtor_attributes;
                {
                  RAST._IExpr _3103_recursiveGen;
                  DCOMP._IOwnership _3104_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3105_recIdents;
                  RAST._IExpr _out293;
                  DCOMP._IOwnership _out294;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out295;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out293, out _out294, out _out295);
                  _3103_recursiveGen = _out293;
                  _3104_recOwned = _out294;
                  _3105_recIdents = _out295;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3103_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out296;
                  DCOMP._IOwnership _out297;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out296, out _out297);
                  r = _out296;
                  resultingOwnership = _out297;
                  readIdents = _3105_recIdents;
                }
              } else {
                DAST._IType _3106___mcc_h94 = _source124.dtor_baseType;
                DAST._INewtypeRange _3107___mcc_h95 = _source124.dtor_range;
                bool _3108___mcc_h96 = _source124.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3109___mcc_h97 = _source124.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3110_attributes = _3109___mcc_h97;
                bool _3111_erase = _3108___mcc_h96;
                DAST._INewtypeRange _3112_range = _3107___mcc_h95;
                DAST._IType _3113_b = _3106___mcc_h94;
                {
                  if (object.Equals(_2997_fromTpe, _3113_b)) {
                    RAST._IExpr _3114_recursiveGen;
                    DCOMP._IOwnership _3115_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3116_recIdents;
                    RAST._IExpr _out298;
                    DCOMP._IOwnership _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out298, out _out299, out _out300);
                    _3114_recursiveGen = _out298;
                    _3115_recOwned = _out299;
                    _3116_recIdents = _out300;
                    Std.Wrappers._IOption<RAST._IType> _3117_potentialRhsType;
                    _3117_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3113_b, _3112_range);
                    Std.Wrappers._IOption<RAST._IType> _source125 = _3117_potentialRhsType;
                    if (_source125.is_None) {
                      if (_3111_erase) {
                        r = _3114_recursiveGen;
                      } else {
                        RAST._IType _3118_rhsType;
                        RAST._IType _out301;
                        _out301 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                        _3118_rhsType = _out301;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3118_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3114_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out302;
                      DCOMP._IOwnership _out303;
                      DCOMP.COMP.FromOwnership(r, _3115_recOwned, expectedOwnership, out _out302, out _out303);
                      r = _out302;
                      resultingOwnership = _out303;
                    } else {
                      RAST._IType _3119___mcc_h1247 = _source125.dtor_value;
                      RAST._IType _3120_v = _3119___mcc_h1247;
                      r = RAST.Expr.create_ConversionNum(_3120_v, _3114_recursiveGen);
                      RAST._IExpr _out304;
                      DCOMP._IOwnership _out305;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out304, out _out305);
                      r = _out304;
                      resultingOwnership = _out305;
                    }
                    readIdents = _3116_recIdents;
                  } else {
                    RAST._IExpr _out306;
                    DCOMP._IOwnership _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3113_b), _3113_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out306, out _out307, out _out308);
                    r = _out306;
                    resultingOwnership = _out307;
                    readIdents = _out308;
                  }
                }
              }
            } else if (_source123.is_Nullable) {
              DAST._IType _3121___mcc_h102 = _source123.dtor_Nullable_a0;
              {
                RAST._IExpr _3122_recursiveGen;
                DCOMP._IOwnership _3123_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3124_recIdents;
                RAST._IExpr _out309;
                DCOMP._IOwnership _out310;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out311;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out309, out _out310, out _out311);
                _3122_recursiveGen = _out309;
                _3123_recOwned = _out310;
                _3124_recIdents = _out311;
                Dafny.ISequence<Dafny.Rune> _3125_s;
                _3125_s = (_3122_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3123_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3125_s = Dafny.Sequence<Dafny.Rune>.Concat(_3125_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _3125_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3125_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_3125_s);
                RAST._IExpr _out312;
                DCOMP._IOwnership _out313;
                DCOMP.COMP.FromOwnership(r, _3123_recOwned, expectedOwnership, out _out312, out _out313);
                r = _out312;
                resultingOwnership = _out313;
                readIdents = _3124_recIdents;
              }
            } else if (_source123.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3126___mcc_h104 = _source123.dtor_Tuple_a0;
              {
                RAST._IExpr _3127_recursiveGen;
                DCOMP._IOwnership _3128_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3129_recIdents;
                RAST._IExpr _out314;
                DCOMP._IOwnership _out315;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out314, out _out315, out _out316);
                _3127_recursiveGen = _out314;
                _3128_recOwned = _out315;
                _3129_recIdents = _out316;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3127_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out317;
                DCOMP._IOwnership _out318;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out317, out _out318);
                r = _out317;
                resultingOwnership = _out318;
                readIdents = _3129_recIdents;
              }
            } else if (_source123.is_Array) {
              DAST._IType _3130___mcc_h106 = _source123.dtor_element;
              BigInteger _3131___mcc_h107 = _source123.dtor_dims;
              {
                RAST._IExpr _3132_recursiveGen;
                DCOMP._IOwnership _3133_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3134_recIdents;
                RAST._IExpr _out319;
                DCOMP._IOwnership _out320;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out321;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out319, out _out320, out _out321);
                _3132_recursiveGen = _out319;
                _3133_recOwned = _out320;
                _3134_recIdents = _out321;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3132_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out322;
                DCOMP._IOwnership _out323;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out322, out _out323);
                r = _out322;
                resultingOwnership = _out323;
                readIdents = _3134_recIdents;
              }
            } else if (_source123.is_Seq) {
              DAST._IType _3135___mcc_h110 = _source123.dtor_element;
              {
                RAST._IExpr _3136_recursiveGen;
                DCOMP._IOwnership _3137_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3138_recIdents;
                RAST._IExpr _out324;
                DCOMP._IOwnership _out325;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out326;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out324, out _out325, out _out326);
                _3136_recursiveGen = _out324;
                _3137_recOwned = _out325;
                _3138_recIdents = _out326;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3136_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out327;
                DCOMP._IOwnership _out328;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out327, out _out328);
                r = _out327;
                resultingOwnership = _out328;
                readIdents = _3138_recIdents;
              }
            } else if (_source123.is_Set) {
              DAST._IType _3139___mcc_h112 = _source123.dtor_element;
              {
                RAST._IExpr _3140_recursiveGen;
                DCOMP._IOwnership _3141_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3142_recIdents;
                RAST._IExpr _out329;
                DCOMP._IOwnership _out330;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out331;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out329, out _out330, out _out331);
                _3140_recursiveGen = _out329;
                _3141_recOwned = _out330;
                _3142_recIdents = _out331;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3140_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out332;
                DCOMP._IOwnership _out333;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out332, out _out333);
                r = _out332;
                resultingOwnership = _out333;
                readIdents = _3142_recIdents;
              }
            } else if (_source123.is_Multiset) {
              DAST._IType _3143___mcc_h114 = _source123.dtor_element;
              {
                RAST._IExpr _3144_recursiveGen;
                DCOMP._IOwnership _3145_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3146_recIdents;
                RAST._IExpr _out334;
                DCOMP._IOwnership _out335;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out334, out _out335, out _out336);
                _3144_recursiveGen = _out334;
                _3145_recOwned = _out335;
                _3146_recIdents = _out336;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3144_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out337;
                DCOMP._IOwnership _out338;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out337, out _out338);
                r = _out337;
                resultingOwnership = _out338;
                readIdents = _3146_recIdents;
              }
            } else if (_source123.is_Map) {
              DAST._IType _3147___mcc_h116 = _source123.dtor_key;
              DAST._IType _3148___mcc_h117 = _source123.dtor_value;
              {
                RAST._IExpr _3149_recursiveGen;
                DCOMP._IOwnership _3150_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3151_recIdents;
                RAST._IExpr _out339;
                DCOMP._IOwnership _out340;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out341;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out339, out _out340, out _out341);
                _3149_recursiveGen = _out339;
                _3150_recOwned = _out340;
                _3151_recIdents = _out341;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3149_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out342;
                DCOMP._IOwnership _out343;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out342, out _out343);
                r = _out342;
                resultingOwnership = _out343;
                readIdents = _3151_recIdents;
              }
            } else if (_source123.is_SetBuilder) {
              DAST._IType _3152___mcc_h120 = _source123.dtor_element;
              {
                RAST._IExpr _3153_recursiveGen;
                DCOMP._IOwnership _3154_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3155_recIdents;
                RAST._IExpr _out344;
                DCOMP._IOwnership _out345;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out346;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out344, out _out345, out _out346);
                _3153_recursiveGen = _out344;
                _3154_recOwned = _out345;
                _3155_recIdents = _out346;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3153_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out347;
                DCOMP._IOwnership _out348;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out347, out _out348);
                r = _out347;
                resultingOwnership = _out348;
                readIdents = _3155_recIdents;
              }
            } else if (_source123.is_MapBuilder) {
              DAST._IType _3156___mcc_h122 = _source123.dtor_key;
              DAST._IType _3157___mcc_h123 = _source123.dtor_value;
              {
                RAST._IExpr _3158_recursiveGen;
                DCOMP._IOwnership _3159_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3160_recIdents;
                RAST._IExpr _out349;
                DCOMP._IOwnership _out350;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out351;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out349, out _out350, out _out351);
                _3158_recursiveGen = _out349;
                _3159_recOwned = _out350;
                _3160_recIdents = _out351;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3158_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out352;
                DCOMP._IOwnership _out353;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out352, out _out353);
                r = _out352;
                resultingOwnership = _out353;
                readIdents = _3160_recIdents;
              }
            } else if (_source123.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3161___mcc_h126 = _source123.dtor_args;
              DAST._IType _3162___mcc_h127 = _source123.dtor_result;
              {
                RAST._IExpr _3163_recursiveGen;
                DCOMP._IOwnership _3164_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3165_recIdents;
                RAST._IExpr _out354;
                DCOMP._IOwnership _out355;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out354, out _out355, out _out356);
                _3163_recursiveGen = _out354;
                _3164_recOwned = _out355;
                _3165_recIdents = _out356;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3163_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out357;
                DCOMP._IOwnership _out358;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out357, out _out358);
                r = _out357;
                resultingOwnership = _out358;
                readIdents = _3165_recIdents;
              }
            } else if (_source123.is_Primitive) {
              DAST._IPrimitive _3166___mcc_h130 = _source123.dtor_Primitive_a0;
              {
                RAST._IExpr _3167_recursiveGen;
                DCOMP._IOwnership _3168_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3169_recIdents;
                RAST._IExpr _out359;
                DCOMP._IOwnership _out360;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out361;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out359, out _out360, out _out361);
                _3167_recursiveGen = _out359;
                _3168_recOwned = _out360;
                _3169_recIdents = _out361;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3167_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out362;
                DCOMP._IOwnership _out363;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out362, out _out363);
                r = _out362;
                resultingOwnership = _out363;
                readIdents = _3169_recIdents;
              }
            } else if (_source123.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3170___mcc_h132 = _source123.dtor_Passthrough_a0;
              {
                RAST._IExpr _3171_recursiveGen;
                DCOMP._IOwnership _3172_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3173_recIdents;
                RAST._IExpr _out364;
                DCOMP._IOwnership _out365;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out366;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out364, out _out365, out _out366);
                _3171_recursiveGen = _out364;
                _3172_recOwned = _out365;
                _3173_recIdents = _out366;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3171_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out367;
                DCOMP._IOwnership _out368;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out367, out _out368);
                r = _out367;
                resultingOwnership = _out368;
                readIdents = _3173_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3174___mcc_h134 = _source123.dtor_TypeArg_a0;
              {
                RAST._IExpr _3175_recursiveGen;
                DCOMP._IOwnership _3176_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3177_recIdents;
                RAST._IExpr _out369;
                DCOMP._IOwnership _out370;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out371;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out369, out _out370, out _out371);
                _3175_recursiveGen = _out369;
                _3176_recOwned = _out370;
                _3177_recIdents = _out371;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3175_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out372;
                DCOMP._IOwnership _out373;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out372, out _out373);
                r = _out372;
                resultingOwnership = _out373;
                readIdents = _3177_recIdents;
              }
            }
          } else {
            DAST._IType _3178___mcc_h136 = _source119.dtor_baseType;
            DAST._INewtypeRange _3179___mcc_h137 = _source119.dtor_range;
            bool _3180___mcc_h138 = _source119.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _3181___mcc_h139 = _source119.dtor_attributes;
            DAST._IType _source126 = _3003___mcc_h1;
            if (_source126.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3182___mcc_h152 = _source126.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _3183___mcc_h153 = _source126.dtor_typeArgs;
              DAST._IResolvedType _3184___mcc_h154 = _source126.dtor_resolved;
              DAST._IResolvedType _source127 = _3184___mcc_h154;
              if (_source127.is_Datatype) {
                DAST._IDatatypeType _3185___mcc_h161 = _source127.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _3186_attributes = _3181___mcc_h139;
                bool _3187_erase = _3180___mcc_h138;
                DAST._INewtypeRange _3188_range = _3179___mcc_h137;
                DAST._IType _3189_b = _3178___mcc_h136;
                {
                  if (object.Equals(_3189_b, _2998_toTpe)) {
                    RAST._IExpr _3190_recursiveGen;
                    DCOMP._IOwnership _3191_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3192_recIdents;
                    RAST._IExpr _out374;
                    DCOMP._IOwnership _out375;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out376;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out374, out _out375, out _out376);
                    _3190_recursiveGen = _out374;
                    _3191_recOwned = _out375;
                    _3192_recIdents = _out376;
                    if (_3187_erase) {
                      r = _3190_recursiveGen;
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3190_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                    }
                    RAST._IExpr _out377;
                    DCOMP._IOwnership _out378;
                    DCOMP.COMP.FromOwnership(r, _3191_recOwned, expectedOwnership, out _out377, out _out378);
                    r = _out377;
                    resultingOwnership = _out378;
                    readIdents = _3192_recIdents;
                  } else {
                    RAST._IExpr _out379;
                    DCOMP._IOwnership _out380;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3189_b), _3189_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out379, out _out380, out _out381);
                    r = _out379;
                    resultingOwnership = _out380;
                    readIdents = _out381;
                  }
                }
              } else if (_source127.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3193___mcc_h164 = _source127.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _3194___mcc_h165 = _source127.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3195_attributes = _3181___mcc_h139;
                bool _3196_erase = _3180___mcc_h138;
                DAST._INewtypeRange _3197_range = _3179___mcc_h137;
                DAST._IType _3198_b = _3178___mcc_h136;
                {
                  if (object.Equals(_3198_b, _2998_toTpe)) {
                    RAST._IExpr _3199_recursiveGen;
                    DCOMP._IOwnership _3200_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3201_recIdents;
                    RAST._IExpr _out382;
                    DCOMP._IOwnership _out383;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out384;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out382, out _out383, out _out384);
                    _3199_recursiveGen = _out382;
                    _3200_recOwned = _out383;
                    _3201_recIdents = _out384;
                    if (_3196_erase) {
                      r = _3199_recursiveGen;
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3199_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                    }
                    RAST._IExpr _out385;
                    DCOMP._IOwnership _out386;
                    DCOMP.COMP.FromOwnership(r, _3200_recOwned, expectedOwnership, out _out385, out _out386);
                    r = _out385;
                    resultingOwnership = _out386;
                    readIdents = _3201_recIdents;
                  } else {
                    RAST._IExpr _out387;
                    DCOMP._IOwnership _out388;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3198_b), _3198_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out387, out _out388, out _out389);
                    r = _out387;
                    resultingOwnership = _out388;
                    readIdents = _out389;
                  }
                }
              } else {
                DAST._IType _3202___mcc_h170 = _source127.dtor_baseType;
                DAST._INewtypeRange _3203___mcc_h171 = _source127.dtor_range;
                bool _3204___mcc_h172 = _source127.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _3205___mcc_h173 = _source127.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _3206_attributes = _3205___mcc_h173;
                bool _3207_erase = _3204___mcc_h172;
                DAST._INewtypeRange _3208_range = _3203___mcc_h171;
                DAST._IType _3209_b = _3202___mcc_h170;
                {
                  if (object.Equals(_2997_fromTpe, _3209_b)) {
                    RAST._IExpr _3210_recursiveGen;
                    DCOMP._IOwnership _3211_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3212_recIdents;
                    RAST._IExpr _out390;
                    DCOMP._IOwnership _out391;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out392;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out390, out _out391, out _out392);
                    _3210_recursiveGen = _out390;
                    _3211_recOwned = _out391;
                    _3212_recIdents = _out392;
                    Std.Wrappers._IOption<RAST._IType> _3213_potentialRhsType;
                    _3213_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3209_b, _3208_range);
                    Std.Wrappers._IOption<RAST._IType> _source128 = _3213_potentialRhsType;
                    if (_source128.is_None) {
                      if (_3207_erase) {
                        r = _3210_recursiveGen;
                      } else {
                        RAST._IType _3214_rhsType;
                        RAST._IType _out393;
                        _out393 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                        _3214_rhsType = _out393;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3214_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3210_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out394;
                      DCOMP._IOwnership _out395;
                      DCOMP.COMP.FromOwnership(r, _3211_recOwned, expectedOwnership, out _out394, out _out395);
                      r = _out394;
                      resultingOwnership = _out395;
                    } else {
                      RAST._IType _3215___mcc_h1248 = _source128.dtor_value;
                      RAST._IType _3216_v = _3215___mcc_h1248;
                      r = RAST.Expr.create_ConversionNum(_3216_v, _3210_recursiveGen);
                      RAST._IExpr _out396;
                      DCOMP._IOwnership _out397;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out396, out _out397);
                      r = _out396;
                      resultingOwnership = _out397;
                    }
                    readIdents = _3212_recIdents;
                  } else {
                    RAST._IExpr _out398;
                    DCOMP._IOwnership _out399;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out400;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3209_b), _3209_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out398, out _out399, out _out400);
                    r = _out398;
                    resultingOwnership = _out399;
                    readIdents = _out400;
                  }
                }
              }
            } else if (_source126.is_Nullable) {
              DAST._IType _3217___mcc_h182 = _source126.dtor_Nullable_a0;
              {
                RAST._IExpr _3218_recursiveGen;
                DCOMP._IOwnership _3219_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3220_recIdents;
                RAST._IExpr _out401;
                DCOMP._IOwnership _out402;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out403;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out401, out _out402, out _out403);
                _3218_recursiveGen = _out401;
                _3219_recOwned = _out402;
                _3220_recIdents = _out403;
                Dafny.ISequence<Dafny.Rune> _3221_s;
                _3221_s = (_3218_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3219_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3221_s = Dafny.Sequence<Dafny.Rune>.Concat(_3221_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _3221_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3221_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_3221_s);
                RAST._IExpr _out404;
                DCOMP._IOwnership _out405;
                DCOMP.COMP.FromOwnership(r, _3219_recOwned, expectedOwnership, out _out404, out _out405);
                r = _out404;
                resultingOwnership = _out405;
                readIdents = _3220_recIdents;
              }
            } else if (_source126.is_Tuple) {
              Dafny.ISequence<DAST._IType> _3222___mcc_h185 = _source126.dtor_Tuple_a0;
              Dafny.ISequence<DAST._IAttribute> _3223_attributes = _3181___mcc_h139;
              bool _3224_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3225_range = _3179___mcc_h137;
              DAST._IType _3226_b = _3178___mcc_h136;
              {
                if (object.Equals(_3226_b, _2998_toTpe)) {
                  RAST._IExpr _3227_recursiveGen;
                  DCOMP._IOwnership _3228_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3229_recIdents;
                  RAST._IExpr _out406;
                  DCOMP._IOwnership _out407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out408;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out406, out _out407, out _out408);
                  _3227_recursiveGen = _out406;
                  _3228_recOwned = _out407;
                  _3229_recIdents = _out408;
                  if (_3224_erase) {
                    r = _3227_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3227_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out409;
                  DCOMP._IOwnership _out410;
                  DCOMP.COMP.FromOwnership(r, _3228_recOwned, expectedOwnership, out _out409, out _out410);
                  r = _out409;
                  resultingOwnership = _out410;
                  readIdents = _3229_recIdents;
                } else {
                  RAST._IExpr _out411;
                  DCOMP._IOwnership _out412;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3226_b), _3226_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out411, out _out412, out _out413);
                  r = _out411;
                  resultingOwnership = _out412;
                  readIdents = _out413;
                }
              }
            } else if (_source126.is_Array) {
              DAST._IType _3230___mcc_h188 = _source126.dtor_element;
              BigInteger _3231___mcc_h189 = _source126.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _3232_attributes = _3181___mcc_h139;
              bool _3233_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3234_range = _3179___mcc_h137;
              DAST._IType _3235_b = _3178___mcc_h136;
              {
                if (object.Equals(_3235_b, _2998_toTpe)) {
                  RAST._IExpr _3236_recursiveGen;
                  DCOMP._IOwnership _3237_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3238_recIdents;
                  RAST._IExpr _out414;
                  DCOMP._IOwnership _out415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out416;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out414, out _out415, out _out416);
                  _3236_recursiveGen = _out414;
                  _3237_recOwned = _out415;
                  _3238_recIdents = _out416;
                  if (_3233_erase) {
                    r = _3236_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3236_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out417;
                  DCOMP._IOwnership _out418;
                  DCOMP.COMP.FromOwnership(r, _3237_recOwned, expectedOwnership, out _out417, out _out418);
                  r = _out417;
                  resultingOwnership = _out418;
                  readIdents = _3238_recIdents;
                } else {
                  RAST._IExpr _out419;
                  DCOMP._IOwnership _out420;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3235_b), _3235_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out419, out _out420, out _out421);
                  r = _out419;
                  resultingOwnership = _out420;
                  readIdents = _out421;
                }
              }
            } else if (_source126.is_Seq) {
              DAST._IType _3239___mcc_h194 = _source126.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3240_attributes = _3181___mcc_h139;
              bool _3241_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3242_range = _3179___mcc_h137;
              DAST._IType _3243_b = _3178___mcc_h136;
              {
                if (object.Equals(_3243_b, _2998_toTpe)) {
                  RAST._IExpr _3244_recursiveGen;
                  DCOMP._IOwnership _3245_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3246_recIdents;
                  RAST._IExpr _out422;
                  DCOMP._IOwnership _out423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out424;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out422, out _out423, out _out424);
                  _3244_recursiveGen = _out422;
                  _3245_recOwned = _out423;
                  _3246_recIdents = _out424;
                  if (_3241_erase) {
                    r = _3244_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3244_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out425;
                  DCOMP._IOwnership _out426;
                  DCOMP.COMP.FromOwnership(r, _3245_recOwned, expectedOwnership, out _out425, out _out426);
                  r = _out425;
                  resultingOwnership = _out426;
                  readIdents = _3246_recIdents;
                } else {
                  RAST._IExpr _out427;
                  DCOMP._IOwnership _out428;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3243_b), _3243_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out427, out _out428, out _out429);
                  r = _out427;
                  resultingOwnership = _out428;
                  readIdents = _out429;
                }
              }
            } else if (_source126.is_Set) {
              DAST._IType _3247___mcc_h197 = _source126.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3248_attributes = _3181___mcc_h139;
              bool _3249_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3250_range = _3179___mcc_h137;
              DAST._IType _3251_b = _3178___mcc_h136;
              {
                if (object.Equals(_3251_b, _2998_toTpe)) {
                  RAST._IExpr _3252_recursiveGen;
                  DCOMP._IOwnership _3253_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3254_recIdents;
                  RAST._IExpr _out430;
                  DCOMP._IOwnership _out431;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out432;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out430, out _out431, out _out432);
                  _3252_recursiveGen = _out430;
                  _3253_recOwned = _out431;
                  _3254_recIdents = _out432;
                  if (_3249_erase) {
                    r = _3252_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3252_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out433;
                  DCOMP._IOwnership _out434;
                  DCOMP.COMP.FromOwnership(r, _3253_recOwned, expectedOwnership, out _out433, out _out434);
                  r = _out433;
                  resultingOwnership = _out434;
                  readIdents = _3254_recIdents;
                } else {
                  RAST._IExpr _out435;
                  DCOMP._IOwnership _out436;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3251_b), _3251_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out435, out _out436, out _out437);
                  r = _out435;
                  resultingOwnership = _out436;
                  readIdents = _out437;
                }
              }
            } else if (_source126.is_Multiset) {
              DAST._IType _3255___mcc_h200 = _source126.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3256_attributes = _3181___mcc_h139;
              bool _3257_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3258_range = _3179___mcc_h137;
              DAST._IType _3259_b = _3178___mcc_h136;
              {
                if (object.Equals(_3259_b, _2998_toTpe)) {
                  RAST._IExpr _3260_recursiveGen;
                  DCOMP._IOwnership _3261_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3262_recIdents;
                  RAST._IExpr _out438;
                  DCOMP._IOwnership _out439;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out440;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out438, out _out439, out _out440);
                  _3260_recursiveGen = _out438;
                  _3261_recOwned = _out439;
                  _3262_recIdents = _out440;
                  if (_3257_erase) {
                    r = _3260_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3260_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out441;
                  DCOMP._IOwnership _out442;
                  DCOMP.COMP.FromOwnership(r, _3261_recOwned, expectedOwnership, out _out441, out _out442);
                  r = _out441;
                  resultingOwnership = _out442;
                  readIdents = _3262_recIdents;
                } else {
                  RAST._IExpr _out443;
                  DCOMP._IOwnership _out444;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3259_b), _3259_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out443, out _out444, out _out445);
                  r = _out443;
                  resultingOwnership = _out444;
                  readIdents = _out445;
                }
              }
            } else if (_source126.is_Map) {
              DAST._IType _3263___mcc_h203 = _source126.dtor_key;
              DAST._IType _3264___mcc_h204 = _source126.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _3265_attributes = _3181___mcc_h139;
              bool _3266_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3267_range = _3179___mcc_h137;
              DAST._IType _3268_b = _3178___mcc_h136;
              {
                if (object.Equals(_3268_b, _2998_toTpe)) {
                  RAST._IExpr _3269_recursiveGen;
                  DCOMP._IOwnership _3270_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3271_recIdents;
                  RAST._IExpr _out446;
                  DCOMP._IOwnership _out447;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out448;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out446, out _out447, out _out448);
                  _3269_recursiveGen = _out446;
                  _3270_recOwned = _out447;
                  _3271_recIdents = _out448;
                  if (_3266_erase) {
                    r = _3269_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3269_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out449;
                  DCOMP._IOwnership _out450;
                  DCOMP.COMP.FromOwnership(r, _3270_recOwned, expectedOwnership, out _out449, out _out450);
                  r = _out449;
                  resultingOwnership = _out450;
                  readIdents = _3271_recIdents;
                } else {
                  RAST._IExpr _out451;
                  DCOMP._IOwnership _out452;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3268_b), _3268_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out451, out _out452, out _out453);
                  r = _out451;
                  resultingOwnership = _out452;
                  readIdents = _out453;
                }
              }
            } else if (_source126.is_SetBuilder) {
              DAST._IType _3272___mcc_h209 = _source126.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _3273_attributes = _3181___mcc_h139;
              bool _3274_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3275_range = _3179___mcc_h137;
              DAST._IType _3276_b = _3178___mcc_h136;
              {
                if (object.Equals(_3276_b, _2998_toTpe)) {
                  RAST._IExpr _3277_recursiveGen;
                  DCOMP._IOwnership _3278_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3279_recIdents;
                  RAST._IExpr _out454;
                  DCOMP._IOwnership _out455;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out456;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out454, out _out455, out _out456);
                  _3277_recursiveGen = _out454;
                  _3278_recOwned = _out455;
                  _3279_recIdents = _out456;
                  if (_3274_erase) {
                    r = _3277_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3277_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out457;
                  DCOMP._IOwnership _out458;
                  DCOMP.COMP.FromOwnership(r, _3278_recOwned, expectedOwnership, out _out457, out _out458);
                  r = _out457;
                  resultingOwnership = _out458;
                  readIdents = _3279_recIdents;
                } else {
                  RAST._IExpr _out459;
                  DCOMP._IOwnership _out460;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3276_b), _3276_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out459, out _out460, out _out461);
                  r = _out459;
                  resultingOwnership = _out460;
                  readIdents = _out461;
                }
              }
            } else if (_source126.is_MapBuilder) {
              DAST._IType _3280___mcc_h212 = _source126.dtor_key;
              DAST._IType _3281___mcc_h213 = _source126.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _3282_attributes = _3181___mcc_h139;
              bool _3283_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3284_range = _3179___mcc_h137;
              DAST._IType _3285_b = _3178___mcc_h136;
              {
                if (object.Equals(_3285_b, _2998_toTpe)) {
                  RAST._IExpr _3286_recursiveGen;
                  DCOMP._IOwnership _3287_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3288_recIdents;
                  RAST._IExpr _out462;
                  DCOMP._IOwnership _out463;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out464;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out462, out _out463, out _out464);
                  _3286_recursiveGen = _out462;
                  _3287_recOwned = _out463;
                  _3288_recIdents = _out464;
                  if (_3283_erase) {
                    r = _3286_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3286_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out465;
                  DCOMP._IOwnership _out466;
                  DCOMP.COMP.FromOwnership(r, _3287_recOwned, expectedOwnership, out _out465, out _out466);
                  r = _out465;
                  resultingOwnership = _out466;
                  readIdents = _3288_recIdents;
                } else {
                  RAST._IExpr _out467;
                  DCOMP._IOwnership _out468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3285_b), _3285_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out467, out _out468, out _out469);
                  r = _out467;
                  resultingOwnership = _out468;
                  readIdents = _out469;
                }
              }
            } else if (_source126.is_Arrow) {
              Dafny.ISequence<DAST._IType> _3289___mcc_h218 = _source126.dtor_args;
              DAST._IType _3290___mcc_h219 = _source126.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _3291_attributes = _3181___mcc_h139;
              bool _3292_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3293_range = _3179___mcc_h137;
              DAST._IType _3294_b = _3178___mcc_h136;
              {
                if (object.Equals(_3294_b, _2998_toTpe)) {
                  RAST._IExpr _3295_recursiveGen;
                  DCOMP._IOwnership _3296_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3297_recIdents;
                  RAST._IExpr _out470;
                  DCOMP._IOwnership _out471;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out472;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out470, out _out471, out _out472);
                  _3295_recursiveGen = _out470;
                  _3296_recOwned = _out471;
                  _3297_recIdents = _out472;
                  if (_3292_erase) {
                    r = _3295_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3295_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out473;
                  DCOMP._IOwnership _out474;
                  DCOMP.COMP.FromOwnership(r, _3296_recOwned, expectedOwnership, out _out473, out _out474);
                  r = _out473;
                  resultingOwnership = _out474;
                  readIdents = _3297_recIdents;
                } else {
                  RAST._IExpr _out475;
                  DCOMP._IOwnership _out476;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3294_b), _3294_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out475, out _out476, out _out477);
                  r = _out475;
                  resultingOwnership = _out476;
                  readIdents = _out477;
                }
              }
            } else if (_source126.is_Primitive) {
              DAST._IPrimitive _3298___mcc_h224 = _source126.dtor_Primitive_a0;
              Dafny.ISequence<DAST._IAttribute> _3299_attributes = _3181___mcc_h139;
              bool _3300_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3301_range = _3179___mcc_h137;
              DAST._IType _3302_b = _3178___mcc_h136;
              {
                if (object.Equals(_3302_b, _2998_toTpe)) {
                  RAST._IExpr _3303_recursiveGen;
                  DCOMP._IOwnership _3304_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3305_recIdents;
                  RAST._IExpr _out478;
                  DCOMP._IOwnership _out479;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out480;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out478, out _out479, out _out480);
                  _3303_recursiveGen = _out478;
                  _3304_recOwned = _out479;
                  _3305_recIdents = _out480;
                  if (_3300_erase) {
                    r = _3303_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3303_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out481;
                  DCOMP._IOwnership _out482;
                  DCOMP.COMP.FromOwnership(r, _3304_recOwned, expectedOwnership, out _out481, out _out482);
                  r = _out481;
                  resultingOwnership = _out482;
                  readIdents = _3305_recIdents;
                } else {
                  RAST._IExpr _out483;
                  DCOMP._IOwnership _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3302_b), _3302_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out483, out _out484, out _out485);
                  r = _out483;
                  resultingOwnership = _out484;
                  readIdents = _out485;
                }
              }
            } else if (_source126.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _3306___mcc_h227 = _source126.dtor_Passthrough_a0;
              Dafny.ISequence<DAST._IAttribute> _3307_attributes = _3181___mcc_h139;
              bool _3308_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3309_range = _3179___mcc_h137;
              DAST._IType _3310_b = _3178___mcc_h136;
              {
                if (object.Equals(_3310_b, _2998_toTpe)) {
                  RAST._IExpr _3311_recursiveGen;
                  DCOMP._IOwnership _3312_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3313_recIdents;
                  RAST._IExpr _out486;
                  DCOMP._IOwnership _out487;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out488;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out486, out _out487, out _out488);
                  _3311_recursiveGen = _out486;
                  _3312_recOwned = _out487;
                  _3313_recIdents = _out488;
                  if (_3308_erase) {
                    r = _3311_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3311_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out489;
                  DCOMP._IOwnership _out490;
                  DCOMP.COMP.FromOwnership(r, _3312_recOwned, expectedOwnership, out _out489, out _out490);
                  r = _out489;
                  resultingOwnership = _out490;
                  readIdents = _3313_recIdents;
                } else {
                  RAST._IExpr _out491;
                  DCOMP._IOwnership _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3310_b), _3310_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out491, out _out492, out _out493);
                  r = _out491;
                  resultingOwnership = _out492;
                  readIdents = _out493;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _3314___mcc_h230 = _source126.dtor_TypeArg_a0;
              Dafny.ISequence<DAST._IAttribute> _3315_attributes = _3181___mcc_h139;
              bool _3316_erase = _3180___mcc_h138;
              DAST._INewtypeRange _3317_range = _3179___mcc_h137;
              DAST._IType _3318_b = _3178___mcc_h136;
              {
                if (object.Equals(_3318_b, _2998_toTpe)) {
                  RAST._IExpr _3319_recursiveGen;
                  DCOMP._IOwnership _3320_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3321_recIdents;
                  RAST._IExpr _out494;
                  DCOMP._IOwnership _out495;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out496;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out494, out _out495, out _out496);
                  _3319_recursiveGen = _out494;
                  _3320_recOwned = _out495;
                  _3321_recIdents = _out496;
                  if (_3316_erase) {
                    r = _3319_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_3319_recursiveGen)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out497;
                  DCOMP._IOwnership _out498;
                  DCOMP.COMP.FromOwnership(r, _3320_recOwned, expectedOwnership, out _out497, out _out498);
                  r = _out497;
                  resultingOwnership = _out498;
                  readIdents = _3321_recIdents;
                } else {
                  RAST._IExpr _out499;
                  DCOMP._IOwnership _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3318_b), _3318_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out499, out _out500, out _out501);
                  r = _out499;
                  resultingOwnership = _out500;
                  readIdents = _out501;
                }
              }
            }
          }
        } else if (_source118.is_Nullable) {
          DAST._IType _3322___mcc_h233 = _source118.dtor_Nullable_a0;
          DAST._IType _source129 = _3003___mcc_h1;
          if (_source129.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3323___mcc_h237 = _source129.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3324___mcc_h238 = _source129.dtor_typeArgs;
            DAST._IResolvedType _3325___mcc_h239 = _source129.dtor_resolved;
            DAST._IResolvedType _source130 = _3325___mcc_h239;
            if (_source130.is_Datatype) {
              DAST._IDatatypeType _3326___mcc_h246 = _source130.dtor_datatypeType;
              {
                RAST._IExpr _3327_recursiveGen;
                DCOMP._IOwnership _3328_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3329_recIdents;
                RAST._IExpr _out502;
                DCOMP._IOwnership _out503;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out504;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out502, out _out503, out _out504);
                _3327_recursiveGen = _out502;
                _3328_recOwned = _out503;
                _3329_recIdents = _out504;
                Dafny.ISequence<Dafny.Rune> _3330_s;
                _3330_s = (_3327_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3328_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3330_s = Dafny.Sequence<Dafny.Rune>.Concat(_3330_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _3330_s = Dafny.Sequence<Dafny.Rune>.Concat(_3330_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_3330_s);
                RAST._IExpr _out505;
                DCOMP._IOwnership _out506;
                DCOMP.COMP.FromOwnership(r, _3328_recOwned, expectedOwnership, out _out505, out _out506);
                r = _out505;
                resultingOwnership = _out506;
                readIdents = _3329_recIdents;
              }
            } else if (_source130.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3331___mcc_h249 = _source130.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3332___mcc_h250 = _source130.dtor_attributes;
              {
                RAST._IExpr _3333_recursiveGen;
                DCOMP._IOwnership _3334_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3335_recIdents;
                RAST._IExpr _out507;
                DCOMP._IOwnership _out508;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out507, out _out508, out _out509);
                _3333_recursiveGen = _out507;
                _3334_recOwned = _out508;
                _3335_recIdents = _out509;
                Dafny.ISequence<Dafny.Rune> _3336_s;
                _3336_s = (_3333_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3334_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3336_s = Dafny.Sequence<Dafny.Rune>.Concat(_3336_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _3336_s = Dafny.Sequence<Dafny.Rune>.Concat(_3336_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_3336_s);
                RAST._IExpr _out510;
                DCOMP._IOwnership _out511;
                DCOMP.COMP.FromOwnership(r, _3334_recOwned, expectedOwnership, out _out510, out _out511);
                r = _out510;
                resultingOwnership = _out511;
                readIdents = _3335_recIdents;
              }
            } else {
              DAST._IType _3337___mcc_h255 = _source130.dtor_baseType;
              DAST._INewtypeRange _3338___mcc_h256 = _source130.dtor_range;
              bool _3339___mcc_h257 = _source130.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3340___mcc_h258 = _source130.dtor_attributes;
              {
                RAST._IExpr _3341_recursiveGen;
                DCOMP._IOwnership _3342_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3343_recIdents;
                RAST._IExpr _out512;
                DCOMP._IOwnership _out513;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out514;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out512, out _out513, out _out514);
                _3341_recursiveGen = _out512;
                _3342_recOwned = _out513;
                _3343_recIdents = _out514;
                Dafny.ISequence<Dafny.Rune> _3344_s;
                _3344_s = (_3341_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_3342_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _3344_s = Dafny.Sequence<Dafny.Rune>.Concat(_3344_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _3344_s = Dafny.Sequence<Dafny.Rune>.Concat(_3344_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_3344_s);
                RAST._IExpr _out515;
                DCOMP._IOwnership _out516;
                DCOMP.COMP.FromOwnership(r, _3342_recOwned, expectedOwnership, out _out515, out _out516);
                r = _out515;
                resultingOwnership = _out516;
                readIdents = _3343_recIdents;
              }
            }
          } else if (_source129.is_Nullable) {
            DAST._IType _3345___mcc_h267 = _source129.dtor_Nullable_a0;
            {
              RAST._IExpr _3346_recursiveGen;
              DCOMP._IOwnership _3347_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3348_recIdents;
              RAST._IExpr _out517;
              DCOMP._IOwnership _out518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out519;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out517, out _out518, out _out519);
              _3346_recursiveGen = _out517;
              _3347_recOwned = _out518;
              _3348_recIdents = _out519;
              Dafny.ISequence<Dafny.Rune> _3349_s;
              _3349_s = (_3346_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3347_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3349_s = Dafny.Sequence<Dafny.Rune>.Concat(_3349_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3349_s = Dafny.Sequence<Dafny.Rune>.Concat(_3349_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3349_s);
              RAST._IExpr _out520;
              DCOMP._IOwnership _out521;
              DCOMP.COMP.FromOwnership(r, _3347_recOwned, expectedOwnership, out _out520, out _out521);
              r = _out520;
              resultingOwnership = _out521;
              readIdents = _3348_recIdents;
            }
          } else if (_source129.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3350___mcc_h270 = _source129.dtor_Tuple_a0;
            {
              RAST._IExpr _3351_recursiveGen;
              DCOMP._IOwnership _3352_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3353_recIdents;
              RAST._IExpr _out522;
              DCOMP._IOwnership _out523;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out524;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out522, out _out523, out _out524);
              _3351_recursiveGen = _out522;
              _3352_recOwned = _out523;
              _3353_recIdents = _out524;
              Dafny.ISequence<Dafny.Rune> _3354_s;
              _3354_s = (_3351_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3352_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3354_s = Dafny.Sequence<Dafny.Rune>.Concat(_3354_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3354_s = Dafny.Sequence<Dafny.Rune>.Concat(_3354_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3354_s);
              RAST._IExpr _out525;
              DCOMP._IOwnership _out526;
              DCOMP.COMP.FromOwnership(r, _3352_recOwned, expectedOwnership, out _out525, out _out526);
              r = _out525;
              resultingOwnership = _out526;
              readIdents = _3353_recIdents;
            }
          } else if (_source129.is_Array) {
            DAST._IType _3355___mcc_h273 = _source129.dtor_element;
            BigInteger _3356___mcc_h274 = _source129.dtor_dims;
            {
              RAST._IExpr _3357_recursiveGen;
              DCOMP._IOwnership _3358_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3359_recIdents;
              RAST._IExpr _out527;
              DCOMP._IOwnership _out528;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out529;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out527, out _out528, out _out529);
              _3357_recursiveGen = _out527;
              _3358_recOwned = _out528;
              _3359_recIdents = _out529;
              Dafny.ISequence<Dafny.Rune> _3360_s;
              _3360_s = (_3357_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3358_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3360_s = Dafny.Sequence<Dafny.Rune>.Concat(_3360_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3360_s = Dafny.Sequence<Dafny.Rune>.Concat(_3360_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3360_s);
              RAST._IExpr _out530;
              DCOMP._IOwnership _out531;
              DCOMP.COMP.FromOwnership(r, _3358_recOwned, expectedOwnership, out _out530, out _out531);
              r = _out530;
              resultingOwnership = _out531;
              readIdents = _3359_recIdents;
            }
          } else if (_source129.is_Seq) {
            DAST._IType _3361___mcc_h279 = _source129.dtor_element;
            {
              RAST._IExpr _3362_recursiveGen;
              DCOMP._IOwnership _3363_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3364_recIdents;
              RAST._IExpr _out532;
              DCOMP._IOwnership _out533;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out532, out _out533, out _out534);
              _3362_recursiveGen = _out532;
              _3363_recOwned = _out533;
              _3364_recIdents = _out534;
              Dafny.ISequence<Dafny.Rune> _3365_s;
              _3365_s = (_3362_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3363_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3365_s = Dafny.Sequence<Dafny.Rune>.Concat(_3365_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3365_s = Dafny.Sequence<Dafny.Rune>.Concat(_3365_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3365_s);
              RAST._IExpr _out535;
              DCOMP._IOwnership _out536;
              DCOMP.COMP.FromOwnership(r, _3363_recOwned, expectedOwnership, out _out535, out _out536);
              r = _out535;
              resultingOwnership = _out536;
              readIdents = _3364_recIdents;
            }
          } else if (_source129.is_Set) {
            DAST._IType _3366___mcc_h282 = _source129.dtor_element;
            {
              RAST._IExpr _3367_recursiveGen;
              DCOMP._IOwnership _3368_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3369_recIdents;
              RAST._IExpr _out537;
              DCOMP._IOwnership _out538;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out539;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out537, out _out538, out _out539);
              _3367_recursiveGen = _out537;
              _3368_recOwned = _out538;
              _3369_recIdents = _out539;
              Dafny.ISequence<Dafny.Rune> _3370_s;
              _3370_s = (_3367_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3368_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3370_s = Dafny.Sequence<Dafny.Rune>.Concat(_3370_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3370_s = Dafny.Sequence<Dafny.Rune>.Concat(_3370_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3370_s);
              RAST._IExpr _out540;
              DCOMP._IOwnership _out541;
              DCOMP.COMP.FromOwnership(r, _3368_recOwned, expectedOwnership, out _out540, out _out541);
              r = _out540;
              resultingOwnership = _out541;
              readIdents = _3369_recIdents;
            }
          } else if (_source129.is_Multiset) {
            DAST._IType _3371___mcc_h285 = _source129.dtor_element;
            {
              RAST._IExpr _3372_recursiveGen;
              DCOMP._IOwnership _3373_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3374_recIdents;
              RAST._IExpr _out542;
              DCOMP._IOwnership _out543;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out544;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out542, out _out543, out _out544);
              _3372_recursiveGen = _out542;
              _3373_recOwned = _out543;
              _3374_recIdents = _out544;
              Dafny.ISequence<Dafny.Rune> _3375_s;
              _3375_s = (_3372_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3373_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3375_s = Dafny.Sequence<Dafny.Rune>.Concat(_3375_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3375_s = Dafny.Sequence<Dafny.Rune>.Concat(_3375_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3375_s);
              RAST._IExpr _out545;
              DCOMP._IOwnership _out546;
              DCOMP.COMP.FromOwnership(r, _3373_recOwned, expectedOwnership, out _out545, out _out546);
              r = _out545;
              resultingOwnership = _out546;
              readIdents = _3374_recIdents;
            }
          } else if (_source129.is_Map) {
            DAST._IType _3376___mcc_h288 = _source129.dtor_key;
            DAST._IType _3377___mcc_h289 = _source129.dtor_value;
            {
              RAST._IExpr _3378_recursiveGen;
              DCOMP._IOwnership _3379_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3380_recIdents;
              RAST._IExpr _out547;
              DCOMP._IOwnership _out548;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out549;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out547, out _out548, out _out549);
              _3378_recursiveGen = _out547;
              _3379_recOwned = _out548;
              _3380_recIdents = _out549;
              Dafny.ISequence<Dafny.Rune> _3381_s;
              _3381_s = (_3378_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3379_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3381_s = Dafny.Sequence<Dafny.Rune>.Concat(_3381_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3381_s = Dafny.Sequence<Dafny.Rune>.Concat(_3381_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3381_s);
              RAST._IExpr _out550;
              DCOMP._IOwnership _out551;
              DCOMP.COMP.FromOwnership(r, _3379_recOwned, expectedOwnership, out _out550, out _out551);
              r = _out550;
              resultingOwnership = _out551;
              readIdents = _3380_recIdents;
            }
          } else if (_source129.is_SetBuilder) {
            DAST._IType _3382___mcc_h294 = _source129.dtor_element;
            {
              RAST._IExpr _3383_recursiveGen;
              DCOMP._IOwnership _3384_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3385_recIdents;
              RAST._IExpr _out552;
              DCOMP._IOwnership _out553;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out552, out _out553, out _out554);
              _3383_recursiveGen = _out552;
              _3384_recOwned = _out553;
              _3385_recIdents = _out554;
              Dafny.ISequence<Dafny.Rune> _3386_s;
              _3386_s = (_3383_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3384_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3386_s = Dafny.Sequence<Dafny.Rune>.Concat(_3386_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3386_s = Dafny.Sequence<Dafny.Rune>.Concat(_3386_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3386_s);
              RAST._IExpr _out555;
              DCOMP._IOwnership _out556;
              DCOMP.COMP.FromOwnership(r, _3384_recOwned, expectedOwnership, out _out555, out _out556);
              r = _out555;
              resultingOwnership = _out556;
              readIdents = _3385_recIdents;
            }
          } else if (_source129.is_MapBuilder) {
            DAST._IType _3387___mcc_h297 = _source129.dtor_key;
            DAST._IType _3388___mcc_h298 = _source129.dtor_value;
            {
              RAST._IExpr _3389_recursiveGen;
              DCOMP._IOwnership _3390_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3391_recIdents;
              RAST._IExpr _out557;
              DCOMP._IOwnership _out558;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out559;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out557, out _out558, out _out559);
              _3389_recursiveGen = _out557;
              _3390_recOwned = _out558;
              _3391_recIdents = _out559;
              Dafny.ISequence<Dafny.Rune> _3392_s;
              _3392_s = (_3389_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3390_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3392_s = Dafny.Sequence<Dafny.Rune>.Concat(_3392_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3392_s = Dafny.Sequence<Dafny.Rune>.Concat(_3392_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3392_s);
              RAST._IExpr _out560;
              DCOMP._IOwnership _out561;
              DCOMP.COMP.FromOwnership(r, _3390_recOwned, expectedOwnership, out _out560, out _out561);
              r = _out560;
              resultingOwnership = _out561;
              readIdents = _3391_recIdents;
            }
          } else if (_source129.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3393___mcc_h303 = _source129.dtor_args;
            DAST._IType _3394___mcc_h304 = _source129.dtor_result;
            {
              RAST._IExpr _3395_recursiveGen;
              DCOMP._IOwnership _3396_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3397_recIdents;
              RAST._IExpr _out562;
              DCOMP._IOwnership _out563;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out564;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out562, out _out563, out _out564);
              _3395_recursiveGen = _out562;
              _3396_recOwned = _out563;
              _3397_recIdents = _out564;
              Dafny.ISequence<Dafny.Rune> _3398_s;
              _3398_s = (_3395_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3396_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3398_s = Dafny.Sequence<Dafny.Rune>.Concat(_3398_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3398_s = Dafny.Sequence<Dafny.Rune>.Concat(_3398_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3398_s);
              RAST._IExpr _out565;
              DCOMP._IOwnership _out566;
              DCOMP.COMP.FromOwnership(r, _3396_recOwned, expectedOwnership, out _out565, out _out566);
              r = _out565;
              resultingOwnership = _out566;
              readIdents = _3397_recIdents;
            }
          } else if (_source129.is_Primitive) {
            DAST._IPrimitive _3399___mcc_h309 = _source129.dtor_Primitive_a0;
            {
              RAST._IExpr _3400_recursiveGen;
              DCOMP._IOwnership _3401_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3402_recIdents;
              RAST._IExpr _out567;
              DCOMP._IOwnership _out568;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out569;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out567, out _out568, out _out569);
              _3400_recursiveGen = _out567;
              _3401_recOwned = _out568;
              _3402_recIdents = _out569;
              Dafny.ISequence<Dafny.Rune> _3403_s;
              _3403_s = (_3400_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3401_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3403_s = Dafny.Sequence<Dafny.Rune>.Concat(_3403_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3403_s = Dafny.Sequence<Dafny.Rune>.Concat(_3403_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3403_s);
              RAST._IExpr _out570;
              DCOMP._IOwnership _out571;
              DCOMP.COMP.FromOwnership(r, _3401_recOwned, expectedOwnership, out _out570, out _out571);
              r = _out570;
              resultingOwnership = _out571;
              readIdents = _3402_recIdents;
            }
          } else if (_source129.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3404___mcc_h312 = _source129.dtor_Passthrough_a0;
            {
              RAST._IExpr _3405_recursiveGen;
              DCOMP._IOwnership _3406_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3407_recIdents;
              RAST._IExpr _out572;
              DCOMP._IOwnership _out573;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out572, out _out573, out _out574);
              _3405_recursiveGen = _out572;
              _3406_recOwned = _out573;
              _3407_recIdents = _out574;
              Dafny.ISequence<Dafny.Rune> _3408_s;
              _3408_s = (_3405_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3406_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3408_s = Dafny.Sequence<Dafny.Rune>.Concat(_3408_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3408_s = Dafny.Sequence<Dafny.Rune>.Concat(_3408_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3408_s);
              RAST._IExpr _out575;
              DCOMP._IOwnership _out576;
              DCOMP.COMP.FromOwnership(r, _3406_recOwned, expectedOwnership, out _out575, out _out576);
              r = _out575;
              resultingOwnership = _out576;
              readIdents = _3407_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3409___mcc_h315 = _source129.dtor_TypeArg_a0;
            {
              RAST._IExpr _3410_recursiveGen;
              DCOMP._IOwnership _3411_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3412_recIdents;
              RAST._IExpr _out577;
              DCOMP._IOwnership _out578;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out579;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out577, out _out578, out _out579);
              _3410_recursiveGen = _out577;
              _3411_recOwned = _out578;
              _3412_recIdents = _out579;
              Dafny.ISequence<Dafny.Rune> _3413_s;
              _3413_s = (_3410_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3411_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3413_s = Dafny.Sequence<Dafny.Rune>.Concat(_3413_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _3413_s = Dafny.Sequence<Dafny.Rune>.Concat(_3413_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_3413_s);
              RAST._IExpr _out580;
              DCOMP._IOwnership _out581;
              DCOMP.COMP.FromOwnership(r, _3411_recOwned, expectedOwnership, out _out580, out _out581);
              r = _out580;
              resultingOwnership = _out581;
              readIdents = _3412_recIdents;
            }
          }
        } else if (_source118.is_Tuple) {
          Dafny.ISequence<DAST._IType> _3414___mcc_h318 = _source118.dtor_Tuple_a0;
          DAST._IType _source131 = _3003___mcc_h1;
          if (_source131.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3415___mcc_h322 = _source131.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3416___mcc_h323 = _source131.dtor_typeArgs;
            DAST._IResolvedType _3417___mcc_h324 = _source131.dtor_resolved;
            DAST._IResolvedType _source132 = _3417___mcc_h324;
            if (_source132.is_Datatype) {
              DAST._IDatatypeType _3418___mcc_h328 = _source132.dtor_datatypeType;
              {
                RAST._IExpr _3419_recursiveGen;
                DCOMP._IOwnership _3420_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3421_recIdents;
                RAST._IExpr _out582;
                DCOMP._IOwnership _out583;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out584;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out582, out _out583, out _out584);
                _3419_recursiveGen = _out582;
                _3420_recOwned = _out583;
                _3421_recIdents = _out584;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3419_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out585;
                DCOMP._IOwnership _out586;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out585, out _out586);
                r = _out585;
                resultingOwnership = _out586;
                readIdents = _3421_recIdents;
              }
            } else if (_source132.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3422___mcc_h330 = _source132.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3423___mcc_h331 = _source132.dtor_attributes;
              {
                RAST._IExpr _3424_recursiveGen;
                DCOMP._IOwnership _3425_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3426_recIdents;
                RAST._IExpr _out587;
                DCOMP._IOwnership _out588;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out589;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out587, out _out588, out _out589);
                _3424_recursiveGen = _out587;
                _3425_recOwned = _out588;
                _3426_recIdents = _out589;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3424_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out590;
                DCOMP._IOwnership _out591;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out590, out _out591);
                r = _out590;
                resultingOwnership = _out591;
                readIdents = _3426_recIdents;
              }
            } else {
              DAST._IType _3427___mcc_h334 = _source132.dtor_baseType;
              DAST._INewtypeRange _3428___mcc_h335 = _source132.dtor_range;
              bool _3429___mcc_h336 = _source132.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3430___mcc_h337 = _source132.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3431_attributes = _3430___mcc_h337;
              bool _3432_erase = _3429___mcc_h336;
              DAST._INewtypeRange _3433_range = _3428___mcc_h335;
              DAST._IType _3434_b = _3427___mcc_h334;
              {
                if (object.Equals(_2997_fromTpe, _3434_b)) {
                  RAST._IExpr _3435_recursiveGen;
                  DCOMP._IOwnership _3436_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3437_recIdents;
                  RAST._IExpr _out592;
                  DCOMP._IOwnership _out593;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out594;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out592, out _out593, out _out594);
                  _3435_recursiveGen = _out592;
                  _3436_recOwned = _out593;
                  _3437_recIdents = _out594;
                  Std.Wrappers._IOption<RAST._IType> _3438_potentialRhsType;
                  _3438_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3434_b, _3433_range);
                  Std.Wrappers._IOption<RAST._IType> _source133 = _3438_potentialRhsType;
                  if (_source133.is_None) {
                    if (_3432_erase) {
                      r = _3435_recursiveGen;
                    } else {
                      RAST._IType _3439_rhsType;
                      RAST._IType _out595;
                      _out595 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _3439_rhsType = _out595;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3439_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3435_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out596;
                    DCOMP._IOwnership _out597;
                    DCOMP.COMP.FromOwnership(r, _3436_recOwned, expectedOwnership, out _out596, out _out597);
                    r = _out596;
                    resultingOwnership = _out597;
                  } else {
                    RAST._IType _3440___mcc_h1249 = _source133.dtor_value;
                    RAST._IType _3441_v = _3440___mcc_h1249;
                    r = RAST.Expr.create_ConversionNum(_3441_v, _3435_recursiveGen);
                    RAST._IExpr _out598;
                    DCOMP._IOwnership _out599;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out598, out _out599);
                    r = _out598;
                    resultingOwnership = _out599;
                  }
                  readIdents = _3437_recIdents;
                } else {
                  RAST._IExpr _out600;
                  DCOMP._IOwnership _out601;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out602;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3434_b), _3434_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out600, out _out601, out _out602);
                  r = _out600;
                  resultingOwnership = _out601;
                  readIdents = _out602;
                }
              }
            }
          } else if (_source131.is_Nullable) {
            DAST._IType _3442___mcc_h342 = _source131.dtor_Nullable_a0;
            {
              RAST._IExpr _3443_recursiveGen;
              DCOMP._IOwnership _3444_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3445_recIdents;
              RAST._IExpr _out603;
              DCOMP._IOwnership _out604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out605;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out603, out _out604, out _out605);
              _3443_recursiveGen = _out603;
              _3444_recOwned = _out604;
              _3445_recIdents = _out605;
              Dafny.ISequence<Dafny.Rune> _3446_s;
              _3446_s = (_3443_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3444_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3446_s = Dafny.Sequence<Dafny.Rune>.Concat(_3446_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3446_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3446_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3446_s);
              RAST._IExpr _out606;
              DCOMP._IOwnership _out607;
              DCOMP.COMP.FromOwnership(r, _3444_recOwned, expectedOwnership, out _out606, out _out607);
              r = _out606;
              resultingOwnership = _out607;
              readIdents = _3445_recIdents;
            }
          } else if (_source131.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3447___mcc_h344 = _source131.dtor_Tuple_a0;
            {
              RAST._IExpr _3448_recursiveGen;
              DCOMP._IOwnership _3449_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3450_recIdents;
              RAST._IExpr _out608;
              DCOMP._IOwnership _out609;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out610;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out608, out _out609, out _out610);
              _3448_recursiveGen = _out608;
              _3449_recOwned = _out609;
              _3450_recIdents = _out610;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3448_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out611;
              DCOMP._IOwnership _out612;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out611, out _out612);
              r = _out611;
              resultingOwnership = _out612;
              readIdents = _3450_recIdents;
            }
          } else if (_source131.is_Array) {
            DAST._IType _3451___mcc_h346 = _source131.dtor_element;
            BigInteger _3452___mcc_h347 = _source131.dtor_dims;
            {
              RAST._IExpr _3453_recursiveGen;
              DCOMP._IOwnership _3454_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3455_recIdents;
              RAST._IExpr _out613;
              DCOMP._IOwnership _out614;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out613, out _out614, out _out615);
              _3453_recursiveGen = _out613;
              _3454_recOwned = _out614;
              _3455_recIdents = _out615;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3453_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out616;
              DCOMP._IOwnership _out617;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out616, out _out617);
              r = _out616;
              resultingOwnership = _out617;
              readIdents = _3455_recIdents;
            }
          } else if (_source131.is_Seq) {
            DAST._IType _3456___mcc_h350 = _source131.dtor_element;
            {
              RAST._IExpr _3457_recursiveGen;
              DCOMP._IOwnership _3458_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3459_recIdents;
              RAST._IExpr _out618;
              DCOMP._IOwnership _out619;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out620;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out618, out _out619, out _out620);
              _3457_recursiveGen = _out618;
              _3458_recOwned = _out619;
              _3459_recIdents = _out620;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3457_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out621;
              DCOMP._IOwnership _out622;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out621, out _out622);
              r = _out621;
              resultingOwnership = _out622;
              readIdents = _3459_recIdents;
            }
          } else if (_source131.is_Set) {
            DAST._IType _3460___mcc_h352 = _source131.dtor_element;
            {
              RAST._IExpr _3461_recursiveGen;
              DCOMP._IOwnership _3462_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3463_recIdents;
              RAST._IExpr _out623;
              DCOMP._IOwnership _out624;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out625;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out623, out _out624, out _out625);
              _3461_recursiveGen = _out623;
              _3462_recOwned = _out624;
              _3463_recIdents = _out625;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3461_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out626;
              DCOMP._IOwnership _out627;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out626, out _out627);
              r = _out626;
              resultingOwnership = _out627;
              readIdents = _3463_recIdents;
            }
          } else if (_source131.is_Multiset) {
            DAST._IType _3464___mcc_h354 = _source131.dtor_element;
            {
              RAST._IExpr _3465_recursiveGen;
              DCOMP._IOwnership _3466_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3467_recIdents;
              RAST._IExpr _out628;
              DCOMP._IOwnership _out629;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out630;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out628, out _out629, out _out630);
              _3465_recursiveGen = _out628;
              _3466_recOwned = _out629;
              _3467_recIdents = _out630;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3465_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out631;
              DCOMP._IOwnership _out632;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out631, out _out632);
              r = _out631;
              resultingOwnership = _out632;
              readIdents = _3467_recIdents;
            }
          } else if (_source131.is_Map) {
            DAST._IType _3468___mcc_h356 = _source131.dtor_key;
            DAST._IType _3469___mcc_h357 = _source131.dtor_value;
            {
              RAST._IExpr _3470_recursiveGen;
              DCOMP._IOwnership _3471_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3472_recIdents;
              RAST._IExpr _out633;
              DCOMP._IOwnership _out634;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out633, out _out634, out _out635);
              _3470_recursiveGen = _out633;
              _3471_recOwned = _out634;
              _3472_recIdents = _out635;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3470_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out636;
              DCOMP._IOwnership _out637;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out636, out _out637);
              r = _out636;
              resultingOwnership = _out637;
              readIdents = _3472_recIdents;
            }
          } else if (_source131.is_SetBuilder) {
            DAST._IType _3473___mcc_h360 = _source131.dtor_element;
            {
              RAST._IExpr _3474_recursiveGen;
              DCOMP._IOwnership _3475_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3476_recIdents;
              RAST._IExpr _out638;
              DCOMP._IOwnership _out639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out640;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out638, out _out639, out _out640);
              _3474_recursiveGen = _out638;
              _3475_recOwned = _out639;
              _3476_recIdents = _out640;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3474_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out641;
              DCOMP._IOwnership _out642;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out641, out _out642);
              r = _out641;
              resultingOwnership = _out642;
              readIdents = _3476_recIdents;
            }
          } else if (_source131.is_MapBuilder) {
            DAST._IType _3477___mcc_h362 = _source131.dtor_key;
            DAST._IType _3478___mcc_h363 = _source131.dtor_value;
            {
              RAST._IExpr _3479_recursiveGen;
              DCOMP._IOwnership _3480_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3481_recIdents;
              RAST._IExpr _out643;
              DCOMP._IOwnership _out644;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out645;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out643, out _out644, out _out645);
              _3479_recursiveGen = _out643;
              _3480_recOwned = _out644;
              _3481_recIdents = _out645;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3479_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out646;
              DCOMP._IOwnership _out647;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out646, out _out647);
              r = _out646;
              resultingOwnership = _out647;
              readIdents = _3481_recIdents;
            }
          } else if (_source131.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3482___mcc_h366 = _source131.dtor_args;
            DAST._IType _3483___mcc_h367 = _source131.dtor_result;
            {
              RAST._IExpr _3484_recursiveGen;
              DCOMP._IOwnership _3485_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3486_recIdents;
              RAST._IExpr _out648;
              DCOMP._IOwnership _out649;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out650;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out648, out _out649, out _out650);
              _3484_recursiveGen = _out648;
              _3485_recOwned = _out649;
              _3486_recIdents = _out650;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3484_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out651;
              DCOMP._IOwnership _out652;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out651, out _out652);
              r = _out651;
              resultingOwnership = _out652;
              readIdents = _3486_recIdents;
            }
          } else if (_source131.is_Primitive) {
            DAST._IPrimitive _3487___mcc_h370 = _source131.dtor_Primitive_a0;
            {
              RAST._IExpr _3488_recursiveGen;
              DCOMP._IOwnership _3489_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3490_recIdents;
              RAST._IExpr _out653;
              DCOMP._IOwnership _out654;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out655;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out653, out _out654, out _out655);
              _3488_recursiveGen = _out653;
              _3489_recOwned = _out654;
              _3490_recIdents = _out655;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3488_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out656;
              DCOMP._IOwnership _out657;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out656, out _out657);
              r = _out656;
              resultingOwnership = _out657;
              readIdents = _3490_recIdents;
            }
          } else if (_source131.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3491___mcc_h372 = _source131.dtor_Passthrough_a0;
            {
              RAST._IExpr _3492_recursiveGen;
              DCOMP._IOwnership _3493_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3494_recIdents;
              RAST._IExpr _out658;
              DCOMP._IOwnership _out659;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out658, out _out659, out _out660);
              _3492_recursiveGen = _out658;
              _3493_recOwned = _out659;
              _3494_recIdents = _out660;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3492_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out661;
              DCOMP._IOwnership _out662;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out661, out _out662);
              r = _out661;
              resultingOwnership = _out662;
              readIdents = _3494_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3495___mcc_h374 = _source131.dtor_TypeArg_a0;
            {
              RAST._IExpr _3496_recursiveGen;
              DCOMP._IOwnership _3497_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3498_recIdents;
              RAST._IExpr _out663;
              DCOMP._IOwnership _out664;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out665;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out663, out _out664, out _out665);
              _3496_recursiveGen = _out663;
              _3497_recOwned = _out664;
              _3498_recIdents = _out665;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3496_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out666;
              DCOMP._IOwnership _out667;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out666, out _out667);
              r = _out666;
              resultingOwnership = _out667;
              readIdents = _3498_recIdents;
            }
          }
        } else if (_source118.is_Array) {
          DAST._IType _3499___mcc_h376 = _source118.dtor_element;
          BigInteger _3500___mcc_h377 = _source118.dtor_dims;
          DAST._IType _source134 = _3003___mcc_h1;
          if (_source134.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3501___mcc_h384 = _source134.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3502___mcc_h385 = _source134.dtor_typeArgs;
            DAST._IResolvedType _3503___mcc_h386 = _source134.dtor_resolved;
            DAST._IResolvedType _source135 = _3503___mcc_h386;
            if (_source135.is_Datatype) {
              DAST._IDatatypeType _3504___mcc_h390 = _source135.dtor_datatypeType;
              {
                RAST._IExpr _3505_recursiveGen;
                DCOMP._IOwnership _3506_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3507_recIdents;
                RAST._IExpr _out668;
                DCOMP._IOwnership _out669;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out670;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out668, out _out669, out _out670);
                _3505_recursiveGen = _out668;
                _3506_recOwned = _out669;
                _3507_recIdents = _out670;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3505_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out671;
                DCOMP._IOwnership _out672;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out671, out _out672);
                r = _out671;
                resultingOwnership = _out672;
                readIdents = _3507_recIdents;
              }
            } else if (_source135.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3508___mcc_h392 = _source135.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3509___mcc_h393 = _source135.dtor_attributes;
              {
                RAST._IExpr _3510_recursiveGen;
                DCOMP._IOwnership _3511_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3512_recIdents;
                RAST._IExpr _out673;
                DCOMP._IOwnership _out674;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out675;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out673, out _out674, out _out675);
                _3510_recursiveGen = _out673;
                _3511_recOwned = _out674;
                _3512_recIdents = _out675;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3510_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out676;
                DCOMP._IOwnership _out677;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out676, out _out677);
                r = _out676;
                resultingOwnership = _out677;
                readIdents = _3512_recIdents;
              }
            } else {
              DAST._IType _3513___mcc_h396 = _source135.dtor_baseType;
              DAST._INewtypeRange _3514___mcc_h397 = _source135.dtor_range;
              bool _3515___mcc_h398 = _source135.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3516___mcc_h399 = _source135.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3517_attributes = _3516___mcc_h399;
              bool _3518_erase = _3515___mcc_h398;
              DAST._INewtypeRange _3519_range = _3514___mcc_h397;
              DAST._IType _3520_b = _3513___mcc_h396;
              {
                if (object.Equals(_2997_fromTpe, _3520_b)) {
                  RAST._IExpr _3521_recursiveGen;
                  DCOMP._IOwnership _3522_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3523_recIdents;
                  RAST._IExpr _out678;
                  DCOMP._IOwnership _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out678, out _out679, out _out680);
                  _3521_recursiveGen = _out678;
                  _3522_recOwned = _out679;
                  _3523_recIdents = _out680;
                  Std.Wrappers._IOption<RAST._IType> _3524_potentialRhsType;
                  _3524_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3520_b, _3519_range);
                  Std.Wrappers._IOption<RAST._IType> _source136 = _3524_potentialRhsType;
                  if (_source136.is_None) {
                    if (_3518_erase) {
                      r = _3521_recursiveGen;
                    } else {
                      RAST._IType _3525_rhsType;
                      RAST._IType _out681;
                      _out681 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _3525_rhsType = _out681;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3525_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3521_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out682;
                    DCOMP._IOwnership _out683;
                    DCOMP.COMP.FromOwnership(r, _3522_recOwned, expectedOwnership, out _out682, out _out683);
                    r = _out682;
                    resultingOwnership = _out683;
                  } else {
                    RAST._IType _3526___mcc_h1250 = _source136.dtor_value;
                    RAST._IType _3527_v = _3526___mcc_h1250;
                    r = RAST.Expr.create_ConversionNum(_3527_v, _3521_recursiveGen);
                    RAST._IExpr _out684;
                    DCOMP._IOwnership _out685;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out684, out _out685);
                    r = _out684;
                    resultingOwnership = _out685;
                  }
                  readIdents = _3523_recIdents;
                } else {
                  RAST._IExpr _out686;
                  DCOMP._IOwnership _out687;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3520_b), _3520_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out686, out _out687, out _out688);
                  r = _out686;
                  resultingOwnership = _out687;
                  readIdents = _out688;
                }
              }
            }
          } else if (_source134.is_Nullable) {
            DAST._IType _3528___mcc_h404 = _source134.dtor_Nullable_a0;
            {
              RAST._IExpr _3529_recursiveGen;
              DCOMP._IOwnership _3530_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3531_recIdents;
              RAST._IExpr _out689;
              DCOMP._IOwnership _out690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out691;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out689, out _out690, out _out691);
              _3529_recursiveGen = _out689;
              _3530_recOwned = _out690;
              _3531_recIdents = _out691;
              Dafny.ISequence<Dafny.Rune> _3532_s;
              _3532_s = (_3529_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3530_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3532_s = Dafny.Sequence<Dafny.Rune>.Concat(_3532_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3532_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3532_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3532_s);
              RAST._IExpr _out692;
              DCOMP._IOwnership _out693;
              DCOMP.COMP.FromOwnership(r, _3530_recOwned, expectedOwnership, out _out692, out _out693);
              r = _out692;
              resultingOwnership = _out693;
              readIdents = _3531_recIdents;
            }
          } else if (_source134.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3533___mcc_h406 = _source134.dtor_Tuple_a0;
            {
              RAST._IExpr _3534_recursiveGen;
              DCOMP._IOwnership _3535_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3536_recIdents;
              RAST._IExpr _out694;
              DCOMP._IOwnership _out695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out694, out _out695, out _out696);
              _3534_recursiveGen = _out694;
              _3535_recOwned = _out695;
              _3536_recIdents = _out696;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3534_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out697;
              DCOMP._IOwnership _out698;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out697, out _out698);
              r = _out697;
              resultingOwnership = _out698;
              readIdents = _3536_recIdents;
            }
          } else if (_source134.is_Array) {
            DAST._IType _3537___mcc_h408 = _source134.dtor_element;
            BigInteger _3538___mcc_h409 = _source134.dtor_dims;
            {
              RAST._IExpr _3539_recursiveGen;
              DCOMP._IOwnership _3540_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3541_recIdents;
              RAST._IExpr _out699;
              DCOMP._IOwnership _out700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out701;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out699, out _out700, out _out701);
              _3539_recursiveGen = _out699;
              _3540_recOwned = _out700;
              _3541_recIdents = _out701;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3539_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out702;
              DCOMP._IOwnership _out703;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out702, out _out703);
              r = _out702;
              resultingOwnership = _out703;
              readIdents = _3541_recIdents;
            }
          } else if (_source134.is_Seq) {
            DAST._IType _3542___mcc_h412 = _source134.dtor_element;
            {
              RAST._IExpr _3543_recursiveGen;
              DCOMP._IOwnership _3544_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3545_recIdents;
              RAST._IExpr _out704;
              DCOMP._IOwnership _out705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out706;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out704, out _out705, out _out706);
              _3543_recursiveGen = _out704;
              _3544_recOwned = _out705;
              _3545_recIdents = _out706;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3543_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out707;
              DCOMP._IOwnership _out708;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out707, out _out708);
              r = _out707;
              resultingOwnership = _out708;
              readIdents = _3545_recIdents;
            }
          } else if (_source134.is_Set) {
            DAST._IType _3546___mcc_h414 = _source134.dtor_element;
            {
              RAST._IExpr _3547_recursiveGen;
              DCOMP._IOwnership _3548_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3549_recIdents;
              RAST._IExpr _out709;
              DCOMP._IOwnership _out710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out711;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out709, out _out710, out _out711);
              _3547_recursiveGen = _out709;
              _3548_recOwned = _out710;
              _3549_recIdents = _out711;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3547_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out712;
              DCOMP._IOwnership _out713;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out712, out _out713);
              r = _out712;
              resultingOwnership = _out713;
              readIdents = _3549_recIdents;
            }
          } else if (_source134.is_Multiset) {
            DAST._IType _3550___mcc_h416 = _source134.dtor_element;
            {
              RAST._IExpr _3551_recursiveGen;
              DCOMP._IOwnership _3552_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3553_recIdents;
              RAST._IExpr _out714;
              DCOMP._IOwnership _out715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out716;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out714, out _out715, out _out716);
              _3551_recursiveGen = _out714;
              _3552_recOwned = _out715;
              _3553_recIdents = _out716;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3551_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out717;
              DCOMP._IOwnership _out718;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out717, out _out718);
              r = _out717;
              resultingOwnership = _out718;
              readIdents = _3553_recIdents;
            }
          } else if (_source134.is_Map) {
            DAST._IType _3554___mcc_h418 = _source134.dtor_key;
            DAST._IType _3555___mcc_h419 = _source134.dtor_value;
            {
              RAST._IExpr _3556_recursiveGen;
              DCOMP._IOwnership _3557_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3558_recIdents;
              RAST._IExpr _out719;
              DCOMP._IOwnership _out720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out719, out _out720, out _out721);
              _3556_recursiveGen = _out719;
              _3557_recOwned = _out720;
              _3558_recIdents = _out721;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3556_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out722;
              DCOMP._IOwnership _out723;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out722, out _out723);
              r = _out722;
              resultingOwnership = _out723;
              readIdents = _3558_recIdents;
            }
          } else if (_source134.is_SetBuilder) {
            DAST._IType _3559___mcc_h422 = _source134.dtor_element;
            {
              RAST._IExpr _3560_recursiveGen;
              DCOMP._IOwnership _3561_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3562_recIdents;
              RAST._IExpr _out724;
              DCOMP._IOwnership _out725;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out726;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out724, out _out725, out _out726);
              _3560_recursiveGen = _out724;
              _3561_recOwned = _out725;
              _3562_recIdents = _out726;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3560_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out727;
              DCOMP._IOwnership _out728;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out727, out _out728);
              r = _out727;
              resultingOwnership = _out728;
              readIdents = _3562_recIdents;
            }
          } else if (_source134.is_MapBuilder) {
            DAST._IType _3563___mcc_h424 = _source134.dtor_key;
            DAST._IType _3564___mcc_h425 = _source134.dtor_value;
            {
              RAST._IExpr _3565_recursiveGen;
              DCOMP._IOwnership _3566_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3567_recIdents;
              RAST._IExpr _out729;
              DCOMP._IOwnership _out730;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out731;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out729, out _out730, out _out731);
              _3565_recursiveGen = _out729;
              _3566_recOwned = _out730;
              _3567_recIdents = _out731;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3565_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out732;
              DCOMP._IOwnership _out733;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out732, out _out733);
              r = _out732;
              resultingOwnership = _out733;
              readIdents = _3567_recIdents;
            }
          } else if (_source134.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3568___mcc_h428 = _source134.dtor_args;
            DAST._IType _3569___mcc_h429 = _source134.dtor_result;
            {
              RAST._IExpr _3570_recursiveGen;
              DCOMP._IOwnership _3571_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3572_recIdents;
              RAST._IExpr _out734;
              DCOMP._IOwnership _out735;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out736;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out734, out _out735, out _out736);
              _3570_recursiveGen = _out734;
              _3571_recOwned = _out735;
              _3572_recIdents = _out736;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3570_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out737;
              DCOMP._IOwnership _out738;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out737, out _out738);
              r = _out737;
              resultingOwnership = _out738;
              readIdents = _3572_recIdents;
            }
          } else if (_source134.is_Primitive) {
            DAST._IPrimitive _3573___mcc_h432 = _source134.dtor_Primitive_a0;
            {
              RAST._IExpr _3574_recursiveGen;
              DCOMP._IOwnership _3575_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3576_recIdents;
              RAST._IExpr _out739;
              DCOMP._IOwnership _out740;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out739, out _out740, out _out741);
              _3574_recursiveGen = _out739;
              _3575_recOwned = _out740;
              _3576_recIdents = _out741;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3574_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out742;
              DCOMP._IOwnership _out743;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out742, out _out743);
              r = _out742;
              resultingOwnership = _out743;
              readIdents = _3576_recIdents;
            }
          } else if (_source134.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3577___mcc_h434 = _source134.dtor_Passthrough_a0;
            {
              RAST._IExpr _3578_recursiveGen;
              DCOMP._IOwnership _3579_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3580_recIdents;
              RAST._IExpr _out744;
              DCOMP._IOwnership _out745;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out746;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out744, out _out745, out _out746);
              _3578_recursiveGen = _out744;
              _3579_recOwned = _out745;
              _3580_recIdents = _out746;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3578_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out747;
              DCOMP._IOwnership _out748;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out747, out _out748);
              r = _out747;
              resultingOwnership = _out748;
              readIdents = _3580_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3581___mcc_h436 = _source134.dtor_TypeArg_a0;
            {
              RAST._IExpr _3582_recursiveGen;
              DCOMP._IOwnership _3583_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3584_recIdents;
              RAST._IExpr _out749;
              DCOMP._IOwnership _out750;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out751;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out749, out _out750, out _out751);
              _3582_recursiveGen = _out749;
              _3583_recOwned = _out750;
              _3584_recIdents = _out751;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3582_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out752;
              DCOMP._IOwnership _out753;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out752, out _out753);
              r = _out752;
              resultingOwnership = _out753;
              readIdents = _3584_recIdents;
            }
          }
        } else if (_source118.is_Seq) {
          DAST._IType _3585___mcc_h438 = _source118.dtor_element;
          DAST._IType _source137 = _3003___mcc_h1;
          if (_source137.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3586___mcc_h442 = _source137.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3587___mcc_h443 = _source137.dtor_typeArgs;
            DAST._IResolvedType _3588___mcc_h444 = _source137.dtor_resolved;
            DAST._IResolvedType _source138 = _3588___mcc_h444;
            if (_source138.is_Datatype) {
              DAST._IDatatypeType _3589___mcc_h448 = _source138.dtor_datatypeType;
              {
                RAST._IExpr _3590_recursiveGen;
                DCOMP._IOwnership _3591_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3592_recIdents;
                RAST._IExpr _out754;
                DCOMP._IOwnership _out755;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out756;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out754, out _out755, out _out756);
                _3590_recursiveGen = _out754;
                _3591_recOwned = _out755;
                _3592_recIdents = _out756;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3590_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out757;
                DCOMP._IOwnership _out758;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out757, out _out758);
                r = _out757;
                resultingOwnership = _out758;
                readIdents = _3592_recIdents;
              }
            } else if (_source138.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3593___mcc_h450 = _source138.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3594___mcc_h451 = _source138.dtor_attributes;
              {
                RAST._IExpr _3595_recursiveGen;
                DCOMP._IOwnership _3596_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3597_recIdents;
                RAST._IExpr _out759;
                DCOMP._IOwnership _out760;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out759, out _out760, out _out761);
                _3595_recursiveGen = _out759;
                _3596_recOwned = _out760;
                _3597_recIdents = _out761;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3595_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out762;
                DCOMP._IOwnership _out763;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out762, out _out763);
                r = _out762;
                resultingOwnership = _out763;
                readIdents = _3597_recIdents;
              }
            } else {
              DAST._IType _3598___mcc_h454 = _source138.dtor_baseType;
              DAST._INewtypeRange _3599___mcc_h455 = _source138.dtor_range;
              bool _3600___mcc_h456 = _source138.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3601___mcc_h457 = _source138.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3602_attributes = _3601___mcc_h457;
              bool _3603_erase = _3600___mcc_h456;
              DAST._INewtypeRange _3604_range = _3599___mcc_h455;
              DAST._IType _3605_b = _3598___mcc_h454;
              {
                if (object.Equals(_2997_fromTpe, _3605_b)) {
                  RAST._IExpr _3606_recursiveGen;
                  DCOMP._IOwnership _3607_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3608_recIdents;
                  RAST._IExpr _out764;
                  DCOMP._IOwnership _out765;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out764, out _out765, out _out766);
                  _3606_recursiveGen = _out764;
                  _3607_recOwned = _out765;
                  _3608_recIdents = _out766;
                  Std.Wrappers._IOption<RAST._IType> _3609_potentialRhsType;
                  _3609_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3605_b, _3604_range);
                  Std.Wrappers._IOption<RAST._IType> _source139 = _3609_potentialRhsType;
                  if (_source139.is_None) {
                    if (_3603_erase) {
                      r = _3606_recursiveGen;
                    } else {
                      RAST._IType _3610_rhsType;
                      RAST._IType _out767;
                      _out767 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _3610_rhsType = _out767;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3610_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3606_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out768;
                    DCOMP._IOwnership _out769;
                    DCOMP.COMP.FromOwnership(r, _3607_recOwned, expectedOwnership, out _out768, out _out769);
                    r = _out768;
                    resultingOwnership = _out769;
                  } else {
                    RAST._IType _3611___mcc_h1251 = _source139.dtor_value;
                    RAST._IType _3612_v = _3611___mcc_h1251;
                    r = RAST.Expr.create_ConversionNum(_3612_v, _3606_recursiveGen);
                    RAST._IExpr _out770;
                    DCOMP._IOwnership _out771;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out770, out _out771);
                    r = _out770;
                    resultingOwnership = _out771;
                  }
                  readIdents = _3608_recIdents;
                } else {
                  RAST._IExpr _out772;
                  DCOMP._IOwnership _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3605_b), _3605_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out772, out _out773, out _out774);
                  r = _out772;
                  resultingOwnership = _out773;
                  readIdents = _out774;
                }
              }
            }
          } else if (_source137.is_Nullable) {
            DAST._IType _3613___mcc_h462 = _source137.dtor_Nullable_a0;
            {
              RAST._IExpr _3614_recursiveGen;
              DCOMP._IOwnership _3615_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3616_recIdents;
              RAST._IExpr _out775;
              DCOMP._IOwnership _out776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out777;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out775, out _out776, out _out777);
              _3614_recursiveGen = _out775;
              _3615_recOwned = _out776;
              _3616_recIdents = _out777;
              Dafny.ISequence<Dafny.Rune> _3617_s;
              _3617_s = (_3614_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3615_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3617_s = Dafny.Sequence<Dafny.Rune>.Concat(_3617_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3617_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3617_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3617_s);
              RAST._IExpr _out778;
              DCOMP._IOwnership _out779;
              DCOMP.COMP.FromOwnership(r, _3615_recOwned, expectedOwnership, out _out778, out _out779);
              r = _out778;
              resultingOwnership = _out779;
              readIdents = _3616_recIdents;
            }
          } else if (_source137.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3618___mcc_h464 = _source137.dtor_Tuple_a0;
            {
              RAST._IExpr _3619_recursiveGen;
              DCOMP._IOwnership _3620_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3621_recIdents;
              RAST._IExpr _out780;
              DCOMP._IOwnership _out781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out780, out _out781, out _out782);
              _3619_recursiveGen = _out780;
              _3620_recOwned = _out781;
              _3621_recIdents = _out782;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3619_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out783;
              DCOMP._IOwnership _out784;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out783, out _out784);
              r = _out783;
              resultingOwnership = _out784;
              readIdents = _3621_recIdents;
            }
          } else if (_source137.is_Array) {
            DAST._IType _3622___mcc_h466 = _source137.dtor_element;
            BigInteger _3623___mcc_h467 = _source137.dtor_dims;
            {
              RAST._IExpr _3624_recursiveGen;
              DCOMP._IOwnership _3625_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3626_recIdents;
              RAST._IExpr _out785;
              DCOMP._IOwnership _out786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out787;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out785, out _out786, out _out787);
              _3624_recursiveGen = _out785;
              _3625_recOwned = _out786;
              _3626_recIdents = _out787;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3624_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out788;
              DCOMP._IOwnership _out789;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out788, out _out789);
              r = _out788;
              resultingOwnership = _out789;
              readIdents = _3626_recIdents;
            }
          } else if (_source137.is_Seq) {
            DAST._IType _3627___mcc_h470 = _source137.dtor_element;
            {
              RAST._IExpr _3628_recursiveGen;
              DCOMP._IOwnership _3629_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3630_recIdents;
              RAST._IExpr _out790;
              DCOMP._IOwnership _out791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out792;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out790, out _out791, out _out792);
              _3628_recursiveGen = _out790;
              _3629_recOwned = _out791;
              _3630_recIdents = _out792;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3628_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out793;
              DCOMP._IOwnership _out794;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out793, out _out794);
              r = _out793;
              resultingOwnership = _out794;
              readIdents = _3630_recIdents;
            }
          } else if (_source137.is_Set) {
            DAST._IType _3631___mcc_h472 = _source137.dtor_element;
            {
              RAST._IExpr _3632_recursiveGen;
              DCOMP._IOwnership _3633_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3634_recIdents;
              RAST._IExpr _out795;
              DCOMP._IOwnership _out796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out797;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out795, out _out796, out _out797);
              _3632_recursiveGen = _out795;
              _3633_recOwned = _out796;
              _3634_recIdents = _out797;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3632_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out798;
              DCOMP._IOwnership _out799;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out798, out _out799);
              r = _out798;
              resultingOwnership = _out799;
              readIdents = _3634_recIdents;
            }
          } else if (_source137.is_Multiset) {
            DAST._IType _3635___mcc_h474 = _source137.dtor_element;
            {
              RAST._IExpr _3636_recursiveGen;
              DCOMP._IOwnership _3637_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3638_recIdents;
              RAST._IExpr _out800;
              DCOMP._IOwnership _out801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out800, out _out801, out _out802);
              _3636_recursiveGen = _out800;
              _3637_recOwned = _out801;
              _3638_recIdents = _out802;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3636_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out803;
              DCOMP._IOwnership _out804;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out803, out _out804);
              r = _out803;
              resultingOwnership = _out804;
              readIdents = _3638_recIdents;
            }
          } else if (_source137.is_Map) {
            DAST._IType _3639___mcc_h476 = _source137.dtor_key;
            DAST._IType _3640___mcc_h477 = _source137.dtor_value;
            {
              RAST._IExpr _3641_recursiveGen;
              DCOMP._IOwnership _3642_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3643_recIdents;
              RAST._IExpr _out805;
              DCOMP._IOwnership _out806;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out807;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out805, out _out806, out _out807);
              _3641_recursiveGen = _out805;
              _3642_recOwned = _out806;
              _3643_recIdents = _out807;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3641_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out808;
              DCOMP._IOwnership _out809;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out808, out _out809);
              r = _out808;
              resultingOwnership = _out809;
              readIdents = _3643_recIdents;
            }
          } else if (_source137.is_SetBuilder) {
            DAST._IType _3644___mcc_h480 = _source137.dtor_element;
            {
              RAST._IExpr _3645_recursiveGen;
              DCOMP._IOwnership _3646_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3647_recIdents;
              RAST._IExpr _out810;
              DCOMP._IOwnership _out811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out812;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out810, out _out811, out _out812);
              _3645_recursiveGen = _out810;
              _3646_recOwned = _out811;
              _3647_recIdents = _out812;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3645_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out813;
              DCOMP._IOwnership _out814;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out813, out _out814);
              r = _out813;
              resultingOwnership = _out814;
              readIdents = _3647_recIdents;
            }
          } else if (_source137.is_MapBuilder) {
            DAST._IType _3648___mcc_h482 = _source137.dtor_key;
            DAST._IType _3649___mcc_h483 = _source137.dtor_value;
            {
              RAST._IExpr _3650_recursiveGen;
              DCOMP._IOwnership _3651_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3652_recIdents;
              RAST._IExpr _out815;
              DCOMP._IOwnership _out816;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out817;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out815, out _out816, out _out817);
              _3650_recursiveGen = _out815;
              _3651_recOwned = _out816;
              _3652_recIdents = _out817;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3650_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out818;
              DCOMP._IOwnership _out819;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out818, out _out819);
              r = _out818;
              resultingOwnership = _out819;
              readIdents = _3652_recIdents;
            }
          } else if (_source137.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3653___mcc_h486 = _source137.dtor_args;
            DAST._IType _3654___mcc_h487 = _source137.dtor_result;
            {
              RAST._IExpr _3655_recursiveGen;
              DCOMP._IOwnership _3656_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3657_recIdents;
              RAST._IExpr _out820;
              DCOMP._IOwnership _out821;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out820, out _out821, out _out822);
              _3655_recursiveGen = _out820;
              _3656_recOwned = _out821;
              _3657_recIdents = _out822;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3655_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out823;
              DCOMP._IOwnership _out824;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out823, out _out824);
              r = _out823;
              resultingOwnership = _out824;
              readIdents = _3657_recIdents;
            }
          } else if (_source137.is_Primitive) {
            DAST._IPrimitive _3658___mcc_h490 = _source137.dtor_Primitive_a0;
            {
              RAST._IExpr _3659_recursiveGen;
              DCOMP._IOwnership _3660_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3661_recIdents;
              RAST._IExpr _out825;
              DCOMP._IOwnership _out826;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out825, out _out826, out _out827);
              _3659_recursiveGen = _out825;
              _3660_recOwned = _out826;
              _3661_recIdents = _out827;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3659_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out828;
              DCOMP._IOwnership _out829;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out828, out _out829);
              r = _out828;
              resultingOwnership = _out829;
              readIdents = _3661_recIdents;
            }
          } else if (_source137.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3662___mcc_h492 = _source137.dtor_Passthrough_a0;
            {
              RAST._IExpr _3663_recursiveGen;
              DCOMP._IOwnership _3664_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3665_recIdents;
              RAST._IExpr _out830;
              DCOMP._IOwnership _out831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out832;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out830, out _out831, out _out832);
              _3663_recursiveGen = _out830;
              _3664_recOwned = _out831;
              _3665_recIdents = _out832;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3663_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out833;
              DCOMP._IOwnership _out834;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out833, out _out834);
              r = _out833;
              resultingOwnership = _out834;
              readIdents = _3665_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3666___mcc_h494 = _source137.dtor_TypeArg_a0;
            {
              RAST._IExpr _3667_recursiveGen;
              DCOMP._IOwnership _3668_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3669_recIdents;
              RAST._IExpr _out835;
              DCOMP._IOwnership _out836;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out837;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out835, out _out836, out _out837);
              _3667_recursiveGen = _out835;
              _3668_recOwned = _out836;
              _3669_recIdents = _out837;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3667_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out838;
              DCOMP._IOwnership _out839;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out838, out _out839);
              r = _out838;
              resultingOwnership = _out839;
              readIdents = _3669_recIdents;
            }
          }
        } else if (_source118.is_Set) {
          DAST._IType _3670___mcc_h496 = _source118.dtor_element;
          DAST._IType _source140 = _3003___mcc_h1;
          if (_source140.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3671___mcc_h500 = _source140.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3672___mcc_h501 = _source140.dtor_typeArgs;
            DAST._IResolvedType _3673___mcc_h502 = _source140.dtor_resolved;
            DAST._IResolvedType _source141 = _3673___mcc_h502;
            if (_source141.is_Datatype) {
              DAST._IDatatypeType _3674___mcc_h506 = _source141.dtor_datatypeType;
              {
                RAST._IExpr _3675_recursiveGen;
                DCOMP._IOwnership _3676_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3677_recIdents;
                RAST._IExpr _out840;
                DCOMP._IOwnership _out841;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out842;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out840, out _out841, out _out842);
                _3675_recursiveGen = _out840;
                _3676_recOwned = _out841;
                _3677_recIdents = _out842;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3675_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out843;
                DCOMP._IOwnership _out844;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out843, out _out844);
                r = _out843;
                resultingOwnership = _out844;
                readIdents = _3677_recIdents;
              }
            } else if (_source141.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3678___mcc_h508 = _source141.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3679___mcc_h509 = _source141.dtor_attributes;
              {
                RAST._IExpr _3680_recursiveGen;
                DCOMP._IOwnership _3681_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3682_recIdents;
                RAST._IExpr _out845;
                DCOMP._IOwnership _out846;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out845, out _out846, out _out847);
                _3680_recursiveGen = _out845;
                _3681_recOwned = _out846;
                _3682_recIdents = _out847;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3680_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out848;
                DCOMP._IOwnership _out849;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out848, out _out849);
                r = _out848;
                resultingOwnership = _out849;
                readIdents = _3682_recIdents;
              }
            } else {
              DAST._IType _3683___mcc_h512 = _source141.dtor_baseType;
              DAST._INewtypeRange _3684___mcc_h513 = _source141.dtor_range;
              bool _3685___mcc_h514 = _source141.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3686___mcc_h515 = _source141.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3687_attributes = _3686___mcc_h515;
              bool _3688_erase = _3685___mcc_h514;
              DAST._INewtypeRange _3689_range = _3684___mcc_h513;
              DAST._IType _3690_b = _3683___mcc_h512;
              {
                if (object.Equals(_2997_fromTpe, _3690_b)) {
                  RAST._IExpr _3691_recursiveGen;
                  DCOMP._IOwnership _3692_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3693_recIdents;
                  RAST._IExpr _out850;
                  DCOMP._IOwnership _out851;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out852;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out850, out _out851, out _out852);
                  _3691_recursiveGen = _out850;
                  _3692_recOwned = _out851;
                  _3693_recIdents = _out852;
                  Std.Wrappers._IOption<RAST._IType> _3694_potentialRhsType;
                  _3694_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3690_b, _3689_range);
                  Std.Wrappers._IOption<RAST._IType> _source142 = _3694_potentialRhsType;
                  if (_source142.is_None) {
                    if (_3688_erase) {
                      r = _3691_recursiveGen;
                    } else {
                      RAST._IType _3695_rhsType;
                      RAST._IType _out853;
                      _out853 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _3695_rhsType = _out853;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3695_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3691_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out854;
                    DCOMP._IOwnership _out855;
                    DCOMP.COMP.FromOwnership(r, _3692_recOwned, expectedOwnership, out _out854, out _out855);
                    r = _out854;
                    resultingOwnership = _out855;
                  } else {
                    RAST._IType _3696___mcc_h1252 = _source142.dtor_value;
                    RAST._IType _3697_v = _3696___mcc_h1252;
                    r = RAST.Expr.create_ConversionNum(_3697_v, _3691_recursiveGen);
                    RAST._IExpr _out856;
                    DCOMP._IOwnership _out857;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out856, out _out857);
                    r = _out856;
                    resultingOwnership = _out857;
                  }
                  readIdents = _3693_recIdents;
                } else {
                  RAST._IExpr _out858;
                  DCOMP._IOwnership _out859;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out860;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3690_b), _3690_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out858, out _out859, out _out860);
                  r = _out858;
                  resultingOwnership = _out859;
                  readIdents = _out860;
                }
              }
            }
          } else if (_source140.is_Nullable) {
            DAST._IType _3698___mcc_h520 = _source140.dtor_Nullable_a0;
            {
              RAST._IExpr _3699_recursiveGen;
              DCOMP._IOwnership _3700_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3701_recIdents;
              RAST._IExpr _out861;
              DCOMP._IOwnership _out862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out861, out _out862, out _out863);
              _3699_recursiveGen = _out861;
              _3700_recOwned = _out862;
              _3701_recIdents = _out863;
              Dafny.ISequence<Dafny.Rune> _3702_s;
              _3702_s = (_3699_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3700_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3702_s = Dafny.Sequence<Dafny.Rune>.Concat(_3702_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3702_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3702_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3702_s);
              RAST._IExpr _out864;
              DCOMP._IOwnership _out865;
              DCOMP.COMP.FromOwnership(r, _3700_recOwned, expectedOwnership, out _out864, out _out865);
              r = _out864;
              resultingOwnership = _out865;
              readIdents = _3701_recIdents;
            }
          } else if (_source140.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3703___mcc_h522 = _source140.dtor_Tuple_a0;
            {
              RAST._IExpr _3704_recursiveGen;
              DCOMP._IOwnership _3705_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3706_recIdents;
              RAST._IExpr _out866;
              DCOMP._IOwnership _out867;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out868;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out866, out _out867, out _out868);
              _3704_recursiveGen = _out866;
              _3705_recOwned = _out867;
              _3706_recIdents = _out868;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3704_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out869;
              DCOMP._IOwnership _out870;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out869, out _out870);
              r = _out869;
              resultingOwnership = _out870;
              readIdents = _3706_recIdents;
            }
          } else if (_source140.is_Array) {
            DAST._IType _3707___mcc_h524 = _source140.dtor_element;
            BigInteger _3708___mcc_h525 = _source140.dtor_dims;
            {
              RAST._IExpr _3709_recursiveGen;
              DCOMP._IOwnership _3710_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3711_recIdents;
              RAST._IExpr _out871;
              DCOMP._IOwnership _out872;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out873;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out871, out _out872, out _out873);
              _3709_recursiveGen = _out871;
              _3710_recOwned = _out872;
              _3711_recIdents = _out873;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3709_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out874;
              DCOMP._IOwnership _out875;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out874, out _out875);
              r = _out874;
              resultingOwnership = _out875;
              readIdents = _3711_recIdents;
            }
          } else if (_source140.is_Seq) {
            DAST._IType _3712___mcc_h528 = _source140.dtor_element;
            {
              RAST._IExpr _3713_recursiveGen;
              DCOMP._IOwnership _3714_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3715_recIdents;
              RAST._IExpr _out876;
              DCOMP._IOwnership _out877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out878;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out876, out _out877, out _out878);
              _3713_recursiveGen = _out876;
              _3714_recOwned = _out877;
              _3715_recIdents = _out878;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3713_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out879;
              DCOMP._IOwnership _out880;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out879, out _out880);
              r = _out879;
              resultingOwnership = _out880;
              readIdents = _3715_recIdents;
            }
          } else if (_source140.is_Set) {
            DAST._IType _3716___mcc_h530 = _source140.dtor_element;
            {
              RAST._IExpr _3717_recursiveGen;
              DCOMP._IOwnership _3718_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3719_recIdents;
              RAST._IExpr _out881;
              DCOMP._IOwnership _out882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out881, out _out882, out _out883);
              _3717_recursiveGen = _out881;
              _3718_recOwned = _out882;
              _3719_recIdents = _out883;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3717_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out884;
              DCOMP._IOwnership _out885;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out884, out _out885);
              r = _out884;
              resultingOwnership = _out885;
              readIdents = _3719_recIdents;
            }
          } else if (_source140.is_Multiset) {
            DAST._IType _3720___mcc_h532 = _source140.dtor_element;
            {
              RAST._IExpr _3721_recursiveGen;
              DCOMP._IOwnership _3722_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3723_recIdents;
              RAST._IExpr _out886;
              DCOMP._IOwnership _out887;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out886, out _out887, out _out888);
              _3721_recursiveGen = _out886;
              _3722_recOwned = _out887;
              _3723_recIdents = _out888;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3721_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out889;
              DCOMP._IOwnership _out890;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out889, out _out890);
              r = _out889;
              resultingOwnership = _out890;
              readIdents = _3723_recIdents;
            }
          } else if (_source140.is_Map) {
            DAST._IType _3724___mcc_h534 = _source140.dtor_key;
            DAST._IType _3725___mcc_h535 = _source140.dtor_value;
            {
              RAST._IExpr _3726_recursiveGen;
              DCOMP._IOwnership _3727_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3728_recIdents;
              RAST._IExpr _out891;
              DCOMP._IOwnership _out892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out893;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out891, out _out892, out _out893);
              _3726_recursiveGen = _out891;
              _3727_recOwned = _out892;
              _3728_recIdents = _out893;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3726_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out894;
              DCOMP._IOwnership _out895;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out894, out _out895);
              r = _out894;
              resultingOwnership = _out895;
              readIdents = _3728_recIdents;
            }
          } else if (_source140.is_SetBuilder) {
            DAST._IType _3729___mcc_h538 = _source140.dtor_element;
            {
              RAST._IExpr _3730_recursiveGen;
              DCOMP._IOwnership _3731_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3732_recIdents;
              RAST._IExpr _out896;
              DCOMP._IOwnership _out897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out898;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out896, out _out897, out _out898);
              _3730_recursiveGen = _out896;
              _3731_recOwned = _out897;
              _3732_recIdents = _out898;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3730_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out899;
              DCOMP._IOwnership _out900;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out899, out _out900);
              r = _out899;
              resultingOwnership = _out900;
              readIdents = _3732_recIdents;
            }
          } else if (_source140.is_MapBuilder) {
            DAST._IType _3733___mcc_h540 = _source140.dtor_key;
            DAST._IType _3734___mcc_h541 = _source140.dtor_value;
            {
              RAST._IExpr _3735_recursiveGen;
              DCOMP._IOwnership _3736_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3737_recIdents;
              RAST._IExpr _out901;
              DCOMP._IOwnership _out902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out903;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out901, out _out902, out _out903);
              _3735_recursiveGen = _out901;
              _3736_recOwned = _out902;
              _3737_recIdents = _out903;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3735_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out904;
              DCOMP._IOwnership _out905;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out904, out _out905);
              r = _out904;
              resultingOwnership = _out905;
              readIdents = _3737_recIdents;
            }
          } else if (_source140.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3738___mcc_h544 = _source140.dtor_args;
            DAST._IType _3739___mcc_h545 = _source140.dtor_result;
            {
              RAST._IExpr _3740_recursiveGen;
              DCOMP._IOwnership _3741_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3742_recIdents;
              RAST._IExpr _out906;
              DCOMP._IOwnership _out907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out906, out _out907, out _out908);
              _3740_recursiveGen = _out906;
              _3741_recOwned = _out907;
              _3742_recIdents = _out908;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3740_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out909;
              DCOMP._IOwnership _out910;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out909, out _out910);
              r = _out909;
              resultingOwnership = _out910;
              readIdents = _3742_recIdents;
            }
          } else if (_source140.is_Primitive) {
            DAST._IPrimitive _3743___mcc_h548 = _source140.dtor_Primitive_a0;
            {
              RAST._IExpr _3744_recursiveGen;
              DCOMP._IOwnership _3745_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3746_recIdents;
              RAST._IExpr _out911;
              DCOMP._IOwnership _out912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out913;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out911, out _out912, out _out913);
              _3744_recursiveGen = _out911;
              _3745_recOwned = _out912;
              _3746_recIdents = _out913;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3744_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out914;
              DCOMP._IOwnership _out915;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out914, out _out915);
              r = _out914;
              resultingOwnership = _out915;
              readIdents = _3746_recIdents;
            }
          } else if (_source140.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3747___mcc_h550 = _source140.dtor_Passthrough_a0;
            {
              RAST._IExpr _3748_recursiveGen;
              DCOMP._IOwnership _3749_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3750_recIdents;
              RAST._IExpr _out916;
              DCOMP._IOwnership _out917;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out918;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out916, out _out917, out _out918);
              _3748_recursiveGen = _out916;
              _3749_recOwned = _out917;
              _3750_recIdents = _out918;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3748_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out919;
              DCOMP._IOwnership _out920;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out919, out _out920);
              r = _out919;
              resultingOwnership = _out920;
              readIdents = _3750_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3751___mcc_h552 = _source140.dtor_TypeArg_a0;
            {
              RAST._IExpr _3752_recursiveGen;
              DCOMP._IOwnership _3753_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3754_recIdents;
              RAST._IExpr _out921;
              DCOMP._IOwnership _out922;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out923;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out921, out _out922, out _out923);
              _3752_recursiveGen = _out921;
              _3753_recOwned = _out922;
              _3754_recIdents = _out923;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3752_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out924;
              DCOMP._IOwnership _out925;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out924, out _out925);
              r = _out924;
              resultingOwnership = _out925;
              readIdents = _3754_recIdents;
            }
          }
        } else if (_source118.is_Multiset) {
          DAST._IType _3755___mcc_h554 = _source118.dtor_element;
          DAST._IType _source143 = _3003___mcc_h1;
          if (_source143.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3756___mcc_h558 = _source143.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3757___mcc_h559 = _source143.dtor_typeArgs;
            DAST._IResolvedType _3758___mcc_h560 = _source143.dtor_resolved;
            DAST._IResolvedType _source144 = _3758___mcc_h560;
            if (_source144.is_Datatype) {
              DAST._IDatatypeType _3759___mcc_h564 = _source144.dtor_datatypeType;
              {
                RAST._IExpr _3760_recursiveGen;
                DCOMP._IOwnership _3761_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3762_recIdents;
                RAST._IExpr _out926;
                DCOMP._IOwnership _out927;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out926, out _out927, out _out928);
                _3760_recursiveGen = _out926;
                _3761_recOwned = _out927;
                _3762_recIdents = _out928;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3760_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out929;
                DCOMP._IOwnership _out930;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out929, out _out930);
                r = _out929;
                resultingOwnership = _out930;
                readIdents = _3762_recIdents;
              }
            } else if (_source144.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3763___mcc_h566 = _source144.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3764___mcc_h567 = _source144.dtor_attributes;
              {
                RAST._IExpr _3765_recursiveGen;
                DCOMP._IOwnership _3766_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3767_recIdents;
                RAST._IExpr _out931;
                DCOMP._IOwnership _out932;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out933;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out931, out _out932, out _out933);
                _3765_recursiveGen = _out931;
                _3766_recOwned = _out932;
                _3767_recIdents = _out933;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3765_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out934;
                DCOMP._IOwnership _out935;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out934, out _out935);
                r = _out934;
                resultingOwnership = _out935;
                readIdents = _3767_recIdents;
              }
            } else {
              DAST._IType _3768___mcc_h570 = _source144.dtor_baseType;
              DAST._INewtypeRange _3769___mcc_h571 = _source144.dtor_range;
              bool _3770___mcc_h572 = _source144.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3771___mcc_h573 = _source144.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3772_attributes = _3771___mcc_h573;
              bool _3773_erase = _3770___mcc_h572;
              DAST._INewtypeRange _3774_range = _3769___mcc_h571;
              DAST._IType _3775_b = _3768___mcc_h570;
              {
                if (object.Equals(_2997_fromTpe, _3775_b)) {
                  RAST._IExpr _3776_recursiveGen;
                  DCOMP._IOwnership _3777_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3778_recIdents;
                  RAST._IExpr _out936;
                  DCOMP._IOwnership _out937;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out938;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out936, out _out937, out _out938);
                  _3776_recursiveGen = _out936;
                  _3777_recOwned = _out937;
                  _3778_recIdents = _out938;
                  Std.Wrappers._IOption<RAST._IType> _3779_potentialRhsType;
                  _3779_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3775_b, _3774_range);
                  Std.Wrappers._IOption<RAST._IType> _source145 = _3779_potentialRhsType;
                  if (_source145.is_None) {
                    if (_3773_erase) {
                      r = _3776_recursiveGen;
                    } else {
                      RAST._IType _3780_rhsType;
                      RAST._IType _out939;
                      _out939 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _3780_rhsType = _out939;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3780_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3776_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out940;
                    DCOMP._IOwnership _out941;
                    DCOMP.COMP.FromOwnership(r, _3777_recOwned, expectedOwnership, out _out940, out _out941);
                    r = _out940;
                    resultingOwnership = _out941;
                  } else {
                    RAST._IType _3781___mcc_h1253 = _source145.dtor_value;
                    RAST._IType _3782_v = _3781___mcc_h1253;
                    r = RAST.Expr.create_ConversionNum(_3782_v, _3776_recursiveGen);
                    RAST._IExpr _out942;
                    DCOMP._IOwnership _out943;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out942, out _out943);
                    r = _out942;
                    resultingOwnership = _out943;
                  }
                  readIdents = _3778_recIdents;
                } else {
                  RAST._IExpr _out944;
                  DCOMP._IOwnership _out945;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out946;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3775_b), _3775_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out944, out _out945, out _out946);
                  r = _out944;
                  resultingOwnership = _out945;
                  readIdents = _out946;
                }
              }
            }
          } else if (_source143.is_Nullable) {
            DAST._IType _3783___mcc_h578 = _source143.dtor_Nullable_a0;
            {
              RAST._IExpr _3784_recursiveGen;
              DCOMP._IOwnership _3785_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3786_recIdents;
              RAST._IExpr _out947;
              DCOMP._IOwnership _out948;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out947, out _out948, out _out949);
              _3784_recursiveGen = _out947;
              _3785_recOwned = _out948;
              _3786_recIdents = _out949;
              Dafny.ISequence<Dafny.Rune> _3787_s;
              _3787_s = (_3784_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3785_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3787_s = Dafny.Sequence<Dafny.Rune>.Concat(_3787_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3787_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3787_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3787_s);
              RAST._IExpr _out950;
              DCOMP._IOwnership _out951;
              DCOMP.COMP.FromOwnership(r, _3785_recOwned, expectedOwnership, out _out950, out _out951);
              r = _out950;
              resultingOwnership = _out951;
              readIdents = _3786_recIdents;
            }
          } else if (_source143.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3788___mcc_h580 = _source143.dtor_Tuple_a0;
            {
              RAST._IExpr _3789_recursiveGen;
              DCOMP._IOwnership _3790_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3791_recIdents;
              RAST._IExpr _out952;
              DCOMP._IOwnership _out953;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out954;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out952, out _out953, out _out954);
              _3789_recursiveGen = _out952;
              _3790_recOwned = _out953;
              _3791_recIdents = _out954;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3789_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out955;
              DCOMP._IOwnership _out956;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out955, out _out956);
              r = _out955;
              resultingOwnership = _out956;
              readIdents = _3791_recIdents;
            }
          } else if (_source143.is_Array) {
            DAST._IType _3792___mcc_h582 = _source143.dtor_element;
            BigInteger _3793___mcc_h583 = _source143.dtor_dims;
            {
              RAST._IExpr _3794_recursiveGen;
              DCOMP._IOwnership _3795_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3796_recIdents;
              RAST._IExpr _out957;
              DCOMP._IOwnership _out958;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out959;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out957, out _out958, out _out959);
              _3794_recursiveGen = _out957;
              _3795_recOwned = _out958;
              _3796_recIdents = _out959;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3794_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out960;
              DCOMP._IOwnership _out961;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out960, out _out961);
              r = _out960;
              resultingOwnership = _out961;
              readIdents = _3796_recIdents;
            }
          } else if (_source143.is_Seq) {
            DAST._IType _3797___mcc_h586 = _source143.dtor_element;
            {
              RAST._IExpr _3798_recursiveGen;
              DCOMP._IOwnership _3799_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3800_recIdents;
              RAST._IExpr _out962;
              DCOMP._IOwnership _out963;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out964;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out962, out _out963, out _out964);
              _3798_recursiveGen = _out962;
              _3799_recOwned = _out963;
              _3800_recIdents = _out964;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3798_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out965;
              DCOMP._IOwnership _out966;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out965, out _out966);
              r = _out965;
              resultingOwnership = _out966;
              readIdents = _3800_recIdents;
            }
          } else if (_source143.is_Set) {
            DAST._IType _3801___mcc_h588 = _source143.dtor_element;
            {
              RAST._IExpr _3802_recursiveGen;
              DCOMP._IOwnership _3803_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3804_recIdents;
              RAST._IExpr _out967;
              DCOMP._IOwnership _out968;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out967, out _out968, out _out969);
              _3802_recursiveGen = _out967;
              _3803_recOwned = _out968;
              _3804_recIdents = _out969;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3802_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out970;
              DCOMP._IOwnership _out971;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out970, out _out971);
              r = _out970;
              resultingOwnership = _out971;
              readIdents = _3804_recIdents;
            }
          } else if (_source143.is_Multiset) {
            DAST._IType _3805___mcc_h590 = _source143.dtor_element;
            {
              RAST._IExpr _3806_recursiveGen;
              DCOMP._IOwnership _3807_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3808_recIdents;
              RAST._IExpr _out972;
              DCOMP._IOwnership _out973;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out974;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out972, out _out973, out _out974);
              _3806_recursiveGen = _out972;
              _3807_recOwned = _out973;
              _3808_recIdents = _out974;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3806_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out975;
              DCOMP._IOwnership _out976;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out975, out _out976);
              r = _out975;
              resultingOwnership = _out976;
              readIdents = _3808_recIdents;
            }
          } else if (_source143.is_Map) {
            DAST._IType _3809___mcc_h592 = _source143.dtor_key;
            DAST._IType _3810___mcc_h593 = _source143.dtor_value;
            {
              RAST._IExpr _3811_recursiveGen;
              DCOMP._IOwnership _3812_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3813_recIdents;
              RAST._IExpr _out977;
              DCOMP._IOwnership _out978;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out979;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out977, out _out978, out _out979);
              _3811_recursiveGen = _out977;
              _3812_recOwned = _out978;
              _3813_recIdents = _out979;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3811_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out980;
              DCOMP._IOwnership _out981;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out980, out _out981);
              r = _out980;
              resultingOwnership = _out981;
              readIdents = _3813_recIdents;
            }
          } else if (_source143.is_SetBuilder) {
            DAST._IType _3814___mcc_h596 = _source143.dtor_element;
            {
              RAST._IExpr _3815_recursiveGen;
              DCOMP._IOwnership _3816_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3817_recIdents;
              RAST._IExpr _out982;
              DCOMP._IOwnership _out983;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out984;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out982, out _out983, out _out984);
              _3815_recursiveGen = _out982;
              _3816_recOwned = _out983;
              _3817_recIdents = _out984;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3815_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out985;
              DCOMP._IOwnership _out986;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out985, out _out986);
              r = _out985;
              resultingOwnership = _out986;
              readIdents = _3817_recIdents;
            }
          } else if (_source143.is_MapBuilder) {
            DAST._IType _3818___mcc_h598 = _source143.dtor_key;
            DAST._IType _3819___mcc_h599 = _source143.dtor_value;
            {
              RAST._IExpr _3820_recursiveGen;
              DCOMP._IOwnership _3821_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3822_recIdents;
              RAST._IExpr _out987;
              DCOMP._IOwnership _out988;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out987, out _out988, out _out989);
              _3820_recursiveGen = _out987;
              _3821_recOwned = _out988;
              _3822_recIdents = _out989;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3820_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out990;
              DCOMP._IOwnership _out991;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out990, out _out991);
              r = _out990;
              resultingOwnership = _out991;
              readIdents = _3822_recIdents;
            }
          } else if (_source143.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3823___mcc_h602 = _source143.dtor_args;
            DAST._IType _3824___mcc_h603 = _source143.dtor_result;
            {
              RAST._IExpr _3825_recursiveGen;
              DCOMP._IOwnership _3826_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3827_recIdents;
              RAST._IExpr _out992;
              DCOMP._IOwnership _out993;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out994;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out992, out _out993, out _out994);
              _3825_recursiveGen = _out992;
              _3826_recOwned = _out993;
              _3827_recIdents = _out994;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3825_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out995;
              DCOMP._IOwnership _out996;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out995, out _out996);
              r = _out995;
              resultingOwnership = _out996;
              readIdents = _3827_recIdents;
            }
          } else if (_source143.is_Primitive) {
            DAST._IPrimitive _3828___mcc_h606 = _source143.dtor_Primitive_a0;
            {
              RAST._IExpr _3829_recursiveGen;
              DCOMP._IOwnership _3830_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3831_recIdents;
              RAST._IExpr _out997;
              DCOMP._IOwnership _out998;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out999;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out997, out _out998, out _out999);
              _3829_recursiveGen = _out997;
              _3830_recOwned = _out998;
              _3831_recIdents = _out999;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3829_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1000;
              DCOMP._IOwnership _out1001;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1000, out _out1001);
              r = _out1000;
              resultingOwnership = _out1001;
              readIdents = _3831_recIdents;
            }
          } else if (_source143.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3832___mcc_h608 = _source143.dtor_Passthrough_a0;
            {
              RAST._IExpr _3833_recursiveGen;
              DCOMP._IOwnership _3834_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3835_recIdents;
              RAST._IExpr _out1002;
              DCOMP._IOwnership _out1003;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1004;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1002, out _out1003, out _out1004);
              _3833_recursiveGen = _out1002;
              _3834_recOwned = _out1003;
              _3835_recIdents = _out1004;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3833_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1005;
              DCOMP._IOwnership _out1006;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1005, out _out1006);
              r = _out1005;
              resultingOwnership = _out1006;
              readIdents = _3835_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3836___mcc_h610 = _source143.dtor_TypeArg_a0;
            {
              RAST._IExpr _3837_recursiveGen;
              DCOMP._IOwnership _3838_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3839_recIdents;
              RAST._IExpr _out1007;
              DCOMP._IOwnership _out1008;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1009;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1007, out _out1008, out _out1009);
              _3837_recursiveGen = _out1007;
              _3838_recOwned = _out1008;
              _3839_recIdents = _out1009;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3837_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1010;
              DCOMP._IOwnership _out1011;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1010, out _out1011);
              r = _out1010;
              resultingOwnership = _out1011;
              readIdents = _3839_recIdents;
            }
          }
        } else if (_source118.is_Map) {
          DAST._IType _3840___mcc_h612 = _source118.dtor_key;
          DAST._IType _3841___mcc_h613 = _source118.dtor_value;
          DAST._IType _source146 = _3003___mcc_h1;
          if (_source146.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3842___mcc_h620 = _source146.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3843___mcc_h621 = _source146.dtor_typeArgs;
            DAST._IResolvedType _3844___mcc_h622 = _source146.dtor_resolved;
            DAST._IResolvedType _source147 = _3844___mcc_h622;
            if (_source147.is_Datatype) {
              DAST._IDatatypeType _3845___mcc_h626 = _source147.dtor_datatypeType;
              {
                RAST._IExpr _3846_recursiveGen;
                DCOMP._IOwnership _3847_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3848_recIdents;
                RAST._IExpr _out1012;
                DCOMP._IOwnership _out1013;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1014;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1012, out _out1013, out _out1014);
                _3846_recursiveGen = _out1012;
                _3847_recOwned = _out1013;
                _3848_recIdents = _out1014;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3846_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1015;
                DCOMP._IOwnership _out1016;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1015, out _out1016);
                r = _out1015;
                resultingOwnership = _out1016;
                readIdents = _3848_recIdents;
              }
            } else if (_source147.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3849___mcc_h628 = _source147.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3850___mcc_h629 = _source147.dtor_attributes;
              {
                RAST._IExpr _3851_recursiveGen;
                DCOMP._IOwnership _3852_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3853_recIdents;
                RAST._IExpr _out1017;
                DCOMP._IOwnership _out1018;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1017, out _out1018, out _out1019);
                _3851_recursiveGen = _out1017;
                _3852_recOwned = _out1018;
                _3853_recIdents = _out1019;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3851_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1020;
                DCOMP._IOwnership _out1021;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1020, out _out1021);
                r = _out1020;
                resultingOwnership = _out1021;
                readIdents = _3853_recIdents;
              }
            } else {
              DAST._IType _3854___mcc_h632 = _source147.dtor_baseType;
              DAST._INewtypeRange _3855___mcc_h633 = _source147.dtor_range;
              bool _3856___mcc_h634 = _source147.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3857___mcc_h635 = _source147.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3858_attributes = _3857___mcc_h635;
              bool _3859_erase = _3856___mcc_h634;
              DAST._INewtypeRange _3860_range = _3855___mcc_h633;
              DAST._IType _3861_b = _3854___mcc_h632;
              {
                if (object.Equals(_2997_fromTpe, _3861_b)) {
                  RAST._IExpr _3862_recursiveGen;
                  DCOMP._IOwnership _3863_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3864_recIdents;
                  RAST._IExpr _out1022;
                  DCOMP._IOwnership _out1023;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1024;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1022, out _out1023, out _out1024);
                  _3862_recursiveGen = _out1022;
                  _3863_recOwned = _out1023;
                  _3864_recIdents = _out1024;
                  Std.Wrappers._IOption<RAST._IType> _3865_potentialRhsType;
                  _3865_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3861_b, _3860_range);
                  Std.Wrappers._IOption<RAST._IType> _source148 = _3865_potentialRhsType;
                  if (_source148.is_None) {
                    if (_3859_erase) {
                      r = _3862_recursiveGen;
                    } else {
                      RAST._IType _3866_rhsType;
                      RAST._IType _out1025;
                      _out1025 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _3866_rhsType = _out1025;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3866_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3862_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1026;
                    DCOMP._IOwnership _out1027;
                    DCOMP.COMP.FromOwnership(r, _3863_recOwned, expectedOwnership, out _out1026, out _out1027);
                    r = _out1026;
                    resultingOwnership = _out1027;
                  } else {
                    RAST._IType _3867___mcc_h1254 = _source148.dtor_value;
                    RAST._IType _3868_v = _3867___mcc_h1254;
                    r = RAST.Expr.create_ConversionNum(_3868_v, _3862_recursiveGen);
                    RAST._IExpr _out1028;
                    DCOMP._IOwnership _out1029;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1028, out _out1029);
                    r = _out1028;
                    resultingOwnership = _out1029;
                  }
                  readIdents = _3864_recIdents;
                } else {
                  RAST._IExpr _out1030;
                  DCOMP._IOwnership _out1031;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3861_b), _3861_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1030, out _out1031, out _out1032);
                  r = _out1030;
                  resultingOwnership = _out1031;
                  readIdents = _out1032;
                }
              }
            }
          } else if (_source146.is_Nullable) {
            DAST._IType _3869___mcc_h640 = _source146.dtor_Nullable_a0;
            {
              RAST._IExpr _3870_recursiveGen;
              DCOMP._IOwnership _3871_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3872_recIdents;
              RAST._IExpr _out1033;
              DCOMP._IOwnership _out1034;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1035;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1033, out _out1034, out _out1035);
              _3870_recursiveGen = _out1033;
              _3871_recOwned = _out1034;
              _3872_recIdents = _out1035;
              Dafny.ISequence<Dafny.Rune> _3873_s;
              _3873_s = (_3870_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3871_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3873_s = Dafny.Sequence<Dafny.Rune>.Concat(_3873_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3873_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3873_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3873_s);
              RAST._IExpr _out1036;
              DCOMP._IOwnership _out1037;
              DCOMP.COMP.FromOwnership(r, _3871_recOwned, expectedOwnership, out _out1036, out _out1037);
              r = _out1036;
              resultingOwnership = _out1037;
              readIdents = _3872_recIdents;
            }
          } else if (_source146.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3874___mcc_h642 = _source146.dtor_Tuple_a0;
            {
              RAST._IExpr _3875_recursiveGen;
              DCOMP._IOwnership _3876_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3877_recIdents;
              RAST._IExpr _out1038;
              DCOMP._IOwnership _out1039;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1038, out _out1039, out _out1040);
              _3875_recursiveGen = _out1038;
              _3876_recOwned = _out1039;
              _3877_recIdents = _out1040;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3875_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1041;
              DCOMP._IOwnership _out1042;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1041, out _out1042);
              r = _out1041;
              resultingOwnership = _out1042;
              readIdents = _3877_recIdents;
            }
          } else if (_source146.is_Array) {
            DAST._IType _3878___mcc_h644 = _source146.dtor_element;
            BigInteger _3879___mcc_h645 = _source146.dtor_dims;
            {
              RAST._IExpr _3880_recursiveGen;
              DCOMP._IOwnership _3881_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3882_recIdents;
              RAST._IExpr _out1043;
              DCOMP._IOwnership _out1044;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1045;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1043, out _out1044, out _out1045);
              _3880_recursiveGen = _out1043;
              _3881_recOwned = _out1044;
              _3882_recIdents = _out1045;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3880_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1046;
              DCOMP._IOwnership _out1047;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1046, out _out1047);
              r = _out1046;
              resultingOwnership = _out1047;
              readIdents = _3882_recIdents;
            }
          } else if (_source146.is_Seq) {
            DAST._IType _3883___mcc_h648 = _source146.dtor_element;
            {
              RAST._IExpr _3884_recursiveGen;
              DCOMP._IOwnership _3885_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3886_recIdents;
              RAST._IExpr _out1048;
              DCOMP._IOwnership _out1049;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1050;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1048, out _out1049, out _out1050);
              _3884_recursiveGen = _out1048;
              _3885_recOwned = _out1049;
              _3886_recIdents = _out1050;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3884_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1051;
              DCOMP._IOwnership _out1052;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1051, out _out1052);
              r = _out1051;
              resultingOwnership = _out1052;
              readIdents = _3886_recIdents;
            }
          } else if (_source146.is_Set) {
            DAST._IType _3887___mcc_h650 = _source146.dtor_element;
            {
              RAST._IExpr _3888_recursiveGen;
              DCOMP._IOwnership _3889_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3890_recIdents;
              RAST._IExpr _out1053;
              DCOMP._IOwnership _out1054;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1055;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1053, out _out1054, out _out1055);
              _3888_recursiveGen = _out1053;
              _3889_recOwned = _out1054;
              _3890_recIdents = _out1055;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3888_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1056;
              DCOMP._IOwnership _out1057;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1056, out _out1057);
              r = _out1056;
              resultingOwnership = _out1057;
              readIdents = _3890_recIdents;
            }
          } else if (_source146.is_Multiset) {
            DAST._IType _3891___mcc_h652 = _source146.dtor_element;
            {
              RAST._IExpr _3892_recursiveGen;
              DCOMP._IOwnership _3893_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3894_recIdents;
              RAST._IExpr _out1058;
              DCOMP._IOwnership _out1059;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1058, out _out1059, out _out1060);
              _3892_recursiveGen = _out1058;
              _3893_recOwned = _out1059;
              _3894_recIdents = _out1060;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3892_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1061;
              DCOMP._IOwnership _out1062;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1061, out _out1062);
              r = _out1061;
              resultingOwnership = _out1062;
              readIdents = _3894_recIdents;
            }
          } else if (_source146.is_Map) {
            DAST._IType _3895___mcc_h654 = _source146.dtor_key;
            DAST._IType _3896___mcc_h655 = _source146.dtor_value;
            {
              RAST._IExpr _3897_recursiveGen;
              DCOMP._IOwnership _3898_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3899_recIdents;
              RAST._IExpr _out1063;
              DCOMP._IOwnership _out1064;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1065;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1063, out _out1064, out _out1065);
              _3897_recursiveGen = _out1063;
              _3898_recOwned = _out1064;
              _3899_recIdents = _out1065;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3897_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1066;
              DCOMP._IOwnership _out1067;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1066, out _out1067);
              r = _out1066;
              resultingOwnership = _out1067;
              readIdents = _3899_recIdents;
            }
          } else if (_source146.is_SetBuilder) {
            DAST._IType _3900___mcc_h658 = _source146.dtor_element;
            {
              RAST._IExpr _3901_recursiveGen;
              DCOMP._IOwnership _3902_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3903_recIdents;
              RAST._IExpr _out1068;
              DCOMP._IOwnership _out1069;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1070;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1068, out _out1069, out _out1070);
              _3901_recursiveGen = _out1068;
              _3902_recOwned = _out1069;
              _3903_recIdents = _out1070;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3901_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1071;
              DCOMP._IOwnership _out1072;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1071, out _out1072);
              r = _out1071;
              resultingOwnership = _out1072;
              readIdents = _3903_recIdents;
            }
          } else if (_source146.is_MapBuilder) {
            DAST._IType _3904___mcc_h660 = _source146.dtor_key;
            DAST._IType _3905___mcc_h661 = _source146.dtor_value;
            {
              RAST._IExpr _3906_recursiveGen;
              DCOMP._IOwnership _3907_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3908_recIdents;
              RAST._IExpr _out1073;
              DCOMP._IOwnership _out1074;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1075;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1073, out _out1074, out _out1075);
              _3906_recursiveGen = _out1073;
              _3907_recOwned = _out1074;
              _3908_recIdents = _out1075;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3906_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1076;
              DCOMP._IOwnership _out1077;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1076, out _out1077);
              r = _out1076;
              resultingOwnership = _out1077;
              readIdents = _3908_recIdents;
            }
          } else if (_source146.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3909___mcc_h664 = _source146.dtor_args;
            DAST._IType _3910___mcc_h665 = _source146.dtor_result;
            {
              RAST._IExpr _3911_recursiveGen;
              DCOMP._IOwnership _3912_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3913_recIdents;
              RAST._IExpr _out1078;
              DCOMP._IOwnership _out1079;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1078, out _out1079, out _out1080);
              _3911_recursiveGen = _out1078;
              _3912_recOwned = _out1079;
              _3913_recIdents = _out1080;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3911_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1081;
              DCOMP._IOwnership _out1082;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1081, out _out1082);
              r = _out1081;
              resultingOwnership = _out1082;
              readIdents = _3913_recIdents;
            }
          } else if (_source146.is_Primitive) {
            DAST._IPrimitive _3914___mcc_h668 = _source146.dtor_Primitive_a0;
            {
              RAST._IExpr _3915_recursiveGen;
              DCOMP._IOwnership _3916_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3917_recIdents;
              RAST._IExpr _out1083;
              DCOMP._IOwnership _out1084;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1085;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1083, out _out1084, out _out1085);
              _3915_recursiveGen = _out1083;
              _3916_recOwned = _out1084;
              _3917_recIdents = _out1085;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3915_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1086;
              DCOMP._IOwnership _out1087;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1086, out _out1087);
              r = _out1086;
              resultingOwnership = _out1087;
              readIdents = _3917_recIdents;
            }
          } else if (_source146.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _3918___mcc_h670 = _source146.dtor_Passthrough_a0;
            {
              RAST._IExpr _3919_recursiveGen;
              DCOMP._IOwnership _3920_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3921_recIdents;
              RAST._IExpr _out1088;
              DCOMP._IOwnership _out1089;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1090;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1088, out _out1089, out _out1090);
              _3919_recursiveGen = _out1088;
              _3920_recOwned = _out1089;
              _3921_recIdents = _out1090;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3919_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1091;
              DCOMP._IOwnership _out1092;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1091, out _out1092);
              r = _out1091;
              resultingOwnership = _out1092;
              readIdents = _3921_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3922___mcc_h672 = _source146.dtor_TypeArg_a0;
            {
              RAST._IExpr _3923_recursiveGen;
              DCOMP._IOwnership _3924_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3925_recIdents;
              RAST._IExpr _out1093;
              DCOMP._IOwnership _out1094;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1095;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1093, out _out1094, out _out1095);
              _3923_recursiveGen = _out1093;
              _3924_recOwned = _out1094;
              _3925_recIdents = _out1095;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3923_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1096;
              DCOMP._IOwnership _out1097;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1096, out _out1097);
              r = _out1096;
              resultingOwnership = _out1097;
              readIdents = _3925_recIdents;
            }
          }
        } else if (_source118.is_SetBuilder) {
          DAST._IType _3926___mcc_h674 = _source118.dtor_element;
          DAST._IType _source149 = _3003___mcc_h1;
          if (_source149.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3927___mcc_h678 = _source149.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _3928___mcc_h679 = _source149.dtor_typeArgs;
            DAST._IResolvedType _3929___mcc_h680 = _source149.dtor_resolved;
            DAST._IResolvedType _source150 = _3929___mcc_h680;
            if (_source150.is_Datatype) {
              DAST._IDatatypeType _3930___mcc_h684 = _source150.dtor_datatypeType;
              {
                RAST._IExpr _3931_recursiveGen;
                DCOMP._IOwnership _3932_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3933_recIdents;
                RAST._IExpr _out1098;
                DCOMP._IOwnership _out1099;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1098, out _out1099, out _out1100);
                _3931_recursiveGen = _out1098;
                _3932_recOwned = _out1099;
                _3933_recIdents = _out1100;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3931_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1101;
                DCOMP._IOwnership _out1102;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1101, out _out1102);
                r = _out1101;
                resultingOwnership = _out1102;
                readIdents = _3933_recIdents;
              }
            } else if (_source150.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3934___mcc_h686 = _source150.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _3935___mcc_h687 = _source150.dtor_attributes;
              {
                RAST._IExpr _3936_recursiveGen;
                DCOMP._IOwnership _3937_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3938_recIdents;
                RAST._IExpr _out1103;
                DCOMP._IOwnership _out1104;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1103, out _out1104, out _out1105);
                _3936_recursiveGen = _out1103;
                _3937_recOwned = _out1104;
                _3938_recIdents = _out1105;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3936_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1106;
                DCOMP._IOwnership _out1107;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1106, out _out1107);
                r = _out1106;
                resultingOwnership = _out1107;
                readIdents = _3938_recIdents;
              }
            } else {
              DAST._IType _3939___mcc_h690 = _source150.dtor_baseType;
              DAST._INewtypeRange _3940___mcc_h691 = _source150.dtor_range;
              bool _3941___mcc_h692 = _source150.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _3942___mcc_h693 = _source150.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _3943_attributes = _3942___mcc_h693;
              bool _3944_erase = _3941___mcc_h692;
              DAST._INewtypeRange _3945_range = _3940___mcc_h691;
              DAST._IType _3946_b = _3939___mcc_h690;
              {
                if (object.Equals(_2997_fromTpe, _3946_b)) {
                  RAST._IExpr _3947_recursiveGen;
                  DCOMP._IOwnership _3948_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3949_recIdents;
                  RAST._IExpr _out1108;
                  DCOMP._IOwnership _out1109;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1110;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1108, out _out1109, out _out1110);
                  _3947_recursiveGen = _out1108;
                  _3948_recOwned = _out1109;
                  _3949_recIdents = _out1110;
                  Std.Wrappers._IOption<RAST._IType> _3950_potentialRhsType;
                  _3950_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_3946_b, _3945_range);
                  Std.Wrappers._IOption<RAST._IType> _source151 = _3950_potentialRhsType;
                  if (_source151.is_None) {
                    if (_3944_erase) {
                      r = _3947_recursiveGen;
                    } else {
                      RAST._IType _3951_rhsType;
                      RAST._IType _out1111;
                      _out1111 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _3951_rhsType = _out1111;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_3951_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_3947_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1112;
                    DCOMP._IOwnership _out1113;
                    DCOMP.COMP.FromOwnership(r, _3948_recOwned, expectedOwnership, out _out1112, out _out1113);
                    r = _out1112;
                    resultingOwnership = _out1113;
                  } else {
                    RAST._IType _3952___mcc_h1255 = _source151.dtor_value;
                    RAST._IType _3953_v = _3952___mcc_h1255;
                    r = RAST.Expr.create_ConversionNum(_3953_v, _3947_recursiveGen);
                    RAST._IExpr _out1114;
                    DCOMP._IOwnership _out1115;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1114, out _out1115);
                    r = _out1114;
                    resultingOwnership = _out1115;
                  }
                  readIdents = _3949_recIdents;
                } else {
                  RAST._IExpr _out1116;
                  DCOMP._IOwnership _out1117;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1118;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _3946_b), _3946_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1116, out _out1117, out _out1118);
                  r = _out1116;
                  resultingOwnership = _out1117;
                  readIdents = _out1118;
                }
              }
            }
          } else if (_source149.is_Nullable) {
            DAST._IType _3954___mcc_h698 = _source149.dtor_Nullable_a0;
            {
              RAST._IExpr _3955_recursiveGen;
              DCOMP._IOwnership _3956_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3957_recIdents;
              RAST._IExpr _out1119;
              DCOMP._IOwnership _out1120;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1119, out _out1120, out _out1121);
              _3955_recursiveGen = _out1119;
              _3956_recOwned = _out1120;
              _3957_recIdents = _out1121;
              Dafny.ISequence<Dafny.Rune> _3958_s;
              _3958_s = (_3955_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_3956_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _3958_s = Dafny.Sequence<Dafny.Rune>.Concat(_3958_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _3958_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3958_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_3958_s);
              RAST._IExpr _out1122;
              DCOMP._IOwnership _out1123;
              DCOMP.COMP.FromOwnership(r, _3956_recOwned, expectedOwnership, out _out1122, out _out1123);
              r = _out1122;
              resultingOwnership = _out1123;
              readIdents = _3957_recIdents;
            }
          } else if (_source149.is_Tuple) {
            Dafny.ISequence<DAST._IType> _3959___mcc_h700 = _source149.dtor_Tuple_a0;
            {
              RAST._IExpr _3960_recursiveGen;
              DCOMP._IOwnership _3961_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3962_recIdents;
              RAST._IExpr _out1124;
              DCOMP._IOwnership _out1125;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1126;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1124, out _out1125, out _out1126);
              _3960_recursiveGen = _out1124;
              _3961_recOwned = _out1125;
              _3962_recIdents = _out1126;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3960_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1127;
              DCOMP._IOwnership _out1128;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1127, out _out1128);
              r = _out1127;
              resultingOwnership = _out1128;
              readIdents = _3962_recIdents;
            }
          } else if (_source149.is_Array) {
            DAST._IType _3963___mcc_h702 = _source149.dtor_element;
            BigInteger _3964___mcc_h703 = _source149.dtor_dims;
            {
              RAST._IExpr _3965_recursiveGen;
              DCOMP._IOwnership _3966_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3967_recIdents;
              RAST._IExpr _out1129;
              DCOMP._IOwnership _out1130;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1131;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1129, out _out1130, out _out1131);
              _3965_recursiveGen = _out1129;
              _3966_recOwned = _out1130;
              _3967_recIdents = _out1131;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3965_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1132;
              DCOMP._IOwnership _out1133;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1132, out _out1133);
              r = _out1132;
              resultingOwnership = _out1133;
              readIdents = _3967_recIdents;
            }
          } else if (_source149.is_Seq) {
            DAST._IType _3968___mcc_h706 = _source149.dtor_element;
            {
              RAST._IExpr _3969_recursiveGen;
              DCOMP._IOwnership _3970_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3971_recIdents;
              RAST._IExpr _out1134;
              DCOMP._IOwnership _out1135;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1136;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1134, out _out1135, out _out1136);
              _3969_recursiveGen = _out1134;
              _3970_recOwned = _out1135;
              _3971_recIdents = _out1136;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3969_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1137;
              DCOMP._IOwnership _out1138;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1137, out _out1138);
              r = _out1137;
              resultingOwnership = _out1138;
              readIdents = _3971_recIdents;
            }
          } else if (_source149.is_Set) {
            DAST._IType _3972___mcc_h708 = _source149.dtor_element;
            {
              RAST._IExpr _3973_recursiveGen;
              DCOMP._IOwnership _3974_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3975_recIdents;
              RAST._IExpr _out1139;
              DCOMP._IOwnership _out1140;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1139, out _out1140, out _out1141);
              _3973_recursiveGen = _out1139;
              _3974_recOwned = _out1140;
              _3975_recIdents = _out1141;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3973_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1142;
              DCOMP._IOwnership _out1143;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1142, out _out1143);
              r = _out1142;
              resultingOwnership = _out1143;
              readIdents = _3975_recIdents;
            }
          } else if (_source149.is_Multiset) {
            DAST._IType _3976___mcc_h710 = _source149.dtor_element;
            {
              RAST._IExpr _3977_recursiveGen;
              DCOMP._IOwnership _3978_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3979_recIdents;
              RAST._IExpr _out1144;
              DCOMP._IOwnership _out1145;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1146;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1144, out _out1145, out _out1146);
              _3977_recursiveGen = _out1144;
              _3978_recOwned = _out1145;
              _3979_recIdents = _out1146;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3977_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1147;
              DCOMP._IOwnership _out1148;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1147, out _out1148);
              r = _out1147;
              resultingOwnership = _out1148;
              readIdents = _3979_recIdents;
            }
          } else if (_source149.is_Map) {
            DAST._IType _3980___mcc_h712 = _source149.dtor_key;
            DAST._IType _3981___mcc_h713 = _source149.dtor_value;
            {
              RAST._IExpr _3982_recursiveGen;
              DCOMP._IOwnership _3983_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3984_recIdents;
              RAST._IExpr _out1149;
              DCOMP._IOwnership _out1150;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1151;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1149, out _out1150, out _out1151);
              _3982_recursiveGen = _out1149;
              _3983_recOwned = _out1150;
              _3984_recIdents = _out1151;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3982_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1152;
              DCOMP._IOwnership _out1153;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1152, out _out1153);
              r = _out1152;
              resultingOwnership = _out1153;
              readIdents = _3984_recIdents;
            }
          } else if (_source149.is_SetBuilder) {
            DAST._IType _3985___mcc_h716 = _source149.dtor_element;
            {
              RAST._IExpr _3986_recursiveGen;
              DCOMP._IOwnership _3987_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3988_recIdents;
              RAST._IExpr _out1154;
              DCOMP._IOwnership _out1155;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1156;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1154, out _out1155, out _out1156);
              _3986_recursiveGen = _out1154;
              _3987_recOwned = _out1155;
              _3988_recIdents = _out1156;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3986_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1157;
              DCOMP._IOwnership _out1158;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1157, out _out1158);
              r = _out1157;
              resultingOwnership = _out1158;
              readIdents = _3988_recIdents;
            }
          } else if (_source149.is_MapBuilder) {
            DAST._IType _3989___mcc_h718 = _source149.dtor_key;
            DAST._IType _3990___mcc_h719 = _source149.dtor_value;
            {
              RAST._IExpr _3991_recursiveGen;
              DCOMP._IOwnership _3992_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3993_recIdents;
              RAST._IExpr _out1159;
              DCOMP._IOwnership _out1160;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1159, out _out1160, out _out1161);
              _3991_recursiveGen = _out1159;
              _3992_recOwned = _out1160;
              _3993_recIdents = _out1161;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3991_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1162;
              DCOMP._IOwnership _out1163;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1162, out _out1163);
              r = _out1162;
              resultingOwnership = _out1163;
              readIdents = _3993_recIdents;
            }
          } else if (_source149.is_Arrow) {
            Dafny.ISequence<DAST._IType> _3994___mcc_h722 = _source149.dtor_args;
            DAST._IType _3995___mcc_h723 = _source149.dtor_result;
            {
              RAST._IExpr _3996_recursiveGen;
              DCOMP._IOwnership _3997_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3998_recIdents;
              RAST._IExpr _out1164;
              DCOMP._IOwnership _out1165;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1164, out _out1165, out _out1166);
              _3996_recursiveGen = _out1164;
              _3997_recOwned = _out1165;
              _3998_recIdents = _out1166;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_3996_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1167;
              DCOMP._IOwnership _out1168;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1167, out _out1168);
              r = _out1167;
              resultingOwnership = _out1168;
              readIdents = _3998_recIdents;
            }
          } else if (_source149.is_Primitive) {
            DAST._IPrimitive _3999___mcc_h726 = _source149.dtor_Primitive_a0;
            {
              RAST._IExpr _4000_recursiveGen;
              DCOMP._IOwnership _4001_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4002_recIdents;
              RAST._IExpr _out1169;
              DCOMP._IOwnership _out1170;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1171;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1169, out _out1170, out _out1171);
              _4000_recursiveGen = _out1169;
              _4001_recOwned = _out1170;
              _4002_recIdents = _out1171;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4000_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1172;
              DCOMP._IOwnership _out1173;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1172, out _out1173);
              r = _out1172;
              resultingOwnership = _out1173;
              readIdents = _4002_recIdents;
            }
          } else if (_source149.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4003___mcc_h728 = _source149.dtor_Passthrough_a0;
            {
              RAST._IExpr _4004_recursiveGen;
              DCOMP._IOwnership _4005_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4006_recIdents;
              RAST._IExpr _out1174;
              DCOMP._IOwnership _out1175;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1176;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1174, out _out1175, out _out1176);
              _4004_recursiveGen = _out1174;
              _4005_recOwned = _out1175;
              _4006_recIdents = _out1176;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4004_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1177;
              DCOMP._IOwnership _out1178;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1177, out _out1178);
              r = _out1177;
              resultingOwnership = _out1178;
              readIdents = _4006_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4007___mcc_h730 = _source149.dtor_TypeArg_a0;
            {
              RAST._IExpr _4008_recursiveGen;
              DCOMP._IOwnership _4009_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4010_recIdents;
              RAST._IExpr _out1179;
              DCOMP._IOwnership _out1180;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1181;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1179, out _out1180, out _out1181);
              _4008_recursiveGen = _out1179;
              _4009_recOwned = _out1180;
              _4010_recIdents = _out1181;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4008_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1182;
              DCOMP._IOwnership _out1183;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1182, out _out1183);
              r = _out1182;
              resultingOwnership = _out1183;
              readIdents = _4010_recIdents;
            }
          }
        } else if (_source118.is_MapBuilder) {
          DAST._IType _4011___mcc_h732 = _source118.dtor_key;
          DAST._IType _4012___mcc_h733 = _source118.dtor_value;
          DAST._IType _source152 = _3003___mcc_h1;
          if (_source152.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4013___mcc_h740 = _source152.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4014___mcc_h741 = _source152.dtor_typeArgs;
            DAST._IResolvedType _4015___mcc_h742 = _source152.dtor_resolved;
            DAST._IResolvedType _source153 = _4015___mcc_h742;
            if (_source153.is_Datatype) {
              DAST._IDatatypeType _4016___mcc_h746 = _source153.dtor_datatypeType;
              {
                RAST._IExpr _4017_recursiveGen;
                DCOMP._IOwnership _4018_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4019_recIdents;
                RAST._IExpr _out1184;
                DCOMP._IOwnership _out1185;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1184, out _out1185, out _out1186);
                _4017_recursiveGen = _out1184;
                _4018_recOwned = _out1185;
                _4019_recIdents = _out1186;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4017_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1187;
                DCOMP._IOwnership _out1188;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1187, out _out1188);
                r = _out1187;
                resultingOwnership = _out1188;
                readIdents = _4019_recIdents;
              }
            } else if (_source153.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4020___mcc_h748 = _source153.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4021___mcc_h749 = _source153.dtor_attributes;
              {
                RAST._IExpr _4022_recursiveGen;
                DCOMP._IOwnership _4023_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4024_recIdents;
                RAST._IExpr _out1189;
                DCOMP._IOwnership _out1190;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1191;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1189, out _out1190, out _out1191);
                _4022_recursiveGen = _out1189;
                _4023_recOwned = _out1190;
                _4024_recIdents = _out1191;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4022_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1192;
                DCOMP._IOwnership _out1193;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1192, out _out1193);
                r = _out1192;
                resultingOwnership = _out1193;
                readIdents = _4024_recIdents;
              }
            } else {
              DAST._IType _4025___mcc_h752 = _source153.dtor_baseType;
              DAST._INewtypeRange _4026___mcc_h753 = _source153.dtor_range;
              bool _4027___mcc_h754 = _source153.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4028___mcc_h755 = _source153.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4029_attributes = _4028___mcc_h755;
              bool _4030_erase = _4027___mcc_h754;
              DAST._INewtypeRange _4031_range = _4026___mcc_h753;
              DAST._IType _4032_b = _4025___mcc_h752;
              {
                if (object.Equals(_2997_fromTpe, _4032_b)) {
                  RAST._IExpr _4033_recursiveGen;
                  DCOMP._IOwnership _4034_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4035_recIdents;
                  RAST._IExpr _out1194;
                  DCOMP._IOwnership _out1195;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1196;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1194, out _out1195, out _out1196);
                  _4033_recursiveGen = _out1194;
                  _4034_recOwned = _out1195;
                  _4035_recIdents = _out1196;
                  Std.Wrappers._IOption<RAST._IType> _4036_potentialRhsType;
                  _4036_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4032_b, _4031_range);
                  Std.Wrappers._IOption<RAST._IType> _source154 = _4036_potentialRhsType;
                  if (_source154.is_None) {
                    if (_4030_erase) {
                      r = _4033_recursiveGen;
                    } else {
                      RAST._IType _4037_rhsType;
                      RAST._IType _out1197;
                      _out1197 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _4037_rhsType = _out1197;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4037_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4033_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1198;
                    DCOMP._IOwnership _out1199;
                    DCOMP.COMP.FromOwnership(r, _4034_recOwned, expectedOwnership, out _out1198, out _out1199);
                    r = _out1198;
                    resultingOwnership = _out1199;
                  } else {
                    RAST._IType _4038___mcc_h1256 = _source154.dtor_value;
                    RAST._IType _4039_v = _4038___mcc_h1256;
                    r = RAST.Expr.create_ConversionNum(_4039_v, _4033_recursiveGen);
                    RAST._IExpr _out1200;
                    DCOMP._IOwnership _out1201;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1200, out _out1201);
                    r = _out1200;
                    resultingOwnership = _out1201;
                  }
                  readIdents = _4035_recIdents;
                } else {
                  RAST._IExpr _out1202;
                  DCOMP._IOwnership _out1203;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1204;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4032_b), _4032_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1202, out _out1203, out _out1204);
                  r = _out1202;
                  resultingOwnership = _out1203;
                  readIdents = _out1204;
                }
              }
            }
          } else if (_source152.is_Nullable) {
            DAST._IType _4040___mcc_h760 = _source152.dtor_Nullable_a0;
            {
              RAST._IExpr _4041_recursiveGen;
              DCOMP._IOwnership _4042_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4043_recIdents;
              RAST._IExpr _out1205;
              DCOMP._IOwnership _out1206;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1207;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1205, out _out1206, out _out1207);
              _4041_recursiveGen = _out1205;
              _4042_recOwned = _out1206;
              _4043_recIdents = _out1207;
              Dafny.ISequence<Dafny.Rune> _4044_s;
              _4044_s = (_4041_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_4042_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _4044_s = Dafny.Sequence<Dafny.Rune>.Concat(_4044_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _4044_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4044_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_4044_s);
              RAST._IExpr _out1208;
              DCOMP._IOwnership _out1209;
              DCOMP.COMP.FromOwnership(r, _4042_recOwned, expectedOwnership, out _out1208, out _out1209);
              r = _out1208;
              resultingOwnership = _out1209;
              readIdents = _4043_recIdents;
            }
          } else if (_source152.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4045___mcc_h762 = _source152.dtor_Tuple_a0;
            {
              RAST._IExpr _4046_recursiveGen;
              DCOMP._IOwnership _4047_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4048_recIdents;
              RAST._IExpr _out1210;
              DCOMP._IOwnership _out1211;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1212;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1210, out _out1211, out _out1212);
              _4046_recursiveGen = _out1210;
              _4047_recOwned = _out1211;
              _4048_recIdents = _out1212;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4046_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1213;
              DCOMP._IOwnership _out1214;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1213, out _out1214);
              r = _out1213;
              resultingOwnership = _out1214;
              readIdents = _4048_recIdents;
            }
          } else if (_source152.is_Array) {
            DAST._IType _4049___mcc_h764 = _source152.dtor_element;
            BigInteger _4050___mcc_h765 = _source152.dtor_dims;
            {
              RAST._IExpr _4051_recursiveGen;
              DCOMP._IOwnership _4052_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4053_recIdents;
              RAST._IExpr _out1215;
              DCOMP._IOwnership _out1216;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1217;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1215, out _out1216, out _out1217);
              _4051_recursiveGen = _out1215;
              _4052_recOwned = _out1216;
              _4053_recIdents = _out1217;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4051_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1218;
              DCOMP._IOwnership _out1219;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1218, out _out1219);
              r = _out1218;
              resultingOwnership = _out1219;
              readIdents = _4053_recIdents;
            }
          } else if (_source152.is_Seq) {
            DAST._IType _4054___mcc_h768 = _source152.dtor_element;
            {
              RAST._IExpr _4055_recursiveGen;
              DCOMP._IOwnership _4056_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4057_recIdents;
              RAST._IExpr _out1220;
              DCOMP._IOwnership _out1221;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1220, out _out1221, out _out1222);
              _4055_recursiveGen = _out1220;
              _4056_recOwned = _out1221;
              _4057_recIdents = _out1222;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4055_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1223;
              DCOMP._IOwnership _out1224;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1223, out _out1224);
              r = _out1223;
              resultingOwnership = _out1224;
              readIdents = _4057_recIdents;
            }
          } else if (_source152.is_Set) {
            DAST._IType _4058___mcc_h770 = _source152.dtor_element;
            {
              RAST._IExpr _4059_recursiveGen;
              DCOMP._IOwnership _4060_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4061_recIdents;
              RAST._IExpr _out1225;
              DCOMP._IOwnership _out1226;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1225, out _out1226, out _out1227);
              _4059_recursiveGen = _out1225;
              _4060_recOwned = _out1226;
              _4061_recIdents = _out1227;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4059_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1228;
              DCOMP._IOwnership _out1229;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1228, out _out1229);
              r = _out1228;
              resultingOwnership = _out1229;
              readIdents = _4061_recIdents;
            }
          } else if (_source152.is_Multiset) {
            DAST._IType _4062___mcc_h772 = _source152.dtor_element;
            {
              RAST._IExpr _4063_recursiveGen;
              DCOMP._IOwnership _4064_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4065_recIdents;
              RAST._IExpr _out1230;
              DCOMP._IOwnership _out1231;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1232;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1230, out _out1231, out _out1232);
              _4063_recursiveGen = _out1230;
              _4064_recOwned = _out1231;
              _4065_recIdents = _out1232;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4063_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1233;
              DCOMP._IOwnership _out1234;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1233, out _out1234);
              r = _out1233;
              resultingOwnership = _out1234;
              readIdents = _4065_recIdents;
            }
          } else if (_source152.is_Map) {
            DAST._IType _4066___mcc_h774 = _source152.dtor_key;
            DAST._IType _4067___mcc_h775 = _source152.dtor_value;
            {
              RAST._IExpr _4068_recursiveGen;
              DCOMP._IOwnership _4069_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4070_recIdents;
              RAST._IExpr _out1235;
              DCOMP._IOwnership _out1236;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1237;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1235, out _out1236, out _out1237);
              _4068_recursiveGen = _out1235;
              _4069_recOwned = _out1236;
              _4070_recIdents = _out1237;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4068_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1238;
              DCOMP._IOwnership _out1239;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1238, out _out1239);
              r = _out1238;
              resultingOwnership = _out1239;
              readIdents = _4070_recIdents;
            }
          } else if (_source152.is_SetBuilder) {
            DAST._IType _4071___mcc_h778 = _source152.dtor_element;
            {
              RAST._IExpr _4072_recursiveGen;
              DCOMP._IOwnership _4073_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4074_recIdents;
              RAST._IExpr _out1240;
              DCOMP._IOwnership _out1241;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1242;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1240, out _out1241, out _out1242);
              _4072_recursiveGen = _out1240;
              _4073_recOwned = _out1241;
              _4074_recIdents = _out1242;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4072_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1243;
              DCOMP._IOwnership _out1244;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1243, out _out1244);
              r = _out1243;
              resultingOwnership = _out1244;
              readIdents = _4074_recIdents;
            }
          } else if (_source152.is_MapBuilder) {
            DAST._IType _4075___mcc_h780 = _source152.dtor_key;
            DAST._IType _4076___mcc_h781 = _source152.dtor_value;
            {
              RAST._IExpr _4077_recursiveGen;
              DCOMP._IOwnership _4078_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4079_recIdents;
              RAST._IExpr _out1245;
              DCOMP._IOwnership _out1246;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1245, out _out1246, out _out1247);
              _4077_recursiveGen = _out1245;
              _4078_recOwned = _out1246;
              _4079_recIdents = _out1247;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4077_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1248;
              DCOMP._IOwnership _out1249;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1248, out _out1249);
              r = _out1248;
              resultingOwnership = _out1249;
              readIdents = _4079_recIdents;
            }
          } else if (_source152.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4080___mcc_h784 = _source152.dtor_args;
            DAST._IType _4081___mcc_h785 = _source152.dtor_result;
            {
              RAST._IExpr _4082_recursiveGen;
              DCOMP._IOwnership _4083_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4084_recIdents;
              RAST._IExpr _out1250;
              DCOMP._IOwnership _out1251;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1252;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1250, out _out1251, out _out1252);
              _4082_recursiveGen = _out1250;
              _4083_recOwned = _out1251;
              _4084_recIdents = _out1252;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4082_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1253;
              DCOMP._IOwnership _out1254;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1253, out _out1254);
              r = _out1253;
              resultingOwnership = _out1254;
              readIdents = _4084_recIdents;
            }
          } else if (_source152.is_Primitive) {
            DAST._IPrimitive _4085___mcc_h788 = _source152.dtor_Primitive_a0;
            {
              RAST._IExpr _4086_recursiveGen;
              DCOMP._IOwnership _4087_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4088_recIdents;
              RAST._IExpr _out1255;
              DCOMP._IOwnership _out1256;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1257;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1255, out _out1256, out _out1257);
              _4086_recursiveGen = _out1255;
              _4087_recOwned = _out1256;
              _4088_recIdents = _out1257;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4086_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1258;
              DCOMP._IOwnership _out1259;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1258, out _out1259);
              r = _out1258;
              resultingOwnership = _out1259;
              readIdents = _4088_recIdents;
            }
          } else if (_source152.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4089___mcc_h790 = _source152.dtor_Passthrough_a0;
            {
              RAST._IExpr _4090_recursiveGen;
              DCOMP._IOwnership _4091_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4092_recIdents;
              RAST._IExpr _out1260;
              DCOMP._IOwnership _out1261;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1262;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1260, out _out1261, out _out1262);
              _4090_recursiveGen = _out1260;
              _4091_recOwned = _out1261;
              _4092_recIdents = _out1262;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4090_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1263;
              DCOMP._IOwnership _out1264;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1263, out _out1264);
              r = _out1263;
              resultingOwnership = _out1264;
              readIdents = _4092_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4093___mcc_h792 = _source152.dtor_TypeArg_a0;
            {
              RAST._IExpr _4094_recursiveGen;
              DCOMP._IOwnership _4095_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4096_recIdents;
              RAST._IExpr _out1265;
              DCOMP._IOwnership _out1266;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1267;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1265, out _out1266, out _out1267);
              _4094_recursiveGen = _out1265;
              _4095_recOwned = _out1266;
              _4096_recIdents = _out1267;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4094_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1268;
              DCOMP._IOwnership _out1269;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1268, out _out1269);
              r = _out1268;
              resultingOwnership = _out1269;
              readIdents = _4096_recIdents;
            }
          }
        } else if (_source118.is_Arrow) {
          Dafny.ISequence<DAST._IType> _4097___mcc_h794 = _source118.dtor_args;
          DAST._IType _4098___mcc_h795 = _source118.dtor_result;
          DAST._IType _source155 = _3003___mcc_h1;
          if (_source155.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4099___mcc_h802 = _source155.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4100___mcc_h803 = _source155.dtor_typeArgs;
            DAST._IResolvedType _4101___mcc_h804 = _source155.dtor_resolved;
            DAST._IResolvedType _source156 = _4101___mcc_h804;
            if (_source156.is_Datatype) {
              DAST._IDatatypeType _4102___mcc_h808 = _source156.dtor_datatypeType;
              {
                RAST._IExpr _4103_recursiveGen;
                DCOMP._IOwnership _4104_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4105_recIdents;
                RAST._IExpr _out1270;
                DCOMP._IOwnership _out1271;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1270, out _out1271, out _out1272);
                _4103_recursiveGen = _out1270;
                _4104_recOwned = _out1271;
                _4105_recIdents = _out1272;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4103_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1273;
                DCOMP._IOwnership _out1274;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1273, out _out1274);
                r = _out1273;
                resultingOwnership = _out1274;
                readIdents = _4105_recIdents;
              }
            } else if (_source156.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4106___mcc_h810 = _source156.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4107___mcc_h811 = _source156.dtor_attributes;
              {
                RAST._IExpr _4108_recursiveGen;
                DCOMP._IOwnership _4109_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4110_recIdents;
                RAST._IExpr _out1275;
                DCOMP._IOwnership _out1276;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1277;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1275, out _out1276, out _out1277);
                _4108_recursiveGen = _out1275;
                _4109_recOwned = _out1276;
                _4110_recIdents = _out1277;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4108_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1278;
                DCOMP._IOwnership _out1279;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1278, out _out1279);
                r = _out1278;
                resultingOwnership = _out1279;
                readIdents = _4110_recIdents;
              }
            } else {
              DAST._IType _4111___mcc_h814 = _source156.dtor_baseType;
              DAST._INewtypeRange _4112___mcc_h815 = _source156.dtor_range;
              bool _4113___mcc_h816 = _source156.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4114___mcc_h817 = _source156.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4115_attributes = _4114___mcc_h817;
              bool _4116_erase = _4113___mcc_h816;
              DAST._INewtypeRange _4117_range = _4112___mcc_h815;
              DAST._IType _4118_b = _4111___mcc_h814;
              {
                if (object.Equals(_2997_fromTpe, _4118_b)) {
                  RAST._IExpr _4119_recursiveGen;
                  DCOMP._IOwnership _4120_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4121_recIdents;
                  RAST._IExpr _out1280;
                  DCOMP._IOwnership _out1281;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1282;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1280, out _out1281, out _out1282);
                  _4119_recursiveGen = _out1280;
                  _4120_recOwned = _out1281;
                  _4121_recIdents = _out1282;
                  Std.Wrappers._IOption<RAST._IType> _4122_potentialRhsType;
                  _4122_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4118_b, _4117_range);
                  Std.Wrappers._IOption<RAST._IType> _source157 = _4122_potentialRhsType;
                  if (_source157.is_None) {
                    if (_4116_erase) {
                      r = _4119_recursiveGen;
                    } else {
                      RAST._IType _4123_rhsType;
                      RAST._IType _out1283;
                      _out1283 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _4123_rhsType = _out1283;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4123_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4119_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1284;
                    DCOMP._IOwnership _out1285;
                    DCOMP.COMP.FromOwnership(r, _4120_recOwned, expectedOwnership, out _out1284, out _out1285);
                    r = _out1284;
                    resultingOwnership = _out1285;
                  } else {
                    RAST._IType _4124___mcc_h1257 = _source157.dtor_value;
                    RAST._IType _4125_v = _4124___mcc_h1257;
                    r = RAST.Expr.create_ConversionNum(_4125_v, _4119_recursiveGen);
                    RAST._IExpr _out1286;
                    DCOMP._IOwnership _out1287;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1286, out _out1287);
                    r = _out1286;
                    resultingOwnership = _out1287;
                  }
                  readIdents = _4121_recIdents;
                } else {
                  RAST._IExpr _out1288;
                  DCOMP._IOwnership _out1289;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1290;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4118_b), _4118_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1288, out _out1289, out _out1290);
                  r = _out1288;
                  resultingOwnership = _out1289;
                  readIdents = _out1290;
                }
              }
            }
          } else if (_source155.is_Nullable) {
            DAST._IType _4126___mcc_h822 = _source155.dtor_Nullable_a0;
            {
              RAST._IExpr _4127_recursiveGen;
              DCOMP._IOwnership _4128_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4129_recIdents;
              RAST._IExpr _out1291;
              DCOMP._IOwnership _out1292;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1293;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1291, out _out1292, out _out1293);
              _4127_recursiveGen = _out1291;
              _4128_recOwned = _out1292;
              _4129_recIdents = _out1293;
              Dafny.ISequence<Dafny.Rune> _4130_s;
              _4130_s = (_4127_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_4128_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _4130_s = Dafny.Sequence<Dafny.Rune>.Concat(_4130_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _4130_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4130_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_4130_s);
              RAST._IExpr _out1294;
              DCOMP._IOwnership _out1295;
              DCOMP.COMP.FromOwnership(r, _4128_recOwned, expectedOwnership, out _out1294, out _out1295);
              r = _out1294;
              resultingOwnership = _out1295;
              readIdents = _4129_recIdents;
            }
          } else if (_source155.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4131___mcc_h824 = _source155.dtor_Tuple_a0;
            {
              RAST._IExpr _4132_recursiveGen;
              DCOMP._IOwnership _4133_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4134_recIdents;
              RAST._IExpr _out1296;
              DCOMP._IOwnership _out1297;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1298;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1296, out _out1297, out _out1298);
              _4132_recursiveGen = _out1296;
              _4133_recOwned = _out1297;
              _4134_recIdents = _out1298;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4132_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1299;
              DCOMP._IOwnership _out1300;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1299, out _out1300);
              r = _out1299;
              resultingOwnership = _out1300;
              readIdents = _4134_recIdents;
            }
          } else if (_source155.is_Array) {
            DAST._IType _4135___mcc_h826 = _source155.dtor_element;
            BigInteger _4136___mcc_h827 = _source155.dtor_dims;
            {
              RAST._IExpr _4137_recursiveGen;
              DCOMP._IOwnership _4138_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4139_recIdents;
              RAST._IExpr _out1301;
              DCOMP._IOwnership _out1302;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1303;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1301, out _out1302, out _out1303);
              _4137_recursiveGen = _out1301;
              _4138_recOwned = _out1302;
              _4139_recIdents = _out1303;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4137_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1304;
              DCOMP._IOwnership _out1305;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1304, out _out1305);
              r = _out1304;
              resultingOwnership = _out1305;
              readIdents = _4139_recIdents;
            }
          } else if (_source155.is_Seq) {
            DAST._IType _4140___mcc_h830 = _source155.dtor_element;
            {
              RAST._IExpr _4141_recursiveGen;
              DCOMP._IOwnership _4142_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4143_recIdents;
              RAST._IExpr _out1306;
              DCOMP._IOwnership _out1307;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1308;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1306, out _out1307, out _out1308);
              _4141_recursiveGen = _out1306;
              _4142_recOwned = _out1307;
              _4143_recIdents = _out1308;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4141_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1309;
              DCOMP._IOwnership _out1310;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1309, out _out1310);
              r = _out1309;
              resultingOwnership = _out1310;
              readIdents = _4143_recIdents;
            }
          } else if (_source155.is_Set) {
            DAST._IType _4144___mcc_h832 = _source155.dtor_element;
            {
              RAST._IExpr _4145_recursiveGen;
              DCOMP._IOwnership _4146_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4147_recIdents;
              RAST._IExpr _out1311;
              DCOMP._IOwnership _out1312;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1311, out _out1312, out _out1313);
              _4145_recursiveGen = _out1311;
              _4146_recOwned = _out1312;
              _4147_recIdents = _out1313;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4145_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1314;
              DCOMP._IOwnership _out1315;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1314, out _out1315);
              r = _out1314;
              resultingOwnership = _out1315;
              readIdents = _4147_recIdents;
            }
          } else if (_source155.is_Multiset) {
            DAST._IType _4148___mcc_h834 = _source155.dtor_element;
            {
              RAST._IExpr _4149_recursiveGen;
              DCOMP._IOwnership _4150_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4151_recIdents;
              RAST._IExpr _out1316;
              DCOMP._IOwnership _out1317;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1318;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1316, out _out1317, out _out1318);
              _4149_recursiveGen = _out1316;
              _4150_recOwned = _out1317;
              _4151_recIdents = _out1318;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4149_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1319;
              DCOMP._IOwnership _out1320;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1319, out _out1320);
              r = _out1319;
              resultingOwnership = _out1320;
              readIdents = _4151_recIdents;
            }
          } else if (_source155.is_Map) {
            DAST._IType _4152___mcc_h836 = _source155.dtor_key;
            DAST._IType _4153___mcc_h837 = _source155.dtor_value;
            {
              RAST._IExpr _4154_recursiveGen;
              DCOMP._IOwnership _4155_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4156_recIdents;
              RAST._IExpr _out1321;
              DCOMP._IOwnership _out1322;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1323;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1321, out _out1322, out _out1323);
              _4154_recursiveGen = _out1321;
              _4155_recOwned = _out1322;
              _4156_recIdents = _out1323;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4154_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1324;
              DCOMP._IOwnership _out1325;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1324, out _out1325);
              r = _out1324;
              resultingOwnership = _out1325;
              readIdents = _4156_recIdents;
            }
          } else if (_source155.is_SetBuilder) {
            DAST._IType _4157___mcc_h840 = _source155.dtor_element;
            {
              RAST._IExpr _4158_recursiveGen;
              DCOMP._IOwnership _4159_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4160_recIdents;
              RAST._IExpr _out1326;
              DCOMP._IOwnership _out1327;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1328;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1326, out _out1327, out _out1328);
              _4158_recursiveGen = _out1326;
              _4159_recOwned = _out1327;
              _4160_recIdents = _out1328;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4158_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1329;
              DCOMP._IOwnership _out1330;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1329, out _out1330);
              r = _out1329;
              resultingOwnership = _out1330;
              readIdents = _4160_recIdents;
            }
          } else if (_source155.is_MapBuilder) {
            DAST._IType _4161___mcc_h842 = _source155.dtor_key;
            DAST._IType _4162___mcc_h843 = _source155.dtor_value;
            {
              RAST._IExpr _4163_recursiveGen;
              DCOMP._IOwnership _4164_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4165_recIdents;
              RAST._IExpr _out1331;
              DCOMP._IOwnership _out1332;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1331, out _out1332, out _out1333);
              _4163_recursiveGen = _out1331;
              _4164_recOwned = _out1332;
              _4165_recIdents = _out1333;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4163_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1334;
              DCOMP._IOwnership _out1335;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1334, out _out1335);
              r = _out1334;
              resultingOwnership = _out1335;
              readIdents = _4165_recIdents;
            }
          } else if (_source155.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4166___mcc_h846 = _source155.dtor_args;
            DAST._IType _4167___mcc_h847 = _source155.dtor_result;
            {
              RAST._IExpr _4168_recursiveGen;
              DCOMP._IOwnership _4169_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4170_recIdents;
              RAST._IExpr _out1336;
              DCOMP._IOwnership _out1337;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1338;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1336, out _out1337, out _out1338);
              _4168_recursiveGen = _out1336;
              _4169_recOwned = _out1337;
              _4170_recIdents = _out1338;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4168_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1339;
              DCOMP._IOwnership _out1340;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1339, out _out1340);
              r = _out1339;
              resultingOwnership = _out1340;
              readIdents = _4170_recIdents;
            }
          } else if (_source155.is_Primitive) {
            DAST._IPrimitive _4171___mcc_h850 = _source155.dtor_Primitive_a0;
            {
              RAST._IExpr _4172_recursiveGen;
              DCOMP._IOwnership _4173_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4174_recIdents;
              RAST._IExpr _out1341;
              DCOMP._IOwnership _out1342;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1343;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1341, out _out1342, out _out1343);
              _4172_recursiveGen = _out1341;
              _4173_recOwned = _out1342;
              _4174_recIdents = _out1343;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4172_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1344;
              DCOMP._IOwnership _out1345;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1344, out _out1345);
              r = _out1344;
              resultingOwnership = _out1345;
              readIdents = _4174_recIdents;
            }
          } else if (_source155.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4175___mcc_h852 = _source155.dtor_Passthrough_a0;
            {
              RAST._IExpr _4176_recursiveGen;
              DCOMP._IOwnership _4177_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4178_recIdents;
              RAST._IExpr _out1346;
              DCOMP._IOwnership _out1347;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1348;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1346, out _out1347, out _out1348);
              _4176_recursiveGen = _out1346;
              _4177_recOwned = _out1347;
              _4178_recIdents = _out1348;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4176_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1349;
              DCOMP._IOwnership _out1350;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1349, out _out1350);
              r = _out1349;
              resultingOwnership = _out1350;
              readIdents = _4178_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4179___mcc_h854 = _source155.dtor_TypeArg_a0;
            {
              RAST._IExpr _4180_recursiveGen;
              DCOMP._IOwnership _4181_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4182_recIdents;
              RAST._IExpr _out1351;
              DCOMP._IOwnership _out1352;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1353;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1351, out _out1352, out _out1353);
              _4180_recursiveGen = _out1351;
              _4181_recOwned = _out1352;
              _4182_recIdents = _out1353;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4180_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1354;
              DCOMP._IOwnership _out1355;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1354, out _out1355);
              r = _out1354;
              resultingOwnership = _out1355;
              readIdents = _4182_recIdents;
            }
          }
        } else if (_source118.is_Primitive) {
          DAST._IPrimitive _4183___mcc_h856 = _source118.dtor_Primitive_a0;
          DAST._IPrimitive _source158 = _4183___mcc_h856;
          if (_source158.is_Int) {
            DAST._IType _source159 = _3003___mcc_h1;
            if (_source159.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4184___mcc_h860 = _source159.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4185___mcc_h861 = _source159.dtor_typeArgs;
              DAST._IResolvedType _4186___mcc_h862 = _source159.dtor_resolved;
              DAST._IResolvedType _source160 = _4186___mcc_h862;
              if (_source160.is_Datatype) {
                DAST._IDatatypeType _4187___mcc_h866 = _source160.dtor_datatypeType;
                {
                  RAST._IExpr _4188_recursiveGen;
                  DCOMP._IOwnership _4189_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4190_recIdents;
                  RAST._IExpr _out1356;
                  DCOMP._IOwnership _out1357;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1356, out _out1357, out _out1358);
                  _4188_recursiveGen = _out1356;
                  _4189_recOwned = _out1357;
                  _4190_recIdents = _out1358;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4188_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1359;
                  DCOMP._IOwnership _out1360;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1359, out _out1360);
                  r = _out1359;
                  resultingOwnership = _out1360;
                  readIdents = _4190_recIdents;
                }
              } else if (_source160.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4191___mcc_h868 = _source160.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4192___mcc_h869 = _source160.dtor_attributes;
                {
                  RAST._IExpr _4193_recursiveGen;
                  DCOMP._IOwnership _4194_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4195_recIdents;
                  RAST._IExpr _out1361;
                  DCOMP._IOwnership _out1362;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1363;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1361, out _out1362, out _out1363);
                  _4193_recursiveGen = _out1361;
                  _4194_recOwned = _out1362;
                  _4195_recIdents = _out1363;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4193_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1364;
                  DCOMP._IOwnership _out1365;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1364, out _out1365);
                  r = _out1364;
                  resultingOwnership = _out1365;
                  readIdents = _4195_recIdents;
                }
              } else {
                DAST._IType _4196___mcc_h872 = _source160.dtor_baseType;
                DAST._INewtypeRange _4197___mcc_h873 = _source160.dtor_range;
                bool _4198___mcc_h874 = _source160.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4199___mcc_h875 = _source160.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4200_attributes = _4199___mcc_h875;
                bool _4201_erase = _4198___mcc_h874;
                DAST._INewtypeRange _4202_range = _4197___mcc_h873;
                DAST._IType _4203_b = _4196___mcc_h872;
                {
                  if (object.Equals(_2997_fromTpe, _4203_b)) {
                    RAST._IExpr _4204_recursiveGen;
                    DCOMP._IOwnership _4205_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4206_recIdents;
                    RAST._IExpr _out1366;
                    DCOMP._IOwnership _out1367;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1368;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1366, out _out1367, out _out1368);
                    _4204_recursiveGen = _out1366;
                    _4205_recOwned = _out1367;
                    _4206_recIdents = _out1368;
                    Std.Wrappers._IOption<RAST._IType> _4207_potentialRhsType;
                    _4207_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4203_b, _4202_range);
                    Std.Wrappers._IOption<RAST._IType> _source161 = _4207_potentialRhsType;
                    if (_source161.is_None) {
                      if (_4201_erase) {
                        r = _4204_recursiveGen;
                      } else {
                        RAST._IType _4208_rhsType;
                        RAST._IType _out1369;
                        _out1369 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                        _4208_rhsType = _out1369;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4208_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4204_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1370;
                      DCOMP._IOwnership _out1371;
                      DCOMP.COMP.FromOwnership(r, _4205_recOwned, expectedOwnership, out _out1370, out _out1371);
                      r = _out1370;
                      resultingOwnership = _out1371;
                    } else {
                      RAST._IType _4209___mcc_h1258 = _source161.dtor_value;
                      RAST._IType _4210_v = _4209___mcc_h1258;
                      r = RAST.Expr.create_ConversionNum(_4210_v, _4204_recursiveGen);
                      RAST._IExpr _out1372;
                      DCOMP._IOwnership _out1373;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1372, out _out1373);
                      r = _out1372;
                      resultingOwnership = _out1373;
                    }
                    readIdents = _4206_recIdents;
                  } else {
                    RAST._IExpr _out1374;
                    DCOMP._IOwnership _out1375;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1376;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4203_b), _4203_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1374, out _out1375, out _out1376);
                    r = _out1374;
                    resultingOwnership = _out1375;
                    readIdents = _out1376;
                  }
                }
              }
            } else if (_source159.is_Nullable) {
              DAST._IType _4211___mcc_h880 = _source159.dtor_Nullable_a0;
              {
                RAST._IExpr _4212_recursiveGen;
                DCOMP._IOwnership _4213_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4214_recIdents;
                RAST._IExpr _out1377;
                DCOMP._IOwnership _out1378;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1377, out _out1378, out _out1379);
                _4212_recursiveGen = _out1377;
                _4213_recOwned = _out1378;
                _4214_recIdents = _out1379;
                Dafny.ISequence<Dafny.Rune> _4215_s;
                _4215_s = (_4212_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4213_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4215_s = Dafny.Sequence<Dafny.Rune>.Concat(_4215_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4215_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4215_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4215_s);
                RAST._IExpr _out1380;
                DCOMP._IOwnership _out1381;
                DCOMP.COMP.FromOwnership(r, _4213_recOwned, expectedOwnership, out _out1380, out _out1381);
                r = _out1380;
                resultingOwnership = _out1381;
                readIdents = _4214_recIdents;
              }
            } else if (_source159.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4216___mcc_h882 = _source159.dtor_Tuple_a0;
              {
                RAST._IExpr _4217_recursiveGen;
                DCOMP._IOwnership _4218_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4219_recIdents;
                RAST._IExpr _out1382;
                DCOMP._IOwnership _out1383;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1382, out _out1383, out _out1384);
                _4217_recursiveGen = _out1382;
                _4218_recOwned = _out1383;
                _4219_recIdents = _out1384;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4217_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1385;
                DCOMP._IOwnership _out1386;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1385, out _out1386);
                r = _out1385;
                resultingOwnership = _out1386;
                readIdents = _4219_recIdents;
              }
            } else if (_source159.is_Array) {
              DAST._IType _4220___mcc_h884 = _source159.dtor_element;
              BigInteger _4221___mcc_h885 = _source159.dtor_dims;
              {
                RAST._IExpr _4222_recursiveGen;
                DCOMP._IOwnership _4223_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4224_recIdents;
                RAST._IExpr _out1387;
                DCOMP._IOwnership _out1388;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1389;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1387, out _out1388, out _out1389);
                _4222_recursiveGen = _out1387;
                _4223_recOwned = _out1388;
                _4224_recIdents = _out1389;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4222_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1390;
                DCOMP._IOwnership _out1391;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1390, out _out1391);
                r = _out1390;
                resultingOwnership = _out1391;
                readIdents = _4224_recIdents;
              }
            } else if (_source159.is_Seq) {
              DAST._IType _4225___mcc_h888 = _source159.dtor_element;
              {
                RAST._IExpr _4226_recursiveGen;
                DCOMP._IOwnership _4227_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4228_recIdents;
                RAST._IExpr _out1392;
                DCOMP._IOwnership _out1393;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1394;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1392, out _out1393, out _out1394);
                _4226_recursiveGen = _out1392;
                _4227_recOwned = _out1393;
                _4228_recIdents = _out1394;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4226_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1395;
                DCOMP._IOwnership _out1396;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1395, out _out1396);
                r = _out1395;
                resultingOwnership = _out1396;
                readIdents = _4228_recIdents;
              }
            } else if (_source159.is_Set) {
              DAST._IType _4229___mcc_h890 = _source159.dtor_element;
              {
                RAST._IExpr _4230_recursiveGen;
                DCOMP._IOwnership _4231_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4232_recIdents;
                RAST._IExpr _out1397;
                DCOMP._IOwnership _out1398;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1399;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1397, out _out1398, out _out1399);
                _4230_recursiveGen = _out1397;
                _4231_recOwned = _out1398;
                _4232_recIdents = _out1399;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4230_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1400;
                DCOMP._IOwnership _out1401;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1400, out _out1401);
                r = _out1400;
                resultingOwnership = _out1401;
                readIdents = _4232_recIdents;
              }
            } else if (_source159.is_Multiset) {
              DAST._IType _4233___mcc_h892 = _source159.dtor_element;
              {
                RAST._IExpr _4234_recursiveGen;
                DCOMP._IOwnership _4235_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4236_recIdents;
                RAST._IExpr _out1402;
                DCOMP._IOwnership _out1403;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1402, out _out1403, out _out1404);
                _4234_recursiveGen = _out1402;
                _4235_recOwned = _out1403;
                _4236_recIdents = _out1404;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4234_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1405;
                DCOMP._IOwnership _out1406;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1405, out _out1406);
                r = _out1405;
                resultingOwnership = _out1406;
                readIdents = _4236_recIdents;
              }
            } else if (_source159.is_Map) {
              DAST._IType _4237___mcc_h894 = _source159.dtor_key;
              DAST._IType _4238___mcc_h895 = _source159.dtor_value;
              {
                RAST._IExpr _4239_recursiveGen;
                DCOMP._IOwnership _4240_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4241_recIdents;
                RAST._IExpr _out1407;
                DCOMP._IOwnership _out1408;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1409;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1407, out _out1408, out _out1409);
                _4239_recursiveGen = _out1407;
                _4240_recOwned = _out1408;
                _4241_recIdents = _out1409;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4239_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1410;
                DCOMP._IOwnership _out1411;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1410, out _out1411);
                r = _out1410;
                resultingOwnership = _out1411;
                readIdents = _4241_recIdents;
              }
            } else if (_source159.is_SetBuilder) {
              DAST._IType _4242___mcc_h898 = _source159.dtor_element;
              {
                RAST._IExpr _4243_recursiveGen;
                DCOMP._IOwnership _4244_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4245_recIdents;
                RAST._IExpr _out1412;
                DCOMP._IOwnership _out1413;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1414;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1412, out _out1413, out _out1414);
                _4243_recursiveGen = _out1412;
                _4244_recOwned = _out1413;
                _4245_recIdents = _out1414;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4243_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1415;
                DCOMP._IOwnership _out1416;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1415, out _out1416);
                r = _out1415;
                resultingOwnership = _out1416;
                readIdents = _4245_recIdents;
              }
            } else if (_source159.is_MapBuilder) {
              DAST._IType _4246___mcc_h900 = _source159.dtor_key;
              DAST._IType _4247___mcc_h901 = _source159.dtor_value;
              {
                RAST._IExpr _4248_recursiveGen;
                DCOMP._IOwnership _4249_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4250_recIdents;
                RAST._IExpr _out1417;
                DCOMP._IOwnership _out1418;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1419;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1417, out _out1418, out _out1419);
                _4248_recursiveGen = _out1417;
                _4249_recOwned = _out1418;
                _4250_recIdents = _out1419;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4248_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1420;
                DCOMP._IOwnership _out1421;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1420, out _out1421);
                r = _out1420;
                resultingOwnership = _out1421;
                readIdents = _4250_recIdents;
              }
            } else if (_source159.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4251___mcc_h904 = _source159.dtor_args;
              DAST._IType _4252___mcc_h905 = _source159.dtor_result;
              {
                RAST._IExpr _4253_recursiveGen;
                DCOMP._IOwnership _4254_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4255_recIdents;
                RAST._IExpr _out1422;
                DCOMP._IOwnership _out1423;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1422, out _out1423, out _out1424);
                _4253_recursiveGen = _out1422;
                _4254_recOwned = _out1423;
                _4255_recIdents = _out1424;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4253_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1425;
                DCOMP._IOwnership _out1426;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1425, out _out1426);
                r = _out1425;
                resultingOwnership = _out1426;
                readIdents = _4255_recIdents;
              }
            } else if (_source159.is_Primitive) {
              DAST._IPrimitive _4256___mcc_h908 = _source159.dtor_Primitive_a0;
              DAST._IPrimitive _source162 = _4256___mcc_h908;
              if (_source162.is_Int) {
                {
                  RAST._IExpr _4257_recursiveGen;
                  DCOMP._IOwnership _4258_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4259_recIdents;
                  RAST._IExpr _out1427;
                  DCOMP._IOwnership _out1428;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1429;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1427, out _out1428, out _out1429);
                  _4257_recursiveGen = _out1427;
                  _4258_recOwned = _out1428;
                  _4259_recIdents = _out1429;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4257_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1430;
                  DCOMP._IOwnership _out1431;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1430, out _out1431);
                  r = _out1430;
                  resultingOwnership = _out1431;
                  readIdents = _4259_recIdents;
                }
              } else if (_source162.is_Real) {
                {
                  RAST._IExpr _4260_recursiveGen;
                  DCOMP._IOwnership _4261___v78;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4262_recIdents;
                  RAST._IExpr _out1432;
                  DCOMP._IOwnership _out1433;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1434;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1432, out _out1433, out _out1434);
                  _4260_recursiveGen = _out1432;
                  _4261___v78 = _out1433;
                  _4262_recIdents = _out1434;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_4260_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out1435;
                  DCOMP._IOwnership _out1436;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1435, out _out1436);
                  r = _out1435;
                  resultingOwnership = _out1436;
                  readIdents = _4262_recIdents;
                }
              } else if (_source162.is_String) {
                {
                  RAST._IExpr _4263_recursiveGen;
                  DCOMP._IOwnership _4264_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4265_recIdents;
                  RAST._IExpr _out1437;
                  DCOMP._IOwnership _out1438;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1439;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1437, out _out1438, out _out1439);
                  _4263_recursiveGen = _out1437;
                  _4264_recOwned = _out1438;
                  _4265_recIdents = _out1439;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4263_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1440;
                  DCOMP._IOwnership _out1441;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1440, out _out1441);
                  r = _out1440;
                  resultingOwnership = _out1441;
                  readIdents = _4265_recIdents;
                }
              } else if (_source162.is_Bool) {
                {
                  RAST._IExpr _4266_recursiveGen;
                  DCOMP._IOwnership _4267_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4268_recIdents;
                  RAST._IExpr _out1442;
                  DCOMP._IOwnership _out1443;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1444;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1442, out _out1443, out _out1444);
                  _4266_recursiveGen = _out1442;
                  _4267_recOwned = _out1443;
                  _4268_recIdents = _out1444;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4266_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1445;
                  DCOMP._IOwnership _out1446;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1445, out _out1446);
                  r = _out1445;
                  resultingOwnership = _out1446;
                  readIdents = _4268_recIdents;
                }
              } else {
                {
                  RAST._IType _4269_rhsType;
                  RAST._IType _out1447;
                  _out1447 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                  _4269_rhsType = _out1447;
                  RAST._IExpr _4270_recursiveGen;
                  DCOMP._IOwnership _4271___v84;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4272_recIdents;
                  RAST._IExpr _out1448;
                  DCOMP._IOwnership _out1449;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1450;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1448, out _out1449, out _out1450);
                  _4270_recursiveGen = _out1448;
                  _4271___v84 = _out1449;
                  _4272_recIdents = _out1450;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_4270_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out1451;
                  DCOMP._IOwnership _out1452;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1451, out _out1452);
                  r = _out1451;
                  resultingOwnership = _out1452;
                  readIdents = _4272_recIdents;
                }
              }
            } else if (_source159.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4273___mcc_h910 = _source159.dtor_Passthrough_a0;
              {
                RAST._IType _4274_rhsType;
                RAST._IType _out1453;
                _out1453 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                _4274_rhsType = _out1453;
                RAST._IExpr _4275_recursiveGen;
                DCOMP._IOwnership _4276___v81;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4277_recIdents;
                RAST._IExpr _out1454;
                DCOMP._IOwnership _out1455;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1456;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1454, out _out1455, out _out1456);
                _4275_recursiveGen = _out1454;
                _4276___v81 = _out1455;
                _4277_recIdents = _out1456;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4274_rhsType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_4275_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out1457;
                DCOMP._IOwnership _out1458;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1457, out _out1458);
                r = _out1457;
                resultingOwnership = _out1458;
                readIdents = _4277_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4278___mcc_h912 = _source159.dtor_TypeArg_a0;
              {
                RAST._IExpr _4279_recursiveGen;
                DCOMP._IOwnership _4280_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4281_recIdents;
                RAST._IExpr _out1459;
                DCOMP._IOwnership _out1460;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1459, out _out1460, out _out1461);
                _4279_recursiveGen = _out1459;
                _4280_recOwned = _out1460;
                _4281_recIdents = _out1461;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4279_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1462;
                DCOMP._IOwnership _out1463;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1462, out _out1463);
                r = _out1462;
                resultingOwnership = _out1463;
                readIdents = _4281_recIdents;
              }
            }
          } else if (_source158.is_Real) {
            DAST._IType _source163 = _3003___mcc_h1;
            if (_source163.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4282___mcc_h914 = _source163.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4283___mcc_h915 = _source163.dtor_typeArgs;
              DAST._IResolvedType _4284___mcc_h916 = _source163.dtor_resolved;
              DAST._IResolvedType _source164 = _4284___mcc_h916;
              if (_source164.is_Datatype) {
                DAST._IDatatypeType _4285___mcc_h920 = _source164.dtor_datatypeType;
                {
                  RAST._IExpr _4286_recursiveGen;
                  DCOMP._IOwnership _4287_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4288_recIdents;
                  RAST._IExpr _out1464;
                  DCOMP._IOwnership _out1465;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1466;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1464, out _out1465, out _out1466);
                  _4286_recursiveGen = _out1464;
                  _4287_recOwned = _out1465;
                  _4288_recIdents = _out1466;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4286_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1467;
                  DCOMP._IOwnership _out1468;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1467, out _out1468);
                  r = _out1467;
                  resultingOwnership = _out1468;
                  readIdents = _4288_recIdents;
                }
              } else if (_source164.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4289___mcc_h922 = _source164.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4290___mcc_h923 = _source164.dtor_attributes;
                {
                  RAST._IExpr _4291_recursiveGen;
                  DCOMP._IOwnership _4292_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4293_recIdents;
                  RAST._IExpr _out1469;
                  DCOMP._IOwnership _out1470;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1471;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1469, out _out1470, out _out1471);
                  _4291_recursiveGen = _out1469;
                  _4292_recOwned = _out1470;
                  _4293_recIdents = _out1471;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4291_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1472;
                  DCOMP._IOwnership _out1473;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1472, out _out1473);
                  r = _out1472;
                  resultingOwnership = _out1473;
                  readIdents = _4293_recIdents;
                }
              } else {
                DAST._IType _4294___mcc_h926 = _source164.dtor_baseType;
                DAST._INewtypeRange _4295___mcc_h927 = _source164.dtor_range;
                bool _4296___mcc_h928 = _source164.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4297___mcc_h929 = _source164.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4298_attributes = _4297___mcc_h929;
                bool _4299_erase = _4296___mcc_h928;
                DAST._INewtypeRange _4300_range = _4295___mcc_h927;
                DAST._IType _4301_b = _4294___mcc_h926;
                {
                  if (object.Equals(_2997_fromTpe, _4301_b)) {
                    RAST._IExpr _4302_recursiveGen;
                    DCOMP._IOwnership _4303_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4304_recIdents;
                    RAST._IExpr _out1474;
                    DCOMP._IOwnership _out1475;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1476;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1474, out _out1475, out _out1476);
                    _4302_recursiveGen = _out1474;
                    _4303_recOwned = _out1475;
                    _4304_recIdents = _out1476;
                    Std.Wrappers._IOption<RAST._IType> _4305_potentialRhsType;
                    _4305_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4301_b, _4300_range);
                    Std.Wrappers._IOption<RAST._IType> _source165 = _4305_potentialRhsType;
                    if (_source165.is_None) {
                      if (_4299_erase) {
                        r = _4302_recursiveGen;
                      } else {
                        RAST._IType _4306_rhsType;
                        RAST._IType _out1477;
                        _out1477 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                        _4306_rhsType = _out1477;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4306_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4302_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1478;
                      DCOMP._IOwnership _out1479;
                      DCOMP.COMP.FromOwnership(r, _4303_recOwned, expectedOwnership, out _out1478, out _out1479);
                      r = _out1478;
                      resultingOwnership = _out1479;
                    } else {
                      RAST._IType _4307___mcc_h1259 = _source165.dtor_value;
                      RAST._IType _4308_v = _4307___mcc_h1259;
                      r = RAST.Expr.create_ConversionNum(_4308_v, _4302_recursiveGen);
                      RAST._IExpr _out1480;
                      DCOMP._IOwnership _out1481;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1480, out _out1481);
                      r = _out1480;
                      resultingOwnership = _out1481;
                    }
                    readIdents = _4304_recIdents;
                  } else {
                    RAST._IExpr _out1482;
                    DCOMP._IOwnership _out1483;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1484;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4301_b), _4301_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1482, out _out1483, out _out1484);
                    r = _out1482;
                    resultingOwnership = _out1483;
                    readIdents = _out1484;
                  }
                }
              }
            } else if (_source163.is_Nullable) {
              DAST._IType _4309___mcc_h934 = _source163.dtor_Nullable_a0;
              {
                RAST._IExpr _4310_recursiveGen;
                DCOMP._IOwnership _4311_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4312_recIdents;
                RAST._IExpr _out1485;
                DCOMP._IOwnership _out1486;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1487;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1485, out _out1486, out _out1487);
                _4310_recursiveGen = _out1485;
                _4311_recOwned = _out1486;
                _4312_recIdents = _out1487;
                Dafny.ISequence<Dafny.Rune> _4313_s;
                _4313_s = (_4310_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4311_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4313_s = Dafny.Sequence<Dafny.Rune>.Concat(_4313_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4313_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4313_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4313_s);
                RAST._IExpr _out1488;
                DCOMP._IOwnership _out1489;
                DCOMP.COMP.FromOwnership(r, _4311_recOwned, expectedOwnership, out _out1488, out _out1489);
                r = _out1488;
                resultingOwnership = _out1489;
                readIdents = _4312_recIdents;
              }
            } else if (_source163.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4314___mcc_h936 = _source163.dtor_Tuple_a0;
              {
                RAST._IExpr _4315_recursiveGen;
                DCOMP._IOwnership _4316_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4317_recIdents;
                RAST._IExpr _out1490;
                DCOMP._IOwnership _out1491;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1492;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1490, out _out1491, out _out1492);
                _4315_recursiveGen = _out1490;
                _4316_recOwned = _out1491;
                _4317_recIdents = _out1492;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4315_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1493;
                DCOMP._IOwnership _out1494;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1493, out _out1494);
                r = _out1493;
                resultingOwnership = _out1494;
                readIdents = _4317_recIdents;
              }
            } else if (_source163.is_Array) {
              DAST._IType _4318___mcc_h938 = _source163.dtor_element;
              BigInteger _4319___mcc_h939 = _source163.dtor_dims;
              {
                RAST._IExpr _4320_recursiveGen;
                DCOMP._IOwnership _4321_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4322_recIdents;
                RAST._IExpr _out1495;
                DCOMP._IOwnership _out1496;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1495, out _out1496, out _out1497);
                _4320_recursiveGen = _out1495;
                _4321_recOwned = _out1496;
                _4322_recIdents = _out1497;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4320_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1498;
                DCOMP._IOwnership _out1499;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1498, out _out1499);
                r = _out1498;
                resultingOwnership = _out1499;
                readIdents = _4322_recIdents;
              }
            } else if (_source163.is_Seq) {
              DAST._IType _4323___mcc_h942 = _source163.dtor_element;
              {
                RAST._IExpr _4324_recursiveGen;
                DCOMP._IOwnership _4325_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4326_recIdents;
                RAST._IExpr _out1500;
                DCOMP._IOwnership _out1501;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1502;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1500, out _out1501, out _out1502);
                _4324_recursiveGen = _out1500;
                _4325_recOwned = _out1501;
                _4326_recIdents = _out1502;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4324_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1503;
                DCOMP._IOwnership _out1504;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1503, out _out1504);
                r = _out1503;
                resultingOwnership = _out1504;
                readIdents = _4326_recIdents;
              }
            } else if (_source163.is_Set) {
              DAST._IType _4327___mcc_h944 = _source163.dtor_element;
              {
                RAST._IExpr _4328_recursiveGen;
                DCOMP._IOwnership _4329_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4330_recIdents;
                RAST._IExpr _out1505;
                DCOMP._IOwnership _out1506;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1507;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1505, out _out1506, out _out1507);
                _4328_recursiveGen = _out1505;
                _4329_recOwned = _out1506;
                _4330_recIdents = _out1507;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4328_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1508;
                DCOMP._IOwnership _out1509;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1508, out _out1509);
                r = _out1508;
                resultingOwnership = _out1509;
                readIdents = _4330_recIdents;
              }
            } else if (_source163.is_Multiset) {
              DAST._IType _4331___mcc_h946 = _source163.dtor_element;
              {
                RAST._IExpr _4332_recursiveGen;
                DCOMP._IOwnership _4333_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4334_recIdents;
                RAST._IExpr _out1510;
                DCOMP._IOwnership _out1511;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1512;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1510, out _out1511, out _out1512);
                _4332_recursiveGen = _out1510;
                _4333_recOwned = _out1511;
                _4334_recIdents = _out1512;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4332_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1513;
                DCOMP._IOwnership _out1514;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1513, out _out1514);
                r = _out1513;
                resultingOwnership = _out1514;
                readIdents = _4334_recIdents;
              }
            } else if (_source163.is_Map) {
              DAST._IType _4335___mcc_h948 = _source163.dtor_key;
              DAST._IType _4336___mcc_h949 = _source163.dtor_value;
              {
                RAST._IExpr _4337_recursiveGen;
                DCOMP._IOwnership _4338_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4339_recIdents;
                RAST._IExpr _out1515;
                DCOMP._IOwnership _out1516;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1515, out _out1516, out _out1517);
                _4337_recursiveGen = _out1515;
                _4338_recOwned = _out1516;
                _4339_recIdents = _out1517;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4337_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1518;
                DCOMP._IOwnership _out1519;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1518, out _out1519);
                r = _out1518;
                resultingOwnership = _out1519;
                readIdents = _4339_recIdents;
              }
            } else if (_source163.is_SetBuilder) {
              DAST._IType _4340___mcc_h952 = _source163.dtor_element;
              {
                RAST._IExpr _4341_recursiveGen;
                DCOMP._IOwnership _4342_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4343_recIdents;
                RAST._IExpr _out1520;
                DCOMP._IOwnership _out1521;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1522;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1520, out _out1521, out _out1522);
                _4341_recursiveGen = _out1520;
                _4342_recOwned = _out1521;
                _4343_recIdents = _out1522;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4341_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1523;
                DCOMP._IOwnership _out1524;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1523, out _out1524);
                r = _out1523;
                resultingOwnership = _out1524;
                readIdents = _4343_recIdents;
              }
            } else if (_source163.is_MapBuilder) {
              DAST._IType _4344___mcc_h954 = _source163.dtor_key;
              DAST._IType _4345___mcc_h955 = _source163.dtor_value;
              {
                RAST._IExpr _4346_recursiveGen;
                DCOMP._IOwnership _4347_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4348_recIdents;
                RAST._IExpr _out1525;
                DCOMP._IOwnership _out1526;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1527;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1525, out _out1526, out _out1527);
                _4346_recursiveGen = _out1525;
                _4347_recOwned = _out1526;
                _4348_recIdents = _out1527;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4346_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1528;
                DCOMP._IOwnership _out1529;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1528, out _out1529);
                r = _out1528;
                resultingOwnership = _out1529;
                readIdents = _4348_recIdents;
              }
            } else if (_source163.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4349___mcc_h958 = _source163.dtor_args;
              DAST._IType _4350___mcc_h959 = _source163.dtor_result;
              {
                RAST._IExpr _4351_recursiveGen;
                DCOMP._IOwnership _4352_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4353_recIdents;
                RAST._IExpr _out1530;
                DCOMP._IOwnership _out1531;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1532;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1530, out _out1531, out _out1532);
                _4351_recursiveGen = _out1530;
                _4352_recOwned = _out1531;
                _4353_recIdents = _out1532;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4351_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1533;
                DCOMP._IOwnership _out1534;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1533, out _out1534);
                r = _out1533;
                resultingOwnership = _out1534;
                readIdents = _4353_recIdents;
              }
            } else if (_source163.is_Primitive) {
              DAST._IPrimitive _4354___mcc_h962 = _source163.dtor_Primitive_a0;
              DAST._IPrimitive _source166 = _4354___mcc_h962;
              if (_source166.is_Int) {
                {
                  RAST._IExpr _4355_recursiveGen;
                  DCOMP._IOwnership _4356___v79;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4357_recIdents;
                  RAST._IExpr _out1535;
                  DCOMP._IOwnership _out1536;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out1535, out _out1536, out _out1537);
                  _4355_recursiveGen = _out1535;
                  _4356___v79 = _out1536;
                  _4357_recIdents = _out1537;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_4355_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out1538;
                  DCOMP._IOwnership _out1539;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1538, out _out1539);
                  r = _out1538;
                  resultingOwnership = _out1539;
                  readIdents = _4357_recIdents;
                }
              } else if (_source166.is_Real) {
                {
                  RAST._IExpr _4358_recursiveGen;
                  DCOMP._IOwnership _4359_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4360_recIdents;
                  RAST._IExpr _out1540;
                  DCOMP._IOwnership _out1541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1542;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1540, out _out1541, out _out1542);
                  _4358_recursiveGen = _out1540;
                  _4359_recOwned = _out1541;
                  _4360_recIdents = _out1542;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4358_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1543;
                  DCOMP._IOwnership _out1544;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1543, out _out1544);
                  r = _out1543;
                  resultingOwnership = _out1544;
                  readIdents = _4360_recIdents;
                }
              } else if (_source166.is_String) {
                {
                  RAST._IExpr _4361_recursiveGen;
                  DCOMP._IOwnership _4362_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4363_recIdents;
                  RAST._IExpr _out1545;
                  DCOMP._IOwnership _out1546;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1547;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1545, out _out1546, out _out1547);
                  _4361_recursiveGen = _out1545;
                  _4362_recOwned = _out1546;
                  _4363_recIdents = _out1547;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4361_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1548;
                  DCOMP._IOwnership _out1549;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1548, out _out1549);
                  r = _out1548;
                  resultingOwnership = _out1549;
                  readIdents = _4363_recIdents;
                }
              } else if (_source166.is_Bool) {
                {
                  RAST._IExpr _4364_recursiveGen;
                  DCOMP._IOwnership _4365_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4366_recIdents;
                  RAST._IExpr _out1550;
                  DCOMP._IOwnership _out1551;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1552;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1550, out _out1551, out _out1552);
                  _4364_recursiveGen = _out1550;
                  _4365_recOwned = _out1551;
                  _4366_recIdents = _out1552;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4364_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1553;
                  DCOMP._IOwnership _out1554;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1553, out _out1554);
                  r = _out1553;
                  resultingOwnership = _out1554;
                  readIdents = _4366_recIdents;
                }
              } else {
                {
                  RAST._IExpr _4367_recursiveGen;
                  DCOMP._IOwnership _4368_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4369_recIdents;
                  RAST._IExpr _out1555;
                  DCOMP._IOwnership _out1556;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1555, out _out1556, out _out1557);
                  _4367_recursiveGen = _out1555;
                  _4368_recOwned = _out1556;
                  _4369_recIdents = _out1557;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4367_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1558;
                  DCOMP._IOwnership _out1559;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1558, out _out1559);
                  r = _out1558;
                  resultingOwnership = _out1559;
                  readIdents = _4369_recIdents;
                }
              }
            } else if (_source163.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4370___mcc_h964 = _source163.dtor_Passthrough_a0;
              {
                RAST._IExpr _4371_recursiveGen;
                DCOMP._IOwnership _4372_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4373_recIdents;
                RAST._IExpr _out1560;
                DCOMP._IOwnership _out1561;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1562;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1560, out _out1561, out _out1562);
                _4371_recursiveGen = _out1560;
                _4372_recOwned = _out1561;
                _4373_recIdents = _out1562;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4371_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1563;
                DCOMP._IOwnership _out1564;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1563, out _out1564);
                r = _out1563;
                resultingOwnership = _out1564;
                readIdents = _4373_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4374___mcc_h966 = _source163.dtor_TypeArg_a0;
              {
                RAST._IExpr _4375_recursiveGen;
                DCOMP._IOwnership _4376_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4377_recIdents;
                RAST._IExpr _out1565;
                DCOMP._IOwnership _out1566;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1567;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1565, out _out1566, out _out1567);
                _4375_recursiveGen = _out1565;
                _4376_recOwned = _out1566;
                _4377_recIdents = _out1567;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4375_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1568;
                DCOMP._IOwnership _out1569;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1568, out _out1569);
                r = _out1568;
                resultingOwnership = _out1569;
                readIdents = _4377_recIdents;
              }
            }
          } else if (_source158.is_String) {
            DAST._IType _source167 = _3003___mcc_h1;
            if (_source167.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4378___mcc_h968 = _source167.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4379___mcc_h969 = _source167.dtor_typeArgs;
              DAST._IResolvedType _4380___mcc_h970 = _source167.dtor_resolved;
              DAST._IResolvedType _source168 = _4380___mcc_h970;
              if (_source168.is_Datatype) {
                DAST._IDatatypeType _4381___mcc_h974 = _source168.dtor_datatypeType;
                {
                  RAST._IExpr _4382_recursiveGen;
                  DCOMP._IOwnership _4383_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4384_recIdents;
                  RAST._IExpr _out1570;
                  DCOMP._IOwnership _out1571;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1572;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1570, out _out1571, out _out1572);
                  _4382_recursiveGen = _out1570;
                  _4383_recOwned = _out1571;
                  _4384_recIdents = _out1572;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4382_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1573;
                  DCOMP._IOwnership _out1574;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1573, out _out1574);
                  r = _out1573;
                  resultingOwnership = _out1574;
                  readIdents = _4384_recIdents;
                }
              } else if (_source168.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4385___mcc_h976 = _source168.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4386___mcc_h977 = _source168.dtor_attributes;
                {
                  RAST._IExpr _4387_recursiveGen;
                  DCOMP._IOwnership _4388_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4389_recIdents;
                  RAST._IExpr _out1575;
                  DCOMP._IOwnership _out1576;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1575, out _out1576, out _out1577);
                  _4387_recursiveGen = _out1575;
                  _4388_recOwned = _out1576;
                  _4389_recIdents = _out1577;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4387_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1578;
                  DCOMP._IOwnership _out1579;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1578, out _out1579);
                  r = _out1578;
                  resultingOwnership = _out1579;
                  readIdents = _4389_recIdents;
                }
              } else {
                DAST._IType _4390___mcc_h980 = _source168.dtor_baseType;
                DAST._INewtypeRange _4391___mcc_h981 = _source168.dtor_range;
                bool _4392___mcc_h982 = _source168.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4393___mcc_h983 = _source168.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4394_attributes = _4393___mcc_h983;
                bool _4395_erase = _4392___mcc_h982;
                DAST._INewtypeRange _4396_range = _4391___mcc_h981;
                DAST._IType _4397_b = _4390___mcc_h980;
                {
                  if (object.Equals(_2997_fromTpe, _4397_b)) {
                    RAST._IExpr _4398_recursiveGen;
                    DCOMP._IOwnership _4399_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4400_recIdents;
                    RAST._IExpr _out1580;
                    DCOMP._IOwnership _out1581;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1582;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1580, out _out1581, out _out1582);
                    _4398_recursiveGen = _out1580;
                    _4399_recOwned = _out1581;
                    _4400_recIdents = _out1582;
                    Std.Wrappers._IOption<RAST._IType> _4401_potentialRhsType;
                    _4401_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4397_b, _4396_range);
                    Std.Wrappers._IOption<RAST._IType> _source169 = _4401_potentialRhsType;
                    if (_source169.is_None) {
                      if (_4395_erase) {
                        r = _4398_recursiveGen;
                      } else {
                        RAST._IType _4402_rhsType;
                        RAST._IType _out1583;
                        _out1583 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                        _4402_rhsType = _out1583;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4402_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4398_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1584;
                      DCOMP._IOwnership _out1585;
                      DCOMP.COMP.FromOwnership(r, _4399_recOwned, expectedOwnership, out _out1584, out _out1585);
                      r = _out1584;
                      resultingOwnership = _out1585;
                    } else {
                      RAST._IType _4403___mcc_h1260 = _source169.dtor_value;
                      RAST._IType _4404_v = _4403___mcc_h1260;
                      r = RAST.Expr.create_ConversionNum(_4404_v, _4398_recursiveGen);
                      RAST._IExpr _out1586;
                      DCOMP._IOwnership _out1587;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1586, out _out1587);
                      r = _out1586;
                      resultingOwnership = _out1587;
                    }
                    readIdents = _4400_recIdents;
                  } else {
                    RAST._IExpr _out1588;
                    DCOMP._IOwnership _out1589;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1590;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4397_b), _4397_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1588, out _out1589, out _out1590);
                    r = _out1588;
                    resultingOwnership = _out1589;
                    readIdents = _out1590;
                  }
                }
              }
            } else if (_source167.is_Nullable) {
              DAST._IType _4405___mcc_h988 = _source167.dtor_Nullable_a0;
              {
                RAST._IExpr _4406_recursiveGen;
                DCOMP._IOwnership _4407_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4408_recIdents;
                RAST._IExpr _out1591;
                DCOMP._IOwnership _out1592;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1591, out _out1592, out _out1593);
                _4406_recursiveGen = _out1591;
                _4407_recOwned = _out1592;
                _4408_recIdents = _out1593;
                Dafny.ISequence<Dafny.Rune> _4409_s;
                _4409_s = (_4406_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4407_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4409_s = Dafny.Sequence<Dafny.Rune>.Concat(_4409_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4409_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4409_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4409_s);
                RAST._IExpr _out1594;
                DCOMP._IOwnership _out1595;
                DCOMP.COMP.FromOwnership(r, _4407_recOwned, expectedOwnership, out _out1594, out _out1595);
                r = _out1594;
                resultingOwnership = _out1595;
                readIdents = _4408_recIdents;
              }
            } else if (_source167.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4410___mcc_h990 = _source167.dtor_Tuple_a0;
              {
                RAST._IExpr _4411_recursiveGen;
                DCOMP._IOwnership _4412_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4413_recIdents;
                RAST._IExpr _out1596;
                DCOMP._IOwnership _out1597;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1598;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1596, out _out1597, out _out1598);
                _4411_recursiveGen = _out1596;
                _4412_recOwned = _out1597;
                _4413_recIdents = _out1598;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4411_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1599;
                DCOMP._IOwnership _out1600;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1599, out _out1600);
                r = _out1599;
                resultingOwnership = _out1600;
                readIdents = _4413_recIdents;
              }
            } else if (_source167.is_Array) {
              DAST._IType _4414___mcc_h992 = _source167.dtor_element;
              BigInteger _4415___mcc_h993 = _source167.dtor_dims;
              {
                RAST._IExpr _4416_recursiveGen;
                DCOMP._IOwnership _4417_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4418_recIdents;
                RAST._IExpr _out1601;
                DCOMP._IOwnership _out1602;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1603;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1601, out _out1602, out _out1603);
                _4416_recursiveGen = _out1601;
                _4417_recOwned = _out1602;
                _4418_recIdents = _out1603;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4416_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1604;
                DCOMP._IOwnership _out1605;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1604, out _out1605);
                r = _out1604;
                resultingOwnership = _out1605;
                readIdents = _4418_recIdents;
              }
            } else if (_source167.is_Seq) {
              DAST._IType _4419___mcc_h996 = _source167.dtor_element;
              {
                RAST._IExpr _4420_recursiveGen;
                DCOMP._IOwnership _4421_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4422_recIdents;
                RAST._IExpr _out1606;
                DCOMP._IOwnership _out1607;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1608;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1606, out _out1607, out _out1608);
                _4420_recursiveGen = _out1606;
                _4421_recOwned = _out1607;
                _4422_recIdents = _out1608;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4420_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1609;
                DCOMP._IOwnership _out1610;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1609, out _out1610);
                r = _out1609;
                resultingOwnership = _out1610;
                readIdents = _4422_recIdents;
              }
            } else if (_source167.is_Set) {
              DAST._IType _4423___mcc_h998 = _source167.dtor_element;
              {
                RAST._IExpr _4424_recursiveGen;
                DCOMP._IOwnership _4425_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4426_recIdents;
                RAST._IExpr _out1611;
                DCOMP._IOwnership _out1612;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1611, out _out1612, out _out1613);
                _4424_recursiveGen = _out1611;
                _4425_recOwned = _out1612;
                _4426_recIdents = _out1613;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4424_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1614;
                DCOMP._IOwnership _out1615;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1614, out _out1615);
                r = _out1614;
                resultingOwnership = _out1615;
                readIdents = _4426_recIdents;
              }
            } else if (_source167.is_Multiset) {
              DAST._IType _4427___mcc_h1000 = _source167.dtor_element;
              {
                RAST._IExpr _4428_recursiveGen;
                DCOMP._IOwnership _4429_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4430_recIdents;
                RAST._IExpr _out1616;
                DCOMP._IOwnership _out1617;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1618;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1616, out _out1617, out _out1618);
                _4428_recursiveGen = _out1616;
                _4429_recOwned = _out1617;
                _4430_recIdents = _out1618;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4428_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1619;
                DCOMP._IOwnership _out1620;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1619, out _out1620);
                r = _out1619;
                resultingOwnership = _out1620;
                readIdents = _4430_recIdents;
              }
            } else if (_source167.is_Map) {
              DAST._IType _4431___mcc_h1002 = _source167.dtor_key;
              DAST._IType _4432___mcc_h1003 = _source167.dtor_value;
              {
                RAST._IExpr _4433_recursiveGen;
                DCOMP._IOwnership _4434_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4435_recIdents;
                RAST._IExpr _out1621;
                DCOMP._IOwnership _out1622;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1623;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1621, out _out1622, out _out1623);
                _4433_recursiveGen = _out1621;
                _4434_recOwned = _out1622;
                _4435_recIdents = _out1623;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4433_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1624;
                DCOMP._IOwnership _out1625;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1624, out _out1625);
                r = _out1624;
                resultingOwnership = _out1625;
                readIdents = _4435_recIdents;
              }
            } else if (_source167.is_SetBuilder) {
              DAST._IType _4436___mcc_h1006 = _source167.dtor_element;
              {
                RAST._IExpr _4437_recursiveGen;
                DCOMP._IOwnership _4438_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4439_recIdents;
                RAST._IExpr _out1626;
                DCOMP._IOwnership _out1627;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1628;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1626, out _out1627, out _out1628);
                _4437_recursiveGen = _out1626;
                _4438_recOwned = _out1627;
                _4439_recIdents = _out1628;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4437_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1629;
                DCOMP._IOwnership _out1630;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1629, out _out1630);
                r = _out1629;
                resultingOwnership = _out1630;
                readIdents = _4439_recIdents;
              }
            } else if (_source167.is_MapBuilder) {
              DAST._IType _4440___mcc_h1008 = _source167.dtor_key;
              DAST._IType _4441___mcc_h1009 = _source167.dtor_value;
              {
                RAST._IExpr _4442_recursiveGen;
                DCOMP._IOwnership _4443_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4444_recIdents;
                RAST._IExpr _out1631;
                DCOMP._IOwnership _out1632;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1631, out _out1632, out _out1633);
                _4442_recursiveGen = _out1631;
                _4443_recOwned = _out1632;
                _4444_recIdents = _out1633;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4442_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1634;
                DCOMP._IOwnership _out1635;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1634, out _out1635);
                r = _out1634;
                resultingOwnership = _out1635;
                readIdents = _4444_recIdents;
              }
            } else if (_source167.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4445___mcc_h1012 = _source167.dtor_args;
              DAST._IType _4446___mcc_h1013 = _source167.dtor_result;
              {
                RAST._IExpr _4447_recursiveGen;
                DCOMP._IOwnership _4448_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4449_recIdents;
                RAST._IExpr _out1636;
                DCOMP._IOwnership _out1637;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1638;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1636, out _out1637, out _out1638);
                _4447_recursiveGen = _out1636;
                _4448_recOwned = _out1637;
                _4449_recIdents = _out1638;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4447_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1639;
                DCOMP._IOwnership _out1640;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1639, out _out1640);
                r = _out1639;
                resultingOwnership = _out1640;
                readIdents = _4449_recIdents;
              }
            } else if (_source167.is_Primitive) {
              DAST._IPrimitive _4450___mcc_h1016 = _source167.dtor_Primitive_a0;
              {
                RAST._IExpr _4451_recursiveGen;
                DCOMP._IOwnership _4452_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4453_recIdents;
                RAST._IExpr _out1641;
                DCOMP._IOwnership _out1642;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1643;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1641, out _out1642, out _out1643);
                _4451_recursiveGen = _out1641;
                _4452_recOwned = _out1642;
                _4453_recIdents = _out1643;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4451_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1644;
                DCOMP._IOwnership _out1645;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1644, out _out1645);
                r = _out1644;
                resultingOwnership = _out1645;
                readIdents = _4453_recIdents;
              }
            } else if (_source167.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4454___mcc_h1018 = _source167.dtor_Passthrough_a0;
              {
                RAST._IExpr _4455_recursiveGen;
                DCOMP._IOwnership _4456_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4457_recIdents;
                RAST._IExpr _out1646;
                DCOMP._IOwnership _out1647;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1648;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1646, out _out1647, out _out1648);
                _4455_recursiveGen = _out1646;
                _4456_recOwned = _out1647;
                _4457_recIdents = _out1648;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4455_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1649;
                DCOMP._IOwnership _out1650;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1649, out _out1650);
                r = _out1649;
                resultingOwnership = _out1650;
                readIdents = _4457_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4458___mcc_h1020 = _source167.dtor_TypeArg_a0;
              {
                RAST._IExpr _4459_recursiveGen;
                DCOMP._IOwnership _4460_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4461_recIdents;
                RAST._IExpr _out1651;
                DCOMP._IOwnership _out1652;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1651, out _out1652, out _out1653);
                _4459_recursiveGen = _out1651;
                _4460_recOwned = _out1652;
                _4461_recIdents = _out1653;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4459_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1654;
                DCOMP._IOwnership _out1655;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1654, out _out1655);
                r = _out1654;
                resultingOwnership = _out1655;
                readIdents = _4461_recIdents;
              }
            }
          } else if (_source158.is_Bool) {
            DAST._IType _source170 = _3003___mcc_h1;
            if (_source170.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4462___mcc_h1022 = _source170.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4463___mcc_h1023 = _source170.dtor_typeArgs;
              DAST._IResolvedType _4464___mcc_h1024 = _source170.dtor_resolved;
              DAST._IResolvedType _source171 = _4464___mcc_h1024;
              if (_source171.is_Datatype) {
                DAST._IDatatypeType _4465___mcc_h1028 = _source171.dtor_datatypeType;
                {
                  RAST._IExpr _4466_recursiveGen;
                  DCOMP._IOwnership _4467_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4468_recIdents;
                  RAST._IExpr _out1656;
                  DCOMP._IOwnership _out1657;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1658;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1656, out _out1657, out _out1658);
                  _4466_recursiveGen = _out1656;
                  _4467_recOwned = _out1657;
                  _4468_recIdents = _out1658;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4466_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1659;
                  DCOMP._IOwnership _out1660;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1659, out _out1660);
                  r = _out1659;
                  resultingOwnership = _out1660;
                  readIdents = _4468_recIdents;
                }
              } else if (_source171.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4469___mcc_h1030 = _source171.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4470___mcc_h1031 = _source171.dtor_attributes;
                {
                  RAST._IExpr _4471_recursiveGen;
                  DCOMP._IOwnership _4472_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4473_recIdents;
                  RAST._IExpr _out1661;
                  DCOMP._IOwnership _out1662;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1663;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1661, out _out1662, out _out1663);
                  _4471_recursiveGen = _out1661;
                  _4472_recOwned = _out1662;
                  _4473_recIdents = _out1663;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4471_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1664;
                  DCOMP._IOwnership _out1665;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1664, out _out1665);
                  r = _out1664;
                  resultingOwnership = _out1665;
                  readIdents = _4473_recIdents;
                }
              } else {
                DAST._IType _4474___mcc_h1034 = _source171.dtor_baseType;
                DAST._INewtypeRange _4475___mcc_h1035 = _source171.dtor_range;
                bool _4476___mcc_h1036 = _source171.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4477___mcc_h1037 = _source171.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4478_attributes = _4477___mcc_h1037;
                bool _4479_erase = _4476___mcc_h1036;
                DAST._INewtypeRange _4480_range = _4475___mcc_h1035;
                DAST._IType _4481_b = _4474___mcc_h1034;
                {
                  if (object.Equals(_2997_fromTpe, _4481_b)) {
                    RAST._IExpr _4482_recursiveGen;
                    DCOMP._IOwnership _4483_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4484_recIdents;
                    RAST._IExpr _out1666;
                    DCOMP._IOwnership _out1667;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1666, out _out1667, out _out1668);
                    _4482_recursiveGen = _out1666;
                    _4483_recOwned = _out1667;
                    _4484_recIdents = _out1668;
                    Std.Wrappers._IOption<RAST._IType> _4485_potentialRhsType;
                    _4485_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4481_b, _4480_range);
                    Std.Wrappers._IOption<RAST._IType> _source172 = _4485_potentialRhsType;
                    if (_source172.is_None) {
                      if (_4479_erase) {
                        r = _4482_recursiveGen;
                      } else {
                        RAST._IType _4486_rhsType;
                        RAST._IType _out1669;
                        _out1669 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                        _4486_rhsType = _out1669;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4486_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4482_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1670;
                      DCOMP._IOwnership _out1671;
                      DCOMP.COMP.FromOwnership(r, _4483_recOwned, expectedOwnership, out _out1670, out _out1671);
                      r = _out1670;
                      resultingOwnership = _out1671;
                    } else {
                      RAST._IType _4487___mcc_h1261 = _source172.dtor_value;
                      RAST._IType _4488_v = _4487___mcc_h1261;
                      r = RAST.Expr.create_ConversionNum(_4488_v, _4482_recursiveGen);
                      RAST._IExpr _out1672;
                      DCOMP._IOwnership _out1673;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1672, out _out1673);
                      r = _out1672;
                      resultingOwnership = _out1673;
                    }
                    readIdents = _4484_recIdents;
                  } else {
                    RAST._IExpr _out1674;
                    DCOMP._IOwnership _out1675;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1676;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4481_b), _4481_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1674, out _out1675, out _out1676);
                    r = _out1674;
                    resultingOwnership = _out1675;
                    readIdents = _out1676;
                  }
                }
              }
            } else if (_source170.is_Nullable) {
              DAST._IType _4489___mcc_h1042 = _source170.dtor_Nullable_a0;
              {
                RAST._IExpr _4490_recursiveGen;
                DCOMP._IOwnership _4491_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4492_recIdents;
                RAST._IExpr _out1677;
                DCOMP._IOwnership _out1678;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1677, out _out1678, out _out1679);
                _4490_recursiveGen = _out1677;
                _4491_recOwned = _out1678;
                _4492_recIdents = _out1679;
                Dafny.ISequence<Dafny.Rune> _4493_s;
                _4493_s = (_4490_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4491_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4493_s = Dafny.Sequence<Dafny.Rune>.Concat(_4493_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4493_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4493_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4493_s);
                RAST._IExpr _out1680;
                DCOMP._IOwnership _out1681;
                DCOMP.COMP.FromOwnership(r, _4491_recOwned, expectedOwnership, out _out1680, out _out1681);
                r = _out1680;
                resultingOwnership = _out1681;
                readIdents = _4492_recIdents;
              }
            } else if (_source170.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4494___mcc_h1044 = _source170.dtor_Tuple_a0;
              {
                RAST._IExpr _4495_recursiveGen;
                DCOMP._IOwnership _4496_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4497_recIdents;
                RAST._IExpr _out1682;
                DCOMP._IOwnership _out1683;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1684;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1682, out _out1683, out _out1684);
                _4495_recursiveGen = _out1682;
                _4496_recOwned = _out1683;
                _4497_recIdents = _out1684;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4495_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1685;
                DCOMP._IOwnership _out1686;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1685, out _out1686);
                r = _out1685;
                resultingOwnership = _out1686;
                readIdents = _4497_recIdents;
              }
            } else if (_source170.is_Array) {
              DAST._IType _4498___mcc_h1046 = _source170.dtor_element;
              BigInteger _4499___mcc_h1047 = _source170.dtor_dims;
              {
                RAST._IExpr _4500_recursiveGen;
                DCOMP._IOwnership _4501_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4502_recIdents;
                RAST._IExpr _out1687;
                DCOMP._IOwnership _out1688;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1689;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1687, out _out1688, out _out1689);
                _4500_recursiveGen = _out1687;
                _4501_recOwned = _out1688;
                _4502_recIdents = _out1689;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4500_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1690;
                DCOMP._IOwnership _out1691;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1690, out _out1691);
                r = _out1690;
                resultingOwnership = _out1691;
                readIdents = _4502_recIdents;
              }
            } else if (_source170.is_Seq) {
              DAST._IType _4503___mcc_h1050 = _source170.dtor_element;
              {
                RAST._IExpr _4504_recursiveGen;
                DCOMP._IOwnership _4505_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4506_recIdents;
                RAST._IExpr _out1692;
                DCOMP._IOwnership _out1693;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1694;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1692, out _out1693, out _out1694);
                _4504_recursiveGen = _out1692;
                _4505_recOwned = _out1693;
                _4506_recIdents = _out1694;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4504_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1695;
                DCOMP._IOwnership _out1696;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1695, out _out1696);
                r = _out1695;
                resultingOwnership = _out1696;
                readIdents = _4506_recIdents;
              }
            } else if (_source170.is_Set) {
              DAST._IType _4507___mcc_h1052 = _source170.dtor_element;
              {
                RAST._IExpr _4508_recursiveGen;
                DCOMP._IOwnership _4509_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4510_recIdents;
                RAST._IExpr _out1697;
                DCOMP._IOwnership _out1698;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1699;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1697, out _out1698, out _out1699);
                _4508_recursiveGen = _out1697;
                _4509_recOwned = _out1698;
                _4510_recIdents = _out1699;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4508_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1700;
                DCOMP._IOwnership _out1701;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1700, out _out1701);
                r = _out1700;
                resultingOwnership = _out1701;
                readIdents = _4510_recIdents;
              }
            } else if (_source170.is_Multiset) {
              DAST._IType _4511___mcc_h1054 = _source170.dtor_element;
              {
                RAST._IExpr _4512_recursiveGen;
                DCOMP._IOwnership _4513_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4514_recIdents;
                RAST._IExpr _out1702;
                DCOMP._IOwnership _out1703;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1704;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1702, out _out1703, out _out1704);
                _4512_recursiveGen = _out1702;
                _4513_recOwned = _out1703;
                _4514_recIdents = _out1704;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4512_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1705;
                DCOMP._IOwnership _out1706;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1705, out _out1706);
                r = _out1705;
                resultingOwnership = _out1706;
                readIdents = _4514_recIdents;
              }
            } else if (_source170.is_Map) {
              DAST._IType _4515___mcc_h1056 = _source170.dtor_key;
              DAST._IType _4516___mcc_h1057 = _source170.dtor_value;
              {
                RAST._IExpr _4517_recursiveGen;
                DCOMP._IOwnership _4518_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4519_recIdents;
                RAST._IExpr _out1707;
                DCOMP._IOwnership _out1708;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1709;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1707, out _out1708, out _out1709);
                _4517_recursiveGen = _out1707;
                _4518_recOwned = _out1708;
                _4519_recIdents = _out1709;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4517_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1710;
                DCOMP._IOwnership _out1711;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1710, out _out1711);
                r = _out1710;
                resultingOwnership = _out1711;
                readIdents = _4519_recIdents;
              }
            } else if (_source170.is_SetBuilder) {
              DAST._IType _4520___mcc_h1060 = _source170.dtor_element;
              {
                RAST._IExpr _4521_recursiveGen;
                DCOMP._IOwnership _4522_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4523_recIdents;
                RAST._IExpr _out1712;
                DCOMP._IOwnership _out1713;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1714;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1712, out _out1713, out _out1714);
                _4521_recursiveGen = _out1712;
                _4522_recOwned = _out1713;
                _4523_recIdents = _out1714;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4521_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1715;
                DCOMP._IOwnership _out1716;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1715, out _out1716);
                r = _out1715;
                resultingOwnership = _out1716;
                readIdents = _4523_recIdents;
              }
            } else if (_source170.is_MapBuilder) {
              DAST._IType _4524___mcc_h1062 = _source170.dtor_key;
              DAST._IType _4525___mcc_h1063 = _source170.dtor_value;
              {
                RAST._IExpr _4526_recursiveGen;
                DCOMP._IOwnership _4527_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4528_recIdents;
                RAST._IExpr _out1717;
                DCOMP._IOwnership _out1718;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1719;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1717, out _out1718, out _out1719);
                _4526_recursiveGen = _out1717;
                _4527_recOwned = _out1718;
                _4528_recIdents = _out1719;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4526_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1720;
                DCOMP._IOwnership _out1721;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1720, out _out1721);
                r = _out1720;
                resultingOwnership = _out1721;
                readIdents = _4528_recIdents;
              }
            } else if (_source170.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4529___mcc_h1066 = _source170.dtor_args;
              DAST._IType _4530___mcc_h1067 = _source170.dtor_result;
              {
                RAST._IExpr _4531_recursiveGen;
                DCOMP._IOwnership _4532_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4533_recIdents;
                RAST._IExpr _out1722;
                DCOMP._IOwnership _out1723;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1724;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1722, out _out1723, out _out1724);
                _4531_recursiveGen = _out1722;
                _4532_recOwned = _out1723;
                _4533_recIdents = _out1724;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4531_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1725;
                DCOMP._IOwnership _out1726;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1725, out _out1726);
                r = _out1725;
                resultingOwnership = _out1726;
                readIdents = _4533_recIdents;
              }
            } else if (_source170.is_Primitive) {
              DAST._IPrimitive _4534___mcc_h1070 = _source170.dtor_Primitive_a0;
              {
                RAST._IExpr _4535_recursiveGen;
                DCOMP._IOwnership _4536_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4537_recIdents;
                RAST._IExpr _out1727;
                DCOMP._IOwnership _out1728;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1729;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1727, out _out1728, out _out1729);
                _4535_recursiveGen = _out1727;
                _4536_recOwned = _out1728;
                _4537_recIdents = _out1729;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4535_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1730;
                DCOMP._IOwnership _out1731;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1730, out _out1731);
                r = _out1730;
                resultingOwnership = _out1731;
                readIdents = _4537_recIdents;
              }
            } else if (_source170.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4538___mcc_h1072 = _source170.dtor_Passthrough_a0;
              {
                RAST._IExpr _4539_recursiveGen;
                DCOMP._IOwnership _4540_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4541_recIdents;
                RAST._IExpr _out1732;
                DCOMP._IOwnership _out1733;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1734;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1732, out _out1733, out _out1734);
                _4539_recursiveGen = _out1732;
                _4540_recOwned = _out1733;
                _4541_recIdents = _out1734;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4539_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1735;
                DCOMP._IOwnership _out1736;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1735, out _out1736);
                r = _out1735;
                resultingOwnership = _out1736;
                readIdents = _4541_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4542___mcc_h1074 = _source170.dtor_TypeArg_a0;
              {
                RAST._IExpr _4543_recursiveGen;
                DCOMP._IOwnership _4544_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4545_recIdents;
                RAST._IExpr _out1737;
                DCOMP._IOwnership _out1738;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1739;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1737, out _out1738, out _out1739);
                _4543_recursiveGen = _out1737;
                _4544_recOwned = _out1738;
                _4545_recIdents = _out1739;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4543_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1740;
                DCOMP._IOwnership _out1741;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1740, out _out1741);
                r = _out1740;
                resultingOwnership = _out1741;
                readIdents = _4545_recIdents;
              }
            }
          } else {
            DAST._IType _source173 = _3003___mcc_h1;
            if (_source173.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4546___mcc_h1076 = _source173.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _4547___mcc_h1077 = _source173.dtor_typeArgs;
              DAST._IResolvedType _4548___mcc_h1078 = _source173.dtor_resolved;
              DAST._IResolvedType _source174 = _4548___mcc_h1078;
              if (_source174.is_Datatype) {
                DAST._IDatatypeType _4549___mcc_h1082 = _source174.dtor_datatypeType;
                {
                  RAST._IExpr _4550_recursiveGen;
                  DCOMP._IOwnership _4551_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4552_recIdents;
                  RAST._IExpr _out1742;
                  DCOMP._IOwnership _out1743;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1744;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1742, out _out1743, out _out1744);
                  _4550_recursiveGen = _out1742;
                  _4551_recOwned = _out1743;
                  _4552_recIdents = _out1744;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4550_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1745;
                  DCOMP._IOwnership _out1746;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1745, out _out1746);
                  r = _out1745;
                  resultingOwnership = _out1746;
                  readIdents = _4552_recIdents;
                }
              } else if (_source174.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4553___mcc_h1084 = _source174.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _4554___mcc_h1085 = _source174.dtor_attributes;
                {
                  RAST._IExpr _4555_recursiveGen;
                  DCOMP._IOwnership _4556_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4557_recIdents;
                  RAST._IExpr _out1747;
                  DCOMP._IOwnership _out1748;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1749;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1747, out _out1748, out _out1749);
                  _4555_recursiveGen = _out1747;
                  _4556_recOwned = _out1748;
                  _4557_recIdents = _out1749;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4555_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1750;
                  DCOMP._IOwnership _out1751;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1750, out _out1751);
                  r = _out1750;
                  resultingOwnership = _out1751;
                  readIdents = _4557_recIdents;
                }
              } else {
                DAST._IType _4558___mcc_h1088 = _source174.dtor_baseType;
                DAST._INewtypeRange _4559___mcc_h1089 = _source174.dtor_range;
                bool _4560___mcc_h1090 = _source174.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _4561___mcc_h1091 = _source174.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _4562_attributes = _4561___mcc_h1091;
                bool _4563_erase = _4560___mcc_h1090;
                DAST._INewtypeRange _4564_range = _4559___mcc_h1089;
                DAST._IType _4565_b = _4558___mcc_h1088;
                {
                  if (object.Equals(_2997_fromTpe, _4565_b)) {
                    RAST._IExpr _4566_recursiveGen;
                    DCOMP._IOwnership _4567_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4568_recIdents;
                    RAST._IExpr _out1752;
                    DCOMP._IOwnership _out1753;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1754;
                    DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1752, out _out1753, out _out1754);
                    _4566_recursiveGen = _out1752;
                    _4567_recOwned = _out1753;
                    _4568_recIdents = _out1754;
                    Std.Wrappers._IOption<RAST._IType> _4569_potentialRhsType;
                    _4569_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4565_b, _4564_range);
                    Std.Wrappers._IOption<RAST._IType> _source175 = _4569_potentialRhsType;
                    if (_source175.is_None) {
                      if (_4563_erase) {
                        r = _4566_recursiveGen;
                      } else {
                        RAST._IType _4570_rhsType;
                        RAST._IType _out1755;
                        _out1755 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                        _4570_rhsType = _out1755;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4570_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4566_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out1756;
                      DCOMP._IOwnership _out1757;
                      DCOMP.COMP.FromOwnership(r, _4567_recOwned, expectedOwnership, out _out1756, out _out1757);
                      r = _out1756;
                      resultingOwnership = _out1757;
                    } else {
                      RAST._IType _4571___mcc_h1262 = _source175.dtor_value;
                      RAST._IType _4572_v = _4571___mcc_h1262;
                      r = RAST.Expr.create_ConversionNum(_4572_v, _4566_recursiveGen);
                      RAST._IExpr _out1758;
                      DCOMP._IOwnership _out1759;
                      DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1758, out _out1759);
                      r = _out1758;
                      resultingOwnership = _out1759;
                    }
                    readIdents = _4568_recIdents;
                  } else {
                    RAST._IExpr _out1760;
                    DCOMP._IOwnership _out1761;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1762;
                    DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4565_b), _4565_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1760, out _out1761, out _out1762);
                    r = _out1760;
                    resultingOwnership = _out1761;
                    readIdents = _out1762;
                  }
                }
              }
            } else if (_source173.is_Nullable) {
              DAST._IType _4573___mcc_h1096 = _source173.dtor_Nullable_a0;
              {
                RAST._IExpr _4574_recursiveGen;
                DCOMP._IOwnership _4575_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4576_recIdents;
                RAST._IExpr _out1763;
                DCOMP._IOwnership _out1764;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1765;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1763, out _out1764, out _out1765);
                _4574_recursiveGen = _out1763;
                _4575_recOwned = _out1764;
                _4576_recIdents = _out1765;
                Dafny.ISequence<Dafny.Rune> _4577_s;
                _4577_s = (_4574_recursiveGen)._ToString(DCOMP.__default.IND);
                if (object.Equals(_4575_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                  _4577_s = Dafny.Sequence<Dafny.Rune>.Concat(_4577_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _4577_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4577_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_4577_s);
                RAST._IExpr _out1766;
                DCOMP._IOwnership _out1767;
                DCOMP.COMP.FromOwnership(r, _4575_recOwned, expectedOwnership, out _out1766, out _out1767);
                r = _out1766;
                resultingOwnership = _out1767;
                readIdents = _4576_recIdents;
              }
            } else if (_source173.is_Tuple) {
              Dafny.ISequence<DAST._IType> _4578___mcc_h1098 = _source173.dtor_Tuple_a0;
              {
                RAST._IExpr _4579_recursiveGen;
                DCOMP._IOwnership _4580_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4581_recIdents;
                RAST._IExpr _out1768;
                DCOMP._IOwnership _out1769;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1770;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1768, out _out1769, out _out1770);
                _4579_recursiveGen = _out1768;
                _4580_recOwned = _out1769;
                _4581_recIdents = _out1770;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4579_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1771;
                DCOMP._IOwnership _out1772;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1771, out _out1772);
                r = _out1771;
                resultingOwnership = _out1772;
                readIdents = _4581_recIdents;
              }
            } else if (_source173.is_Array) {
              DAST._IType _4582___mcc_h1100 = _source173.dtor_element;
              BigInteger _4583___mcc_h1101 = _source173.dtor_dims;
              {
                RAST._IExpr _4584_recursiveGen;
                DCOMP._IOwnership _4585_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4586_recIdents;
                RAST._IExpr _out1773;
                DCOMP._IOwnership _out1774;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1775;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1773, out _out1774, out _out1775);
                _4584_recursiveGen = _out1773;
                _4585_recOwned = _out1774;
                _4586_recIdents = _out1775;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4584_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1776;
                DCOMP._IOwnership _out1777;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1776, out _out1777);
                r = _out1776;
                resultingOwnership = _out1777;
                readIdents = _4586_recIdents;
              }
            } else if (_source173.is_Seq) {
              DAST._IType _4587___mcc_h1104 = _source173.dtor_element;
              {
                RAST._IExpr _4588_recursiveGen;
                DCOMP._IOwnership _4589_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4590_recIdents;
                RAST._IExpr _out1778;
                DCOMP._IOwnership _out1779;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1780;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1778, out _out1779, out _out1780);
                _4588_recursiveGen = _out1778;
                _4589_recOwned = _out1779;
                _4590_recIdents = _out1780;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4588_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1781;
                DCOMP._IOwnership _out1782;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1781, out _out1782);
                r = _out1781;
                resultingOwnership = _out1782;
                readIdents = _4590_recIdents;
              }
            } else if (_source173.is_Set) {
              DAST._IType _4591___mcc_h1106 = _source173.dtor_element;
              {
                RAST._IExpr _4592_recursiveGen;
                DCOMP._IOwnership _4593_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4594_recIdents;
                RAST._IExpr _out1783;
                DCOMP._IOwnership _out1784;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1785;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1783, out _out1784, out _out1785);
                _4592_recursiveGen = _out1783;
                _4593_recOwned = _out1784;
                _4594_recIdents = _out1785;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4592_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1786;
                DCOMP._IOwnership _out1787;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1786, out _out1787);
                r = _out1786;
                resultingOwnership = _out1787;
                readIdents = _4594_recIdents;
              }
            } else if (_source173.is_Multiset) {
              DAST._IType _4595___mcc_h1108 = _source173.dtor_element;
              {
                RAST._IExpr _4596_recursiveGen;
                DCOMP._IOwnership _4597_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4598_recIdents;
                RAST._IExpr _out1788;
                DCOMP._IOwnership _out1789;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1790;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1788, out _out1789, out _out1790);
                _4596_recursiveGen = _out1788;
                _4597_recOwned = _out1789;
                _4598_recIdents = _out1790;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4596_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1791;
                DCOMP._IOwnership _out1792;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1791, out _out1792);
                r = _out1791;
                resultingOwnership = _out1792;
                readIdents = _4598_recIdents;
              }
            } else if (_source173.is_Map) {
              DAST._IType _4599___mcc_h1110 = _source173.dtor_key;
              DAST._IType _4600___mcc_h1111 = _source173.dtor_value;
              {
                RAST._IExpr _4601_recursiveGen;
                DCOMP._IOwnership _4602_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4603_recIdents;
                RAST._IExpr _out1793;
                DCOMP._IOwnership _out1794;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1795;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1793, out _out1794, out _out1795);
                _4601_recursiveGen = _out1793;
                _4602_recOwned = _out1794;
                _4603_recIdents = _out1795;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4601_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1796;
                DCOMP._IOwnership _out1797;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1796, out _out1797);
                r = _out1796;
                resultingOwnership = _out1797;
                readIdents = _4603_recIdents;
              }
            } else if (_source173.is_SetBuilder) {
              DAST._IType _4604___mcc_h1114 = _source173.dtor_element;
              {
                RAST._IExpr _4605_recursiveGen;
                DCOMP._IOwnership _4606_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4607_recIdents;
                RAST._IExpr _out1798;
                DCOMP._IOwnership _out1799;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1800;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1798, out _out1799, out _out1800);
                _4605_recursiveGen = _out1798;
                _4606_recOwned = _out1799;
                _4607_recIdents = _out1800;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4605_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1801;
                DCOMP._IOwnership _out1802;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1801, out _out1802);
                r = _out1801;
                resultingOwnership = _out1802;
                readIdents = _4607_recIdents;
              }
            } else if (_source173.is_MapBuilder) {
              DAST._IType _4608___mcc_h1116 = _source173.dtor_key;
              DAST._IType _4609___mcc_h1117 = _source173.dtor_value;
              {
                RAST._IExpr _4610_recursiveGen;
                DCOMP._IOwnership _4611_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4612_recIdents;
                RAST._IExpr _out1803;
                DCOMP._IOwnership _out1804;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1805;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1803, out _out1804, out _out1805);
                _4610_recursiveGen = _out1803;
                _4611_recOwned = _out1804;
                _4612_recIdents = _out1805;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4610_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1806;
                DCOMP._IOwnership _out1807;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1806, out _out1807);
                r = _out1806;
                resultingOwnership = _out1807;
                readIdents = _4612_recIdents;
              }
            } else if (_source173.is_Arrow) {
              Dafny.ISequence<DAST._IType> _4613___mcc_h1120 = _source173.dtor_args;
              DAST._IType _4614___mcc_h1121 = _source173.dtor_result;
              {
                RAST._IExpr _4615_recursiveGen;
                DCOMP._IOwnership _4616_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4617_recIdents;
                RAST._IExpr _out1808;
                DCOMP._IOwnership _out1809;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1810;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1808, out _out1809, out _out1810);
                _4615_recursiveGen = _out1808;
                _4616_recOwned = _out1809;
                _4617_recIdents = _out1810;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4615_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1811;
                DCOMP._IOwnership _out1812;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1811, out _out1812);
                r = _out1811;
                resultingOwnership = _out1812;
                readIdents = _4617_recIdents;
              }
            } else if (_source173.is_Primitive) {
              DAST._IPrimitive _4618___mcc_h1124 = _source173.dtor_Primitive_a0;
              DAST._IPrimitive _source176 = _4618___mcc_h1124;
              if (_source176.is_Int) {
                {
                  RAST._IType _4619_rhsType;
                  RAST._IType _out1813;
                  _out1813 = DCOMP.COMP.GenType(_2997_fromTpe, true, false);
                  _4619_rhsType = _out1813;
                  RAST._IExpr _4620_recursiveGen;
                  DCOMP._IOwnership _4621___v85;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4622_recIdents;
                  RAST._IExpr _out1814;
                  DCOMP._IOwnership _out1815;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1816;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1814, out _out1815, out _out1816);
                  _4620_recursiveGen = _out1814;
                  _4621___v85 = _out1815;
                  _4622_recIdents = _out1816;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::BigInt::from("), (_4620_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out1817;
                  DCOMP._IOwnership _out1818;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1817, out _out1818);
                  r = _out1817;
                  resultingOwnership = _out1818;
                  readIdents = _4622_recIdents;
                }
              } else if (_source176.is_Real) {
                {
                  RAST._IExpr _4623_recursiveGen;
                  DCOMP._IOwnership _4624_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4625_recIdents;
                  RAST._IExpr _out1819;
                  DCOMP._IOwnership _out1820;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1821;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1819, out _out1820, out _out1821);
                  _4623_recursiveGen = _out1819;
                  _4624_recOwned = _out1820;
                  _4625_recIdents = _out1821;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4623_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1822;
                  DCOMP._IOwnership _out1823;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1822, out _out1823);
                  r = _out1822;
                  resultingOwnership = _out1823;
                  readIdents = _4625_recIdents;
                }
              } else if (_source176.is_String) {
                {
                  RAST._IExpr _4626_recursiveGen;
                  DCOMP._IOwnership _4627_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4628_recIdents;
                  RAST._IExpr _out1824;
                  DCOMP._IOwnership _out1825;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1826;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1824, out _out1825, out _out1826);
                  _4626_recursiveGen = _out1824;
                  _4627_recOwned = _out1825;
                  _4628_recIdents = _out1826;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4626_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1827;
                  DCOMP._IOwnership _out1828;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1827, out _out1828);
                  r = _out1827;
                  resultingOwnership = _out1828;
                  readIdents = _4628_recIdents;
                }
              } else if (_source176.is_Bool) {
                {
                  RAST._IExpr _4629_recursiveGen;
                  DCOMP._IOwnership _4630_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4631_recIdents;
                  RAST._IExpr _out1829;
                  DCOMP._IOwnership _out1830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1831;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1829, out _out1830, out _out1831);
                  _4629_recursiveGen = _out1829;
                  _4630_recOwned = _out1830;
                  _4631_recIdents = _out1831;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4629_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1832;
                  DCOMP._IOwnership _out1833;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1832, out _out1833);
                  r = _out1832;
                  resultingOwnership = _out1833;
                  readIdents = _4631_recIdents;
                }
              } else {
                {
                  RAST._IExpr _4632_recursiveGen;
                  DCOMP._IOwnership _4633_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4634_recIdents;
                  RAST._IExpr _out1834;
                  DCOMP._IOwnership _out1835;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1836;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1834, out _out1835, out _out1836);
                  _4632_recursiveGen = _out1834;
                  _4633_recOwned = _out1835;
                  _4634_recIdents = _out1836;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4632_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out1837;
                  DCOMP._IOwnership _out1838;
                  DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1837, out _out1838);
                  r = _out1837;
                  resultingOwnership = _out1838;
                  readIdents = _4634_recIdents;
                }
              }
            } else if (_source173.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _4635___mcc_h1126 = _source173.dtor_Passthrough_a0;
              {
                RAST._IExpr _4636_recursiveGen;
                DCOMP._IOwnership _4637_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4638_recIdents;
                RAST._IExpr _out1839;
                DCOMP._IOwnership _out1840;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1841;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1839, out _out1840, out _out1841);
                _4636_recursiveGen = _out1839;
                _4637_recOwned = _out1840;
                _4638_recIdents = _out1841;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4636_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1842;
                DCOMP._IOwnership _out1843;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1842, out _out1843);
                r = _out1842;
                resultingOwnership = _out1843;
                readIdents = _4638_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _4639___mcc_h1128 = _source173.dtor_TypeArg_a0;
              {
                RAST._IExpr _4640_recursiveGen;
                DCOMP._IOwnership _4641_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4642_recIdents;
                RAST._IExpr _out1844;
                DCOMP._IOwnership _out1845;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1846;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1844, out _out1845, out _out1846);
                _4640_recursiveGen = _out1844;
                _4641_recOwned = _out1845;
                _4642_recIdents = _out1846;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4640_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1847;
                DCOMP._IOwnership _out1848;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1847, out _out1848);
                r = _out1847;
                resultingOwnership = _out1848;
                readIdents = _4642_recIdents;
              }
            }
          }
        } else if (_source118.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _4643___mcc_h1130 = _source118.dtor_Passthrough_a0;
          DAST._IType _source177 = _3003___mcc_h1;
          if (_source177.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4644___mcc_h1134 = _source177.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4645___mcc_h1135 = _source177.dtor_typeArgs;
            DAST._IResolvedType _4646___mcc_h1136 = _source177.dtor_resolved;
            DAST._IResolvedType _source178 = _4646___mcc_h1136;
            if (_source178.is_Datatype) {
              DAST._IDatatypeType _4647___mcc_h1140 = _source178.dtor_datatypeType;
              {
                RAST._IExpr _4648_recursiveGen;
                DCOMP._IOwnership _4649_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4650_recIdents;
                RAST._IExpr _out1849;
                DCOMP._IOwnership _out1850;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1851;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1849, out _out1850, out _out1851);
                _4648_recursiveGen = _out1849;
                _4649_recOwned = _out1850;
                _4650_recIdents = _out1851;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4648_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1852;
                DCOMP._IOwnership _out1853;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1852, out _out1853);
                r = _out1852;
                resultingOwnership = _out1853;
                readIdents = _4650_recIdents;
              }
            } else if (_source178.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4651___mcc_h1142 = _source178.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4652___mcc_h1143 = _source178.dtor_attributes;
              {
                RAST._IExpr _4653_recursiveGen;
                DCOMP._IOwnership _4654_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4655_recIdents;
                RAST._IExpr _out1854;
                DCOMP._IOwnership _out1855;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1856;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1854, out _out1855, out _out1856);
                _4653_recursiveGen = _out1854;
                _4654_recOwned = _out1855;
                _4655_recIdents = _out1856;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4653_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1857;
                DCOMP._IOwnership _out1858;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1857, out _out1858);
                r = _out1857;
                resultingOwnership = _out1858;
                readIdents = _4655_recIdents;
              }
            } else {
              DAST._IType _4656___mcc_h1146 = _source178.dtor_baseType;
              DAST._INewtypeRange _4657___mcc_h1147 = _source178.dtor_range;
              bool _4658___mcc_h1148 = _source178.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4659___mcc_h1149 = _source178.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4660_attributes = _4659___mcc_h1149;
              bool _4661_erase = _4658___mcc_h1148;
              DAST._INewtypeRange _4662_range = _4657___mcc_h1147;
              DAST._IType _4663_b = _4656___mcc_h1146;
              {
                if (object.Equals(_2997_fromTpe, _4663_b)) {
                  RAST._IExpr _4664_recursiveGen;
                  DCOMP._IOwnership _4665_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4666_recIdents;
                  RAST._IExpr _out1859;
                  DCOMP._IOwnership _out1860;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1861;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1859, out _out1860, out _out1861);
                  _4664_recursiveGen = _out1859;
                  _4665_recOwned = _out1860;
                  _4666_recIdents = _out1861;
                  Std.Wrappers._IOption<RAST._IType> _4667_potentialRhsType;
                  _4667_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4663_b, _4662_range);
                  Std.Wrappers._IOption<RAST._IType> _source179 = _4667_potentialRhsType;
                  if (_source179.is_None) {
                    if (_4661_erase) {
                      r = _4664_recursiveGen;
                    } else {
                      RAST._IType _4668_rhsType;
                      RAST._IType _out1862;
                      _out1862 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _4668_rhsType = _out1862;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4668_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4664_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1863;
                    DCOMP._IOwnership _out1864;
                    DCOMP.COMP.FromOwnership(r, _4665_recOwned, expectedOwnership, out _out1863, out _out1864);
                    r = _out1863;
                    resultingOwnership = _out1864;
                  } else {
                    RAST._IType _4669___mcc_h1263 = _source179.dtor_value;
                    RAST._IType _4670_v = _4669___mcc_h1263;
                    r = RAST.Expr.create_ConversionNum(_4670_v, _4664_recursiveGen);
                    RAST._IExpr _out1865;
                    DCOMP._IOwnership _out1866;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1865, out _out1866);
                    r = _out1865;
                    resultingOwnership = _out1866;
                  }
                  readIdents = _4666_recIdents;
                } else {
                  RAST._IExpr _out1867;
                  DCOMP._IOwnership _out1868;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1869;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4663_b), _4663_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1867, out _out1868, out _out1869);
                  r = _out1867;
                  resultingOwnership = _out1868;
                  readIdents = _out1869;
                }
              }
            }
          } else if (_source177.is_Nullable) {
            DAST._IType _4671___mcc_h1154 = _source177.dtor_Nullable_a0;
            {
              RAST._IExpr _4672_recursiveGen;
              DCOMP._IOwnership _4673_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4674_recIdents;
              RAST._IExpr _out1870;
              DCOMP._IOwnership _out1871;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1872;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1870, out _out1871, out _out1872);
              _4672_recursiveGen = _out1870;
              _4673_recOwned = _out1871;
              _4674_recIdents = _out1872;
              Dafny.ISequence<Dafny.Rune> _4675_s;
              _4675_s = (_4672_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_4673_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _4675_s = Dafny.Sequence<Dafny.Rune>.Concat(_4675_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _4675_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4675_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_4675_s);
              RAST._IExpr _out1873;
              DCOMP._IOwnership _out1874;
              DCOMP.COMP.FromOwnership(r, _4673_recOwned, expectedOwnership, out _out1873, out _out1874);
              r = _out1873;
              resultingOwnership = _out1874;
              readIdents = _4674_recIdents;
            }
          } else if (_source177.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4676___mcc_h1156 = _source177.dtor_Tuple_a0;
            {
              RAST._IExpr _4677_recursiveGen;
              DCOMP._IOwnership _4678_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4679_recIdents;
              RAST._IExpr _out1875;
              DCOMP._IOwnership _out1876;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1877;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1875, out _out1876, out _out1877);
              _4677_recursiveGen = _out1875;
              _4678_recOwned = _out1876;
              _4679_recIdents = _out1877;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4677_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1878;
              DCOMP._IOwnership _out1879;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1878, out _out1879);
              r = _out1878;
              resultingOwnership = _out1879;
              readIdents = _4679_recIdents;
            }
          } else if (_source177.is_Array) {
            DAST._IType _4680___mcc_h1158 = _source177.dtor_element;
            BigInteger _4681___mcc_h1159 = _source177.dtor_dims;
            {
              RAST._IExpr _4682_recursiveGen;
              DCOMP._IOwnership _4683_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4684_recIdents;
              RAST._IExpr _out1880;
              DCOMP._IOwnership _out1881;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1882;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1880, out _out1881, out _out1882);
              _4682_recursiveGen = _out1880;
              _4683_recOwned = _out1881;
              _4684_recIdents = _out1882;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4682_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1883;
              DCOMP._IOwnership _out1884;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1883, out _out1884);
              r = _out1883;
              resultingOwnership = _out1884;
              readIdents = _4684_recIdents;
            }
          } else if (_source177.is_Seq) {
            DAST._IType _4685___mcc_h1162 = _source177.dtor_element;
            {
              RAST._IExpr _4686_recursiveGen;
              DCOMP._IOwnership _4687_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4688_recIdents;
              RAST._IExpr _out1885;
              DCOMP._IOwnership _out1886;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1887;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1885, out _out1886, out _out1887);
              _4686_recursiveGen = _out1885;
              _4687_recOwned = _out1886;
              _4688_recIdents = _out1887;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4686_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1888;
              DCOMP._IOwnership _out1889;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1888, out _out1889);
              r = _out1888;
              resultingOwnership = _out1889;
              readIdents = _4688_recIdents;
            }
          } else if (_source177.is_Set) {
            DAST._IType _4689___mcc_h1164 = _source177.dtor_element;
            {
              RAST._IExpr _4690_recursiveGen;
              DCOMP._IOwnership _4691_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4692_recIdents;
              RAST._IExpr _out1890;
              DCOMP._IOwnership _out1891;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1892;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1890, out _out1891, out _out1892);
              _4690_recursiveGen = _out1890;
              _4691_recOwned = _out1891;
              _4692_recIdents = _out1892;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4690_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1893;
              DCOMP._IOwnership _out1894;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1893, out _out1894);
              r = _out1893;
              resultingOwnership = _out1894;
              readIdents = _4692_recIdents;
            }
          } else if (_source177.is_Multiset) {
            DAST._IType _4693___mcc_h1166 = _source177.dtor_element;
            {
              RAST._IExpr _4694_recursiveGen;
              DCOMP._IOwnership _4695_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4696_recIdents;
              RAST._IExpr _out1895;
              DCOMP._IOwnership _out1896;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1897;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1895, out _out1896, out _out1897);
              _4694_recursiveGen = _out1895;
              _4695_recOwned = _out1896;
              _4696_recIdents = _out1897;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4694_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1898;
              DCOMP._IOwnership _out1899;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1898, out _out1899);
              r = _out1898;
              resultingOwnership = _out1899;
              readIdents = _4696_recIdents;
            }
          } else if (_source177.is_Map) {
            DAST._IType _4697___mcc_h1168 = _source177.dtor_key;
            DAST._IType _4698___mcc_h1169 = _source177.dtor_value;
            {
              RAST._IExpr _4699_recursiveGen;
              DCOMP._IOwnership _4700_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4701_recIdents;
              RAST._IExpr _out1900;
              DCOMP._IOwnership _out1901;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1902;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1900, out _out1901, out _out1902);
              _4699_recursiveGen = _out1900;
              _4700_recOwned = _out1901;
              _4701_recIdents = _out1902;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4699_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1903;
              DCOMP._IOwnership _out1904;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1903, out _out1904);
              r = _out1903;
              resultingOwnership = _out1904;
              readIdents = _4701_recIdents;
            }
          } else if (_source177.is_SetBuilder) {
            DAST._IType _4702___mcc_h1172 = _source177.dtor_element;
            {
              RAST._IExpr _4703_recursiveGen;
              DCOMP._IOwnership _4704_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4705_recIdents;
              RAST._IExpr _out1905;
              DCOMP._IOwnership _out1906;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1907;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1905, out _out1906, out _out1907);
              _4703_recursiveGen = _out1905;
              _4704_recOwned = _out1906;
              _4705_recIdents = _out1907;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4703_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1908;
              DCOMP._IOwnership _out1909;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1908, out _out1909);
              r = _out1908;
              resultingOwnership = _out1909;
              readIdents = _4705_recIdents;
            }
          } else if (_source177.is_MapBuilder) {
            DAST._IType _4706___mcc_h1174 = _source177.dtor_key;
            DAST._IType _4707___mcc_h1175 = _source177.dtor_value;
            {
              RAST._IExpr _4708_recursiveGen;
              DCOMP._IOwnership _4709_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4710_recIdents;
              RAST._IExpr _out1910;
              DCOMP._IOwnership _out1911;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1912;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1910, out _out1911, out _out1912);
              _4708_recursiveGen = _out1910;
              _4709_recOwned = _out1911;
              _4710_recIdents = _out1912;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4708_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1913;
              DCOMP._IOwnership _out1914;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1913, out _out1914);
              r = _out1913;
              resultingOwnership = _out1914;
              readIdents = _4710_recIdents;
            }
          } else if (_source177.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4711___mcc_h1178 = _source177.dtor_args;
            DAST._IType _4712___mcc_h1179 = _source177.dtor_result;
            {
              RAST._IExpr _4713_recursiveGen;
              DCOMP._IOwnership _4714_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4715_recIdents;
              RAST._IExpr _out1915;
              DCOMP._IOwnership _out1916;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1917;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1915, out _out1916, out _out1917);
              _4713_recursiveGen = _out1915;
              _4714_recOwned = _out1916;
              _4715_recIdents = _out1917;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4713_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1918;
              DCOMP._IOwnership _out1919;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1918, out _out1919);
              r = _out1918;
              resultingOwnership = _out1919;
              readIdents = _4715_recIdents;
            }
          } else if (_source177.is_Primitive) {
            DAST._IPrimitive _4716___mcc_h1182 = _source177.dtor_Primitive_a0;
            DAST._IPrimitive _source180 = _4716___mcc_h1182;
            if (_source180.is_Int) {
              {
                RAST._IType _4717_rhsType;
                RAST._IType _out1920;
                _out1920 = DCOMP.COMP.GenType(_2997_fromTpe, true, false);
                _4717_rhsType = _out1920;
                RAST._IExpr _4718_recursiveGen;
                DCOMP._IOwnership _4719___v83;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4720_recIdents;
                RAST._IExpr _out1921;
                DCOMP._IOwnership _out1922;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1923;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1921, out _out1922, out _out1923);
                _4718_recursiveGen = _out1921;
                _4719___v83 = _out1922;
                _4720_recIdents = _out1923;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_4718_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out1924;
                DCOMP._IOwnership _out1925;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1924, out _out1925);
                r = _out1924;
                resultingOwnership = _out1925;
                readIdents = _4720_recIdents;
              }
            } else if (_source180.is_Real) {
              {
                RAST._IExpr _4721_recursiveGen;
                DCOMP._IOwnership _4722_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4723_recIdents;
                RAST._IExpr _out1926;
                DCOMP._IOwnership _out1927;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1928;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1926, out _out1927, out _out1928);
                _4721_recursiveGen = _out1926;
                _4722_recOwned = _out1927;
                _4723_recIdents = _out1928;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4721_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1929;
                DCOMP._IOwnership _out1930;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1929, out _out1930);
                r = _out1929;
                resultingOwnership = _out1930;
                readIdents = _4723_recIdents;
              }
            } else if (_source180.is_String) {
              {
                RAST._IExpr _4724_recursiveGen;
                DCOMP._IOwnership _4725_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4726_recIdents;
                RAST._IExpr _out1931;
                DCOMP._IOwnership _out1932;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1933;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1931, out _out1932, out _out1933);
                _4724_recursiveGen = _out1931;
                _4725_recOwned = _out1932;
                _4726_recIdents = _out1933;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4724_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1934;
                DCOMP._IOwnership _out1935;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1934, out _out1935);
                r = _out1934;
                resultingOwnership = _out1935;
                readIdents = _4726_recIdents;
              }
            } else if (_source180.is_Bool) {
              {
                RAST._IExpr _4727_recursiveGen;
                DCOMP._IOwnership _4728_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4729_recIdents;
                RAST._IExpr _out1936;
                DCOMP._IOwnership _out1937;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1938;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1936, out _out1937, out _out1938);
                _4727_recursiveGen = _out1936;
                _4728_recOwned = _out1937;
                _4729_recIdents = _out1938;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4727_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1939;
                DCOMP._IOwnership _out1940;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1939, out _out1940);
                r = _out1939;
                resultingOwnership = _out1940;
                readIdents = _4729_recIdents;
              }
            } else {
              {
                RAST._IExpr _4730_recursiveGen;
                DCOMP._IOwnership _4731_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4732_recIdents;
                RAST._IExpr _out1941;
                DCOMP._IOwnership _out1942;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1943;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1941, out _out1942, out _out1943);
                _4730_recursiveGen = _out1941;
                _4731_recOwned = _out1942;
                _4732_recIdents = _out1943;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4730_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1944;
                DCOMP._IOwnership _out1945;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1944, out _out1945);
                r = _out1944;
                resultingOwnership = _out1945;
                readIdents = _4732_recIdents;
              }
            }
          } else if (_source177.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4733___mcc_h1184 = _source177.dtor_Passthrough_a0;
            {
              RAST._IExpr _4734_recursiveGen;
              DCOMP._IOwnership _4735___v88;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4736_recIdents;
              RAST._IExpr _out1946;
              DCOMP._IOwnership _out1947;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1948;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out1946, out _out1947, out _out1948);
              _4734_recursiveGen = _out1946;
              _4735___v88 = _out1947;
              _4736_recIdents = _out1948;
              RAST._IType _4737_toTpeGen;
              RAST._IType _out1949;
              _out1949 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
              _4737_toTpeGen = _out1949;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_4734_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_4737_toTpeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out1950;
              DCOMP._IOwnership _out1951;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1950, out _out1951);
              r = _out1950;
              resultingOwnership = _out1951;
              readIdents = _4736_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4738___mcc_h1186 = _source177.dtor_TypeArg_a0;
            {
              RAST._IExpr _4739_recursiveGen;
              DCOMP._IOwnership _4740_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4741_recIdents;
              RAST._IExpr _out1952;
              DCOMP._IOwnership _out1953;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1954;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1952, out _out1953, out _out1954);
              _4739_recursiveGen = _out1952;
              _4740_recOwned = _out1953;
              _4741_recIdents = _out1954;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4739_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1955;
              DCOMP._IOwnership _out1956;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1955, out _out1956);
              r = _out1955;
              resultingOwnership = _out1956;
              readIdents = _4741_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _4742___mcc_h1188 = _source118.dtor_TypeArg_a0;
          DAST._IType _source181 = _3003___mcc_h1;
          if (_source181.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4743___mcc_h1192 = _source181.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _4744___mcc_h1193 = _source181.dtor_typeArgs;
            DAST._IResolvedType _4745___mcc_h1194 = _source181.dtor_resolved;
            DAST._IResolvedType _source182 = _4745___mcc_h1194;
            if (_source182.is_Datatype) {
              DAST._IDatatypeType _4746___mcc_h1198 = _source182.dtor_datatypeType;
              {
                RAST._IExpr _4747_recursiveGen;
                DCOMP._IOwnership _4748_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4749_recIdents;
                RAST._IExpr _out1957;
                DCOMP._IOwnership _out1958;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1959;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1957, out _out1958, out _out1959);
                _4747_recursiveGen = _out1957;
                _4748_recOwned = _out1958;
                _4749_recIdents = _out1959;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4747_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1960;
                DCOMP._IOwnership _out1961;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1960, out _out1961);
                r = _out1960;
                resultingOwnership = _out1961;
                readIdents = _4749_recIdents;
              }
            } else if (_source182.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4750___mcc_h1200 = _source182.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _4751___mcc_h1201 = _source182.dtor_attributes;
              {
                RAST._IExpr _4752_recursiveGen;
                DCOMP._IOwnership _4753_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4754_recIdents;
                RAST._IExpr _out1962;
                DCOMP._IOwnership _out1963;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1964;
                DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1962, out _out1963, out _out1964);
                _4752_recursiveGen = _out1962;
                _4753_recOwned = _out1963;
                _4754_recIdents = _out1964;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4752_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out1965;
                DCOMP._IOwnership _out1966;
                DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1965, out _out1966);
                r = _out1965;
                resultingOwnership = _out1966;
                readIdents = _4754_recIdents;
              }
            } else {
              DAST._IType _4755___mcc_h1204 = _source182.dtor_baseType;
              DAST._INewtypeRange _4756___mcc_h1205 = _source182.dtor_range;
              bool _4757___mcc_h1206 = _source182.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _4758___mcc_h1207 = _source182.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _4759_attributes = _4758___mcc_h1207;
              bool _4760_erase = _4757___mcc_h1206;
              DAST._INewtypeRange _4761_range = _4756___mcc_h1205;
              DAST._IType _4762_b = _4755___mcc_h1204;
              {
                if (object.Equals(_2997_fromTpe, _4762_b)) {
                  RAST._IExpr _4763_recursiveGen;
                  DCOMP._IOwnership _4764_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4765_recIdents;
                  RAST._IExpr _out1967;
                  DCOMP._IOwnership _out1968;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1969;
                  DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1967, out _out1968, out _out1969);
                  _4763_recursiveGen = _out1967;
                  _4764_recOwned = _out1968;
                  _4765_recIdents = _out1969;
                  Std.Wrappers._IOption<RAST._IType> _4766_potentialRhsType;
                  _4766_potentialRhsType = DCOMP.COMP.NewtypeToRustType(_4762_b, _4761_range);
                  Std.Wrappers._IOption<RAST._IType> _source183 = _4766_potentialRhsType;
                  if (_source183.is_None) {
                    if (_4760_erase) {
                      r = _4763_recursiveGen;
                    } else {
                      RAST._IType _4767_rhsType;
                      RAST._IType _out1970;
                      _out1970 = DCOMP.COMP.GenType(_2998_toTpe, true, false);
                      _4767_rhsType = _out1970;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_4767_rhsType)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_4763_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out1971;
                    DCOMP._IOwnership _out1972;
                    DCOMP.COMP.FromOwnership(r, _4764_recOwned, expectedOwnership, out _out1971, out _out1972);
                    r = _out1971;
                    resultingOwnership = _out1972;
                  } else {
                    RAST._IType _4768___mcc_h1264 = _source183.dtor_value;
                    RAST._IType _4769_v = _4768___mcc_h1264;
                    r = RAST.Expr.create_ConversionNum(_4769_v, _4763_recursiveGen);
                    RAST._IExpr _out1973;
                    DCOMP._IOwnership _out1974;
                    DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1973, out _out1974);
                    r = _out1973;
                    resultingOwnership = _out1974;
                  }
                  readIdents = _4765_recIdents;
                } else {
                  RAST._IExpr _out1975;
                  DCOMP._IOwnership _out1976;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1977;
                  DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_2996_expr, _2997_fromTpe, _4762_b), _4762_b, _2998_toTpe), selfIdent, env, expectedOwnership, out _out1975, out _out1976, out _out1977);
                  r = _out1975;
                  resultingOwnership = _out1976;
                  readIdents = _out1977;
                }
              }
            }
          } else if (_source181.is_Nullable) {
            DAST._IType _4770___mcc_h1212 = _source181.dtor_Nullable_a0;
            {
              RAST._IExpr _4771_recursiveGen;
              DCOMP._IOwnership _4772_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4773_recIdents;
              RAST._IExpr _out1978;
              DCOMP._IOwnership _out1979;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1980;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1978, out _out1979, out _out1980);
              _4771_recursiveGen = _out1978;
              _4772_recOwned = _out1979;
              _4773_recIdents = _out1980;
              Dafny.ISequence<Dafny.Rune> _4774_s;
              _4774_s = (_4771_recursiveGen)._ToString(DCOMP.__default.IND);
              if (object.Equals(_4772_recOwned, DCOMP.Ownership.create_OwnershipOwned())) {
                _4774_s = Dafny.Sequence<Dafny.Rune>.Concat(_4774_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _4774_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _4774_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_4774_s);
              RAST._IExpr _out1981;
              DCOMP._IOwnership _out1982;
              DCOMP.COMP.FromOwnership(r, _4772_recOwned, expectedOwnership, out _out1981, out _out1982);
              r = _out1981;
              resultingOwnership = _out1982;
              readIdents = _4773_recIdents;
            }
          } else if (_source181.is_Tuple) {
            Dafny.ISequence<DAST._IType> _4775___mcc_h1214 = _source181.dtor_Tuple_a0;
            {
              RAST._IExpr _4776_recursiveGen;
              DCOMP._IOwnership _4777_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4778_recIdents;
              RAST._IExpr _out1983;
              DCOMP._IOwnership _out1984;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1985;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1983, out _out1984, out _out1985);
              _4776_recursiveGen = _out1983;
              _4777_recOwned = _out1984;
              _4778_recIdents = _out1985;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4776_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1986;
              DCOMP._IOwnership _out1987;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1986, out _out1987);
              r = _out1986;
              resultingOwnership = _out1987;
              readIdents = _4778_recIdents;
            }
          } else if (_source181.is_Array) {
            DAST._IType _4779___mcc_h1216 = _source181.dtor_element;
            BigInteger _4780___mcc_h1217 = _source181.dtor_dims;
            {
              RAST._IExpr _4781_recursiveGen;
              DCOMP._IOwnership _4782_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4783_recIdents;
              RAST._IExpr _out1988;
              DCOMP._IOwnership _out1989;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1990;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1988, out _out1989, out _out1990);
              _4781_recursiveGen = _out1988;
              _4782_recOwned = _out1989;
              _4783_recIdents = _out1990;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4781_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1991;
              DCOMP._IOwnership _out1992;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1991, out _out1992);
              r = _out1991;
              resultingOwnership = _out1992;
              readIdents = _4783_recIdents;
            }
          } else if (_source181.is_Seq) {
            DAST._IType _4784___mcc_h1220 = _source181.dtor_element;
            {
              RAST._IExpr _4785_recursiveGen;
              DCOMP._IOwnership _4786_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4787_recIdents;
              RAST._IExpr _out1993;
              DCOMP._IOwnership _out1994;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1995;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1993, out _out1994, out _out1995);
              _4785_recursiveGen = _out1993;
              _4786_recOwned = _out1994;
              _4787_recIdents = _out1995;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4785_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out1996;
              DCOMP._IOwnership _out1997;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out1996, out _out1997);
              r = _out1996;
              resultingOwnership = _out1997;
              readIdents = _4787_recIdents;
            }
          } else if (_source181.is_Set) {
            DAST._IType _4788___mcc_h1222 = _source181.dtor_element;
            {
              RAST._IExpr _4789_recursiveGen;
              DCOMP._IOwnership _4790_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4791_recIdents;
              RAST._IExpr _out1998;
              DCOMP._IOwnership _out1999;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2000;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out1998, out _out1999, out _out2000);
              _4789_recursiveGen = _out1998;
              _4790_recOwned = _out1999;
              _4791_recIdents = _out2000;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4789_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2001;
              DCOMP._IOwnership _out2002;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2001, out _out2002);
              r = _out2001;
              resultingOwnership = _out2002;
              readIdents = _4791_recIdents;
            }
          } else if (_source181.is_Multiset) {
            DAST._IType _4792___mcc_h1224 = _source181.dtor_element;
            {
              RAST._IExpr _4793_recursiveGen;
              DCOMP._IOwnership _4794_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4795_recIdents;
              RAST._IExpr _out2003;
              DCOMP._IOwnership _out2004;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2005;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out2003, out _out2004, out _out2005);
              _4793_recursiveGen = _out2003;
              _4794_recOwned = _out2004;
              _4795_recIdents = _out2005;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4793_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2006;
              DCOMP._IOwnership _out2007;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2006, out _out2007);
              r = _out2006;
              resultingOwnership = _out2007;
              readIdents = _4795_recIdents;
            }
          } else if (_source181.is_Map) {
            DAST._IType _4796___mcc_h1226 = _source181.dtor_key;
            DAST._IType _4797___mcc_h1227 = _source181.dtor_value;
            {
              RAST._IExpr _4798_recursiveGen;
              DCOMP._IOwnership _4799_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4800_recIdents;
              RAST._IExpr _out2008;
              DCOMP._IOwnership _out2009;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2010;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out2008, out _out2009, out _out2010);
              _4798_recursiveGen = _out2008;
              _4799_recOwned = _out2009;
              _4800_recIdents = _out2010;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4798_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2011;
              DCOMP._IOwnership _out2012;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2011, out _out2012);
              r = _out2011;
              resultingOwnership = _out2012;
              readIdents = _4800_recIdents;
            }
          } else if (_source181.is_SetBuilder) {
            DAST._IType _4801___mcc_h1230 = _source181.dtor_element;
            {
              RAST._IExpr _4802_recursiveGen;
              DCOMP._IOwnership _4803_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4804_recIdents;
              RAST._IExpr _out2013;
              DCOMP._IOwnership _out2014;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2015;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out2013, out _out2014, out _out2015);
              _4802_recursiveGen = _out2013;
              _4803_recOwned = _out2014;
              _4804_recIdents = _out2015;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4802_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2016;
              DCOMP._IOwnership _out2017;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2016, out _out2017);
              r = _out2016;
              resultingOwnership = _out2017;
              readIdents = _4804_recIdents;
            }
          } else if (_source181.is_MapBuilder) {
            DAST._IType _4805___mcc_h1232 = _source181.dtor_key;
            DAST._IType _4806___mcc_h1233 = _source181.dtor_value;
            {
              RAST._IExpr _4807_recursiveGen;
              DCOMP._IOwnership _4808_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4809_recIdents;
              RAST._IExpr _out2018;
              DCOMP._IOwnership _out2019;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2020;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out2018, out _out2019, out _out2020);
              _4807_recursiveGen = _out2018;
              _4808_recOwned = _out2019;
              _4809_recIdents = _out2020;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4807_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2021;
              DCOMP._IOwnership _out2022;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2021, out _out2022);
              r = _out2021;
              resultingOwnership = _out2022;
              readIdents = _4809_recIdents;
            }
          } else if (_source181.is_Arrow) {
            Dafny.ISequence<DAST._IType> _4810___mcc_h1236 = _source181.dtor_args;
            DAST._IType _4811___mcc_h1237 = _source181.dtor_result;
            {
              RAST._IExpr _4812_recursiveGen;
              DCOMP._IOwnership _4813_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4814_recIdents;
              RAST._IExpr _out2023;
              DCOMP._IOwnership _out2024;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2025;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out2023, out _out2024, out _out2025);
              _4812_recursiveGen = _out2023;
              _4813_recOwned = _out2024;
              _4814_recIdents = _out2025;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4812_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2026;
              DCOMP._IOwnership _out2027;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2026, out _out2027);
              r = _out2026;
              resultingOwnership = _out2027;
              readIdents = _4814_recIdents;
            }
          } else if (_source181.is_Primitive) {
            DAST._IPrimitive _4815___mcc_h1240 = _source181.dtor_Primitive_a0;
            {
              RAST._IExpr _4816_recursiveGen;
              DCOMP._IOwnership _4817_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4818_recIdents;
              RAST._IExpr _out2028;
              DCOMP._IOwnership _out2029;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2030;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out2028, out _out2029, out _out2030);
              _4816_recursiveGen = _out2028;
              _4817_recOwned = _out2029;
              _4818_recIdents = _out2030;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4816_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2031;
              DCOMP._IOwnership _out2032;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2031, out _out2032);
              r = _out2031;
              resultingOwnership = _out2032;
              readIdents = _4818_recIdents;
            }
          } else if (_source181.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _4819___mcc_h1242 = _source181.dtor_Passthrough_a0;
            {
              RAST._IExpr _4820_recursiveGen;
              DCOMP._IOwnership _4821_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4822_recIdents;
              RAST._IExpr _out2033;
              DCOMP._IOwnership _out2034;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2035;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out2033, out _out2034, out _out2035);
              _4820_recursiveGen = _out2033;
              _4821_recOwned = _out2034;
              _4822_recIdents = _out2035;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4820_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2036;
              DCOMP._IOwnership _out2037;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2036, out _out2037);
              r = _out2036;
              resultingOwnership = _out2037;
              readIdents = _4822_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4823___mcc_h1244 = _source181.dtor_TypeArg_a0;
            {
              RAST._IExpr _4824_recursiveGen;
              DCOMP._IOwnership _4825_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4826_recIdents;
              RAST._IExpr _out2038;
              DCOMP._IOwnership _out2039;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2040;
              DCOMP.COMP.GenExpr(_2996_expr, selfIdent, env, expectedOwnership, out _out2038, out _out2039, out _out2040);
              _4824_recursiveGen = _out2038;
              _4825_recOwned = _out2039;
              _4826_recIdents = _out2040;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_4824_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out2041;
              DCOMP._IOwnership _out2042;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2041, out _out2042);
              r = _out2041;
              resultingOwnership = _out2042;
              readIdents = _4826_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMP._IEnvironment env, DCOMP._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMP._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMP.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source184 = e;
      if (_source184.is_Literal) {
        DAST._ILiteral _4827___mcc_h0 = _source184.dtor_Literal_a0;
        RAST._IExpr _out2043;
        DCOMP._IOwnership _out2044;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2045;
        DCOMP.COMP.GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out2043, out _out2044, out _out2045);
        r = _out2043;
        resultingOwnership = _out2044;
        readIdents = _out2045;
      } else if (_source184.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _4828___mcc_h1 = _source184.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _4829_name = _4828___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMP.__default.escapeIdent(_4829_name));
          bool _4830_currentlyBorrowed;
          _4830_currentlyBorrowed = (env).IsBorrowed(_4829_name);
          if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
          } else if (_4830_currentlyBorrowed) {
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4829_name);
          return ;
        }
      } else if (_source184.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4831___mcc_h2 = _source184.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4832_path = _4831___mcc_h2;
        {
          RAST._IExpr _out2046;
          _out2046 = DCOMP.COMP.GenPathExpr(_4832_path);
          r = _out2046;
          RAST._IExpr _out2047;
          DCOMP._IOwnership _out2048;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2047, out _out2048);
          r = _out2047;
          resultingOwnership = _out2048;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source184.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _4833___mcc_h3 = _source184.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _4834_values = _4833___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _4835_s;
          _4835_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4836_i;
          _4836_i = BigInteger.Zero;
          while ((_4836_i) < (new BigInteger((_4834_values).Count))) {
            if ((_4836_i).Sign == 1) {
              _4835_s = Dafny.Sequence<Dafny.Rune>.Concat(_4835_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _4837_recursiveGen;
            DCOMP._IOwnership _4838___v91;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4839_recIdents;
            RAST._IExpr _out2049;
            DCOMP._IOwnership _out2050;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2051;
            DCOMP.COMP.GenExpr((_4834_values).Select(_4836_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2049, out _out2050, out _out2051);
            _4837_recursiveGen = _out2049;
            _4838___v91 = _out2050;
            _4839_recIdents = _out2051;
            _4835_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4835_s, (_4837_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4839_recIdents);
            _4836_i = (_4836_i) + (BigInteger.One);
          }
          _4835_s = Dafny.Sequence<Dafny.Rune>.Concat(_4835_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_4835_s);
          RAST._IExpr _out2052;
          DCOMP._IOwnership _out2053;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2052, out _out2053);
          r = _out2052;
          resultingOwnership = _out2053;
          return ;
        }
      } else if (_source184.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4840___mcc_h4 = _source184.dtor_path;
        Dafny.ISequence<DAST._IType> _4841___mcc_h5 = _source184.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _4842___mcc_h6 = _source184.dtor_args;
        Dafny.ISequence<DAST._IExpression> _4843_args = _4842___mcc_h6;
        Dafny.ISequence<DAST._IType> _4844_typeArgs = _4841___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _4845_path = _4840___mcc_h4;
        {
          RAST._IExpr _out2054;
          _out2054 = DCOMP.COMP.GenPathExpr(_4845_path);
          r = _out2054;
          if ((new BigInteger((_4844_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _4846_typeExprs;
            _4846_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi6 = new BigInteger((_4844_typeArgs).Count);
            for (BigInteger _4847_i = BigInteger.Zero; _4847_i < _hi6; _4847_i++) {
              RAST._IType _4848_typeExpr;
              RAST._IType _out2055;
              _out2055 = DCOMP.COMP.GenType((_4844_typeArgs).Select(_4847_i), false, false);
              _4848_typeExpr = _out2055;
              _4846_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_4846_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_4848_typeExpr));
            }
            r = (r).ApplyType(_4846_typeExprs);
          }
          r = (r).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _4849_arguments;
          _4849_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi7 = new BigInteger((_4843_args).Count);
          for (BigInteger _4850_i = BigInteger.Zero; _4850_i < _hi7; _4850_i++) {
            RAST._IExpr _4851_recursiveGen;
            DCOMP._IOwnership _4852___v92;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4853_recIdents;
            RAST._IExpr _out2056;
            DCOMP._IOwnership _out2057;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2058;
            DCOMP.COMP.GenExpr((_4843_args).Select(_4850_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2056, out _out2057, out _out2058);
            _4851_recursiveGen = _out2056;
            _4852___v92 = _out2057;
            _4853_recIdents = _out2058;
            _4849_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4849_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_4851_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4853_recIdents);
          }
          r = (r).Apply(_4849_arguments);
          r = RAST.__default.RcNew(r);
          RAST._IExpr _out2059;
          DCOMP._IOwnership _out2060;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2059, out _out2060);
          r = _out2059;
          resultingOwnership = _out2060;
          return ;
        }
      } else if (_source184.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _4854___mcc_h7 = _source184.dtor_dims;
        DAST._IType _4855___mcc_h8 = _source184.dtor_typ;
        DAST._IType _4856_typ = _4855___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _4857_dims = _4854___mcc_h7;
        {
          BigInteger _4858_i;
          _4858_i = (new BigInteger((_4857_dims).Count)) - (BigInteger.One);
          RAST._IType _4859_genTyp;
          RAST._IType _out2061;
          _out2061 = DCOMP.COMP.GenType(_4856_typ, false, false);
          _4859_genTyp = _out2061;
          Dafny.ISequence<Dafny.Rune> _4860_s;
          _4860_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_4859_genTyp)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_4858_i).Sign != -1) {
            RAST._IExpr _4861_recursiveGen;
            DCOMP._IOwnership _4862___v93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4863_recIdents;
            RAST._IExpr _out2062;
            DCOMP._IOwnership _out2063;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2064;
            DCOMP.COMP.GenExpr((_4857_dims).Select(_4858_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2062, out _out2063, out _out2064);
            _4861_recursiveGen = _out2062;
            _4862___v93 = _out2063;
            _4863_recIdents = _out2064;
            _4860_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _4860_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_4861_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4863_recIdents);
            _4858_i = (_4858_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_4860_s);
          RAST._IExpr _out2065;
          DCOMP._IOwnership _out2066;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2065, out _out2066);
          r = _out2065;
          resultingOwnership = _out2066;
          return ;
        }
      } else if (_source184.is_DatatypeValue) {
        DAST._IDatatypeType _4864___mcc_h9 = _source184.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _4865___mcc_h10 = _source184.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _4866___mcc_h11 = _source184.dtor_variant;
        bool _4867___mcc_h12 = _source184.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4868___mcc_h13 = _source184.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _4869_values = _4868___mcc_h13;
        bool _4870_isCo = _4867___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _4871_variant = _4866___mcc_h11;
        Dafny.ISequence<DAST._IType> _4872_typeArgs = _4865___mcc_h10;
        DAST._IDatatypeType _4873_datatypeType = _4864___mcc_h9;
        {
          RAST._IExpr _out2067;
          _out2067 = DCOMP.COMP.GenPathExpr((_4873_datatypeType).dtor_path);
          r = _out2067;
          Dafny.ISequence<RAST._IType> _4874_genTypeArgs;
          _4874_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi8 = new BigInteger((_4872_typeArgs).Count);
          for (BigInteger _4875_i = BigInteger.Zero; _4875_i < _hi8; _4875_i++) {
            RAST._IType _4876_typeExpr;
            RAST._IType _out2068;
            _out2068 = DCOMP.COMP.GenType((_4872_typeArgs).Select(_4875_i), false, false);
            _4876_typeExpr = _out2068;
            _4874_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_4874_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_4876_typeExpr));
          }
          if ((new BigInteger((_4872_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_4874_genTypeArgs);
          }
          r = (r).MSel(DCOMP.__default.escapeIdent(_4871_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _4877_assignments;
          _4877_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi9 = new BigInteger((_4869_values).Count);
          for (BigInteger _4878_i = BigInteger.Zero; _4878_i < _hi9; _4878_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs52 = (_4869_values).Select(_4878_i);
            Dafny.ISequence<Dafny.Rune> _4879_name = _let_tmp_rhs52.dtor__0;
            DAST._IExpression _4880_value = _let_tmp_rhs52.dtor__1;
            if (_4870_isCo) {
              RAST._IExpr _4881_recursiveGen;
              DCOMP._IOwnership _4882___v94;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4883_recIdents;
              RAST._IExpr _out2069;
              DCOMP._IOwnership _out2070;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2071;
              DCOMP.COMP.GenExpr(_4880_value, selfIdent, DCOMP.Environment.Empty(), DCOMP.Ownership.create_OwnershipOwned(), out _out2069, out _out2070, out _out2071);
              _4881_recursiveGen = _out2069;
              _4882___v94 = _out2070;
              _4883_recIdents = _out2071;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4883_recIdents);
              Dafny.ISequence<Dafny.Rune> _4884_allReadCloned;
              _4884_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_4883_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _4885_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_4883_recIdents).Elements) {
                  _4885_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_4883_recIdents).Contains(_4885_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2796)");
              after__ASSIGN_SUCH_THAT_2: ;
                _4884_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_4884_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_4885_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_4885_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _4883_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_4883_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4885_next));
              }
              Dafny.ISequence<Dafny.Rune> _4886_assigned;
              _4886_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _4884_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_4881_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _4877_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_4877_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_4879_name), RAST.Expr.create_RawExpr(_4886_assigned))));
            } else {
              RAST._IExpr _4887_recursiveGen;
              DCOMP._IOwnership _4888___v95;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4889_recIdents;
              RAST._IExpr _out2072;
              DCOMP._IOwnership _out2073;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2074;
              DCOMP.COMP.GenExpr(_4880_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2072, out _out2073, out _out2074);
              _4887_recursiveGen = _out2072;
              _4888___v95 = _out2073;
              _4889_recIdents = _out2074;
              _4877_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_4877_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(_4879_name), _4887_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4889_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _4877_assignments);
          if (DCOMP.COMP.IsRcWrapped((_4873_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out2075;
          DCOMP._IOwnership _out2076;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2075, out _out2076);
          r = _out2075;
          resultingOwnership = _out2076;
          return ;
        }
      } else if (_source184.is_Convert) {
        DAST._IExpression _4890___mcc_h14 = _source184.dtor_value;
        DAST._IType _4891___mcc_h15 = _source184.dtor_from;
        DAST._IType _4892___mcc_h16 = _source184.dtor_typ;
        {
          RAST._IExpr _out2077;
          DCOMP._IOwnership _out2078;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2079;
          DCOMP.COMP.GenExprConvert(e, selfIdent, env, expectedOwnership, out _out2077, out _out2078, out _out2079);
          r = _out2077;
          resultingOwnership = _out2078;
          readIdents = _out2079;
        }
      } else if (_source184.is_SeqConstruct) {
        DAST._IExpression _4893___mcc_h17 = _source184.dtor_length;
        DAST._IExpression _4894___mcc_h18 = _source184.dtor_elem;
        DAST._IExpression _4895_expr = _4894___mcc_h18;
        DAST._IExpression _4896_length = _4893___mcc_h17;
        {
          RAST._IExpr _4897_recursiveGen;
          DCOMP._IOwnership _4898___v99;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4899_recIdents;
          RAST._IExpr _out2080;
          DCOMP._IOwnership _out2081;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2082;
          DCOMP.COMP.GenExpr(_4895_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2080, out _out2081, out _out2082);
          _4897_recursiveGen = _out2080;
          _4898___v99 = _out2081;
          _4899_recIdents = _out2082;
          RAST._IExpr _4900_lengthGen;
          DCOMP._IOwnership _4901___v100;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4902_lengthIdents;
          RAST._IExpr _out2083;
          DCOMP._IOwnership _out2084;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2085;
          DCOMP.COMP.GenExpr(_4896_length, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2083, out _out2084, out _out2085);
          _4900_lengthGen = _out2083;
          _4901___v100 = _out2084;
          _4902_lengthIdents = _out2085;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_4897_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_4900_lengthGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4899_recIdents, _4902_lengthIdents);
          RAST._IExpr _out2086;
          DCOMP._IOwnership _out2087;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2086, out _out2087);
          r = _out2086;
          resultingOwnership = _out2087;
          return ;
        }
      } else if (_source184.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _4903___mcc_h19 = _source184.dtor_elements;
        DAST._IType _4904___mcc_h20 = _source184.dtor_typ;
        DAST._IType _4905_typ = _4904___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _4906_exprs = _4903___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _4907_genTpe;
          RAST._IType _out2088;
          _out2088 = DCOMP.COMP.GenType(_4905_typ, false, false);
          _4907_genTpe = _out2088;
          BigInteger _4908_i;
          _4908_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4909_args;
          _4909_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4908_i) < (new BigInteger((_4906_exprs).Count))) {
            RAST._IExpr _4910_recursiveGen;
            DCOMP._IOwnership _4911___v101;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4912_recIdents;
            RAST._IExpr _out2089;
            DCOMP._IOwnership _out2090;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2091;
            DCOMP.COMP.GenExpr((_4906_exprs).Select(_4908_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2089, out _out2090, out _out2091);
            _4910_recursiveGen = _out2089;
            _4911___v101 = _out2090;
            _4912_recIdents = _out2091;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4912_recIdents);
            _4909_args = Dafny.Sequence<RAST._IExpr>.Concat(_4909_args, Dafny.Sequence<RAST._IExpr>.FromElements(_4910_recursiveGen));
            _4908_i = (_4908_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_4909_args);
          if ((new BigInteger((_4909_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_4907_genTpe));
          }
          RAST._IExpr _out2092;
          DCOMP._IOwnership _out2093;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2092, out _out2093);
          r = _out2092;
          resultingOwnership = _out2093;
          return ;
        }
      } else if (_source184.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _4913___mcc_h21 = _source184.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4914_exprs = _4913___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _4915_generatedValues;
          _4915_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4916_i;
          _4916_i = BigInteger.Zero;
          while ((_4916_i) < (new BigInteger((_4914_exprs).Count))) {
            RAST._IExpr _4917_recursiveGen;
            DCOMP._IOwnership _4918___v102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4919_recIdents;
            RAST._IExpr _out2094;
            DCOMP._IOwnership _out2095;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2096;
            DCOMP.COMP.GenExpr((_4914_exprs).Select(_4916_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2094, out _out2095, out _out2096);
            _4917_recursiveGen = _out2094;
            _4918___v102 = _out2095;
            _4919_recIdents = _out2096;
            _4915_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4915_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4917_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4919_recIdents);
            _4916_i = (_4916_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_4915_generatedValues);
          RAST._IExpr _out2097;
          DCOMP._IOwnership _out2098;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2097, out _out2098);
          r = _out2097;
          resultingOwnership = _out2098;
          return ;
        }
      } else if (_source184.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _4920___mcc_h22 = _source184.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _4921_exprs = _4920___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _4922_generatedValues;
          _4922_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4923_i;
          _4923_i = BigInteger.Zero;
          while ((_4923_i) < (new BigInteger((_4921_exprs).Count))) {
            RAST._IExpr _4924_recursiveGen;
            DCOMP._IOwnership _4925___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4926_recIdents;
            RAST._IExpr _out2099;
            DCOMP._IOwnership _out2100;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2101;
            DCOMP.COMP.GenExpr((_4921_exprs).Select(_4923_i), selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2099, out _out2100, out _out2101);
            _4924_recursiveGen = _out2099;
            _4925___v103 = _out2100;
            _4926_recIdents = _out2101;
            _4922_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_4922_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_4924_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4926_recIdents);
            _4923_i = (_4923_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_4922_generatedValues);
          RAST._IExpr _out2102;
          DCOMP._IOwnership _out2103;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2102, out _out2103);
          r = _out2102;
          resultingOwnership = _out2103;
          return ;
        }
      } else if (_source184.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4927___mcc_h23 = _source184.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _4928_mapElems = _4927___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _4929_generatedValues;
          _4929_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _4930_i;
          _4930_i = BigInteger.Zero;
          while ((_4930_i) < (new BigInteger((_4928_mapElems).Count))) {
            RAST._IExpr _4931_recursiveGenKey;
            DCOMP._IOwnership _4932___v105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4933_recIdentsKey;
            RAST._IExpr _out2104;
            DCOMP._IOwnership _out2105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2106;
            DCOMP.COMP.GenExpr(((_4928_mapElems).Select(_4930_i)).dtor__0, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2104, out _out2105, out _out2106);
            _4931_recursiveGenKey = _out2104;
            _4932___v105 = _out2105;
            _4933_recIdentsKey = _out2106;
            RAST._IExpr _4934_recursiveGenValue;
            DCOMP._IOwnership _4935___v106;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4936_recIdentsValue;
            RAST._IExpr _out2107;
            DCOMP._IOwnership _out2108;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2109;
            DCOMP.COMP.GenExpr(((_4928_mapElems).Select(_4930_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2107, out _out2108, out _out2109);
            _4934_recursiveGenValue = _out2107;
            _4935___v106 = _out2108;
            _4936_recIdentsValue = _out2109;
            _4929_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_4929_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_4931_recursiveGenKey, _4934_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _4933_recIdentsKey), _4936_recIdentsValue);
            _4930_i = (_4930_i) + (BigInteger.One);
          }
          _4930_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _4937_arguments;
          _4937_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_4930_i) < (new BigInteger((_4929_generatedValues).Count))) {
            RAST._IExpr _4938_genKey;
            _4938_genKey = ((_4929_generatedValues).Select(_4930_i)).dtor__0;
            RAST._IExpr _4939_genValue;
            _4939_genValue = ((_4929_generatedValues).Select(_4930_i)).dtor__1;
            _4937_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_4937_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _4938_genKey, _4939_genValue, DAST.Format.BinOpFormat.create_NoFormat())));
            _4930_i = (_4930_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_4937_arguments);
          RAST._IExpr _out2110;
          DCOMP._IOwnership _out2111;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2110, out _out2111);
          r = _out2110;
          resultingOwnership = _out2111;
          return ;
        }
      } else if (_source184.is_MapBuilder) {
        DAST._IType _4940___mcc_h24 = _source184.dtor_keyType;
        DAST._IType _4941___mcc_h25 = _source184.dtor_valueType;
        DAST._IType _4942_valueType = _4941___mcc_h25;
        DAST._IType _4943_keyType = _4940___mcc_h24;
        {
          RAST._IType _4944_kType;
          RAST._IType _out2112;
          _out2112 = DCOMP.COMP.GenType(_4943_keyType, false, false);
          _4944_kType = _out2112;
          RAST._IType _4945_vType;
          RAST._IType _out2113;
          _out2113 = DCOMP.COMP.GenType(_4942_valueType, false, false);
          _4945_vType = _out2113;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_4944_kType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_4945_vType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2114;
          DCOMP._IOwnership _out2115;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2114, out _out2115);
          r = _out2114;
          resultingOwnership = _out2115;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source184.is_SeqUpdate) {
        DAST._IExpression _4946___mcc_h26 = _source184.dtor_expr;
        DAST._IExpression _4947___mcc_h27 = _source184.dtor_indexExpr;
        DAST._IExpression _4948___mcc_h28 = _source184.dtor_value;
        DAST._IExpression _4949_value = _4948___mcc_h28;
        DAST._IExpression _4950_index = _4947___mcc_h27;
        DAST._IExpression _4951_expr = _4946___mcc_h26;
        {
          RAST._IExpr _4952_exprR;
          DCOMP._IOwnership _4953___v107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4954_exprIdents;
          RAST._IExpr _out2116;
          DCOMP._IOwnership _out2117;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2118;
          DCOMP.COMP.GenExpr(_4951_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2116, out _out2117, out _out2118);
          _4952_exprR = _out2116;
          _4953___v107 = _out2117;
          _4954_exprIdents = _out2118;
          RAST._IExpr _4955_indexR;
          DCOMP._IOwnership _4956_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4957_indexIdents;
          RAST._IExpr _out2119;
          DCOMP._IOwnership _out2120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2121;
          DCOMP.COMP.GenExpr(_4950_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2119, out _out2120, out _out2121);
          _4955_indexR = _out2119;
          _4956_indexOwnership = _out2120;
          _4957_indexIdents = _out2121;
          RAST._IExpr _4958_valueR;
          DCOMP._IOwnership _4959_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4960_valueIdents;
          RAST._IExpr _out2122;
          DCOMP._IOwnership _out2123;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2124;
          DCOMP.COMP.GenExpr(_4949_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2122, out _out2123, out _out2124);
          _4958_valueR = _out2122;
          _4959_valueOwnership = _out2123;
          _4960_valueIdents = _out2124;
          r = ((_4952_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4955_indexR, _4958_valueR));
          RAST._IExpr _out2125;
          DCOMP._IOwnership _out2126;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2125, out _out2126);
          r = _out2125;
          resultingOwnership = _out2126;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4954_exprIdents, _4957_indexIdents), _4960_valueIdents);
          return ;
        }
      } else if (_source184.is_MapUpdate) {
        DAST._IExpression _4961___mcc_h29 = _source184.dtor_expr;
        DAST._IExpression _4962___mcc_h30 = _source184.dtor_indexExpr;
        DAST._IExpression _4963___mcc_h31 = _source184.dtor_value;
        DAST._IExpression _4964_value = _4963___mcc_h31;
        DAST._IExpression _4965_index = _4962___mcc_h30;
        DAST._IExpression _4966_expr = _4961___mcc_h29;
        {
          RAST._IExpr _4967_exprR;
          DCOMP._IOwnership _4968___v108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4969_exprIdents;
          RAST._IExpr _out2127;
          DCOMP._IOwnership _out2128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2129;
          DCOMP.COMP.GenExpr(_4966_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2127, out _out2128, out _out2129);
          _4967_exprR = _out2127;
          _4968___v108 = _out2128;
          _4969_exprIdents = _out2129;
          RAST._IExpr _4970_indexR;
          DCOMP._IOwnership _4971_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4972_indexIdents;
          RAST._IExpr _out2130;
          DCOMP._IOwnership _out2131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2132;
          DCOMP.COMP.GenExpr(_4965_index, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2130, out _out2131, out _out2132);
          _4970_indexR = _out2130;
          _4971_indexOwnership = _out2131;
          _4972_indexIdents = _out2132;
          RAST._IExpr _4973_valueR;
          DCOMP._IOwnership _4974_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4975_valueIdents;
          RAST._IExpr _out2133;
          DCOMP._IOwnership _out2134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2135;
          DCOMP.COMP.GenExpr(_4964_value, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2133, out _out2134, out _out2135);
          _4973_valueR = _out2133;
          _4974_valueOwnership = _out2134;
          _4975_valueIdents = _out2135;
          r = ((_4967_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_4970_indexR, _4973_valueR));
          RAST._IExpr _out2136;
          DCOMP._IOwnership _out2137;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2136, out _out2137);
          r = _out2136;
          resultingOwnership = _out2137;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4969_exprIdents, _4972_indexIdents), _4975_valueIdents);
          return ;
        }
      } else if (_source184.is_SetBuilder) {
        DAST._IType _4976___mcc_h32 = _source184.dtor_elemType;
        DAST._IType _4977_elemType = _4976___mcc_h32;
        {
          RAST._IType _4978_eType;
          RAST._IType _out2138;
          _out2138 = DCOMP.COMP.GenType(_4977_elemType, false, false);
          _4978_eType = _out2138;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_4978_eType)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out2139;
          DCOMP._IOwnership _out2140;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2139, out _out2140);
          r = _out2139;
          resultingOwnership = _out2140;
          return ;
        }
      } else if (_source184.is_ToMultiset) {
        DAST._IExpression _4979___mcc_h33 = _source184.dtor_ToMultiset_a0;
        DAST._IExpression _4980_expr = _4979___mcc_h33;
        {
          RAST._IExpr _4981_recursiveGen;
          DCOMP._IOwnership _4982___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4983_recIdents;
          RAST._IExpr _out2141;
          DCOMP._IOwnership _out2142;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2143;
          DCOMP.COMP.GenExpr(_4980_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2141, out _out2142, out _out2143);
          _4981_recursiveGen = _out2141;
          _4982___v104 = _out2142;
          _4983_recIdents = _out2143;
          r = ((_4981_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _4983_recIdents;
          RAST._IExpr _out2144;
          DCOMP._IOwnership _out2145;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2144, out _out2145);
          r = _out2144;
          resultingOwnership = _out2145;
          return ;
        }
      } else if (_source184.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source185 = selfIdent;
          if (_source185.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out2146;
              DCOMP._IOwnership _out2147;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2146, out _out2147);
              r = _out2146;
              resultingOwnership = _out2147;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _4984___mcc_h273 = _source185.dtor_value;
            Dafny.ISequence<Dafny.Rune> _4985_id = _4984___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_4985_id);
              if (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMP.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMP.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_4985_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_4985_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMP.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_4985_id);
            }
          }
          return ;
        }
      } else if (_source184.is_Ite) {
        DAST._IExpression _4986___mcc_h34 = _source184.dtor_cond;
        DAST._IExpression _4987___mcc_h35 = _source184.dtor_thn;
        DAST._IExpression _4988___mcc_h36 = _source184.dtor_els;
        DAST._IExpression _4989_f = _4988___mcc_h36;
        DAST._IExpression _4990_t = _4987___mcc_h35;
        DAST._IExpression _4991_cond = _4986___mcc_h34;
        {
          RAST._IExpr _4992_cond;
          DCOMP._IOwnership _4993___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4994_recIdentsCond;
          RAST._IExpr _out2148;
          DCOMP._IOwnership _out2149;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2150;
          DCOMP.COMP.GenExpr(_4991_cond, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2148, out _out2149, out _out2150);
          _4992_cond = _out2148;
          _4993___v109 = _out2149;
          _4994_recIdentsCond = _out2150;
          Dafny.ISequence<Dafny.Rune> _4995_condString;
          _4995_condString = (_4992_cond)._ToString(DCOMP.__default.IND);
          RAST._IExpr _4996___v110;
          DCOMP._IOwnership _4997_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _4998___v111;
          RAST._IExpr _out2151;
          DCOMP._IOwnership _out2152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2153;
          DCOMP.COMP.GenExpr(_4990_t, selfIdent, env, expectedOwnership, out _out2151, out _out2152, out _out2153);
          _4996___v110 = _out2151;
          _4997_tHasToBeOwned = _out2152;
          _4998___v111 = _out2153;
          RAST._IExpr _4999_fExpr;
          DCOMP._IOwnership _5000_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5001_recIdentsF;
          RAST._IExpr _out2154;
          DCOMP._IOwnership _out2155;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2156;
          DCOMP.COMP.GenExpr(_4989_f, selfIdent, env, _4997_tHasToBeOwned, out _out2154, out _out2155, out _out2156);
          _4999_fExpr = _out2154;
          _5000_fOwned = _out2155;
          _5001_recIdentsF = _out2156;
          Dafny.ISequence<Dafny.Rune> _5002_fString;
          _5002_fString = (_4999_fExpr)._ToString(DCOMP.__default.IND);
          RAST._IExpr _5003_tExpr;
          DCOMP._IOwnership _5004___v112;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5005_recIdentsT;
          RAST._IExpr _out2157;
          DCOMP._IOwnership _out2158;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2159;
          DCOMP.COMP.GenExpr(_4990_t, selfIdent, env, _5000_fOwned, out _out2157, out _out2158, out _out2159);
          _5003_tExpr = _out2157;
          _5004___v112 = _out2158;
          _5005_recIdentsT = _out2159;
          Dafny.ISequence<Dafny.Rune> _5006_tString;
          _5006_tString = (_5003_tExpr)._ToString(DCOMP.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _4995_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _5006_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _5002_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out2160;
          DCOMP._IOwnership _out2161;
          DCOMP.COMP.FromOwnership(r, _5000_fOwned, expectedOwnership, out _out2160, out _out2161);
          r = _out2160;
          resultingOwnership = _out2161;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_4994_recIdentsCond, _5005_recIdentsT), _5001_recIdentsF);
          return ;
        }
      } else if (_source184.is_UnOp) {
        DAST._IUnaryOp _5007___mcc_h37 = _source184.dtor_unOp;
        DAST._IExpression _5008___mcc_h38 = _source184.dtor_expr;
        DAST.Format._IUnOpFormat _5009___mcc_h39 = _source184.dtor_format1;
        DAST._IUnaryOp _source186 = _5007___mcc_h37;
        if (_source186.is_Not) {
          DAST.Format._IUnOpFormat _5010_format = _5009___mcc_h39;
          DAST._IExpression _5011_e = _5008___mcc_h38;
          {
            RAST._IExpr _5012_recursiveGen;
            DCOMP._IOwnership _5013___v113;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5014_recIdents;
            RAST._IExpr _out2162;
            DCOMP._IOwnership _out2163;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2164;
            DCOMP.COMP.GenExpr(_5011_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2162, out _out2163, out _out2164);
            _5012_recursiveGen = _out2162;
            _5013___v113 = _out2163;
            _5014_recIdents = _out2164;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _5012_recursiveGen, _5010_format);
            RAST._IExpr _out2165;
            DCOMP._IOwnership _out2166;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2165, out _out2166);
            r = _out2165;
            resultingOwnership = _out2166;
            readIdents = _5014_recIdents;
            return ;
          }
        } else if (_source186.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _5015_format = _5009___mcc_h39;
          DAST._IExpression _5016_e = _5008___mcc_h38;
          {
            RAST._IExpr _5017_recursiveGen;
            DCOMP._IOwnership _5018___v114;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5019_recIdents;
            RAST._IExpr _out2167;
            DCOMP._IOwnership _out2168;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2169;
            DCOMP.COMP.GenExpr(_5016_e, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2167, out _out2168, out _out2169);
            _5017_recursiveGen = _out2167;
            _5018___v114 = _out2168;
            _5019_recIdents = _out2169;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _5017_recursiveGen, _5015_format);
            RAST._IExpr _out2170;
            DCOMP._IOwnership _out2171;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2170, out _out2171);
            r = _out2170;
            resultingOwnership = _out2171;
            readIdents = _5019_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnOpFormat _5020_format = _5009___mcc_h39;
          DAST._IExpression _5021_e = _5008___mcc_h38;
          {
            RAST._IExpr _5022_recursiveGen;
            DCOMP._IOwnership _5023_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5024_recIdents;
            RAST._IExpr _out2172;
            DCOMP._IOwnership _out2173;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2174;
            DCOMP.COMP.GenExpr(_5021_e, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2172, out _out2173, out _out2174);
            _5022_recursiveGen = _out2172;
            _5023_recOwned = _out2173;
            _5024_recIdents = _out2174;
            r = ((_5022_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out2175;
            DCOMP._IOwnership _out2176;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2175, out _out2176);
            r = _out2175;
            resultingOwnership = _out2176;
            readIdents = _5024_recIdents;
            return ;
          }
        }
      } else if (_source184.is_BinOp) {
        DAST._IBinOp _5025___mcc_h40 = _source184.dtor_op;
        DAST._IExpression _5026___mcc_h41 = _source184.dtor_left;
        DAST._IExpression _5027___mcc_h42 = _source184.dtor_right;
        DAST.Format._IBinOpFormat _5028___mcc_h43 = _source184.dtor_format2;
        RAST._IExpr _out2177;
        DCOMP._IOwnership _out2178;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2179;
        DCOMP.COMP.GenExprBinary(e, selfIdent, env, expectedOwnership, out _out2177, out _out2178, out _out2179);
        r = _out2177;
        resultingOwnership = _out2178;
        readIdents = _out2179;
      } else if (_source184.is_ArrayLen) {
        DAST._IExpression _5029___mcc_h44 = _source184.dtor_expr;
        BigInteger _5030___mcc_h45 = _source184.dtor_dim;
        BigInteger _5031_dim = _5030___mcc_h45;
        DAST._IExpression _5032_expr = _5029___mcc_h44;
        {
          RAST._IExpr _5033_recursiveGen;
          DCOMP._IOwnership _5034___v119;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5035_recIdents;
          RAST._IExpr _out2180;
          DCOMP._IOwnership _out2181;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2182;
          DCOMP.COMP.GenExpr(_5032_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2180, out _out2181, out _out2182);
          _5033_recursiveGen = _out2180;
          _5034___v119 = _out2181;
          _5035_recIdents = _out2182;
          if ((_5031_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_5033_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _5036_s;
            _5036_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMP.__default.IND);
            BigInteger _5037_i;
            _5037_i = BigInteger.One;
            while ((_5037_i) < (_5031_dim)) {
              _5036_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _5036_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _5037_i = (_5037_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5033_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _5036_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out2183;
          DCOMP._IOwnership _out2184;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2183, out _out2184);
          r = _out2183;
          resultingOwnership = _out2184;
          readIdents = _5035_recIdents;
          return ;
        }
      } else if (_source184.is_MapKeys) {
        DAST._IExpression _5038___mcc_h46 = _source184.dtor_expr;
        DAST._IExpression _5039_expr = _5038___mcc_h46;
        {
          RAST._IExpr _5040_recursiveGen;
          DCOMP._IOwnership _5041___v120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5042_recIdents;
          RAST._IExpr _out2185;
          DCOMP._IOwnership _out2186;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2187;
          DCOMP.COMP.GenExpr(_5039_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2185, out _out2186, out _out2187);
          _5040_recursiveGen = _out2185;
          _5041___v120 = _out2186;
          _5042_recIdents = _out2187;
          readIdents = _5042_recIdents;
          r = ((_5040_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2188;
          DCOMP._IOwnership _out2189;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2188, out _out2189);
          r = _out2188;
          resultingOwnership = _out2189;
          return ;
        }
      } else if (_source184.is_MapValues) {
        DAST._IExpression _5043___mcc_h47 = _source184.dtor_expr;
        DAST._IExpression _5044_expr = _5043___mcc_h47;
        {
          RAST._IExpr _5045_recursiveGen;
          DCOMP._IOwnership _5046___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5047_recIdents;
          RAST._IExpr _out2190;
          DCOMP._IOwnership _out2191;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2192;
          DCOMP.COMP.GenExpr(_5044_expr, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2190, out _out2191, out _out2192);
          _5045_recursiveGen = _out2190;
          _5046___v121 = _out2191;
          _5047_recIdents = _out2192;
          readIdents = _5047_recIdents;
          r = ((_5045_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out2193;
          DCOMP._IOwnership _out2194;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2193, out _out2194);
          r = _out2193;
          resultingOwnership = _out2194;
          return ;
        }
      } else if (_source184.is_Select) {
        DAST._IExpression _5048___mcc_h48 = _source184.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _5049___mcc_h49 = _source184.dtor_field;
        bool _5050___mcc_h50 = _source184.dtor_isConstant;
        bool _5051___mcc_h51 = _source184.dtor_onDatatype;
        DAST._IExpression _source187 = _5048___mcc_h48;
        if (_source187.is_Literal) {
          DAST._ILiteral _5052___mcc_h52 = _source187.dtor_Literal_a0;
          bool _5053_isDatatype = _5051___mcc_h51;
          bool _5054_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5055_field = _5049___mcc_h49;
          DAST._IExpression _5056_on = _5048___mcc_h48;
          {
            RAST._IExpr _5057_onExpr;
            DCOMP._IOwnership _5058_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5059_recIdents;
            RAST._IExpr _out2195;
            DCOMP._IOwnership _out2196;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2197;
            DCOMP.COMP.GenExpr(_5056_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2195, out _out2196, out _out2197);
            _5057_onExpr = _out2195;
            _5058_onOwned = _out2196;
            _5059_recIdents = _out2197;
            if ((_5053_isDatatype) || (_5054_isConstant)) {
              r = ((_5057_onExpr).Sel(DCOMP.__default.escapeIdent(_5055_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2198;
              DCOMP._IOwnership _out2199;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2198, out _out2199);
              r = _out2198;
              resultingOwnership = _out2199;
            } else {
              Dafny.ISequence<Dafny.Rune> _5060_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5060_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5057_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5055_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2200;
              DCOMP._IOwnership _out2201;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5060_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2200, out _out2201);
              r = _out2200;
              resultingOwnership = _out2201;
            }
            readIdents = _5059_recIdents;
            return ;
          }
        } else if (_source187.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _5061___mcc_h54 = _source187.dtor_Ident_a0;
          bool _5062_isDatatype = _5051___mcc_h51;
          bool _5063_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5064_field = _5049___mcc_h49;
          DAST._IExpression _5065_on = _5048___mcc_h48;
          {
            RAST._IExpr _5066_onExpr;
            DCOMP._IOwnership _5067_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5068_recIdents;
            RAST._IExpr _out2202;
            DCOMP._IOwnership _out2203;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2204;
            DCOMP.COMP.GenExpr(_5065_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2202, out _out2203, out _out2204);
            _5066_onExpr = _out2202;
            _5067_onOwned = _out2203;
            _5068_recIdents = _out2204;
            if ((_5062_isDatatype) || (_5063_isConstant)) {
              r = ((_5066_onExpr).Sel(DCOMP.__default.escapeIdent(_5064_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2205;
              DCOMP._IOwnership _out2206;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2205, out _out2206);
              r = _out2205;
              resultingOwnership = _out2206;
            } else {
              Dafny.ISequence<Dafny.Rune> _5069_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5069_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5066_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5064_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2207;
              DCOMP._IOwnership _out2208;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5069_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2207, out _out2208);
              r = _out2207;
              resultingOwnership = _out2208;
            }
            readIdents = _5068_recIdents;
            return ;
          }
        } else if (_source187.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5070___mcc_h56 = _source187.dtor_Companion_a0;
          bool _5071_isDatatype = _5051___mcc_h51;
          bool _5072_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5073_field = _5049___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5074_c = _5070___mcc_h56;
          {
            RAST._IExpr _5075_onExpr;
            DCOMP._IOwnership _5076_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5077_recIdents;
            RAST._IExpr _out2209;
            DCOMP._IOwnership _out2210;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2211;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_5074_c), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2209, out _out2210, out _out2211);
            _5075_onExpr = _out2209;
            _5076_onOwned = _out2210;
            _5077_recIdents = _out2211;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_5075_onExpr)._ToString(DCOMP.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_5073_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out2212;
            DCOMP._IOwnership _out2213;
            DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2212, out _out2213);
            r = _out2212;
            resultingOwnership = _out2213;
            readIdents = _5077_recIdents;
            return ;
          }
        } else if (_source187.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _5078___mcc_h58 = _source187.dtor_Tuple_a0;
          bool _5079_isDatatype = _5051___mcc_h51;
          bool _5080_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5081_field = _5049___mcc_h49;
          DAST._IExpression _5082_on = _5048___mcc_h48;
          {
            RAST._IExpr _5083_onExpr;
            DCOMP._IOwnership _5084_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5085_recIdents;
            RAST._IExpr _out2214;
            DCOMP._IOwnership _out2215;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2216;
            DCOMP.COMP.GenExpr(_5082_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2214, out _out2215, out _out2216);
            _5083_onExpr = _out2214;
            _5084_onOwned = _out2215;
            _5085_recIdents = _out2216;
            if ((_5079_isDatatype) || (_5080_isConstant)) {
              r = ((_5083_onExpr).Sel(DCOMP.__default.escapeIdent(_5081_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2217;
              DCOMP._IOwnership _out2218;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2217, out _out2218);
              r = _out2217;
              resultingOwnership = _out2218;
            } else {
              Dafny.ISequence<Dafny.Rune> _5086_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5086_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5083_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5081_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2219;
              DCOMP._IOwnership _out2220;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5086_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2219, out _out2220);
              r = _out2219;
              resultingOwnership = _out2220;
            }
            readIdents = _5085_recIdents;
            return ;
          }
        } else if (_source187.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5087___mcc_h60 = _source187.dtor_path;
          Dafny.ISequence<DAST._IType> _5088___mcc_h61 = _source187.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5089___mcc_h62 = _source187.dtor_args;
          bool _5090_isDatatype = _5051___mcc_h51;
          bool _5091_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5092_field = _5049___mcc_h49;
          DAST._IExpression _5093_on = _5048___mcc_h48;
          {
            RAST._IExpr _5094_onExpr;
            DCOMP._IOwnership _5095_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5096_recIdents;
            RAST._IExpr _out2221;
            DCOMP._IOwnership _out2222;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2223;
            DCOMP.COMP.GenExpr(_5093_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2221, out _out2222, out _out2223);
            _5094_onExpr = _out2221;
            _5095_onOwned = _out2222;
            _5096_recIdents = _out2223;
            if ((_5090_isDatatype) || (_5091_isConstant)) {
              r = ((_5094_onExpr).Sel(DCOMP.__default.escapeIdent(_5092_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2224;
              DCOMP._IOwnership _out2225;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2224, out _out2225);
              r = _out2224;
              resultingOwnership = _out2225;
            } else {
              Dafny.ISequence<Dafny.Rune> _5097_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5097_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5094_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5092_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2226;
              DCOMP._IOwnership _out2227;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5097_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2226, out _out2227);
              r = _out2226;
              resultingOwnership = _out2227;
            }
            readIdents = _5096_recIdents;
            return ;
          }
        } else if (_source187.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _5098___mcc_h66 = _source187.dtor_dims;
          DAST._IType _5099___mcc_h67 = _source187.dtor_typ;
          bool _5100_isDatatype = _5051___mcc_h51;
          bool _5101_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5102_field = _5049___mcc_h49;
          DAST._IExpression _5103_on = _5048___mcc_h48;
          {
            RAST._IExpr _5104_onExpr;
            DCOMP._IOwnership _5105_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5106_recIdents;
            RAST._IExpr _out2228;
            DCOMP._IOwnership _out2229;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2230;
            DCOMP.COMP.GenExpr(_5103_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2228, out _out2229, out _out2230);
            _5104_onExpr = _out2228;
            _5105_onOwned = _out2229;
            _5106_recIdents = _out2230;
            if ((_5100_isDatatype) || (_5101_isConstant)) {
              r = ((_5104_onExpr).Sel(DCOMP.__default.escapeIdent(_5102_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2231;
              DCOMP._IOwnership _out2232;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2231, out _out2232);
              r = _out2231;
              resultingOwnership = _out2232;
            } else {
              Dafny.ISequence<Dafny.Rune> _5107_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5107_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5104_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5102_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2233;
              DCOMP._IOwnership _out2234;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5107_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2233, out _out2234);
              r = _out2233;
              resultingOwnership = _out2234;
            }
            readIdents = _5106_recIdents;
            return ;
          }
        } else if (_source187.is_DatatypeValue) {
          DAST._IDatatypeType _5108___mcc_h70 = _source187.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _5109___mcc_h71 = _source187.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _5110___mcc_h72 = _source187.dtor_variant;
          bool _5111___mcc_h73 = _source187.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5112___mcc_h74 = _source187.dtor_contents;
          bool _5113_isDatatype = _5051___mcc_h51;
          bool _5114_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5115_field = _5049___mcc_h49;
          DAST._IExpression _5116_on = _5048___mcc_h48;
          {
            RAST._IExpr _5117_onExpr;
            DCOMP._IOwnership _5118_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5119_recIdents;
            RAST._IExpr _out2235;
            DCOMP._IOwnership _out2236;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2237;
            DCOMP.COMP.GenExpr(_5116_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2235, out _out2236, out _out2237);
            _5117_onExpr = _out2235;
            _5118_onOwned = _out2236;
            _5119_recIdents = _out2237;
            if ((_5113_isDatatype) || (_5114_isConstant)) {
              r = ((_5117_onExpr).Sel(DCOMP.__default.escapeIdent(_5115_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2238;
              DCOMP._IOwnership _out2239;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2238, out _out2239);
              r = _out2238;
              resultingOwnership = _out2239;
            } else {
              Dafny.ISequence<Dafny.Rune> _5120_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5120_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5117_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5115_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2240;
              DCOMP._IOwnership _out2241;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5120_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2240, out _out2241);
              r = _out2240;
              resultingOwnership = _out2241;
            }
            readIdents = _5119_recIdents;
            return ;
          }
        } else if (_source187.is_Convert) {
          DAST._IExpression _5121___mcc_h80 = _source187.dtor_value;
          DAST._IType _5122___mcc_h81 = _source187.dtor_from;
          DAST._IType _5123___mcc_h82 = _source187.dtor_typ;
          bool _5124_isDatatype = _5051___mcc_h51;
          bool _5125_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5126_field = _5049___mcc_h49;
          DAST._IExpression _5127_on = _5048___mcc_h48;
          {
            RAST._IExpr _5128_onExpr;
            DCOMP._IOwnership _5129_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5130_recIdents;
            RAST._IExpr _out2242;
            DCOMP._IOwnership _out2243;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2244;
            DCOMP.COMP.GenExpr(_5127_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2242, out _out2243, out _out2244);
            _5128_onExpr = _out2242;
            _5129_onOwned = _out2243;
            _5130_recIdents = _out2244;
            if ((_5124_isDatatype) || (_5125_isConstant)) {
              r = ((_5128_onExpr).Sel(DCOMP.__default.escapeIdent(_5126_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2245;
              DCOMP._IOwnership _out2246;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2245, out _out2246);
              r = _out2245;
              resultingOwnership = _out2246;
            } else {
              Dafny.ISequence<Dafny.Rune> _5131_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5131_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5128_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5126_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2247;
              DCOMP._IOwnership _out2248;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5131_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2247, out _out2248);
              r = _out2247;
              resultingOwnership = _out2248;
            }
            readIdents = _5130_recIdents;
            return ;
          }
        } else if (_source187.is_SeqConstruct) {
          DAST._IExpression _5132___mcc_h86 = _source187.dtor_length;
          DAST._IExpression _5133___mcc_h87 = _source187.dtor_elem;
          bool _5134_isDatatype = _5051___mcc_h51;
          bool _5135_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5136_field = _5049___mcc_h49;
          DAST._IExpression _5137_on = _5048___mcc_h48;
          {
            RAST._IExpr _5138_onExpr;
            DCOMP._IOwnership _5139_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5140_recIdents;
            RAST._IExpr _out2249;
            DCOMP._IOwnership _out2250;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2251;
            DCOMP.COMP.GenExpr(_5137_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2249, out _out2250, out _out2251);
            _5138_onExpr = _out2249;
            _5139_onOwned = _out2250;
            _5140_recIdents = _out2251;
            if ((_5134_isDatatype) || (_5135_isConstant)) {
              r = ((_5138_onExpr).Sel(DCOMP.__default.escapeIdent(_5136_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2252;
              DCOMP._IOwnership _out2253;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2252, out _out2253);
              r = _out2252;
              resultingOwnership = _out2253;
            } else {
              Dafny.ISequence<Dafny.Rune> _5141_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5141_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5138_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5136_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2254;
              DCOMP._IOwnership _out2255;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5141_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2254, out _out2255);
              r = _out2254;
              resultingOwnership = _out2255;
            }
            readIdents = _5140_recIdents;
            return ;
          }
        } else if (_source187.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _5142___mcc_h90 = _source187.dtor_elements;
          DAST._IType _5143___mcc_h91 = _source187.dtor_typ;
          bool _5144_isDatatype = _5051___mcc_h51;
          bool _5145_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5146_field = _5049___mcc_h49;
          DAST._IExpression _5147_on = _5048___mcc_h48;
          {
            RAST._IExpr _5148_onExpr;
            DCOMP._IOwnership _5149_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5150_recIdents;
            RAST._IExpr _out2256;
            DCOMP._IOwnership _out2257;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2258;
            DCOMP.COMP.GenExpr(_5147_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2256, out _out2257, out _out2258);
            _5148_onExpr = _out2256;
            _5149_onOwned = _out2257;
            _5150_recIdents = _out2258;
            if ((_5144_isDatatype) || (_5145_isConstant)) {
              r = ((_5148_onExpr).Sel(DCOMP.__default.escapeIdent(_5146_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2259;
              DCOMP._IOwnership _out2260;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2259, out _out2260);
              r = _out2259;
              resultingOwnership = _out2260;
            } else {
              Dafny.ISequence<Dafny.Rune> _5151_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5151_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5148_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5146_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2261;
              DCOMP._IOwnership _out2262;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5151_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2261, out _out2262);
              r = _out2261;
              resultingOwnership = _out2262;
            }
            readIdents = _5150_recIdents;
            return ;
          }
        } else if (_source187.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _5152___mcc_h94 = _source187.dtor_elements;
          bool _5153_isDatatype = _5051___mcc_h51;
          bool _5154_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5155_field = _5049___mcc_h49;
          DAST._IExpression _5156_on = _5048___mcc_h48;
          {
            RAST._IExpr _5157_onExpr;
            DCOMP._IOwnership _5158_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5159_recIdents;
            RAST._IExpr _out2263;
            DCOMP._IOwnership _out2264;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2265;
            DCOMP.COMP.GenExpr(_5156_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2263, out _out2264, out _out2265);
            _5157_onExpr = _out2263;
            _5158_onOwned = _out2264;
            _5159_recIdents = _out2265;
            if ((_5153_isDatatype) || (_5154_isConstant)) {
              r = ((_5157_onExpr).Sel(DCOMP.__default.escapeIdent(_5155_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2266;
              DCOMP._IOwnership _out2267;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2266, out _out2267);
              r = _out2266;
              resultingOwnership = _out2267;
            } else {
              Dafny.ISequence<Dafny.Rune> _5160_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5160_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5157_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5155_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2268;
              DCOMP._IOwnership _out2269;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5160_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2268, out _out2269);
              r = _out2268;
              resultingOwnership = _out2269;
            }
            readIdents = _5159_recIdents;
            return ;
          }
        } else if (_source187.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _5161___mcc_h96 = _source187.dtor_elements;
          bool _5162_isDatatype = _5051___mcc_h51;
          bool _5163_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5164_field = _5049___mcc_h49;
          DAST._IExpression _5165_on = _5048___mcc_h48;
          {
            RAST._IExpr _5166_onExpr;
            DCOMP._IOwnership _5167_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5168_recIdents;
            RAST._IExpr _out2270;
            DCOMP._IOwnership _out2271;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2272;
            DCOMP.COMP.GenExpr(_5165_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2270, out _out2271, out _out2272);
            _5166_onExpr = _out2270;
            _5167_onOwned = _out2271;
            _5168_recIdents = _out2272;
            if ((_5162_isDatatype) || (_5163_isConstant)) {
              r = ((_5166_onExpr).Sel(DCOMP.__default.escapeIdent(_5164_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2273;
              DCOMP._IOwnership _out2274;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2273, out _out2274);
              r = _out2273;
              resultingOwnership = _out2274;
            } else {
              Dafny.ISequence<Dafny.Rune> _5169_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5169_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5166_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5164_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2275;
              DCOMP._IOwnership _out2276;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5169_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2275, out _out2276);
              r = _out2275;
              resultingOwnership = _out2276;
            }
            readIdents = _5168_recIdents;
            return ;
          }
        } else if (_source187.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _5170___mcc_h98 = _source187.dtor_mapElems;
          bool _5171_isDatatype = _5051___mcc_h51;
          bool _5172_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5173_field = _5049___mcc_h49;
          DAST._IExpression _5174_on = _5048___mcc_h48;
          {
            RAST._IExpr _5175_onExpr;
            DCOMP._IOwnership _5176_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5177_recIdents;
            RAST._IExpr _out2277;
            DCOMP._IOwnership _out2278;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2279;
            DCOMP.COMP.GenExpr(_5174_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2277, out _out2278, out _out2279);
            _5175_onExpr = _out2277;
            _5176_onOwned = _out2278;
            _5177_recIdents = _out2279;
            if ((_5171_isDatatype) || (_5172_isConstant)) {
              r = ((_5175_onExpr).Sel(DCOMP.__default.escapeIdent(_5173_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2280;
              DCOMP._IOwnership _out2281;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2280, out _out2281);
              r = _out2280;
              resultingOwnership = _out2281;
            } else {
              Dafny.ISequence<Dafny.Rune> _5178_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5178_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5175_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5173_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2282;
              DCOMP._IOwnership _out2283;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5178_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2282, out _out2283);
              r = _out2282;
              resultingOwnership = _out2283;
            }
            readIdents = _5177_recIdents;
            return ;
          }
        } else if (_source187.is_MapBuilder) {
          DAST._IType _5179___mcc_h100 = _source187.dtor_keyType;
          DAST._IType _5180___mcc_h101 = _source187.dtor_valueType;
          bool _5181_isDatatype = _5051___mcc_h51;
          bool _5182_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5183_field = _5049___mcc_h49;
          DAST._IExpression _5184_on = _5048___mcc_h48;
          {
            RAST._IExpr _5185_onExpr;
            DCOMP._IOwnership _5186_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5187_recIdents;
            RAST._IExpr _out2284;
            DCOMP._IOwnership _out2285;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2286;
            DCOMP.COMP.GenExpr(_5184_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2284, out _out2285, out _out2286);
            _5185_onExpr = _out2284;
            _5186_onOwned = _out2285;
            _5187_recIdents = _out2286;
            if ((_5181_isDatatype) || (_5182_isConstant)) {
              r = ((_5185_onExpr).Sel(DCOMP.__default.escapeIdent(_5183_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2287;
              DCOMP._IOwnership _out2288;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2287, out _out2288);
              r = _out2287;
              resultingOwnership = _out2288;
            } else {
              Dafny.ISequence<Dafny.Rune> _5188_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5188_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5185_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5183_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2289;
              DCOMP._IOwnership _out2290;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5188_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2289, out _out2290);
              r = _out2289;
              resultingOwnership = _out2290;
            }
            readIdents = _5187_recIdents;
            return ;
          }
        } else if (_source187.is_SeqUpdate) {
          DAST._IExpression _5189___mcc_h104 = _source187.dtor_expr;
          DAST._IExpression _5190___mcc_h105 = _source187.dtor_indexExpr;
          DAST._IExpression _5191___mcc_h106 = _source187.dtor_value;
          bool _5192_isDatatype = _5051___mcc_h51;
          bool _5193_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5194_field = _5049___mcc_h49;
          DAST._IExpression _5195_on = _5048___mcc_h48;
          {
            RAST._IExpr _5196_onExpr;
            DCOMP._IOwnership _5197_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5198_recIdents;
            RAST._IExpr _out2291;
            DCOMP._IOwnership _out2292;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2293;
            DCOMP.COMP.GenExpr(_5195_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2291, out _out2292, out _out2293);
            _5196_onExpr = _out2291;
            _5197_onOwned = _out2292;
            _5198_recIdents = _out2293;
            if ((_5192_isDatatype) || (_5193_isConstant)) {
              r = ((_5196_onExpr).Sel(DCOMP.__default.escapeIdent(_5194_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2294;
              DCOMP._IOwnership _out2295;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2294, out _out2295);
              r = _out2294;
              resultingOwnership = _out2295;
            } else {
              Dafny.ISequence<Dafny.Rune> _5199_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5199_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5196_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5194_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2296;
              DCOMP._IOwnership _out2297;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5199_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2296, out _out2297);
              r = _out2296;
              resultingOwnership = _out2297;
            }
            readIdents = _5198_recIdents;
            return ;
          }
        } else if (_source187.is_MapUpdate) {
          DAST._IExpression _5200___mcc_h110 = _source187.dtor_expr;
          DAST._IExpression _5201___mcc_h111 = _source187.dtor_indexExpr;
          DAST._IExpression _5202___mcc_h112 = _source187.dtor_value;
          bool _5203_isDatatype = _5051___mcc_h51;
          bool _5204_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5205_field = _5049___mcc_h49;
          DAST._IExpression _5206_on = _5048___mcc_h48;
          {
            RAST._IExpr _5207_onExpr;
            DCOMP._IOwnership _5208_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5209_recIdents;
            RAST._IExpr _out2298;
            DCOMP._IOwnership _out2299;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2300;
            DCOMP.COMP.GenExpr(_5206_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2298, out _out2299, out _out2300);
            _5207_onExpr = _out2298;
            _5208_onOwned = _out2299;
            _5209_recIdents = _out2300;
            if ((_5203_isDatatype) || (_5204_isConstant)) {
              r = ((_5207_onExpr).Sel(DCOMP.__default.escapeIdent(_5205_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2301;
              DCOMP._IOwnership _out2302;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2301, out _out2302);
              r = _out2301;
              resultingOwnership = _out2302;
            } else {
              Dafny.ISequence<Dafny.Rune> _5210_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5210_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5207_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5205_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2303;
              DCOMP._IOwnership _out2304;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5210_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2303, out _out2304);
              r = _out2303;
              resultingOwnership = _out2304;
            }
            readIdents = _5209_recIdents;
            return ;
          }
        } else if (_source187.is_SetBuilder) {
          DAST._IType _5211___mcc_h116 = _source187.dtor_elemType;
          bool _5212_isDatatype = _5051___mcc_h51;
          bool _5213_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5214_field = _5049___mcc_h49;
          DAST._IExpression _5215_on = _5048___mcc_h48;
          {
            RAST._IExpr _5216_onExpr;
            DCOMP._IOwnership _5217_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5218_recIdents;
            RAST._IExpr _out2305;
            DCOMP._IOwnership _out2306;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2307;
            DCOMP.COMP.GenExpr(_5215_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2305, out _out2306, out _out2307);
            _5216_onExpr = _out2305;
            _5217_onOwned = _out2306;
            _5218_recIdents = _out2307;
            if ((_5212_isDatatype) || (_5213_isConstant)) {
              r = ((_5216_onExpr).Sel(DCOMP.__default.escapeIdent(_5214_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2308;
              DCOMP._IOwnership _out2309;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2308, out _out2309);
              r = _out2308;
              resultingOwnership = _out2309;
            } else {
              Dafny.ISequence<Dafny.Rune> _5219_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5219_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5216_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5214_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2310;
              DCOMP._IOwnership _out2311;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5219_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2310, out _out2311);
              r = _out2310;
              resultingOwnership = _out2311;
            }
            readIdents = _5218_recIdents;
            return ;
          }
        } else if (_source187.is_ToMultiset) {
          DAST._IExpression _5220___mcc_h118 = _source187.dtor_ToMultiset_a0;
          bool _5221_isDatatype = _5051___mcc_h51;
          bool _5222_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5223_field = _5049___mcc_h49;
          DAST._IExpression _5224_on = _5048___mcc_h48;
          {
            RAST._IExpr _5225_onExpr;
            DCOMP._IOwnership _5226_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5227_recIdents;
            RAST._IExpr _out2312;
            DCOMP._IOwnership _out2313;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2314;
            DCOMP.COMP.GenExpr(_5224_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2312, out _out2313, out _out2314);
            _5225_onExpr = _out2312;
            _5226_onOwned = _out2313;
            _5227_recIdents = _out2314;
            if ((_5221_isDatatype) || (_5222_isConstant)) {
              r = ((_5225_onExpr).Sel(DCOMP.__default.escapeIdent(_5223_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2315;
              DCOMP._IOwnership _out2316;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2315, out _out2316);
              r = _out2315;
              resultingOwnership = _out2316;
            } else {
              Dafny.ISequence<Dafny.Rune> _5228_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5228_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5225_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5223_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2317;
              DCOMP._IOwnership _out2318;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5228_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2317, out _out2318);
              r = _out2317;
              resultingOwnership = _out2318;
            }
            readIdents = _5227_recIdents;
            return ;
          }
        } else if (_source187.is_This) {
          bool _5229_isDatatype = _5051___mcc_h51;
          bool _5230_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5231_field = _5049___mcc_h49;
          DAST._IExpression _5232_on = _5048___mcc_h48;
          {
            RAST._IExpr _5233_onExpr;
            DCOMP._IOwnership _5234_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5235_recIdents;
            RAST._IExpr _out2319;
            DCOMP._IOwnership _out2320;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2321;
            DCOMP.COMP.GenExpr(_5232_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2319, out _out2320, out _out2321);
            _5233_onExpr = _out2319;
            _5234_onOwned = _out2320;
            _5235_recIdents = _out2321;
            if ((_5229_isDatatype) || (_5230_isConstant)) {
              r = ((_5233_onExpr).Sel(DCOMP.__default.escapeIdent(_5231_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2322;
              DCOMP._IOwnership _out2323;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2322, out _out2323);
              r = _out2322;
              resultingOwnership = _out2323;
            } else {
              Dafny.ISequence<Dafny.Rune> _5236_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5236_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5233_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5231_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2324;
              DCOMP._IOwnership _out2325;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5236_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2324, out _out2325);
              r = _out2324;
              resultingOwnership = _out2325;
            }
            readIdents = _5235_recIdents;
            return ;
          }
        } else if (_source187.is_Ite) {
          DAST._IExpression _5237___mcc_h120 = _source187.dtor_cond;
          DAST._IExpression _5238___mcc_h121 = _source187.dtor_thn;
          DAST._IExpression _5239___mcc_h122 = _source187.dtor_els;
          bool _5240_isDatatype = _5051___mcc_h51;
          bool _5241_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5242_field = _5049___mcc_h49;
          DAST._IExpression _5243_on = _5048___mcc_h48;
          {
            RAST._IExpr _5244_onExpr;
            DCOMP._IOwnership _5245_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5246_recIdents;
            RAST._IExpr _out2326;
            DCOMP._IOwnership _out2327;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2328;
            DCOMP.COMP.GenExpr(_5243_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2326, out _out2327, out _out2328);
            _5244_onExpr = _out2326;
            _5245_onOwned = _out2327;
            _5246_recIdents = _out2328;
            if ((_5240_isDatatype) || (_5241_isConstant)) {
              r = ((_5244_onExpr).Sel(DCOMP.__default.escapeIdent(_5242_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2329;
              DCOMP._IOwnership _out2330;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2329, out _out2330);
              r = _out2329;
              resultingOwnership = _out2330;
            } else {
              Dafny.ISequence<Dafny.Rune> _5247_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5247_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5244_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5242_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2331;
              DCOMP._IOwnership _out2332;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5247_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2331, out _out2332);
              r = _out2331;
              resultingOwnership = _out2332;
            }
            readIdents = _5246_recIdents;
            return ;
          }
        } else if (_source187.is_UnOp) {
          DAST._IUnaryOp _5248___mcc_h126 = _source187.dtor_unOp;
          DAST._IExpression _5249___mcc_h127 = _source187.dtor_expr;
          DAST.Format._IUnOpFormat _5250___mcc_h128 = _source187.dtor_format1;
          bool _5251_isDatatype = _5051___mcc_h51;
          bool _5252_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5253_field = _5049___mcc_h49;
          DAST._IExpression _5254_on = _5048___mcc_h48;
          {
            RAST._IExpr _5255_onExpr;
            DCOMP._IOwnership _5256_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5257_recIdents;
            RAST._IExpr _out2333;
            DCOMP._IOwnership _out2334;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2335;
            DCOMP.COMP.GenExpr(_5254_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2333, out _out2334, out _out2335);
            _5255_onExpr = _out2333;
            _5256_onOwned = _out2334;
            _5257_recIdents = _out2335;
            if ((_5251_isDatatype) || (_5252_isConstant)) {
              r = ((_5255_onExpr).Sel(DCOMP.__default.escapeIdent(_5253_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2336;
              DCOMP._IOwnership _out2337;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2336, out _out2337);
              r = _out2336;
              resultingOwnership = _out2337;
            } else {
              Dafny.ISequence<Dafny.Rune> _5258_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5258_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5255_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5253_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2338;
              DCOMP._IOwnership _out2339;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5258_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2338, out _out2339);
              r = _out2338;
              resultingOwnership = _out2339;
            }
            readIdents = _5257_recIdents;
            return ;
          }
        } else if (_source187.is_BinOp) {
          DAST._IBinOp _5259___mcc_h132 = _source187.dtor_op;
          DAST._IExpression _5260___mcc_h133 = _source187.dtor_left;
          DAST._IExpression _5261___mcc_h134 = _source187.dtor_right;
          DAST.Format._IBinOpFormat _5262___mcc_h135 = _source187.dtor_format2;
          bool _5263_isDatatype = _5051___mcc_h51;
          bool _5264_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5265_field = _5049___mcc_h49;
          DAST._IExpression _5266_on = _5048___mcc_h48;
          {
            RAST._IExpr _5267_onExpr;
            DCOMP._IOwnership _5268_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5269_recIdents;
            RAST._IExpr _out2340;
            DCOMP._IOwnership _out2341;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2342;
            DCOMP.COMP.GenExpr(_5266_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2340, out _out2341, out _out2342);
            _5267_onExpr = _out2340;
            _5268_onOwned = _out2341;
            _5269_recIdents = _out2342;
            if ((_5263_isDatatype) || (_5264_isConstant)) {
              r = ((_5267_onExpr).Sel(DCOMP.__default.escapeIdent(_5265_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2343;
              DCOMP._IOwnership _out2344;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2343, out _out2344);
              r = _out2343;
              resultingOwnership = _out2344;
            } else {
              Dafny.ISequence<Dafny.Rune> _5270_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5270_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5267_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5265_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2345;
              DCOMP._IOwnership _out2346;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5270_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2345, out _out2346);
              r = _out2345;
              resultingOwnership = _out2346;
            }
            readIdents = _5269_recIdents;
            return ;
          }
        } else if (_source187.is_ArrayLen) {
          DAST._IExpression _5271___mcc_h140 = _source187.dtor_expr;
          BigInteger _5272___mcc_h141 = _source187.dtor_dim;
          bool _5273_isDatatype = _5051___mcc_h51;
          bool _5274_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5275_field = _5049___mcc_h49;
          DAST._IExpression _5276_on = _5048___mcc_h48;
          {
            RAST._IExpr _5277_onExpr;
            DCOMP._IOwnership _5278_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5279_recIdents;
            RAST._IExpr _out2347;
            DCOMP._IOwnership _out2348;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2349;
            DCOMP.COMP.GenExpr(_5276_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2347, out _out2348, out _out2349);
            _5277_onExpr = _out2347;
            _5278_onOwned = _out2348;
            _5279_recIdents = _out2349;
            if ((_5273_isDatatype) || (_5274_isConstant)) {
              r = ((_5277_onExpr).Sel(DCOMP.__default.escapeIdent(_5275_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2350;
              DCOMP._IOwnership _out2351;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2350, out _out2351);
              r = _out2350;
              resultingOwnership = _out2351;
            } else {
              Dafny.ISequence<Dafny.Rune> _5280_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5280_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5277_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5275_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2352;
              DCOMP._IOwnership _out2353;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5280_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2352, out _out2353);
              r = _out2352;
              resultingOwnership = _out2353;
            }
            readIdents = _5279_recIdents;
            return ;
          }
        } else if (_source187.is_MapKeys) {
          DAST._IExpression _5281___mcc_h144 = _source187.dtor_expr;
          bool _5282_isDatatype = _5051___mcc_h51;
          bool _5283_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5284_field = _5049___mcc_h49;
          DAST._IExpression _5285_on = _5048___mcc_h48;
          {
            RAST._IExpr _5286_onExpr;
            DCOMP._IOwnership _5287_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5288_recIdents;
            RAST._IExpr _out2354;
            DCOMP._IOwnership _out2355;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2356;
            DCOMP.COMP.GenExpr(_5285_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2354, out _out2355, out _out2356);
            _5286_onExpr = _out2354;
            _5287_onOwned = _out2355;
            _5288_recIdents = _out2356;
            if ((_5282_isDatatype) || (_5283_isConstant)) {
              r = ((_5286_onExpr).Sel(DCOMP.__default.escapeIdent(_5284_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2357;
              DCOMP._IOwnership _out2358;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2357, out _out2358);
              r = _out2357;
              resultingOwnership = _out2358;
            } else {
              Dafny.ISequence<Dafny.Rune> _5289_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5289_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5286_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5284_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2359;
              DCOMP._IOwnership _out2360;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5289_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2359, out _out2360);
              r = _out2359;
              resultingOwnership = _out2360;
            }
            readIdents = _5288_recIdents;
            return ;
          }
        } else if (_source187.is_MapValues) {
          DAST._IExpression _5290___mcc_h146 = _source187.dtor_expr;
          bool _5291_isDatatype = _5051___mcc_h51;
          bool _5292_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5293_field = _5049___mcc_h49;
          DAST._IExpression _5294_on = _5048___mcc_h48;
          {
            RAST._IExpr _5295_onExpr;
            DCOMP._IOwnership _5296_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5297_recIdents;
            RAST._IExpr _out2361;
            DCOMP._IOwnership _out2362;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2363;
            DCOMP.COMP.GenExpr(_5294_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2361, out _out2362, out _out2363);
            _5295_onExpr = _out2361;
            _5296_onOwned = _out2362;
            _5297_recIdents = _out2363;
            if ((_5291_isDatatype) || (_5292_isConstant)) {
              r = ((_5295_onExpr).Sel(DCOMP.__default.escapeIdent(_5293_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2364;
              DCOMP._IOwnership _out2365;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2364, out _out2365);
              r = _out2364;
              resultingOwnership = _out2365;
            } else {
              Dafny.ISequence<Dafny.Rune> _5298_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5298_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5295_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5293_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2366;
              DCOMP._IOwnership _out2367;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5298_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2366, out _out2367);
              r = _out2366;
              resultingOwnership = _out2367;
            }
            readIdents = _5297_recIdents;
            return ;
          }
        } else if (_source187.is_Select) {
          DAST._IExpression _5299___mcc_h148 = _source187.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _5300___mcc_h149 = _source187.dtor_field;
          bool _5301___mcc_h150 = _source187.dtor_isConstant;
          bool _5302___mcc_h151 = _source187.dtor_onDatatype;
          bool _5303_isDatatype = _5051___mcc_h51;
          bool _5304_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5305_field = _5049___mcc_h49;
          DAST._IExpression _5306_on = _5048___mcc_h48;
          {
            RAST._IExpr _5307_onExpr;
            DCOMP._IOwnership _5308_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5309_recIdents;
            RAST._IExpr _out2368;
            DCOMP._IOwnership _out2369;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2370;
            DCOMP.COMP.GenExpr(_5306_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2368, out _out2369, out _out2370);
            _5307_onExpr = _out2368;
            _5308_onOwned = _out2369;
            _5309_recIdents = _out2370;
            if ((_5303_isDatatype) || (_5304_isConstant)) {
              r = ((_5307_onExpr).Sel(DCOMP.__default.escapeIdent(_5305_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2371;
              DCOMP._IOwnership _out2372;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2371, out _out2372);
              r = _out2371;
              resultingOwnership = _out2372;
            } else {
              Dafny.ISequence<Dafny.Rune> _5310_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5310_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5307_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5305_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2373;
              DCOMP._IOwnership _out2374;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5310_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2373, out _out2374);
              r = _out2373;
              resultingOwnership = _out2374;
            }
            readIdents = _5309_recIdents;
            return ;
          }
        } else if (_source187.is_SelectFn) {
          DAST._IExpression _5311___mcc_h156 = _source187.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _5312___mcc_h157 = _source187.dtor_field;
          bool _5313___mcc_h158 = _source187.dtor_onDatatype;
          bool _5314___mcc_h159 = _source187.dtor_isStatic;
          BigInteger _5315___mcc_h160 = _source187.dtor_arity;
          bool _5316_isDatatype = _5051___mcc_h51;
          bool _5317_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5318_field = _5049___mcc_h49;
          DAST._IExpression _5319_on = _5048___mcc_h48;
          {
            RAST._IExpr _5320_onExpr;
            DCOMP._IOwnership _5321_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5322_recIdents;
            RAST._IExpr _out2375;
            DCOMP._IOwnership _out2376;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2377;
            DCOMP.COMP.GenExpr(_5319_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2375, out _out2376, out _out2377);
            _5320_onExpr = _out2375;
            _5321_onOwned = _out2376;
            _5322_recIdents = _out2377;
            if ((_5316_isDatatype) || (_5317_isConstant)) {
              r = ((_5320_onExpr).Sel(DCOMP.__default.escapeIdent(_5318_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2378;
              DCOMP._IOwnership _out2379;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2378, out _out2379);
              r = _out2378;
              resultingOwnership = _out2379;
            } else {
              Dafny.ISequence<Dafny.Rune> _5323_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5323_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5320_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5318_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2380;
              DCOMP._IOwnership _out2381;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5323_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2380, out _out2381);
              r = _out2380;
              resultingOwnership = _out2381;
            }
            readIdents = _5322_recIdents;
            return ;
          }
        } else if (_source187.is_Index) {
          DAST._IExpression _5324___mcc_h166 = _source187.dtor_expr;
          DAST._ICollKind _5325___mcc_h167 = _source187.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _5326___mcc_h168 = _source187.dtor_indices;
          bool _5327_isDatatype = _5051___mcc_h51;
          bool _5328_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5329_field = _5049___mcc_h49;
          DAST._IExpression _5330_on = _5048___mcc_h48;
          {
            RAST._IExpr _5331_onExpr;
            DCOMP._IOwnership _5332_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5333_recIdents;
            RAST._IExpr _out2382;
            DCOMP._IOwnership _out2383;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2384;
            DCOMP.COMP.GenExpr(_5330_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2382, out _out2383, out _out2384);
            _5331_onExpr = _out2382;
            _5332_onOwned = _out2383;
            _5333_recIdents = _out2384;
            if ((_5327_isDatatype) || (_5328_isConstant)) {
              r = ((_5331_onExpr).Sel(DCOMP.__default.escapeIdent(_5329_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2385;
              DCOMP._IOwnership _out2386;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2385, out _out2386);
              r = _out2385;
              resultingOwnership = _out2386;
            } else {
              Dafny.ISequence<Dafny.Rune> _5334_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5334_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5331_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5329_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2387;
              DCOMP._IOwnership _out2388;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5334_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2387, out _out2388);
              r = _out2387;
              resultingOwnership = _out2388;
            }
            readIdents = _5333_recIdents;
            return ;
          }
        } else if (_source187.is_IndexRange) {
          DAST._IExpression _5335___mcc_h172 = _source187.dtor_expr;
          bool _5336___mcc_h173 = _source187.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _5337___mcc_h174 = _source187.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _5338___mcc_h175 = _source187.dtor_high;
          bool _5339_isDatatype = _5051___mcc_h51;
          bool _5340_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5341_field = _5049___mcc_h49;
          DAST._IExpression _5342_on = _5048___mcc_h48;
          {
            RAST._IExpr _5343_onExpr;
            DCOMP._IOwnership _5344_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5345_recIdents;
            RAST._IExpr _out2389;
            DCOMP._IOwnership _out2390;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2391;
            DCOMP.COMP.GenExpr(_5342_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2389, out _out2390, out _out2391);
            _5343_onExpr = _out2389;
            _5344_onOwned = _out2390;
            _5345_recIdents = _out2391;
            if ((_5339_isDatatype) || (_5340_isConstant)) {
              r = ((_5343_onExpr).Sel(DCOMP.__default.escapeIdent(_5341_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2392;
              DCOMP._IOwnership _out2393;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2392, out _out2393);
              r = _out2392;
              resultingOwnership = _out2393;
            } else {
              Dafny.ISequence<Dafny.Rune> _5346_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5346_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5343_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5341_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2394;
              DCOMP._IOwnership _out2395;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5346_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2394, out _out2395);
              r = _out2394;
              resultingOwnership = _out2395;
            }
            readIdents = _5345_recIdents;
            return ;
          }
        } else if (_source187.is_TupleSelect) {
          DAST._IExpression _5347___mcc_h180 = _source187.dtor_expr;
          BigInteger _5348___mcc_h181 = _source187.dtor_index;
          bool _5349_isDatatype = _5051___mcc_h51;
          bool _5350_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5351_field = _5049___mcc_h49;
          DAST._IExpression _5352_on = _5048___mcc_h48;
          {
            RAST._IExpr _5353_onExpr;
            DCOMP._IOwnership _5354_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5355_recIdents;
            RAST._IExpr _out2396;
            DCOMP._IOwnership _out2397;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2398;
            DCOMP.COMP.GenExpr(_5352_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2396, out _out2397, out _out2398);
            _5353_onExpr = _out2396;
            _5354_onOwned = _out2397;
            _5355_recIdents = _out2398;
            if ((_5349_isDatatype) || (_5350_isConstant)) {
              r = ((_5353_onExpr).Sel(DCOMP.__default.escapeIdent(_5351_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2399;
              DCOMP._IOwnership _out2400;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2399, out _out2400);
              r = _out2399;
              resultingOwnership = _out2400;
            } else {
              Dafny.ISequence<Dafny.Rune> _5356_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5356_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5353_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5351_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2401;
              DCOMP._IOwnership _out2402;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5356_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2401, out _out2402);
              r = _out2401;
              resultingOwnership = _out2402;
            }
            readIdents = _5355_recIdents;
            return ;
          }
        } else if (_source187.is_Call) {
          DAST._IExpression _5357___mcc_h184 = _source187.dtor_on;
          DAST._ICallName _5358___mcc_h185 = _source187.dtor_callName;
          Dafny.ISequence<DAST._IType> _5359___mcc_h186 = _source187.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _5360___mcc_h187 = _source187.dtor_args;
          bool _5361_isDatatype = _5051___mcc_h51;
          bool _5362_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5363_field = _5049___mcc_h49;
          DAST._IExpression _5364_on = _5048___mcc_h48;
          {
            RAST._IExpr _5365_onExpr;
            DCOMP._IOwnership _5366_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5367_recIdents;
            RAST._IExpr _out2403;
            DCOMP._IOwnership _out2404;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2405;
            DCOMP.COMP.GenExpr(_5364_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2403, out _out2404, out _out2405);
            _5365_onExpr = _out2403;
            _5366_onOwned = _out2404;
            _5367_recIdents = _out2405;
            if ((_5361_isDatatype) || (_5362_isConstant)) {
              r = ((_5365_onExpr).Sel(DCOMP.__default.escapeIdent(_5363_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2406;
              DCOMP._IOwnership _out2407;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2406, out _out2407);
              r = _out2406;
              resultingOwnership = _out2407;
            } else {
              Dafny.ISequence<Dafny.Rune> _5368_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5368_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5365_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5363_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2408;
              DCOMP._IOwnership _out2409;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5368_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2408, out _out2409);
              r = _out2408;
              resultingOwnership = _out2409;
            }
            readIdents = _5367_recIdents;
            return ;
          }
        } else if (_source187.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _5369___mcc_h192 = _source187.dtor_params;
          DAST._IType _5370___mcc_h193 = _source187.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _5371___mcc_h194 = _source187.dtor_body;
          bool _5372_isDatatype = _5051___mcc_h51;
          bool _5373_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5374_field = _5049___mcc_h49;
          DAST._IExpression _5375_on = _5048___mcc_h48;
          {
            RAST._IExpr _5376_onExpr;
            DCOMP._IOwnership _5377_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5378_recIdents;
            RAST._IExpr _out2410;
            DCOMP._IOwnership _out2411;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2412;
            DCOMP.COMP.GenExpr(_5375_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2410, out _out2411, out _out2412);
            _5376_onExpr = _out2410;
            _5377_onOwned = _out2411;
            _5378_recIdents = _out2412;
            if ((_5372_isDatatype) || (_5373_isConstant)) {
              r = ((_5376_onExpr).Sel(DCOMP.__default.escapeIdent(_5374_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2413;
              DCOMP._IOwnership _out2414;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2413, out _out2414);
              r = _out2413;
              resultingOwnership = _out2414;
            } else {
              Dafny.ISequence<Dafny.Rune> _5379_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5379_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5376_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5374_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2415;
              DCOMP._IOwnership _out2416;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5379_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2415, out _out2416);
              r = _out2415;
              resultingOwnership = _out2416;
            }
            readIdents = _5378_recIdents;
            return ;
          }
        } else if (_source187.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5380___mcc_h198 = _source187.dtor_values;
          DAST._IType _5381___mcc_h199 = _source187.dtor_retType;
          DAST._IExpression _5382___mcc_h200 = _source187.dtor_expr;
          bool _5383_isDatatype = _5051___mcc_h51;
          bool _5384_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5385_field = _5049___mcc_h49;
          DAST._IExpression _5386_on = _5048___mcc_h48;
          {
            RAST._IExpr _5387_onExpr;
            DCOMP._IOwnership _5388_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5389_recIdents;
            RAST._IExpr _out2417;
            DCOMP._IOwnership _out2418;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2419;
            DCOMP.COMP.GenExpr(_5386_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2417, out _out2418, out _out2419);
            _5387_onExpr = _out2417;
            _5388_onOwned = _out2418;
            _5389_recIdents = _out2419;
            if ((_5383_isDatatype) || (_5384_isConstant)) {
              r = ((_5387_onExpr).Sel(DCOMP.__default.escapeIdent(_5385_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2420;
              DCOMP._IOwnership _out2421;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2420, out _out2421);
              r = _out2420;
              resultingOwnership = _out2421;
            } else {
              Dafny.ISequence<Dafny.Rune> _5390_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5390_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5387_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5385_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2422;
              DCOMP._IOwnership _out2423;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5390_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2422, out _out2423);
              r = _out2422;
              resultingOwnership = _out2423;
            }
            readIdents = _5389_recIdents;
            return ;
          }
        } else if (_source187.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _5391___mcc_h204 = _source187.dtor_name;
          DAST._IType _5392___mcc_h205 = _source187.dtor_typ;
          DAST._IExpression _5393___mcc_h206 = _source187.dtor_value;
          DAST._IExpression _5394___mcc_h207 = _source187.dtor_iifeBody;
          bool _5395_isDatatype = _5051___mcc_h51;
          bool _5396_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5397_field = _5049___mcc_h49;
          DAST._IExpression _5398_on = _5048___mcc_h48;
          {
            RAST._IExpr _5399_onExpr;
            DCOMP._IOwnership _5400_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5401_recIdents;
            RAST._IExpr _out2424;
            DCOMP._IOwnership _out2425;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2426;
            DCOMP.COMP.GenExpr(_5398_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2424, out _out2425, out _out2426);
            _5399_onExpr = _out2424;
            _5400_onOwned = _out2425;
            _5401_recIdents = _out2426;
            if ((_5395_isDatatype) || (_5396_isConstant)) {
              r = ((_5399_onExpr).Sel(DCOMP.__default.escapeIdent(_5397_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2427;
              DCOMP._IOwnership _out2428;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2427, out _out2428);
              r = _out2427;
              resultingOwnership = _out2428;
            } else {
              Dafny.ISequence<Dafny.Rune> _5402_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5402_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5399_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5397_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2429;
              DCOMP._IOwnership _out2430;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5402_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2429, out _out2430);
              r = _out2429;
              resultingOwnership = _out2430;
            }
            readIdents = _5401_recIdents;
            return ;
          }
        } else if (_source187.is_Apply) {
          DAST._IExpression _5403___mcc_h212 = _source187.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _5404___mcc_h213 = _source187.dtor_args;
          bool _5405_isDatatype = _5051___mcc_h51;
          bool _5406_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5407_field = _5049___mcc_h49;
          DAST._IExpression _5408_on = _5048___mcc_h48;
          {
            RAST._IExpr _5409_onExpr;
            DCOMP._IOwnership _5410_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5411_recIdents;
            RAST._IExpr _out2431;
            DCOMP._IOwnership _out2432;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2433;
            DCOMP.COMP.GenExpr(_5408_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2431, out _out2432, out _out2433);
            _5409_onExpr = _out2431;
            _5410_onOwned = _out2432;
            _5411_recIdents = _out2433;
            if ((_5405_isDatatype) || (_5406_isConstant)) {
              r = ((_5409_onExpr).Sel(DCOMP.__default.escapeIdent(_5407_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2434;
              DCOMP._IOwnership _out2435;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2434, out _out2435);
              r = _out2434;
              resultingOwnership = _out2435;
            } else {
              Dafny.ISequence<Dafny.Rune> _5412_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5412_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5409_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5407_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2436;
              DCOMP._IOwnership _out2437;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5412_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2436, out _out2437);
              r = _out2436;
              resultingOwnership = _out2437;
            }
            readIdents = _5411_recIdents;
            return ;
          }
        } else if (_source187.is_TypeTest) {
          DAST._IExpression _5413___mcc_h216 = _source187.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5414___mcc_h217 = _source187.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _5415___mcc_h218 = _source187.dtor_variant;
          bool _5416_isDatatype = _5051___mcc_h51;
          bool _5417_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5418_field = _5049___mcc_h49;
          DAST._IExpression _5419_on = _5048___mcc_h48;
          {
            RAST._IExpr _5420_onExpr;
            DCOMP._IOwnership _5421_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5422_recIdents;
            RAST._IExpr _out2438;
            DCOMP._IOwnership _out2439;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2440;
            DCOMP.COMP.GenExpr(_5419_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2438, out _out2439, out _out2440);
            _5420_onExpr = _out2438;
            _5421_onOwned = _out2439;
            _5422_recIdents = _out2440;
            if ((_5416_isDatatype) || (_5417_isConstant)) {
              r = ((_5420_onExpr).Sel(DCOMP.__default.escapeIdent(_5418_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2441;
              DCOMP._IOwnership _out2442;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2441, out _out2442);
              r = _out2441;
              resultingOwnership = _out2442;
            } else {
              Dafny.ISequence<Dafny.Rune> _5423_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5423_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5420_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5418_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2443;
              DCOMP._IOwnership _out2444;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5423_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2443, out _out2444);
              r = _out2443;
              resultingOwnership = _out2444;
            }
            readIdents = _5422_recIdents;
            return ;
          }
        } else if (_source187.is_InitializationValue) {
          DAST._IType _5424___mcc_h222 = _source187.dtor_typ;
          bool _5425_isDatatype = _5051___mcc_h51;
          bool _5426_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5427_field = _5049___mcc_h49;
          DAST._IExpression _5428_on = _5048___mcc_h48;
          {
            RAST._IExpr _5429_onExpr;
            DCOMP._IOwnership _5430_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5431_recIdents;
            RAST._IExpr _out2445;
            DCOMP._IOwnership _out2446;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2447;
            DCOMP.COMP.GenExpr(_5428_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2445, out _out2446, out _out2447);
            _5429_onExpr = _out2445;
            _5430_onOwned = _out2446;
            _5431_recIdents = _out2447;
            if ((_5425_isDatatype) || (_5426_isConstant)) {
              r = ((_5429_onExpr).Sel(DCOMP.__default.escapeIdent(_5427_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2448;
              DCOMP._IOwnership _out2449;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2448, out _out2449);
              r = _out2448;
              resultingOwnership = _out2449;
            } else {
              Dafny.ISequence<Dafny.Rune> _5432_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5432_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5429_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5427_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2450;
              DCOMP._IOwnership _out2451;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5432_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2450, out _out2451);
              r = _out2450;
              resultingOwnership = _out2451;
            }
            readIdents = _5431_recIdents;
            return ;
          }
        } else if (_source187.is_BoolBoundedPool) {
          bool _5433_isDatatype = _5051___mcc_h51;
          bool _5434_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5435_field = _5049___mcc_h49;
          DAST._IExpression _5436_on = _5048___mcc_h48;
          {
            RAST._IExpr _5437_onExpr;
            DCOMP._IOwnership _5438_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5439_recIdents;
            RAST._IExpr _out2452;
            DCOMP._IOwnership _out2453;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2454;
            DCOMP.COMP.GenExpr(_5436_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2452, out _out2453, out _out2454);
            _5437_onExpr = _out2452;
            _5438_onOwned = _out2453;
            _5439_recIdents = _out2454;
            if ((_5433_isDatatype) || (_5434_isConstant)) {
              r = ((_5437_onExpr).Sel(DCOMP.__default.escapeIdent(_5435_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2455;
              DCOMP._IOwnership _out2456;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2455, out _out2456);
              r = _out2455;
              resultingOwnership = _out2456;
            } else {
              Dafny.ISequence<Dafny.Rune> _5440_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5440_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5437_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5435_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2457;
              DCOMP._IOwnership _out2458;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5440_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2457, out _out2458);
              r = _out2457;
              resultingOwnership = _out2458;
            }
            readIdents = _5439_recIdents;
            return ;
          }
        } else if (_source187.is_SetBoundedPool) {
          DAST._IExpression _5441___mcc_h224 = _source187.dtor_of;
          bool _5442_isDatatype = _5051___mcc_h51;
          bool _5443_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5444_field = _5049___mcc_h49;
          DAST._IExpression _5445_on = _5048___mcc_h48;
          {
            RAST._IExpr _5446_onExpr;
            DCOMP._IOwnership _5447_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5448_recIdents;
            RAST._IExpr _out2459;
            DCOMP._IOwnership _out2460;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2461;
            DCOMP.COMP.GenExpr(_5445_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2459, out _out2460, out _out2461);
            _5446_onExpr = _out2459;
            _5447_onOwned = _out2460;
            _5448_recIdents = _out2461;
            if ((_5442_isDatatype) || (_5443_isConstant)) {
              r = ((_5446_onExpr).Sel(DCOMP.__default.escapeIdent(_5444_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2462;
              DCOMP._IOwnership _out2463;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2462, out _out2463);
              r = _out2462;
              resultingOwnership = _out2463;
            } else {
              Dafny.ISequence<Dafny.Rune> _5449_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5449_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5446_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5444_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2464;
              DCOMP._IOwnership _out2465;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5449_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2464, out _out2465);
              r = _out2464;
              resultingOwnership = _out2465;
            }
            readIdents = _5448_recIdents;
            return ;
          }
        } else if (_source187.is_SeqBoundedPool) {
          DAST._IExpression _5450___mcc_h226 = _source187.dtor_of;
          bool _5451___mcc_h227 = _source187.dtor_includeDuplicates;
          bool _5452_isDatatype = _5051___mcc_h51;
          bool _5453_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5454_field = _5049___mcc_h49;
          DAST._IExpression _5455_on = _5048___mcc_h48;
          {
            RAST._IExpr _5456_onExpr;
            DCOMP._IOwnership _5457_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5458_recIdents;
            RAST._IExpr _out2466;
            DCOMP._IOwnership _out2467;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2468;
            DCOMP.COMP.GenExpr(_5455_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2466, out _out2467, out _out2468);
            _5456_onExpr = _out2466;
            _5457_onOwned = _out2467;
            _5458_recIdents = _out2468;
            if ((_5452_isDatatype) || (_5453_isConstant)) {
              r = ((_5456_onExpr).Sel(DCOMP.__default.escapeIdent(_5454_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2469;
              DCOMP._IOwnership _out2470;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2469, out _out2470);
              r = _out2469;
              resultingOwnership = _out2470;
            } else {
              Dafny.ISequence<Dafny.Rune> _5459_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5459_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5456_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5454_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2471;
              DCOMP._IOwnership _out2472;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5459_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2471, out _out2472);
              r = _out2471;
              resultingOwnership = _out2472;
            }
            readIdents = _5458_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _5460___mcc_h230 = _source187.dtor_lo;
          DAST._IExpression _5461___mcc_h231 = _source187.dtor_hi;
          bool _5462_isDatatype = _5051___mcc_h51;
          bool _5463_isConstant = _5050___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _5464_field = _5049___mcc_h49;
          DAST._IExpression _5465_on = _5048___mcc_h48;
          {
            RAST._IExpr _5466_onExpr;
            DCOMP._IOwnership _5467_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5468_recIdents;
            RAST._IExpr _out2473;
            DCOMP._IOwnership _out2474;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2475;
            DCOMP.COMP.GenExpr(_5465_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2473, out _out2474, out _out2475);
            _5466_onExpr = _out2473;
            _5467_onOwned = _out2474;
            _5468_recIdents = _out2475;
            if ((_5462_isDatatype) || (_5463_isConstant)) {
              r = ((_5466_onExpr).Sel(DCOMP.__default.escapeIdent(_5464_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out2476;
              DCOMP._IOwnership _out2477;
              DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2476, out _out2477);
              r = _out2476;
              resultingOwnership = _out2477;
            } else {
              Dafny.ISequence<Dafny.Rune> _5469_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _5469_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_5466_onExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_5464_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out2478;
              DCOMP._IOwnership _out2479;
              DCOMP.COMP.FromOwnership(RAST.Expr.create_RawExpr(_5469_s), DCOMP.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out2478, out _out2479);
              r = _out2478;
              resultingOwnership = _out2479;
            }
            readIdents = _5468_recIdents;
            return ;
          }
        }
      } else if (_source184.is_SelectFn) {
        DAST._IExpression _5470___mcc_h234 = _source184.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _5471___mcc_h235 = _source184.dtor_field;
        bool _5472___mcc_h236 = _source184.dtor_onDatatype;
        bool _5473___mcc_h237 = _source184.dtor_isStatic;
        BigInteger _5474___mcc_h238 = _source184.dtor_arity;
        BigInteger _5475_arity = _5474___mcc_h238;
        bool _5476_isStatic = _5473___mcc_h237;
        bool _5477_isDatatype = _5472___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _5478_field = _5471___mcc_h235;
        DAST._IExpression _5479_on = _5470___mcc_h234;
        {
          RAST._IExpr _5480_onExpr;
          DCOMP._IOwnership _5481_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5482_recIdents;
          RAST._IExpr _out2480;
          DCOMP._IOwnership _out2481;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2482;
          DCOMP.COMP.GenExpr(_5479_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2480, out _out2481, out _out2482);
          _5480_onExpr = _out2480;
          _5481_onOwned = _out2481;
          _5482_recIdents = _out2482;
          Dafny.ISequence<Dafny.Rune> _5483_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _5484_onString;
          _5484_onString = (_5480_onExpr)._ToString(DCOMP.__default.IND);
          if (_5476_isStatic) {
            _5483_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5484_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_5478_field));
          } else {
            _5483_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _5483_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5483_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _5484_onString), ((object.Equals(_5481_onOwned, DCOMP.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _5485_args;
            _5485_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _5486_i;
            _5486_i = BigInteger.Zero;
            while ((_5486_i) < (_5475_arity)) {
              if ((_5486_i).Sign == 1) {
                _5485_args = Dafny.Sequence<Dafny.Rune>.Concat(_5485_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _5485_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5485_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_5486_i));
              _5486_i = (_5486_i) + (BigInteger.One);
            }
            _5483_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5483_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _5485_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _5483_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5483_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _5478_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _5485_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _5483_s = Dafny.Sequence<Dafny.Rune>.Concat(_5483_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _5483_s = Dafny.Sequence<Dafny.Rune>.Concat(_5483_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _5487_typeShape;
          _5487_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _5488_i;
          _5488_i = BigInteger.Zero;
          while ((_5488_i) < (_5475_arity)) {
            if ((_5488_i).Sign == 1) {
              _5487_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5487_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _5487_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5487_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _5488_i = (_5488_i) + (BigInteger.One);
          }
          _5487_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_5487_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _5483_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _5483_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _5487_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_5483_s);
          RAST._IExpr _out2483;
          DCOMP._IOwnership _out2484;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2483, out _out2484);
          r = _out2483;
          resultingOwnership = _out2484;
          readIdents = _5482_recIdents;
          return ;
        }
      } else if (_source184.is_Index) {
        DAST._IExpression _5489___mcc_h239 = _source184.dtor_expr;
        DAST._ICollKind _5490___mcc_h240 = _source184.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _5491___mcc_h241 = _source184.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _5492_indices = _5491___mcc_h241;
        DAST._ICollKind _5493_collKind = _5490___mcc_h240;
        DAST._IExpression _5494_on = _5489___mcc_h239;
        {
          RAST._IExpr _5495_onExpr;
          DCOMP._IOwnership _5496_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5497_recIdents;
          RAST._IExpr _out2485;
          DCOMP._IOwnership _out2486;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2487;
          DCOMP.COMP.GenExpr(_5494_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2485, out _out2486, out _out2487);
          _5495_onExpr = _out2485;
          _5496_onOwned = _out2486;
          _5497_recIdents = _out2487;
          readIdents = _5497_recIdents;
          r = _5495_onExpr;
          BigInteger _5498_i;
          _5498_i = BigInteger.Zero;
          while ((_5498_i) < (new BigInteger((_5492_indices).Count))) {
            if (object.Equals(_5493_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _5499_idx;
            DCOMP._IOwnership _5500_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5501_recIdentsIdx;
            RAST._IExpr _out2488;
            DCOMP._IOwnership _out2489;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2490;
            DCOMP.COMP.GenExpr((_5492_indices).Select(_5498_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2488, out _out2489, out _out2490);
            _5499_idx = _out2488;
            _5500_idxOwned = _out2489;
            _5501_recIdentsIdx = _out2490;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_5499_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5501_recIdentsIdx);
            _5498_i = (_5498_i) + (BigInteger.One);
          }
          RAST._IExpr _out2491;
          DCOMP._IOwnership _out2492;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2491, out _out2492);
          r = _out2491;
          resultingOwnership = _out2492;
          return ;
        }
      } else if (_source184.is_IndexRange) {
        DAST._IExpression _5502___mcc_h242 = _source184.dtor_expr;
        bool _5503___mcc_h243 = _source184.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _5504___mcc_h244 = _source184.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _5505___mcc_h245 = _source184.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _5506_high = _5505___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _5507_low = _5504___mcc_h244;
        bool _5508_isArray = _5503___mcc_h243;
        DAST._IExpression _5509_on = _5502___mcc_h242;
        {
          RAST._IExpr _5510_onExpr;
          DCOMP._IOwnership _5511_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5512_recIdents;
          RAST._IExpr _out2493;
          DCOMP._IOwnership _out2494;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2495;
          DCOMP.COMP.GenExpr(_5509_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2493, out _out2494, out _out2495);
          _5510_onExpr = _out2493;
          _5511_onOwned = _out2494;
          _5512_recIdents = _out2495;
          readIdents = _5512_recIdents;
          Dafny.ISequence<Dafny.Rune> _5513_methodName;
          _5513_methodName = (((_5507_low).is_Some) ? ((((_5506_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_5506_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _5514_arguments;
          _5514_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source188 = _5507_low;
          if (_source188.is_None) {
          } else {
            DAST._IExpression _5515___mcc_h274 = _source188.dtor_value;
            DAST._IExpression _5516_l = _5515___mcc_h274;
            {
              RAST._IExpr _5517_lExpr;
              DCOMP._IOwnership _5518___v122;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5519_recIdentsL;
              RAST._IExpr _out2496;
              DCOMP._IOwnership _out2497;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2498;
              DCOMP.COMP.GenExpr(_5516_l, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2496, out _out2497, out _out2498);
              _5517_lExpr = _out2496;
              _5518___v122 = _out2497;
              _5519_recIdentsL = _out2498;
              _5514_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5514_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_5517_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5519_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source189 = _5506_high;
          if (_source189.is_None) {
          } else {
            DAST._IExpression _5520___mcc_h275 = _source189.dtor_value;
            DAST._IExpression _5521_h = _5520___mcc_h275;
            {
              RAST._IExpr _5522_hExpr;
              DCOMP._IOwnership _5523___v123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5524_recIdentsH;
              RAST._IExpr _out2499;
              DCOMP._IOwnership _out2500;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2501;
              DCOMP.COMP.GenExpr(_5521_h, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2499, out _out2500, out _out2501);
              _5522_hExpr = _out2499;
              _5523___v123 = _out2500;
              _5524_recIdentsH = _out2501;
              _5514_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_5514_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_5522_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5524_recIdentsH);
            }
          }
          r = _5510_onExpr;
          if (_5508_isArray) {
            if (!(_5513_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _5513_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _5513_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _5513_methodName))).Apply(_5514_arguments);
          } else {
            if (!(_5513_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_5513_methodName)).Apply(_5514_arguments);
            }
          }
          RAST._IExpr _out2502;
          DCOMP._IOwnership _out2503;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2502, out _out2503);
          r = _out2502;
          resultingOwnership = _out2503;
          return ;
        }
      } else if (_source184.is_TupleSelect) {
        DAST._IExpression _5525___mcc_h246 = _source184.dtor_expr;
        BigInteger _5526___mcc_h247 = _source184.dtor_index;
        BigInteger _5527_idx = _5526___mcc_h247;
        DAST._IExpression _5528_on = _5525___mcc_h246;
        {
          RAST._IExpr _5529_onExpr;
          DCOMP._IOwnership _5530_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5531_recIdents;
          RAST._IExpr _out2504;
          DCOMP._IOwnership _out2505;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2506;
          DCOMP.COMP.GenExpr(_5528_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2504, out _out2505, out _out2506);
          _5529_onExpr = _out2504;
          _5530_onOwnership = _out2505;
          _5531_recIdents = _out2506;
          r = (_5529_onExpr).Sel(Std.Strings.__default.OfNat(_5527_idx));
          RAST._IExpr _out2507;
          DCOMP._IOwnership _out2508;
          DCOMP.COMP.FromOwnership(r, _5530_onOwnership, expectedOwnership, out _out2507, out _out2508);
          r = _out2507;
          resultingOwnership = _out2508;
          readIdents = _5531_recIdents;
          return ;
        }
      } else if (_source184.is_Call) {
        DAST._IExpression _5532___mcc_h248 = _source184.dtor_on;
        DAST._ICallName _5533___mcc_h249 = _source184.dtor_callName;
        Dafny.ISequence<DAST._IType> _5534___mcc_h250 = _source184.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _5535___mcc_h251 = _source184.dtor_args;
        Dafny.ISequence<DAST._IExpression> _5536_args = _5535___mcc_h251;
        Dafny.ISequence<DAST._IType> _5537_typeArgs = _5534___mcc_h250;
        DAST._ICallName _5538_name = _5533___mcc_h249;
        DAST._IExpression _5539_on = _5532___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _5540_typeExprs;
          _5540_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_5537_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _5541_typeI;
            _5541_typeI = BigInteger.Zero;
            while ((_5541_typeI) < (new BigInteger((_5537_typeArgs).Count))) {
              RAST._IType _5542_typeExpr;
              RAST._IType _out2509;
              _out2509 = DCOMP.COMP.GenType((_5537_typeArgs).Select(_5541_typeI), false, false);
              _5542_typeExpr = _out2509;
              _5540_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_5540_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_5542_typeExpr));
              _5541_typeI = (_5541_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _5543_argExprs;
          _5543_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _5544_i;
          _5544_i = BigInteger.Zero;
          while ((_5544_i) < (new BigInteger((_5536_args).Count))) {
            RAST._IExpr _5545_argExpr;
            DCOMP._IOwnership _5546_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5547_argIdents;
            RAST._IExpr _out2510;
            DCOMP._IOwnership _out2511;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2512;
            DCOMP.COMP.GenExpr((_5536_args).Select(_5544_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2510, out _out2511, out _out2512);
            _5545_argExpr = _out2510;
            _5546_argOwnership = _out2511;
            _5547_argIdents = _out2512;
            _5543_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_5543_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_5545_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5547_argIdents);
            _5544_i = (_5544_i) + (BigInteger.One);
          }
          RAST._IExpr _5548_onExpr;
          DCOMP._IOwnership _5549___v124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5550_recIdents;
          RAST._IExpr _out2513;
          DCOMP._IOwnership _out2514;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2515;
          DCOMP.COMP.GenExpr(_5539_on, selfIdent, env, DCOMP.Ownership.create_OwnershipAutoBorrowed(), out _out2513, out _out2514, out _out2515);
          _5548_onExpr = _out2513;
          _5549___v124 = _out2514;
          _5550_recIdents = _out2515;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5550_recIdents);
          Dafny.ISequence<Dafny.Rune> _5551_renderedName;
          _5551_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source190) => {
            if (_source190.is_Name) {
              Dafny.ISequence<Dafny.Rune> _5552___mcc_h276 = _source190.dtor_name;
              Dafny.ISequence<Dafny.Rune> _5553_ident = _5552___mcc_h276;
              return DCOMP.__default.escapeIdent(_5553_ident);
            } else if (_source190.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source190.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source190.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_5538_name);
          DAST._IExpression _source191 = _5539_on;
          if (_source191.is_Literal) {
            DAST._ILiteral _5554___mcc_h277 = _source191.dtor_Literal_a0;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _5555___mcc_h279 = _source191.dtor_Ident_a0;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5556___mcc_h281 = _source191.dtor_Companion_a0;
            {
              _5548_onExpr = (_5548_onExpr).MSel(_5551_renderedName);
            }
          } else if (_source191.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _5557___mcc_h283 = _source191.dtor_Tuple_a0;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5558___mcc_h285 = _source191.dtor_path;
            Dafny.ISequence<DAST._IType> _5559___mcc_h286 = _source191.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _5560___mcc_h287 = _source191.dtor_args;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _5561___mcc_h291 = _source191.dtor_dims;
            DAST._IType _5562___mcc_h292 = _source191.dtor_typ;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_DatatypeValue) {
            DAST._IDatatypeType _5563___mcc_h295 = _source191.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _5564___mcc_h296 = _source191.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _5565___mcc_h297 = _source191.dtor_variant;
            bool _5566___mcc_h298 = _source191.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _5567___mcc_h299 = _source191.dtor_contents;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Convert) {
            DAST._IExpression _5568___mcc_h305 = _source191.dtor_value;
            DAST._IType _5569___mcc_h306 = _source191.dtor_from;
            DAST._IType _5570___mcc_h307 = _source191.dtor_typ;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_SeqConstruct) {
            DAST._IExpression _5571___mcc_h311 = _source191.dtor_length;
            DAST._IExpression _5572___mcc_h312 = _source191.dtor_elem;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _5573___mcc_h315 = _source191.dtor_elements;
            DAST._IType _5574___mcc_h316 = _source191.dtor_typ;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _5575___mcc_h319 = _source191.dtor_elements;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _5576___mcc_h321 = _source191.dtor_elements;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _5577___mcc_h323 = _source191.dtor_mapElems;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_MapBuilder) {
            DAST._IType _5578___mcc_h325 = _source191.dtor_keyType;
            DAST._IType _5579___mcc_h326 = _source191.dtor_valueType;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_SeqUpdate) {
            DAST._IExpression _5580___mcc_h329 = _source191.dtor_expr;
            DAST._IExpression _5581___mcc_h330 = _source191.dtor_indexExpr;
            DAST._IExpression _5582___mcc_h331 = _source191.dtor_value;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_MapUpdate) {
            DAST._IExpression _5583___mcc_h335 = _source191.dtor_expr;
            DAST._IExpression _5584___mcc_h336 = _source191.dtor_indexExpr;
            DAST._IExpression _5585___mcc_h337 = _source191.dtor_value;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_SetBuilder) {
            DAST._IType _5586___mcc_h341 = _source191.dtor_elemType;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_ToMultiset) {
            DAST._IExpression _5587___mcc_h343 = _source191.dtor_ToMultiset_a0;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_This) {
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Ite) {
            DAST._IExpression _5588___mcc_h345 = _source191.dtor_cond;
            DAST._IExpression _5589___mcc_h346 = _source191.dtor_thn;
            DAST._IExpression _5590___mcc_h347 = _source191.dtor_els;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_UnOp) {
            DAST._IUnaryOp _5591___mcc_h351 = _source191.dtor_unOp;
            DAST._IExpression _5592___mcc_h352 = _source191.dtor_expr;
            DAST.Format._IUnOpFormat _5593___mcc_h353 = _source191.dtor_format1;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_BinOp) {
            DAST._IBinOp _5594___mcc_h357 = _source191.dtor_op;
            DAST._IExpression _5595___mcc_h358 = _source191.dtor_left;
            DAST._IExpression _5596___mcc_h359 = _source191.dtor_right;
            DAST.Format._IBinOpFormat _5597___mcc_h360 = _source191.dtor_format2;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_ArrayLen) {
            DAST._IExpression _5598___mcc_h365 = _source191.dtor_expr;
            BigInteger _5599___mcc_h366 = _source191.dtor_dim;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_MapKeys) {
            DAST._IExpression _5600___mcc_h369 = _source191.dtor_expr;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_MapValues) {
            DAST._IExpression _5601___mcc_h371 = _source191.dtor_expr;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Select) {
            DAST._IExpression _5602___mcc_h373 = _source191.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _5603___mcc_h374 = _source191.dtor_field;
            bool _5604___mcc_h375 = _source191.dtor_isConstant;
            bool _5605___mcc_h376 = _source191.dtor_onDatatype;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_SelectFn) {
            DAST._IExpression _5606___mcc_h381 = _source191.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _5607___mcc_h382 = _source191.dtor_field;
            bool _5608___mcc_h383 = _source191.dtor_onDatatype;
            bool _5609___mcc_h384 = _source191.dtor_isStatic;
            BigInteger _5610___mcc_h385 = _source191.dtor_arity;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Index) {
            DAST._IExpression _5611___mcc_h391 = _source191.dtor_expr;
            DAST._ICollKind _5612___mcc_h392 = _source191.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _5613___mcc_h393 = _source191.dtor_indices;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_IndexRange) {
            DAST._IExpression _5614___mcc_h397 = _source191.dtor_expr;
            bool _5615___mcc_h398 = _source191.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _5616___mcc_h399 = _source191.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _5617___mcc_h400 = _source191.dtor_high;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_TupleSelect) {
            DAST._IExpression _5618___mcc_h405 = _source191.dtor_expr;
            BigInteger _5619___mcc_h406 = _source191.dtor_index;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Call) {
            DAST._IExpression _5620___mcc_h409 = _source191.dtor_on;
            DAST._ICallName _5621___mcc_h410 = _source191.dtor_callName;
            Dafny.ISequence<DAST._IType> _5622___mcc_h411 = _source191.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _5623___mcc_h412 = _source191.dtor_args;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _5624___mcc_h417 = _source191.dtor_params;
            DAST._IType _5625___mcc_h418 = _source191.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _5626___mcc_h419 = _source191.dtor_body;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5627___mcc_h423 = _source191.dtor_values;
            DAST._IType _5628___mcc_h424 = _source191.dtor_retType;
            DAST._IExpression _5629___mcc_h425 = _source191.dtor_expr;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _5630___mcc_h429 = _source191.dtor_name;
            DAST._IType _5631___mcc_h430 = _source191.dtor_typ;
            DAST._IExpression _5632___mcc_h431 = _source191.dtor_value;
            DAST._IExpression _5633___mcc_h432 = _source191.dtor_iifeBody;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_Apply) {
            DAST._IExpression _5634___mcc_h437 = _source191.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _5635___mcc_h438 = _source191.dtor_args;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_TypeTest) {
            DAST._IExpression _5636___mcc_h441 = _source191.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5637___mcc_h442 = _source191.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _5638___mcc_h443 = _source191.dtor_variant;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_InitializationValue) {
            DAST._IType _5639___mcc_h447 = _source191.dtor_typ;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_BoolBoundedPool) {
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_SetBoundedPool) {
            DAST._IExpression _5640___mcc_h449 = _source191.dtor_of;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else if (_source191.is_SeqBoundedPool) {
            DAST._IExpression _5641___mcc_h451 = _source191.dtor_of;
            bool _5642___mcc_h452 = _source191.dtor_includeDuplicates;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          } else {
            DAST._IExpression _5643___mcc_h455 = _source191.dtor_lo;
            DAST._IExpression _5644___mcc_h456 = _source191.dtor_hi;
            {
              _5548_onExpr = (_5548_onExpr).Sel(_5551_renderedName);
            }
          }
          r = _5548_onExpr;
          if ((new BigInteger((_5540_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_5540_typeExprs);
          }
          r = (r).Apply(_5543_argExprs);
          RAST._IExpr _out2516;
          DCOMP._IOwnership _out2517;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2516, out _out2517);
          r = _out2516;
          resultingOwnership = _out2517;
          return ;
        }
      } else if (_source184.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _5645___mcc_h252 = _source184.dtor_params;
        DAST._IType _5646___mcc_h253 = _source184.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _5647___mcc_h254 = _source184.dtor_body;
        Dafny.ISequence<DAST._IStatement> _5648_body = _5647___mcc_h254;
        DAST._IType _5649_retType = _5646___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _5650_params = _5645___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5651_paramNames;
          _5651_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _5652_paramOwnerships;
          _5652_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
          BigInteger _5653_i;
          _5653_i = BigInteger.Zero;
          while ((_5653_i) < (new BigInteger((_5650_params).Count))) {
            Dafny.ISequence<Dafny.Rune> _5654_name;
            _5654_name = ((_5650_params).Select(_5653_i)).dtor_name;
            _5651_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_5651_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_5654_name));
            _5652_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_5652_paramOwnerships, _5654_name, DCOMP.Ownership.create_OwnershipBorrowed());
            _5653_i = (_5653_i) + (BigInteger.One);
          }
          DCOMP._IEnvironment _5655_env;
          _5655_env = DCOMP.Environment.create(_5651_paramNames, _5652_paramOwnerships);
          RAST._IExpr _5656_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5657_recIdents;
          RAST._IExpr _out2518;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2519;
          DCOMP.COMP.GenStmts(_5648_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _5655_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out2518, out _out2519);
          _5656_recursiveGen = _out2518;
          _5657_recIdents = _out2519;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _5658_allReadCloned;
          _5658_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_5657_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _5659_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_5657_recIdents).Elements) {
              _5659_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_5657_recIdents).Contains(_5659_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3236)");
          after__ASSIGN_SUCH_THAT_3: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_5659_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _5658_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_5658_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_5651_paramNames).Contains(_5659_next))) {
              _5658_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5658_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_5659_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_5659_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5659_next));
            }
            _5657_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5657_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5659_next));
          }
          Dafny.ISequence<Dafny.Rune> _5660_paramsString;
          _5660_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _5661_paramTypes;
          _5661_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _5653_i = BigInteger.Zero;
          while ((_5653_i) < (new BigInteger((_5650_params).Count))) {
            if ((_5653_i).Sign == 1) {
              _5660_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_5660_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _5661_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_5661_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _5662_typStr;
            RAST._IType _out2520;
            _out2520 = DCOMP.COMP.GenType(((_5650_params).Select(_5653_i)).dtor_typ, false, true);
            _5662_typStr = _out2520;
            _5660_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5660_paramsString, DCOMP.__default.escapeIdent(((_5650_params).Select(_5653_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_5662_typStr))._ToString(DCOMP.__default.IND));
            _5661_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_5661_paramTypes, (RAST.Type.create_Borrowed(_5662_typStr))._ToString(DCOMP.__default.IND));
            _5653_i = (_5653_i) + (BigInteger.One);
          }
          RAST._IType _5663_retTypeGen;
          RAST._IType _out2521;
          _out2521 = DCOMP.COMP.GenType(_5649_retType, false, true);
          _5663_retTypeGen = _out2521;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _5661_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_5663_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _5658_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _5660_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_5663_retTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_5656_recursiveGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out2522;
          DCOMP._IOwnership _out2523;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2522, out _out2523);
          r = _out2522;
          resultingOwnership = _out2523;
          return ;
        }
      } else if (_source184.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5664___mcc_h255 = _source184.dtor_values;
        DAST._IType _5665___mcc_h256 = _source184.dtor_retType;
        DAST._IExpression _5666___mcc_h257 = _source184.dtor_expr;
        DAST._IExpression _5667_expr = _5666___mcc_h257;
        DAST._IType _5668_retType = _5665___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _5669_values = _5664___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5670_paramNames;
          _5670_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMP._IOwnership> _5671_paramOwnerships;
          _5671_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5672_paramNamesSet;
          _5672_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _5673_i;
          _5673_i = BigInteger.Zero;
          while ((_5673_i) < (new BigInteger((_5669_values).Count))) {
            Dafny.ISequence<Dafny.Rune> _5674_name;
            _5674_name = (((_5669_values).Select(_5673_i)).dtor__0).dtor_name;
            _5670_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_5670_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_5674_name));
            _5671_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMP._IOwnership>.Update(_5671_paramOwnerships, _5674_name, DCOMP.Ownership.create_OwnershipBorrowed());
            _5672_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5672_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_5674_name));
            _5673_i = (_5673_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _5675_s;
          _5675_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _5676_paramsString;
          _5676_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _5673_i = BigInteger.Zero;
          while ((_5673_i) < (new BigInteger((_5669_values).Count))) {
            if ((_5673_i).Sign == 1) {
              _5676_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_5676_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _5677_typStr;
            RAST._IType _out2524;
            _out2524 = DCOMP.COMP.GenType((((_5669_values).Select(_5673_i)).dtor__0).dtor_typ, false, true);
            _5677_typStr = _out2524;
            RAST._IExpr _5678_valueGen;
            DCOMP._IOwnership _5679___v127;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5680_recIdents;
            RAST._IExpr _out2525;
            DCOMP._IOwnership _out2526;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2527;
            DCOMP.COMP.GenExpr(((_5669_values).Select(_5673_i)).dtor__1, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2525, out _out2526, out _out2527);
            _5678_valueGen = _out2525;
            _5679___v127 = _out2526;
            _5680_recIdents = _out2527;
            _5675_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5675_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_5669_values).Select(_5673_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_5677_typStr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5680_recIdents);
            _5675_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5675_s, (_5678_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _5673_i = (_5673_i) + (BigInteger.One);
          }
          DCOMP._IEnvironment _5681_newEnv;
          _5681_newEnv = DCOMP.Environment.create(_5670_paramNames, _5671_paramOwnerships);
          RAST._IExpr _5682_recGen;
          DCOMP._IOwnership _5683_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5684_recIdents;
          RAST._IExpr _out2528;
          DCOMP._IOwnership _out2529;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2530;
          DCOMP.COMP.GenExpr(_5667_expr, selfIdent, _5681_newEnv, expectedOwnership, out _out2528, out _out2529, out _out2530);
          _5682_recGen = _out2528;
          _5683_recOwned = _out2529;
          _5684_recIdents = _out2530;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5684_recIdents, _5672_paramNamesSet);
          _5675_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5675_s, (_5682_recGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_5675_s);
          RAST._IExpr _out2531;
          DCOMP._IOwnership _out2532;
          DCOMP.COMP.FromOwnership(r, _5683_recOwned, expectedOwnership, out _out2531, out _out2532);
          r = _out2531;
          resultingOwnership = _out2532;
          return ;
        }
      } else if (_source184.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _5685___mcc_h258 = _source184.dtor_name;
        DAST._IType _5686___mcc_h259 = _source184.dtor_typ;
        DAST._IExpression _5687___mcc_h260 = _source184.dtor_value;
        DAST._IExpression _5688___mcc_h261 = _source184.dtor_iifeBody;
        DAST._IExpression _5689_iifeBody = _5688___mcc_h261;
        DAST._IExpression _5690_value = _5687___mcc_h260;
        DAST._IType _5691_tpe = _5686___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _5692_name = _5685___mcc_h258;
        {
          RAST._IExpr _5693_valueGen;
          DCOMP._IOwnership _5694___v128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5695_recIdents;
          RAST._IExpr _out2533;
          DCOMP._IOwnership _out2534;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2535;
          DCOMP.COMP.GenExpr(_5690_value, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2533, out _out2534, out _out2535);
          _5693_valueGen = _out2533;
          _5694___v128 = _out2534;
          _5695_recIdents = _out2535;
          readIdents = _5695_recIdents;
          RAST._IType _5696_valueTypeGen;
          RAST._IType _out2536;
          _out2536 = DCOMP.COMP.GenType(_5691_tpe, false, true);
          _5696_valueTypeGen = _out2536;
          RAST._IExpr _5697_bodyGen;
          DCOMP._IOwnership _5698___v129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5699_bodyIdents;
          RAST._IExpr _out2537;
          DCOMP._IOwnership _out2538;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2539;
          DCOMP.COMP.GenExpr(_5689_iifeBody, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2537, out _out2538, out _out2539);
          _5697_bodyGen = _out2537;
          _5698___v129 = _out2538;
          _5699_bodyIdents = _out2539;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_5699_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_5692_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_5692_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_5696_valueTypeGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_5693_valueGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_5697_bodyGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out2540;
          DCOMP._IOwnership _out2541;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2540, out _out2541);
          r = _out2540;
          resultingOwnership = _out2541;
          return ;
        }
      } else if (_source184.is_Apply) {
        DAST._IExpression _5700___mcc_h262 = _source184.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _5701___mcc_h263 = _source184.dtor_args;
        Dafny.ISequence<DAST._IExpression> _5702_args = _5701___mcc_h263;
        DAST._IExpression _5703_func = _5700___mcc_h262;
        {
          RAST._IExpr _5704_funcExpr;
          DCOMP._IOwnership _5705___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5706_recIdents;
          RAST._IExpr _out2542;
          DCOMP._IOwnership _out2543;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2544;
          DCOMP.COMP.GenExpr(_5703_func, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2542, out _out2543, out _out2544);
          _5704_funcExpr = _out2542;
          _5705___v130 = _out2543;
          _5706_recIdents = _out2544;
          readIdents = _5706_recIdents;
          Dafny.ISequence<Dafny.Rune> _5707_argString;
          _5707_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _5708_i;
          _5708_i = BigInteger.Zero;
          while ((_5708_i) < (new BigInteger((_5702_args).Count))) {
            if ((_5708_i).Sign == 1) {
              _5707_argString = Dafny.Sequence<Dafny.Rune>.Concat(_5707_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _5709_argExpr;
            DCOMP._IOwnership _5710_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5711_argIdents;
            RAST._IExpr _out2545;
            DCOMP._IOwnership _out2546;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2547;
            DCOMP.COMP.GenExpr((_5702_args).Select(_5708_i), selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2545, out _out2546, out _out2547);
            _5709_argExpr = _out2545;
            _5710_argOwned = _out2546;
            _5711_argIdents = _out2547;
            Dafny.ISequence<Dafny.Rune> _5712_argExprString;
            _5712_argExprString = (_5709_argExpr)._ToString(DCOMP.__default.IND);
            if (object.Equals(_5710_argOwned, DCOMP.Ownership.create_OwnershipOwned())) {
              _5712_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _5712_argExprString);
            }
            _5707_argString = Dafny.Sequence<Dafny.Rune>.Concat(_5707_argString, _5712_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _5711_argIdents);
            _5708_i = (_5708_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_5704_funcExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _5707_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out2548;
          DCOMP._IOwnership _out2549;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2548, out _out2549);
          r = _out2548;
          resultingOwnership = _out2549;
          return ;
        }
      } else if (_source184.is_TypeTest) {
        DAST._IExpression _5713___mcc_h264 = _source184.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5714___mcc_h265 = _source184.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _5715___mcc_h266 = _source184.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _5716_variant = _5715___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5717_dType = _5714___mcc_h265;
        DAST._IExpression _5718_on = _5713___mcc_h264;
        {
          RAST._IExpr _5719_exprGen;
          DCOMP._IOwnership _5720___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5721_recIdents;
          RAST._IExpr _out2550;
          DCOMP._IOwnership _out2551;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2552;
          DCOMP.COMP.GenExpr(_5718_on, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2550, out _out2551, out _out2552);
          _5719_exprGen = _out2550;
          _5720___v131 = _out2551;
          _5721_recIdents = _out2552;
          RAST._IType _5722_dTypePath;
          RAST._IType _out2553;
          _out2553 = DCOMP.COMP.GenPath(_5717_dType);
          _5722_dTypePath = _out2553;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), (_5719_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), ((_5722_dTypePath).MSel(DCOMP.__default.escapeIdent(_5716_variant)))._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })")));
          RAST._IExpr _out2554;
          DCOMP._IOwnership _out2555;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2554, out _out2555);
          r = _out2554;
          resultingOwnership = _out2555;
          readIdents = _5721_recIdents;
          return ;
        }
      } else if (_source184.is_InitializationValue) {
        DAST._IType _5723___mcc_h267 = _source184.dtor_typ;
        DAST._IType _5724_typ = _5723___mcc_h267;
        {
          RAST._IType _5725_typExpr;
          RAST._IType _out2556;
          _out2556 = DCOMP.COMP.GenType(_5724_typ, false, false);
          _5725_typExpr = _out2556;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_5725_typExpr)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out2557;
          DCOMP._IOwnership _out2558;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2557, out _out2558);
          r = _out2557;
          resultingOwnership = _out2558;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source184.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out2559;
          DCOMP._IOwnership _out2560;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2559, out _out2560);
          r = _out2559;
          resultingOwnership = _out2560;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source184.is_SetBoundedPool) {
        DAST._IExpression _5726___mcc_h268 = _source184.dtor_of;
        DAST._IExpression _5727_of = _5726___mcc_h268;
        {
          RAST._IExpr _5728_exprGen;
          DCOMP._IOwnership _5729___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5730_recIdents;
          RAST._IExpr _out2561;
          DCOMP._IOwnership _out2562;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2563;
          DCOMP.COMP.GenExpr(_5727_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2561, out _out2562, out _out2563);
          _5728_exprGen = _out2561;
          _5729___v132 = _out2562;
          _5730_recIdents = _out2563;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5728_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out2564;
          DCOMP._IOwnership _out2565;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2564, out _out2565);
          r = _out2564;
          resultingOwnership = _out2565;
          readIdents = _5730_recIdents;
          return ;
        }
      } else if (_source184.is_SeqBoundedPool) {
        DAST._IExpression _5731___mcc_h269 = _source184.dtor_of;
        bool _5732___mcc_h270 = _source184.dtor_includeDuplicates;
        bool _5733_includeDuplicates = _5732___mcc_h270;
        DAST._IExpression _5734_of = _5731___mcc_h269;
        {
          RAST._IExpr _5735_exprGen;
          DCOMP._IOwnership _5736___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5737_recIdents;
          RAST._IExpr _out2566;
          DCOMP._IOwnership _out2567;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2568;
          DCOMP.COMP.GenExpr(_5734_of, selfIdent, env, DCOMP.Ownership.create_OwnershipBorrowed(), out _out2566, out _out2567, out _out2568);
          _5735_exprGen = _out2566;
          _5736___v133 = _out2567;
          _5737_recIdents = _out2568;
          Dafny.ISequence<Dafny.Rune> _5738_s;
          _5738_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_5735_exprGen)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_5733_includeDuplicates)) {
            _5738_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _5738_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_5738_s);
          RAST._IExpr _out2569;
          DCOMP._IOwnership _out2570;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2569, out _out2570);
          r = _out2569;
          resultingOwnership = _out2570;
          readIdents = _5737_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _5739___mcc_h271 = _source184.dtor_lo;
        DAST._IExpression _5740___mcc_h272 = _source184.dtor_hi;
        DAST._IExpression _5741_hi = _5740___mcc_h272;
        DAST._IExpression _5742_lo = _5739___mcc_h271;
        {
          RAST._IExpr _5743_lo;
          DCOMP._IOwnership _5744___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5745_recIdentsLo;
          RAST._IExpr _out2571;
          DCOMP._IOwnership _out2572;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2573;
          DCOMP.COMP.GenExpr(_5742_lo, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2571, out _out2572, out _out2573);
          _5743_lo = _out2571;
          _5744___v134 = _out2572;
          _5745_recIdentsLo = _out2573;
          RAST._IExpr _5746_hi;
          DCOMP._IOwnership _5747___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5748_recIdentsHi;
          RAST._IExpr _out2574;
          DCOMP._IOwnership _out2575;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2576;
          DCOMP.COMP.GenExpr(_5741_hi, selfIdent, env, DCOMP.Ownership.create_OwnershipOwned(), out _out2574, out _out2575, out _out2576);
          _5746_hi = _out2574;
          _5747___v135 = _out2575;
          _5748_recIdentsHi = _out2576;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_5743_lo)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_5746_hi)._ToString(DCOMP.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out2577;
          DCOMP._IOwnership _out2578;
          DCOMP.COMP.FromOwned(r, expectedOwnership, out _out2577, out _out2578);
          r = _out2577;
          resultingOwnership = _out2578;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5745_recIdentsLo, _5748_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _5749_i;
      _5749_i = BigInteger.Zero;
      while ((_5749_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _5750_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _5751_m;
        RAST._IMod _out2579;
        _out2579 = DCOMP.COMP.GenModule((p).Select(_5749_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _5751_m = _out2579;
        _5750_generated = (_5751_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_5749_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _5750_generated);
        _5749_i = (_5749_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _5752_i;
      _5752_i = BigInteger.Zero;
      while ((_5752_i) < (new BigInteger((fullName).Count))) {
        if ((_5752_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_5752_i)));
        _5752_i = (_5752_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMP
namespace DCOMPUTF16 {

  public partial class __default {
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in119 = (i).Drop(new BigInteger(2));
            i = _in119;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in120 = (i).Drop(BigInteger.One);
        i = _in120;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _5753___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_5753___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _5753___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_5753___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in121 = (i).Drop(new BigInteger(2));
        i = _in121;
        goto TAIL_CALL_START;
      } else {
        _5753___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_5753___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in122 = (i).Drop(BigInteger.One);
        i = _in122;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _5754___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START: ;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_5754___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _5754___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_5754___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in123 = (i).Drop(BigInteger.One);
        i = _in123;
        goto TAIL_CALL_START;
      } else {
        _5754___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_5754___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in124 = (i).Drop(BigInteger.One);
        i = _in124;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMPUTF16.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (!(DCOMPUTF16.__default.has__special(i)))) && (!(DCOMPUTF16.__default.reserved__rust).Contains(i))) && (!(DCOMPUTF16.__default.reserved__rust__need__prefix).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMPUTF16.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMPUTF16.__default.is__tuple__builder(i)) {
        return DCOMPUTF16.__default.better__tuple__builder__name(i);
      } else if ((DCOMPUTF16.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMPUTF16.__default.is__idiomatic__rust__id(i)) {
        return DCOMPUTF16.__default.idiomatic__rust(i);
      } else if (DCOMPUTF16.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _5755_r = DCOMPUTF16.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _5755_r);
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
    } }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust__need__prefix { get {
      return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("u128"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i8"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i16"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i32"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i64"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("i128"));
    } }
    public static bool UnicodeChars { get {
      return true;
    } }
    public static Dafny.ISequence<Dafny.Rune> DafnyChar { get {
      if (DCOMPUTF16.__default.UnicodeChars) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyChar");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyCharUTF16");
      }
    } }
    public static Dafny.ISequence<Dafny.Rune> IND { get {
      return RAST.__default.IND;
    } }
  }

  public interface _IOwnership {
    bool is_OwnershipOwned { get; }
    bool is_OwnershipBorrowed { get; }
    bool is_OwnershipBorrowedMut { get; }
    bool is_OwnershipAutoBorrowed { get; }
    _IOwnership DowncastClone();
  }
  public abstract class Ownership : _IOwnership {
    public Ownership() {
    }
    private static readonly DCOMPUTF16._IOwnership theDefault = create_OwnershipOwned();
    public static DCOMPUTF16._IOwnership Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IOwnership>(DCOMPUTF16.Ownership.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IOwnership> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IOwnership create_OwnershipOwned() {
      return new Ownership_OwnershipOwned();
    }
    public static _IOwnership create_OwnershipBorrowed() {
      return new Ownership_OwnershipBorrowed();
    }
    public static _IOwnership create_OwnershipBorrowedMut() {
      return new Ownership_OwnershipBorrowedMut();
    }
    public static _IOwnership create_OwnershipAutoBorrowed() {
      return new Ownership_OwnershipAutoBorrowed();
    }
    public bool is_OwnershipOwned { get { return this is Ownership_OwnershipOwned; } }
    public bool is_OwnershipBorrowed { get { return this is Ownership_OwnershipBorrowed; } }
    public bool is_OwnershipBorrowedMut { get { return this is Ownership_OwnershipBorrowedMut; } }
    public bool is_OwnershipAutoBorrowed { get { return this is Ownership_OwnershipAutoBorrowed; } }
    public static System.Collections.Generic.IEnumerable<_IOwnership> AllSingletonConstructors {
      get {
        yield return Ownership.create_OwnershipOwned();
        yield return Ownership.create_OwnershipBorrowed();
        yield return Ownership.create_OwnershipBorrowedMut();
        yield return Ownership.create_OwnershipAutoBorrowed();
      }
    }
    public abstract _IOwnership DowncastClone();
  }
  public class Ownership_OwnershipOwned : Ownership {
    public Ownership_OwnershipOwned() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipOwned();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipOwned";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowed : Ownership {
    public Ownership_OwnershipBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowed";
      return s;
    }
  }
  public class Ownership_OwnershipBorrowedMut : Ownership {
    public Ownership_OwnershipBorrowedMut() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipBorrowedMut();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipBorrowedMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipBorrowedMut";
      return s;
    }
  }
  public class Ownership_OwnershipAutoBorrowed : Ownership {
    public Ownership_OwnershipAutoBorrowed() : base() {
    }
    public override _IOwnership DowncastClone() {
      if (this is _IOwnership dt) { return dt; }
      return new Ownership_OwnershipAutoBorrowed();
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Ownership_OwnershipAutoBorrowed;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Ownership.OwnershipAutoBorrowed";
      return s;
    }
  }

  public interface _IEnvironment {
    bool is_Environment { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names { get; }
    Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> dtor_ownerships { get; }
    _IEnvironment DowncastClone();
    bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name);
    bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name);
    DCOMPUTF16._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMPUTF16._IOwnership ownership);
  }
  public class Environment : _IEnvironment {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _names;
    public readonly Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _ownerships;
    public Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      this._names = names;
      this._ownerships = ownerships;
    }
    public _IEnvironment DowncastClone() {
      if (this is _IEnvironment dt) { return dt; }
      return new Environment(_names, _ownerships);
    }
    public override bool Equals(object other) {
      var oth = other as DCOMPUTF16.Environment;
      return oth != null && object.Equals(this._names, oth._names) && object.Equals(this._ownerships, oth._ownerships);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._names));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ownerships));
      return (int) hash;
    }
    public override string ToString() {
      string s = "DafnyToRustCompilerUTF16.Environment.Environment";
      s += "(";
      s += Dafny.Helpers.ToString(this._names);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ownerships);
      s += ")";
      return s;
    }
    private static readonly DCOMPUTF16._IEnvironment theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Empty);
    public static DCOMPUTF16._IEnvironment Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment> _TYPE = new Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment>(DCOMPUTF16.Environment.Default());
    public static Dafny.TypeDescriptor<DCOMPUTF16._IEnvironment> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnvironment create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      return new Environment(names, ownerships);
    }
    public static _IEnvironment create_Environment(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> names, Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> ownerships) {
      return create(names, ownerships);
    }
    public bool is_Environment { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_names {
      get {
        return this._names;
      }
    }
    public Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> dtor_ownerships {
      get {
        return this._ownerships;
      }
    }
    public static DCOMPUTF16._IEnvironment Empty() {
      return DCOMPUTF16.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements());
    }
    public bool IsBorrowed(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Select((this).dtor_ownerships,name), DCOMPUTF16.Ownership.create_OwnershipBorrowed()));
    }
    public bool IsBorrowedMut(Dafny.ISequence<Dafny.Rune> name) {
      return (((this).dtor_ownerships).Contains(name)) && (object.Equals(Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Select((this).dtor_ownerships,name), DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()));
    }
    public DCOMPUTF16._IEnvironment Add(Dafny.ISequence<Dafny.Rune> name, DCOMPUTF16._IOwnership ownership)
    {
      return DCOMPUTF16.Environment.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat((this).dtor_names, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(name)), Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update((this).dtor_ownerships, name, ownership));
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _5756_body;
      Dafny.ISequence<RAST._IModDecl> _out2580;
      _out2580 = DCOMPUTF16.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _5756_body = _out2580;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMPUTF16.__default.escapeIdent((mod).dtor_name), _5756_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _5757_i;
      _5757_i = BigInteger.Zero;
      while ((_5757_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _5758_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source192 = (body).Select(_5757_i);
        if (_source192.is_Module) {
          DAST._IModule _5759___mcc_h0 = _source192.dtor_Module_a0;
          DAST._IModule _5760_m = _5759___mcc_h0;
          RAST._IMod _5761_mm;
          RAST._IMod _out2581;
          _out2581 = DCOMPUTF16.COMP.GenModule(_5760_m, containingPath);
          _5761_mm = _out2581;
          _5758_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_5761_mm));
        } else if (_source192.is_Class) {
          DAST._IClass _5762___mcc_h1 = _source192.dtor_Class_a0;
          DAST._IClass _5763_c = _5762___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out2582;
          _out2582 = DCOMPUTF16.COMP.GenClass(_5763_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_5763_c).dtor_name)));
          _5758_generated = _out2582;
        } else if (_source192.is_Trait) {
          DAST._ITrait _5764___mcc_h2 = _source192.dtor_Trait_a0;
          DAST._ITrait _5765_t = _5764___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _5766_tt;
          Dafny.ISequence<Dafny.Rune> _out2583;
          _out2583 = DCOMPUTF16.COMP.GenTrait(_5765_t, containingPath);
          _5766_tt = _out2583;
          _5758_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_5766_tt));
        } else if (_source192.is_Newtype) {
          DAST._INewtype _5767___mcc_h3 = _source192.dtor_Newtype_a0;
          DAST._INewtype _5768_n = _5767___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out2584;
          _out2584 = DCOMPUTF16.COMP.GenNewtype(_5768_n);
          _5758_generated = _out2584;
        } else {
          DAST._IDatatype _5769___mcc_h4 = _source192.dtor_Datatype_a0;
          DAST._IDatatype _5770_d = _5769___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out2585;
          _out2585 = DCOMPUTF16.COMP.GenDatatype(_5770_d);
          _5758_generated = _out2585;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _5758_generated);
        _5757_i = (_5757_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<RAST._ITypeParam> typeParams, out Dafny.ISequence<RAST._ITypeParam> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints)
    {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      constrainedTypeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _5771_tpI;
      _5771_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        while ((_5771_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _5772_tp;
          _5772_tp = (@params).Select(_5771_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_5772_tp));
          RAST._IType _5773_genTp;
          RAST._IType _out2586;
          _out2586 = DCOMPUTF16.COMP.GenType(_5772_tp, false, false);
          _5773_genTp = _out2586;
          typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_5773_genTp)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements())));
          _5771_tpI = (_5771_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<RAST._IType> _5774_baseConstraints;
      _5774_baseConstraints = Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.StaticTrait);
      constrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(typeParams, _5774_baseConstraints);
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _5775_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _5776_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _5777_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _5778_whereConstraints;
      Dafny.ISet<DAST._IType> _out2587;
      Dafny.ISequence<RAST._ITypeParam> _out2588;
      Dafny.ISequence<RAST._ITypeParam> _out2589;
      Dafny.ISequence<Dafny.Rune> _out2590;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2587, out _out2588, out _out2589, out _out2590);
      _5775_typeParamsSet = _out2587;
      _5776_sTypeParams = _out2588;
      _5777_sConstrainedTypeParams = _out2589;
      _5778_whereConstraints = _out2590;
      Dafny.ISequence<Dafny.Rune> _5779_constrainedTypeParams;
      _5779_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_5777_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _5780_fields;
      _5780_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _5781_fieldInits;
      _5781_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _5782_fieldI;
      _5782_fieldI = BigInteger.Zero;
      while ((_5782_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _5783_field;
        _5783_field = ((c).dtor_fields).Select(_5782_fieldI);
        RAST._IType _5784_fieldType;
        RAST._IType _out2591;
        _out2591 = DCOMPUTF16.COMP.GenType(((_5783_field).dtor_formal).dtor_typ, false, false);
        _5784_fieldType = _out2591;
        _5780_fields = Dafny.Sequence<RAST._IFormal>.Concat(_5780_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMPUTF16.__default.escapeIdent(((_5783_field).dtor_formal).dtor_name)), RAST.Type.create_TypeApp(RAST.__default.refcell__type, Dafny.Sequence<RAST._IType>.FromElements(_5784_fieldType)))));
        Std.Wrappers._IOption<DAST._IExpression> _source193 = (_5783_field).dtor_defaultValue;
        if (_source193.is_None) {
          {
            _5781_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5781_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_5783_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _5785___mcc_h0 = _source193.dtor_value;
          DAST._IExpression _5786_e = _5785___mcc_h0;
          {
            RAST._IExpr _5787_eStr;
            DCOMPUTF16._IOwnership _5788___v36;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5789___v37;
            RAST._IExpr _out2592;
            DCOMPUTF16._IOwnership _out2593;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2594;
            DCOMPUTF16.COMP.GenExpr(_5786_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2592, out _out2593, out _out2594);
            _5787_eStr = _out2592;
            _5788___v36 = _out2593;
            _5789___v37 = _out2594;
            _5781_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5781_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(((_5783_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), (_5787_eStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _5782_fieldI = (_5782_fieldI) + (BigInteger.One);
      }
      BigInteger _5790_typeParamI;
      _5790_typeParamI = BigInteger.Zero;
      while ((_5790_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        RAST._IType _5791_tpeGen;
        RAST._IType _out2595;
        _out2595 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_5790_typeParamI), false, false);
        _5791_tpeGen = _out2595;
        _5780_fields = Dafny.Sequence<RAST._IFormal>.Concat(_5780_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_5790_typeParamI)), RAST.Type.create_TypeApp(((RAST.__default.std__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("marker"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("PhantomData")), Dafny.Sequence<RAST._IType>.FromElements(_5791_tpeGen)))));
        _5781_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5781_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_5790_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _5790_typeParamI = (_5790_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _5792_struct;
      _5792_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMPUTF16.__default.escapeIdent((c).dtor_name), _5776_sTypeParams, RAST.Formals.create_NamedFormals(_5780_fields));
      Dafny.ISequence<RAST._IType> _5793_typeParamsAsTypes;
      _5793_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_5794_typeParam) => {
        return RAST.__default.RawType((_5794_typeParam).dtor_content);
      })), _5776_sTypeParams);
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_5792_struct));
      Dafny.ISequence<RAST._IImplMember> _5795_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _5796_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2596;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2597;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(path, (c).dtor_attributes))), _5775_typeParamsSet, out _out2596, out _out2597);
      _5795_implBodyRaw = _out2596;
      _5796_traitBodies = _out2597;
      Dafny.ISequence<RAST._IImplMember> _5797_implBody;
      _5797_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5781_fieldInits))))), _5795_implBodyRaw);
      RAST._IImpl _5798_i;
      _5798_i = RAST.Impl.create_Impl(_5777_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5793_typeParamsAsTypes), _5778_whereConstraints, _5797_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_5798_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _5799_i;
        _5799_i = BigInteger.Zero;
        while ((_5799_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _5800_superClass;
          _5800_superClass = ((c).dtor_superClasses).Select(_5799_i);
          DAST._IType _source194 = _5800_superClass;
          if (_source194.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5801___mcc_h1 = _source194.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _5802___mcc_h2 = _source194.dtor_typeArgs;
            DAST._IResolvedType _5803___mcc_h3 = _source194.dtor_resolved;
            DAST._IResolvedType _source195 = _5803___mcc_h3;
            if (_source195.is_Datatype) {
              DAST._IDatatypeType _5804___mcc_h7 = _source195.dtor_datatypeType;
            } else if (_source195.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5805___mcc_h9 = _source195.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _5806___mcc_h10 = _source195.dtor_attributes;
              Dafny.ISequence<DAST._IType> _5807_typeArgs = _5802___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5808_traitPath = _5801___mcc_h1;
              {
                RAST._IType _5809_pathStr;
                RAST._IType _out2598;
                _out2598 = DCOMPUTF16.COMP.GenPath(_5808_traitPath);
                _5809_pathStr = _out2598;
                Dafny.ISequence<RAST._IType> _5810_typeArgs;
                Dafny.ISequence<RAST._IType> _out2599;
                _out2599 = DCOMPUTF16.COMP.GenTypeArgs(_5807_typeArgs, false, false);
                _5810_typeArgs = _out2599;
                Dafny.ISequence<RAST._IImplMember> _5811_body;
                _5811_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_5796_traitBodies).Contains(_5808_traitPath)) {
                  _5811_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_5796_traitBodies,_5808_traitPath);
                }
                RAST._IType _5812_genSelfPath;
                RAST._IType _out2600;
                _out2600 = DCOMPUTF16.COMP.GenPath(path);
                _5812_genSelfPath = _out2600;
                RAST._IModDecl _5813_x;
                _5813_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5777_sConstrainedTypeParams, RAST.Type.create_TypeApp(_5809_pathStr, _5810_typeArgs), RAST.__default.Rc(RAST.Type.create_TypeApp(_5812_genSelfPath, _5793_typeParamsAsTypes)), _5778_whereConstraints, _5811_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_5813_x));
              }
            } else {
              DAST._IType _5814___mcc_h13 = _source195.dtor_baseType;
              DAST._INewtypeRange _5815___mcc_h14 = _source195.dtor_range;
              bool _5816___mcc_h15 = _source195.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _5817___mcc_h16 = _source195.dtor_attributes;
            }
          } else if (_source194.is_Nullable) {
            DAST._IType _5818___mcc_h21 = _source194.dtor_Nullable_a0;
          } else if (_source194.is_Tuple) {
            Dafny.ISequence<DAST._IType> _5819___mcc_h23 = _source194.dtor_Tuple_a0;
          } else if (_source194.is_Array) {
            DAST._IType _5820___mcc_h25 = _source194.dtor_element;
            BigInteger _5821___mcc_h26 = _source194.dtor_dims;
          } else if (_source194.is_Seq) {
            DAST._IType _5822___mcc_h29 = _source194.dtor_element;
          } else if (_source194.is_Set) {
            DAST._IType _5823___mcc_h31 = _source194.dtor_element;
          } else if (_source194.is_Multiset) {
            DAST._IType _5824___mcc_h33 = _source194.dtor_element;
          } else if (_source194.is_Map) {
            DAST._IType _5825___mcc_h35 = _source194.dtor_key;
            DAST._IType _5826___mcc_h36 = _source194.dtor_value;
          } else if (_source194.is_SetBuilder) {
            DAST._IType _5827___mcc_h39 = _source194.dtor_element;
          } else if (_source194.is_MapBuilder) {
            DAST._IType _5828___mcc_h41 = _source194.dtor_key;
            DAST._IType _5829___mcc_h42 = _source194.dtor_value;
          } else if (_source194.is_Arrow) {
            Dafny.ISequence<DAST._IType> _5830___mcc_h45 = _source194.dtor_args;
            DAST._IType _5831___mcc_h46 = _source194.dtor_result;
          } else if (_source194.is_Primitive) {
            DAST._IPrimitive _5832___mcc_h49 = _source194.dtor_Primitive_a0;
          } else if (_source194.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _5833___mcc_h51 = _source194.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _5834___mcc_h53 = _source194.dtor_TypeArg_a0;
          }
          _5799_i = (_5799_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _5835_d;
      _5835_d = RAST.Impl.create_ImplFor(_5777_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5793_typeParamsAsTypes), _5778_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _5836_defaultImpl;
      _5836_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_5835_d));
      RAST._IImpl _5837_p;
      _5837_p = RAST.Impl.create_ImplFor(_5777_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5793_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _5838_printImpl;
      _5838_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_5837_p));
      RAST._IImpl _5839_pp;
      _5839_pp = RAST.Impl.create_ImplFor(_5776_sTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5793_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.__default.Self)), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _5840_ptrPartialEqImpl;
      _5840_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_5839_pp));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _5836_defaultImpl), _5838_printImpl), _5840_ptrPartialEqImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _5841_typeParamsSet;
      _5841_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<RAST._IType> _5842_typeParams;
      _5842_typeParams = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _5843_tpI;
      _5843_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        while ((_5843_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _5844_tp;
          _5844_tp = ((t).dtor_typeParams).Select(_5843_tpI);
          _5841_typeParamsSet = Dafny.Set<DAST._IType>.Union(_5841_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_5844_tp));
          RAST._IType _5845_genTp;
          RAST._IType _out2601;
          _out2601 = DCOMPUTF16.COMP.GenType(_5844_tp, false, false);
          _5845_genTp = _out2601;
          _5842_typeParams = Dafny.Sequence<RAST._IType>.Concat(_5842_typeParams, Dafny.Sequence<RAST._IType>.FromElements(_5845_genTp));
          _5843_tpI = (_5843_tpI) + (BigInteger.One);
        }
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5846_fullPath;
      _5846_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _5847_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _5848___v41;
      Dafny.ISequence<RAST._IImplMember> _out2602;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2603;
      DCOMPUTF16.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_5846_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_5846_fullPath, (t).dtor_attributes)), _5841_typeParamsSet, out _out2602, out _out2603);
      _5847_implBody = _out2602;
      _5848___v41 = _out2603;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<RAST._ITypeParam>.FromElements(), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((t).dtor_name)), _5842_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _5847_implBody)))._ToString(DCOMPUTF16.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _5849_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _5850_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _5851_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _5852_whereConstraints;
      Dafny.ISet<DAST._IType> _out2604;
      Dafny.ISequence<RAST._ITypeParam> _out2605;
      Dafny.ISequence<RAST._ITypeParam> _out2606;
      Dafny.ISequence<Dafny.Rune> _out2607;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2604, out _out2605, out _out2606, out _out2607);
      _5849_typeParamsSet = _out2604;
      _5850_sTypeParams = _out2605;
      _5851_sConstrainedTypeParams = _out2606;
      _5852_whereConstraints = _out2607;
      Dafny.ISequence<RAST._IType> _5853_typeParamsAsTypes;
      _5853_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_5854_t) => {
        return RAST.__default.RawType((_5854_t).dtor_content);
      })), _5850_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _5855_constrainedTypeParams;
      _5855_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_5851_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      RAST._IType _5856_underlyingType = RAST.Type.Default();
      Std.Wrappers._IOption<RAST._IType> _source196 = DCOMPUTF16.COMP.NewtypeToRustType((c).dtor_base, (c).dtor_range);
      if (_source196.is_None) {
        RAST._IType _out2608;
        _out2608 = DCOMPUTF16.COMP.GenType((c).dtor_base, false, false);
        _5856_underlyingType = _out2608;
      } else {
        RAST._IType _5857___mcc_h0 = _source196.dtor_value;
        RAST._IType _5858_v = _5857___mcc_h0;
        _5856_underlyingType = _5858_v;
      }
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMPUTF16.__default.escapeIdent((c).dtor_name), _5850_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._INamelessFormal>.FromElements(RAST.NamelessFormal.create(RAST.Visibility.create_PUB(), _5856_underlyingType))))));
      Dafny.ISequence<Dafny.Rune> _5859_fnBody;
      _5859_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source197 = (c).dtor_witnessExpr;
      if (_source197.is_None) {
        {
          _5859_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5859_fnBody, DCOMPUTF16.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _5860___mcc_h1 = _source197.dtor_value;
        DAST._IExpression _5861_e = _5860___mcc_h1;
        {
          RAST._IExpr _5862_eStr;
          DCOMPUTF16._IOwnership _5863___v42;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5864___v43;
          RAST._IExpr _out2609;
          DCOMPUTF16._IOwnership _out2610;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2611;
          DCOMPUTF16.COMP.GenExpr(_5861_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2609, out _out2610, out _out2611);
          _5862_eStr = _out2609;
          _5863___v42 = _out2610;
          _5864___v43 = _out2611;
          _5859_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5859_fnBody, DCOMPUTF16.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_5862_eStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _5865_body;
      _5865_body = RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_5859_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5851_sConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5853_typeParamsAsTypes), _5852_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_5865_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5851_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5853_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5851_sConstrainedTypeParams, RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5853_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), (_5856_underlyingType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c)
    {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _5866_typeParamsSet;
      Dafny.ISequence<RAST._ITypeParam> _5867_sTypeParams;
      Dafny.ISequence<RAST._ITypeParam> _5868_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _5869_whereConstraints;
      Dafny.ISet<DAST._IType> _out2612;
      Dafny.ISequence<RAST._ITypeParam> _out2613;
      Dafny.ISequence<RAST._ITypeParam> _out2614;
      Dafny.ISequence<Dafny.Rune> _out2615;
      DCOMPUTF16.COMP.GenTypeParameters((c).dtor_typeParams, out _out2612, out _out2613, out _out2614, out _out2615);
      _5866_typeParamsSet = _out2612;
      _5867_sTypeParams = _out2613;
      _5868_sConstrainedTypeParams = _out2614;
      _5869_whereConstraints = _out2615;
      Dafny.ISequence<RAST._IType> _5870_typeParamsAsTypes;
      _5870_typeParamsAsTypes = Std.Collections.Seq.__default.Map<RAST._ITypeParam, RAST._IType>(((System.Func<RAST._ITypeParam, RAST._IType>)((_5871_t) => {
        return RAST.__default.RawType((_5871_t).dtor_content);
      })), _5867_sTypeParams);
      Dafny.ISequence<Dafny.Rune> _5872_constrainedTypeParams;
      _5872_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_5868_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.IND, DCOMPUTF16.__default.IND));
      Dafny.ISequence<RAST._IEnumCase> _5873_ctors;
      _5873_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _5874_i;
      _5874_i = BigInteger.Zero;
      while ((_5874_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _5875_ctor;
        _5875_ctor = ((c).dtor_ctors).Select(_5874_i);
        Dafny.ISequence<RAST._IFormal> _5876_ctorArgs;
        _5876_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _5877_j;
        _5877_j = BigInteger.Zero;
        while ((_5877_j) < (new BigInteger(((_5875_ctor).dtor_args).Count))) {
          DAST._IFormal _5878_formal;
          _5878_formal = ((_5875_ctor).dtor_args).Select(_5877_j);
          RAST._IType _5879_formalType;
          RAST._IType _out2616;
          _out2616 = DCOMPUTF16.COMP.GenType((_5878_formal).dtor_typ, false, false);
          _5879_formalType = _out2616;
          if ((c).dtor_isCo) {
            _5876_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_5876_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_5878_formal).dtor_name), RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("LazyFieldWrapper")), Dafny.Sequence<RAST._IType>.FromElements(_5879_formalType)))));
          } else {
            _5876_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_5876_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_5878_formal).dtor_name), _5879_formalType)));
          }
          _5877_j = (_5877_j) + (BigInteger.One);
        }
        _5873_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_5873_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMPUTF16.__default.escapeIdent((_5875_ctor).dtor_name), RAST.Formals.create_NamedFormals(_5876_ctorArgs))));
        _5874_i = (_5874_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5880_selfPath;
      _5880_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _5881_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _5882_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out2617;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> _out2618;
      DCOMPUTF16.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(DAST.DatatypeType.create(_5880_selfPath, (c).dtor_attributes))), _5866_typeParamsSet, out _out2617, out _out2618);
      _5881_implBodyRaw = _out2617;
      _5882_traitBodies = _out2618;
      Dafny.ISequence<RAST._IImplMember> _5883_implBody;
      _5883_implBody = _5881_implBodyRaw;
      _5874_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _5884_emittedFields;
      _5884_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_5874_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _5885_ctor;
        _5885_ctor = ((c).dtor_ctors).Select(_5874_i);
        BigInteger _5886_j;
        _5886_j = BigInteger.Zero;
        while ((_5886_j) < (new BigInteger(((_5885_ctor).dtor_args).Count))) {
          DAST._IFormal _5887_formal;
          _5887_formal = ((_5885_ctor).dtor_args).Select(_5886_j);
          if (!((_5884_emittedFields).Contains((_5887_formal).dtor_name))) {
            _5884_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_5884_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_5887_formal).dtor_name));
            RAST._IType _5888_formalType;
            RAST._IType _out2619;
            _out2619 = DCOMPUTF16.COMP.GenType((_5887_formal).dtor_typ, false, false);
            _5888_formalType = _out2619;
            Dafny.ISequence<RAST._IMatchCase> _5889_cases;
            _5889_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _5890_k;
            _5890_k = BigInteger.Zero;
            while ((_5890_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _5891_ctor2;
              _5891_ctor2 = ((c).dtor_ctors).Select(_5890_k);
              Dafny.ISequence<Dafny.Rune> _5892_pattern;
              _5892_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent((_5891_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _5893_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _5894_l;
              _5894_l = BigInteger.Zero;
              bool _5895_hasMatchingField;
              _5895_hasMatchingField = false;
              while ((_5894_l) < (new BigInteger(((_5891_ctor2).dtor_args).Count))) {
                DAST._IFormal _5896_formal2;
                _5896_formal2 = ((_5891_ctor2).dtor_args).Select(_5894_l);
                if (((_5887_formal).dtor_name).Equals((_5896_formal2).dtor_name)) {
                  _5895_hasMatchingField = true;
                }
                _5892_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5892_pattern, DCOMPUTF16.__default.escapeIdent((_5896_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _5894_l = (_5894_l) + (BigInteger.One);
              }
              _5892_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_5892_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_5895_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _5893_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMPUTF16.__default.escapeIdent((_5887_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _5893_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_5887_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _5893_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _5897_ctorMatch;
              _5897_ctorMatch = RAST.MatchCase.create(_5892_pattern, RAST.Expr.create_RawExpr(_5893_rhs));
              _5889_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_5889_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_5897_ctorMatch));
              _5890_k = (_5890_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _5889_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_5889_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _5898_methodBody;
            _5898_methodBody = RAST.Expr.create_Match(RAST.__default.self, _5889_cases);
            _5883_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_5883_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PUB(), RAST.Fn.create(DCOMPUTF16.__default.escapeIdent((_5887_formal).dtor_name), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_Borrowed(_5888_formalType)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_5898_methodBody)))));
          }
          _5886_j = (_5886_j) + (BigInteger.One);
        }
        _5874_i = (_5874_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _5899_typeI;
        _5899_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _5900_types;
        _5900_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_5899_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          RAST._IType _5901_genTp;
          RAST._IType _out2620;
          _out2620 = DCOMPUTF16.COMP.GenType(((c).dtor_typeParams).Select(_5899_typeI), false, false);
          _5901_genTp = _out2620;
          _5900_types = Dafny.Sequence<RAST._IType>.Concat(_5900_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::")), Dafny.Sequence<RAST._IType>.FromElements(_5901_genTp))));
          _5899_typeI = (_5899_typeI) + (BigInteger.One);
        }
        _5873_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_5873_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(Std.Collections.Seq.__default.Map<RAST._IType, RAST._INamelessFormal>(((System.Func<RAST._IType, RAST._INamelessFormal>)((_5902_tpe) => {
  return RAST.NamelessFormal.create(RAST.Visibility.create_PRIV(), _5902_tpe);
})), _5900_types)))));
      }
      Dafny.ISequence<RAST._IModDecl> _5903_enumBody;
      _5903_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMPUTF16.__default.escapeIdent((c).dtor_name), _5867_sTypeParams, _5873_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_5868_sConstrainedTypeParams, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5870_typeParamsAsTypes), _5869_whereConstraints, _5883_implBody)));
      _5874_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _5904_printImplBodyCases;
      _5904_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_5874_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _5905_ctor;
        _5905_ctor = ((c).dtor_ctors).Select(_5874_i);
        Dafny.ISequence<Dafny.Rune> _5906_ctorMatch;
        _5906_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((_5905_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _5907_modulePrefix;
        _5907_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _5908_printRhs;
        _5908_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _5907_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent((_5905_ctor).dtor_name)), (((_5905_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _5909_j;
        _5909_j = BigInteger.Zero;
        while ((_5909_j) < (new BigInteger(((_5905_ctor).dtor_args).Count))) {
          DAST._IFormal _5910_formal;
          _5910_formal = ((_5905_ctor).dtor_args).Select(_5909_j);
          _5906_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_5906_ctorMatch, DCOMPUTF16.__default.escapeIdent((_5910_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_5909_j).Sign == 1) {
            _5908_printRhs = (_5908_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _5908_printRhs = (_5908_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMPUTF16.__default.escapeIdent((_5910_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _5909_j = (_5909_j) + (BigInteger.One);
        }
        _5906_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_5906_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_5905_ctor).dtor_hasAnyArgs) {
          _5908_printRhs = (_5908_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _5908_printRhs = (_5908_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _5904_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_5904_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _5906_ctorMatch), RAST.Expr.create_Block(_5908_printRhs))));
        _5874_i = (_5874_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _5904_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_5904_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMPUTF16.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _5911_printImplBody;
      _5911_printImplBody = RAST.Expr.create_Match(RAST.__default.self, _5904_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _5912_printImpl;
      _5912_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5868_sConstrainedTypeParams, RAST.__default.DafnyPrintTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5870_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_5911_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _5913_defaultImpl;
      _5913_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _5874_i = BigInteger.Zero;
        RAST._IExpr _5914_structName;
        _5914_structName = (RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name))).MSel(DCOMPUTF16.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _5915_structAssignments;
        _5915_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_5874_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _5916_formal;
          _5916_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_5874_i);
          _5915_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_5915_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent((_5916_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _5874_i = (_5874_i) + (BigInteger.One);
        }
        Dafny.ISequence<RAST._ITypeParam> _5917_defaultConstrainedTypeParams;
        _5917_defaultConstrainedTypeParams = RAST.TypeParam.AddConstraintsMultiple(_5867_sTypeParams, Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.DefaultTrait));
        _5913_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_5917_defaultConstrainedTypeParams, RAST.__default.DefaultTrait, RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(DCOMPUTF16.__default.escapeIdent((c).dtor_name)), _5870_typeParamsAsTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.Visibility.create_PRIV(), RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<RAST._ITypeParam>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_5914_structName, _5915_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_5903_enumBody, _5912_printImpl), _5913_defaultImpl);
      return s;
    }
    public static RAST._IType GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IType r = RAST.Type.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.Type.create_SelfOwned();
        return r;
      } else {
        r = RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"));
        BigInteger _hi10 = new BigInteger((p).Count);
        for (BigInteger _5918_i = BigInteger.Zero; _5918_i < _hi10; _5918_i++) {
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(((p).Select(_5918_i))));
        }
      }
      return r;
    }
    public static RAST._IExpr GenPathExpr(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p)
    {
      RAST._IExpr r = RAST.Expr.Default();
      if ((new BigInteger((p).Count)).Sign == 0) {
        r = RAST.__default.self;
        return r;
      } else {
        r = RAST.Expr.create_Identifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"));
        BigInteger _hi11 = new BigInteger((p).Count);
        for (BigInteger _5919_i = BigInteger.Zero; _5919_i < _hi11; _5919_i++) {
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(((p).Select(_5919_i))));
        }
      }
      return r;
    }
    public static Dafny.ISequence<RAST._IType> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn)
    {
      Dafny.ISequence<RAST._IType> s = Dafny.Sequence<RAST._IType>.Empty;
      s = Dafny.Sequence<RAST._IType>.FromElements();
      if ((new BigInteger((args).Count)).Sign == 1) {
        BigInteger _5920_i;
        _5920_i = BigInteger.Zero;
        while ((_5920_i) < (new BigInteger((args).Count))) {
          RAST._IType _5921_genTp;
          RAST._IType _out2621;
          _out2621 = DCOMPUTF16.COMP.GenType((args).Select(_5920_i), inBinding, inFn);
          _5921_genTp = _out2621;
          s = Dafny.Sequence<RAST._IType>.Concat(s, Dafny.Sequence<RAST._IType>.FromElements(_5921_genTp));
          _5920_i = (_5920_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static bool IsRcWrapped(Dafny.ISequence<DAST._IAttribute> attributes) {
      return ((!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("auto-nongrowing-size"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements()))) && (!(attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")))))) || ((attributes).Contains(DAST.Attribute.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("rust_rc"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")))));
    }
    public static RAST._IType GenType(DAST._IType c, bool inBinding, bool inFn)
    {
      RAST._IType s = RAST.Type.Default();
      DAST._IType _source198 = c;
      if (_source198.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5922___mcc_h0 = _source198.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _5923___mcc_h1 = _source198.dtor_typeArgs;
        DAST._IResolvedType _5924___mcc_h2 = _source198.dtor_resolved;
        DAST._IResolvedType _5925_resolved = _5924___mcc_h2;
        Dafny.ISequence<DAST._IType> _5926_args = _5923___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5927_p = _5922___mcc_h0;
        {
          RAST._IType _5928_t;
          RAST._IType _out2622;
          _out2622 = DCOMPUTF16.COMP.GenPath(_5927_p);
          _5928_t = _out2622;
          Dafny.ISequence<RAST._IType> _5929_typeArgs;
          Dafny.ISequence<RAST._IType> _out2623;
          _out2623 = DCOMPUTF16.COMP.GenTypeArgs(_5926_args, inBinding, inFn);
          _5929_typeArgs = _out2623;
          s = RAST.Type.create_TypeApp(_5928_t, _5929_typeArgs);
          DAST._IResolvedType _source199 = _5925_resolved;
          if (_source199.is_Datatype) {
            DAST._IDatatypeType _5930___mcc_h21 = _source199.dtor_datatypeType;
            DAST._IDatatypeType _source200 = _5930___mcc_h21;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5931___mcc_h22 = _source200.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _5932___mcc_h23 = _source200.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _5933_attributes = _5932___mcc_h23;
            {
              if (DCOMPUTF16.COMP.IsRcWrapped(_5933_attributes)) {
                s = RAST.__default.Rc(s);
              }
            }
          } else if (_source199.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _5934___mcc_h24 = _source199.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _5935___mcc_h25 = _source199.dtor_attributes;
            {
              if ((_5927_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
                s = RAST.__default.Rc(RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::any::Any")));
              } else {
                if (inBinding) {
                  s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
                } else {
                  s = RAST.Type.create_ImplType(s);
                }
              }
            }
          } else {
            DAST._IType _5936___mcc_h26 = _source199.dtor_baseType;
            DAST._INewtypeRange _5937___mcc_h27 = _source199.dtor_range;
            bool _5938___mcc_h28 = _source199.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _5939___mcc_h29 = _source199.dtor_attributes;
            Dafny.ISequence<DAST._IAttribute> _5940_attributes = _5939___mcc_h29;
            bool _5941_erased = _5938___mcc_h28;
            DAST._INewtypeRange _5942_range = _5937___mcc_h27;
            DAST._IType _5943_t = _5936___mcc_h26;
            {
              if (_5941_erased) {
                Std.Wrappers._IOption<RAST._IType> _source201 = DCOMPUTF16.COMP.NewtypeToRustType(_5943_t, _5942_range);
                if (_source201.is_None) {
                } else {
                  RAST._IType _5944___mcc_h30 = _source201.dtor_value;
                  RAST._IType _5945_v = _5944___mcc_h30;
                  s = _5945_v;
                }
              }
            }
          }
        }
      } else if (_source198.is_Nullable) {
        DAST._IType _5946___mcc_h3 = _source198.dtor_Nullable_a0;
        DAST._IType _5947_inner = _5946___mcc_h3;
        {
          RAST._IType _5948_innerExpr;
          RAST._IType _out2624;
          _out2624 = DCOMPUTF16.COMP.GenType(_5947_inner, inBinding, inFn);
          _5948_innerExpr = _out2624;
          s = RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option")), Dafny.Sequence<RAST._IType>.FromElements(_5948_innerExpr));
        }
      } else if (_source198.is_Tuple) {
        Dafny.ISequence<DAST._IType> _5949___mcc_h4 = _source198.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _5950_types = _5949___mcc_h4;
        {
          Dafny.ISequence<RAST._IType> _5951_args;
          _5951_args = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _5952_i;
          _5952_i = BigInteger.Zero;
          while ((_5952_i) < (new BigInteger((_5950_types).Count))) {
            RAST._IType _5953_generated;
            RAST._IType _out2625;
            _out2625 = DCOMPUTF16.COMP.GenType((_5950_types).Select(_5952_i), inBinding, inFn);
            _5953_generated = _out2625;
            _5951_args = Dafny.Sequence<RAST._IType>.Concat(_5951_args, Dafny.Sequence<RAST._IType>.FromElements(_5953_generated));
            _5952_i = (_5952_i) + (BigInteger.One);
          }
          s = RAST.Type.create_TupleType(_5951_args);
        }
      } else if (_source198.is_Array) {
        DAST._IType _5954___mcc_h5 = _source198.dtor_element;
        BigInteger _5955___mcc_h6 = _source198.dtor_dims;
        BigInteger _5956_dims = _5955___mcc_h6;
        DAST._IType _5957_element = _5954___mcc_h5;
        {
          RAST._IType _5958_elem;
          RAST._IType _out2626;
          _out2626 = DCOMPUTF16.COMP.GenType(_5957_element, inBinding, inFn);
          _5958_elem = _out2626;
          s = _5958_elem;
          BigInteger _5959_i;
          _5959_i = BigInteger.Zero;
          while ((_5959_i) < (_5956_dims)) {
            s = RAST.__default.Rc(RAST.__default.RefCell(RAST.__default.Vec(s)));
            _5959_i = (_5959_i) + (BigInteger.One);
          }
        }
      } else if (_source198.is_Seq) {
        DAST._IType _5960___mcc_h7 = _source198.dtor_element;
        DAST._IType _5961_element = _5960___mcc_h7;
        {
          RAST._IType _5962_elem;
          RAST._IType _out2627;
          _out2627 = DCOMPUTF16.COMP.GenType(_5961_element, inBinding, inFn);
          _5962_elem = _out2627;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements(_5962_elem));
        }
      } else if (_source198.is_Set) {
        DAST._IType _5963___mcc_h8 = _source198.dtor_element;
        DAST._IType _5964_element = _5963___mcc_h8;
        {
          RAST._IType _5965_elem;
          RAST._IType _out2628;
          _out2628 = DCOMPUTF16.COMP.GenType(_5964_element, inBinding, inFn);
          _5965_elem = _out2628;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Set")), Dafny.Sequence<RAST._IType>.FromElements(_5965_elem));
        }
      } else if (_source198.is_Multiset) {
        DAST._IType _5966___mcc_h9 = _source198.dtor_element;
        DAST._IType _5967_element = _5966___mcc_h9;
        {
          RAST._IType _5968_elem;
          RAST._IType _out2629;
          _out2629 = DCOMPUTF16.COMP.GenType(_5967_element, inBinding, inFn);
          _5968_elem = _out2629;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Multiset")), Dafny.Sequence<RAST._IType>.FromElements(_5968_elem));
        }
      } else if (_source198.is_Map) {
        DAST._IType _5969___mcc_h10 = _source198.dtor_key;
        DAST._IType _5970___mcc_h11 = _source198.dtor_value;
        DAST._IType _5971_value = _5970___mcc_h11;
        DAST._IType _5972_key = _5969___mcc_h10;
        {
          RAST._IType _5973_keyType;
          RAST._IType _out2630;
          _out2630 = DCOMPUTF16.COMP.GenType(_5972_key, inBinding, inFn);
          _5973_keyType = _out2630;
          RAST._IType _5974_valueType;
          RAST._IType _out2631;
          _out2631 = DCOMPUTF16.COMP.GenType(_5971_value, inBinding, inFn);
          _5974_valueType = _out2631;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Map")), Dafny.Sequence<RAST._IType>.FromElements(_5973_keyType, _5974_valueType));
        }
      } else if (_source198.is_SetBuilder) {
        DAST._IType _5975___mcc_h12 = _source198.dtor_element;
        DAST._IType _5976_elem = _5975___mcc_h12;
        {
          RAST._IType _5977_elemType;
          RAST._IType _out2632;
          _out2632 = DCOMPUTF16.COMP.GenType(_5976_elem, inBinding, inFn);
          _5977_elemType = _out2632;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("SetBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_5977_elemType));
        }
      } else if (_source198.is_MapBuilder) {
        DAST._IType _5978___mcc_h13 = _source198.dtor_key;
        DAST._IType _5979___mcc_h14 = _source198.dtor_value;
        DAST._IType _5980_value = _5979___mcc_h14;
        DAST._IType _5981_key = _5978___mcc_h13;
        {
          RAST._IType _5982_keyType;
          RAST._IType _out2633;
          _out2633 = DCOMPUTF16.COMP.GenType(_5981_key, inBinding, inFn);
          _5982_keyType = _out2633;
          RAST._IType _5983_valueType;
          RAST._IType _out2634;
          _out2634 = DCOMPUTF16.COMP.GenType(_5980_value, inBinding, inFn);
          _5983_valueType = _out2634;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("MapBuilder")), Dafny.Sequence<RAST._IType>.FromElements(_5982_keyType, _5983_valueType));
        }
      } else if (_source198.is_Arrow) {
        Dafny.ISequence<DAST._IType> _5984___mcc_h15 = _source198.dtor_args;
        DAST._IType _5985___mcc_h16 = _source198.dtor_result;
        DAST._IType _5986_result = _5985___mcc_h16;
        Dafny.ISequence<DAST._IType> _5987_args = _5984___mcc_h15;
        {
          Dafny.ISequence<RAST._IType> _5988_argTypes;
          _5988_argTypes = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _5989_i;
          _5989_i = BigInteger.Zero;
          while ((_5989_i) < (new BigInteger((_5987_args).Count))) {
            RAST._IType _5990_generated;
            RAST._IType _out2635;
            _out2635 = DCOMPUTF16.COMP.GenType((_5987_args).Select(_5989_i), inBinding, true);
            _5990_generated = _out2635;
            _5988_argTypes = Dafny.Sequence<RAST._IType>.Concat(_5988_argTypes, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_Borrowed(_5990_generated)));
            _5989_i = (_5989_i) + (BigInteger.One);
          }
          RAST._IType _5991_resultType;
          RAST._IType _out2636;
          _out2636 = DCOMPUTF16.COMP.GenType(_5986_result, inBinding, (inFn) || (inBinding));
          _5991_resultType = _out2636;
          s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("FunctionWrapper")), Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_FnType(_5988_argTypes, RAST.Type.create_IntersectionType(_5991_resultType, RAST.__default.StaticTrait))));
        }
      } else if (_source198.is_Primitive) {
        DAST._IPrimitive _5992___mcc_h17 = _source198.dtor_Primitive_a0;
        DAST._IPrimitive _5993_p = _5992___mcc_h17;
        {
          DAST._IPrimitive _source202 = _5993_p;
          if (_source202.is_Int) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"));
          } else if (_source202.is_Real) {
            s = (RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("BigRational"));
          } else if (_source202.is_String) {
            s = RAST.Type.create_TypeApp((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence")), Dafny.Sequence<RAST._IType>.FromElements((RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar)));
          } else if (_source202.is_Bool) {
            s = RAST.__default.RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"));
          } else {
            s = (RAST.__default.dafny__runtime__type).MSel(DCOMPUTF16.__default.DafnyChar);
          }
        }
      } else if (_source198.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _5994___mcc_h18 = _source198.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _5995_v = _5994___mcc_h18;
        s = RAST.__default.RawType(_5995_v);
      } else {
        Dafny.ISequence<Dafny.Rune> _5996___mcc_h19 = _source198.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source203 = _5996___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _5997___mcc_h20 = _source203;
        Dafny.ISequence<Dafny.Rune> _5998_name = _5997___mcc_h20;
        s = RAST.__default.RawType(DCOMPUTF16.__default.escapeIdent(_5998_name));
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>,Dafny.ISequence<RAST._IImplMember>> traitBodies)
    {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _5999_i;
      _5999_i = BigInteger.Zero;
      while ((_5999_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source204 = (body).Select(_5999_i);
        DAST._IMethod _6000___mcc_h0 = _source204;
        DAST._IMethod _6001_m = _6000___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source205 = (_6001_m).dtor_overridingPath;
          if (_source205.is_None) {
            {
              RAST._IImplMember _6002_generated;
              RAST._IImplMember _out2637;
              _out2637 = DCOMPUTF16.COMP.GenMethod(_6001_m, forTrait, enclosingType, enclosingTypeParams);
              _6002_generated = _out2637;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_6002_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6003___mcc_h1 = _source205.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6004_p = _6003___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _6005_existing;
              _6005_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_6004_p)) {
                _6005_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies,_6004_p);
              }
              RAST._IImplMember _6006_genMethod;
              RAST._IImplMember _out2638;
              _out2638 = DCOMPUTF16.COMP.GenMethod(_6001_m, true, enclosingType, enclosingTypeParams);
              _6006_genMethod = _out2638;
              _6005_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_6005_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_6006_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_6004_p, _6005_existing)));
            }
          }
        }
        _5999_i = (_5999_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params)
    {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _6007_i;
      _6007_i = BigInteger.Zero;
      while ((_6007_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _6008_param;
        _6008_param = (@params).Select(_6007_i);
        RAST._IType _6009_paramType;
        RAST._IType _out2639;
        _out2639 = DCOMPUTF16.COMP.GenType((_6008_param).dtor_typ, false, false);
        _6009_paramType = _out2639;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMPUTF16.__default.escapeIdent((_6008_param).dtor_name), RAST.Type.create_Borrowed(_6009_paramType))));
        _6007_i = (_6007_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams)
    {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _6010_params;
      Dafny.ISequence<RAST._IFormal> _out2640;
      _out2640 = DCOMPUTF16.COMP.GenParams((m).dtor_params);
      _6010_params = _out2640;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6011_paramNames;
      _6011_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _6012_paramOwnerships;
      _6012_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
      BigInteger _6013_paramI;
      _6013_paramI = BigInteger.Zero;
      while ((_6013_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        Dafny.ISequence<Dafny.Rune> _6014_name;
        _6014_name = (((m).dtor_params).Select(_6013_paramI)).dtor_name;
        _6011_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_6011_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_6014_name));
        _6012_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_6012_paramOwnerships, _6014_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
        _6013_paramI = (_6013_paramI) + (BigInteger.One);
      }
      DCOMPUTF16._IEnvironment _6015_env;
      _6015_env = DCOMPUTF16.Environment.create(_6011_paramNames, _6012_paramOwnerships);
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _6010_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _6010_params);
        } else {
          RAST._IType _6016_tpe;
          RAST._IType _out2641;
          _out2641 = DCOMPUTF16.COMP.GenType(enclosingType, false, false);
          _6016_tpe = _out2641;
          _6010_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_Borrowed(_6016_tpe))), _6010_params);
        }
      }
      Dafny.ISequence<RAST._IType> _6017_retTypeArgs;
      _6017_retTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
      BigInteger _6018_typeI;
      _6018_typeI = BigInteger.Zero;
      while ((_6018_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        RAST._IType _6019_typeExpr;
        RAST._IType _out2642;
        _out2642 = DCOMPUTF16.COMP.GenType(((m).dtor_outTypes).Select(_6018_typeI), false, false);
        _6019_typeExpr = _out2642;
        _6017_retTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_6017_retTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_6019_typeExpr));
        _6018_typeI = (_6018_typeI) + (BigInteger.One);
      }
      RAST._IVisibility _6020_visibility;
      _6020_visibility = RAST.Visibility.create_PUB();
      Dafny.ISequence<Dafny.Rune> _6021_fnName;
      _6021_fnName = DCOMPUTF16.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _6022_typeParamsFiltered;
      _6022_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _6023_typeParamI;
      _6023_typeParamI = BigInteger.Zero;
      while ((_6023_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _6024_typeParam;
        _6024_typeParam = ((m).dtor_typeParams).Select(_6023_typeParamI);
        if (!((enclosingTypeParams).Contains(_6024_typeParam))) {
          _6022_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_6022_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_6024_typeParam));
        }
        _6023_typeParamI = (_6023_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _6025_whereClauses;
      _6025_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<RAST._ITypeParam> _6026_typeParams;
      _6026_typeParams = Dafny.Sequence<RAST._ITypeParam>.FromElements();
      if ((new BigInteger((_6022_typeParamsFiltered).Count)).Sign == 1) {
        _6025_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_6025_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _6027_i;
        _6027_i = BigInteger.Zero;
        while ((_6027_i) < (new BigInteger((_6022_typeParamsFiltered).Count))) {
          RAST._IType _6028_typeExpr;
          RAST._IType _out2643;
          _out2643 = DCOMPUTF16.COMP.GenType((_6022_typeParamsFiltered).Select(_6027_i), false, false);
          _6028_typeExpr = _out2643;
          _6026_typeParams = Dafny.Sequence<RAST._ITypeParam>.Concat(_6026_typeParams, Dafny.Sequence<RAST._ITypeParam>.FromElements(RAST.TypeParam.create((_6028_typeExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<RAST._IType>.FromElements(RAST.__default.CloneTrait, RAST.__default.DafnyPrintTrait, RAST.__default.DefaultTrait, RAST.__default.StaticTrait))));
          _6027_i = (_6027_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _6029_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        RAST._IExpr _6030_earlyReturn;
        _6030_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_None());
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source206 = (m).dtor_outVars;
        if (_source206.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6031___mcc_h0 = _source206.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6032_outVars = _6031___mcc_h0;
          {
            Dafny.ISequence<RAST._IExpr> _6033_tupleArgs;
            _6033_tupleArgs = Dafny.Sequence<RAST._IExpr>.FromElements();
            BigInteger _6034_outI;
            _6034_outI = BigInteger.Zero;
            while ((_6034_outI) < (new BigInteger((_6032_outVars).Count))) {
              Dafny.ISequence<Dafny.Rune> _6035_outVar;
              _6035_outVar = (_6032_outVars).Select(_6034_outI);
              _6033_tupleArgs = Dafny.Sequence<RAST._IExpr>.Concat(_6033_tupleArgs, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent((_6035_outVar)))));
              _6034_outI = (_6034_outI) + (BigInteger.One);
            }
            _6030_earlyReturn = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_Tuple(_6033_tupleArgs)));
          }
        }
        RAST._IExpr _6036_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6037___v47;
        RAST._IExpr _out2644;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2645;
        DCOMPUTF16.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _6015_env, true, _6030_earlyReturn, out _out2644, out _out2645);
        _6036_body = _out2644;
        _6037___v47 = _out2645;
        _6029_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(_6036_body);
      } else {
        _6029_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_6020_visibility, RAST.Fn.create(_6021_fnName, _6026_typeParams, _6010_params, Std.Wrappers.Option<RAST._IType>.create_Some((((new BigInteger((_6017_retTypeArgs).Count)) == (BigInteger.One)) ? ((_6017_retTypeArgs).Select(BigInteger.Zero)) : (RAST.Type.create_TupleType(_6017_retTypeArgs)))), _6025_whereClauses, _6029_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6038_declarations;
      _6038_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _6039_i;
      _6039_i = BigInteger.Zero;
      while ((_6039_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _6040_stmt;
        _6040_stmt = (stmts).Select(_6039_i);
        RAST._IExpr _6041_stmtExpr;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6042_recIdents;
        RAST._IExpr _out2646;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2647;
        DCOMPUTF16.COMP.GenStmt(_6040_stmt, selfIdent, env, (isLast) && ((_6039_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out2646, out _out2647);
        _6041_stmtExpr = _out2646;
        _6042_recIdents = _out2647;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_6042_recIdents, _6038_declarations));
        DAST._IStatement _source207 = _6040_stmt;
        if (_source207.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _6043___mcc_h0 = _source207.dtor_name;
          DAST._IType _6044___mcc_h1 = _source207.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _6045___mcc_h2 = _source207.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _6046_name = _6043___mcc_h0;
          {
            _6038_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6038_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6046_name));
          }
        } else if (_source207.is_Assign) {
          DAST._IAssignLhs _6047___mcc_h6 = _source207.dtor_lhs;
          DAST._IExpression _6048___mcc_h7 = _source207.dtor_value;
        } else if (_source207.is_If) {
          DAST._IExpression _6049___mcc_h10 = _source207.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _6050___mcc_h11 = _source207.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _6051___mcc_h12 = _source207.dtor_els;
        } else if (_source207.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _6052___mcc_h16 = _source207.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _6053___mcc_h17 = _source207.dtor_body;
        } else if (_source207.is_While) {
          DAST._IExpression _6054___mcc_h20 = _source207.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _6055___mcc_h21 = _source207.dtor_body;
        } else if (_source207.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _6056___mcc_h24 = _source207.dtor_boundName;
          DAST._IType _6057___mcc_h25 = _source207.dtor_boundType;
          DAST._IExpression _6058___mcc_h26 = _source207.dtor_over;
          Dafny.ISequence<DAST._IStatement> _6059___mcc_h27 = _source207.dtor_body;
        } else if (_source207.is_Call) {
          DAST._IExpression _6060___mcc_h32 = _source207.dtor_on;
          DAST._ICallName _6061___mcc_h33 = _source207.dtor_callName;
          Dafny.ISequence<DAST._IType> _6062___mcc_h34 = _source207.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _6063___mcc_h35 = _source207.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _6064___mcc_h36 = _source207.dtor_outs;
        } else if (_source207.is_Return) {
          DAST._IExpression _6065___mcc_h42 = _source207.dtor_expr;
        } else if (_source207.is_EarlyReturn) {
        } else if (_source207.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6066___mcc_h44 = _source207.dtor_toLabel;
        } else if (_source207.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _6067___mcc_h46 = _source207.dtor_body;
        } else if (_source207.is_JumpTailCallStart) {
        } else if (_source207.is_Halt) {
        } else {
          DAST._IExpression _6068___mcc_h48 = _source207.dtor_Print_a0;
        }
        generated = (generated).Then(_6041_stmtExpr);
        _6039_i = (_6039_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source208 = lhs;
      if (_source208.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _6069___mcc_h0 = _source208.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source209 = _6069___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _6070___mcc_h1 = _source209;
        Dafny.ISequence<Dafny.Rune> _6071_id = _6070___mcc_h1;
        {
          if (((env).IsBorrowed(_6071_id)) || ((env).IsBorrowedMut(_6071_id))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMPUTF16.__default.escapeIdent(_6071_id));
          } else {
            generated = DCOMPUTF16.__default.escapeIdent(_6071_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6071_id);
          needsIIFE = false;
        }
      } else if (_source208.is_Select) {
        DAST._IExpression _6072___mcc_h2 = _source208.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _6073___mcc_h3 = _source208.dtor_field;
        Dafny.ISequence<Dafny.Rune> _6074_field = _6073___mcc_h3;
        DAST._IExpression _6075_on = _6072___mcc_h2;
        {
          RAST._IExpr _6076_onExpr;
          DCOMPUTF16._IOwnership _6077_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6078_recIdents;
          RAST._IExpr _out2648;
          DCOMPUTF16._IOwnership _out2649;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2650;
          DCOMPUTF16.COMP.GenExpr(_6075_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2648, out _out2649, out _out2650);
          _6076_onExpr = _out2648;
          _6077_onOwned = _out2649;
          _6078_recIdents = _out2650;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), (_6076_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _6074_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _6078_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _6079___mcc_h4 = _source208.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _6080___mcc_h5 = _source208.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _6081_indices = _6080___mcc_h5;
        DAST._IExpression _6082_on = _6079___mcc_h4;
        {
          RAST._IExpr _6083_onExpr;
          DCOMPUTF16._IOwnership _6084_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6085_recIdents;
          RAST._IExpr _out2651;
          DCOMPUTF16._IOwnership _out2652;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2653;
          DCOMPUTF16.COMP.GenExpr(_6082_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2651, out _out2652, out _out2653);
          _6083_onExpr = _out2651;
          _6084_onOwned = _out2652;
          _6085_recIdents = _out2653;
          readIdents = _6085_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _6086_i;
          _6086_i = BigInteger.Zero;
          while ((_6086_i) < (new BigInteger((_6081_indices).Count))) {
            RAST._IExpr _6087_idx;
            DCOMPUTF16._IOwnership _6088___v51;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6089_recIdentsIdx;
            RAST._IExpr _out2654;
            DCOMPUTF16._IOwnership _out2655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2656;
            DCOMPUTF16.COMP.GenExpr((_6081_indices).Select(_6086_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2654, out _out2655, out _out2656);
            _6087_idx = _out2654;
            _6088___v51 = _out2655;
            _6089_recIdentsIdx = _out2656;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_6086_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), (_6087_idx)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6089_recIdentsIdx);
            _6086_i = (_6086_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, (_6083_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _6086_i = BigInteger.Zero;
          while ((_6086_i) < (new BigInteger((_6081_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_6086_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _6086_i = (_6086_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, bool isLast, RAST._IExpr earlyReturn, out RAST._IExpr generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      generated = RAST.Expr.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source210 = stmt;
      if (_source210.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _6090___mcc_h0 = _source210.dtor_name;
        DAST._IType _6091___mcc_h1 = _source210.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _6092___mcc_h2 = _source210.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source211 = _6092___mcc_h2;
        if (_source211.is_None) {
          DAST._IType _6093_typ = _6091___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _6094_name = _6090___mcc_h0;
          {
            RAST._IType _6095_typeString;
            RAST._IType _out2657;
            _out2657 = DCOMPUTF16.COMP.GenType(_6093_typ, true, false);
            _6095_typeString = _out2657;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_6094_name), Std.Wrappers.Option<RAST._IType>.create_Some(_6095_typeString), Std.Wrappers.Option<RAST._IExpr>.create_None());
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _6096___mcc_h3 = _source211.dtor_value;
          DAST._IExpression _6097_expression = _6096___mcc_h3;
          DAST._IType _6098_typ = _6091___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _6099_name = _6090___mcc_h0;
          {
            RAST._IType _6100_typeString;
            RAST._IType _out2658;
            _out2658 = DCOMPUTF16.COMP.GenType(_6098_typ, true, false);
            _6100_typeString = _out2658;
            RAST._IExpr _6101_expr;
            DCOMPUTF16._IOwnership _6102___v52;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6103_recIdents;
            RAST._IExpr _out2659;
            DCOMPUTF16._IOwnership _out2660;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2661;
            DCOMPUTF16.COMP.GenExpr(_6097_expression, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2659, out _out2660, out _out2661);
            _6101_expr = _out2659;
            _6102___v52 = _out2660;
            _6103_recIdents = _out2661;
            generated = RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_6099_name), Std.Wrappers.Option<RAST._IType>.create_Some(_6100_typeString), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6101_expr));
            readIdents = _6103_recIdents;
          }
        }
      } else if (_source210.is_Assign) {
        DAST._IAssignLhs _6104___mcc_h4 = _source210.dtor_lhs;
        DAST._IExpression _6105___mcc_h5 = _source210.dtor_value;
        DAST._IExpression _6106_expression = _6105___mcc_h5;
        DAST._IAssignLhs _6107_lhs = _6104___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _6108_lhsGen;
          bool _6109_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6110_recIdents;
          Dafny.ISequence<Dafny.Rune> _out2662;
          bool _out2663;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2664;
          DCOMPUTF16.COMP.GenAssignLhs(_6107_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, env, out _out2662, out _out2663, out _out2664);
          _6108_lhsGen = _out2662;
          _6109_needsIIFE = _out2663;
          _6110_recIdents = _out2664;
          RAST._IExpr _6111_exprGen;
          DCOMPUTF16._IOwnership _6112___v53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6113_exprIdents;
          RAST._IExpr _out2665;
          DCOMPUTF16._IOwnership _out2666;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2667;
          DCOMPUTF16.COMP.GenExpr(_6106_expression, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2665, out _out2666, out _out2667);
          _6111_exprGen = _out2665;
          _6112___v53 = _out2666;
          _6113_exprIdents = _out2667;
          if (_6109_needsIIFE) {
            generated = RAST.Expr.create_Block(RAST.Expr.create_StmtExpr(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_CONST(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(_6111_exprGen)), RAST.Expr.create_RawExpr(_6108_lhsGen)));
          } else {
            generated = RAST.Expr.create_AssignVar(_6108_lhsGen, _6111_exprGen);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6110_recIdents, _6113_exprIdents);
        }
      } else if (_source210.is_If) {
        DAST._IExpression _6114___mcc_h6 = _source210.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _6115___mcc_h7 = _source210.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _6116___mcc_h8 = _source210.dtor_els;
        Dafny.ISequence<DAST._IStatement> _6117_els = _6116___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _6118_thn = _6115___mcc_h7;
        DAST._IExpression _6119_cond = _6114___mcc_h6;
        {
          RAST._IExpr _6120_cond;
          DCOMPUTF16._IOwnership _6121___v54;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6122_recIdents;
          RAST._IExpr _out2668;
          DCOMPUTF16._IOwnership _out2669;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2670;
          DCOMPUTF16.COMP.GenExpr(_6119_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2668, out _out2669, out _out2670);
          _6120_cond = _out2668;
          _6121___v54 = _out2669;
          _6122_recIdents = _out2670;
          Dafny.ISequence<Dafny.Rune> _6123_condString;
          _6123_condString = (_6120_cond)._ToString(DCOMPUTF16.__default.IND);
          readIdents = _6122_recIdents;
          RAST._IExpr _6124_thn;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6125_thnIdents;
          RAST._IExpr _out2671;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2672;
          DCOMPUTF16.COMP.GenStmts(_6118_thn, selfIdent, env, isLast, earlyReturn, out _out2671, out _out2672);
          _6124_thn = _out2671;
          _6125_thnIdents = _out2672;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6125_thnIdents);
          RAST._IExpr _6126_els;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6127_elsIdents;
          RAST._IExpr _out2673;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2674;
          DCOMPUTF16.COMP.GenStmts(_6117_els, selfIdent, env, isLast, earlyReturn, out _out2673, out _out2674);
          _6126_els = _out2673;
          _6127_elsIdents = _out2674;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6127_elsIdents);
          generated = RAST.Expr.create_IfExpr(_6120_cond, _6124_thn, _6126_els);
        }
      } else if (_source210.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _6128___mcc_h9 = _source210.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _6129___mcc_h10 = _source210.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6130_body = _6129___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _6131_lbl = _6128___mcc_h9;
        {
          RAST._IExpr _6132_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6133_bodyIdents;
          RAST._IExpr _out2675;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2676;
          DCOMPUTF16.COMP.GenStmts(_6130_body, selfIdent, env, isLast, earlyReturn, out _out2675, out _out2676);
          _6132_body = _out2675;
          _6133_bodyIdents = _out2676;
          readIdents = _6133_bodyIdents;
          generated = RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _6131_lbl), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), RAST.Expr.create_StmtExpr(_6132_body, RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()))));
        }
      } else if (_source210.is_While) {
        DAST._IExpression _6134___mcc_h11 = _source210.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _6135___mcc_h12 = _source210.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6136_body = _6135___mcc_h12;
        DAST._IExpression _6137_cond = _6134___mcc_h11;
        {
          RAST._IExpr _6138_cond;
          DCOMPUTF16._IOwnership _6139___v55;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6140_recIdents;
          RAST._IExpr _out2677;
          DCOMPUTF16._IOwnership _out2678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2679;
          DCOMPUTF16.COMP.GenExpr(_6137_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2677, out _out2678, out _out2679);
          _6138_cond = _out2677;
          _6139___v55 = _out2678;
          _6140_recIdents = _out2679;
          readIdents = _6140_recIdents;
          RAST._IExpr _6141_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6142_bodyIdents;
          RAST._IExpr _out2680;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2681;
          DCOMPUTF16.COMP.GenStmts(_6136_body, selfIdent, env, false, earlyReturn, out _out2680, out _out2681);
          _6141_body = _out2680;
          _6142_bodyIdents = _out2681;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6142_bodyIdents);
          generated = RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_Some(_6138_cond), _6141_body);
        }
      } else if (_source210.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _6143___mcc_h13 = _source210.dtor_boundName;
        DAST._IType _6144___mcc_h14 = _source210.dtor_boundType;
        DAST._IExpression _6145___mcc_h15 = _source210.dtor_over;
        Dafny.ISequence<DAST._IStatement> _6146___mcc_h16 = _source210.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6147_body = _6146___mcc_h16;
        DAST._IExpression _6148_over = _6145___mcc_h15;
        DAST._IType _6149_boundType = _6144___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _6150_boundName = _6143___mcc_h13;
        {
          RAST._IExpr _6151_over;
          DCOMPUTF16._IOwnership _6152___v56;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6153_recIdents;
          RAST._IExpr _out2682;
          DCOMPUTF16._IOwnership _out2683;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2684;
          DCOMPUTF16.COMP.GenExpr(_6148_over, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2682, out _out2683, out _out2684);
          _6151_over = _out2682;
          _6152___v56 = _out2683;
          _6153_recIdents = _out2684;
          RAST._IType _6154_boundTypeStr;
          RAST._IType _out2685;
          _out2685 = DCOMPUTF16.COMP.GenType(_6149_boundType, false, false);
          _6154_boundTypeStr = _out2685;
          readIdents = _6153_recIdents;
          RAST._IExpr _6155_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6156_bodyIdents;
          RAST._IExpr _out2686;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2687;
          DCOMPUTF16.COMP.GenStmts(_6147_body, selfIdent, (env).Add(_6150_boundName, DCOMPUTF16.Ownership.create_OwnershipBorrowed()), false, earlyReturn, out _out2686, out _out2687);
          _6155_body = _out2686;
          _6156_bodyIdents = _out2687;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6156_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_6150_boundName));
          generated = RAST.Expr.create_For(DCOMPUTF16.__default.escapeIdent(_6150_boundName), _6151_over, _6155_body);
        }
      } else if (_source210.is_Call) {
        DAST._IExpression _6157___mcc_h17 = _source210.dtor_on;
        DAST._ICallName _6158___mcc_h18 = _source210.dtor_callName;
        Dafny.ISequence<DAST._IType> _6159___mcc_h19 = _source210.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _6160___mcc_h20 = _source210.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _6161___mcc_h21 = _source210.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _6162_maybeOutVars = _6161___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _6163_args = _6160___mcc_h20;
        Dafny.ISequence<DAST._IType> _6164_typeArgs = _6159___mcc_h19;
        DAST._ICallName _6165_name = _6158___mcc_h18;
        DAST._IExpression _6166_on = _6157___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _6167_typeArgString;
          _6167_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_6164_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _6168_typeI;
            _6168_typeI = BigInteger.Zero;
            Dafny.ISequence<RAST._IType> _6169_typeArgsR;
            _6169_typeArgsR = Dafny.Sequence<RAST._IType>.FromElements();
            while ((_6168_typeI) < (new BigInteger((_6164_typeArgs).Count))) {
              RAST._IType _6170_tpe;
              RAST._IType _out2688;
              _out2688 = DCOMPUTF16.COMP.GenType((_6164_typeArgs).Select(_6168_typeI), false, false);
              _6170_tpe = _out2688;
              _6169_typeArgsR = Dafny.Sequence<RAST._IType>.Concat(_6169_typeArgsR, Dafny.Sequence<RAST._IType>.FromElements(_6170_tpe));
              _6168_typeI = (_6168_typeI) + (BigInteger.One);
            }
            _6167_typeArgString = (RAST.Type.create_TypeApp(RAST.Type.create_TIdentifier(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _6169_typeArgsR))._ToString(DCOMPUTF16.__default.IND);
          }
          Dafny.ISequence<Dafny.Rune> _6171_argString;
          _6171_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _6172_i;
          _6172_i = BigInteger.Zero;
          while ((_6172_i) < (new BigInteger((_6163_args).Count))) {
            if ((_6172_i).Sign == 1) {
              _6171_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6171_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _6173_argExpr;
            DCOMPUTF16._IOwnership _6174_ownership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6175_argIdents;
            RAST._IExpr _out2689;
            DCOMPUTF16._IOwnership _out2690;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2691;
            DCOMPUTF16.COMP.GenExpr((_6163_args).Select(_6172_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2689, out _out2690, out _out2691);
            _6173_argExpr = _out2689;
            _6174_ownership = _out2690;
            _6175_argIdents = _out2691;
            Dafny.ISequence<Dafny.Rune> _6176_argExprString;
            _6176_argExprString = (_6173_argExpr)._ToString(DCOMPUTF16.__default.IND);
            _6171_argString = Dafny.Sequence<Dafny.Rune>.Concat(_6171_argString, _6176_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6175_argIdents);
            _6172_i = (_6172_i) + (BigInteger.One);
          }
          RAST._IExpr _6177_onExpr;
          DCOMPUTF16._IOwnership _6178___v57;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6179_enclosingIdents;
          RAST._IExpr _out2692;
          DCOMPUTF16._IOwnership _out2693;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2694;
          DCOMPUTF16.COMP.GenExpr(_6166_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out2692, out _out2693, out _out2694);
          _6177_onExpr = _out2692;
          _6178___v57 = _out2693;
          _6179_enclosingIdents = _out2694;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _6179_enclosingIdents);
          Dafny.ISequence<Dafny.Rune> _6180_enclosingString;
          _6180_enclosingString = (_6177_onExpr)._ToString(DCOMPUTF16.__default.IND);
          DAST._IExpression _source212 = _6166_on;
          if (_source212.is_Literal) {
            DAST._ILiteral _6181___mcc_h26 = _source212.dtor_Literal_a0;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _6182___mcc_h28 = _source212.dtor_Ident_a0;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6183___mcc_h30 = _source212.dtor_Companion_a0;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_6180_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source212.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _6184___mcc_h32 = _source212.dtor_Tuple_a0;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6185___mcc_h34 = _source212.dtor_path;
            Dafny.ISequence<DAST._IType> _6186___mcc_h35 = _source212.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6187___mcc_h36 = _source212.dtor_args;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _6188___mcc_h40 = _source212.dtor_dims;
            DAST._IType _6189___mcc_h41 = _source212.dtor_typ;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_DatatypeValue) {
            DAST._IDatatypeType _6190___mcc_h44 = _source212.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _6191___mcc_h45 = _source212.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _6192___mcc_h46 = _source212.dtor_variant;
            bool _6193___mcc_h47 = _source212.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _6194___mcc_h48 = _source212.dtor_contents;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Convert) {
            DAST._IExpression _6195___mcc_h54 = _source212.dtor_value;
            DAST._IType _6196___mcc_h55 = _source212.dtor_from;
            DAST._IType _6197___mcc_h56 = _source212.dtor_typ;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_SeqConstruct) {
            DAST._IExpression _6198___mcc_h60 = _source212.dtor_length;
            DAST._IExpression _6199___mcc_h61 = _source212.dtor_elem;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _6200___mcc_h64 = _source212.dtor_elements;
            DAST._IType _6201___mcc_h65 = _source212.dtor_typ;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _6202___mcc_h68 = _source212.dtor_elements;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _6203___mcc_h70 = _source212.dtor_elements;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _6204___mcc_h72 = _source212.dtor_mapElems;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_MapBuilder) {
            DAST._IType _6205___mcc_h74 = _source212.dtor_keyType;
            DAST._IType _6206___mcc_h75 = _source212.dtor_valueType;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_SeqUpdate) {
            DAST._IExpression _6207___mcc_h78 = _source212.dtor_expr;
            DAST._IExpression _6208___mcc_h79 = _source212.dtor_indexExpr;
            DAST._IExpression _6209___mcc_h80 = _source212.dtor_value;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_MapUpdate) {
            DAST._IExpression _6210___mcc_h84 = _source212.dtor_expr;
            DAST._IExpression _6211___mcc_h85 = _source212.dtor_indexExpr;
            DAST._IExpression _6212___mcc_h86 = _source212.dtor_value;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_SetBuilder) {
            DAST._IType _6213___mcc_h90 = _source212.dtor_elemType;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_ToMultiset) {
            DAST._IExpression _6214___mcc_h92 = _source212.dtor_ToMultiset_a0;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_This) {
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Ite) {
            DAST._IExpression _6215___mcc_h94 = _source212.dtor_cond;
            DAST._IExpression _6216___mcc_h95 = _source212.dtor_thn;
            DAST._IExpression _6217___mcc_h96 = _source212.dtor_els;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_UnOp) {
            DAST._IUnaryOp _6218___mcc_h100 = _source212.dtor_unOp;
            DAST._IExpression _6219___mcc_h101 = _source212.dtor_expr;
            DAST.Format._IUnOpFormat _6220___mcc_h102 = _source212.dtor_format1;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_BinOp) {
            DAST._IBinOp _6221___mcc_h106 = _source212.dtor_op;
            DAST._IExpression _6222___mcc_h107 = _source212.dtor_left;
            DAST._IExpression _6223___mcc_h108 = _source212.dtor_right;
            DAST.Format._IBinOpFormat _6224___mcc_h109 = _source212.dtor_format2;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_ArrayLen) {
            DAST._IExpression _6225___mcc_h114 = _source212.dtor_expr;
            BigInteger _6226___mcc_h115 = _source212.dtor_dim;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_MapKeys) {
            DAST._IExpression _6227___mcc_h118 = _source212.dtor_expr;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_MapValues) {
            DAST._IExpression _6228___mcc_h120 = _source212.dtor_expr;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Select) {
            DAST._IExpression _6229___mcc_h122 = _source212.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6230___mcc_h123 = _source212.dtor_field;
            bool _6231___mcc_h124 = _source212.dtor_isConstant;
            bool _6232___mcc_h125 = _source212.dtor_onDatatype;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_SelectFn) {
            DAST._IExpression _6233___mcc_h130 = _source212.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _6234___mcc_h131 = _source212.dtor_field;
            bool _6235___mcc_h132 = _source212.dtor_onDatatype;
            bool _6236___mcc_h133 = _source212.dtor_isStatic;
            BigInteger _6237___mcc_h134 = _source212.dtor_arity;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Index) {
            DAST._IExpression _6238___mcc_h140 = _source212.dtor_expr;
            DAST._ICollKind _6239___mcc_h141 = _source212.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _6240___mcc_h142 = _source212.dtor_indices;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_IndexRange) {
            DAST._IExpression _6241___mcc_h146 = _source212.dtor_expr;
            bool _6242___mcc_h147 = _source212.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _6243___mcc_h148 = _source212.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _6244___mcc_h149 = _source212.dtor_high;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_TupleSelect) {
            DAST._IExpression _6245___mcc_h154 = _source212.dtor_expr;
            BigInteger _6246___mcc_h155 = _source212.dtor_index;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Call) {
            DAST._IExpression _6247___mcc_h158 = _source212.dtor_on;
            DAST._ICallName _6248___mcc_h159 = _source212.dtor_callName;
            Dafny.ISequence<DAST._IType> _6249___mcc_h160 = _source212.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _6250___mcc_h161 = _source212.dtor_args;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _6251___mcc_h166 = _source212.dtor_params;
            DAST._IType _6252___mcc_h167 = _source212.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _6253___mcc_h168 = _source212.dtor_body;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _6254___mcc_h172 = _source212.dtor_values;
            DAST._IType _6255___mcc_h173 = _source212.dtor_retType;
            DAST._IExpression _6256___mcc_h174 = _source212.dtor_expr;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _6257___mcc_h178 = _source212.dtor_name;
            DAST._IType _6258___mcc_h179 = _source212.dtor_typ;
            DAST._IExpression _6259___mcc_h180 = _source212.dtor_value;
            DAST._IExpression _6260___mcc_h181 = _source212.dtor_iifeBody;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_Apply) {
            DAST._IExpression _6261___mcc_h186 = _source212.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _6262___mcc_h187 = _source212.dtor_args;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_TypeTest) {
            DAST._IExpression _6263___mcc_h190 = _source212.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6264___mcc_h191 = _source212.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _6265___mcc_h192 = _source212.dtor_variant;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_InitializationValue) {
            DAST._IType _6266___mcc_h196 = _source212.dtor_typ;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_BoolBoundedPool) {
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_SetBoundedPool) {
            DAST._IExpression _6267___mcc_h198 = _source212.dtor_of;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source212.is_SeqBoundedPool) {
            DAST._IExpression _6268___mcc_h200 = _source212.dtor_of;
            bool _6269___mcc_h201 = _source212.dtor_includeDuplicates;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _6270___mcc_h204 = _source212.dtor_lo;
            DAST._IExpression _6271___mcc_h205 = _source212.dtor_hi;
            {
              _6180_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6180_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _6272_receiver;
          _6272_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source213 = _6162_maybeOutVars;
          if (_source213.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6273___mcc_h208 = _source213.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6274_outVars = _6273___mcc_h208;
            {
              if ((new BigInteger((_6274_outVars).Count)) > (BigInteger.One)) {
                _6272_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _6275_outI;
              _6275_outI = BigInteger.Zero;
              while ((_6275_outI) < (new BigInteger((_6274_outVars).Count))) {
                if ((_6275_outI).Sign == 1) {
                  _6272_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6272_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _6276_outVar;
                _6276_outVar = (_6274_outVars).Select(_6275_outI);
                _6272_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6272_receiver, (_6276_outVar));
                _6275_outI = (_6275_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_6274_outVars).Count)) > (BigInteger.One)) {
                _6272_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_6272_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          Dafny.ISequence<Dafny.Rune> _6277_renderedName;
          _6277_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source214) => {
            if (_source214.is_Name) {
              Dafny.ISequence<Dafny.Rune> _6278___mcc_h209 = _source214.dtor_name;
              Dafny.ISequence<Dafny.Rune> _6279_name = _6278___mcc_h209;
              return DCOMPUTF16.__default.escapeIdent(_6279_name);
            } else if (_source214.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source214.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source214.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_6165_name);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_6272_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_6272_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _6180_enclosingString), _6277_renderedName), _6167_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _6171_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");")));
        }
      } else if (_source210.is_Return) {
        DAST._IExpression _6280___mcc_h22 = _source210.dtor_expr;
        DAST._IExpression _6281_expr = _6280___mcc_h22;
        {
          RAST._IExpr _6282_expr;
          DCOMPUTF16._IOwnership _6283___v60;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6284_recIdents;
          RAST._IExpr _out2695;
          DCOMPUTF16._IOwnership _out2696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2697;
          DCOMPUTF16.COMP.GenExpr(_6281_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out2695, out _out2696, out _out2697);
          _6282_expr = _out2695;
          _6283___v60 = _out2696;
          _6284_recIdents = _out2697;
          readIdents = _6284_recIdents;
          if (isLast) {
            generated = _6282_expr;
          } else {
            generated = RAST.Expr.create_Return(Std.Wrappers.Option<RAST._IExpr>.create_Some(_6282_expr));
          }
        }
      } else if (_source210.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source210.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6285___mcc_h23 = _source210.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _6286_toLabel = _6285___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source215 = _6286_toLabel;
          if (_source215.is_None) {
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None());
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6287___mcc_h210 = _source215.dtor_value;
            Dafny.ISequence<Dafny.Rune> _6288_lbl = _6287___mcc_h210;
            {
              generated = RAST.Expr.create_Break(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("label_"), _6288_lbl)));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source210.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _6289___mcc_h24 = _source210.dtor_body;
        Dafny.ISequence<DAST._IStatement> _6290_body = _6289___mcc_h24;
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self.clone()")))));
          }
          BigInteger _6291_paramI;
          _6291_paramI = BigInteger.Zero;
          while ((_6291_paramI) < (new BigInteger(((env).dtor_names).Count))) {
            Dafny.ISequence<Dafny.Rune> _6292_param;
            _6292_param = ((env).dtor_names).Select(_6291_paramI);
            generated = (generated).Then(RAST.Expr.create_DeclareVar(RAST.DeclareType.create_MUT(), DCOMPUTF16.__default.escapeIdent(_6292_param), Std.Wrappers.Option<RAST._IType>.create_None(), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.__default.Clone(RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_6292_param))))));
            _6291_paramI = (_6291_paramI) + (BigInteger.One);
          }
          RAST._IExpr _6293_body;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6294_bodyIdents;
          RAST._IExpr _out2698;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2699;
          DCOMPUTF16.COMP.GenStmts(_6290_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), DCOMPUTF16.Environment.Empty(), false, earlyReturn, out _out2698, out _out2699);
          _6293_body = _out2698;
          _6294_bodyIdents = _out2699;
          readIdents = _6294_bodyIdents;
          generated = (generated).Then(RAST.Expr.create_Labelled(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START"), RAST.Expr.create_Loop(Std.Wrappers.Option<RAST._IExpr>.create_None(), _6293_body)));
        }
      } else if (_source210.is_JumpTailCallStart) {
        {
          generated = RAST.Expr.create_Continue(Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("TAIL_CALL_START")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source210.is_Halt) {
        {
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _6295___mcc_h25 = _source210.dtor_Print_a0;
        DAST._IExpression _6296_e = _6295___mcc_h25;
        {
          RAST._IExpr _6297_printedExpr;
          DCOMPUTF16._IOwnership _6298_recOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6299_recIdents;
          RAST._IExpr _out2700;
          DCOMPUTF16._IOwnership _out2701;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2702;
          DCOMPUTF16.COMP.GenExpr(_6296_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out2700, out _out2701, out _out2702);
          _6297_printedExpr = _out2700;
          _6298_recOwnership = _out2701;
          _6299_recIdents = _out2702;
          Dafny.ISequence<Dafny.Rune> _6300_printedExprString;
          _6300_printedExprString = (_6297_printedExpr)._ToString(DCOMPUTF16.__default.IND);
          generated = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _6300_printedExprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));")));
          readIdents = _6299_recIdents;
        }
      }
    }
    public static Std.Wrappers._IOption<RAST._IType> NewtypeToRustType(DAST._IType @base, DAST._INewtypeRange range)
    {
      DAST._INewtypeRange _source216 = range;
      if (_source216.is_U8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U8());
      } else if (_source216.is_I8) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I8());
      } else if (_source216.is_U16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U16());
      } else if (_source216.is_I16) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I16());
      } else if (_source216.is_U32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U32());
      } else if (_source216.is_I32) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I32());
      } else if (_source216.is_U64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U64());
      } else if (_source216.is_I64) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I64());
      } else if (_source216.is_U128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_U128());
      } else if (_source216.is_I128) {
        return Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_I128());
      } else if (_source216.is_BigInt) {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      } else {
        return Std.Wrappers.Option<RAST._IType>.create_None();
      }
    }
    public static void FromOwned(RAST._IExpr r, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
        @out = r;
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
      } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) {
        @out = RAST.__default.Borrow(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
      } else {
        @out = RAST.__default.BorrowMut(r);
        resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
      }
    }
    public static void FromOwnership(RAST._IExpr r, DCOMPUTF16._IOwnership ownership, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr @out, out DCOMPUTF16._IOwnership resultingOwnership)
    {
      @out = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      if (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
        RAST._IExpr _out2703;
        DCOMPUTF16._IOwnership _out2704;
        DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2703, out _out2704);
        @out = _out2703;
        resultingOwnership = _out2704;
        return ;
      } else if ((object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
        if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          @out = RAST.__default.Clone(r);
        } else if ((object.Equals(expectedOwnership, ownership)) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
          resultingOwnership = ownership;
          @out = r;
        } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) && (object.Equals(ownership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut()))) {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          @out = r;
        } else {
          resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          @out = RAST.__default.BorrowMut(r);
        }
      } else {
      }
    }
    public static void GenExprLiteral(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source217 = e;
      DAST._ILiteral _6301___mcc_h0 = _source217.dtor_Literal_a0;
      DAST._ILiteral _source218 = _6301___mcc_h0;
      if (_source218.is_BoolLiteral) {
        bool _6302___mcc_h1 = _source218.dtor_BoolLiteral_a0;
        if ((_6302___mcc_h1) == (false)) {
          {
            RAST._IExpr _out2705;
            DCOMPUTF16._IOwnership _out2706;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false")), expectedOwnership, out _out2705, out _out2706);
            r = _out2705;
            resultingOwnership = _out2706;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        } else {
          {
            RAST._IExpr _out2707;
            DCOMPUTF16._IOwnership _out2708;
            DCOMPUTF16.COMP.FromOwned(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true")), expectedOwnership, out _out2707, out _out2708);
            r = _out2707;
            resultingOwnership = _out2708;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            return ;
          }
        }
      } else if (_source218.is_IntLiteral) {
        Dafny.ISequence<Dafny.Rune> _6303___mcc_h2 = _source218.dtor_IntLiteral_a0;
        DAST._IType _6304___mcc_h3 = _source218.dtor_IntLiteral_a1;
        DAST._IType _6305_t = _6304___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _6306_i = _6303___mcc_h2;
        {
          DAST._IType _source219 = _6305_t;
          if (_source219.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6307___mcc_h100 = _source219.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6308___mcc_h101 = _source219.dtor_typeArgs;
            DAST._IResolvedType _6309___mcc_h102 = _source219.dtor_resolved;
            DAST._IType _6310_o = _6305_t;
            {
              RAST._IType _6311_genType;
              RAST._IType _out2709;
              _out2709 = DCOMPUTF16.COMP.GenType(_6310_o, false, false);
              _6311_genType = _out2709;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6311_genType);
            }
          } else if (_source219.is_Nullable) {
            DAST._IType _6312___mcc_h106 = _source219.dtor_Nullable_a0;
            DAST._IType _6313_o = _6305_t;
            {
              RAST._IType _6314_genType;
              RAST._IType _out2710;
              _out2710 = DCOMPUTF16.COMP.GenType(_6313_o, false, false);
              _6314_genType = _out2710;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6314_genType);
            }
          } else if (_source219.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6315___mcc_h108 = _source219.dtor_Tuple_a0;
            DAST._IType _6316_o = _6305_t;
            {
              RAST._IType _6317_genType;
              RAST._IType _out2711;
              _out2711 = DCOMPUTF16.COMP.GenType(_6316_o, false, false);
              _6317_genType = _out2711;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6317_genType);
            }
          } else if (_source219.is_Array) {
            DAST._IType _6318___mcc_h110 = _source219.dtor_element;
            BigInteger _6319___mcc_h111 = _source219.dtor_dims;
            DAST._IType _6320_o = _6305_t;
            {
              RAST._IType _6321_genType;
              RAST._IType _out2712;
              _out2712 = DCOMPUTF16.COMP.GenType(_6320_o, false, false);
              _6321_genType = _out2712;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6321_genType);
            }
          } else if (_source219.is_Seq) {
            DAST._IType _6322___mcc_h114 = _source219.dtor_element;
            DAST._IType _6323_o = _6305_t;
            {
              RAST._IType _6324_genType;
              RAST._IType _out2713;
              _out2713 = DCOMPUTF16.COMP.GenType(_6323_o, false, false);
              _6324_genType = _out2713;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6324_genType);
            }
          } else if (_source219.is_Set) {
            DAST._IType _6325___mcc_h116 = _source219.dtor_element;
            DAST._IType _6326_o = _6305_t;
            {
              RAST._IType _6327_genType;
              RAST._IType _out2714;
              _out2714 = DCOMPUTF16.COMP.GenType(_6326_o, false, false);
              _6327_genType = _out2714;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6327_genType);
            }
          } else if (_source219.is_Multiset) {
            DAST._IType _6328___mcc_h118 = _source219.dtor_element;
            DAST._IType _6329_o = _6305_t;
            {
              RAST._IType _6330_genType;
              RAST._IType _out2715;
              _out2715 = DCOMPUTF16.COMP.GenType(_6329_o, false, false);
              _6330_genType = _out2715;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6330_genType);
            }
          } else if (_source219.is_Map) {
            DAST._IType _6331___mcc_h120 = _source219.dtor_key;
            DAST._IType _6332___mcc_h121 = _source219.dtor_value;
            DAST._IType _6333_o = _6305_t;
            {
              RAST._IType _6334_genType;
              RAST._IType _out2716;
              _out2716 = DCOMPUTF16.COMP.GenType(_6333_o, false, false);
              _6334_genType = _out2716;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6334_genType);
            }
          } else if (_source219.is_SetBuilder) {
            DAST._IType _6335___mcc_h124 = _source219.dtor_element;
            DAST._IType _6336_o = _6305_t;
            {
              RAST._IType _6337_genType;
              RAST._IType _out2717;
              _out2717 = DCOMPUTF16.COMP.GenType(_6336_o, false, false);
              _6337_genType = _out2717;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6337_genType);
            }
          } else if (_source219.is_MapBuilder) {
            DAST._IType _6338___mcc_h126 = _source219.dtor_key;
            DAST._IType _6339___mcc_h127 = _source219.dtor_value;
            DAST._IType _6340_o = _6305_t;
            {
              RAST._IType _6341_genType;
              RAST._IType _out2718;
              _out2718 = DCOMPUTF16.COMP.GenType(_6340_o, false, false);
              _6341_genType = _out2718;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6341_genType);
            }
          } else if (_source219.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6342___mcc_h130 = _source219.dtor_args;
            DAST._IType _6343___mcc_h131 = _source219.dtor_result;
            DAST._IType _6344_o = _6305_t;
            {
              RAST._IType _6345_genType;
              RAST._IType _out2719;
              _out2719 = DCOMPUTF16.COMP.GenType(_6344_o, false, false);
              _6345_genType = _out2719;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6345_genType);
            }
          } else if (_source219.is_Primitive) {
            DAST._IPrimitive _6346___mcc_h134 = _source219.dtor_Primitive_a0;
            DAST._IPrimitive _source220 = _6346___mcc_h134;
            if (_source220.is_Int) {
              {
                if ((new BigInteger((_6306_i).Count)) <= (new BigInteger(4))) {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralInt(_6306_i));
                } else {
                  r = (((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("DafnyInt"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from"))).Apply1(RAST.Expr.create_LiteralString(_6306_i, true));
                }
              }
            } else if (_source220.is_Real) {
              DAST._IType _6347_o = _6305_t;
              {
                RAST._IType _6348_genType;
                RAST._IType _out2720;
                _out2720 = DCOMPUTF16.COMP.GenType(_6347_o, false, false);
                _6348_genType = _out2720;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6348_genType);
              }
            } else if (_source220.is_String) {
              DAST._IType _6349_o = _6305_t;
              {
                RAST._IType _6350_genType;
                RAST._IType _out2721;
                _out2721 = DCOMPUTF16.COMP.GenType(_6349_o, false, false);
                _6350_genType = _out2721;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6350_genType);
              }
            } else if (_source220.is_Bool) {
              DAST._IType _6351_o = _6305_t;
              {
                RAST._IType _6352_genType;
                RAST._IType _out2722;
                _out2722 = DCOMPUTF16.COMP.GenType(_6351_o, false, false);
                _6352_genType = _out2722;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6352_genType);
              }
            } else {
              DAST._IType _6353_o = _6305_t;
              {
                RAST._IType _6354_genType;
                RAST._IType _out2723;
                _out2723 = DCOMPUTF16.COMP.GenType(_6353_o, false, false);
                _6354_genType = _out2723;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6354_genType);
              }
            }
          } else if (_source219.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6355___mcc_h136 = _source219.dtor_Passthrough_a0;
            DAST._IType _6356_o = _6305_t;
            {
              RAST._IType _6357_genType;
              RAST._IType _out2724;
              _out2724 = DCOMPUTF16.COMP.GenType(_6356_o, false, false);
              _6357_genType = _out2724;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6357_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6358___mcc_h138 = _source219.dtor_TypeArg_a0;
            DAST._IType _6359_o = _6305_t;
            {
              RAST._IType _6360_genType;
              RAST._IType _out2725;
              _out2725 = DCOMPUTF16.COMP.GenType(_6359_o, false, false);
              _6360_genType = _out2725;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(_6306_i), _6360_genType);
            }
          }
          RAST._IExpr _out2726;
          DCOMPUTF16._IOwnership _out2727;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2726, out _out2727);
          r = _out2726;
          resultingOwnership = _out2727;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source218.is_DecLiteral) {
        Dafny.ISequence<Dafny.Rune> _6361___mcc_h4 = _source218.dtor_DecLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _6362___mcc_h5 = _source218.dtor_DecLiteral_a1;
        DAST._IType _6363___mcc_h6 = _source218.dtor_DecLiteral_a2;
        DAST._IType _6364_t = _6363___mcc_h6;
        Dafny.ISequence<Dafny.Rune> _6365_d = _6362___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _6366_n = _6361___mcc_h4;
        {
          DAST._IType _source221 = _6364_t;
          if (_source221.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6367___mcc_h140 = _source221.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6368___mcc_h141 = _source221.dtor_typeArgs;
            DAST._IResolvedType _6369___mcc_h142 = _source221.dtor_resolved;
            DAST._IType _6370_o = _6364_t;
            {
              RAST._IType _6371_genType;
              RAST._IType _out2728;
              _out2728 = DCOMPUTF16.COMP.GenType(_6370_o, false, false);
              _6371_genType = _out2728;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6371_genType);
            }
          } else if (_source221.is_Nullable) {
            DAST._IType _6372___mcc_h146 = _source221.dtor_Nullable_a0;
            DAST._IType _6373_o = _6364_t;
            {
              RAST._IType _6374_genType;
              RAST._IType _out2729;
              _out2729 = DCOMPUTF16.COMP.GenType(_6373_o, false, false);
              _6374_genType = _out2729;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6374_genType);
            }
          } else if (_source221.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6375___mcc_h148 = _source221.dtor_Tuple_a0;
            DAST._IType _6376_o = _6364_t;
            {
              RAST._IType _6377_genType;
              RAST._IType _out2730;
              _out2730 = DCOMPUTF16.COMP.GenType(_6376_o, false, false);
              _6377_genType = _out2730;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6377_genType);
            }
          } else if (_source221.is_Array) {
            DAST._IType _6378___mcc_h150 = _source221.dtor_element;
            BigInteger _6379___mcc_h151 = _source221.dtor_dims;
            DAST._IType _6380_o = _6364_t;
            {
              RAST._IType _6381_genType;
              RAST._IType _out2731;
              _out2731 = DCOMPUTF16.COMP.GenType(_6380_o, false, false);
              _6381_genType = _out2731;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6381_genType);
            }
          } else if (_source221.is_Seq) {
            DAST._IType _6382___mcc_h154 = _source221.dtor_element;
            DAST._IType _6383_o = _6364_t;
            {
              RAST._IType _6384_genType;
              RAST._IType _out2732;
              _out2732 = DCOMPUTF16.COMP.GenType(_6383_o, false, false);
              _6384_genType = _out2732;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6384_genType);
            }
          } else if (_source221.is_Set) {
            DAST._IType _6385___mcc_h156 = _source221.dtor_element;
            DAST._IType _6386_o = _6364_t;
            {
              RAST._IType _6387_genType;
              RAST._IType _out2733;
              _out2733 = DCOMPUTF16.COMP.GenType(_6386_o, false, false);
              _6387_genType = _out2733;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6387_genType);
            }
          } else if (_source221.is_Multiset) {
            DAST._IType _6388___mcc_h158 = _source221.dtor_element;
            DAST._IType _6389_o = _6364_t;
            {
              RAST._IType _6390_genType;
              RAST._IType _out2734;
              _out2734 = DCOMPUTF16.COMP.GenType(_6389_o, false, false);
              _6390_genType = _out2734;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6390_genType);
            }
          } else if (_source221.is_Map) {
            DAST._IType _6391___mcc_h160 = _source221.dtor_key;
            DAST._IType _6392___mcc_h161 = _source221.dtor_value;
            DAST._IType _6393_o = _6364_t;
            {
              RAST._IType _6394_genType;
              RAST._IType _out2735;
              _out2735 = DCOMPUTF16.COMP.GenType(_6393_o, false, false);
              _6394_genType = _out2735;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6394_genType);
            }
          } else if (_source221.is_SetBuilder) {
            DAST._IType _6395___mcc_h164 = _source221.dtor_element;
            DAST._IType _6396_o = _6364_t;
            {
              RAST._IType _6397_genType;
              RAST._IType _out2736;
              _out2736 = DCOMPUTF16.COMP.GenType(_6396_o, false, false);
              _6397_genType = _out2736;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6397_genType);
            }
          } else if (_source221.is_MapBuilder) {
            DAST._IType _6398___mcc_h166 = _source221.dtor_key;
            DAST._IType _6399___mcc_h167 = _source221.dtor_value;
            DAST._IType _6400_o = _6364_t;
            {
              RAST._IType _6401_genType;
              RAST._IType _out2737;
              _out2737 = DCOMPUTF16.COMP.GenType(_6400_o, false, false);
              _6401_genType = _out2737;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6401_genType);
            }
          } else if (_source221.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6402___mcc_h170 = _source221.dtor_args;
            DAST._IType _6403___mcc_h171 = _source221.dtor_result;
            DAST._IType _6404_o = _6364_t;
            {
              RAST._IType _6405_genType;
              RAST._IType _out2738;
              _out2738 = DCOMPUTF16.COMP.GenType(_6404_o, false, false);
              _6405_genType = _out2738;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6405_genType);
            }
          } else if (_source221.is_Primitive) {
            DAST._IPrimitive _6406___mcc_h174 = _source221.dtor_Primitive_a0;
            DAST._IPrimitive _source222 = _6406___mcc_h174;
            if (_source222.is_Int) {
              DAST._IType _6407_o = _6364_t;
              {
                RAST._IType _6408_genType;
                RAST._IType _out2739;
                _out2739 = DCOMPUTF16.COMP.GenType(_6407_o, false, false);
                _6408_genType = _out2739;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6408_genType);
              }
            } else if (_source222.is_Real) {
              {
                r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"))));
              }
            } else if (_source222.is_String) {
              DAST._IType _6409_o = _6364_t;
              {
                RAST._IType _6410_genType;
                RAST._IType _out2740;
                _out2740 = DCOMPUTF16.COMP.GenType(_6409_o, false, false);
                _6410_genType = _out2740;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6410_genType);
              }
            } else if (_source222.is_Bool) {
              DAST._IType _6411_o = _6364_t;
              {
                RAST._IType _6412_genType;
                RAST._IType _out2741;
                _out2741 = DCOMPUTF16.COMP.GenType(_6411_o, false, false);
                _6412_genType = _out2741;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6412_genType);
              }
            } else {
              DAST._IType _6413_o = _6364_t;
              {
                RAST._IType _6414_genType;
                RAST._IType _out2742;
                _out2742 = DCOMPUTF16.COMP.GenType(_6413_o, false, false);
                _6414_genType = _out2742;
                r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6414_genType);
              }
            }
          } else if (_source221.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6415___mcc_h176 = _source221.dtor_Passthrough_a0;
            DAST._IType _6416_o = _6364_t;
            {
              RAST._IType _6417_genType;
              RAST._IType _out2743;
              _out2743 = DCOMPUTF16.COMP.GenType(_6416_o, false, false);
              _6417_genType = _out2743;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6417_genType);
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6418___mcc_h178 = _source221.dtor_TypeArg_a0;
            DAST._IType _6419_o = _6364_t;
            {
              RAST._IType _6420_genType;
              RAST._IType _out2744;
              _out2744 = DCOMPUTF16.COMP.GenType(_6419_o, false, false);
              _6420_genType = _out2744;
              r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _6366_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _6365_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))), _6420_genType);
            }
          }
          RAST._IExpr _out2745;
          DCOMPUTF16._IOwnership _out2746;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2745, out _out2746);
          r = _out2745;
          resultingOwnership = _out2746;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source218.is_StringLiteral) {
        Dafny.ISequence<Dafny.Rune> _6421___mcc_h7 = _source218.dtor_StringLiteral_a0;
        Dafny.ISequence<Dafny.Rune> _6422_l = _6421___mcc_h7;
        {
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("string_of"))).Apply1(RAST.Expr.create_LiteralString(_6422_l, false));
          RAST._IExpr _out2747;
          DCOMPUTF16._IOwnership _out2748;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2747, out _out2748);
          r = _out2747;
          resultingOwnership = _out2748;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source218.is_CharLiteral) {
        Dafny.Rune _6423___mcc_h8 = _source218.dtor_CharLiteral_a0;
        Dafny.Rune _6424_c = _6423___mcc_h8;
        {
          r = RAST.Expr.create_LiteralInt(Std.Strings.__default.OfNat(new BigInteger((_6424_c).Value)));
          if (!(DCOMPUTF16.__default.UnicodeChars)) {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u16"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          } else {
            r = (((((((RAST.__default.@global).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("primitive"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char"))).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_u32"))).Apply1(r)).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unwrap"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          }
          r = ((RAST.__default.dafny__runtime).MSel(DCOMPUTF16.__default.DafnyChar)).Apply1(r);
          RAST._IExpr _out2749;
          DCOMPUTF16._IOwnership _out2750;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2749, out _out2750);
          r = _out2749;
          resultingOwnership = _out2750;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else {
        DAST._IType _6425___mcc_h9 = _source218.dtor_Null_a0;
        DAST._IType _6426_tpe = _6425___mcc_h9;
        {
          RAST._IType _6427_tpeGen;
          RAST._IType _out2751;
          _out2751 = DCOMPUTF16.COMP.GenType(_6426_tpe, false, false);
          _6427_tpeGen = _out2751;
          r = RAST.Expr.create_TypeAscription(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("None")), _6427_tpeGen);
          RAST._IExpr _out2752;
          DCOMPUTF16._IOwnership _out2753;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2752, out _out2753);
          r = _out2752;
          resultingOwnership = _out2753;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      }
    }
    public static void GenExprBinary(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs53 = e;
      DAST._IBinOp _6428_op = _let_tmp_rhs53.dtor_op;
      DAST._IExpression _6429_lExpr = _let_tmp_rhs53.dtor_left;
      DAST._IExpression _6430_rExpr = _let_tmp_rhs53.dtor_right;
      DAST.Format._IBinOpFormat _6431_format = _let_tmp_rhs53.dtor_format2;
      bool _6432_becomesLeftCallsRight;
      _6432_becomesLeftCallsRight = ((System.Func<DAST._IBinOp, bool>)((_source223) => {
        if (_source223.is_Eq) {
          bool _6433___mcc_h0 = _source223.dtor_referential;
          bool _6434___mcc_h1 = _source223.dtor_nullable;
          return false;
        } else if (_source223.is_Div) {
          return false;
        } else if (_source223.is_EuclidianDiv) {
          return false;
        } else if (_source223.is_Mod) {
          return false;
        } else if (_source223.is_EuclidianMod) {
          return false;
        } else if (_source223.is_Lt) {
          return false;
        } else if (_source223.is_LtChar) {
          return false;
        } else if (_source223.is_Plus) {
          return false;
        } else if (_source223.is_Minus) {
          return false;
        } else if (_source223.is_Times) {
          return false;
        } else if (_source223.is_BitwiseAnd) {
          return false;
        } else if (_source223.is_BitwiseOr) {
          return false;
        } else if (_source223.is_BitwiseXor) {
          return false;
        } else if (_source223.is_BitwiseShiftRight) {
          return false;
        } else if (_source223.is_BitwiseShiftLeft) {
          return false;
        } else if (_source223.is_And) {
          return false;
        } else if (_source223.is_Or) {
          return false;
        } else if (_source223.is_In) {
          return false;
        } else if (_source223.is_SeqProperPrefix) {
          return false;
        } else if (_source223.is_SeqPrefix) {
          return false;
        } else if (_source223.is_SetMerge) {
          return true;
        } else if (_source223.is_SetSubtraction) {
          return true;
        } else if (_source223.is_SetIntersection) {
          return true;
        } else if (_source223.is_Subset) {
          return false;
        } else if (_source223.is_ProperSubset) {
          return false;
        } else if (_source223.is_SetDisjoint) {
          return true;
        } else if (_source223.is_MapMerge) {
          return true;
        } else if (_source223.is_MapSubtraction) {
          return true;
        } else if (_source223.is_MultisetMerge) {
          return true;
        } else if (_source223.is_MultisetSubtraction) {
          return true;
        } else if (_source223.is_MultisetIntersection) {
          return true;
        } else if (_source223.is_Submultiset) {
          return false;
        } else if (_source223.is_ProperSubmultiset) {
          return false;
        } else if (_source223.is_MultisetDisjoint) {
          return true;
        } else if (_source223.is_Concat) {
          return true;
        } else {
          Dafny.ISequence<Dafny.Rune> _6435___mcc_h4 = _source223.dtor_Passthrough_a0;
          return false;
        }
      }))(_6428_op);
      bool _6436_becomesRightCallsLeft;
      _6436_becomesRightCallsLeft = ((System.Func<DAST._IBinOp, bool>)((_source224) => {
        if (_source224.is_Eq) {
          bool _6437___mcc_h6 = _source224.dtor_referential;
          bool _6438___mcc_h7 = _source224.dtor_nullable;
          return false;
        } else if (_source224.is_Div) {
          return false;
        } else if (_source224.is_EuclidianDiv) {
          return false;
        } else if (_source224.is_Mod) {
          return false;
        } else if (_source224.is_EuclidianMod) {
          return false;
        } else if (_source224.is_Lt) {
          return false;
        } else if (_source224.is_LtChar) {
          return false;
        } else if (_source224.is_Plus) {
          return false;
        } else if (_source224.is_Minus) {
          return false;
        } else if (_source224.is_Times) {
          return false;
        } else if (_source224.is_BitwiseAnd) {
          return false;
        } else if (_source224.is_BitwiseOr) {
          return false;
        } else if (_source224.is_BitwiseXor) {
          return false;
        } else if (_source224.is_BitwiseShiftRight) {
          return false;
        } else if (_source224.is_BitwiseShiftLeft) {
          return false;
        } else if (_source224.is_And) {
          return false;
        } else if (_source224.is_Or) {
          return false;
        } else if (_source224.is_In) {
          return true;
        } else if (_source224.is_SeqProperPrefix) {
          return false;
        } else if (_source224.is_SeqPrefix) {
          return false;
        } else if (_source224.is_SetMerge) {
          return false;
        } else if (_source224.is_SetSubtraction) {
          return false;
        } else if (_source224.is_SetIntersection) {
          return false;
        } else if (_source224.is_Subset) {
          return false;
        } else if (_source224.is_ProperSubset) {
          return false;
        } else if (_source224.is_SetDisjoint) {
          return false;
        } else if (_source224.is_MapMerge) {
          return false;
        } else if (_source224.is_MapSubtraction) {
          return false;
        } else if (_source224.is_MultisetMerge) {
          return false;
        } else if (_source224.is_MultisetSubtraction) {
          return false;
        } else if (_source224.is_MultisetIntersection) {
          return false;
        } else if (_source224.is_Submultiset) {
          return false;
        } else if (_source224.is_ProperSubmultiset) {
          return false;
        } else if (_source224.is_MultisetDisjoint) {
          return false;
        } else if (_source224.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _6439___mcc_h10 = _source224.dtor_Passthrough_a0;
          return false;
        }
      }))(_6428_op);
      bool _6440_becomesCallLeftRight;
      _6440_becomesCallLeftRight = ((System.Func<DAST._IBinOp, bool>)((_source225) => {
        if (_source225.is_Eq) {
          bool _6441___mcc_h12 = _source225.dtor_referential;
          bool _6442___mcc_h13 = _source225.dtor_nullable;
          if ((_6441___mcc_h12) == (true)) {
            if ((_6442___mcc_h13) == (false)) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else if (_source225.is_Div) {
          return false;
        } else if (_source225.is_EuclidianDiv) {
          return false;
        } else if (_source225.is_Mod) {
          return false;
        } else if (_source225.is_EuclidianMod) {
          return false;
        } else if (_source225.is_Lt) {
          return false;
        } else if (_source225.is_LtChar) {
          return false;
        } else if (_source225.is_Plus) {
          return false;
        } else if (_source225.is_Minus) {
          return false;
        } else if (_source225.is_Times) {
          return false;
        } else if (_source225.is_BitwiseAnd) {
          return false;
        } else if (_source225.is_BitwiseOr) {
          return false;
        } else if (_source225.is_BitwiseXor) {
          return false;
        } else if (_source225.is_BitwiseShiftRight) {
          return false;
        } else if (_source225.is_BitwiseShiftLeft) {
          return false;
        } else if (_source225.is_And) {
          return false;
        } else if (_source225.is_Or) {
          return false;
        } else if (_source225.is_In) {
          return false;
        } else if (_source225.is_SeqProperPrefix) {
          return false;
        } else if (_source225.is_SeqPrefix) {
          return false;
        } else if (_source225.is_SetMerge) {
          return false;
        } else if (_source225.is_SetSubtraction) {
          return false;
        } else if (_source225.is_SetIntersection) {
          return false;
        } else if (_source225.is_Subset) {
          return false;
        } else if (_source225.is_ProperSubset) {
          return false;
        } else if (_source225.is_SetDisjoint) {
          return false;
        } else if (_source225.is_MapMerge) {
          return false;
        } else if (_source225.is_MapSubtraction) {
          return false;
        } else if (_source225.is_MultisetMerge) {
          return false;
        } else if (_source225.is_MultisetSubtraction) {
          return false;
        } else if (_source225.is_MultisetIntersection) {
          return false;
        } else if (_source225.is_Submultiset) {
          return false;
        } else if (_source225.is_ProperSubmultiset) {
          return false;
        } else if (_source225.is_MultisetDisjoint) {
          return false;
        } else if (_source225.is_Concat) {
          return false;
        } else {
          Dafny.ISequence<Dafny.Rune> _6443___mcc_h16 = _source225.dtor_Passthrough_a0;
          return false;
        }
      }))(_6428_op);
      DCOMPUTF16._IOwnership _6444_expectedLeftOwnership;
      _6444_expectedLeftOwnership = ((_6432_becomesLeftCallsRight) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : ((((_6436_becomesRightCallsLeft) || (_6440_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      DCOMPUTF16._IOwnership _6445_expectedRightOwnership;
      _6445_expectedRightOwnership = (((_6432_becomesLeftCallsRight) || (_6440_becomesCallLeftRight)) ? (DCOMPUTF16.Ownership.create_OwnershipBorrowed()) : (((_6436_becomesRightCallsLeft) ? (DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()) : (DCOMPUTF16.Ownership.create_OwnershipOwned()))));
      RAST._IExpr _6446_left;
      DCOMPUTF16._IOwnership _6447___v65;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6448_recIdentsL;
      RAST._IExpr _out2754;
      DCOMPUTF16._IOwnership _out2755;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2756;
      DCOMPUTF16.COMP.GenExpr(_6429_lExpr, selfIdent, env, _6444_expectedLeftOwnership, out _out2754, out _out2755, out _out2756);
      _6446_left = _out2754;
      _6447___v65 = _out2755;
      _6448_recIdentsL = _out2756;
      RAST._IExpr _6449_right;
      DCOMPUTF16._IOwnership _6450___v66;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6451_recIdentsR;
      RAST._IExpr _out2757;
      DCOMPUTF16._IOwnership _out2758;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2759;
      DCOMPUTF16.COMP.GenExpr(_6430_rExpr, selfIdent, env, _6445_expectedRightOwnership, out _out2757, out _out2758, out _out2759);
      _6449_right = _out2757;
      _6450___v66 = _out2758;
      _6451_recIdentsR = _out2759;
      DAST._IBinOp _source226 = _6428_op;
      if (_source226.is_Eq) {
        bool _6452___mcc_h18 = _source226.dtor_referential;
        bool _6453___mcc_h19 = _source226.dtor_nullable;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source227 = _6428_op;
            if (_source227.is_Eq) {
              bool _6454___mcc_h24 = _source227.dtor_referential;
              bool _6455___mcc_h25 = _source227.dtor_nullable;
              bool _6456_nullable = _6455___mcc_h25;
              bool _6457_referential = _6454___mcc_h24;
              {
                if (_6457_referential) {
                  if (_6456_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source227.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source227.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6458___mcc_h26 = _source227.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6459_op = _6458___mcc_h26;
              {
                r = RAST.Expr.create_BinaryOp(_6459_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_Div) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source228 = _6428_op;
            if (_source228.is_Eq) {
              bool _6460___mcc_h27 = _source228.dtor_referential;
              bool _6461___mcc_h28 = _source228.dtor_nullable;
              bool _6462_nullable = _6461___mcc_h28;
              bool _6463_referential = _6460___mcc_h27;
              {
                if (_6463_referential) {
                  if (_6462_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source228.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source228.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6464___mcc_h29 = _source228.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6465_op = _6464___mcc_h29;
              {
                r = RAST.Expr.create_BinaryOp(_6465_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_EuclidianDiv) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source229 = _6428_op;
            if (_source229.is_Eq) {
              bool _6466___mcc_h30 = _source229.dtor_referential;
              bool _6467___mcc_h31 = _source229.dtor_nullable;
              bool _6468_nullable = _6467___mcc_h31;
              bool _6469_referential = _6466___mcc_h30;
              {
                if (_6469_referential) {
                  if (_6468_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source229.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source229.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6470___mcc_h32 = _source229.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6471_op = _6470___mcc_h32;
              {
                r = RAST.Expr.create_BinaryOp(_6471_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_Mod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source230 = _6428_op;
            if (_source230.is_Eq) {
              bool _6472___mcc_h33 = _source230.dtor_referential;
              bool _6473___mcc_h34 = _source230.dtor_nullable;
              bool _6474_nullable = _6473___mcc_h34;
              bool _6475_referential = _6472___mcc_h33;
              {
                if (_6475_referential) {
                  if (_6474_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source230.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source230.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6476___mcc_h35 = _source230.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6477_op = _6476___mcc_h35;
              {
                r = RAST.Expr.create_BinaryOp(_6477_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_EuclidianMod) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source231 = _6428_op;
            if (_source231.is_Eq) {
              bool _6478___mcc_h36 = _source231.dtor_referential;
              bool _6479___mcc_h37 = _source231.dtor_nullable;
              bool _6480_nullable = _6479___mcc_h37;
              bool _6481_referential = _6478___mcc_h36;
              {
                if (_6481_referential) {
                  if (_6480_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source231.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source231.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6482___mcc_h38 = _source231.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6483_op = _6482___mcc_h38;
              {
                r = RAST.Expr.create_BinaryOp(_6483_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_Lt) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source232 = _6428_op;
            if (_source232.is_Eq) {
              bool _6484___mcc_h39 = _source232.dtor_referential;
              bool _6485___mcc_h40 = _source232.dtor_nullable;
              bool _6486_nullable = _6485___mcc_h40;
              bool _6487_referential = _6484___mcc_h39;
              {
                if (_6487_referential) {
                  if (_6486_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source232.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source232.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6488___mcc_h41 = _source232.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6489_op = _6488___mcc_h41;
              {
                r = RAST.Expr.create_BinaryOp(_6489_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_LtChar) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source233 = _6428_op;
            if (_source233.is_Eq) {
              bool _6490___mcc_h42 = _source233.dtor_referential;
              bool _6491___mcc_h43 = _source233.dtor_nullable;
              bool _6492_nullable = _6491___mcc_h43;
              bool _6493_referential = _6490___mcc_h42;
              {
                if (_6493_referential) {
                  if (_6492_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source233.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source233.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6494___mcc_h44 = _source233.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6495_op = _6494___mcc_h44;
              {
                r = RAST.Expr.create_BinaryOp(_6495_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_Plus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source234 = _6428_op;
            if (_source234.is_Eq) {
              bool _6496___mcc_h45 = _source234.dtor_referential;
              bool _6497___mcc_h46 = _source234.dtor_nullable;
              bool _6498_nullable = _6497___mcc_h46;
              bool _6499_referential = _6496___mcc_h45;
              {
                if (_6499_referential) {
                  if (_6498_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source234.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source234.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6500___mcc_h47 = _source234.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6501_op = _6500___mcc_h47;
              {
                r = RAST.Expr.create_BinaryOp(_6501_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_Minus) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source235 = _6428_op;
            if (_source235.is_Eq) {
              bool _6502___mcc_h48 = _source235.dtor_referential;
              bool _6503___mcc_h49 = _source235.dtor_nullable;
              bool _6504_nullable = _6503___mcc_h49;
              bool _6505_referential = _6502___mcc_h48;
              {
                if (_6505_referential) {
                  if (_6504_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source235.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source235.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6506___mcc_h50 = _source235.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6507_op = _6506___mcc_h50;
              {
                r = RAST.Expr.create_BinaryOp(_6507_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_Times) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source236 = _6428_op;
            if (_source236.is_Eq) {
              bool _6508___mcc_h51 = _source236.dtor_referential;
              bool _6509___mcc_h52 = _source236.dtor_nullable;
              bool _6510_nullable = _6509___mcc_h52;
              bool _6511_referential = _6508___mcc_h51;
              {
                if (_6511_referential) {
                  if (_6510_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source236.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source236.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6512___mcc_h53 = _source236.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6513_op = _6512___mcc_h53;
              {
                r = RAST.Expr.create_BinaryOp(_6513_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_BitwiseAnd) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source237 = _6428_op;
            if (_source237.is_Eq) {
              bool _6514___mcc_h54 = _source237.dtor_referential;
              bool _6515___mcc_h55 = _source237.dtor_nullable;
              bool _6516_nullable = _6515___mcc_h55;
              bool _6517_referential = _6514___mcc_h54;
              {
                if (_6517_referential) {
                  if (_6516_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source237.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source237.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6518___mcc_h56 = _source237.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6519_op = _6518___mcc_h56;
              {
                r = RAST.Expr.create_BinaryOp(_6519_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_BitwiseOr) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source238 = _6428_op;
            if (_source238.is_Eq) {
              bool _6520___mcc_h57 = _source238.dtor_referential;
              bool _6521___mcc_h58 = _source238.dtor_nullable;
              bool _6522_nullable = _6521___mcc_h58;
              bool _6523_referential = _6520___mcc_h57;
              {
                if (_6523_referential) {
                  if (_6522_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source238.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source238.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6524___mcc_h59 = _source238.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6525_op = _6524___mcc_h59;
              {
                r = RAST.Expr.create_BinaryOp(_6525_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_BitwiseXor) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source239 = _6428_op;
            if (_source239.is_Eq) {
              bool _6526___mcc_h60 = _source239.dtor_referential;
              bool _6527___mcc_h61 = _source239.dtor_nullable;
              bool _6528_nullable = _6527___mcc_h61;
              bool _6529_referential = _6526___mcc_h60;
              {
                if (_6529_referential) {
                  if (_6528_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source239.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source239.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6530___mcc_h62 = _source239.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6531_op = _6530___mcc_h62;
              {
                r = RAST.Expr.create_BinaryOp(_6531_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_BitwiseShiftRight) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source240 = _6428_op;
            if (_source240.is_Eq) {
              bool _6532___mcc_h63 = _source240.dtor_referential;
              bool _6533___mcc_h64 = _source240.dtor_nullable;
              bool _6534_nullable = _6533___mcc_h64;
              bool _6535_referential = _6532___mcc_h63;
              {
                if (_6535_referential) {
                  if (_6534_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source240.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source240.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6536___mcc_h65 = _source240.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6537_op = _6536___mcc_h65;
              {
                r = RAST.Expr.create_BinaryOp(_6537_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_BitwiseShiftLeft) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source241 = _6428_op;
            if (_source241.is_Eq) {
              bool _6538___mcc_h66 = _source241.dtor_referential;
              bool _6539___mcc_h67 = _source241.dtor_nullable;
              bool _6540_nullable = _6539___mcc_h67;
              bool _6541_referential = _6538___mcc_h66;
              {
                if (_6541_referential) {
                  if (_6540_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source241.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source241.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6542___mcc_h68 = _source241.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6543_op = _6542___mcc_h68;
              {
                r = RAST.Expr.create_BinaryOp(_6543_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_And) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source242 = _6428_op;
            if (_source242.is_Eq) {
              bool _6544___mcc_h69 = _source242.dtor_referential;
              bool _6545___mcc_h70 = _source242.dtor_nullable;
              bool _6546_nullable = _6545___mcc_h70;
              bool _6547_referential = _6544___mcc_h69;
              {
                if (_6547_referential) {
                  if (_6546_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source242.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source242.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6548___mcc_h71 = _source242.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6549_op = _6548___mcc_h71;
              {
                r = RAST.Expr.create_BinaryOp(_6549_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_Or) {
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source243 = _6428_op;
            if (_source243.is_Eq) {
              bool _6550___mcc_h72 = _source243.dtor_referential;
              bool _6551___mcc_h73 = _source243.dtor_nullable;
              bool _6552_nullable = _6551___mcc_h73;
              bool _6553_referential = _6550___mcc_h72;
              {
                if (_6553_referential) {
                  if (_6552_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source243.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source243.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6554___mcc_h74 = _source243.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6555_op = _6554___mcc_h74;
              {
                r = RAST.Expr.create_BinaryOp(_6555_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      } else if (_source226.is_In) {
        {
          r = ((_6449_right).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("contains"))).Apply1(_6446_left);
        }
      } else if (_source226.is_SeqProperPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6446_left, _6449_right, _6431_format);
      } else if (_source226.is_SeqPrefix) {
        r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6446_left, _6449_right, _6431_format);
      } else if (_source226.is_SetMerge) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6449_right);
        }
      } else if (_source226.is_SetSubtraction) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6449_right);
        }
      } else if (_source226.is_SetIntersection) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_6449_right);
        }
      } else if (_source226.is_Subset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6446_left, _6449_right, _6431_format);
        }
      } else if (_source226.is_ProperSubset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6446_left, _6449_right, _6431_format);
        }
      } else if (_source226.is_SetDisjoint) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_6449_right);
        }
      } else if (_source226.is_MapMerge) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6449_right);
        }
      } else if (_source226.is_MapSubtraction) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6449_right);
        }
      } else if (_source226.is_MultisetMerge) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("merge"))).Apply1(_6449_right);
        }
      } else if (_source226.is_MultisetSubtraction) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("subtract"))).Apply1(_6449_right);
        }
      } else if (_source226.is_MultisetIntersection) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("intersect"))).Apply1(_6449_right);
        }
      } else if (_source226.is_Submultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<="), _6446_left, _6449_right, _6431_format);
        }
      } else if (_source226.is_ProperSubmultiset) {
        {
          r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _6446_left, _6449_right, _6431_format);
        }
      } else if (_source226.is_MultisetDisjoint) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("disjoint"))).Apply1(_6449_right);
        }
      } else if (_source226.is_Concat) {
        {
          r = ((_6446_left).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("concat"))).Apply1(_6449_right);
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _6556___mcc_h22 = _source226.dtor_Passthrough_a0;
        {
          if ((DCOMPUTF16.COMP.OpTable).Contains(_6428_op)) {
            r = RAST.Expr.create_BinaryOp(Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.Select(DCOMPUTF16.COMP.OpTable,_6428_op), _6446_left, _6449_right, _6431_format);
          } else {
            DAST._IBinOp _source244 = _6428_op;
            if (_source244.is_Eq) {
              bool _6557___mcc_h75 = _source244.dtor_referential;
              bool _6558___mcc_h76 = _source244.dtor_nullable;
              bool _6559_nullable = _6558___mcc_h76;
              bool _6560_referential = _6557___mcc_h75;
              {
                if (_6560_referential) {
                  if (_6559_nullable) {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  } else {
                    r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
                  }
                } else {
                  r = RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=="), _6446_left, _6449_right, DAST.Format.BinOpFormat.create_NoFormat());
                }
              }
            } else if (_source244.is_EuclidianDiv) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else if (_source244.is_EuclidianMod) {
              {
                r = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_6446_left, _6449_right));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6561___mcc_h77 = _source244.dtor_Passthrough_a0;
              Dafny.ISequence<Dafny.Rune> _6562_op = _6561___mcc_h77;
              {
                r = RAST.Expr.create_BinaryOp(_6562_op, _6446_left, _6449_right, _6431_format);
              }
            }
          }
        }
      }
      RAST._IExpr _out2760;
      DCOMPUTF16._IOwnership _out2761;
      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2760, out _out2761);
      r = _out2760;
      resultingOwnership = _out2761;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_6448_recIdentsL, _6451_recIdentsR);
      return ;
    }
    public static void GenExprConvert(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _let_tmp_rhs54 = e;
      DAST._IExpression _6563_expr = _let_tmp_rhs54.dtor_value;
      DAST._IType _6564_fromTpe = _let_tmp_rhs54.dtor_from;
      DAST._IType _6565_toTpe = _let_tmp_rhs54.dtor_typ;
      if (object.Equals(_6564_fromTpe, _6565_toTpe)) {
        RAST._IExpr _6566_recursiveGen;
        DCOMPUTF16._IOwnership _6567_recOwned;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6568_recIdents;
        RAST._IExpr _out2762;
        DCOMPUTF16._IOwnership _out2763;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2764;
        DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2762, out _out2763, out _out2764);
        _6566_recursiveGen = _out2762;
        _6567_recOwned = _out2763;
        _6568_recIdents = _out2764;
        r = _6566_recursiveGen;
        RAST._IExpr _out2765;
        DCOMPUTF16._IOwnership _out2766;
        DCOMPUTF16.COMP.FromOwnership(r, _6567_recOwned, expectedOwnership, out _out2765, out _out2766);
        r = _out2765;
        resultingOwnership = _out2766;
        readIdents = _6568_recIdents;
      } else {
        _System._ITuple2<DAST._IType, DAST._IType> _source245 = _System.Tuple2<DAST._IType, DAST._IType>.create(_6564_fromTpe, _6565_toTpe);
        DAST._IType _6569___mcc_h0 = _source245.dtor__0;
        DAST._IType _6570___mcc_h1 = _source245.dtor__1;
        DAST._IType _source246 = _6569___mcc_h0;
        if (_source246.is_Path) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6571___mcc_h4 = _source246.dtor_Path_a0;
          Dafny.ISequence<DAST._IType> _6572___mcc_h5 = _source246.dtor_typeArgs;
          DAST._IResolvedType _6573___mcc_h6 = _source246.dtor_resolved;
          DAST._IResolvedType _source247 = _6573___mcc_h6;
          if (_source247.is_Datatype) {
            DAST._IDatatypeType _6574___mcc_h16 = _source247.dtor_datatypeType;
            DAST._IType _source248 = _6570___mcc_h1;
            if (_source248.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6575___mcc_h20 = _source248.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _6576___mcc_h21 = _source248.dtor_typeArgs;
              DAST._IResolvedType _6577___mcc_h22 = _source248.dtor_resolved;
              DAST._IResolvedType _source249 = _6577___mcc_h22;
              if (_source249.is_Datatype) {
                DAST._IDatatypeType _6578___mcc_h26 = _source249.dtor_datatypeType;
                {
                  RAST._IExpr _6579_recursiveGen;
                  DCOMPUTF16._IOwnership _6580_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6581_recIdents;
                  RAST._IExpr _out2767;
                  DCOMPUTF16._IOwnership _out2768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2769;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2767, out _out2768, out _out2769);
                  _6579_recursiveGen = _out2767;
                  _6580_recOwned = _out2768;
                  _6581_recIdents = _out2769;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6579_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out2770;
                  DCOMPUTF16._IOwnership _out2771;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2770, out _out2771);
                  r = _out2770;
                  resultingOwnership = _out2771;
                  readIdents = _6581_recIdents;
                }
              } else if (_source249.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6582___mcc_h28 = _source249.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _6583___mcc_h29 = _source249.dtor_attributes;
                {
                  RAST._IExpr _6584_recursiveGen;
                  DCOMPUTF16._IOwnership _6585_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6586_recIdents;
                  RAST._IExpr _out2772;
                  DCOMPUTF16._IOwnership _out2773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2774;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2772, out _out2773, out _out2774);
                  _6584_recursiveGen = _out2772;
                  _6585_recOwned = _out2773;
                  _6586_recIdents = _out2774;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6584_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out2775;
                  DCOMPUTF16._IOwnership _out2776;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2775, out _out2776);
                  r = _out2775;
                  resultingOwnership = _out2776;
                  readIdents = _6586_recIdents;
                }
              } else {
                DAST._IType _6587___mcc_h32 = _source249.dtor_baseType;
                DAST._INewtypeRange _6588___mcc_h33 = _source249.dtor_range;
                bool _6589___mcc_h34 = _source249.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _6590___mcc_h35 = _source249.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _6591_attributes = _6590___mcc_h35;
                bool _6592_erase = _6589___mcc_h34;
                DAST._INewtypeRange _6593_range = _6588___mcc_h33;
                DAST._IType _6594_b = _6587___mcc_h32;
                {
                  if (object.Equals(_6564_fromTpe, _6594_b)) {
                    RAST._IExpr _6595_recursiveGen;
                    DCOMPUTF16._IOwnership _6596_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6597_recIdents;
                    RAST._IExpr _out2777;
                    DCOMPUTF16._IOwnership _out2778;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2779;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2777, out _out2778, out _out2779);
                    _6595_recursiveGen = _out2777;
                    _6596_recOwned = _out2778;
                    _6597_recIdents = _out2779;
                    Std.Wrappers._IOption<RAST._IType> _6598_potentialRhsType;
                    _6598_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6594_b, _6593_range);
                    Std.Wrappers._IOption<RAST._IType> _source250 = _6598_potentialRhsType;
                    if (_source250.is_None) {
                      if (_6592_erase) {
                        r = _6595_recursiveGen;
                      } else {
                        RAST._IType _6599_rhsType;
                        RAST._IType _out2780;
                        _out2780 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                        _6599_rhsType = _out2780;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6599_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6595_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2781;
                      DCOMPUTF16._IOwnership _out2782;
                      DCOMPUTF16.COMP.FromOwnership(r, _6596_recOwned, expectedOwnership, out _out2781, out _out2782);
                      r = _out2781;
                      resultingOwnership = _out2782;
                    } else {
                      RAST._IType _6600___mcc_h1246 = _source250.dtor_value;
                      RAST._IType _6601_v = _6600___mcc_h1246;
                      r = RAST.Expr.create_ConversionNum(_6601_v, _6595_recursiveGen);
                      RAST._IExpr _out2783;
                      DCOMPUTF16._IOwnership _out2784;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2783, out _out2784);
                      r = _out2783;
                      resultingOwnership = _out2784;
                    }
                    readIdents = _6597_recIdents;
                  } else {
                    RAST._IExpr _out2785;
                    DCOMPUTF16._IOwnership _out2786;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2787;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6594_b), _6594_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out2785, out _out2786, out _out2787);
                    r = _out2785;
                    resultingOwnership = _out2786;
                    readIdents = _out2787;
                  }
                }
              }
            } else if (_source248.is_Nullable) {
              DAST._IType _6602___mcc_h40 = _source248.dtor_Nullable_a0;
              {
                RAST._IExpr _6603_recursiveGen;
                DCOMPUTF16._IOwnership _6604_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6605_recIdents;
                RAST._IExpr _out2788;
                DCOMPUTF16._IOwnership _out2789;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2790;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2788, out _out2789, out _out2790);
                _6603_recursiveGen = _out2788;
                _6604_recOwned = _out2789;
                _6605_recIdents = _out2790;
                Dafny.ISequence<Dafny.Rune> _6606_s;
                _6606_s = (_6603_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6604_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6606_s = Dafny.Sequence<Dafny.Rune>.Concat(_6606_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _6606_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _6606_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_6606_s);
                RAST._IExpr _out2791;
                DCOMPUTF16._IOwnership _out2792;
                DCOMPUTF16.COMP.FromOwnership(r, _6604_recOwned, expectedOwnership, out _out2791, out _out2792);
                r = _out2791;
                resultingOwnership = _out2792;
                readIdents = _6605_recIdents;
              }
            } else if (_source248.is_Tuple) {
              Dafny.ISequence<DAST._IType> _6607___mcc_h42 = _source248.dtor_Tuple_a0;
              {
                RAST._IExpr _6608_recursiveGen;
                DCOMPUTF16._IOwnership _6609_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6610_recIdents;
                RAST._IExpr _out2793;
                DCOMPUTF16._IOwnership _out2794;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2795;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2793, out _out2794, out _out2795);
                _6608_recursiveGen = _out2793;
                _6609_recOwned = _out2794;
                _6610_recIdents = _out2795;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6608_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2796;
                DCOMPUTF16._IOwnership _out2797;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2796, out _out2797);
                r = _out2796;
                resultingOwnership = _out2797;
                readIdents = _6610_recIdents;
              }
            } else if (_source248.is_Array) {
              DAST._IType _6611___mcc_h44 = _source248.dtor_element;
              BigInteger _6612___mcc_h45 = _source248.dtor_dims;
              {
                RAST._IExpr _6613_recursiveGen;
                DCOMPUTF16._IOwnership _6614_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6615_recIdents;
                RAST._IExpr _out2798;
                DCOMPUTF16._IOwnership _out2799;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2800;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2798, out _out2799, out _out2800);
                _6613_recursiveGen = _out2798;
                _6614_recOwned = _out2799;
                _6615_recIdents = _out2800;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6613_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2801;
                DCOMPUTF16._IOwnership _out2802;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2801, out _out2802);
                r = _out2801;
                resultingOwnership = _out2802;
                readIdents = _6615_recIdents;
              }
            } else if (_source248.is_Seq) {
              DAST._IType _6616___mcc_h48 = _source248.dtor_element;
              {
                RAST._IExpr _6617_recursiveGen;
                DCOMPUTF16._IOwnership _6618_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6619_recIdents;
                RAST._IExpr _out2803;
                DCOMPUTF16._IOwnership _out2804;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2805;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2803, out _out2804, out _out2805);
                _6617_recursiveGen = _out2803;
                _6618_recOwned = _out2804;
                _6619_recIdents = _out2805;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6617_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2806;
                DCOMPUTF16._IOwnership _out2807;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2806, out _out2807);
                r = _out2806;
                resultingOwnership = _out2807;
                readIdents = _6619_recIdents;
              }
            } else if (_source248.is_Set) {
              DAST._IType _6620___mcc_h50 = _source248.dtor_element;
              {
                RAST._IExpr _6621_recursiveGen;
                DCOMPUTF16._IOwnership _6622_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6623_recIdents;
                RAST._IExpr _out2808;
                DCOMPUTF16._IOwnership _out2809;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2810;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2808, out _out2809, out _out2810);
                _6621_recursiveGen = _out2808;
                _6622_recOwned = _out2809;
                _6623_recIdents = _out2810;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6621_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2811;
                DCOMPUTF16._IOwnership _out2812;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2811, out _out2812);
                r = _out2811;
                resultingOwnership = _out2812;
                readIdents = _6623_recIdents;
              }
            } else if (_source248.is_Multiset) {
              DAST._IType _6624___mcc_h52 = _source248.dtor_element;
              {
                RAST._IExpr _6625_recursiveGen;
                DCOMPUTF16._IOwnership _6626_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6627_recIdents;
                RAST._IExpr _out2813;
                DCOMPUTF16._IOwnership _out2814;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2815;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2813, out _out2814, out _out2815);
                _6625_recursiveGen = _out2813;
                _6626_recOwned = _out2814;
                _6627_recIdents = _out2815;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6625_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2816;
                DCOMPUTF16._IOwnership _out2817;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2816, out _out2817);
                r = _out2816;
                resultingOwnership = _out2817;
                readIdents = _6627_recIdents;
              }
            } else if (_source248.is_Map) {
              DAST._IType _6628___mcc_h54 = _source248.dtor_key;
              DAST._IType _6629___mcc_h55 = _source248.dtor_value;
              {
                RAST._IExpr _6630_recursiveGen;
                DCOMPUTF16._IOwnership _6631_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6632_recIdents;
                RAST._IExpr _out2818;
                DCOMPUTF16._IOwnership _out2819;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2820;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2818, out _out2819, out _out2820);
                _6630_recursiveGen = _out2818;
                _6631_recOwned = _out2819;
                _6632_recIdents = _out2820;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6630_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2821;
                DCOMPUTF16._IOwnership _out2822;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2821, out _out2822);
                r = _out2821;
                resultingOwnership = _out2822;
                readIdents = _6632_recIdents;
              }
            } else if (_source248.is_SetBuilder) {
              DAST._IType _6633___mcc_h58 = _source248.dtor_element;
              {
                RAST._IExpr _6634_recursiveGen;
                DCOMPUTF16._IOwnership _6635_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6636_recIdents;
                RAST._IExpr _out2823;
                DCOMPUTF16._IOwnership _out2824;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2825;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2823, out _out2824, out _out2825);
                _6634_recursiveGen = _out2823;
                _6635_recOwned = _out2824;
                _6636_recIdents = _out2825;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6634_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2826;
                DCOMPUTF16._IOwnership _out2827;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2826, out _out2827);
                r = _out2826;
                resultingOwnership = _out2827;
                readIdents = _6636_recIdents;
              }
            } else if (_source248.is_MapBuilder) {
              DAST._IType _6637___mcc_h60 = _source248.dtor_key;
              DAST._IType _6638___mcc_h61 = _source248.dtor_value;
              {
                RAST._IExpr _6639_recursiveGen;
                DCOMPUTF16._IOwnership _6640_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6641_recIdents;
                RAST._IExpr _out2828;
                DCOMPUTF16._IOwnership _out2829;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2830;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2828, out _out2829, out _out2830);
                _6639_recursiveGen = _out2828;
                _6640_recOwned = _out2829;
                _6641_recIdents = _out2830;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6639_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2831;
                DCOMPUTF16._IOwnership _out2832;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2831, out _out2832);
                r = _out2831;
                resultingOwnership = _out2832;
                readIdents = _6641_recIdents;
              }
            } else if (_source248.is_Arrow) {
              Dafny.ISequence<DAST._IType> _6642___mcc_h64 = _source248.dtor_args;
              DAST._IType _6643___mcc_h65 = _source248.dtor_result;
              {
                RAST._IExpr _6644_recursiveGen;
                DCOMPUTF16._IOwnership _6645_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6646_recIdents;
                RAST._IExpr _out2833;
                DCOMPUTF16._IOwnership _out2834;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2835;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2833, out _out2834, out _out2835);
                _6644_recursiveGen = _out2833;
                _6645_recOwned = _out2834;
                _6646_recIdents = _out2835;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6644_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2836;
                DCOMPUTF16._IOwnership _out2837;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2836, out _out2837);
                r = _out2836;
                resultingOwnership = _out2837;
                readIdents = _6646_recIdents;
              }
            } else if (_source248.is_Primitive) {
              DAST._IPrimitive _6647___mcc_h68 = _source248.dtor_Primitive_a0;
              {
                RAST._IExpr _6648_recursiveGen;
                DCOMPUTF16._IOwnership _6649_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6650_recIdents;
                RAST._IExpr _out2838;
                DCOMPUTF16._IOwnership _out2839;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2840;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2838, out _out2839, out _out2840);
                _6648_recursiveGen = _out2838;
                _6649_recOwned = _out2839;
                _6650_recIdents = _out2840;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6648_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2841;
                DCOMPUTF16._IOwnership _out2842;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2841, out _out2842);
                r = _out2841;
                resultingOwnership = _out2842;
                readIdents = _6650_recIdents;
              }
            } else if (_source248.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _6651___mcc_h70 = _source248.dtor_Passthrough_a0;
              {
                RAST._IExpr _6652_recursiveGen;
                DCOMPUTF16._IOwnership _6653_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6654_recIdents;
                RAST._IExpr _out2843;
                DCOMPUTF16._IOwnership _out2844;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2845;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2843, out _out2844, out _out2845);
                _6652_recursiveGen = _out2843;
                _6653_recOwned = _out2844;
                _6654_recIdents = _out2845;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6652_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2846;
                DCOMPUTF16._IOwnership _out2847;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2846, out _out2847);
                r = _out2846;
                resultingOwnership = _out2847;
                readIdents = _6654_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6655___mcc_h72 = _source248.dtor_TypeArg_a0;
              {
                RAST._IExpr _6656_recursiveGen;
                DCOMPUTF16._IOwnership _6657_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6658_recIdents;
                RAST._IExpr _out2848;
                DCOMPUTF16._IOwnership _out2849;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2850;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2848, out _out2849, out _out2850);
                _6656_recursiveGen = _out2848;
                _6657_recOwned = _out2849;
                _6658_recIdents = _out2850;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6656_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2851;
                DCOMPUTF16._IOwnership _out2852;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2851, out _out2852);
                r = _out2851;
                resultingOwnership = _out2852;
                readIdents = _6658_recIdents;
              }
            }
          } else if (_source247.is_Trait) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6659___mcc_h74 = _source247.dtor_path;
            Dafny.ISequence<DAST._IAttribute> _6660___mcc_h75 = _source247.dtor_attributes;
            DAST._IType _source251 = _6570___mcc_h1;
            if (_source251.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6661___mcc_h82 = _source251.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _6662___mcc_h83 = _source251.dtor_typeArgs;
              DAST._IResolvedType _6663___mcc_h84 = _source251.dtor_resolved;
              DAST._IResolvedType _source252 = _6663___mcc_h84;
              if (_source252.is_Datatype) {
                DAST._IDatatypeType _6664___mcc_h88 = _source252.dtor_datatypeType;
                {
                  RAST._IExpr _6665_recursiveGen;
                  DCOMPUTF16._IOwnership _6666_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6667_recIdents;
                  RAST._IExpr _out2853;
                  DCOMPUTF16._IOwnership _out2854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2855;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2853, out _out2854, out _out2855);
                  _6665_recursiveGen = _out2853;
                  _6666_recOwned = _out2854;
                  _6667_recIdents = _out2855;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6665_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out2856;
                  DCOMPUTF16._IOwnership _out2857;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2856, out _out2857);
                  r = _out2856;
                  resultingOwnership = _out2857;
                  readIdents = _6667_recIdents;
                }
              } else if (_source252.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6668___mcc_h90 = _source252.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _6669___mcc_h91 = _source252.dtor_attributes;
                {
                  RAST._IExpr _6670_recursiveGen;
                  DCOMPUTF16._IOwnership _6671_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6672_recIdents;
                  RAST._IExpr _out2858;
                  DCOMPUTF16._IOwnership _out2859;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2860;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2858, out _out2859, out _out2860);
                  _6670_recursiveGen = _out2858;
                  _6671_recOwned = _out2859;
                  _6672_recIdents = _out2860;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6670_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out2861;
                  DCOMPUTF16._IOwnership _out2862;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2861, out _out2862);
                  r = _out2861;
                  resultingOwnership = _out2862;
                  readIdents = _6672_recIdents;
                }
              } else {
                DAST._IType _6673___mcc_h94 = _source252.dtor_baseType;
                DAST._INewtypeRange _6674___mcc_h95 = _source252.dtor_range;
                bool _6675___mcc_h96 = _source252.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _6676___mcc_h97 = _source252.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _6677_attributes = _6676___mcc_h97;
                bool _6678_erase = _6675___mcc_h96;
                DAST._INewtypeRange _6679_range = _6674___mcc_h95;
                DAST._IType _6680_b = _6673___mcc_h94;
                {
                  if (object.Equals(_6564_fromTpe, _6680_b)) {
                    RAST._IExpr _6681_recursiveGen;
                    DCOMPUTF16._IOwnership _6682_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6683_recIdents;
                    RAST._IExpr _out2863;
                    DCOMPUTF16._IOwnership _out2864;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2865;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2863, out _out2864, out _out2865);
                    _6681_recursiveGen = _out2863;
                    _6682_recOwned = _out2864;
                    _6683_recIdents = _out2865;
                    Std.Wrappers._IOption<RAST._IType> _6684_potentialRhsType;
                    _6684_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6680_b, _6679_range);
                    Std.Wrappers._IOption<RAST._IType> _source253 = _6684_potentialRhsType;
                    if (_source253.is_None) {
                      if (_6678_erase) {
                        r = _6681_recursiveGen;
                      } else {
                        RAST._IType _6685_rhsType;
                        RAST._IType _out2866;
                        _out2866 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                        _6685_rhsType = _out2866;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6685_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6681_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2867;
                      DCOMPUTF16._IOwnership _out2868;
                      DCOMPUTF16.COMP.FromOwnership(r, _6682_recOwned, expectedOwnership, out _out2867, out _out2868);
                      r = _out2867;
                      resultingOwnership = _out2868;
                    } else {
                      RAST._IType _6686___mcc_h1247 = _source253.dtor_value;
                      RAST._IType _6687_v = _6686___mcc_h1247;
                      r = RAST.Expr.create_ConversionNum(_6687_v, _6681_recursiveGen);
                      RAST._IExpr _out2869;
                      DCOMPUTF16._IOwnership _out2870;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2869, out _out2870);
                      r = _out2869;
                      resultingOwnership = _out2870;
                    }
                    readIdents = _6683_recIdents;
                  } else {
                    RAST._IExpr _out2871;
                    DCOMPUTF16._IOwnership _out2872;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2873;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6680_b), _6680_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out2871, out _out2872, out _out2873);
                    r = _out2871;
                    resultingOwnership = _out2872;
                    readIdents = _out2873;
                  }
                }
              }
            } else if (_source251.is_Nullable) {
              DAST._IType _6688___mcc_h102 = _source251.dtor_Nullable_a0;
              {
                RAST._IExpr _6689_recursiveGen;
                DCOMPUTF16._IOwnership _6690_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6691_recIdents;
                RAST._IExpr _out2874;
                DCOMPUTF16._IOwnership _out2875;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2876;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2874, out _out2875, out _out2876);
                _6689_recursiveGen = _out2874;
                _6690_recOwned = _out2875;
                _6691_recIdents = _out2876;
                Dafny.ISequence<Dafny.Rune> _6692_s;
                _6692_s = (_6689_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6690_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6692_s = Dafny.Sequence<Dafny.Rune>.Concat(_6692_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _6692_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _6692_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_6692_s);
                RAST._IExpr _out2877;
                DCOMPUTF16._IOwnership _out2878;
                DCOMPUTF16.COMP.FromOwnership(r, _6690_recOwned, expectedOwnership, out _out2877, out _out2878);
                r = _out2877;
                resultingOwnership = _out2878;
                readIdents = _6691_recIdents;
              }
            } else if (_source251.is_Tuple) {
              Dafny.ISequence<DAST._IType> _6693___mcc_h104 = _source251.dtor_Tuple_a0;
              {
                RAST._IExpr _6694_recursiveGen;
                DCOMPUTF16._IOwnership _6695_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6696_recIdents;
                RAST._IExpr _out2879;
                DCOMPUTF16._IOwnership _out2880;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2881;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2879, out _out2880, out _out2881);
                _6694_recursiveGen = _out2879;
                _6695_recOwned = _out2880;
                _6696_recIdents = _out2881;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6694_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2882;
                DCOMPUTF16._IOwnership _out2883;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2882, out _out2883);
                r = _out2882;
                resultingOwnership = _out2883;
                readIdents = _6696_recIdents;
              }
            } else if (_source251.is_Array) {
              DAST._IType _6697___mcc_h106 = _source251.dtor_element;
              BigInteger _6698___mcc_h107 = _source251.dtor_dims;
              {
                RAST._IExpr _6699_recursiveGen;
                DCOMPUTF16._IOwnership _6700_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6701_recIdents;
                RAST._IExpr _out2884;
                DCOMPUTF16._IOwnership _out2885;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2886;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2884, out _out2885, out _out2886);
                _6699_recursiveGen = _out2884;
                _6700_recOwned = _out2885;
                _6701_recIdents = _out2886;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6699_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2887;
                DCOMPUTF16._IOwnership _out2888;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2887, out _out2888);
                r = _out2887;
                resultingOwnership = _out2888;
                readIdents = _6701_recIdents;
              }
            } else if (_source251.is_Seq) {
              DAST._IType _6702___mcc_h110 = _source251.dtor_element;
              {
                RAST._IExpr _6703_recursiveGen;
                DCOMPUTF16._IOwnership _6704_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6705_recIdents;
                RAST._IExpr _out2889;
                DCOMPUTF16._IOwnership _out2890;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2891;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2889, out _out2890, out _out2891);
                _6703_recursiveGen = _out2889;
                _6704_recOwned = _out2890;
                _6705_recIdents = _out2891;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6703_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2892;
                DCOMPUTF16._IOwnership _out2893;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2892, out _out2893);
                r = _out2892;
                resultingOwnership = _out2893;
                readIdents = _6705_recIdents;
              }
            } else if (_source251.is_Set) {
              DAST._IType _6706___mcc_h112 = _source251.dtor_element;
              {
                RAST._IExpr _6707_recursiveGen;
                DCOMPUTF16._IOwnership _6708_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6709_recIdents;
                RAST._IExpr _out2894;
                DCOMPUTF16._IOwnership _out2895;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2896;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2894, out _out2895, out _out2896);
                _6707_recursiveGen = _out2894;
                _6708_recOwned = _out2895;
                _6709_recIdents = _out2896;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6707_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2897;
                DCOMPUTF16._IOwnership _out2898;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2897, out _out2898);
                r = _out2897;
                resultingOwnership = _out2898;
                readIdents = _6709_recIdents;
              }
            } else if (_source251.is_Multiset) {
              DAST._IType _6710___mcc_h114 = _source251.dtor_element;
              {
                RAST._IExpr _6711_recursiveGen;
                DCOMPUTF16._IOwnership _6712_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6713_recIdents;
                RAST._IExpr _out2899;
                DCOMPUTF16._IOwnership _out2900;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2901;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2899, out _out2900, out _out2901);
                _6711_recursiveGen = _out2899;
                _6712_recOwned = _out2900;
                _6713_recIdents = _out2901;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6711_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2902;
                DCOMPUTF16._IOwnership _out2903;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2902, out _out2903);
                r = _out2902;
                resultingOwnership = _out2903;
                readIdents = _6713_recIdents;
              }
            } else if (_source251.is_Map) {
              DAST._IType _6714___mcc_h116 = _source251.dtor_key;
              DAST._IType _6715___mcc_h117 = _source251.dtor_value;
              {
                RAST._IExpr _6716_recursiveGen;
                DCOMPUTF16._IOwnership _6717_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6718_recIdents;
                RAST._IExpr _out2904;
                DCOMPUTF16._IOwnership _out2905;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2906;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2904, out _out2905, out _out2906);
                _6716_recursiveGen = _out2904;
                _6717_recOwned = _out2905;
                _6718_recIdents = _out2906;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6716_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2907;
                DCOMPUTF16._IOwnership _out2908;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2907, out _out2908);
                r = _out2907;
                resultingOwnership = _out2908;
                readIdents = _6718_recIdents;
              }
            } else if (_source251.is_SetBuilder) {
              DAST._IType _6719___mcc_h120 = _source251.dtor_element;
              {
                RAST._IExpr _6720_recursiveGen;
                DCOMPUTF16._IOwnership _6721_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6722_recIdents;
                RAST._IExpr _out2909;
                DCOMPUTF16._IOwnership _out2910;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2911;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2909, out _out2910, out _out2911);
                _6720_recursiveGen = _out2909;
                _6721_recOwned = _out2910;
                _6722_recIdents = _out2911;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6720_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2912;
                DCOMPUTF16._IOwnership _out2913;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2912, out _out2913);
                r = _out2912;
                resultingOwnership = _out2913;
                readIdents = _6722_recIdents;
              }
            } else if (_source251.is_MapBuilder) {
              DAST._IType _6723___mcc_h122 = _source251.dtor_key;
              DAST._IType _6724___mcc_h123 = _source251.dtor_value;
              {
                RAST._IExpr _6725_recursiveGen;
                DCOMPUTF16._IOwnership _6726_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6727_recIdents;
                RAST._IExpr _out2914;
                DCOMPUTF16._IOwnership _out2915;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2916;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2914, out _out2915, out _out2916);
                _6725_recursiveGen = _out2914;
                _6726_recOwned = _out2915;
                _6727_recIdents = _out2916;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6725_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2917;
                DCOMPUTF16._IOwnership _out2918;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2917, out _out2918);
                r = _out2917;
                resultingOwnership = _out2918;
                readIdents = _6727_recIdents;
              }
            } else if (_source251.is_Arrow) {
              Dafny.ISequence<DAST._IType> _6728___mcc_h126 = _source251.dtor_args;
              DAST._IType _6729___mcc_h127 = _source251.dtor_result;
              {
                RAST._IExpr _6730_recursiveGen;
                DCOMPUTF16._IOwnership _6731_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6732_recIdents;
                RAST._IExpr _out2919;
                DCOMPUTF16._IOwnership _out2920;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2921;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2919, out _out2920, out _out2921);
                _6730_recursiveGen = _out2919;
                _6731_recOwned = _out2920;
                _6732_recIdents = _out2921;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6730_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2922;
                DCOMPUTF16._IOwnership _out2923;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2922, out _out2923);
                r = _out2922;
                resultingOwnership = _out2923;
                readIdents = _6732_recIdents;
              }
            } else if (_source251.is_Primitive) {
              DAST._IPrimitive _6733___mcc_h130 = _source251.dtor_Primitive_a0;
              {
                RAST._IExpr _6734_recursiveGen;
                DCOMPUTF16._IOwnership _6735_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6736_recIdents;
                RAST._IExpr _out2924;
                DCOMPUTF16._IOwnership _out2925;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2926;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2924, out _out2925, out _out2926);
                _6734_recursiveGen = _out2924;
                _6735_recOwned = _out2925;
                _6736_recIdents = _out2926;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6734_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2927;
                DCOMPUTF16._IOwnership _out2928;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2927, out _out2928);
                r = _out2927;
                resultingOwnership = _out2928;
                readIdents = _6736_recIdents;
              }
            } else if (_source251.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _6737___mcc_h132 = _source251.dtor_Passthrough_a0;
              {
                RAST._IExpr _6738_recursiveGen;
                DCOMPUTF16._IOwnership _6739_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6740_recIdents;
                RAST._IExpr _out2929;
                DCOMPUTF16._IOwnership _out2930;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2931;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2929, out _out2930, out _out2931);
                _6738_recursiveGen = _out2929;
                _6739_recOwned = _out2930;
                _6740_recIdents = _out2931;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6738_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2932;
                DCOMPUTF16._IOwnership _out2933;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2932, out _out2933);
                r = _out2932;
                resultingOwnership = _out2933;
                readIdents = _6740_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6741___mcc_h134 = _source251.dtor_TypeArg_a0;
              {
                RAST._IExpr _6742_recursiveGen;
                DCOMPUTF16._IOwnership _6743_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6744_recIdents;
                RAST._IExpr _out2934;
                DCOMPUTF16._IOwnership _out2935;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2936;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2934, out _out2935, out _out2936);
                _6742_recursiveGen = _out2934;
                _6743_recOwned = _out2935;
                _6744_recIdents = _out2936;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6742_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out2937;
                DCOMPUTF16._IOwnership _out2938;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2937, out _out2938);
                r = _out2937;
                resultingOwnership = _out2938;
                readIdents = _6744_recIdents;
              }
            }
          } else {
            DAST._IType _6745___mcc_h136 = _source247.dtor_baseType;
            DAST._INewtypeRange _6746___mcc_h137 = _source247.dtor_range;
            bool _6747___mcc_h138 = _source247.dtor_erase;
            Dafny.ISequence<DAST._IAttribute> _6748___mcc_h139 = _source247.dtor_attributes;
            DAST._IType _source254 = _6570___mcc_h1;
            if (_source254.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6749___mcc_h152 = _source254.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _6750___mcc_h153 = _source254.dtor_typeArgs;
              DAST._IResolvedType _6751___mcc_h154 = _source254.dtor_resolved;
              DAST._IResolvedType _source255 = _6751___mcc_h154;
              if (_source255.is_Datatype) {
                DAST._IDatatypeType _6752___mcc_h161 = _source255.dtor_datatypeType;
                Dafny.ISequence<DAST._IAttribute> _6753_attributes = _6748___mcc_h139;
                bool _6754_erase = _6747___mcc_h138;
                DAST._INewtypeRange _6755_range = _6746___mcc_h137;
                DAST._IType _6756_b = _6745___mcc_h136;
                {
                  if (object.Equals(_6756_b, _6565_toTpe)) {
                    RAST._IExpr _6757_recursiveGen;
                    DCOMPUTF16._IOwnership _6758_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6759_recIdents;
                    RAST._IExpr _out2939;
                    DCOMPUTF16._IOwnership _out2940;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2941;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2939, out _out2940, out _out2941);
                    _6757_recursiveGen = _out2939;
                    _6758_recOwned = _out2940;
                    _6759_recIdents = _out2941;
                    if (_6754_erase) {
                      r = _6757_recursiveGen;
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6757_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                    }
                    RAST._IExpr _out2942;
                    DCOMPUTF16._IOwnership _out2943;
                    DCOMPUTF16.COMP.FromOwnership(r, _6758_recOwned, expectedOwnership, out _out2942, out _out2943);
                    r = _out2942;
                    resultingOwnership = _out2943;
                    readIdents = _6759_recIdents;
                  } else {
                    RAST._IExpr _out2944;
                    DCOMPUTF16._IOwnership _out2945;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2946;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6756_b), _6756_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out2944, out _out2945, out _out2946);
                    r = _out2944;
                    resultingOwnership = _out2945;
                    readIdents = _out2946;
                  }
                }
              } else if (_source255.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6760___mcc_h164 = _source255.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _6761___mcc_h165 = _source255.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _6762_attributes = _6748___mcc_h139;
                bool _6763_erase = _6747___mcc_h138;
                DAST._INewtypeRange _6764_range = _6746___mcc_h137;
                DAST._IType _6765_b = _6745___mcc_h136;
                {
                  if (object.Equals(_6765_b, _6565_toTpe)) {
                    RAST._IExpr _6766_recursiveGen;
                    DCOMPUTF16._IOwnership _6767_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6768_recIdents;
                    RAST._IExpr _out2947;
                    DCOMPUTF16._IOwnership _out2948;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2949;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2947, out _out2948, out _out2949);
                    _6766_recursiveGen = _out2947;
                    _6767_recOwned = _out2948;
                    _6768_recIdents = _out2949;
                    if (_6763_erase) {
                      r = _6766_recursiveGen;
                    } else {
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6766_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                    }
                    RAST._IExpr _out2950;
                    DCOMPUTF16._IOwnership _out2951;
                    DCOMPUTF16.COMP.FromOwnership(r, _6767_recOwned, expectedOwnership, out _out2950, out _out2951);
                    r = _out2950;
                    resultingOwnership = _out2951;
                    readIdents = _6768_recIdents;
                  } else {
                    RAST._IExpr _out2952;
                    DCOMPUTF16._IOwnership _out2953;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2954;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6765_b), _6765_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out2952, out _out2953, out _out2954);
                    r = _out2952;
                    resultingOwnership = _out2953;
                    readIdents = _out2954;
                  }
                }
              } else {
                DAST._IType _6769___mcc_h170 = _source255.dtor_baseType;
                DAST._INewtypeRange _6770___mcc_h171 = _source255.dtor_range;
                bool _6771___mcc_h172 = _source255.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _6772___mcc_h173 = _source255.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _6773_attributes = _6772___mcc_h173;
                bool _6774_erase = _6771___mcc_h172;
                DAST._INewtypeRange _6775_range = _6770___mcc_h171;
                DAST._IType _6776_b = _6769___mcc_h170;
                {
                  if (object.Equals(_6564_fromTpe, _6776_b)) {
                    RAST._IExpr _6777_recursiveGen;
                    DCOMPUTF16._IOwnership _6778_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6779_recIdents;
                    RAST._IExpr _out2955;
                    DCOMPUTF16._IOwnership _out2956;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2957;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2955, out _out2956, out _out2957);
                    _6777_recursiveGen = _out2955;
                    _6778_recOwned = _out2956;
                    _6779_recIdents = _out2957;
                    Std.Wrappers._IOption<RAST._IType> _6780_potentialRhsType;
                    _6780_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_6776_b, _6775_range);
                    Std.Wrappers._IOption<RAST._IType> _source256 = _6780_potentialRhsType;
                    if (_source256.is_None) {
                      if (_6774_erase) {
                        r = _6777_recursiveGen;
                      } else {
                        RAST._IType _6781_rhsType;
                        RAST._IType _out2958;
                        _out2958 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                        _6781_rhsType = _out2958;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_6781_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_6777_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out2959;
                      DCOMPUTF16._IOwnership _out2960;
                      DCOMPUTF16.COMP.FromOwnership(r, _6778_recOwned, expectedOwnership, out _out2959, out _out2960);
                      r = _out2959;
                      resultingOwnership = _out2960;
                    } else {
                      RAST._IType _6782___mcc_h1248 = _source256.dtor_value;
                      RAST._IType _6783_v = _6782___mcc_h1248;
                      r = RAST.Expr.create_ConversionNum(_6783_v, _6777_recursiveGen);
                      RAST._IExpr _out2961;
                      DCOMPUTF16._IOwnership _out2962;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out2961, out _out2962);
                      r = _out2961;
                      resultingOwnership = _out2962;
                    }
                    readIdents = _6779_recIdents;
                  } else {
                    RAST._IExpr _out2963;
                    DCOMPUTF16._IOwnership _out2964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2965;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6776_b), _6776_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out2963, out _out2964, out _out2965);
                    r = _out2963;
                    resultingOwnership = _out2964;
                    readIdents = _out2965;
                  }
                }
              }
            } else if (_source254.is_Nullable) {
              DAST._IType _6784___mcc_h182 = _source254.dtor_Nullable_a0;
              {
                RAST._IExpr _6785_recursiveGen;
                DCOMPUTF16._IOwnership _6786_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6787_recIdents;
                RAST._IExpr _out2966;
                DCOMPUTF16._IOwnership _out2967;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2968;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2966, out _out2967, out _out2968);
                _6785_recursiveGen = _out2966;
                _6786_recOwned = _out2967;
                _6787_recIdents = _out2968;
                Dafny.ISequence<Dafny.Rune> _6788_s;
                _6788_s = (_6785_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6786_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6788_s = Dafny.Sequence<Dafny.Rune>.Concat(_6788_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _6788_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _6788_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_6788_s);
                RAST._IExpr _out2969;
                DCOMPUTF16._IOwnership _out2970;
                DCOMPUTF16.COMP.FromOwnership(r, _6786_recOwned, expectedOwnership, out _out2969, out _out2970);
                r = _out2969;
                resultingOwnership = _out2970;
                readIdents = _6787_recIdents;
              }
            } else if (_source254.is_Tuple) {
              Dafny.ISequence<DAST._IType> _6789___mcc_h185 = _source254.dtor_Tuple_a0;
              Dafny.ISequence<DAST._IAttribute> _6790_attributes = _6748___mcc_h139;
              bool _6791_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6792_range = _6746___mcc_h137;
              DAST._IType _6793_b = _6745___mcc_h136;
              {
                if (object.Equals(_6793_b, _6565_toTpe)) {
                  RAST._IExpr _6794_recursiveGen;
                  DCOMPUTF16._IOwnership _6795_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6796_recIdents;
                  RAST._IExpr _out2971;
                  DCOMPUTF16._IOwnership _out2972;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2973;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2971, out _out2972, out _out2973);
                  _6794_recursiveGen = _out2971;
                  _6795_recOwned = _out2972;
                  _6796_recIdents = _out2973;
                  if (_6791_erase) {
                    r = _6794_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6794_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out2974;
                  DCOMPUTF16._IOwnership _out2975;
                  DCOMPUTF16.COMP.FromOwnership(r, _6795_recOwned, expectedOwnership, out _out2974, out _out2975);
                  r = _out2974;
                  resultingOwnership = _out2975;
                  readIdents = _6796_recIdents;
                } else {
                  RAST._IExpr _out2976;
                  DCOMPUTF16._IOwnership _out2977;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2978;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6793_b), _6793_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out2976, out _out2977, out _out2978);
                  r = _out2976;
                  resultingOwnership = _out2977;
                  readIdents = _out2978;
                }
              }
            } else if (_source254.is_Array) {
              DAST._IType _6797___mcc_h188 = _source254.dtor_element;
              BigInteger _6798___mcc_h189 = _source254.dtor_dims;
              Dafny.ISequence<DAST._IAttribute> _6799_attributes = _6748___mcc_h139;
              bool _6800_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6801_range = _6746___mcc_h137;
              DAST._IType _6802_b = _6745___mcc_h136;
              {
                if (object.Equals(_6802_b, _6565_toTpe)) {
                  RAST._IExpr _6803_recursiveGen;
                  DCOMPUTF16._IOwnership _6804_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6805_recIdents;
                  RAST._IExpr _out2979;
                  DCOMPUTF16._IOwnership _out2980;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2981;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2979, out _out2980, out _out2981);
                  _6803_recursiveGen = _out2979;
                  _6804_recOwned = _out2980;
                  _6805_recIdents = _out2981;
                  if (_6800_erase) {
                    r = _6803_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6803_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out2982;
                  DCOMPUTF16._IOwnership _out2983;
                  DCOMPUTF16.COMP.FromOwnership(r, _6804_recOwned, expectedOwnership, out _out2982, out _out2983);
                  r = _out2982;
                  resultingOwnership = _out2983;
                  readIdents = _6805_recIdents;
                } else {
                  RAST._IExpr _out2984;
                  DCOMPUTF16._IOwnership _out2985;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2986;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6802_b), _6802_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out2984, out _out2985, out _out2986);
                  r = _out2984;
                  resultingOwnership = _out2985;
                  readIdents = _out2986;
                }
              }
            } else if (_source254.is_Seq) {
              DAST._IType _6806___mcc_h194 = _source254.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _6807_attributes = _6748___mcc_h139;
              bool _6808_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6809_range = _6746___mcc_h137;
              DAST._IType _6810_b = _6745___mcc_h136;
              {
                if (object.Equals(_6810_b, _6565_toTpe)) {
                  RAST._IExpr _6811_recursiveGen;
                  DCOMPUTF16._IOwnership _6812_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6813_recIdents;
                  RAST._IExpr _out2987;
                  DCOMPUTF16._IOwnership _out2988;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2989;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2987, out _out2988, out _out2989);
                  _6811_recursiveGen = _out2987;
                  _6812_recOwned = _out2988;
                  _6813_recIdents = _out2989;
                  if (_6808_erase) {
                    r = _6811_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6811_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out2990;
                  DCOMPUTF16._IOwnership _out2991;
                  DCOMPUTF16.COMP.FromOwnership(r, _6812_recOwned, expectedOwnership, out _out2990, out _out2991);
                  r = _out2990;
                  resultingOwnership = _out2991;
                  readIdents = _6813_recIdents;
                } else {
                  RAST._IExpr _out2992;
                  DCOMPUTF16._IOwnership _out2993;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2994;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6810_b), _6810_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out2992, out _out2993, out _out2994);
                  r = _out2992;
                  resultingOwnership = _out2993;
                  readIdents = _out2994;
                }
              }
            } else if (_source254.is_Set) {
              DAST._IType _6814___mcc_h197 = _source254.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _6815_attributes = _6748___mcc_h139;
              bool _6816_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6817_range = _6746___mcc_h137;
              DAST._IType _6818_b = _6745___mcc_h136;
              {
                if (object.Equals(_6818_b, _6565_toTpe)) {
                  RAST._IExpr _6819_recursiveGen;
                  DCOMPUTF16._IOwnership _6820_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6821_recIdents;
                  RAST._IExpr _out2995;
                  DCOMPUTF16._IOwnership _out2996;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out2997;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out2995, out _out2996, out _out2997);
                  _6819_recursiveGen = _out2995;
                  _6820_recOwned = _out2996;
                  _6821_recIdents = _out2997;
                  if (_6816_erase) {
                    r = _6819_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6819_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out2998;
                  DCOMPUTF16._IOwnership _out2999;
                  DCOMPUTF16.COMP.FromOwnership(r, _6820_recOwned, expectedOwnership, out _out2998, out _out2999);
                  r = _out2998;
                  resultingOwnership = _out2999;
                  readIdents = _6821_recIdents;
                } else {
                  RAST._IExpr _out3000;
                  DCOMPUTF16._IOwnership _out3001;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3002;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6818_b), _6818_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3000, out _out3001, out _out3002);
                  r = _out3000;
                  resultingOwnership = _out3001;
                  readIdents = _out3002;
                }
              }
            } else if (_source254.is_Multiset) {
              DAST._IType _6822___mcc_h200 = _source254.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _6823_attributes = _6748___mcc_h139;
              bool _6824_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6825_range = _6746___mcc_h137;
              DAST._IType _6826_b = _6745___mcc_h136;
              {
                if (object.Equals(_6826_b, _6565_toTpe)) {
                  RAST._IExpr _6827_recursiveGen;
                  DCOMPUTF16._IOwnership _6828_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6829_recIdents;
                  RAST._IExpr _out3003;
                  DCOMPUTF16._IOwnership _out3004;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3005;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3003, out _out3004, out _out3005);
                  _6827_recursiveGen = _out3003;
                  _6828_recOwned = _out3004;
                  _6829_recIdents = _out3005;
                  if (_6824_erase) {
                    r = _6827_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6827_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3006;
                  DCOMPUTF16._IOwnership _out3007;
                  DCOMPUTF16.COMP.FromOwnership(r, _6828_recOwned, expectedOwnership, out _out3006, out _out3007);
                  r = _out3006;
                  resultingOwnership = _out3007;
                  readIdents = _6829_recIdents;
                } else {
                  RAST._IExpr _out3008;
                  DCOMPUTF16._IOwnership _out3009;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3010;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6826_b), _6826_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3008, out _out3009, out _out3010);
                  r = _out3008;
                  resultingOwnership = _out3009;
                  readIdents = _out3010;
                }
              }
            } else if (_source254.is_Map) {
              DAST._IType _6830___mcc_h203 = _source254.dtor_key;
              DAST._IType _6831___mcc_h204 = _source254.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _6832_attributes = _6748___mcc_h139;
              bool _6833_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6834_range = _6746___mcc_h137;
              DAST._IType _6835_b = _6745___mcc_h136;
              {
                if (object.Equals(_6835_b, _6565_toTpe)) {
                  RAST._IExpr _6836_recursiveGen;
                  DCOMPUTF16._IOwnership _6837_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6838_recIdents;
                  RAST._IExpr _out3011;
                  DCOMPUTF16._IOwnership _out3012;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3013;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3011, out _out3012, out _out3013);
                  _6836_recursiveGen = _out3011;
                  _6837_recOwned = _out3012;
                  _6838_recIdents = _out3013;
                  if (_6833_erase) {
                    r = _6836_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6836_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3014;
                  DCOMPUTF16._IOwnership _out3015;
                  DCOMPUTF16.COMP.FromOwnership(r, _6837_recOwned, expectedOwnership, out _out3014, out _out3015);
                  r = _out3014;
                  resultingOwnership = _out3015;
                  readIdents = _6838_recIdents;
                } else {
                  RAST._IExpr _out3016;
                  DCOMPUTF16._IOwnership _out3017;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3018;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6835_b), _6835_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3016, out _out3017, out _out3018);
                  r = _out3016;
                  resultingOwnership = _out3017;
                  readIdents = _out3018;
                }
              }
            } else if (_source254.is_SetBuilder) {
              DAST._IType _6839___mcc_h209 = _source254.dtor_element;
              Dafny.ISequence<DAST._IAttribute> _6840_attributes = _6748___mcc_h139;
              bool _6841_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6842_range = _6746___mcc_h137;
              DAST._IType _6843_b = _6745___mcc_h136;
              {
                if (object.Equals(_6843_b, _6565_toTpe)) {
                  RAST._IExpr _6844_recursiveGen;
                  DCOMPUTF16._IOwnership _6845_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6846_recIdents;
                  RAST._IExpr _out3019;
                  DCOMPUTF16._IOwnership _out3020;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3021;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3019, out _out3020, out _out3021);
                  _6844_recursiveGen = _out3019;
                  _6845_recOwned = _out3020;
                  _6846_recIdents = _out3021;
                  if (_6841_erase) {
                    r = _6844_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6844_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3022;
                  DCOMPUTF16._IOwnership _out3023;
                  DCOMPUTF16.COMP.FromOwnership(r, _6845_recOwned, expectedOwnership, out _out3022, out _out3023);
                  r = _out3022;
                  resultingOwnership = _out3023;
                  readIdents = _6846_recIdents;
                } else {
                  RAST._IExpr _out3024;
                  DCOMPUTF16._IOwnership _out3025;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3026;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6843_b), _6843_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3024, out _out3025, out _out3026);
                  r = _out3024;
                  resultingOwnership = _out3025;
                  readIdents = _out3026;
                }
              }
            } else if (_source254.is_MapBuilder) {
              DAST._IType _6847___mcc_h212 = _source254.dtor_key;
              DAST._IType _6848___mcc_h213 = _source254.dtor_value;
              Dafny.ISequence<DAST._IAttribute> _6849_attributes = _6748___mcc_h139;
              bool _6850_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6851_range = _6746___mcc_h137;
              DAST._IType _6852_b = _6745___mcc_h136;
              {
                if (object.Equals(_6852_b, _6565_toTpe)) {
                  RAST._IExpr _6853_recursiveGen;
                  DCOMPUTF16._IOwnership _6854_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6855_recIdents;
                  RAST._IExpr _out3027;
                  DCOMPUTF16._IOwnership _out3028;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3029;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3027, out _out3028, out _out3029);
                  _6853_recursiveGen = _out3027;
                  _6854_recOwned = _out3028;
                  _6855_recIdents = _out3029;
                  if (_6850_erase) {
                    r = _6853_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6853_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3030;
                  DCOMPUTF16._IOwnership _out3031;
                  DCOMPUTF16.COMP.FromOwnership(r, _6854_recOwned, expectedOwnership, out _out3030, out _out3031);
                  r = _out3030;
                  resultingOwnership = _out3031;
                  readIdents = _6855_recIdents;
                } else {
                  RAST._IExpr _out3032;
                  DCOMPUTF16._IOwnership _out3033;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3034;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6852_b), _6852_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3032, out _out3033, out _out3034);
                  r = _out3032;
                  resultingOwnership = _out3033;
                  readIdents = _out3034;
                }
              }
            } else if (_source254.is_Arrow) {
              Dafny.ISequence<DAST._IType> _6856___mcc_h218 = _source254.dtor_args;
              DAST._IType _6857___mcc_h219 = _source254.dtor_result;
              Dafny.ISequence<DAST._IAttribute> _6858_attributes = _6748___mcc_h139;
              bool _6859_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6860_range = _6746___mcc_h137;
              DAST._IType _6861_b = _6745___mcc_h136;
              {
                if (object.Equals(_6861_b, _6565_toTpe)) {
                  RAST._IExpr _6862_recursiveGen;
                  DCOMPUTF16._IOwnership _6863_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6864_recIdents;
                  RAST._IExpr _out3035;
                  DCOMPUTF16._IOwnership _out3036;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3037;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3035, out _out3036, out _out3037);
                  _6862_recursiveGen = _out3035;
                  _6863_recOwned = _out3036;
                  _6864_recIdents = _out3037;
                  if (_6859_erase) {
                    r = _6862_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6862_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3038;
                  DCOMPUTF16._IOwnership _out3039;
                  DCOMPUTF16.COMP.FromOwnership(r, _6863_recOwned, expectedOwnership, out _out3038, out _out3039);
                  r = _out3038;
                  resultingOwnership = _out3039;
                  readIdents = _6864_recIdents;
                } else {
                  RAST._IExpr _out3040;
                  DCOMPUTF16._IOwnership _out3041;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3042;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6861_b), _6861_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3040, out _out3041, out _out3042);
                  r = _out3040;
                  resultingOwnership = _out3041;
                  readIdents = _out3042;
                }
              }
            } else if (_source254.is_Primitive) {
              DAST._IPrimitive _6865___mcc_h224 = _source254.dtor_Primitive_a0;
              Dafny.ISequence<DAST._IAttribute> _6866_attributes = _6748___mcc_h139;
              bool _6867_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6868_range = _6746___mcc_h137;
              DAST._IType _6869_b = _6745___mcc_h136;
              {
                if (object.Equals(_6869_b, _6565_toTpe)) {
                  RAST._IExpr _6870_recursiveGen;
                  DCOMPUTF16._IOwnership _6871_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6872_recIdents;
                  RAST._IExpr _out3043;
                  DCOMPUTF16._IOwnership _out3044;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3045;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3043, out _out3044, out _out3045);
                  _6870_recursiveGen = _out3043;
                  _6871_recOwned = _out3044;
                  _6872_recIdents = _out3045;
                  if (_6867_erase) {
                    r = _6870_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6870_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3046;
                  DCOMPUTF16._IOwnership _out3047;
                  DCOMPUTF16.COMP.FromOwnership(r, _6871_recOwned, expectedOwnership, out _out3046, out _out3047);
                  r = _out3046;
                  resultingOwnership = _out3047;
                  readIdents = _6872_recIdents;
                } else {
                  RAST._IExpr _out3048;
                  DCOMPUTF16._IOwnership _out3049;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3050;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6869_b), _6869_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3048, out _out3049, out _out3050);
                  r = _out3048;
                  resultingOwnership = _out3049;
                  readIdents = _out3050;
                }
              }
            } else if (_source254.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _6873___mcc_h227 = _source254.dtor_Passthrough_a0;
              Dafny.ISequence<DAST._IAttribute> _6874_attributes = _6748___mcc_h139;
              bool _6875_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6876_range = _6746___mcc_h137;
              DAST._IType _6877_b = _6745___mcc_h136;
              {
                if (object.Equals(_6877_b, _6565_toTpe)) {
                  RAST._IExpr _6878_recursiveGen;
                  DCOMPUTF16._IOwnership _6879_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6880_recIdents;
                  RAST._IExpr _out3051;
                  DCOMPUTF16._IOwnership _out3052;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3053;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3051, out _out3052, out _out3053);
                  _6878_recursiveGen = _out3051;
                  _6879_recOwned = _out3052;
                  _6880_recIdents = _out3053;
                  if (_6875_erase) {
                    r = _6878_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6878_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3054;
                  DCOMPUTF16._IOwnership _out3055;
                  DCOMPUTF16.COMP.FromOwnership(r, _6879_recOwned, expectedOwnership, out _out3054, out _out3055);
                  r = _out3054;
                  resultingOwnership = _out3055;
                  readIdents = _6880_recIdents;
                } else {
                  RAST._IExpr _out3056;
                  DCOMPUTF16._IOwnership _out3057;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3058;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6877_b), _6877_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3056, out _out3057, out _out3058);
                  r = _out3056;
                  resultingOwnership = _out3057;
                  readIdents = _out3058;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _6881___mcc_h230 = _source254.dtor_TypeArg_a0;
              Dafny.ISequence<DAST._IAttribute> _6882_attributes = _6748___mcc_h139;
              bool _6883_erase = _6747___mcc_h138;
              DAST._INewtypeRange _6884_range = _6746___mcc_h137;
              DAST._IType _6885_b = _6745___mcc_h136;
              {
                if (object.Equals(_6885_b, _6565_toTpe)) {
                  RAST._IExpr _6886_recursiveGen;
                  DCOMPUTF16._IOwnership _6887_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6888_recIdents;
                  RAST._IExpr _out3059;
                  DCOMPUTF16._IOwnership _out3060;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3061;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3059, out _out3060, out _out3061);
                  _6886_recursiveGen = _out3059;
                  _6887_recOwned = _out3060;
                  _6888_recIdents = _out3061;
                  if (_6883_erase) {
                    r = _6886_recursiveGen;
                  } else {
                    r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat((_6886_recursiveGen)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")));
                  }
                  RAST._IExpr _out3062;
                  DCOMPUTF16._IOwnership _out3063;
                  DCOMPUTF16.COMP.FromOwnership(r, _6887_recOwned, expectedOwnership, out _out3062, out _out3063);
                  r = _out3062;
                  resultingOwnership = _out3063;
                  readIdents = _6888_recIdents;
                } else {
                  RAST._IExpr _out3064;
                  DCOMPUTF16._IOwnership _out3065;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3066;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _6885_b), _6885_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3064, out _out3065, out _out3066);
                  r = _out3064;
                  resultingOwnership = _out3065;
                  readIdents = _out3066;
                }
              }
            }
          }
        } else if (_source246.is_Nullable) {
          DAST._IType _6889___mcc_h233 = _source246.dtor_Nullable_a0;
          DAST._IType _source257 = _6570___mcc_h1;
          if (_source257.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6890___mcc_h237 = _source257.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6891___mcc_h238 = _source257.dtor_typeArgs;
            DAST._IResolvedType _6892___mcc_h239 = _source257.dtor_resolved;
            DAST._IResolvedType _source258 = _6892___mcc_h239;
            if (_source258.is_Datatype) {
              DAST._IDatatypeType _6893___mcc_h246 = _source258.dtor_datatypeType;
              {
                RAST._IExpr _6894_recursiveGen;
                DCOMPUTF16._IOwnership _6895_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6896_recIdents;
                RAST._IExpr _out3067;
                DCOMPUTF16._IOwnership _out3068;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3069;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3067, out _out3068, out _out3069);
                _6894_recursiveGen = _out3067;
                _6895_recOwned = _out3068;
                _6896_recIdents = _out3069;
                Dafny.ISequence<Dafny.Rune> _6897_s;
                _6897_s = (_6894_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6895_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6897_s = Dafny.Sequence<Dafny.Rune>.Concat(_6897_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _6897_s = Dafny.Sequence<Dafny.Rune>.Concat(_6897_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_6897_s);
                RAST._IExpr _out3070;
                DCOMPUTF16._IOwnership _out3071;
                DCOMPUTF16.COMP.FromOwnership(r, _6895_recOwned, expectedOwnership, out _out3070, out _out3071);
                r = _out3070;
                resultingOwnership = _out3071;
                readIdents = _6896_recIdents;
              }
            } else if (_source258.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6898___mcc_h249 = _source258.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _6899___mcc_h250 = _source258.dtor_attributes;
              {
                RAST._IExpr _6900_recursiveGen;
                DCOMPUTF16._IOwnership _6901_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6902_recIdents;
                RAST._IExpr _out3072;
                DCOMPUTF16._IOwnership _out3073;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3074;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3072, out _out3073, out _out3074);
                _6900_recursiveGen = _out3072;
                _6901_recOwned = _out3073;
                _6902_recIdents = _out3074;
                Dafny.ISequence<Dafny.Rune> _6903_s;
                _6903_s = (_6900_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6901_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6903_s = Dafny.Sequence<Dafny.Rune>.Concat(_6903_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _6903_s = Dafny.Sequence<Dafny.Rune>.Concat(_6903_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_6903_s);
                RAST._IExpr _out3075;
                DCOMPUTF16._IOwnership _out3076;
                DCOMPUTF16.COMP.FromOwnership(r, _6901_recOwned, expectedOwnership, out _out3075, out _out3076);
                r = _out3075;
                resultingOwnership = _out3076;
                readIdents = _6902_recIdents;
              }
            } else {
              DAST._IType _6904___mcc_h255 = _source258.dtor_baseType;
              DAST._INewtypeRange _6905___mcc_h256 = _source258.dtor_range;
              bool _6906___mcc_h257 = _source258.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _6907___mcc_h258 = _source258.dtor_attributes;
              {
                RAST._IExpr _6908_recursiveGen;
                DCOMPUTF16._IOwnership _6909_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6910_recIdents;
                RAST._IExpr _out3077;
                DCOMPUTF16._IOwnership _out3078;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3079;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3077, out _out3078, out _out3079);
                _6908_recursiveGen = _out3077;
                _6909_recOwned = _out3078;
                _6910_recIdents = _out3079;
                Dafny.ISequence<Dafny.Rune> _6911_s;
                _6911_s = (_6908_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_6909_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _6911_s = Dafny.Sequence<Dafny.Rune>.Concat(_6911_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                }
                _6911_s = Dafny.Sequence<Dafny.Rune>.Concat(_6911_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                r = RAST.Expr.create_RawExpr(_6911_s);
                RAST._IExpr _out3080;
                DCOMPUTF16._IOwnership _out3081;
                DCOMPUTF16.COMP.FromOwnership(r, _6909_recOwned, expectedOwnership, out _out3080, out _out3081);
                r = _out3080;
                resultingOwnership = _out3081;
                readIdents = _6910_recIdents;
              }
            }
          } else if (_source257.is_Nullable) {
            DAST._IType _6912___mcc_h267 = _source257.dtor_Nullable_a0;
            {
              RAST._IExpr _6913_recursiveGen;
              DCOMPUTF16._IOwnership _6914_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6915_recIdents;
              RAST._IExpr _out3082;
              DCOMPUTF16._IOwnership _out3083;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3084;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3082, out _out3083, out _out3084);
              _6913_recursiveGen = _out3082;
              _6914_recOwned = _out3083;
              _6915_recIdents = _out3084;
              Dafny.ISequence<Dafny.Rune> _6916_s;
              _6916_s = (_6913_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6914_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6916_s = Dafny.Sequence<Dafny.Rune>.Concat(_6916_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6916_s = Dafny.Sequence<Dafny.Rune>.Concat(_6916_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6916_s);
              RAST._IExpr _out3085;
              DCOMPUTF16._IOwnership _out3086;
              DCOMPUTF16.COMP.FromOwnership(r, _6914_recOwned, expectedOwnership, out _out3085, out _out3086);
              r = _out3085;
              resultingOwnership = _out3086;
              readIdents = _6915_recIdents;
            }
          } else if (_source257.is_Tuple) {
            Dafny.ISequence<DAST._IType> _6917___mcc_h270 = _source257.dtor_Tuple_a0;
            {
              RAST._IExpr _6918_recursiveGen;
              DCOMPUTF16._IOwnership _6919_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6920_recIdents;
              RAST._IExpr _out3087;
              DCOMPUTF16._IOwnership _out3088;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3089;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3087, out _out3088, out _out3089);
              _6918_recursiveGen = _out3087;
              _6919_recOwned = _out3088;
              _6920_recIdents = _out3089;
              Dafny.ISequence<Dafny.Rune> _6921_s;
              _6921_s = (_6918_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6919_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6921_s = Dafny.Sequence<Dafny.Rune>.Concat(_6921_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6921_s = Dafny.Sequence<Dafny.Rune>.Concat(_6921_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6921_s);
              RAST._IExpr _out3090;
              DCOMPUTF16._IOwnership _out3091;
              DCOMPUTF16.COMP.FromOwnership(r, _6919_recOwned, expectedOwnership, out _out3090, out _out3091);
              r = _out3090;
              resultingOwnership = _out3091;
              readIdents = _6920_recIdents;
            }
          } else if (_source257.is_Array) {
            DAST._IType _6922___mcc_h273 = _source257.dtor_element;
            BigInteger _6923___mcc_h274 = _source257.dtor_dims;
            {
              RAST._IExpr _6924_recursiveGen;
              DCOMPUTF16._IOwnership _6925_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6926_recIdents;
              RAST._IExpr _out3092;
              DCOMPUTF16._IOwnership _out3093;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3094;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3092, out _out3093, out _out3094);
              _6924_recursiveGen = _out3092;
              _6925_recOwned = _out3093;
              _6926_recIdents = _out3094;
              Dafny.ISequence<Dafny.Rune> _6927_s;
              _6927_s = (_6924_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6925_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6927_s = Dafny.Sequence<Dafny.Rune>.Concat(_6927_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6927_s = Dafny.Sequence<Dafny.Rune>.Concat(_6927_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6927_s);
              RAST._IExpr _out3095;
              DCOMPUTF16._IOwnership _out3096;
              DCOMPUTF16.COMP.FromOwnership(r, _6925_recOwned, expectedOwnership, out _out3095, out _out3096);
              r = _out3095;
              resultingOwnership = _out3096;
              readIdents = _6926_recIdents;
            }
          } else if (_source257.is_Seq) {
            DAST._IType _6928___mcc_h279 = _source257.dtor_element;
            {
              RAST._IExpr _6929_recursiveGen;
              DCOMPUTF16._IOwnership _6930_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6931_recIdents;
              RAST._IExpr _out3097;
              DCOMPUTF16._IOwnership _out3098;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3099;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3097, out _out3098, out _out3099);
              _6929_recursiveGen = _out3097;
              _6930_recOwned = _out3098;
              _6931_recIdents = _out3099;
              Dafny.ISequence<Dafny.Rune> _6932_s;
              _6932_s = (_6929_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6930_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6932_s = Dafny.Sequence<Dafny.Rune>.Concat(_6932_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6932_s = Dafny.Sequence<Dafny.Rune>.Concat(_6932_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6932_s);
              RAST._IExpr _out3100;
              DCOMPUTF16._IOwnership _out3101;
              DCOMPUTF16.COMP.FromOwnership(r, _6930_recOwned, expectedOwnership, out _out3100, out _out3101);
              r = _out3100;
              resultingOwnership = _out3101;
              readIdents = _6931_recIdents;
            }
          } else if (_source257.is_Set) {
            DAST._IType _6933___mcc_h282 = _source257.dtor_element;
            {
              RAST._IExpr _6934_recursiveGen;
              DCOMPUTF16._IOwnership _6935_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6936_recIdents;
              RAST._IExpr _out3102;
              DCOMPUTF16._IOwnership _out3103;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3104;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3102, out _out3103, out _out3104);
              _6934_recursiveGen = _out3102;
              _6935_recOwned = _out3103;
              _6936_recIdents = _out3104;
              Dafny.ISequence<Dafny.Rune> _6937_s;
              _6937_s = (_6934_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6935_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6937_s = Dafny.Sequence<Dafny.Rune>.Concat(_6937_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6937_s = Dafny.Sequence<Dafny.Rune>.Concat(_6937_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6937_s);
              RAST._IExpr _out3105;
              DCOMPUTF16._IOwnership _out3106;
              DCOMPUTF16.COMP.FromOwnership(r, _6935_recOwned, expectedOwnership, out _out3105, out _out3106);
              r = _out3105;
              resultingOwnership = _out3106;
              readIdents = _6936_recIdents;
            }
          } else if (_source257.is_Multiset) {
            DAST._IType _6938___mcc_h285 = _source257.dtor_element;
            {
              RAST._IExpr _6939_recursiveGen;
              DCOMPUTF16._IOwnership _6940_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6941_recIdents;
              RAST._IExpr _out3107;
              DCOMPUTF16._IOwnership _out3108;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3109;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3107, out _out3108, out _out3109);
              _6939_recursiveGen = _out3107;
              _6940_recOwned = _out3108;
              _6941_recIdents = _out3109;
              Dafny.ISequence<Dafny.Rune> _6942_s;
              _6942_s = (_6939_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6940_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6942_s = Dafny.Sequence<Dafny.Rune>.Concat(_6942_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6942_s = Dafny.Sequence<Dafny.Rune>.Concat(_6942_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6942_s);
              RAST._IExpr _out3110;
              DCOMPUTF16._IOwnership _out3111;
              DCOMPUTF16.COMP.FromOwnership(r, _6940_recOwned, expectedOwnership, out _out3110, out _out3111);
              r = _out3110;
              resultingOwnership = _out3111;
              readIdents = _6941_recIdents;
            }
          } else if (_source257.is_Map) {
            DAST._IType _6943___mcc_h288 = _source257.dtor_key;
            DAST._IType _6944___mcc_h289 = _source257.dtor_value;
            {
              RAST._IExpr _6945_recursiveGen;
              DCOMPUTF16._IOwnership _6946_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6947_recIdents;
              RAST._IExpr _out3112;
              DCOMPUTF16._IOwnership _out3113;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3114;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3112, out _out3113, out _out3114);
              _6945_recursiveGen = _out3112;
              _6946_recOwned = _out3113;
              _6947_recIdents = _out3114;
              Dafny.ISequence<Dafny.Rune> _6948_s;
              _6948_s = (_6945_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6946_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6948_s = Dafny.Sequence<Dafny.Rune>.Concat(_6948_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6948_s = Dafny.Sequence<Dafny.Rune>.Concat(_6948_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6948_s);
              RAST._IExpr _out3115;
              DCOMPUTF16._IOwnership _out3116;
              DCOMPUTF16.COMP.FromOwnership(r, _6946_recOwned, expectedOwnership, out _out3115, out _out3116);
              r = _out3115;
              resultingOwnership = _out3116;
              readIdents = _6947_recIdents;
            }
          } else if (_source257.is_SetBuilder) {
            DAST._IType _6949___mcc_h294 = _source257.dtor_element;
            {
              RAST._IExpr _6950_recursiveGen;
              DCOMPUTF16._IOwnership _6951_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6952_recIdents;
              RAST._IExpr _out3117;
              DCOMPUTF16._IOwnership _out3118;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3119;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3117, out _out3118, out _out3119);
              _6950_recursiveGen = _out3117;
              _6951_recOwned = _out3118;
              _6952_recIdents = _out3119;
              Dafny.ISequence<Dafny.Rune> _6953_s;
              _6953_s = (_6950_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6951_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6953_s = Dafny.Sequence<Dafny.Rune>.Concat(_6953_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6953_s = Dafny.Sequence<Dafny.Rune>.Concat(_6953_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6953_s);
              RAST._IExpr _out3120;
              DCOMPUTF16._IOwnership _out3121;
              DCOMPUTF16.COMP.FromOwnership(r, _6951_recOwned, expectedOwnership, out _out3120, out _out3121);
              r = _out3120;
              resultingOwnership = _out3121;
              readIdents = _6952_recIdents;
            }
          } else if (_source257.is_MapBuilder) {
            DAST._IType _6954___mcc_h297 = _source257.dtor_key;
            DAST._IType _6955___mcc_h298 = _source257.dtor_value;
            {
              RAST._IExpr _6956_recursiveGen;
              DCOMPUTF16._IOwnership _6957_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6958_recIdents;
              RAST._IExpr _out3122;
              DCOMPUTF16._IOwnership _out3123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3124;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3122, out _out3123, out _out3124);
              _6956_recursiveGen = _out3122;
              _6957_recOwned = _out3123;
              _6958_recIdents = _out3124;
              Dafny.ISequence<Dafny.Rune> _6959_s;
              _6959_s = (_6956_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6957_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6959_s = Dafny.Sequence<Dafny.Rune>.Concat(_6959_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6959_s = Dafny.Sequence<Dafny.Rune>.Concat(_6959_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6959_s);
              RAST._IExpr _out3125;
              DCOMPUTF16._IOwnership _out3126;
              DCOMPUTF16.COMP.FromOwnership(r, _6957_recOwned, expectedOwnership, out _out3125, out _out3126);
              r = _out3125;
              resultingOwnership = _out3126;
              readIdents = _6958_recIdents;
            }
          } else if (_source257.is_Arrow) {
            Dafny.ISequence<DAST._IType> _6960___mcc_h303 = _source257.dtor_args;
            DAST._IType _6961___mcc_h304 = _source257.dtor_result;
            {
              RAST._IExpr _6962_recursiveGen;
              DCOMPUTF16._IOwnership _6963_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6964_recIdents;
              RAST._IExpr _out3127;
              DCOMPUTF16._IOwnership _out3128;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3129;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3127, out _out3128, out _out3129);
              _6962_recursiveGen = _out3127;
              _6963_recOwned = _out3128;
              _6964_recIdents = _out3129;
              Dafny.ISequence<Dafny.Rune> _6965_s;
              _6965_s = (_6962_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6963_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6965_s = Dafny.Sequence<Dafny.Rune>.Concat(_6965_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6965_s = Dafny.Sequence<Dafny.Rune>.Concat(_6965_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6965_s);
              RAST._IExpr _out3130;
              DCOMPUTF16._IOwnership _out3131;
              DCOMPUTF16.COMP.FromOwnership(r, _6963_recOwned, expectedOwnership, out _out3130, out _out3131);
              r = _out3130;
              resultingOwnership = _out3131;
              readIdents = _6964_recIdents;
            }
          } else if (_source257.is_Primitive) {
            DAST._IPrimitive _6966___mcc_h309 = _source257.dtor_Primitive_a0;
            {
              RAST._IExpr _6967_recursiveGen;
              DCOMPUTF16._IOwnership _6968_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6969_recIdents;
              RAST._IExpr _out3132;
              DCOMPUTF16._IOwnership _out3133;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3134;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3132, out _out3133, out _out3134);
              _6967_recursiveGen = _out3132;
              _6968_recOwned = _out3133;
              _6969_recIdents = _out3134;
              Dafny.ISequence<Dafny.Rune> _6970_s;
              _6970_s = (_6967_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6968_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6970_s = Dafny.Sequence<Dafny.Rune>.Concat(_6970_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6970_s = Dafny.Sequence<Dafny.Rune>.Concat(_6970_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6970_s);
              RAST._IExpr _out3135;
              DCOMPUTF16._IOwnership _out3136;
              DCOMPUTF16.COMP.FromOwnership(r, _6968_recOwned, expectedOwnership, out _out3135, out _out3136);
              r = _out3135;
              resultingOwnership = _out3136;
              readIdents = _6969_recIdents;
            }
          } else if (_source257.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _6971___mcc_h312 = _source257.dtor_Passthrough_a0;
            {
              RAST._IExpr _6972_recursiveGen;
              DCOMPUTF16._IOwnership _6973_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6974_recIdents;
              RAST._IExpr _out3137;
              DCOMPUTF16._IOwnership _out3138;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3139;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3137, out _out3138, out _out3139);
              _6972_recursiveGen = _out3137;
              _6973_recOwned = _out3138;
              _6974_recIdents = _out3139;
              Dafny.ISequence<Dafny.Rune> _6975_s;
              _6975_s = (_6972_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6973_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6975_s = Dafny.Sequence<Dafny.Rune>.Concat(_6975_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6975_s = Dafny.Sequence<Dafny.Rune>.Concat(_6975_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6975_s);
              RAST._IExpr _out3140;
              DCOMPUTF16._IOwnership _out3141;
              DCOMPUTF16.COMP.FromOwnership(r, _6973_recOwned, expectedOwnership, out _out3140, out _out3141);
              r = _out3140;
              resultingOwnership = _out3141;
              readIdents = _6974_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _6976___mcc_h315 = _source257.dtor_TypeArg_a0;
            {
              RAST._IExpr _6977_recursiveGen;
              DCOMPUTF16._IOwnership _6978_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6979_recIdents;
              RAST._IExpr _out3142;
              DCOMPUTF16._IOwnership _out3143;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3144;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3142, out _out3143, out _out3144);
              _6977_recursiveGen = _out3142;
              _6978_recOwned = _out3143;
              _6979_recIdents = _out3144;
              Dafny.ISequence<Dafny.Rune> _6980_s;
              _6980_s = (_6977_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_6978_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _6980_s = Dafny.Sequence<Dafny.Rune>.Concat(_6980_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
              }
              _6980_s = Dafny.Sequence<Dafny.Rune>.Concat(_6980_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
              r = RAST.Expr.create_RawExpr(_6980_s);
              RAST._IExpr _out3145;
              DCOMPUTF16._IOwnership _out3146;
              DCOMPUTF16.COMP.FromOwnership(r, _6978_recOwned, expectedOwnership, out _out3145, out _out3146);
              r = _out3145;
              resultingOwnership = _out3146;
              readIdents = _6979_recIdents;
            }
          }
        } else if (_source246.is_Tuple) {
          Dafny.ISequence<DAST._IType> _6981___mcc_h318 = _source246.dtor_Tuple_a0;
          DAST._IType _source259 = _6570___mcc_h1;
          if (_source259.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6982___mcc_h322 = _source259.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _6983___mcc_h323 = _source259.dtor_typeArgs;
            DAST._IResolvedType _6984___mcc_h324 = _source259.dtor_resolved;
            DAST._IResolvedType _source260 = _6984___mcc_h324;
            if (_source260.is_Datatype) {
              DAST._IDatatypeType _6985___mcc_h328 = _source260.dtor_datatypeType;
              {
                RAST._IExpr _6986_recursiveGen;
                DCOMPUTF16._IOwnership _6987_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6988_recIdents;
                RAST._IExpr _out3147;
                DCOMPUTF16._IOwnership _out3148;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3149;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3147, out _out3148, out _out3149);
                _6986_recursiveGen = _out3147;
                _6987_recOwned = _out3148;
                _6988_recIdents = _out3149;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6986_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3150;
                DCOMPUTF16._IOwnership _out3151;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3150, out _out3151);
                r = _out3150;
                resultingOwnership = _out3151;
                readIdents = _6988_recIdents;
              }
            } else if (_source260.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _6989___mcc_h330 = _source260.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _6990___mcc_h331 = _source260.dtor_attributes;
              {
                RAST._IExpr _6991_recursiveGen;
                DCOMPUTF16._IOwnership _6992_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _6993_recIdents;
                RAST._IExpr _out3152;
                DCOMPUTF16._IOwnership _out3153;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3154;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3152, out _out3153, out _out3154);
                _6991_recursiveGen = _out3152;
                _6992_recOwned = _out3153;
                _6993_recIdents = _out3154;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_6991_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3155;
                DCOMPUTF16._IOwnership _out3156;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3155, out _out3156);
                r = _out3155;
                resultingOwnership = _out3156;
                readIdents = _6993_recIdents;
              }
            } else {
              DAST._IType _6994___mcc_h334 = _source260.dtor_baseType;
              DAST._INewtypeRange _6995___mcc_h335 = _source260.dtor_range;
              bool _6996___mcc_h336 = _source260.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _6997___mcc_h337 = _source260.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _6998_attributes = _6997___mcc_h337;
              bool _6999_erase = _6996___mcc_h336;
              DAST._INewtypeRange _7000_range = _6995___mcc_h335;
              DAST._IType _7001_b = _6994___mcc_h334;
              {
                if (object.Equals(_6564_fromTpe, _7001_b)) {
                  RAST._IExpr _7002_recursiveGen;
                  DCOMPUTF16._IOwnership _7003_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7004_recIdents;
                  RAST._IExpr _out3157;
                  DCOMPUTF16._IOwnership _out3158;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3159;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3157, out _out3158, out _out3159);
                  _7002_recursiveGen = _out3157;
                  _7003_recOwned = _out3158;
                  _7004_recIdents = _out3159;
                  Std.Wrappers._IOption<RAST._IType> _7005_potentialRhsType;
                  _7005_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7001_b, _7000_range);
                  Std.Wrappers._IOption<RAST._IType> _source261 = _7005_potentialRhsType;
                  if (_source261.is_None) {
                    if (_6999_erase) {
                      r = _7002_recursiveGen;
                    } else {
                      RAST._IType _7006_rhsType;
                      RAST._IType _out3160;
                      _out3160 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7006_rhsType = _out3160;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7006_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7002_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3161;
                    DCOMPUTF16._IOwnership _out3162;
                    DCOMPUTF16.COMP.FromOwnership(r, _7003_recOwned, expectedOwnership, out _out3161, out _out3162);
                    r = _out3161;
                    resultingOwnership = _out3162;
                  } else {
                    RAST._IType _7007___mcc_h1249 = _source261.dtor_value;
                    RAST._IType _7008_v = _7007___mcc_h1249;
                    r = RAST.Expr.create_ConversionNum(_7008_v, _7002_recursiveGen);
                    RAST._IExpr _out3163;
                    DCOMPUTF16._IOwnership _out3164;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3163, out _out3164);
                    r = _out3163;
                    resultingOwnership = _out3164;
                  }
                  readIdents = _7004_recIdents;
                } else {
                  RAST._IExpr _out3165;
                  DCOMPUTF16._IOwnership _out3166;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3167;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7001_b), _7001_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3165, out _out3166, out _out3167);
                  r = _out3165;
                  resultingOwnership = _out3166;
                  readIdents = _out3167;
                }
              }
            }
          } else if (_source259.is_Nullable) {
            DAST._IType _7009___mcc_h342 = _source259.dtor_Nullable_a0;
            {
              RAST._IExpr _7010_recursiveGen;
              DCOMPUTF16._IOwnership _7011_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7012_recIdents;
              RAST._IExpr _out3168;
              DCOMPUTF16._IOwnership _out3169;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3170;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3168, out _out3169, out _out3170);
              _7010_recursiveGen = _out3168;
              _7011_recOwned = _out3169;
              _7012_recIdents = _out3170;
              Dafny.ISequence<Dafny.Rune> _7013_s;
              _7013_s = (_7010_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7011_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7013_s = Dafny.Sequence<Dafny.Rune>.Concat(_7013_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7013_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7013_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7013_s);
              RAST._IExpr _out3171;
              DCOMPUTF16._IOwnership _out3172;
              DCOMPUTF16.COMP.FromOwnership(r, _7011_recOwned, expectedOwnership, out _out3171, out _out3172);
              r = _out3171;
              resultingOwnership = _out3172;
              readIdents = _7012_recIdents;
            }
          } else if (_source259.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7014___mcc_h344 = _source259.dtor_Tuple_a0;
            {
              RAST._IExpr _7015_recursiveGen;
              DCOMPUTF16._IOwnership _7016_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7017_recIdents;
              RAST._IExpr _out3173;
              DCOMPUTF16._IOwnership _out3174;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3175;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3173, out _out3174, out _out3175);
              _7015_recursiveGen = _out3173;
              _7016_recOwned = _out3174;
              _7017_recIdents = _out3175;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7015_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3176;
              DCOMPUTF16._IOwnership _out3177;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3176, out _out3177);
              r = _out3176;
              resultingOwnership = _out3177;
              readIdents = _7017_recIdents;
            }
          } else if (_source259.is_Array) {
            DAST._IType _7018___mcc_h346 = _source259.dtor_element;
            BigInteger _7019___mcc_h347 = _source259.dtor_dims;
            {
              RAST._IExpr _7020_recursiveGen;
              DCOMPUTF16._IOwnership _7021_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7022_recIdents;
              RAST._IExpr _out3178;
              DCOMPUTF16._IOwnership _out3179;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3180;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3178, out _out3179, out _out3180);
              _7020_recursiveGen = _out3178;
              _7021_recOwned = _out3179;
              _7022_recIdents = _out3180;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7020_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3181;
              DCOMPUTF16._IOwnership _out3182;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3181, out _out3182);
              r = _out3181;
              resultingOwnership = _out3182;
              readIdents = _7022_recIdents;
            }
          } else if (_source259.is_Seq) {
            DAST._IType _7023___mcc_h350 = _source259.dtor_element;
            {
              RAST._IExpr _7024_recursiveGen;
              DCOMPUTF16._IOwnership _7025_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7026_recIdents;
              RAST._IExpr _out3183;
              DCOMPUTF16._IOwnership _out3184;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3185;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3183, out _out3184, out _out3185);
              _7024_recursiveGen = _out3183;
              _7025_recOwned = _out3184;
              _7026_recIdents = _out3185;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7024_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3186;
              DCOMPUTF16._IOwnership _out3187;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3186, out _out3187);
              r = _out3186;
              resultingOwnership = _out3187;
              readIdents = _7026_recIdents;
            }
          } else if (_source259.is_Set) {
            DAST._IType _7027___mcc_h352 = _source259.dtor_element;
            {
              RAST._IExpr _7028_recursiveGen;
              DCOMPUTF16._IOwnership _7029_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7030_recIdents;
              RAST._IExpr _out3188;
              DCOMPUTF16._IOwnership _out3189;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3190;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3188, out _out3189, out _out3190);
              _7028_recursiveGen = _out3188;
              _7029_recOwned = _out3189;
              _7030_recIdents = _out3190;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7028_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3191;
              DCOMPUTF16._IOwnership _out3192;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3191, out _out3192);
              r = _out3191;
              resultingOwnership = _out3192;
              readIdents = _7030_recIdents;
            }
          } else if (_source259.is_Multiset) {
            DAST._IType _7031___mcc_h354 = _source259.dtor_element;
            {
              RAST._IExpr _7032_recursiveGen;
              DCOMPUTF16._IOwnership _7033_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7034_recIdents;
              RAST._IExpr _out3193;
              DCOMPUTF16._IOwnership _out3194;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3195;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3193, out _out3194, out _out3195);
              _7032_recursiveGen = _out3193;
              _7033_recOwned = _out3194;
              _7034_recIdents = _out3195;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7032_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3196;
              DCOMPUTF16._IOwnership _out3197;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3196, out _out3197);
              r = _out3196;
              resultingOwnership = _out3197;
              readIdents = _7034_recIdents;
            }
          } else if (_source259.is_Map) {
            DAST._IType _7035___mcc_h356 = _source259.dtor_key;
            DAST._IType _7036___mcc_h357 = _source259.dtor_value;
            {
              RAST._IExpr _7037_recursiveGen;
              DCOMPUTF16._IOwnership _7038_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7039_recIdents;
              RAST._IExpr _out3198;
              DCOMPUTF16._IOwnership _out3199;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3200;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3198, out _out3199, out _out3200);
              _7037_recursiveGen = _out3198;
              _7038_recOwned = _out3199;
              _7039_recIdents = _out3200;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7037_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3201;
              DCOMPUTF16._IOwnership _out3202;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3201, out _out3202);
              r = _out3201;
              resultingOwnership = _out3202;
              readIdents = _7039_recIdents;
            }
          } else if (_source259.is_SetBuilder) {
            DAST._IType _7040___mcc_h360 = _source259.dtor_element;
            {
              RAST._IExpr _7041_recursiveGen;
              DCOMPUTF16._IOwnership _7042_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7043_recIdents;
              RAST._IExpr _out3203;
              DCOMPUTF16._IOwnership _out3204;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3205;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3203, out _out3204, out _out3205);
              _7041_recursiveGen = _out3203;
              _7042_recOwned = _out3204;
              _7043_recIdents = _out3205;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7041_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3206;
              DCOMPUTF16._IOwnership _out3207;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3206, out _out3207);
              r = _out3206;
              resultingOwnership = _out3207;
              readIdents = _7043_recIdents;
            }
          } else if (_source259.is_MapBuilder) {
            DAST._IType _7044___mcc_h362 = _source259.dtor_key;
            DAST._IType _7045___mcc_h363 = _source259.dtor_value;
            {
              RAST._IExpr _7046_recursiveGen;
              DCOMPUTF16._IOwnership _7047_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7048_recIdents;
              RAST._IExpr _out3208;
              DCOMPUTF16._IOwnership _out3209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3210;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3208, out _out3209, out _out3210);
              _7046_recursiveGen = _out3208;
              _7047_recOwned = _out3209;
              _7048_recIdents = _out3210;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7046_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3211;
              DCOMPUTF16._IOwnership _out3212;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3211, out _out3212);
              r = _out3211;
              resultingOwnership = _out3212;
              readIdents = _7048_recIdents;
            }
          } else if (_source259.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7049___mcc_h366 = _source259.dtor_args;
            DAST._IType _7050___mcc_h367 = _source259.dtor_result;
            {
              RAST._IExpr _7051_recursiveGen;
              DCOMPUTF16._IOwnership _7052_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7053_recIdents;
              RAST._IExpr _out3213;
              DCOMPUTF16._IOwnership _out3214;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3215;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3213, out _out3214, out _out3215);
              _7051_recursiveGen = _out3213;
              _7052_recOwned = _out3214;
              _7053_recIdents = _out3215;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7051_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3216;
              DCOMPUTF16._IOwnership _out3217;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3216, out _out3217);
              r = _out3216;
              resultingOwnership = _out3217;
              readIdents = _7053_recIdents;
            }
          } else if (_source259.is_Primitive) {
            DAST._IPrimitive _7054___mcc_h370 = _source259.dtor_Primitive_a0;
            {
              RAST._IExpr _7055_recursiveGen;
              DCOMPUTF16._IOwnership _7056_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7057_recIdents;
              RAST._IExpr _out3218;
              DCOMPUTF16._IOwnership _out3219;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3220;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3218, out _out3219, out _out3220);
              _7055_recursiveGen = _out3218;
              _7056_recOwned = _out3219;
              _7057_recIdents = _out3220;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7055_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3221;
              DCOMPUTF16._IOwnership _out3222;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3221, out _out3222);
              r = _out3221;
              resultingOwnership = _out3222;
              readIdents = _7057_recIdents;
            }
          } else if (_source259.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7058___mcc_h372 = _source259.dtor_Passthrough_a0;
            {
              RAST._IExpr _7059_recursiveGen;
              DCOMPUTF16._IOwnership _7060_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7061_recIdents;
              RAST._IExpr _out3223;
              DCOMPUTF16._IOwnership _out3224;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3225;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3223, out _out3224, out _out3225);
              _7059_recursiveGen = _out3223;
              _7060_recOwned = _out3224;
              _7061_recIdents = _out3225;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7059_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3226;
              DCOMPUTF16._IOwnership _out3227;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3226, out _out3227);
              r = _out3226;
              resultingOwnership = _out3227;
              readIdents = _7061_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7062___mcc_h374 = _source259.dtor_TypeArg_a0;
            {
              RAST._IExpr _7063_recursiveGen;
              DCOMPUTF16._IOwnership _7064_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7065_recIdents;
              RAST._IExpr _out3228;
              DCOMPUTF16._IOwnership _out3229;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3230;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3228, out _out3229, out _out3230);
              _7063_recursiveGen = _out3228;
              _7064_recOwned = _out3229;
              _7065_recIdents = _out3230;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7063_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3231;
              DCOMPUTF16._IOwnership _out3232;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3231, out _out3232);
              r = _out3231;
              resultingOwnership = _out3232;
              readIdents = _7065_recIdents;
            }
          }
        } else if (_source246.is_Array) {
          DAST._IType _7066___mcc_h376 = _source246.dtor_element;
          BigInteger _7067___mcc_h377 = _source246.dtor_dims;
          DAST._IType _source262 = _6570___mcc_h1;
          if (_source262.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7068___mcc_h384 = _source262.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7069___mcc_h385 = _source262.dtor_typeArgs;
            DAST._IResolvedType _7070___mcc_h386 = _source262.dtor_resolved;
            DAST._IResolvedType _source263 = _7070___mcc_h386;
            if (_source263.is_Datatype) {
              DAST._IDatatypeType _7071___mcc_h390 = _source263.dtor_datatypeType;
              {
                RAST._IExpr _7072_recursiveGen;
                DCOMPUTF16._IOwnership _7073_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7074_recIdents;
                RAST._IExpr _out3233;
                DCOMPUTF16._IOwnership _out3234;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3235;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3233, out _out3234, out _out3235);
                _7072_recursiveGen = _out3233;
                _7073_recOwned = _out3234;
                _7074_recIdents = _out3235;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7072_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3236;
                DCOMPUTF16._IOwnership _out3237;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3236, out _out3237);
                r = _out3236;
                resultingOwnership = _out3237;
                readIdents = _7074_recIdents;
              }
            } else if (_source263.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7075___mcc_h392 = _source263.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7076___mcc_h393 = _source263.dtor_attributes;
              {
                RAST._IExpr _7077_recursiveGen;
                DCOMPUTF16._IOwnership _7078_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7079_recIdents;
                RAST._IExpr _out3238;
                DCOMPUTF16._IOwnership _out3239;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3240;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3238, out _out3239, out _out3240);
                _7077_recursiveGen = _out3238;
                _7078_recOwned = _out3239;
                _7079_recIdents = _out3240;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7077_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3241;
                DCOMPUTF16._IOwnership _out3242;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3241, out _out3242);
                r = _out3241;
                resultingOwnership = _out3242;
                readIdents = _7079_recIdents;
              }
            } else {
              DAST._IType _7080___mcc_h396 = _source263.dtor_baseType;
              DAST._INewtypeRange _7081___mcc_h397 = _source263.dtor_range;
              bool _7082___mcc_h398 = _source263.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7083___mcc_h399 = _source263.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7084_attributes = _7083___mcc_h399;
              bool _7085_erase = _7082___mcc_h398;
              DAST._INewtypeRange _7086_range = _7081___mcc_h397;
              DAST._IType _7087_b = _7080___mcc_h396;
              {
                if (object.Equals(_6564_fromTpe, _7087_b)) {
                  RAST._IExpr _7088_recursiveGen;
                  DCOMPUTF16._IOwnership _7089_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7090_recIdents;
                  RAST._IExpr _out3243;
                  DCOMPUTF16._IOwnership _out3244;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3245;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3243, out _out3244, out _out3245);
                  _7088_recursiveGen = _out3243;
                  _7089_recOwned = _out3244;
                  _7090_recIdents = _out3245;
                  Std.Wrappers._IOption<RAST._IType> _7091_potentialRhsType;
                  _7091_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7087_b, _7086_range);
                  Std.Wrappers._IOption<RAST._IType> _source264 = _7091_potentialRhsType;
                  if (_source264.is_None) {
                    if (_7085_erase) {
                      r = _7088_recursiveGen;
                    } else {
                      RAST._IType _7092_rhsType;
                      RAST._IType _out3246;
                      _out3246 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7092_rhsType = _out3246;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7092_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7088_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3247;
                    DCOMPUTF16._IOwnership _out3248;
                    DCOMPUTF16.COMP.FromOwnership(r, _7089_recOwned, expectedOwnership, out _out3247, out _out3248);
                    r = _out3247;
                    resultingOwnership = _out3248;
                  } else {
                    RAST._IType _7093___mcc_h1250 = _source264.dtor_value;
                    RAST._IType _7094_v = _7093___mcc_h1250;
                    r = RAST.Expr.create_ConversionNum(_7094_v, _7088_recursiveGen);
                    RAST._IExpr _out3249;
                    DCOMPUTF16._IOwnership _out3250;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3249, out _out3250);
                    r = _out3249;
                    resultingOwnership = _out3250;
                  }
                  readIdents = _7090_recIdents;
                } else {
                  RAST._IExpr _out3251;
                  DCOMPUTF16._IOwnership _out3252;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3253;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7087_b), _7087_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3251, out _out3252, out _out3253);
                  r = _out3251;
                  resultingOwnership = _out3252;
                  readIdents = _out3253;
                }
              }
            }
          } else if (_source262.is_Nullable) {
            DAST._IType _7095___mcc_h404 = _source262.dtor_Nullable_a0;
            {
              RAST._IExpr _7096_recursiveGen;
              DCOMPUTF16._IOwnership _7097_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7098_recIdents;
              RAST._IExpr _out3254;
              DCOMPUTF16._IOwnership _out3255;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3256;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3254, out _out3255, out _out3256);
              _7096_recursiveGen = _out3254;
              _7097_recOwned = _out3255;
              _7098_recIdents = _out3256;
              Dafny.ISequence<Dafny.Rune> _7099_s;
              _7099_s = (_7096_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7097_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7099_s = Dafny.Sequence<Dafny.Rune>.Concat(_7099_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7099_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7099_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7099_s);
              RAST._IExpr _out3257;
              DCOMPUTF16._IOwnership _out3258;
              DCOMPUTF16.COMP.FromOwnership(r, _7097_recOwned, expectedOwnership, out _out3257, out _out3258);
              r = _out3257;
              resultingOwnership = _out3258;
              readIdents = _7098_recIdents;
            }
          } else if (_source262.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7100___mcc_h406 = _source262.dtor_Tuple_a0;
            {
              RAST._IExpr _7101_recursiveGen;
              DCOMPUTF16._IOwnership _7102_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7103_recIdents;
              RAST._IExpr _out3259;
              DCOMPUTF16._IOwnership _out3260;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3261;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3259, out _out3260, out _out3261);
              _7101_recursiveGen = _out3259;
              _7102_recOwned = _out3260;
              _7103_recIdents = _out3261;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7101_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3262;
              DCOMPUTF16._IOwnership _out3263;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3262, out _out3263);
              r = _out3262;
              resultingOwnership = _out3263;
              readIdents = _7103_recIdents;
            }
          } else if (_source262.is_Array) {
            DAST._IType _7104___mcc_h408 = _source262.dtor_element;
            BigInteger _7105___mcc_h409 = _source262.dtor_dims;
            {
              RAST._IExpr _7106_recursiveGen;
              DCOMPUTF16._IOwnership _7107_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7108_recIdents;
              RAST._IExpr _out3264;
              DCOMPUTF16._IOwnership _out3265;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3266;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3264, out _out3265, out _out3266);
              _7106_recursiveGen = _out3264;
              _7107_recOwned = _out3265;
              _7108_recIdents = _out3266;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7106_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3267;
              DCOMPUTF16._IOwnership _out3268;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3267, out _out3268);
              r = _out3267;
              resultingOwnership = _out3268;
              readIdents = _7108_recIdents;
            }
          } else if (_source262.is_Seq) {
            DAST._IType _7109___mcc_h412 = _source262.dtor_element;
            {
              RAST._IExpr _7110_recursiveGen;
              DCOMPUTF16._IOwnership _7111_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7112_recIdents;
              RAST._IExpr _out3269;
              DCOMPUTF16._IOwnership _out3270;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3271;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3269, out _out3270, out _out3271);
              _7110_recursiveGen = _out3269;
              _7111_recOwned = _out3270;
              _7112_recIdents = _out3271;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7110_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3272;
              DCOMPUTF16._IOwnership _out3273;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3272, out _out3273);
              r = _out3272;
              resultingOwnership = _out3273;
              readIdents = _7112_recIdents;
            }
          } else if (_source262.is_Set) {
            DAST._IType _7113___mcc_h414 = _source262.dtor_element;
            {
              RAST._IExpr _7114_recursiveGen;
              DCOMPUTF16._IOwnership _7115_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7116_recIdents;
              RAST._IExpr _out3274;
              DCOMPUTF16._IOwnership _out3275;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3276;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3274, out _out3275, out _out3276);
              _7114_recursiveGen = _out3274;
              _7115_recOwned = _out3275;
              _7116_recIdents = _out3276;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7114_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3277;
              DCOMPUTF16._IOwnership _out3278;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3277, out _out3278);
              r = _out3277;
              resultingOwnership = _out3278;
              readIdents = _7116_recIdents;
            }
          } else if (_source262.is_Multiset) {
            DAST._IType _7117___mcc_h416 = _source262.dtor_element;
            {
              RAST._IExpr _7118_recursiveGen;
              DCOMPUTF16._IOwnership _7119_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7120_recIdents;
              RAST._IExpr _out3279;
              DCOMPUTF16._IOwnership _out3280;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3281;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3279, out _out3280, out _out3281);
              _7118_recursiveGen = _out3279;
              _7119_recOwned = _out3280;
              _7120_recIdents = _out3281;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7118_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3282;
              DCOMPUTF16._IOwnership _out3283;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3282, out _out3283);
              r = _out3282;
              resultingOwnership = _out3283;
              readIdents = _7120_recIdents;
            }
          } else if (_source262.is_Map) {
            DAST._IType _7121___mcc_h418 = _source262.dtor_key;
            DAST._IType _7122___mcc_h419 = _source262.dtor_value;
            {
              RAST._IExpr _7123_recursiveGen;
              DCOMPUTF16._IOwnership _7124_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7125_recIdents;
              RAST._IExpr _out3284;
              DCOMPUTF16._IOwnership _out3285;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3286;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3284, out _out3285, out _out3286);
              _7123_recursiveGen = _out3284;
              _7124_recOwned = _out3285;
              _7125_recIdents = _out3286;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7123_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3287;
              DCOMPUTF16._IOwnership _out3288;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3287, out _out3288);
              r = _out3287;
              resultingOwnership = _out3288;
              readIdents = _7125_recIdents;
            }
          } else if (_source262.is_SetBuilder) {
            DAST._IType _7126___mcc_h422 = _source262.dtor_element;
            {
              RAST._IExpr _7127_recursiveGen;
              DCOMPUTF16._IOwnership _7128_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7129_recIdents;
              RAST._IExpr _out3289;
              DCOMPUTF16._IOwnership _out3290;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3291;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3289, out _out3290, out _out3291);
              _7127_recursiveGen = _out3289;
              _7128_recOwned = _out3290;
              _7129_recIdents = _out3291;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7127_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3292;
              DCOMPUTF16._IOwnership _out3293;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3292, out _out3293);
              r = _out3292;
              resultingOwnership = _out3293;
              readIdents = _7129_recIdents;
            }
          } else if (_source262.is_MapBuilder) {
            DAST._IType _7130___mcc_h424 = _source262.dtor_key;
            DAST._IType _7131___mcc_h425 = _source262.dtor_value;
            {
              RAST._IExpr _7132_recursiveGen;
              DCOMPUTF16._IOwnership _7133_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7134_recIdents;
              RAST._IExpr _out3294;
              DCOMPUTF16._IOwnership _out3295;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3296;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3294, out _out3295, out _out3296);
              _7132_recursiveGen = _out3294;
              _7133_recOwned = _out3295;
              _7134_recIdents = _out3296;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7132_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3297;
              DCOMPUTF16._IOwnership _out3298;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3297, out _out3298);
              r = _out3297;
              resultingOwnership = _out3298;
              readIdents = _7134_recIdents;
            }
          } else if (_source262.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7135___mcc_h428 = _source262.dtor_args;
            DAST._IType _7136___mcc_h429 = _source262.dtor_result;
            {
              RAST._IExpr _7137_recursiveGen;
              DCOMPUTF16._IOwnership _7138_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7139_recIdents;
              RAST._IExpr _out3299;
              DCOMPUTF16._IOwnership _out3300;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3301;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3299, out _out3300, out _out3301);
              _7137_recursiveGen = _out3299;
              _7138_recOwned = _out3300;
              _7139_recIdents = _out3301;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7137_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3302;
              DCOMPUTF16._IOwnership _out3303;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3302, out _out3303);
              r = _out3302;
              resultingOwnership = _out3303;
              readIdents = _7139_recIdents;
            }
          } else if (_source262.is_Primitive) {
            DAST._IPrimitive _7140___mcc_h432 = _source262.dtor_Primitive_a0;
            {
              RAST._IExpr _7141_recursiveGen;
              DCOMPUTF16._IOwnership _7142_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7143_recIdents;
              RAST._IExpr _out3304;
              DCOMPUTF16._IOwnership _out3305;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3306;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3304, out _out3305, out _out3306);
              _7141_recursiveGen = _out3304;
              _7142_recOwned = _out3305;
              _7143_recIdents = _out3306;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7141_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3307;
              DCOMPUTF16._IOwnership _out3308;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3307, out _out3308);
              r = _out3307;
              resultingOwnership = _out3308;
              readIdents = _7143_recIdents;
            }
          } else if (_source262.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7144___mcc_h434 = _source262.dtor_Passthrough_a0;
            {
              RAST._IExpr _7145_recursiveGen;
              DCOMPUTF16._IOwnership _7146_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7147_recIdents;
              RAST._IExpr _out3309;
              DCOMPUTF16._IOwnership _out3310;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3311;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3309, out _out3310, out _out3311);
              _7145_recursiveGen = _out3309;
              _7146_recOwned = _out3310;
              _7147_recIdents = _out3311;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7145_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3312;
              DCOMPUTF16._IOwnership _out3313;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3312, out _out3313);
              r = _out3312;
              resultingOwnership = _out3313;
              readIdents = _7147_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7148___mcc_h436 = _source262.dtor_TypeArg_a0;
            {
              RAST._IExpr _7149_recursiveGen;
              DCOMPUTF16._IOwnership _7150_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7151_recIdents;
              RAST._IExpr _out3314;
              DCOMPUTF16._IOwnership _out3315;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3316;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3314, out _out3315, out _out3316);
              _7149_recursiveGen = _out3314;
              _7150_recOwned = _out3315;
              _7151_recIdents = _out3316;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7149_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3317;
              DCOMPUTF16._IOwnership _out3318;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3317, out _out3318);
              r = _out3317;
              resultingOwnership = _out3318;
              readIdents = _7151_recIdents;
            }
          }
        } else if (_source246.is_Seq) {
          DAST._IType _7152___mcc_h438 = _source246.dtor_element;
          DAST._IType _source265 = _6570___mcc_h1;
          if (_source265.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7153___mcc_h442 = _source265.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7154___mcc_h443 = _source265.dtor_typeArgs;
            DAST._IResolvedType _7155___mcc_h444 = _source265.dtor_resolved;
            DAST._IResolvedType _source266 = _7155___mcc_h444;
            if (_source266.is_Datatype) {
              DAST._IDatatypeType _7156___mcc_h448 = _source266.dtor_datatypeType;
              {
                RAST._IExpr _7157_recursiveGen;
                DCOMPUTF16._IOwnership _7158_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7159_recIdents;
                RAST._IExpr _out3319;
                DCOMPUTF16._IOwnership _out3320;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3321;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3319, out _out3320, out _out3321);
                _7157_recursiveGen = _out3319;
                _7158_recOwned = _out3320;
                _7159_recIdents = _out3321;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7157_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3322;
                DCOMPUTF16._IOwnership _out3323;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3322, out _out3323);
                r = _out3322;
                resultingOwnership = _out3323;
                readIdents = _7159_recIdents;
              }
            } else if (_source266.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7160___mcc_h450 = _source266.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7161___mcc_h451 = _source266.dtor_attributes;
              {
                RAST._IExpr _7162_recursiveGen;
                DCOMPUTF16._IOwnership _7163_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7164_recIdents;
                RAST._IExpr _out3324;
                DCOMPUTF16._IOwnership _out3325;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3326;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3324, out _out3325, out _out3326);
                _7162_recursiveGen = _out3324;
                _7163_recOwned = _out3325;
                _7164_recIdents = _out3326;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7162_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3327;
                DCOMPUTF16._IOwnership _out3328;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3327, out _out3328);
                r = _out3327;
                resultingOwnership = _out3328;
                readIdents = _7164_recIdents;
              }
            } else {
              DAST._IType _7165___mcc_h454 = _source266.dtor_baseType;
              DAST._INewtypeRange _7166___mcc_h455 = _source266.dtor_range;
              bool _7167___mcc_h456 = _source266.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7168___mcc_h457 = _source266.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7169_attributes = _7168___mcc_h457;
              bool _7170_erase = _7167___mcc_h456;
              DAST._INewtypeRange _7171_range = _7166___mcc_h455;
              DAST._IType _7172_b = _7165___mcc_h454;
              {
                if (object.Equals(_6564_fromTpe, _7172_b)) {
                  RAST._IExpr _7173_recursiveGen;
                  DCOMPUTF16._IOwnership _7174_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7175_recIdents;
                  RAST._IExpr _out3329;
                  DCOMPUTF16._IOwnership _out3330;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3331;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3329, out _out3330, out _out3331);
                  _7173_recursiveGen = _out3329;
                  _7174_recOwned = _out3330;
                  _7175_recIdents = _out3331;
                  Std.Wrappers._IOption<RAST._IType> _7176_potentialRhsType;
                  _7176_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7172_b, _7171_range);
                  Std.Wrappers._IOption<RAST._IType> _source267 = _7176_potentialRhsType;
                  if (_source267.is_None) {
                    if (_7170_erase) {
                      r = _7173_recursiveGen;
                    } else {
                      RAST._IType _7177_rhsType;
                      RAST._IType _out3332;
                      _out3332 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7177_rhsType = _out3332;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7177_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7173_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3333;
                    DCOMPUTF16._IOwnership _out3334;
                    DCOMPUTF16.COMP.FromOwnership(r, _7174_recOwned, expectedOwnership, out _out3333, out _out3334);
                    r = _out3333;
                    resultingOwnership = _out3334;
                  } else {
                    RAST._IType _7178___mcc_h1251 = _source267.dtor_value;
                    RAST._IType _7179_v = _7178___mcc_h1251;
                    r = RAST.Expr.create_ConversionNum(_7179_v, _7173_recursiveGen);
                    RAST._IExpr _out3335;
                    DCOMPUTF16._IOwnership _out3336;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3335, out _out3336);
                    r = _out3335;
                    resultingOwnership = _out3336;
                  }
                  readIdents = _7175_recIdents;
                } else {
                  RAST._IExpr _out3337;
                  DCOMPUTF16._IOwnership _out3338;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3339;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7172_b), _7172_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3337, out _out3338, out _out3339);
                  r = _out3337;
                  resultingOwnership = _out3338;
                  readIdents = _out3339;
                }
              }
            }
          } else if (_source265.is_Nullable) {
            DAST._IType _7180___mcc_h462 = _source265.dtor_Nullable_a0;
            {
              RAST._IExpr _7181_recursiveGen;
              DCOMPUTF16._IOwnership _7182_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7183_recIdents;
              RAST._IExpr _out3340;
              DCOMPUTF16._IOwnership _out3341;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3342;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3340, out _out3341, out _out3342);
              _7181_recursiveGen = _out3340;
              _7182_recOwned = _out3341;
              _7183_recIdents = _out3342;
              Dafny.ISequence<Dafny.Rune> _7184_s;
              _7184_s = (_7181_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7182_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7184_s = Dafny.Sequence<Dafny.Rune>.Concat(_7184_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7184_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7184_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7184_s);
              RAST._IExpr _out3343;
              DCOMPUTF16._IOwnership _out3344;
              DCOMPUTF16.COMP.FromOwnership(r, _7182_recOwned, expectedOwnership, out _out3343, out _out3344);
              r = _out3343;
              resultingOwnership = _out3344;
              readIdents = _7183_recIdents;
            }
          } else if (_source265.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7185___mcc_h464 = _source265.dtor_Tuple_a0;
            {
              RAST._IExpr _7186_recursiveGen;
              DCOMPUTF16._IOwnership _7187_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7188_recIdents;
              RAST._IExpr _out3345;
              DCOMPUTF16._IOwnership _out3346;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3347;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3345, out _out3346, out _out3347);
              _7186_recursiveGen = _out3345;
              _7187_recOwned = _out3346;
              _7188_recIdents = _out3347;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7186_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3348;
              DCOMPUTF16._IOwnership _out3349;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3348, out _out3349);
              r = _out3348;
              resultingOwnership = _out3349;
              readIdents = _7188_recIdents;
            }
          } else if (_source265.is_Array) {
            DAST._IType _7189___mcc_h466 = _source265.dtor_element;
            BigInteger _7190___mcc_h467 = _source265.dtor_dims;
            {
              RAST._IExpr _7191_recursiveGen;
              DCOMPUTF16._IOwnership _7192_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7193_recIdents;
              RAST._IExpr _out3350;
              DCOMPUTF16._IOwnership _out3351;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3352;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3350, out _out3351, out _out3352);
              _7191_recursiveGen = _out3350;
              _7192_recOwned = _out3351;
              _7193_recIdents = _out3352;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7191_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3353;
              DCOMPUTF16._IOwnership _out3354;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3353, out _out3354);
              r = _out3353;
              resultingOwnership = _out3354;
              readIdents = _7193_recIdents;
            }
          } else if (_source265.is_Seq) {
            DAST._IType _7194___mcc_h470 = _source265.dtor_element;
            {
              RAST._IExpr _7195_recursiveGen;
              DCOMPUTF16._IOwnership _7196_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7197_recIdents;
              RAST._IExpr _out3355;
              DCOMPUTF16._IOwnership _out3356;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3357;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3355, out _out3356, out _out3357);
              _7195_recursiveGen = _out3355;
              _7196_recOwned = _out3356;
              _7197_recIdents = _out3357;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7195_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3358;
              DCOMPUTF16._IOwnership _out3359;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3358, out _out3359);
              r = _out3358;
              resultingOwnership = _out3359;
              readIdents = _7197_recIdents;
            }
          } else if (_source265.is_Set) {
            DAST._IType _7198___mcc_h472 = _source265.dtor_element;
            {
              RAST._IExpr _7199_recursiveGen;
              DCOMPUTF16._IOwnership _7200_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7201_recIdents;
              RAST._IExpr _out3360;
              DCOMPUTF16._IOwnership _out3361;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3362;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3360, out _out3361, out _out3362);
              _7199_recursiveGen = _out3360;
              _7200_recOwned = _out3361;
              _7201_recIdents = _out3362;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7199_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3363;
              DCOMPUTF16._IOwnership _out3364;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3363, out _out3364);
              r = _out3363;
              resultingOwnership = _out3364;
              readIdents = _7201_recIdents;
            }
          } else if (_source265.is_Multiset) {
            DAST._IType _7202___mcc_h474 = _source265.dtor_element;
            {
              RAST._IExpr _7203_recursiveGen;
              DCOMPUTF16._IOwnership _7204_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7205_recIdents;
              RAST._IExpr _out3365;
              DCOMPUTF16._IOwnership _out3366;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3367;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3365, out _out3366, out _out3367);
              _7203_recursiveGen = _out3365;
              _7204_recOwned = _out3366;
              _7205_recIdents = _out3367;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7203_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3368;
              DCOMPUTF16._IOwnership _out3369;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3368, out _out3369);
              r = _out3368;
              resultingOwnership = _out3369;
              readIdents = _7205_recIdents;
            }
          } else if (_source265.is_Map) {
            DAST._IType _7206___mcc_h476 = _source265.dtor_key;
            DAST._IType _7207___mcc_h477 = _source265.dtor_value;
            {
              RAST._IExpr _7208_recursiveGen;
              DCOMPUTF16._IOwnership _7209_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7210_recIdents;
              RAST._IExpr _out3370;
              DCOMPUTF16._IOwnership _out3371;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3372;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3370, out _out3371, out _out3372);
              _7208_recursiveGen = _out3370;
              _7209_recOwned = _out3371;
              _7210_recIdents = _out3372;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7208_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3373;
              DCOMPUTF16._IOwnership _out3374;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3373, out _out3374);
              r = _out3373;
              resultingOwnership = _out3374;
              readIdents = _7210_recIdents;
            }
          } else if (_source265.is_SetBuilder) {
            DAST._IType _7211___mcc_h480 = _source265.dtor_element;
            {
              RAST._IExpr _7212_recursiveGen;
              DCOMPUTF16._IOwnership _7213_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7214_recIdents;
              RAST._IExpr _out3375;
              DCOMPUTF16._IOwnership _out3376;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3377;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3375, out _out3376, out _out3377);
              _7212_recursiveGen = _out3375;
              _7213_recOwned = _out3376;
              _7214_recIdents = _out3377;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7212_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3378;
              DCOMPUTF16._IOwnership _out3379;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3378, out _out3379);
              r = _out3378;
              resultingOwnership = _out3379;
              readIdents = _7214_recIdents;
            }
          } else if (_source265.is_MapBuilder) {
            DAST._IType _7215___mcc_h482 = _source265.dtor_key;
            DAST._IType _7216___mcc_h483 = _source265.dtor_value;
            {
              RAST._IExpr _7217_recursiveGen;
              DCOMPUTF16._IOwnership _7218_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7219_recIdents;
              RAST._IExpr _out3380;
              DCOMPUTF16._IOwnership _out3381;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3382;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3380, out _out3381, out _out3382);
              _7217_recursiveGen = _out3380;
              _7218_recOwned = _out3381;
              _7219_recIdents = _out3382;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7217_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3383;
              DCOMPUTF16._IOwnership _out3384;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3383, out _out3384);
              r = _out3383;
              resultingOwnership = _out3384;
              readIdents = _7219_recIdents;
            }
          } else if (_source265.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7220___mcc_h486 = _source265.dtor_args;
            DAST._IType _7221___mcc_h487 = _source265.dtor_result;
            {
              RAST._IExpr _7222_recursiveGen;
              DCOMPUTF16._IOwnership _7223_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7224_recIdents;
              RAST._IExpr _out3385;
              DCOMPUTF16._IOwnership _out3386;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3387;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3385, out _out3386, out _out3387);
              _7222_recursiveGen = _out3385;
              _7223_recOwned = _out3386;
              _7224_recIdents = _out3387;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7222_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3388;
              DCOMPUTF16._IOwnership _out3389;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3388, out _out3389);
              r = _out3388;
              resultingOwnership = _out3389;
              readIdents = _7224_recIdents;
            }
          } else if (_source265.is_Primitive) {
            DAST._IPrimitive _7225___mcc_h490 = _source265.dtor_Primitive_a0;
            {
              RAST._IExpr _7226_recursiveGen;
              DCOMPUTF16._IOwnership _7227_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7228_recIdents;
              RAST._IExpr _out3390;
              DCOMPUTF16._IOwnership _out3391;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3392;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3390, out _out3391, out _out3392);
              _7226_recursiveGen = _out3390;
              _7227_recOwned = _out3391;
              _7228_recIdents = _out3392;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7226_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3393;
              DCOMPUTF16._IOwnership _out3394;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3393, out _out3394);
              r = _out3393;
              resultingOwnership = _out3394;
              readIdents = _7228_recIdents;
            }
          } else if (_source265.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7229___mcc_h492 = _source265.dtor_Passthrough_a0;
            {
              RAST._IExpr _7230_recursiveGen;
              DCOMPUTF16._IOwnership _7231_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7232_recIdents;
              RAST._IExpr _out3395;
              DCOMPUTF16._IOwnership _out3396;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3397;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3395, out _out3396, out _out3397);
              _7230_recursiveGen = _out3395;
              _7231_recOwned = _out3396;
              _7232_recIdents = _out3397;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7230_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3398;
              DCOMPUTF16._IOwnership _out3399;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3398, out _out3399);
              r = _out3398;
              resultingOwnership = _out3399;
              readIdents = _7232_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7233___mcc_h494 = _source265.dtor_TypeArg_a0;
            {
              RAST._IExpr _7234_recursiveGen;
              DCOMPUTF16._IOwnership _7235_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7236_recIdents;
              RAST._IExpr _out3400;
              DCOMPUTF16._IOwnership _out3401;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3402;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3400, out _out3401, out _out3402);
              _7234_recursiveGen = _out3400;
              _7235_recOwned = _out3401;
              _7236_recIdents = _out3402;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7234_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3403;
              DCOMPUTF16._IOwnership _out3404;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3403, out _out3404);
              r = _out3403;
              resultingOwnership = _out3404;
              readIdents = _7236_recIdents;
            }
          }
        } else if (_source246.is_Set) {
          DAST._IType _7237___mcc_h496 = _source246.dtor_element;
          DAST._IType _source268 = _6570___mcc_h1;
          if (_source268.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7238___mcc_h500 = _source268.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7239___mcc_h501 = _source268.dtor_typeArgs;
            DAST._IResolvedType _7240___mcc_h502 = _source268.dtor_resolved;
            DAST._IResolvedType _source269 = _7240___mcc_h502;
            if (_source269.is_Datatype) {
              DAST._IDatatypeType _7241___mcc_h506 = _source269.dtor_datatypeType;
              {
                RAST._IExpr _7242_recursiveGen;
                DCOMPUTF16._IOwnership _7243_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7244_recIdents;
                RAST._IExpr _out3405;
                DCOMPUTF16._IOwnership _out3406;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3407;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3405, out _out3406, out _out3407);
                _7242_recursiveGen = _out3405;
                _7243_recOwned = _out3406;
                _7244_recIdents = _out3407;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7242_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3408;
                DCOMPUTF16._IOwnership _out3409;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3408, out _out3409);
                r = _out3408;
                resultingOwnership = _out3409;
                readIdents = _7244_recIdents;
              }
            } else if (_source269.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7245___mcc_h508 = _source269.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7246___mcc_h509 = _source269.dtor_attributes;
              {
                RAST._IExpr _7247_recursiveGen;
                DCOMPUTF16._IOwnership _7248_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7249_recIdents;
                RAST._IExpr _out3410;
                DCOMPUTF16._IOwnership _out3411;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3412;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3410, out _out3411, out _out3412);
                _7247_recursiveGen = _out3410;
                _7248_recOwned = _out3411;
                _7249_recIdents = _out3412;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7247_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3413;
                DCOMPUTF16._IOwnership _out3414;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3413, out _out3414);
                r = _out3413;
                resultingOwnership = _out3414;
                readIdents = _7249_recIdents;
              }
            } else {
              DAST._IType _7250___mcc_h512 = _source269.dtor_baseType;
              DAST._INewtypeRange _7251___mcc_h513 = _source269.dtor_range;
              bool _7252___mcc_h514 = _source269.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7253___mcc_h515 = _source269.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7254_attributes = _7253___mcc_h515;
              bool _7255_erase = _7252___mcc_h514;
              DAST._INewtypeRange _7256_range = _7251___mcc_h513;
              DAST._IType _7257_b = _7250___mcc_h512;
              {
                if (object.Equals(_6564_fromTpe, _7257_b)) {
                  RAST._IExpr _7258_recursiveGen;
                  DCOMPUTF16._IOwnership _7259_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7260_recIdents;
                  RAST._IExpr _out3415;
                  DCOMPUTF16._IOwnership _out3416;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3417;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3415, out _out3416, out _out3417);
                  _7258_recursiveGen = _out3415;
                  _7259_recOwned = _out3416;
                  _7260_recIdents = _out3417;
                  Std.Wrappers._IOption<RAST._IType> _7261_potentialRhsType;
                  _7261_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7257_b, _7256_range);
                  Std.Wrappers._IOption<RAST._IType> _source270 = _7261_potentialRhsType;
                  if (_source270.is_None) {
                    if (_7255_erase) {
                      r = _7258_recursiveGen;
                    } else {
                      RAST._IType _7262_rhsType;
                      RAST._IType _out3418;
                      _out3418 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7262_rhsType = _out3418;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7262_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7258_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3419;
                    DCOMPUTF16._IOwnership _out3420;
                    DCOMPUTF16.COMP.FromOwnership(r, _7259_recOwned, expectedOwnership, out _out3419, out _out3420);
                    r = _out3419;
                    resultingOwnership = _out3420;
                  } else {
                    RAST._IType _7263___mcc_h1252 = _source270.dtor_value;
                    RAST._IType _7264_v = _7263___mcc_h1252;
                    r = RAST.Expr.create_ConversionNum(_7264_v, _7258_recursiveGen);
                    RAST._IExpr _out3421;
                    DCOMPUTF16._IOwnership _out3422;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3421, out _out3422);
                    r = _out3421;
                    resultingOwnership = _out3422;
                  }
                  readIdents = _7260_recIdents;
                } else {
                  RAST._IExpr _out3423;
                  DCOMPUTF16._IOwnership _out3424;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3425;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7257_b), _7257_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3423, out _out3424, out _out3425);
                  r = _out3423;
                  resultingOwnership = _out3424;
                  readIdents = _out3425;
                }
              }
            }
          } else if (_source268.is_Nullable) {
            DAST._IType _7265___mcc_h520 = _source268.dtor_Nullable_a0;
            {
              RAST._IExpr _7266_recursiveGen;
              DCOMPUTF16._IOwnership _7267_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7268_recIdents;
              RAST._IExpr _out3426;
              DCOMPUTF16._IOwnership _out3427;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3428;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3426, out _out3427, out _out3428);
              _7266_recursiveGen = _out3426;
              _7267_recOwned = _out3427;
              _7268_recIdents = _out3428;
              Dafny.ISequence<Dafny.Rune> _7269_s;
              _7269_s = (_7266_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7267_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7269_s = Dafny.Sequence<Dafny.Rune>.Concat(_7269_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7269_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7269_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7269_s);
              RAST._IExpr _out3429;
              DCOMPUTF16._IOwnership _out3430;
              DCOMPUTF16.COMP.FromOwnership(r, _7267_recOwned, expectedOwnership, out _out3429, out _out3430);
              r = _out3429;
              resultingOwnership = _out3430;
              readIdents = _7268_recIdents;
            }
          } else if (_source268.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7270___mcc_h522 = _source268.dtor_Tuple_a0;
            {
              RAST._IExpr _7271_recursiveGen;
              DCOMPUTF16._IOwnership _7272_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7273_recIdents;
              RAST._IExpr _out3431;
              DCOMPUTF16._IOwnership _out3432;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3433;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3431, out _out3432, out _out3433);
              _7271_recursiveGen = _out3431;
              _7272_recOwned = _out3432;
              _7273_recIdents = _out3433;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7271_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3434;
              DCOMPUTF16._IOwnership _out3435;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3434, out _out3435);
              r = _out3434;
              resultingOwnership = _out3435;
              readIdents = _7273_recIdents;
            }
          } else if (_source268.is_Array) {
            DAST._IType _7274___mcc_h524 = _source268.dtor_element;
            BigInteger _7275___mcc_h525 = _source268.dtor_dims;
            {
              RAST._IExpr _7276_recursiveGen;
              DCOMPUTF16._IOwnership _7277_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7278_recIdents;
              RAST._IExpr _out3436;
              DCOMPUTF16._IOwnership _out3437;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3438;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3436, out _out3437, out _out3438);
              _7276_recursiveGen = _out3436;
              _7277_recOwned = _out3437;
              _7278_recIdents = _out3438;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7276_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3439;
              DCOMPUTF16._IOwnership _out3440;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3439, out _out3440);
              r = _out3439;
              resultingOwnership = _out3440;
              readIdents = _7278_recIdents;
            }
          } else if (_source268.is_Seq) {
            DAST._IType _7279___mcc_h528 = _source268.dtor_element;
            {
              RAST._IExpr _7280_recursiveGen;
              DCOMPUTF16._IOwnership _7281_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7282_recIdents;
              RAST._IExpr _out3441;
              DCOMPUTF16._IOwnership _out3442;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3443;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3441, out _out3442, out _out3443);
              _7280_recursiveGen = _out3441;
              _7281_recOwned = _out3442;
              _7282_recIdents = _out3443;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7280_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3444;
              DCOMPUTF16._IOwnership _out3445;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3444, out _out3445);
              r = _out3444;
              resultingOwnership = _out3445;
              readIdents = _7282_recIdents;
            }
          } else if (_source268.is_Set) {
            DAST._IType _7283___mcc_h530 = _source268.dtor_element;
            {
              RAST._IExpr _7284_recursiveGen;
              DCOMPUTF16._IOwnership _7285_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7286_recIdents;
              RAST._IExpr _out3446;
              DCOMPUTF16._IOwnership _out3447;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3448;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3446, out _out3447, out _out3448);
              _7284_recursiveGen = _out3446;
              _7285_recOwned = _out3447;
              _7286_recIdents = _out3448;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7284_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3449;
              DCOMPUTF16._IOwnership _out3450;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3449, out _out3450);
              r = _out3449;
              resultingOwnership = _out3450;
              readIdents = _7286_recIdents;
            }
          } else if (_source268.is_Multiset) {
            DAST._IType _7287___mcc_h532 = _source268.dtor_element;
            {
              RAST._IExpr _7288_recursiveGen;
              DCOMPUTF16._IOwnership _7289_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7290_recIdents;
              RAST._IExpr _out3451;
              DCOMPUTF16._IOwnership _out3452;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3453;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3451, out _out3452, out _out3453);
              _7288_recursiveGen = _out3451;
              _7289_recOwned = _out3452;
              _7290_recIdents = _out3453;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7288_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3454;
              DCOMPUTF16._IOwnership _out3455;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3454, out _out3455);
              r = _out3454;
              resultingOwnership = _out3455;
              readIdents = _7290_recIdents;
            }
          } else if (_source268.is_Map) {
            DAST._IType _7291___mcc_h534 = _source268.dtor_key;
            DAST._IType _7292___mcc_h535 = _source268.dtor_value;
            {
              RAST._IExpr _7293_recursiveGen;
              DCOMPUTF16._IOwnership _7294_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7295_recIdents;
              RAST._IExpr _out3456;
              DCOMPUTF16._IOwnership _out3457;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3458;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3456, out _out3457, out _out3458);
              _7293_recursiveGen = _out3456;
              _7294_recOwned = _out3457;
              _7295_recIdents = _out3458;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7293_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3459;
              DCOMPUTF16._IOwnership _out3460;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3459, out _out3460);
              r = _out3459;
              resultingOwnership = _out3460;
              readIdents = _7295_recIdents;
            }
          } else if (_source268.is_SetBuilder) {
            DAST._IType _7296___mcc_h538 = _source268.dtor_element;
            {
              RAST._IExpr _7297_recursiveGen;
              DCOMPUTF16._IOwnership _7298_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7299_recIdents;
              RAST._IExpr _out3461;
              DCOMPUTF16._IOwnership _out3462;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3463;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3461, out _out3462, out _out3463);
              _7297_recursiveGen = _out3461;
              _7298_recOwned = _out3462;
              _7299_recIdents = _out3463;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7297_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3464;
              DCOMPUTF16._IOwnership _out3465;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3464, out _out3465);
              r = _out3464;
              resultingOwnership = _out3465;
              readIdents = _7299_recIdents;
            }
          } else if (_source268.is_MapBuilder) {
            DAST._IType _7300___mcc_h540 = _source268.dtor_key;
            DAST._IType _7301___mcc_h541 = _source268.dtor_value;
            {
              RAST._IExpr _7302_recursiveGen;
              DCOMPUTF16._IOwnership _7303_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7304_recIdents;
              RAST._IExpr _out3466;
              DCOMPUTF16._IOwnership _out3467;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3468;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3466, out _out3467, out _out3468);
              _7302_recursiveGen = _out3466;
              _7303_recOwned = _out3467;
              _7304_recIdents = _out3468;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7302_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3469;
              DCOMPUTF16._IOwnership _out3470;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3469, out _out3470);
              r = _out3469;
              resultingOwnership = _out3470;
              readIdents = _7304_recIdents;
            }
          } else if (_source268.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7305___mcc_h544 = _source268.dtor_args;
            DAST._IType _7306___mcc_h545 = _source268.dtor_result;
            {
              RAST._IExpr _7307_recursiveGen;
              DCOMPUTF16._IOwnership _7308_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7309_recIdents;
              RAST._IExpr _out3471;
              DCOMPUTF16._IOwnership _out3472;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3473;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3471, out _out3472, out _out3473);
              _7307_recursiveGen = _out3471;
              _7308_recOwned = _out3472;
              _7309_recIdents = _out3473;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7307_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3474;
              DCOMPUTF16._IOwnership _out3475;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3474, out _out3475);
              r = _out3474;
              resultingOwnership = _out3475;
              readIdents = _7309_recIdents;
            }
          } else if (_source268.is_Primitive) {
            DAST._IPrimitive _7310___mcc_h548 = _source268.dtor_Primitive_a0;
            {
              RAST._IExpr _7311_recursiveGen;
              DCOMPUTF16._IOwnership _7312_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7313_recIdents;
              RAST._IExpr _out3476;
              DCOMPUTF16._IOwnership _out3477;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3478;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3476, out _out3477, out _out3478);
              _7311_recursiveGen = _out3476;
              _7312_recOwned = _out3477;
              _7313_recIdents = _out3478;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7311_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3479;
              DCOMPUTF16._IOwnership _out3480;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3479, out _out3480);
              r = _out3479;
              resultingOwnership = _out3480;
              readIdents = _7313_recIdents;
            }
          } else if (_source268.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7314___mcc_h550 = _source268.dtor_Passthrough_a0;
            {
              RAST._IExpr _7315_recursiveGen;
              DCOMPUTF16._IOwnership _7316_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7317_recIdents;
              RAST._IExpr _out3481;
              DCOMPUTF16._IOwnership _out3482;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3483;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3481, out _out3482, out _out3483);
              _7315_recursiveGen = _out3481;
              _7316_recOwned = _out3482;
              _7317_recIdents = _out3483;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7315_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3484;
              DCOMPUTF16._IOwnership _out3485;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3484, out _out3485);
              r = _out3484;
              resultingOwnership = _out3485;
              readIdents = _7317_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7318___mcc_h552 = _source268.dtor_TypeArg_a0;
            {
              RAST._IExpr _7319_recursiveGen;
              DCOMPUTF16._IOwnership _7320_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7321_recIdents;
              RAST._IExpr _out3486;
              DCOMPUTF16._IOwnership _out3487;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3488;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3486, out _out3487, out _out3488);
              _7319_recursiveGen = _out3486;
              _7320_recOwned = _out3487;
              _7321_recIdents = _out3488;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7319_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3489;
              DCOMPUTF16._IOwnership _out3490;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3489, out _out3490);
              r = _out3489;
              resultingOwnership = _out3490;
              readIdents = _7321_recIdents;
            }
          }
        } else if (_source246.is_Multiset) {
          DAST._IType _7322___mcc_h554 = _source246.dtor_element;
          DAST._IType _source271 = _6570___mcc_h1;
          if (_source271.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7323___mcc_h558 = _source271.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7324___mcc_h559 = _source271.dtor_typeArgs;
            DAST._IResolvedType _7325___mcc_h560 = _source271.dtor_resolved;
            DAST._IResolvedType _source272 = _7325___mcc_h560;
            if (_source272.is_Datatype) {
              DAST._IDatatypeType _7326___mcc_h564 = _source272.dtor_datatypeType;
              {
                RAST._IExpr _7327_recursiveGen;
                DCOMPUTF16._IOwnership _7328_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7329_recIdents;
                RAST._IExpr _out3491;
                DCOMPUTF16._IOwnership _out3492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3493;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3491, out _out3492, out _out3493);
                _7327_recursiveGen = _out3491;
                _7328_recOwned = _out3492;
                _7329_recIdents = _out3493;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7327_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3494;
                DCOMPUTF16._IOwnership _out3495;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3494, out _out3495);
                r = _out3494;
                resultingOwnership = _out3495;
                readIdents = _7329_recIdents;
              }
            } else if (_source272.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7330___mcc_h566 = _source272.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7331___mcc_h567 = _source272.dtor_attributes;
              {
                RAST._IExpr _7332_recursiveGen;
                DCOMPUTF16._IOwnership _7333_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7334_recIdents;
                RAST._IExpr _out3496;
                DCOMPUTF16._IOwnership _out3497;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3498;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3496, out _out3497, out _out3498);
                _7332_recursiveGen = _out3496;
                _7333_recOwned = _out3497;
                _7334_recIdents = _out3498;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7332_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3499;
                DCOMPUTF16._IOwnership _out3500;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3499, out _out3500);
                r = _out3499;
                resultingOwnership = _out3500;
                readIdents = _7334_recIdents;
              }
            } else {
              DAST._IType _7335___mcc_h570 = _source272.dtor_baseType;
              DAST._INewtypeRange _7336___mcc_h571 = _source272.dtor_range;
              bool _7337___mcc_h572 = _source272.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7338___mcc_h573 = _source272.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7339_attributes = _7338___mcc_h573;
              bool _7340_erase = _7337___mcc_h572;
              DAST._INewtypeRange _7341_range = _7336___mcc_h571;
              DAST._IType _7342_b = _7335___mcc_h570;
              {
                if (object.Equals(_6564_fromTpe, _7342_b)) {
                  RAST._IExpr _7343_recursiveGen;
                  DCOMPUTF16._IOwnership _7344_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7345_recIdents;
                  RAST._IExpr _out3501;
                  DCOMPUTF16._IOwnership _out3502;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3503;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3501, out _out3502, out _out3503);
                  _7343_recursiveGen = _out3501;
                  _7344_recOwned = _out3502;
                  _7345_recIdents = _out3503;
                  Std.Wrappers._IOption<RAST._IType> _7346_potentialRhsType;
                  _7346_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7342_b, _7341_range);
                  Std.Wrappers._IOption<RAST._IType> _source273 = _7346_potentialRhsType;
                  if (_source273.is_None) {
                    if (_7340_erase) {
                      r = _7343_recursiveGen;
                    } else {
                      RAST._IType _7347_rhsType;
                      RAST._IType _out3504;
                      _out3504 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7347_rhsType = _out3504;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7347_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7343_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3505;
                    DCOMPUTF16._IOwnership _out3506;
                    DCOMPUTF16.COMP.FromOwnership(r, _7344_recOwned, expectedOwnership, out _out3505, out _out3506);
                    r = _out3505;
                    resultingOwnership = _out3506;
                  } else {
                    RAST._IType _7348___mcc_h1253 = _source273.dtor_value;
                    RAST._IType _7349_v = _7348___mcc_h1253;
                    r = RAST.Expr.create_ConversionNum(_7349_v, _7343_recursiveGen);
                    RAST._IExpr _out3507;
                    DCOMPUTF16._IOwnership _out3508;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3507, out _out3508);
                    r = _out3507;
                    resultingOwnership = _out3508;
                  }
                  readIdents = _7345_recIdents;
                } else {
                  RAST._IExpr _out3509;
                  DCOMPUTF16._IOwnership _out3510;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3511;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7342_b), _7342_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3509, out _out3510, out _out3511);
                  r = _out3509;
                  resultingOwnership = _out3510;
                  readIdents = _out3511;
                }
              }
            }
          } else if (_source271.is_Nullable) {
            DAST._IType _7350___mcc_h578 = _source271.dtor_Nullable_a0;
            {
              RAST._IExpr _7351_recursiveGen;
              DCOMPUTF16._IOwnership _7352_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7353_recIdents;
              RAST._IExpr _out3512;
              DCOMPUTF16._IOwnership _out3513;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3514;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3512, out _out3513, out _out3514);
              _7351_recursiveGen = _out3512;
              _7352_recOwned = _out3513;
              _7353_recIdents = _out3514;
              Dafny.ISequence<Dafny.Rune> _7354_s;
              _7354_s = (_7351_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7352_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7354_s = Dafny.Sequence<Dafny.Rune>.Concat(_7354_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7354_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7354_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7354_s);
              RAST._IExpr _out3515;
              DCOMPUTF16._IOwnership _out3516;
              DCOMPUTF16.COMP.FromOwnership(r, _7352_recOwned, expectedOwnership, out _out3515, out _out3516);
              r = _out3515;
              resultingOwnership = _out3516;
              readIdents = _7353_recIdents;
            }
          } else if (_source271.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7355___mcc_h580 = _source271.dtor_Tuple_a0;
            {
              RAST._IExpr _7356_recursiveGen;
              DCOMPUTF16._IOwnership _7357_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7358_recIdents;
              RAST._IExpr _out3517;
              DCOMPUTF16._IOwnership _out3518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3519;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3517, out _out3518, out _out3519);
              _7356_recursiveGen = _out3517;
              _7357_recOwned = _out3518;
              _7358_recIdents = _out3519;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7356_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3520;
              DCOMPUTF16._IOwnership _out3521;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3520, out _out3521);
              r = _out3520;
              resultingOwnership = _out3521;
              readIdents = _7358_recIdents;
            }
          } else if (_source271.is_Array) {
            DAST._IType _7359___mcc_h582 = _source271.dtor_element;
            BigInteger _7360___mcc_h583 = _source271.dtor_dims;
            {
              RAST._IExpr _7361_recursiveGen;
              DCOMPUTF16._IOwnership _7362_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7363_recIdents;
              RAST._IExpr _out3522;
              DCOMPUTF16._IOwnership _out3523;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3524;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3522, out _out3523, out _out3524);
              _7361_recursiveGen = _out3522;
              _7362_recOwned = _out3523;
              _7363_recIdents = _out3524;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7361_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3525;
              DCOMPUTF16._IOwnership _out3526;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3525, out _out3526);
              r = _out3525;
              resultingOwnership = _out3526;
              readIdents = _7363_recIdents;
            }
          } else if (_source271.is_Seq) {
            DAST._IType _7364___mcc_h586 = _source271.dtor_element;
            {
              RAST._IExpr _7365_recursiveGen;
              DCOMPUTF16._IOwnership _7366_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7367_recIdents;
              RAST._IExpr _out3527;
              DCOMPUTF16._IOwnership _out3528;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3529;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3527, out _out3528, out _out3529);
              _7365_recursiveGen = _out3527;
              _7366_recOwned = _out3528;
              _7367_recIdents = _out3529;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7365_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3530;
              DCOMPUTF16._IOwnership _out3531;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3530, out _out3531);
              r = _out3530;
              resultingOwnership = _out3531;
              readIdents = _7367_recIdents;
            }
          } else if (_source271.is_Set) {
            DAST._IType _7368___mcc_h588 = _source271.dtor_element;
            {
              RAST._IExpr _7369_recursiveGen;
              DCOMPUTF16._IOwnership _7370_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7371_recIdents;
              RAST._IExpr _out3532;
              DCOMPUTF16._IOwnership _out3533;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3534;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3532, out _out3533, out _out3534);
              _7369_recursiveGen = _out3532;
              _7370_recOwned = _out3533;
              _7371_recIdents = _out3534;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7369_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3535;
              DCOMPUTF16._IOwnership _out3536;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3535, out _out3536);
              r = _out3535;
              resultingOwnership = _out3536;
              readIdents = _7371_recIdents;
            }
          } else if (_source271.is_Multiset) {
            DAST._IType _7372___mcc_h590 = _source271.dtor_element;
            {
              RAST._IExpr _7373_recursiveGen;
              DCOMPUTF16._IOwnership _7374_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7375_recIdents;
              RAST._IExpr _out3537;
              DCOMPUTF16._IOwnership _out3538;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3539;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3537, out _out3538, out _out3539);
              _7373_recursiveGen = _out3537;
              _7374_recOwned = _out3538;
              _7375_recIdents = _out3539;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7373_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3540;
              DCOMPUTF16._IOwnership _out3541;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3540, out _out3541);
              r = _out3540;
              resultingOwnership = _out3541;
              readIdents = _7375_recIdents;
            }
          } else if (_source271.is_Map) {
            DAST._IType _7376___mcc_h592 = _source271.dtor_key;
            DAST._IType _7377___mcc_h593 = _source271.dtor_value;
            {
              RAST._IExpr _7378_recursiveGen;
              DCOMPUTF16._IOwnership _7379_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7380_recIdents;
              RAST._IExpr _out3542;
              DCOMPUTF16._IOwnership _out3543;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3544;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3542, out _out3543, out _out3544);
              _7378_recursiveGen = _out3542;
              _7379_recOwned = _out3543;
              _7380_recIdents = _out3544;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7378_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3545;
              DCOMPUTF16._IOwnership _out3546;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3545, out _out3546);
              r = _out3545;
              resultingOwnership = _out3546;
              readIdents = _7380_recIdents;
            }
          } else if (_source271.is_SetBuilder) {
            DAST._IType _7381___mcc_h596 = _source271.dtor_element;
            {
              RAST._IExpr _7382_recursiveGen;
              DCOMPUTF16._IOwnership _7383_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7384_recIdents;
              RAST._IExpr _out3547;
              DCOMPUTF16._IOwnership _out3548;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3549;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3547, out _out3548, out _out3549);
              _7382_recursiveGen = _out3547;
              _7383_recOwned = _out3548;
              _7384_recIdents = _out3549;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7382_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3550;
              DCOMPUTF16._IOwnership _out3551;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3550, out _out3551);
              r = _out3550;
              resultingOwnership = _out3551;
              readIdents = _7384_recIdents;
            }
          } else if (_source271.is_MapBuilder) {
            DAST._IType _7385___mcc_h598 = _source271.dtor_key;
            DAST._IType _7386___mcc_h599 = _source271.dtor_value;
            {
              RAST._IExpr _7387_recursiveGen;
              DCOMPUTF16._IOwnership _7388_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7389_recIdents;
              RAST._IExpr _out3552;
              DCOMPUTF16._IOwnership _out3553;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3554;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3552, out _out3553, out _out3554);
              _7387_recursiveGen = _out3552;
              _7388_recOwned = _out3553;
              _7389_recIdents = _out3554;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7387_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3555;
              DCOMPUTF16._IOwnership _out3556;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3555, out _out3556);
              r = _out3555;
              resultingOwnership = _out3556;
              readIdents = _7389_recIdents;
            }
          } else if (_source271.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7390___mcc_h602 = _source271.dtor_args;
            DAST._IType _7391___mcc_h603 = _source271.dtor_result;
            {
              RAST._IExpr _7392_recursiveGen;
              DCOMPUTF16._IOwnership _7393_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7394_recIdents;
              RAST._IExpr _out3557;
              DCOMPUTF16._IOwnership _out3558;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3559;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3557, out _out3558, out _out3559);
              _7392_recursiveGen = _out3557;
              _7393_recOwned = _out3558;
              _7394_recIdents = _out3559;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7392_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3560;
              DCOMPUTF16._IOwnership _out3561;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3560, out _out3561);
              r = _out3560;
              resultingOwnership = _out3561;
              readIdents = _7394_recIdents;
            }
          } else if (_source271.is_Primitive) {
            DAST._IPrimitive _7395___mcc_h606 = _source271.dtor_Primitive_a0;
            {
              RAST._IExpr _7396_recursiveGen;
              DCOMPUTF16._IOwnership _7397_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7398_recIdents;
              RAST._IExpr _out3562;
              DCOMPUTF16._IOwnership _out3563;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3564;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3562, out _out3563, out _out3564);
              _7396_recursiveGen = _out3562;
              _7397_recOwned = _out3563;
              _7398_recIdents = _out3564;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7396_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3565;
              DCOMPUTF16._IOwnership _out3566;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3565, out _out3566);
              r = _out3565;
              resultingOwnership = _out3566;
              readIdents = _7398_recIdents;
            }
          } else if (_source271.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7399___mcc_h608 = _source271.dtor_Passthrough_a0;
            {
              RAST._IExpr _7400_recursiveGen;
              DCOMPUTF16._IOwnership _7401_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7402_recIdents;
              RAST._IExpr _out3567;
              DCOMPUTF16._IOwnership _out3568;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3569;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3567, out _out3568, out _out3569);
              _7400_recursiveGen = _out3567;
              _7401_recOwned = _out3568;
              _7402_recIdents = _out3569;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7400_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3570;
              DCOMPUTF16._IOwnership _out3571;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3570, out _out3571);
              r = _out3570;
              resultingOwnership = _out3571;
              readIdents = _7402_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7403___mcc_h610 = _source271.dtor_TypeArg_a0;
            {
              RAST._IExpr _7404_recursiveGen;
              DCOMPUTF16._IOwnership _7405_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7406_recIdents;
              RAST._IExpr _out3572;
              DCOMPUTF16._IOwnership _out3573;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3574;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3572, out _out3573, out _out3574);
              _7404_recursiveGen = _out3572;
              _7405_recOwned = _out3573;
              _7406_recIdents = _out3574;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7404_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3575;
              DCOMPUTF16._IOwnership _out3576;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3575, out _out3576);
              r = _out3575;
              resultingOwnership = _out3576;
              readIdents = _7406_recIdents;
            }
          }
        } else if (_source246.is_Map) {
          DAST._IType _7407___mcc_h612 = _source246.dtor_key;
          DAST._IType _7408___mcc_h613 = _source246.dtor_value;
          DAST._IType _source274 = _6570___mcc_h1;
          if (_source274.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7409___mcc_h620 = _source274.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7410___mcc_h621 = _source274.dtor_typeArgs;
            DAST._IResolvedType _7411___mcc_h622 = _source274.dtor_resolved;
            DAST._IResolvedType _source275 = _7411___mcc_h622;
            if (_source275.is_Datatype) {
              DAST._IDatatypeType _7412___mcc_h626 = _source275.dtor_datatypeType;
              {
                RAST._IExpr _7413_recursiveGen;
                DCOMPUTF16._IOwnership _7414_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7415_recIdents;
                RAST._IExpr _out3577;
                DCOMPUTF16._IOwnership _out3578;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3579;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3577, out _out3578, out _out3579);
                _7413_recursiveGen = _out3577;
                _7414_recOwned = _out3578;
                _7415_recIdents = _out3579;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7413_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3580;
                DCOMPUTF16._IOwnership _out3581;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3580, out _out3581);
                r = _out3580;
                resultingOwnership = _out3581;
                readIdents = _7415_recIdents;
              }
            } else if (_source275.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7416___mcc_h628 = _source275.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7417___mcc_h629 = _source275.dtor_attributes;
              {
                RAST._IExpr _7418_recursiveGen;
                DCOMPUTF16._IOwnership _7419_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7420_recIdents;
                RAST._IExpr _out3582;
                DCOMPUTF16._IOwnership _out3583;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3584;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3582, out _out3583, out _out3584);
                _7418_recursiveGen = _out3582;
                _7419_recOwned = _out3583;
                _7420_recIdents = _out3584;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7418_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3585;
                DCOMPUTF16._IOwnership _out3586;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3585, out _out3586);
                r = _out3585;
                resultingOwnership = _out3586;
                readIdents = _7420_recIdents;
              }
            } else {
              DAST._IType _7421___mcc_h632 = _source275.dtor_baseType;
              DAST._INewtypeRange _7422___mcc_h633 = _source275.dtor_range;
              bool _7423___mcc_h634 = _source275.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7424___mcc_h635 = _source275.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7425_attributes = _7424___mcc_h635;
              bool _7426_erase = _7423___mcc_h634;
              DAST._INewtypeRange _7427_range = _7422___mcc_h633;
              DAST._IType _7428_b = _7421___mcc_h632;
              {
                if (object.Equals(_6564_fromTpe, _7428_b)) {
                  RAST._IExpr _7429_recursiveGen;
                  DCOMPUTF16._IOwnership _7430_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7431_recIdents;
                  RAST._IExpr _out3587;
                  DCOMPUTF16._IOwnership _out3588;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3589;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3587, out _out3588, out _out3589);
                  _7429_recursiveGen = _out3587;
                  _7430_recOwned = _out3588;
                  _7431_recIdents = _out3589;
                  Std.Wrappers._IOption<RAST._IType> _7432_potentialRhsType;
                  _7432_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7428_b, _7427_range);
                  Std.Wrappers._IOption<RAST._IType> _source276 = _7432_potentialRhsType;
                  if (_source276.is_None) {
                    if (_7426_erase) {
                      r = _7429_recursiveGen;
                    } else {
                      RAST._IType _7433_rhsType;
                      RAST._IType _out3590;
                      _out3590 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7433_rhsType = _out3590;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7433_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7429_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3591;
                    DCOMPUTF16._IOwnership _out3592;
                    DCOMPUTF16.COMP.FromOwnership(r, _7430_recOwned, expectedOwnership, out _out3591, out _out3592);
                    r = _out3591;
                    resultingOwnership = _out3592;
                  } else {
                    RAST._IType _7434___mcc_h1254 = _source276.dtor_value;
                    RAST._IType _7435_v = _7434___mcc_h1254;
                    r = RAST.Expr.create_ConversionNum(_7435_v, _7429_recursiveGen);
                    RAST._IExpr _out3593;
                    DCOMPUTF16._IOwnership _out3594;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3593, out _out3594);
                    r = _out3593;
                    resultingOwnership = _out3594;
                  }
                  readIdents = _7431_recIdents;
                } else {
                  RAST._IExpr _out3595;
                  DCOMPUTF16._IOwnership _out3596;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3597;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7428_b), _7428_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3595, out _out3596, out _out3597);
                  r = _out3595;
                  resultingOwnership = _out3596;
                  readIdents = _out3597;
                }
              }
            }
          } else if (_source274.is_Nullable) {
            DAST._IType _7436___mcc_h640 = _source274.dtor_Nullable_a0;
            {
              RAST._IExpr _7437_recursiveGen;
              DCOMPUTF16._IOwnership _7438_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7439_recIdents;
              RAST._IExpr _out3598;
              DCOMPUTF16._IOwnership _out3599;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3600;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3598, out _out3599, out _out3600);
              _7437_recursiveGen = _out3598;
              _7438_recOwned = _out3599;
              _7439_recIdents = _out3600;
              Dafny.ISequence<Dafny.Rune> _7440_s;
              _7440_s = (_7437_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7438_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7440_s = Dafny.Sequence<Dafny.Rune>.Concat(_7440_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7440_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7440_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7440_s);
              RAST._IExpr _out3601;
              DCOMPUTF16._IOwnership _out3602;
              DCOMPUTF16.COMP.FromOwnership(r, _7438_recOwned, expectedOwnership, out _out3601, out _out3602);
              r = _out3601;
              resultingOwnership = _out3602;
              readIdents = _7439_recIdents;
            }
          } else if (_source274.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7441___mcc_h642 = _source274.dtor_Tuple_a0;
            {
              RAST._IExpr _7442_recursiveGen;
              DCOMPUTF16._IOwnership _7443_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7444_recIdents;
              RAST._IExpr _out3603;
              DCOMPUTF16._IOwnership _out3604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3605;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3603, out _out3604, out _out3605);
              _7442_recursiveGen = _out3603;
              _7443_recOwned = _out3604;
              _7444_recIdents = _out3605;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7442_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3606;
              DCOMPUTF16._IOwnership _out3607;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3606, out _out3607);
              r = _out3606;
              resultingOwnership = _out3607;
              readIdents = _7444_recIdents;
            }
          } else if (_source274.is_Array) {
            DAST._IType _7445___mcc_h644 = _source274.dtor_element;
            BigInteger _7446___mcc_h645 = _source274.dtor_dims;
            {
              RAST._IExpr _7447_recursiveGen;
              DCOMPUTF16._IOwnership _7448_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7449_recIdents;
              RAST._IExpr _out3608;
              DCOMPUTF16._IOwnership _out3609;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3610;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3608, out _out3609, out _out3610);
              _7447_recursiveGen = _out3608;
              _7448_recOwned = _out3609;
              _7449_recIdents = _out3610;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7447_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3611;
              DCOMPUTF16._IOwnership _out3612;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3611, out _out3612);
              r = _out3611;
              resultingOwnership = _out3612;
              readIdents = _7449_recIdents;
            }
          } else if (_source274.is_Seq) {
            DAST._IType _7450___mcc_h648 = _source274.dtor_element;
            {
              RAST._IExpr _7451_recursiveGen;
              DCOMPUTF16._IOwnership _7452_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7453_recIdents;
              RAST._IExpr _out3613;
              DCOMPUTF16._IOwnership _out3614;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3615;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3613, out _out3614, out _out3615);
              _7451_recursiveGen = _out3613;
              _7452_recOwned = _out3614;
              _7453_recIdents = _out3615;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7451_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3616;
              DCOMPUTF16._IOwnership _out3617;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3616, out _out3617);
              r = _out3616;
              resultingOwnership = _out3617;
              readIdents = _7453_recIdents;
            }
          } else if (_source274.is_Set) {
            DAST._IType _7454___mcc_h650 = _source274.dtor_element;
            {
              RAST._IExpr _7455_recursiveGen;
              DCOMPUTF16._IOwnership _7456_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7457_recIdents;
              RAST._IExpr _out3618;
              DCOMPUTF16._IOwnership _out3619;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3620;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3618, out _out3619, out _out3620);
              _7455_recursiveGen = _out3618;
              _7456_recOwned = _out3619;
              _7457_recIdents = _out3620;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7455_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3621;
              DCOMPUTF16._IOwnership _out3622;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3621, out _out3622);
              r = _out3621;
              resultingOwnership = _out3622;
              readIdents = _7457_recIdents;
            }
          } else if (_source274.is_Multiset) {
            DAST._IType _7458___mcc_h652 = _source274.dtor_element;
            {
              RAST._IExpr _7459_recursiveGen;
              DCOMPUTF16._IOwnership _7460_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7461_recIdents;
              RAST._IExpr _out3623;
              DCOMPUTF16._IOwnership _out3624;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3625;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3623, out _out3624, out _out3625);
              _7459_recursiveGen = _out3623;
              _7460_recOwned = _out3624;
              _7461_recIdents = _out3625;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7459_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3626;
              DCOMPUTF16._IOwnership _out3627;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3626, out _out3627);
              r = _out3626;
              resultingOwnership = _out3627;
              readIdents = _7461_recIdents;
            }
          } else if (_source274.is_Map) {
            DAST._IType _7462___mcc_h654 = _source274.dtor_key;
            DAST._IType _7463___mcc_h655 = _source274.dtor_value;
            {
              RAST._IExpr _7464_recursiveGen;
              DCOMPUTF16._IOwnership _7465_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7466_recIdents;
              RAST._IExpr _out3628;
              DCOMPUTF16._IOwnership _out3629;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3630;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3628, out _out3629, out _out3630);
              _7464_recursiveGen = _out3628;
              _7465_recOwned = _out3629;
              _7466_recIdents = _out3630;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7464_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3631;
              DCOMPUTF16._IOwnership _out3632;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3631, out _out3632);
              r = _out3631;
              resultingOwnership = _out3632;
              readIdents = _7466_recIdents;
            }
          } else if (_source274.is_SetBuilder) {
            DAST._IType _7467___mcc_h658 = _source274.dtor_element;
            {
              RAST._IExpr _7468_recursiveGen;
              DCOMPUTF16._IOwnership _7469_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7470_recIdents;
              RAST._IExpr _out3633;
              DCOMPUTF16._IOwnership _out3634;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3635;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3633, out _out3634, out _out3635);
              _7468_recursiveGen = _out3633;
              _7469_recOwned = _out3634;
              _7470_recIdents = _out3635;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7468_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3636;
              DCOMPUTF16._IOwnership _out3637;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3636, out _out3637);
              r = _out3636;
              resultingOwnership = _out3637;
              readIdents = _7470_recIdents;
            }
          } else if (_source274.is_MapBuilder) {
            DAST._IType _7471___mcc_h660 = _source274.dtor_key;
            DAST._IType _7472___mcc_h661 = _source274.dtor_value;
            {
              RAST._IExpr _7473_recursiveGen;
              DCOMPUTF16._IOwnership _7474_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7475_recIdents;
              RAST._IExpr _out3638;
              DCOMPUTF16._IOwnership _out3639;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3640;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3638, out _out3639, out _out3640);
              _7473_recursiveGen = _out3638;
              _7474_recOwned = _out3639;
              _7475_recIdents = _out3640;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7473_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3641;
              DCOMPUTF16._IOwnership _out3642;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3641, out _out3642);
              r = _out3641;
              resultingOwnership = _out3642;
              readIdents = _7475_recIdents;
            }
          } else if (_source274.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7476___mcc_h664 = _source274.dtor_args;
            DAST._IType _7477___mcc_h665 = _source274.dtor_result;
            {
              RAST._IExpr _7478_recursiveGen;
              DCOMPUTF16._IOwnership _7479_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7480_recIdents;
              RAST._IExpr _out3643;
              DCOMPUTF16._IOwnership _out3644;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3645;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3643, out _out3644, out _out3645);
              _7478_recursiveGen = _out3643;
              _7479_recOwned = _out3644;
              _7480_recIdents = _out3645;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7478_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3646;
              DCOMPUTF16._IOwnership _out3647;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3646, out _out3647);
              r = _out3646;
              resultingOwnership = _out3647;
              readIdents = _7480_recIdents;
            }
          } else if (_source274.is_Primitive) {
            DAST._IPrimitive _7481___mcc_h668 = _source274.dtor_Primitive_a0;
            {
              RAST._IExpr _7482_recursiveGen;
              DCOMPUTF16._IOwnership _7483_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7484_recIdents;
              RAST._IExpr _out3648;
              DCOMPUTF16._IOwnership _out3649;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3650;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3648, out _out3649, out _out3650);
              _7482_recursiveGen = _out3648;
              _7483_recOwned = _out3649;
              _7484_recIdents = _out3650;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7482_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3651;
              DCOMPUTF16._IOwnership _out3652;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3651, out _out3652);
              r = _out3651;
              resultingOwnership = _out3652;
              readIdents = _7484_recIdents;
            }
          } else if (_source274.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7485___mcc_h670 = _source274.dtor_Passthrough_a0;
            {
              RAST._IExpr _7486_recursiveGen;
              DCOMPUTF16._IOwnership _7487_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7488_recIdents;
              RAST._IExpr _out3653;
              DCOMPUTF16._IOwnership _out3654;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3655;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3653, out _out3654, out _out3655);
              _7486_recursiveGen = _out3653;
              _7487_recOwned = _out3654;
              _7488_recIdents = _out3655;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7486_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3656;
              DCOMPUTF16._IOwnership _out3657;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3656, out _out3657);
              r = _out3656;
              resultingOwnership = _out3657;
              readIdents = _7488_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7489___mcc_h672 = _source274.dtor_TypeArg_a0;
            {
              RAST._IExpr _7490_recursiveGen;
              DCOMPUTF16._IOwnership _7491_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7492_recIdents;
              RAST._IExpr _out3658;
              DCOMPUTF16._IOwnership _out3659;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3660;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3658, out _out3659, out _out3660);
              _7490_recursiveGen = _out3658;
              _7491_recOwned = _out3659;
              _7492_recIdents = _out3660;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7490_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3661;
              DCOMPUTF16._IOwnership _out3662;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3661, out _out3662);
              r = _out3661;
              resultingOwnership = _out3662;
              readIdents = _7492_recIdents;
            }
          }
        } else if (_source246.is_SetBuilder) {
          DAST._IType _7493___mcc_h674 = _source246.dtor_element;
          DAST._IType _source277 = _6570___mcc_h1;
          if (_source277.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7494___mcc_h678 = _source277.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7495___mcc_h679 = _source277.dtor_typeArgs;
            DAST._IResolvedType _7496___mcc_h680 = _source277.dtor_resolved;
            DAST._IResolvedType _source278 = _7496___mcc_h680;
            if (_source278.is_Datatype) {
              DAST._IDatatypeType _7497___mcc_h684 = _source278.dtor_datatypeType;
              {
                RAST._IExpr _7498_recursiveGen;
                DCOMPUTF16._IOwnership _7499_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7500_recIdents;
                RAST._IExpr _out3663;
                DCOMPUTF16._IOwnership _out3664;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3665;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3663, out _out3664, out _out3665);
                _7498_recursiveGen = _out3663;
                _7499_recOwned = _out3664;
                _7500_recIdents = _out3665;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7498_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3666;
                DCOMPUTF16._IOwnership _out3667;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3666, out _out3667);
                r = _out3666;
                resultingOwnership = _out3667;
                readIdents = _7500_recIdents;
              }
            } else if (_source278.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7501___mcc_h686 = _source278.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7502___mcc_h687 = _source278.dtor_attributes;
              {
                RAST._IExpr _7503_recursiveGen;
                DCOMPUTF16._IOwnership _7504_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7505_recIdents;
                RAST._IExpr _out3668;
                DCOMPUTF16._IOwnership _out3669;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3670;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3668, out _out3669, out _out3670);
                _7503_recursiveGen = _out3668;
                _7504_recOwned = _out3669;
                _7505_recIdents = _out3670;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7503_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3671;
                DCOMPUTF16._IOwnership _out3672;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3671, out _out3672);
                r = _out3671;
                resultingOwnership = _out3672;
                readIdents = _7505_recIdents;
              }
            } else {
              DAST._IType _7506___mcc_h690 = _source278.dtor_baseType;
              DAST._INewtypeRange _7507___mcc_h691 = _source278.dtor_range;
              bool _7508___mcc_h692 = _source278.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7509___mcc_h693 = _source278.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7510_attributes = _7509___mcc_h693;
              bool _7511_erase = _7508___mcc_h692;
              DAST._INewtypeRange _7512_range = _7507___mcc_h691;
              DAST._IType _7513_b = _7506___mcc_h690;
              {
                if (object.Equals(_6564_fromTpe, _7513_b)) {
                  RAST._IExpr _7514_recursiveGen;
                  DCOMPUTF16._IOwnership _7515_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7516_recIdents;
                  RAST._IExpr _out3673;
                  DCOMPUTF16._IOwnership _out3674;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3675;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3673, out _out3674, out _out3675);
                  _7514_recursiveGen = _out3673;
                  _7515_recOwned = _out3674;
                  _7516_recIdents = _out3675;
                  Std.Wrappers._IOption<RAST._IType> _7517_potentialRhsType;
                  _7517_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7513_b, _7512_range);
                  Std.Wrappers._IOption<RAST._IType> _source279 = _7517_potentialRhsType;
                  if (_source279.is_None) {
                    if (_7511_erase) {
                      r = _7514_recursiveGen;
                    } else {
                      RAST._IType _7518_rhsType;
                      RAST._IType _out3676;
                      _out3676 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7518_rhsType = _out3676;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7518_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7514_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3677;
                    DCOMPUTF16._IOwnership _out3678;
                    DCOMPUTF16.COMP.FromOwnership(r, _7515_recOwned, expectedOwnership, out _out3677, out _out3678);
                    r = _out3677;
                    resultingOwnership = _out3678;
                  } else {
                    RAST._IType _7519___mcc_h1255 = _source279.dtor_value;
                    RAST._IType _7520_v = _7519___mcc_h1255;
                    r = RAST.Expr.create_ConversionNum(_7520_v, _7514_recursiveGen);
                    RAST._IExpr _out3679;
                    DCOMPUTF16._IOwnership _out3680;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3679, out _out3680);
                    r = _out3679;
                    resultingOwnership = _out3680;
                  }
                  readIdents = _7516_recIdents;
                } else {
                  RAST._IExpr _out3681;
                  DCOMPUTF16._IOwnership _out3682;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3683;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7513_b), _7513_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3681, out _out3682, out _out3683);
                  r = _out3681;
                  resultingOwnership = _out3682;
                  readIdents = _out3683;
                }
              }
            }
          } else if (_source277.is_Nullable) {
            DAST._IType _7521___mcc_h698 = _source277.dtor_Nullable_a0;
            {
              RAST._IExpr _7522_recursiveGen;
              DCOMPUTF16._IOwnership _7523_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7524_recIdents;
              RAST._IExpr _out3684;
              DCOMPUTF16._IOwnership _out3685;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3686;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3684, out _out3685, out _out3686);
              _7522_recursiveGen = _out3684;
              _7523_recOwned = _out3685;
              _7524_recIdents = _out3686;
              Dafny.ISequence<Dafny.Rune> _7525_s;
              _7525_s = (_7522_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7523_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7525_s = Dafny.Sequence<Dafny.Rune>.Concat(_7525_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7525_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7525_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7525_s);
              RAST._IExpr _out3687;
              DCOMPUTF16._IOwnership _out3688;
              DCOMPUTF16.COMP.FromOwnership(r, _7523_recOwned, expectedOwnership, out _out3687, out _out3688);
              r = _out3687;
              resultingOwnership = _out3688;
              readIdents = _7524_recIdents;
            }
          } else if (_source277.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7526___mcc_h700 = _source277.dtor_Tuple_a0;
            {
              RAST._IExpr _7527_recursiveGen;
              DCOMPUTF16._IOwnership _7528_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7529_recIdents;
              RAST._IExpr _out3689;
              DCOMPUTF16._IOwnership _out3690;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3691;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3689, out _out3690, out _out3691);
              _7527_recursiveGen = _out3689;
              _7528_recOwned = _out3690;
              _7529_recIdents = _out3691;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7527_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3692;
              DCOMPUTF16._IOwnership _out3693;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3692, out _out3693);
              r = _out3692;
              resultingOwnership = _out3693;
              readIdents = _7529_recIdents;
            }
          } else if (_source277.is_Array) {
            DAST._IType _7530___mcc_h702 = _source277.dtor_element;
            BigInteger _7531___mcc_h703 = _source277.dtor_dims;
            {
              RAST._IExpr _7532_recursiveGen;
              DCOMPUTF16._IOwnership _7533_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7534_recIdents;
              RAST._IExpr _out3694;
              DCOMPUTF16._IOwnership _out3695;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3696;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3694, out _out3695, out _out3696);
              _7532_recursiveGen = _out3694;
              _7533_recOwned = _out3695;
              _7534_recIdents = _out3696;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7532_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3697;
              DCOMPUTF16._IOwnership _out3698;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3697, out _out3698);
              r = _out3697;
              resultingOwnership = _out3698;
              readIdents = _7534_recIdents;
            }
          } else if (_source277.is_Seq) {
            DAST._IType _7535___mcc_h706 = _source277.dtor_element;
            {
              RAST._IExpr _7536_recursiveGen;
              DCOMPUTF16._IOwnership _7537_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7538_recIdents;
              RAST._IExpr _out3699;
              DCOMPUTF16._IOwnership _out3700;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3701;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3699, out _out3700, out _out3701);
              _7536_recursiveGen = _out3699;
              _7537_recOwned = _out3700;
              _7538_recIdents = _out3701;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7536_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3702;
              DCOMPUTF16._IOwnership _out3703;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3702, out _out3703);
              r = _out3702;
              resultingOwnership = _out3703;
              readIdents = _7538_recIdents;
            }
          } else if (_source277.is_Set) {
            DAST._IType _7539___mcc_h708 = _source277.dtor_element;
            {
              RAST._IExpr _7540_recursiveGen;
              DCOMPUTF16._IOwnership _7541_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7542_recIdents;
              RAST._IExpr _out3704;
              DCOMPUTF16._IOwnership _out3705;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3706;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3704, out _out3705, out _out3706);
              _7540_recursiveGen = _out3704;
              _7541_recOwned = _out3705;
              _7542_recIdents = _out3706;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7540_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3707;
              DCOMPUTF16._IOwnership _out3708;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3707, out _out3708);
              r = _out3707;
              resultingOwnership = _out3708;
              readIdents = _7542_recIdents;
            }
          } else if (_source277.is_Multiset) {
            DAST._IType _7543___mcc_h710 = _source277.dtor_element;
            {
              RAST._IExpr _7544_recursiveGen;
              DCOMPUTF16._IOwnership _7545_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7546_recIdents;
              RAST._IExpr _out3709;
              DCOMPUTF16._IOwnership _out3710;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3711;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3709, out _out3710, out _out3711);
              _7544_recursiveGen = _out3709;
              _7545_recOwned = _out3710;
              _7546_recIdents = _out3711;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7544_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3712;
              DCOMPUTF16._IOwnership _out3713;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3712, out _out3713);
              r = _out3712;
              resultingOwnership = _out3713;
              readIdents = _7546_recIdents;
            }
          } else if (_source277.is_Map) {
            DAST._IType _7547___mcc_h712 = _source277.dtor_key;
            DAST._IType _7548___mcc_h713 = _source277.dtor_value;
            {
              RAST._IExpr _7549_recursiveGen;
              DCOMPUTF16._IOwnership _7550_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7551_recIdents;
              RAST._IExpr _out3714;
              DCOMPUTF16._IOwnership _out3715;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3716;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3714, out _out3715, out _out3716);
              _7549_recursiveGen = _out3714;
              _7550_recOwned = _out3715;
              _7551_recIdents = _out3716;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7549_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3717;
              DCOMPUTF16._IOwnership _out3718;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3717, out _out3718);
              r = _out3717;
              resultingOwnership = _out3718;
              readIdents = _7551_recIdents;
            }
          } else if (_source277.is_SetBuilder) {
            DAST._IType _7552___mcc_h716 = _source277.dtor_element;
            {
              RAST._IExpr _7553_recursiveGen;
              DCOMPUTF16._IOwnership _7554_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7555_recIdents;
              RAST._IExpr _out3719;
              DCOMPUTF16._IOwnership _out3720;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3721;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3719, out _out3720, out _out3721);
              _7553_recursiveGen = _out3719;
              _7554_recOwned = _out3720;
              _7555_recIdents = _out3721;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7553_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3722;
              DCOMPUTF16._IOwnership _out3723;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3722, out _out3723);
              r = _out3722;
              resultingOwnership = _out3723;
              readIdents = _7555_recIdents;
            }
          } else if (_source277.is_MapBuilder) {
            DAST._IType _7556___mcc_h718 = _source277.dtor_key;
            DAST._IType _7557___mcc_h719 = _source277.dtor_value;
            {
              RAST._IExpr _7558_recursiveGen;
              DCOMPUTF16._IOwnership _7559_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7560_recIdents;
              RAST._IExpr _out3724;
              DCOMPUTF16._IOwnership _out3725;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3726;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3724, out _out3725, out _out3726);
              _7558_recursiveGen = _out3724;
              _7559_recOwned = _out3725;
              _7560_recIdents = _out3726;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7558_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3727;
              DCOMPUTF16._IOwnership _out3728;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3727, out _out3728);
              r = _out3727;
              resultingOwnership = _out3728;
              readIdents = _7560_recIdents;
            }
          } else if (_source277.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7561___mcc_h722 = _source277.dtor_args;
            DAST._IType _7562___mcc_h723 = _source277.dtor_result;
            {
              RAST._IExpr _7563_recursiveGen;
              DCOMPUTF16._IOwnership _7564_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7565_recIdents;
              RAST._IExpr _out3729;
              DCOMPUTF16._IOwnership _out3730;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3731;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3729, out _out3730, out _out3731);
              _7563_recursiveGen = _out3729;
              _7564_recOwned = _out3730;
              _7565_recIdents = _out3731;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7563_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3732;
              DCOMPUTF16._IOwnership _out3733;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3732, out _out3733);
              r = _out3732;
              resultingOwnership = _out3733;
              readIdents = _7565_recIdents;
            }
          } else if (_source277.is_Primitive) {
            DAST._IPrimitive _7566___mcc_h726 = _source277.dtor_Primitive_a0;
            {
              RAST._IExpr _7567_recursiveGen;
              DCOMPUTF16._IOwnership _7568_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7569_recIdents;
              RAST._IExpr _out3734;
              DCOMPUTF16._IOwnership _out3735;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3736;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3734, out _out3735, out _out3736);
              _7567_recursiveGen = _out3734;
              _7568_recOwned = _out3735;
              _7569_recIdents = _out3736;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7567_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3737;
              DCOMPUTF16._IOwnership _out3738;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3737, out _out3738);
              r = _out3737;
              resultingOwnership = _out3738;
              readIdents = _7569_recIdents;
            }
          } else if (_source277.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7570___mcc_h728 = _source277.dtor_Passthrough_a0;
            {
              RAST._IExpr _7571_recursiveGen;
              DCOMPUTF16._IOwnership _7572_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7573_recIdents;
              RAST._IExpr _out3739;
              DCOMPUTF16._IOwnership _out3740;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3741;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3739, out _out3740, out _out3741);
              _7571_recursiveGen = _out3739;
              _7572_recOwned = _out3740;
              _7573_recIdents = _out3741;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7571_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3742;
              DCOMPUTF16._IOwnership _out3743;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3742, out _out3743);
              r = _out3742;
              resultingOwnership = _out3743;
              readIdents = _7573_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7574___mcc_h730 = _source277.dtor_TypeArg_a0;
            {
              RAST._IExpr _7575_recursiveGen;
              DCOMPUTF16._IOwnership _7576_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7577_recIdents;
              RAST._IExpr _out3744;
              DCOMPUTF16._IOwnership _out3745;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3746;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3744, out _out3745, out _out3746);
              _7575_recursiveGen = _out3744;
              _7576_recOwned = _out3745;
              _7577_recIdents = _out3746;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7575_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3747;
              DCOMPUTF16._IOwnership _out3748;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3747, out _out3748);
              r = _out3747;
              resultingOwnership = _out3748;
              readIdents = _7577_recIdents;
            }
          }
        } else if (_source246.is_MapBuilder) {
          DAST._IType _7578___mcc_h732 = _source246.dtor_key;
          DAST._IType _7579___mcc_h733 = _source246.dtor_value;
          DAST._IType _source280 = _6570___mcc_h1;
          if (_source280.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7580___mcc_h740 = _source280.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7581___mcc_h741 = _source280.dtor_typeArgs;
            DAST._IResolvedType _7582___mcc_h742 = _source280.dtor_resolved;
            DAST._IResolvedType _source281 = _7582___mcc_h742;
            if (_source281.is_Datatype) {
              DAST._IDatatypeType _7583___mcc_h746 = _source281.dtor_datatypeType;
              {
                RAST._IExpr _7584_recursiveGen;
                DCOMPUTF16._IOwnership _7585_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7586_recIdents;
                RAST._IExpr _out3749;
                DCOMPUTF16._IOwnership _out3750;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3751;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3749, out _out3750, out _out3751);
                _7584_recursiveGen = _out3749;
                _7585_recOwned = _out3750;
                _7586_recIdents = _out3751;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7584_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3752;
                DCOMPUTF16._IOwnership _out3753;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3752, out _out3753);
                r = _out3752;
                resultingOwnership = _out3753;
                readIdents = _7586_recIdents;
              }
            } else if (_source281.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7587___mcc_h748 = _source281.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7588___mcc_h749 = _source281.dtor_attributes;
              {
                RAST._IExpr _7589_recursiveGen;
                DCOMPUTF16._IOwnership _7590_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7591_recIdents;
                RAST._IExpr _out3754;
                DCOMPUTF16._IOwnership _out3755;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3756;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3754, out _out3755, out _out3756);
                _7589_recursiveGen = _out3754;
                _7590_recOwned = _out3755;
                _7591_recIdents = _out3756;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7589_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3757;
                DCOMPUTF16._IOwnership _out3758;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3757, out _out3758);
                r = _out3757;
                resultingOwnership = _out3758;
                readIdents = _7591_recIdents;
              }
            } else {
              DAST._IType _7592___mcc_h752 = _source281.dtor_baseType;
              DAST._INewtypeRange _7593___mcc_h753 = _source281.dtor_range;
              bool _7594___mcc_h754 = _source281.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7595___mcc_h755 = _source281.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7596_attributes = _7595___mcc_h755;
              bool _7597_erase = _7594___mcc_h754;
              DAST._INewtypeRange _7598_range = _7593___mcc_h753;
              DAST._IType _7599_b = _7592___mcc_h752;
              {
                if (object.Equals(_6564_fromTpe, _7599_b)) {
                  RAST._IExpr _7600_recursiveGen;
                  DCOMPUTF16._IOwnership _7601_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7602_recIdents;
                  RAST._IExpr _out3759;
                  DCOMPUTF16._IOwnership _out3760;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3761;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3759, out _out3760, out _out3761);
                  _7600_recursiveGen = _out3759;
                  _7601_recOwned = _out3760;
                  _7602_recIdents = _out3761;
                  Std.Wrappers._IOption<RAST._IType> _7603_potentialRhsType;
                  _7603_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7599_b, _7598_range);
                  Std.Wrappers._IOption<RAST._IType> _source282 = _7603_potentialRhsType;
                  if (_source282.is_None) {
                    if (_7597_erase) {
                      r = _7600_recursiveGen;
                    } else {
                      RAST._IType _7604_rhsType;
                      RAST._IType _out3762;
                      _out3762 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7604_rhsType = _out3762;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7604_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7600_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3763;
                    DCOMPUTF16._IOwnership _out3764;
                    DCOMPUTF16.COMP.FromOwnership(r, _7601_recOwned, expectedOwnership, out _out3763, out _out3764);
                    r = _out3763;
                    resultingOwnership = _out3764;
                  } else {
                    RAST._IType _7605___mcc_h1256 = _source282.dtor_value;
                    RAST._IType _7606_v = _7605___mcc_h1256;
                    r = RAST.Expr.create_ConversionNum(_7606_v, _7600_recursiveGen);
                    RAST._IExpr _out3765;
                    DCOMPUTF16._IOwnership _out3766;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3765, out _out3766);
                    r = _out3765;
                    resultingOwnership = _out3766;
                  }
                  readIdents = _7602_recIdents;
                } else {
                  RAST._IExpr _out3767;
                  DCOMPUTF16._IOwnership _out3768;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3769;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7599_b), _7599_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3767, out _out3768, out _out3769);
                  r = _out3767;
                  resultingOwnership = _out3768;
                  readIdents = _out3769;
                }
              }
            }
          } else if (_source280.is_Nullable) {
            DAST._IType _7607___mcc_h760 = _source280.dtor_Nullable_a0;
            {
              RAST._IExpr _7608_recursiveGen;
              DCOMPUTF16._IOwnership _7609_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7610_recIdents;
              RAST._IExpr _out3770;
              DCOMPUTF16._IOwnership _out3771;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3772;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3770, out _out3771, out _out3772);
              _7608_recursiveGen = _out3770;
              _7609_recOwned = _out3771;
              _7610_recIdents = _out3772;
              Dafny.ISequence<Dafny.Rune> _7611_s;
              _7611_s = (_7608_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7609_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7611_s = Dafny.Sequence<Dafny.Rune>.Concat(_7611_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7611_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7611_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7611_s);
              RAST._IExpr _out3773;
              DCOMPUTF16._IOwnership _out3774;
              DCOMPUTF16.COMP.FromOwnership(r, _7609_recOwned, expectedOwnership, out _out3773, out _out3774);
              r = _out3773;
              resultingOwnership = _out3774;
              readIdents = _7610_recIdents;
            }
          } else if (_source280.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7612___mcc_h762 = _source280.dtor_Tuple_a0;
            {
              RAST._IExpr _7613_recursiveGen;
              DCOMPUTF16._IOwnership _7614_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7615_recIdents;
              RAST._IExpr _out3775;
              DCOMPUTF16._IOwnership _out3776;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3777;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3775, out _out3776, out _out3777);
              _7613_recursiveGen = _out3775;
              _7614_recOwned = _out3776;
              _7615_recIdents = _out3777;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7613_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3778;
              DCOMPUTF16._IOwnership _out3779;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3778, out _out3779);
              r = _out3778;
              resultingOwnership = _out3779;
              readIdents = _7615_recIdents;
            }
          } else if (_source280.is_Array) {
            DAST._IType _7616___mcc_h764 = _source280.dtor_element;
            BigInteger _7617___mcc_h765 = _source280.dtor_dims;
            {
              RAST._IExpr _7618_recursiveGen;
              DCOMPUTF16._IOwnership _7619_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7620_recIdents;
              RAST._IExpr _out3780;
              DCOMPUTF16._IOwnership _out3781;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3782;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3780, out _out3781, out _out3782);
              _7618_recursiveGen = _out3780;
              _7619_recOwned = _out3781;
              _7620_recIdents = _out3782;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7618_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3783;
              DCOMPUTF16._IOwnership _out3784;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3783, out _out3784);
              r = _out3783;
              resultingOwnership = _out3784;
              readIdents = _7620_recIdents;
            }
          } else if (_source280.is_Seq) {
            DAST._IType _7621___mcc_h768 = _source280.dtor_element;
            {
              RAST._IExpr _7622_recursiveGen;
              DCOMPUTF16._IOwnership _7623_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7624_recIdents;
              RAST._IExpr _out3785;
              DCOMPUTF16._IOwnership _out3786;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3787;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3785, out _out3786, out _out3787);
              _7622_recursiveGen = _out3785;
              _7623_recOwned = _out3786;
              _7624_recIdents = _out3787;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7622_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3788;
              DCOMPUTF16._IOwnership _out3789;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3788, out _out3789);
              r = _out3788;
              resultingOwnership = _out3789;
              readIdents = _7624_recIdents;
            }
          } else if (_source280.is_Set) {
            DAST._IType _7625___mcc_h770 = _source280.dtor_element;
            {
              RAST._IExpr _7626_recursiveGen;
              DCOMPUTF16._IOwnership _7627_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7628_recIdents;
              RAST._IExpr _out3790;
              DCOMPUTF16._IOwnership _out3791;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3792;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3790, out _out3791, out _out3792);
              _7626_recursiveGen = _out3790;
              _7627_recOwned = _out3791;
              _7628_recIdents = _out3792;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7626_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3793;
              DCOMPUTF16._IOwnership _out3794;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3793, out _out3794);
              r = _out3793;
              resultingOwnership = _out3794;
              readIdents = _7628_recIdents;
            }
          } else if (_source280.is_Multiset) {
            DAST._IType _7629___mcc_h772 = _source280.dtor_element;
            {
              RAST._IExpr _7630_recursiveGen;
              DCOMPUTF16._IOwnership _7631_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7632_recIdents;
              RAST._IExpr _out3795;
              DCOMPUTF16._IOwnership _out3796;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3797;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3795, out _out3796, out _out3797);
              _7630_recursiveGen = _out3795;
              _7631_recOwned = _out3796;
              _7632_recIdents = _out3797;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7630_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3798;
              DCOMPUTF16._IOwnership _out3799;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3798, out _out3799);
              r = _out3798;
              resultingOwnership = _out3799;
              readIdents = _7632_recIdents;
            }
          } else if (_source280.is_Map) {
            DAST._IType _7633___mcc_h774 = _source280.dtor_key;
            DAST._IType _7634___mcc_h775 = _source280.dtor_value;
            {
              RAST._IExpr _7635_recursiveGen;
              DCOMPUTF16._IOwnership _7636_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7637_recIdents;
              RAST._IExpr _out3800;
              DCOMPUTF16._IOwnership _out3801;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3802;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3800, out _out3801, out _out3802);
              _7635_recursiveGen = _out3800;
              _7636_recOwned = _out3801;
              _7637_recIdents = _out3802;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7635_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3803;
              DCOMPUTF16._IOwnership _out3804;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3803, out _out3804);
              r = _out3803;
              resultingOwnership = _out3804;
              readIdents = _7637_recIdents;
            }
          } else if (_source280.is_SetBuilder) {
            DAST._IType _7638___mcc_h778 = _source280.dtor_element;
            {
              RAST._IExpr _7639_recursiveGen;
              DCOMPUTF16._IOwnership _7640_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7641_recIdents;
              RAST._IExpr _out3805;
              DCOMPUTF16._IOwnership _out3806;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3807;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3805, out _out3806, out _out3807);
              _7639_recursiveGen = _out3805;
              _7640_recOwned = _out3806;
              _7641_recIdents = _out3807;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7639_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3808;
              DCOMPUTF16._IOwnership _out3809;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3808, out _out3809);
              r = _out3808;
              resultingOwnership = _out3809;
              readIdents = _7641_recIdents;
            }
          } else if (_source280.is_MapBuilder) {
            DAST._IType _7642___mcc_h780 = _source280.dtor_key;
            DAST._IType _7643___mcc_h781 = _source280.dtor_value;
            {
              RAST._IExpr _7644_recursiveGen;
              DCOMPUTF16._IOwnership _7645_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7646_recIdents;
              RAST._IExpr _out3810;
              DCOMPUTF16._IOwnership _out3811;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3812;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3810, out _out3811, out _out3812);
              _7644_recursiveGen = _out3810;
              _7645_recOwned = _out3811;
              _7646_recIdents = _out3812;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7644_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3813;
              DCOMPUTF16._IOwnership _out3814;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3813, out _out3814);
              r = _out3813;
              resultingOwnership = _out3814;
              readIdents = _7646_recIdents;
            }
          } else if (_source280.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7647___mcc_h784 = _source280.dtor_args;
            DAST._IType _7648___mcc_h785 = _source280.dtor_result;
            {
              RAST._IExpr _7649_recursiveGen;
              DCOMPUTF16._IOwnership _7650_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7651_recIdents;
              RAST._IExpr _out3815;
              DCOMPUTF16._IOwnership _out3816;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3817;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3815, out _out3816, out _out3817);
              _7649_recursiveGen = _out3815;
              _7650_recOwned = _out3816;
              _7651_recIdents = _out3817;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7649_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3818;
              DCOMPUTF16._IOwnership _out3819;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3818, out _out3819);
              r = _out3818;
              resultingOwnership = _out3819;
              readIdents = _7651_recIdents;
            }
          } else if (_source280.is_Primitive) {
            DAST._IPrimitive _7652___mcc_h788 = _source280.dtor_Primitive_a0;
            {
              RAST._IExpr _7653_recursiveGen;
              DCOMPUTF16._IOwnership _7654_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7655_recIdents;
              RAST._IExpr _out3820;
              DCOMPUTF16._IOwnership _out3821;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3822;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3820, out _out3821, out _out3822);
              _7653_recursiveGen = _out3820;
              _7654_recOwned = _out3821;
              _7655_recIdents = _out3822;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7653_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3823;
              DCOMPUTF16._IOwnership _out3824;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3823, out _out3824);
              r = _out3823;
              resultingOwnership = _out3824;
              readIdents = _7655_recIdents;
            }
          } else if (_source280.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7656___mcc_h790 = _source280.dtor_Passthrough_a0;
            {
              RAST._IExpr _7657_recursiveGen;
              DCOMPUTF16._IOwnership _7658_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7659_recIdents;
              RAST._IExpr _out3825;
              DCOMPUTF16._IOwnership _out3826;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3827;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3825, out _out3826, out _out3827);
              _7657_recursiveGen = _out3825;
              _7658_recOwned = _out3826;
              _7659_recIdents = _out3827;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7657_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3828;
              DCOMPUTF16._IOwnership _out3829;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3828, out _out3829);
              r = _out3828;
              resultingOwnership = _out3829;
              readIdents = _7659_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7660___mcc_h792 = _source280.dtor_TypeArg_a0;
            {
              RAST._IExpr _7661_recursiveGen;
              DCOMPUTF16._IOwnership _7662_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7663_recIdents;
              RAST._IExpr _out3830;
              DCOMPUTF16._IOwnership _out3831;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3832;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3830, out _out3831, out _out3832);
              _7661_recursiveGen = _out3830;
              _7662_recOwned = _out3831;
              _7663_recIdents = _out3832;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7661_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3833;
              DCOMPUTF16._IOwnership _out3834;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3833, out _out3834);
              r = _out3833;
              resultingOwnership = _out3834;
              readIdents = _7663_recIdents;
            }
          }
        } else if (_source246.is_Arrow) {
          Dafny.ISequence<DAST._IType> _7664___mcc_h794 = _source246.dtor_args;
          DAST._IType _7665___mcc_h795 = _source246.dtor_result;
          DAST._IType _source283 = _6570___mcc_h1;
          if (_source283.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7666___mcc_h802 = _source283.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _7667___mcc_h803 = _source283.dtor_typeArgs;
            DAST._IResolvedType _7668___mcc_h804 = _source283.dtor_resolved;
            DAST._IResolvedType _source284 = _7668___mcc_h804;
            if (_source284.is_Datatype) {
              DAST._IDatatypeType _7669___mcc_h808 = _source284.dtor_datatypeType;
              {
                RAST._IExpr _7670_recursiveGen;
                DCOMPUTF16._IOwnership _7671_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7672_recIdents;
                RAST._IExpr _out3835;
                DCOMPUTF16._IOwnership _out3836;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3837;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3835, out _out3836, out _out3837);
                _7670_recursiveGen = _out3835;
                _7671_recOwned = _out3836;
                _7672_recIdents = _out3837;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7670_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3838;
                DCOMPUTF16._IOwnership _out3839;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3838, out _out3839);
                r = _out3838;
                resultingOwnership = _out3839;
                readIdents = _7672_recIdents;
              }
            } else if (_source284.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7673___mcc_h810 = _source284.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _7674___mcc_h811 = _source284.dtor_attributes;
              {
                RAST._IExpr _7675_recursiveGen;
                DCOMPUTF16._IOwnership _7676_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7677_recIdents;
                RAST._IExpr _out3840;
                DCOMPUTF16._IOwnership _out3841;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3842;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3840, out _out3841, out _out3842);
                _7675_recursiveGen = _out3840;
                _7676_recOwned = _out3841;
                _7677_recIdents = _out3842;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7675_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3843;
                DCOMPUTF16._IOwnership _out3844;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3843, out _out3844);
                r = _out3843;
                resultingOwnership = _out3844;
                readIdents = _7677_recIdents;
              }
            } else {
              DAST._IType _7678___mcc_h814 = _source284.dtor_baseType;
              DAST._INewtypeRange _7679___mcc_h815 = _source284.dtor_range;
              bool _7680___mcc_h816 = _source284.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _7681___mcc_h817 = _source284.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _7682_attributes = _7681___mcc_h817;
              bool _7683_erase = _7680___mcc_h816;
              DAST._INewtypeRange _7684_range = _7679___mcc_h815;
              DAST._IType _7685_b = _7678___mcc_h814;
              {
                if (object.Equals(_6564_fromTpe, _7685_b)) {
                  RAST._IExpr _7686_recursiveGen;
                  DCOMPUTF16._IOwnership _7687_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7688_recIdents;
                  RAST._IExpr _out3845;
                  DCOMPUTF16._IOwnership _out3846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3847;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3845, out _out3846, out _out3847);
                  _7686_recursiveGen = _out3845;
                  _7687_recOwned = _out3846;
                  _7688_recIdents = _out3847;
                  Std.Wrappers._IOption<RAST._IType> _7689_potentialRhsType;
                  _7689_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7685_b, _7684_range);
                  Std.Wrappers._IOption<RAST._IType> _source285 = _7689_potentialRhsType;
                  if (_source285.is_None) {
                    if (_7683_erase) {
                      r = _7686_recursiveGen;
                    } else {
                      RAST._IType _7690_rhsType;
                      RAST._IType _out3848;
                      _out3848 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _7690_rhsType = _out3848;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7690_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7686_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out3849;
                    DCOMPUTF16._IOwnership _out3850;
                    DCOMPUTF16.COMP.FromOwnership(r, _7687_recOwned, expectedOwnership, out _out3849, out _out3850);
                    r = _out3849;
                    resultingOwnership = _out3850;
                  } else {
                    RAST._IType _7691___mcc_h1257 = _source285.dtor_value;
                    RAST._IType _7692_v = _7691___mcc_h1257;
                    r = RAST.Expr.create_ConversionNum(_7692_v, _7686_recursiveGen);
                    RAST._IExpr _out3851;
                    DCOMPUTF16._IOwnership _out3852;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3851, out _out3852);
                    r = _out3851;
                    resultingOwnership = _out3852;
                  }
                  readIdents = _7688_recIdents;
                } else {
                  RAST._IExpr _out3853;
                  DCOMPUTF16._IOwnership _out3854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3855;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7685_b), _7685_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3853, out _out3854, out _out3855);
                  r = _out3853;
                  resultingOwnership = _out3854;
                  readIdents = _out3855;
                }
              }
            }
          } else if (_source283.is_Nullable) {
            DAST._IType _7693___mcc_h822 = _source283.dtor_Nullable_a0;
            {
              RAST._IExpr _7694_recursiveGen;
              DCOMPUTF16._IOwnership _7695_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7696_recIdents;
              RAST._IExpr _out3856;
              DCOMPUTF16._IOwnership _out3857;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3858;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3856, out _out3857, out _out3858);
              _7694_recursiveGen = _out3856;
              _7695_recOwned = _out3857;
              _7696_recIdents = _out3858;
              Dafny.ISequence<Dafny.Rune> _7697_s;
              _7697_s = (_7694_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_7695_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _7697_s = Dafny.Sequence<Dafny.Rune>.Concat(_7697_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _7697_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7697_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_7697_s);
              RAST._IExpr _out3859;
              DCOMPUTF16._IOwnership _out3860;
              DCOMPUTF16.COMP.FromOwnership(r, _7695_recOwned, expectedOwnership, out _out3859, out _out3860);
              r = _out3859;
              resultingOwnership = _out3860;
              readIdents = _7696_recIdents;
            }
          } else if (_source283.is_Tuple) {
            Dafny.ISequence<DAST._IType> _7698___mcc_h824 = _source283.dtor_Tuple_a0;
            {
              RAST._IExpr _7699_recursiveGen;
              DCOMPUTF16._IOwnership _7700_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7701_recIdents;
              RAST._IExpr _out3861;
              DCOMPUTF16._IOwnership _out3862;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3863;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3861, out _out3862, out _out3863);
              _7699_recursiveGen = _out3861;
              _7700_recOwned = _out3862;
              _7701_recIdents = _out3863;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7699_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3864;
              DCOMPUTF16._IOwnership _out3865;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3864, out _out3865);
              r = _out3864;
              resultingOwnership = _out3865;
              readIdents = _7701_recIdents;
            }
          } else if (_source283.is_Array) {
            DAST._IType _7702___mcc_h826 = _source283.dtor_element;
            BigInteger _7703___mcc_h827 = _source283.dtor_dims;
            {
              RAST._IExpr _7704_recursiveGen;
              DCOMPUTF16._IOwnership _7705_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7706_recIdents;
              RAST._IExpr _out3866;
              DCOMPUTF16._IOwnership _out3867;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3868;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3866, out _out3867, out _out3868);
              _7704_recursiveGen = _out3866;
              _7705_recOwned = _out3867;
              _7706_recIdents = _out3868;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7704_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3869;
              DCOMPUTF16._IOwnership _out3870;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3869, out _out3870);
              r = _out3869;
              resultingOwnership = _out3870;
              readIdents = _7706_recIdents;
            }
          } else if (_source283.is_Seq) {
            DAST._IType _7707___mcc_h830 = _source283.dtor_element;
            {
              RAST._IExpr _7708_recursiveGen;
              DCOMPUTF16._IOwnership _7709_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7710_recIdents;
              RAST._IExpr _out3871;
              DCOMPUTF16._IOwnership _out3872;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3873;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3871, out _out3872, out _out3873);
              _7708_recursiveGen = _out3871;
              _7709_recOwned = _out3872;
              _7710_recIdents = _out3873;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7708_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3874;
              DCOMPUTF16._IOwnership _out3875;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3874, out _out3875);
              r = _out3874;
              resultingOwnership = _out3875;
              readIdents = _7710_recIdents;
            }
          } else if (_source283.is_Set) {
            DAST._IType _7711___mcc_h832 = _source283.dtor_element;
            {
              RAST._IExpr _7712_recursiveGen;
              DCOMPUTF16._IOwnership _7713_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7714_recIdents;
              RAST._IExpr _out3876;
              DCOMPUTF16._IOwnership _out3877;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3878;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3876, out _out3877, out _out3878);
              _7712_recursiveGen = _out3876;
              _7713_recOwned = _out3877;
              _7714_recIdents = _out3878;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7712_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3879;
              DCOMPUTF16._IOwnership _out3880;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3879, out _out3880);
              r = _out3879;
              resultingOwnership = _out3880;
              readIdents = _7714_recIdents;
            }
          } else if (_source283.is_Multiset) {
            DAST._IType _7715___mcc_h834 = _source283.dtor_element;
            {
              RAST._IExpr _7716_recursiveGen;
              DCOMPUTF16._IOwnership _7717_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7718_recIdents;
              RAST._IExpr _out3881;
              DCOMPUTF16._IOwnership _out3882;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3883;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3881, out _out3882, out _out3883);
              _7716_recursiveGen = _out3881;
              _7717_recOwned = _out3882;
              _7718_recIdents = _out3883;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7716_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3884;
              DCOMPUTF16._IOwnership _out3885;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3884, out _out3885);
              r = _out3884;
              resultingOwnership = _out3885;
              readIdents = _7718_recIdents;
            }
          } else if (_source283.is_Map) {
            DAST._IType _7719___mcc_h836 = _source283.dtor_key;
            DAST._IType _7720___mcc_h837 = _source283.dtor_value;
            {
              RAST._IExpr _7721_recursiveGen;
              DCOMPUTF16._IOwnership _7722_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7723_recIdents;
              RAST._IExpr _out3886;
              DCOMPUTF16._IOwnership _out3887;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3888;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3886, out _out3887, out _out3888);
              _7721_recursiveGen = _out3886;
              _7722_recOwned = _out3887;
              _7723_recIdents = _out3888;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7721_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3889;
              DCOMPUTF16._IOwnership _out3890;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3889, out _out3890);
              r = _out3889;
              resultingOwnership = _out3890;
              readIdents = _7723_recIdents;
            }
          } else if (_source283.is_SetBuilder) {
            DAST._IType _7724___mcc_h840 = _source283.dtor_element;
            {
              RAST._IExpr _7725_recursiveGen;
              DCOMPUTF16._IOwnership _7726_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7727_recIdents;
              RAST._IExpr _out3891;
              DCOMPUTF16._IOwnership _out3892;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3893;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3891, out _out3892, out _out3893);
              _7725_recursiveGen = _out3891;
              _7726_recOwned = _out3892;
              _7727_recIdents = _out3893;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7725_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3894;
              DCOMPUTF16._IOwnership _out3895;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3894, out _out3895);
              r = _out3894;
              resultingOwnership = _out3895;
              readIdents = _7727_recIdents;
            }
          } else if (_source283.is_MapBuilder) {
            DAST._IType _7728___mcc_h842 = _source283.dtor_key;
            DAST._IType _7729___mcc_h843 = _source283.dtor_value;
            {
              RAST._IExpr _7730_recursiveGen;
              DCOMPUTF16._IOwnership _7731_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7732_recIdents;
              RAST._IExpr _out3896;
              DCOMPUTF16._IOwnership _out3897;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3898;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3896, out _out3897, out _out3898);
              _7730_recursiveGen = _out3896;
              _7731_recOwned = _out3897;
              _7732_recIdents = _out3898;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7730_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3899;
              DCOMPUTF16._IOwnership _out3900;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3899, out _out3900);
              r = _out3899;
              resultingOwnership = _out3900;
              readIdents = _7732_recIdents;
            }
          } else if (_source283.is_Arrow) {
            Dafny.ISequence<DAST._IType> _7733___mcc_h846 = _source283.dtor_args;
            DAST._IType _7734___mcc_h847 = _source283.dtor_result;
            {
              RAST._IExpr _7735_recursiveGen;
              DCOMPUTF16._IOwnership _7736_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7737_recIdents;
              RAST._IExpr _out3901;
              DCOMPUTF16._IOwnership _out3902;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3903;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3901, out _out3902, out _out3903);
              _7735_recursiveGen = _out3901;
              _7736_recOwned = _out3902;
              _7737_recIdents = _out3903;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7735_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3904;
              DCOMPUTF16._IOwnership _out3905;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3904, out _out3905);
              r = _out3904;
              resultingOwnership = _out3905;
              readIdents = _7737_recIdents;
            }
          } else if (_source283.is_Primitive) {
            DAST._IPrimitive _7738___mcc_h850 = _source283.dtor_Primitive_a0;
            {
              RAST._IExpr _7739_recursiveGen;
              DCOMPUTF16._IOwnership _7740_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7741_recIdents;
              RAST._IExpr _out3906;
              DCOMPUTF16._IOwnership _out3907;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3908;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3906, out _out3907, out _out3908);
              _7739_recursiveGen = _out3906;
              _7740_recOwned = _out3907;
              _7741_recIdents = _out3908;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7739_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3909;
              DCOMPUTF16._IOwnership _out3910;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3909, out _out3910);
              r = _out3909;
              resultingOwnership = _out3910;
              readIdents = _7741_recIdents;
            }
          } else if (_source283.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _7742___mcc_h852 = _source283.dtor_Passthrough_a0;
            {
              RAST._IExpr _7743_recursiveGen;
              DCOMPUTF16._IOwnership _7744_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7745_recIdents;
              RAST._IExpr _out3911;
              DCOMPUTF16._IOwnership _out3912;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3913;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3911, out _out3912, out _out3913);
              _7743_recursiveGen = _out3911;
              _7744_recOwned = _out3912;
              _7745_recIdents = _out3913;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7743_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3914;
              DCOMPUTF16._IOwnership _out3915;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3914, out _out3915);
              r = _out3914;
              resultingOwnership = _out3915;
              readIdents = _7745_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _7746___mcc_h854 = _source283.dtor_TypeArg_a0;
            {
              RAST._IExpr _7747_recursiveGen;
              DCOMPUTF16._IOwnership _7748_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7749_recIdents;
              RAST._IExpr _out3916;
              DCOMPUTF16._IOwnership _out3917;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3918;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3916, out _out3917, out _out3918);
              _7747_recursiveGen = _out3916;
              _7748_recOwned = _out3917;
              _7749_recIdents = _out3918;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7747_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out3919;
              DCOMPUTF16._IOwnership _out3920;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3919, out _out3920);
              r = _out3919;
              resultingOwnership = _out3920;
              readIdents = _7749_recIdents;
            }
          }
        } else if (_source246.is_Primitive) {
          DAST._IPrimitive _7750___mcc_h856 = _source246.dtor_Primitive_a0;
          DAST._IPrimitive _source286 = _7750___mcc_h856;
          if (_source286.is_Int) {
            DAST._IType _source287 = _6570___mcc_h1;
            if (_source287.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7751___mcc_h860 = _source287.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7752___mcc_h861 = _source287.dtor_typeArgs;
              DAST._IResolvedType _7753___mcc_h862 = _source287.dtor_resolved;
              DAST._IResolvedType _source288 = _7753___mcc_h862;
              if (_source288.is_Datatype) {
                DAST._IDatatypeType _7754___mcc_h866 = _source288.dtor_datatypeType;
                {
                  RAST._IExpr _7755_recursiveGen;
                  DCOMPUTF16._IOwnership _7756_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7757_recIdents;
                  RAST._IExpr _out3921;
                  DCOMPUTF16._IOwnership _out3922;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3923;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3921, out _out3922, out _out3923);
                  _7755_recursiveGen = _out3921;
                  _7756_recOwned = _out3922;
                  _7757_recIdents = _out3923;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7755_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out3924;
                  DCOMPUTF16._IOwnership _out3925;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3924, out _out3925);
                  r = _out3924;
                  resultingOwnership = _out3925;
                  readIdents = _7757_recIdents;
                }
              } else if (_source288.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7758___mcc_h868 = _source288.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7759___mcc_h869 = _source288.dtor_attributes;
                {
                  RAST._IExpr _7760_recursiveGen;
                  DCOMPUTF16._IOwnership _7761_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7762_recIdents;
                  RAST._IExpr _out3926;
                  DCOMPUTF16._IOwnership _out3927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3928;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3926, out _out3927, out _out3928);
                  _7760_recursiveGen = _out3926;
                  _7761_recOwned = _out3927;
                  _7762_recIdents = _out3928;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7760_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out3929;
                  DCOMPUTF16._IOwnership _out3930;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3929, out _out3930);
                  r = _out3929;
                  resultingOwnership = _out3930;
                  readIdents = _7762_recIdents;
                }
              } else {
                DAST._IType _7763___mcc_h872 = _source288.dtor_baseType;
                DAST._INewtypeRange _7764___mcc_h873 = _source288.dtor_range;
                bool _7765___mcc_h874 = _source288.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7766___mcc_h875 = _source288.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7767_attributes = _7766___mcc_h875;
                bool _7768_erase = _7765___mcc_h874;
                DAST._INewtypeRange _7769_range = _7764___mcc_h873;
                DAST._IType _7770_b = _7763___mcc_h872;
                {
                  if (object.Equals(_6564_fromTpe, _7770_b)) {
                    RAST._IExpr _7771_recursiveGen;
                    DCOMPUTF16._IOwnership _7772_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7773_recIdents;
                    RAST._IExpr _out3931;
                    DCOMPUTF16._IOwnership _out3932;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3933;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3931, out _out3932, out _out3933);
                    _7771_recursiveGen = _out3931;
                    _7772_recOwned = _out3932;
                    _7773_recIdents = _out3933;
                    Std.Wrappers._IOption<RAST._IType> _7774_potentialRhsType;
                    _7774_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7770_b, _7769_range);
                    Std.Wrappers._IOption<RAST._IType> _source289 = _7774_potentialRhsType;
                    if (_source289.is_None) {
                      if (_7768_erase) {
                        r = _7771_recursiveGen;
                      } else {
                        RAST._IType _7775_rhsType;
                        RAST._IType _out3934;
                        _out3934 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                        _7775_rhsType = _out3934;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7775_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7771_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out3935;
                      DCOMPUTF16._IOwnership _out3936;
                      DCOMPUTF16.COMP.FromOwnership(r, _7772_recOwned, expectedOwnership, out _out3935, out _out3936);
                      r = _out3935;
                      resultingOwnership = _out3936;
                    } else {
                      RAST._IType _7776___mcc_h1258 = _source289.dtor_value;
                      RAST._IType _7777_v = _7776___mcc_h1258;
                      r = RAST.Expr.create_ConversionNum(_7777_v, _7771_recursiveGen);
                      RAST._IExpr _out3937;
                      DCOMPUTF16._IOwnership _out3938;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3937, out _out3938);
                      r = _out3937;
                      resultingOwnership = _out3938;
                    }
                    readIdents = _7773_recIdents;
                  } else {
                    RAST._IExpr _out3939;
                    DCOMPUTF16._IOwnership _out3940;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3941;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7770_b), _7770_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out3939, out _out3940, out _out3941);
                    r = _out3939;
                    resultingOwnership = _out3940;
                    readIdents = _out3941;
                  }
                }
              }
            } else if (_source287.is_Nullable) {
              DAST._IType _7778___mcc_h880 = _source287.dtor_Nullable_a0;
              {
                RAST._IExpr _7779_recursiveGen;
                DCOMPUTF16._IOwnership _7780_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7781_recIdents;
                RAST._IExpr _out3942;
                DCOMPUTF16._IOwnership _out3943;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3944;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3942, out _out3943, out _out3944);
                _7779_recursiveGen = _out3942;
                _7780_recOwned = _out3943;
                _7781_recIdents = _out3944;
                Dafny.ISequence<Dafny.Rune> _7782_s;
                _7782_s = (_7779_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_7780_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _7782_s = Dafny.Sequence<Dafny.Rune>.Concat(_7782_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _7782_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7782_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_7782_s);
                RAST._IExpr _out3945;
                DCOMPUTF16._IOwnership _out3946;
                DCOMPUTF16.COMP.FromOwnership(r, _7780_recOwned, expectedOwnership, out _out3945, out _out3946);
                r = _out3945;
                resultingOwnership = _out3946;
                readIdents = _7781_recIdents;
              }
            } else if (_source287.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7783___mcc_h882 = _source287.dtor_Tuple_a0;
              {
                RAST._IExpr _7784_recursiveGen;
                DCOMPUTF16._IOwnership _7785_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7786_recIdents;
                RAST._IExpr _out3947;
                DCOMPUTF16._IOwnership _out3948;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3949;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3947, out _out3948, out _out3949);
                _7784_recursiveGen = _out3947;
                _7785_recOwned = _out3948;
                _7786_recIdents = _out3949;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7784_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3950;
                DCOMPUTF16._IOwnership _out3951;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3950, out _out3951);
                r = _out3950;
                resultingOwnership = _out3951;
                readIdents = _7786_recIdents;
              }
            } else if (_source287.is_Array) {
              DAST._IType _7787___mcc_h884 = _source287.dtor_element;
              BigInteger _7788___mcc_h885 = _source287.dtor_dims;
              {
                RAST._IExpr _7789_recursiveGen;
                DCOMPUTF16._IOwnership _7790_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7791_recIdents;
                RAST._IExpr _out3952;
                DCOMPUTF16._IOwnership _out3953;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3954;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3952, out _out3953, out _out3954);
                _7789_recursiveGen = _out3952;
                _7790_recOwned = _out3953;
                _7791_recIdents = _out3954;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7789_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3955;
                DCOMPUTF16._IOwnership _out3956;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3955, out _out3956);
                r = _out3955;
                resultingOwnership = _out3956;
                readIdents = _7791_recIdents;
              }
            } else if (_source287.is_Seq) {
              DAST._IType _7792___mcc_h888 = _source287.dtor_element;
              {
                RAST._IExpr _7793_recursiveGen;
                DCOMPUTF16._IOwnership _7794_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7795_recIdents;
                RAST._IExpr _out3957;
                DCOMPUTF16._IOwnership _out3958;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3959;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3957, out _out3958, out _out3959);
                _7793_recursiveGen = _out3957;
                _7794_recOwned = _out3958;
                _7795_recIdents = _out3959;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7793_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3960;
                DCOMPUTF16._IOwnership _out3961;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3960, out _out3961);
                r = _out3960;
                resultingOwnership = _out3961;
                readIdents = _7795_recIdents;
              }
            } else if (_source287.is_Set) {
              DAST._IType _7796___mcc_h890 = _source287.dtor_element;
              {
                RAST._IExpr _7797_recursiveGen;
                DCOMPUTF16._IOwnership _7798_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7799_recIdents;
                RAST._IExpr _out3962;
                DCOMPUTF16._IOwnership _out3963;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3964;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3962, out _out3963, out _out3964);
                _7797_recursiveGen = _out3962;
                _7798_recOwned = _out3963;
                _7799_recIdents = _out3964;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7797_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3965;
                DCOMPUTF16._IOwnership _out3966;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3965, out _out3966);
                r = _out3965;
                resultingOwnership = _out3966;
                readIdents = _7799_recIdents;
              }
            } else if (_source287.is_Multiset) {
              DAST._IType _7800___mcc_h892 = _source287.dtor_element;
              {
                RAST._IExpr _7801_recursiveGen;
                DCOMPUTF16._IOwnership _7802_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7803_recIdents;
                RAST._IExpr _out3967;
                DCOMPUTF16._IOwnership _out3968;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3969;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3967, out _out3968, out _out3969);
                _7801_recursiveGen = _out3967;
                _7802_recOwned = _out3968;
                _7803_recIdents = _out3969;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7801_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3970;
                DCOMPUTF16._IOwnership _out3971;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3970, out _out3971);
                r = _out3970;
                resultingOwnership = _out3971;
                readIdents = _7803_recIdents;
              }
            } else if (_source287.is_Map) {
              DAST._IType _7804___mcc_h894 = _source287.dtor_key;
              DAST._IType _7805___mcc_h895 = _source287.dtor_value;
              {
                RAST._IExpr _7806_recursiveGen;
                DCOMPUTF16._IOwnership _7807_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7808_recIdents;
                RAST._IExpr _out3972;
                DCOMPUTF16._IOwnership _out3973;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3974;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3972, out _out3973, out _out3974);
                _7806_recursiveGen = _out3972;
                _7807_recOwned = _out3973;
                _7808_recIdents = _out3974;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7806_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3975;
                DCOMPUTF16._IOwnership _out3976;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3975, out _out3976);
                r = _out3975;
                resultingOwnership = _out3976;
                readIdents = _7808_recIdents;
              }
            } else if (_source287.is_SetBuilder) {
              DAST._IType _7809___mcc_h898 = _source287.dtor_element;
              {
                RAST._IExpr _7810_recursiveGen;
                DCOMPUTF16._IOwnership _7811_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7812_recIdents;
                RAST._IExpr _out3977;
                DCOMPUTF16._IOwnership _out3978;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3979;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3977, out _out3978, out _out3979);
                _7810_recursiveGen = _out3977;
                _7811_recOwned = _out3978;
                _7812_recIdents = _out3979;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7810_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3980;
                DCOMPUTF16._IOwnership _out3981;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3980, out _out3981);
                r = _out3980;
                resultingOwnership = _out3981;
                readIdents = _7812_recIdents;
              }
            } else if (_source287.is_MapBuilder) {
              DAST._IType _7813___mcc_h900 = _source287.dtor_key;
              DAST._IType _7814___mcc_h901 = _source287.dtor_value;
              {
                RAST._IExpr _7815_recursiveGen;
                DCOMPUTF16._IOwnership _7816_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7817_recIdents;
                RAST._IExpr _out3982;
                DCOMPUTF16._IOwnership _out3983;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3984;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3982, out _out3983, out _out3984);
                _7815_recursiveGen = _out3982;
                _7816_recOwned = _out3983;
                _7817_recIdents = _out3984;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7815_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3985;
                DCOMPUTF16._IOwnership _out3986;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3985, out _out3986);
                r = _out3985;
                resultingOwnership = _out3986;
                readIdents = _7817_recIdents;
              }
            } else if (_source287.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7818___mcc_h904 = _source287.dtor_args;
              DAST._IType _7819___mcc_h905 = _source287.dtor_result;
              {
                RAST._IExpr _7820_recursiveGen;
                DCOMPUTF16._IOwnership _7821_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7822_recIdents;
                RAST._IExpr _out3987;
                DCOMPUTF16._IOwnership _out3988;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3989;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3987, out _out3988, out _out3989);
                _7820_recursiveGen = _out3987;
                _7821_recOwned = _out3988;
                _7822_recIdents = _out3989;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7820_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out3990;
                DCOMPUTF16._IOwnership _out3991;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3990, out _out3991);
                r = _out3990;
                resultingOwnership = _out3991;
                readIdents = _7822_recIdents;
              }
            } else if (_source287.is_Primitive) {
              DAST._IPrimitive _7823___mcc_h908 = _source287.dtor_Primitive_a0;
              DAST._IPrimitive _source290 = _7823___mcc_h908;
              if (_source290.is_Int) {
                {
                  RAST._IExpr _7824_recursiveGen;
                  DCOMPUTF16._IOwnership _7825_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7826_recIdents;
                  RAST._IExpr _out3992;
                  DCOMPUTF16._IOwnership _out3993;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3994;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out3992, out _out3993, out _out3994);
                  _7824_recursiveGen = _out3992;
                  _7825_recOwned = _out3993;
                  _7826_recIdents = _out3994;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7824_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out3995;
                  DCOMPUTF16._IOwnership _out3996;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out3995, out _out3996);
                  r = _out3995;
                  resultingOwnership = _out3996;
                  readIdents = _7826_recIdents;
                }
              } else if (_source290.is_Real) {
                {
                  RAST._IExpr _7827_recursiveGen;
                  DCOMPUTF16._IOwnership _7828___v78;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7829_recIdents;
                  RAST._IExpr _out3997;
                  DCOMPUTF16._IOwnership _out3998;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out3999;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out3997, out _out3998, out _out3999);
                  _7827_recursiveGen = _out3997;
                  _7828___v78 = _out3998;
                  _7829_recIdents = _out3999;
                  r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), (_7827_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))));
                  RAST._IExpr _out4000;
                  DCOMPUTF16._IOwnership _out4001;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4000, out _out4001);
                  r = _out4000;
                  resultingOwnership = _out4001;
                  readIdents = _7829_recIdents;
                }
              } else if (_source290.is_String) {
                {
                  RAST._IExpr _7830_recursiveGen;
                  DCOMPUTF16._IOwnership _7831_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7832_recIdents;
                  RAST._IExpr _out4002;
                  DCOMPUTF16._IOwnership _out4003;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4004;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4002, out _out4003, out _out4004);
                  _7830_recursiveGen = _out4002;
                  _7831_recOwned = _out4003;
                  _7832_recIdents = _out4004;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7830_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4005;
                  DCOMPUTF16._IOwnership _out4006;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4005, out _out4006);
                  r = _out4005;
                  resultingOwnership = _out4006;
                  readIdents = _7832_recIdents;
                }
              } else if (_source290.is_Bool) {
                {
                  RAST._IExpr _7833_recursiveGen;
                  DCOMPUTF16._IOwnership _7834_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7835_recIdents;
                  RAST._IExpr _out4007;
                  DCOMPUTF16._IOwnership _out4008;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4009;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4007, out _out4008, out _out4009);
                  _7833_recursiveGen = _out4007;
                  _7834_recOwned = _out4008;
                  _7835_recIdents = _out4009;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7833_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4010;
                  DCOMPUTF16._IOwnership _out4011;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4010, out _out4011);
                  r = _out4010;
                  resultingOwnership = _out4011;
                  readIdents = _7835_recIdents;
                }
              } else {
                {
                  RAST._IType _7836_rhsType;
                  RAST._IType _out4012;
                  _out4012 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                  _7836_rhsType = _out4012;
                  RAST._IExpr _7837_recursiveGen;
                  DCOMPUTF16._IOwnership _7838___v84;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7839_recIdents;
                  RAST._IExpr _out4013;
                  DCOMPUTF16._IOwnership _out4014;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4015;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4013, out _out4014, out _out4015);
                  _7837_recursiveGen = _out4013;
                  _7838___v84 = _out4014;
                  _7839_recIdents = _out4015;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), (_7837_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()")));
                  RAST._IExpr _out4016;
                  DCOMPUTF16._IOwnership _out4017;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4016, out _out4017);
                  r = _out4016;
                  resultingOwnership = _out4017;
                  readIdents = _7839_recIdents;
                }
              }
            } else if (_source287.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7840___mcc_h910 = _source287.dtor_Passthrough_a0;
              {
                RAST._IType _7841_rhsType;
                RAST._IType _out4018;
                _out4018 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                _7841_rhsType = _out4018;
                RAST._IExpr _7842_recursiveGen;
                DCOMPUTF16._IOwnership _7843___v81;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7844_recIdents;
                RAST._IExpr _out4019;
                DCOMPUTF16._IOwnership _out4020;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4021;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4019, out _out4020, out _out4021);
                _7842_recursiveGen = _out4019;
                _7843___v81 = _out4020;
                _7844_recIdents = _out4021;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_7841_rhsType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), (_7842_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()")));
                RAST._IExpr _out4022;
                DCOMPUTF16._IOwnership _out4023;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4022, out _out4023);
                r = _out4022;
                resultingOwnership = _out4023;
                readIdents = _7844_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7845___mcc_h912 = _source287.dtor_TypeArg_a0;
              {
                RAST._IExpr _7846_recursiveGen;
                DCOMPUTF16._IOwnership _7847_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7848_recIdents;
                RAST._IExpr _out4024;
                DCOMPUTF16._IOwnership _out4025;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4026;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4024, out _out4025, out _out4026);
                _7846_recursiveGen = _out4024;
                _7847_recOwned = _out4025;
                _7848_recIdents = _out4026;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7846_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4027;
                DCOMPUTF16._IOwnership _out4028;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4027, out _out4028);
                r = _out4027;
                resultingOwnership = _out4028;
                readIdents = _7848_recIdents;
              }
            }
          } else if (_source286.is_Real) {
            DAST._IType _source291 = _6570___mcc_h1;
            if (_source291.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7849___mcc_h914 = _source291.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7850___mcc_h915 = _source291.dtor_typeArgs;
              DAST._IResolvedType _7851___mcc_h916 = _source291.dtor_resolved;
              DAST._IResolvedType _source292 = _7851___mcc_h916;
              if (_source292.is_Datatype) {
                DAST._IDatatypeType _7852___mcc_h920 = _source292.dtor_datatypeType;
                {
                  RAST._IExpr _7853_recursiveGen;
                  DCOMPUTF16._IOwnership _7854_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7855_recIdents;
                  RAST._IExpr _out4029;
                  DCOMPUTF16._IOwnership _out4030;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4031;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4029, out _out4030, out _out4031);
                  _7853_recursiveGen = _out4029;
                  _7854_recOwned = _out4030;
                  _7855_recIdents = _out4031;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7853_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4032;
                  DCOMPUTF16._IOwnership _out4033;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4032, out _out4033);
                  r = _out4032;
                  resultingOwnership = _out4033;
                  readIdents = _7855_recIdents;
                }
              } else if (_source292.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7856___mcc_h922 = _source292.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7857___mcc_h923 = _source292.dtor_attributes;
                {
                  RAST._IExpr _7858_recursiveGen;
                  DCOMPUTF16._IOwnership _7859_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7860_recIdents;
                  RAST._IExpr _out4034;
                  DCOMPUTF16._IOwnership _out4035;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4036;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4034, out _out4035, out _out4036);
                  _7858_recursiveGen = _out4034;
                  _7859_recOwned = _out4035;
                  _7860_recIdents = _out4036;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7858_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4037;
                  DCOMPUTF16._IOwnership _out4038;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4037, out _out4038);
                  r = _out4037;
                  resultingOwnership = _out4038;
                  readIdents = _7860_recIdents;
                }
              } else {
                DAST._IType _7861___mcc_h926 = _source292.dtor_baseType;
                DAST._INewtypeRange _7862___mcc_h927 = _source292.dtor_range;
                bool _7863___mcc_h928 = _source292.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7864___mcc_h929 = _source292.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7865_attributes = _7864___mcc_h929;
                bool _7866_erase = _7863___mcc_h928;
                DAST._INewtypeRange _7867_range = _7862___mcc_h927;
                DAST._IType _7868_b = _7861___mcc_h926;
                {
                  if (object.Equals(_6564_fromTpe, _7868_b)) {
                    RAST._IExpr _7869_recursiveGen;
                    DCOMPUTF16._IOwnership _7870_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7871_recIdents;
                    RAST._IExpr _out4039;
                    DCOMPUTF16._IOwnership _out4040;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4041;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4039, out _out4040, out _out4041);
                    _7869_recursiveGen = _out4039;
                    _7870_recOwned = _out4040;
                    _7871_recIdents = _out4041;
                    Std.Wrappers._IOption<RAST._IType> _7872_potentialRhsType;
                    _7872_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7868_b, _7867_range);
                    Std.Wrappers._IOption<RAST._IType> _source293 = _7872_potentialRhsType;
                    if (_source293.is_None) {
                      if (_7866_erase) {
                        r = _7869_recursiveGen;
                      } else {
                        RAST._IType _7873_rhsType;
                        RAST._IType _out4042;
                        _out4042 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                        _7873_rhsType = _out4042;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7873_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7869_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4043;
                      DCOMPUTF16._IOwnership _out4044;
                      DCOMPUTF16.COMP.FromOwnership(r, _7870_recOwned, expectedOwnership, out _out4043, out _out4044);
                      r = _out4043;
                      resultingOwnership = _out4044;
                    } else {
                      RAST._IType _7874___mcc_h1259 = _source293.dtor_value;
                      RAST._IType _7875_v = _7874___mcc_h1259;
                      r = RAST.Expr.create_ConversionNum(_7875_v, _7869_recursiveGen);
                      RAST._IExpr _out4045;
                      DCOMPUTF16._IOwnership _out4046;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4045, out _out4046);
                      r = _out4045;
                      resultingOwnership = _out4046;
                    }
                    readIdents = _7871_recIdents;
                  } else {
                    RAST._IExpr _out4047;
                    DCOMPUTF16._IOwnership _out4048;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4049;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7868_b), _7868_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out4047, out _out4048, out _out4049);
                    r = _out4047;
                    resultingOwnership = _out4048;
                    readIdents = _out4049;
                  }
                }
              }
            } else if (_source291.is_Nullable) {
              DAST._IType _7876___mcc_h934 = _source291.dtor_Nullable_a0;
              {
                RAST._IExpr _7877_recursiveGen;
                DCOMPUTF16._IOwnership _7878_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7879_recIdents;
                RAST._IExpr _out4050;
                DCOMPUTF16._IOwnership _out4051;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4052;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4050, out _out4051, out _out4052);
                _7877_recursiveGen = _out4050;
                _7878_recOwned = _out4051;
                _7879_recIdents = _out4052;
                Dafny.ISequence<Dafny.Rune> _7880_s;
                _7880_s = (_7877_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_7878_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _7880_s = Dafny.Sequence<Dafny.Rune>.Concat(_7880_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _7880_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7880_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_7880_s);
                RAST._IExpr _out4053;
                DCOMPUTF16._IOwnership _out4054;
                DCOMPUTF16.COMP.FromOwnership(r, _7878_recOwned, expectedOwnership, out _out4053, out _out4054);
                r = _out4053;
                resultingOwnership = _out4054;
                readIdents = _7879_recIdents;
              }
            } else if (_source291.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7881___mcc_h936 = _source291.dtor_Tuple_a0;
              {
                RAST._IExpr _7882_recursiveGen;
                DCOMPUTF16._IOwnership _7883_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7884_recIdents;
                RAST._IExpr _out4055;
                DCOMPUTF16._IOwnership _out4056;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4057;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4055, out _out4056, out _out4057);
                _7882_recursiveGen = _out4055;
                _7883_recOwned = _out4056;
                _7884_recIdents = _out4057;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7882_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4058;
                DCOMPUTF16._IOwnership _out4059;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4058, out _out4059);
                r = _out4058;
                resultingOwnership = _out4059;
                readIdents = _7884_recIdents;
              }
            } else if (_source291.is_Array) {
              DAST._IType _7885___mcc_h938 = _source291.dtor_element;
              BigInteger _7886___mcc_h939 = _source291.dtor_dims;
              {
                RAST._IExpr _7887_recursiveGen;
                DCOMPUTF16._IOwnership _7888_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7889_recIdents;
                RAST._IExpr _out4060;
                DCOMPUTF16._IOwnership _out4061;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4062;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4060, out _out4061, out _out4062);
                _7887_recursiveGen = _out4060;
                _7888_recOwned = _out4061;
                _7889_recIdents = _out4062;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7887_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4063;
                DCOMPUTF16._IOwnership _out4064;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4063, out _out4064);
                r = _out4063;
                resultingOwnership = _out4064;
                readIdents = _7889_recIdents;
              }
            } else if (_source291.is_Seq) {
              DAST._IType _7890___mcc_h942 = _source291.dtor_element;
              {
                RAST._IExpr _7891_recursiveGen;
                DCOMPUTF16._IOwnership _7892_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7893_recIdents;
                RAST._IExpr _out4065;
                DCOMPUTF16._IOwnership _out4066;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4067;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4065, out _out4066, out _out4067);
                _7891_recursiveGen = _out4065;
                _7892_recOwned = _out4066;
                _7893_recIdents = _out4067;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7891_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4068;
                DCOMPUTF16._IOwnership _out4069;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4068, out _out4069);
                r = _out4068;
                resultingOwnership = _out4069;
                readIdents = _7893_recIdents;
              }
            } else if (_source291.is_Set) {
              DAST._IType _7894___mcc_h944 = _source291.dtor_element;
              {
                RAST._IExpr _7895_recursiveGen;
                DCOMPUTF16._IOwnership _7896_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7897_recIdents;
                RAST._IExpr _out4070;
                DCOMPUTF16._IOwnership _out4071;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4072;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4070, out _out4071, out _out4072);
                _7895_recursiveGen = _out4070;
                _7896_recOwned = _out4071;
                _7897_recIdents = _out4072;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7895_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4073;
                DCOMPUTF16._IOwnership _out4074;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4073, out _out4074);
                r = _out4073;
                resultingOwnership = _out4074;
                readIdents = _7897_recIdents;
              }
            } else if (_source291.is_Multiset) {
              DAST._IType _7898___mcc_h946 = _source291.dtor_element;
              {
                RAST._IExpr _7899_recursiveGen;
                DCOMPUTF16._IOwnership _7900_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7901_recIdents;
                RAST._IExpr _out4075;
                DCOMPUTF16._IOwnership _out4076;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4077;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4075, out _out4076, out _out4077);
                _7899_recursiveGen = _out4075;
                _7900_recOwned = _out4076;
                _7901_recIdents = _out4077;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7899_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4078;
                DCOMPUTF16._IOwnership _out4079;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4078, out _out4079);
                r = _out4078;
                resultingOwnership = _out4079;
                readIdents = _7901_recIdents;
              }
            } else if (_source291.is_Map) {
              DAST._IType _7902___mcc_h948 = _source291.dtor_key;
              DAST._IType _7903___mcc_h949 = _source291.dtor_value;
              {
                RAST._IExpr _7904_recursiveGen;
                DCOMPUTF16._IOwnership _7905_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7906_recIdents;
                RAST._IExpr _out4080;
                DCOMPUTF16._IOwnership _out4081;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4082;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4080, out _out4081, out _out4082);
                _7904_recursiveGen = _out4080;
                _7905_recOwned = _out4081;
                _7906_recIdents = _out4082;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7904_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4083;
                DCOMPUTF16._IOwnership _out4084;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4083, out _out4084);
                r = _out4083;
                resultingOwnership = _out4084;
                readIdents = _7906_recIdents;
              }
            } else if (_source291.is_SetBuilder) {
              DAST._IType _7907___mcc_h952 = _source291.dtor_element;
              {
                RAST._IExpr _7908_recursiveGen;
                DCOMPUTF16._IOwnership _7909_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7910_recIdents;
                RAST._IExpr _out4085;
                DCOMPUTF16._IOwnership _out4086;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4087;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4085, out _out4086, out _out4087);
                _7908_recursiveGen = _out4085;
                _7909_recOwned = _out4086;
                _7910_recIdents = _out4087;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7908_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4088;
                DCOMPUTF16._IOwnership _out4089;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4088, out _out4089);
                r = _out4088;
                resultingOwnership = _out4089;
                readIdents = _7910_recIdents;
              }
            } else if (_source291.is_MapBuilder) {
              DAST._IType _7911___mcc_h954 = _source291.dtor_key;
              DAST._IType _7912___mcc_h955 = _source291.dtor_value;
              {
                RAST._IExpr _7913_recursiveGen;
                DCOMPUTF16._IOwnership _7914_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7915_recIdents;
                RAST._IExpr _out4090;
                DCOMPUTF16._IOwnership _out4091;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4092;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4090, out _out4091, out _out4092);
                _7913_recursiveGen = _out4090;
                _7914_recOwned = _out4091;
                _7915_recIdents = _out4092;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7913_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4093;
                DCOMPUTF16._IOwnership _out4094;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4093, out _out4094);
                r = _out4093;
                resultingOwnership = _out4094;
                readIdents = _7915_recIdents;
              }
            } else if (_source291.is_Arrow) {
              Dafny.ISequence<DAST._IType> _7916___mcc_h958 = _source291.dtor_args;
              DAST._IType _7917___mcc_h959 = _source291.dtor_result;
              {
                RAST._IExpr _7918_recursiveGen;
                DCOMPUTF16._IOwnership _7919_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7920_recIdents;
                RAST._IExpr _out4095;
                DCOMPUTF16._IOwnership _out4096;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4097;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4095, out _out4096, out _out4097);
                _7918_recursiveGen = _out4095;
                _7919_recOwned = _out4096;
                _7920_recIdents = _out4097;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7918_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4098;
                DCOMPUTF16._IOwnership _out4099;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4098, out _out4099);
                r = _out4098;
                resultingOwnership = _out4099;
                readIdents = _7920_recIdents;
              }
            } else if (_source291.is_Primitive) {
              DAST._IPrimitive _7921___mcc_h962 = _source291.dtor_Primitive_a0;
              DAST._IPrimitive _source294 = _7921___mcc_h962;
              if (_source294.is_Int) {
                {
                  RAST._IExpr _7922_recursiveGen;
                  DCOMPUTF16._IOwnership _7923___v79;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7924_recIdents;
                  RAST._IExpr _out4100;
                  DCOMPUTF16._IOwnership _out4101;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4102;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4100, out _out4101, out _out4102);
                  _7922_recursiveGen = _out4100;
                  _7923___v79 = _out4101;
                  _7924_recIdents = _out4102;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), (_7922_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                  RAST._IExpr _out4103;
                  DCOMPUTF16._IOwnership _out4104;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4103, out _out4104);
                  r = _out4103;
                  resultingOwnership = _out4104;
                  readIdents = _7924_recIdents;
                }
              } else if (_source294.is_Real) {
                {
                  RAST._IExpr _7925_recursiveGen;
                  DCOMPUTF16._IOwnership _7926_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7927_recIdents;
                  RAST._IExpr _out4105;
                  DCOMPUTF16._IOwnership _out4106;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4107;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4105, out _out4106, out _out4107);
                  _7925_recursiveGen = _out4105;
                  _7926_recOwned = _out4106;
                  _7927_recIdents = _out4107;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7925_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4108;
                  DCOMPUTF16._IOwnership _out4109;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4108, out _out4109);
                  r = _out4108;
                  resultingOwnership = _out4109;
                  readIdents = _7927_recIdents;
                }
              } else if (_source294.is_String) {
                {
                  RAST._IExpr _7928_recursiveGen;
                  DCOMPUTF16._IOwnership _7929_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7930_recIdents;
                  RAST._IExpr _out4110;
                  DCOMPUTF16._IOwnership _out4111;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4112;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4110, out _out4111, out _out4112);
                  _7928_recursiveGen = _out4110;
                  _7929_recOwned = _out4111;
                  _7930_recIdents = _out4112;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7928_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4113;
                  DCOMPUTF16._IOwnership _out4114;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4113, out _out4114);
                  r = _out4113;
                  resultingOwnership = _out4114;
                  readIdents = _7930_recIdents;
                }
              } else if (_source294.is_Bool) {
                {
                  RAST._IExpr _7931_recursiveGen;
                  DCOMPUTF16._IOwnership _7932_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7933_recIdents;
                  RAST._IExpr _out4115;
                  DCOMPUTF16._IOwnership _out4116;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4117;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4115, out _out4116, out _out4117);
                  _7931_recursiveGen = _out4115;
                  _7932_recOwned = _out4116;
                  _7933_recIdents = _out4117;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7931_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4118;
                  DCOMPUTF16._IOwnership _out4119;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4118, out _out4119);
                  r = _out4118;
                  resultingOwnership = _out4119;
                  readIdents = _7933_recIdents;
                }
              } else {
                {
                  RAST._IExpr _7934_recursiveGen;
                  DCOMPUTF16._IOwnership _7935_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7936_recIdents;
                  RAST._IExpr _out4120;
                  DCOMPUTF16._IOwnership _out4121;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4122;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4120, out _out4121, out _out4122);
                  _7934_recursiveGen = _out4120;
                  _7935_recOwned = _out4121;
                  _7936_recIdents = _out4122;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7934_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4123;
                  DCOMPUTF16._IOwnership _out4124;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4123, out _out4124);
                  r = _out4123;
                  resultingOwnership = _out4124;
                  readIdents = _7936_recIdents;
                }
              }
            } else if (_source291.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _7937___mcc_h964 = _source291.dtor_Passthrough_a0;
              {
                RAST._IExpr _7938_recursiveGen;
                DCOMPUTF16._IOwnership _7939_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7940_recIdents;
                RAST._IExpr _out4125;
                DCOMPUTF16._IOwnership _out4126;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4127;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4125, out _out4126, out _out4127);
                _7938_recursiveGen = _out4125;
                _7939_recOwned = _out4126;
                _7940_recIdents = _out4127;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7938_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4128;
                DCOMPUTF16._IOwnership _out4129;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4128, out _out4129);
                r = _out4128;
                resultingOwnership = _out4129;
                readIdents = _7940_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _7941___mcc_h966 = _source291.dtor_TypeArg_a0;
              {
                RAST._IExpr _7942_recursiveGen;
                DCOMPUTF16._IOwnership _7943_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7944_recIdents;
                RAST._IExpr _out4130;
                DCOMPUTF16._IOwnership _out4131;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4132;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4130, out _out4131, out _out4132);
                _7942_recursiveGen = _out4130;
                _7943_recOwned = _out4131;
                _7944_recIdents = _out4132;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7942_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4133;
                DCOMPUTF16._IOwnership _out4134;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4133, out _out4134);
                r = _out4133;
                resultingOwnership = _out4134;
                readIdents = _7944_recIdents;
              }
            }
          } else if (_source286.is_String) {
            DAST._IType _source295 = _6570___mcc_h1;
            if (_source295.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7945___mcc_h968 = _source295.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _7946___mcc_h969 = _source295.dtor_typeArgs;
              DAST._IResolvedType _7947___mcc_h970 = _source295.dtor_resolved;
              DAST._IResolvedType _source296 = _7947___mcc_h970;
              if (_source296.is_Datatype) {
                DAST._IDatatypeType _7948___mcc_h974 = _source296.dtor_datatypeType;
                {
                  RAST._IExpr _7949_recursiveGen;
                  DCOMPUTF16._IOwnership _7950_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7951_recIdents;
                  RAST._IExpr _out4135;
                  DCOMPUTF16._IOwnership _out4136;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4137;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4135, out _out4136, out _out4137);
                  _7949_recursiveGen = _out4135;
                  _7950_recOwned = _out4136;
                  _7951_recIdents = _out4137;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7949_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4138;
                  DCOMPUTF16._IOwnership _out4139;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4138, out _out4139);
                  r = _out4138;
                  resultingOwnership = _out4139;
                  readIdents = _7951_recIdents;
                }
              } else if (_source296.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _7952___mcc_h976 = _source296.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _7953___mcc_h977 = _source296.dtor_attributes;
                {
                  RAST._IExpr _7954_recursiveGen;
                  DCOMPUTF16._IOwnership _7955_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7956_recIdents;
                  RAST._IExpr _out4140;
                  DCOMPUTF16._IOwnership _out4141;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4142;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4140, out _out4141, out _out4142);
                  _7954_recursiveGen = _out4140;
                  _7955_recOwned = _out4141;
                  _7956_recIdents = _out4142;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7954_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4143;
                  DCOMPUTF16._IOwnership _out4144;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4143, out _out4144);
                  r = _out4143;
                  resultingOwnership = _out4144;
                  readIdents = _7956_recIdents;
                }
              } else {
                DAST._IType _7957___mcc_h980 = _source296.dtor_baseType;
                DAST._INewtypeRange _7958___mcc_h981 = _source296.dtor_range;
                bool _7959___mcc_h982 = _source296.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _7960___mcc_h983 = _source296.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _7961_attributes = _7960___mcc_h983;
                bool _7962_erase = _7959___mcc_h982;
                DAST._INewtypeRange _7963_range = _7958___mcc_h981;
                DAST._IType _7964_b = _7957___mcc_h980;
                {
                  if (object.Equals(_6564_fromTpe, _7964_b)) {
                    RAST._IExpr _7965_recursiveGen;
                    DCOMPUTF16._IOwnership _7966_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7967_recIdents;
                    RAST._IExpr _out4145;
                    DCOMPUTF16._IOwnership _out4146;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4147;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4145, out _out4146, out _out4147);
                    _7965_recursiveGen = _out4145;
                    _7966_recOwned = _out4146;
                    _7967_recIdents = _out4147;
                    Std.Wrappers._IOption<RAST._IType> _7968_potentialRhsType;
                    _7968_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_7964_b, _7963_range);
                    Std.Wrappers._IOption<RAST._IType> _source297 = _7968_potentialRhsType;
                    if (_source297.is_None) {
                      if (_7962_erase) {
                        r = _7965_recursiveGen;
                      } else {
                        RAST._IType _7969_rhsType;
                        RAST._IType _out4148;
                        _out4148 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                        _7969_rhsType = _out4148;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_7969_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_7965_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4149;
                      DCOMPUTF16._IOwnership _out4150;
                      DCOMPUTF16.COMP.FromOwnership(r, _7966_recOwned, expectedOwnership, out _out4149, out _out4150);
                      r = _out4149;
                      resultingOwnership = _out4150;
                    } else {
                      RAST._IType _7970___mcc_h1260 = _source297.dtor_value;
                      RAST._IType _7971_v = _7970___mcc_h1260;
                      r = RAST.Expr.create_ConversionNum(_7971_v, _7965_recursiveGen);
                      RAST._IExpr _out4151;
                      DCOMPUTF16._IOwnership _out4152;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4151, out _out4152);
                      r = _out4151;
                      resultingOwnership = _out4152;
                    }
                    readIdents = _7967_recIdents;
                  } else {
                    RAST._IExpr _out4153;
                    DCOMPUTF16._IOwnership _out4154;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4155;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _7964_b), _7964_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out4153, out _out4154, out _out4155);
                    r = _out4153;
                    resultingOwnership = _out4154;
                    readIdents = _out4155;
                  }
                }
              }
            } else if (_source295.is_Nullable) {
              DAST._IType _7972___mcc_h988 = _source295.dtor_Nullable_a0;
              {
                RAST._IExpr _7973_recursiveGen;
                DCOMPUTF16._IOwnership _7974_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7975_recIdents;
                RAST._IExpr _out4156;
                DCOMPUTF16._IOwnership _out4157;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4158;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4156, out _out4157, out _out4158);
                _7973_recursiveGen = _out4156;
                _7974_recOwned = _out4157;
                _7975_recIdents = _out4158;
                Dafny.ISequence<Dafny.Rune> _7976_s;
                _7976_s = (_7973_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_7974_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _7976_s = Dafny.Sequence<Dafny.Rune>.Concat(_7976_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _7976_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _7976_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_7976_s);
                RAST._IExpr _out4159;
                DCOMPUTF16._IOwnership _out4160;
                DCOMPUTF16.COMP.FromOwnership(r, _7974_recOwned, expectedOwnership, out _out4159, out _out4160);
                r = _out4159;
                resultingOwnership = _out4160;
                readIdents = _7975_recIdents;
              }
            } else if (_source295.is_Tuple) {
              Dafny.ISequence<DAST._IType> _7977___mcc_h990 = _source295.dtor_Tuple_a0;
              {
                RAST._IExpr _7978_recursiveGen;
                DCOMPUTF16._IOwnership _7979_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7980_recIdents;
                RAST._IExpr _out4161;
                DCOMPUTF16._IOwnership _out4162;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4163;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4161, out _out4162, out _out4163);
                _7978_recursiveGen = _out4161;
                _7979_recOwned = _out4162;
                _7980_recIdents = _out4163;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7978_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4164;
                DCOMPUTF16._IOwnership _out4165;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4164, out _out4165);
                r = _out4164;
                resultingOwnership = _out4165;
                readIdents = _7980_recIdents;
              }
            } else if (_source295.is_Array) {
              DAST._IType _7981___mcc_h992 = _source295.dtor_element;
              BigInteger _7982___mcc_h993 = _source295.dtor_dims;
              {
                RAST._IExpr _7983_recursiveGen;
                DCOMPUTF16._IOwnership _7984_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7985_recIdents;
                RAST._IExpr _out4166;
                DCOMPUTF16._IOwnership _out4167;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4168;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4166, out _out4167, out _out4168);
                _7983_recursiveGen = _out4166;
                _7984_recOwned = _out4167;
                _7985_recIdents = _out4168;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7983_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4169;
                DCOMPUTF16._IOwnership _out4170;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4169, out _out4170);
                r = _out4169;
                resultingOwnership = _out4170;
                readIdents = _7985_recIdents;
              }
            } else if (_source295.is_Seq) {
              DAST._IType _7986___mcc_h996 = _source295.dtor_element;
              {
                RAST._IExpr _7987_recursiveGen;
                DCOMPUTF16._IOwnership _7988_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7989_recIdents;
                RAST._IExpr _out4171;
                DCOMPUTF16._IOwnership _out4172;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4173;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4171, out _out4172, out _out4173);
                _7987_recursiveGen = _out4171;
                _7988_recOwned = _out4172;
                _7989_recIdents = _out4173;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7987_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4174;
                DCOMPUTF16._IOwnership _out4175;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4174, out _out4175);
                r = _out4174;
                resultingOwnership = _out4175;
                readIdents = _7989_recIdents;
              }
            } else if (_source295.is_Set) {
              DAST._IType _7990___mcc_h998 = _source295.dtor_element;
              {
                RAST._IExpr _7991_recursiveGen;
                DCOMPUTF16._IOwnership _7992_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7993_recIdents;
                RAST._IExpr _out4176;
                DCOMPUTF16._IOwnership _out4177;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4178;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4176, out _out4177, out _out4178);
                _7991_recursiveGen = _out4176;
                _7992_recOwned = _out4177;
                _7993_recIdents = _out4178;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7991_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4179;
                DCOMPUTF16._IOwnership _out4180;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4179, out _out4180);
                r = _out4179;
                resultingOwnership = _out4180;
                readIdents = _7993_recIdents;
              }
            } else if (_source295.is_Multiset) {
              DAST._IType _7994___mcc_h1000 = _source295.dtor_element;
              {
                RAST._IExpr _7995_recursiveGen;
                DCOMPUTF16._IOwnership _7996_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _7997_recIdents;
                RAST._IExpr _out4181;
                DCOMPUTF16._IOwnership _out4182;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4183;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4181, out _out4182, out _out4183);
                _7995_recursiveGen = _out4181;
                _7996_recOwned = _out4182;
                _7997_recIdents = _out4183;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_7995_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4184;
                DCOMPUTF16._IOwnership _out4185;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4184, out _out4185);
                r = _out4184;
                resultingOwnership = _out4185;
                readIdents = _7997_recIdents;
              }
            } else if (_source295.is_Map) {
              DAST._IType _7998___mcc_h1002 = _source295.dtor_key;
              DAST._IType _7999___mcc_h1003 = _source295.dtor_value;
              {
                RAST._IExpr _8000_recursiveGen;
                DCOMPUTF16._IOwnership _8001_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8002_recIdents;
                RAST._IExpr _out4186;
                DCOMPUTF16._IOwnership _out4187;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4188;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4186, out _out4187, out _out4188);
                _8000_recursiveGen = _out4186;
                _8001_recOwned = _out4187;
                _8002_recIdents = _out4188;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8000_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4189;
                DCOMPUTF16._IOwnership _out4190;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4189, out _out4190);
                r = _out4189;
                resultingOwnership = _out4190;
                readIdents = _8002_recIdents;
              }
            } else if (_source295.is_SetBuilder) {
              DAST._IType _8003___mcc_h1006 = _source295.dtor_element;
              {
                RAST._IExpr _8004_recursiveGen;
                DCOMPUTF16._IOwnership _8005_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8006_recIdents;
                RAST._IExpr _out4191;
                DCOMPUTF16._IOwnership _out4192;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4193;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4191, out _out4192, out _out4193);
                _8004_recursiveGen = _out4191;
                _8005_recOwned = _out4192;
                _8006_recIdents = _out4193;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8004_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4194;
                DCOMPUTF16._IOwnership _out4195;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4194, out _out4195);
                r = _out4194;
                resultingOwnership = _out4195;
                readIdents = _8006_recIdents;
              }
            } else if (_source295.is_MapBuilder) {
              DAST._IType _8007___mcc_h1008 = _source295.dtor_key;
              DAST._IType _8008___mcc_h1009 = _source295.dtor_value;
              {
                RAST._IExpr _8009_recursiveGen;
                DCOMPUTF16._IOwnership _8010_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8011_recIdents;
                RAST._IExpr _out4196;
                DCOMPUTF16._IOwnership _out4197;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4198;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4196, out _out4197, out _out4198);
                _8009_recursiveGen = _out4196;
                _8010_recOwned = _out4197;
                _8011_recIdents = _out4198;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8009_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4199;
                DCOMPUTF16._IOwnership _out4200;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4199, out _out4200);
                r = _out4199;
                resultingOwnership = _out4200;
                readIdents = _8011_recIdents;
              }
            } else if (_source295.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8012___mcc_h1012 = _source295.dtor_args;
              DAST._IType _8013___mcc_h1013 = _source295.dtor_result;
              {
                RAST._IExpr _8014_recursiveGen;
                DCOMPUTF16._IOwnership _8015_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8016_recIdents;
                RAST._IExpr _out4201;
                DCOMPUTF16._IOwnership _out4202;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4203;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4201, out _out4202, out _out4203);
                _8014_recursiveGen = _out4201;
                _8015_recOwned = _out4202;
                _8016_recIdents = _out4203;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8014_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4204;
                DCOMPUTF16._IOwnership _out4205;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4204, out _out4205);
                r = _out4204;
                resultingOwnership = _out4205;
                readIdents = _8016_recIdents;
              }
            } else if (_source295.is_Primitive) {
              DAST._IPrimitive _8017___mcc_h1016 = _source295.dtor_Primitive_a0;
              {
                RAST._IExpr _8018_recursiveGen;
                DCOMPUTF16._IOwnership _8019_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8020_recIdents;
                RAST._IExpr _out4206;
                DCOMPUTF16._IOwnership _out4207;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4208;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4206, out _out4207, out _out4208);
                _8018_recursiveGen = _out4206;
                _8019_recOwned = _out4207;
                _8020_recIdents = _out4208;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8018_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4209;
                DCOMPUTF16._IOwnership _out4210;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4209, out _out4210);
                r = _out4209;
                resultingOwnership = _out4210;
                readIdents = _8020_recIdents;
              }
            } else if (_source295.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8021___mcc_h1018 = _source295.dtor_Passthrough_a0;
              {
                RAST._IExpr _8022_recursiveGen;
                DCOMPUTF16._IOwnership _8023_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8024_recIdents;
                RAST._IExpr _out4211;
                DCOMPUTF16._IOwnership _out4212;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4213;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4211, out _out4212, out _out4213);
                _8022_recursiveGen = _out4211;
                _8023_recOwned = _out4212;
                _8024_recIdents = _out4213;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8022_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4214;
                DCOMPUTF16._IOwnership _out4215;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4214, out _out4215);
                r = _out4214;
                resultingOwnership = _out4215;
                readIdents = _8024_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8025___mcc_h1020 = _source295.dtor_TypeArg_a0;
              {
                RAST._IExpr _8026_recursiveGen;
                DCOMPUTF16._IOwnership _8027_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8028_recIdents;
                RAST._IExpr _out4216;
                DCOMPUTF16._IOwnership _out4217;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4218;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4216, out _out4217, out _out4218);
                _8026_recursiveGen = _out4216;
                _8027_recOwned = _out4217;
                _8028_recIdents = _out4218;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8026_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4219;
                DCOMPUTF16._IOwnership _out4220;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4219, out _out4220);
                r = _out4219;
                resultingOwnership = _out4220;
                readIdents = _8028_recIdents;
              }
            }
          } else if (_source286.is_Bool) {
            DAST._IType _source298 = _6570___mcc_h1;
            if (_source298.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8029___mcc_h1022 = _source298.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _8030___mcc_h1023 = _source298.dtor_typeArgs;
              DAST._IResolvedType _8031___mcc_h1024 = _source298.dtor_resolved;
              DAST._IResolvedType _source299 = _8031___mcc_h1024;
              if (_source299.is_Datatype) {
                DAST._IDatatypeType _8032___mcc_h1028 = _source299.dtor_datatypeType;
                {
                  RAST._IExpr _8033_recursiveGen;
                  DCOMPUTF16._IOwnership _8034_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8035_recIdents;
                  RAST._IExpr _out4221;
                  DCOMPUTF16._IOwnership _out4222;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4223;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4221, out _out4222, out _out4223);
                  _8033_recursiveGen = _out4221;
                  _8034_recOwned = _out4222;
                  _8035_recIdents = _out4223;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8033_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4224;
                  DCOMPUTF16._IOwnership _out4225;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4224, out _out4225);
                  r = _out4224;
                  resultingOwnership = _out4225;
                  readIdents = _8035_recIdents;
                }
              } else if (_source299.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8036___mcc_h1030 = _source299.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _8037___mcc_h1031 = _source299.dtor_attributes;
                {
                  RAST._IExpr _8038_recursiveGen;
                  DCOMPUTF16._IOwnership _8039_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8040_recIdents;
                  RAST._IExpr _out4226;
                  DCOMPUTF16._IOwnership _out4227;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4228;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4226, out _out4227, out _out4228);
                  _8038_recursiveGen = _out4226;
                  _8039_recOwned = _out4227;
                  _8040_recIdents = _out4228;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8038_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4229;
                  DCOMPUTF16._IOwnership _out4230;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4229, out _out4230);
                  r = _out4229;
                  resultingOwnership = _out4230;
                  readIdents = _8040_recIdents;
                }
              } else {
                DAST._IType _8041___mcc_h1034 = _source299.dtor_baseType;
                DAST._INewtypeRange _8042___mcc_h1035 = _source299.dtor_range;
                bool _8043___mcc_h1036 = _source299.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _8044___mcc_h1037 = _source299.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8045_attributes = _8044___mcc_h1037;
                bool _8046_erase = _8043___mcc_h1036;
                DAST._INewtypeRange _8047_range = _8042___mcc_h1035;
                DAST._IType _8048_b = _8041___mcc_h1034;
                {
                  if (object.Equals(_6564_fromTpe, _8048_b)) {
                    RAST._IExpr _8049_recursiveGen;
                    DCOMPUTF16._IOwnership _8050_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8051_recIdents;
                    RAST._IExpr _out4231;
                    DCOMPUTF16._IOwnership _out4232;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4233;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4231, out _out4232, out _out4233);
                    _8049_recursiveGen = _out4231;
                    _8050_recOwned = _out4232;
                    _8051_recIdents = _out4233;
                    Std.Wrappers._IOption<RAST._IType> _8052_potentialRhsType;
                    _8052_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8048_b, _8047_range);
                    Std.Wrappers._IOption<RAST._IType> _source300 = _8052_potentialRhsType;
                    if (_source300.is_None) {
                      if (_8046_erase) {
                        r = _8049_recursiveGen;
                      } else {
                        RAST._IType _8053_rhsType;
                        RAST._IType _out4234;
                        _out4234 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                        _8053_rhsType = _out4234;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8053_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8049_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4235;
                      DCOMPUTF16._IOwnership _out4236;
                      DCOMPUTF16.COMP.FromOwnership(r, _8050_recOwned, expectedOwnership, out _out4235, out _out4236);
                      r = _out4235;
                      resultingOwnership = _out4236;
                    } else {
                      RAST._IType _8054___mcc_h1261 = _source300.dtor_value;
                      RAST._IType _8055_v = _8054___mcc_h1261;
                      r = RAST.Expr.create_ConversionNum(_8055_v, _8049_recursiveGen);
                      RAST._IExpr _out4237;
                      DCOMPUTF16._IOwnership _out4238;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4237, out _out4238);
                      r = _out4237;
                      resultingOwnership = _out4238;
                    }
                    readIdents = _8051_recIdents;
                  } else {
                    RAST._IExpr _out4239;
                    DCOMPUTF16._IOwnership _out4240;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4241;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _8048_b), _8048_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out4239, out _out4240, out _out4241);
                    r = _out4239;
                    resultingOwnership = _out4240;
                    readIdents = _out4241;
                  }
                }
              }
            } else if (_source298.is_Nullable) {
              DAST._IType _8056___mcc_h1042 = _source298.dtor_Nullable_a0;
              {
                RAST._IExpr _8057_recursiveGen;
                DCOMPUTF16._IOwnership _8058_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8059_recIdents;
                RAST._IExpr _out4242;
                DCOMPUTF16._IOwnership _out4243;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4244;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4242, out _out4243, out _out4244);
                _8057_recursiveGen = _out4242;
                _8058_recOwned = _out4243;
                _8059_recIdents = _out4244;
                Dafny.ISequence<Dafny.Rune> _8060_s;
                _8060_s = (_8057_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_8058_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _8060_s = Dafny.Sequence<Dafny.Rune>.Concat(_8060_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _8060_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _8060_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_8060_s);
                RAST._IExpr _out4245;
                DCOMPUTF16._IOwnership _out4246;
                DCOMPUTF16.COMP.FromOwnership(r, _8058_recOwned, expectedOwnership, out _out4245, out _out4246);
                r = _out4245;
                resultingOwnership = _out4246;
                readIdents = _8059_recIdents;
              }
            } else if (_source298.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8061___mcc_h1044 = _source298.dtor_Tuple_a0;
              {
                RAST._IExpr _8062_recursiveGen;
                DCOMPUTF16._IOwnership _8063_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8064_recIdents;
                RAST._IExpr _out4247;
                DCOMPUTF16._IOwnership _out4248;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4249;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4247, out _out4248, out _out4249);
                _8062_recursiveGen = _out4247;
                _8063_recOwned = _out4248;
                _8064_recIdents = _out4249;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8062_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4250;
                DCOMPUTF16._IOwnership _out4251;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4250, out _out4251);
                r = _out4250;
                resultingOwnership = _out4251;
                readIdents = _8064_recIdents;
              }
            } else if (_source298.is_Array) {
              DAST._IType _8065___mcc_h1046 = _source298.dtor_element;
              BigInteger _8066___mcc_h1047 = _source298.dtor_dims;
              {
                RAST._IExpr _8067_recursiveGen;
                DCOMPUTF16._IOwnership _8068_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8069_recIdents;
                RAST._IExpr _out4252;
                DCOMPUTF16._IOwnership _out4253;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4254;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4252, out _out4253, out _out4254);
                _8067_recursiveGen = _out4252;
                _8068_recOwned = _out4253;
                _8069_recIdents = _out4254;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8067_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4255;
                DCOMPUTF16._IOwnership _out4256;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4255, out _out4256);
                r = _out4255;
                resultingOwnership = _out4256;
                readIdents = _8069_recIdents;
              }
            } else if (_source298.is_Seq) {
              DAST._IType _8070___mcc_h1050 = _source298.dtor_element;
              {
                RAST._IExpr _8071_recursiveGen;
                DCOMPUTF16._IOwnership _8072_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8073_recIdents;
                RAST._IExpr _out4257;
                DCOMPUTF16._IOwnership _out4258;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4259;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4257, out _out4258, out _out4259);
                _8071_recursiveGen = _out4257;
                _8072_recOwned = _out4258;
                _8073_recIdents = _out4259;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8071_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4260;
                DCOMPUTF16._IOwnership _out4261;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4260, out _out4261);
                r = _out4260;
                resultingOwnership = _out4261;
                readIdents = _8073_recIdents;
              }
            } else if (_source298.is_Set) {
              DAST._IType _8074___mcc_h1052 = _source298.dtor_element;
              {
                RAST._IExpr _8075_recursiveGen;
                DCOMPUTF16._IOwnership _8076_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8077_recIdents;
                RAST._IExpr _out4262;
                DCOMPUTF16._IOwnership _out4263;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4264;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4262, out _out4263, out _out4264);
                _8075_recursiveGen = _out4262;
                _8076_recOwned = _out4263;
                _8077_recIdents = _out4264;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8075_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4265;
                DCOMPUTF16._IOwnership _out4266;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4265, out _out4266);
                r = _out4265;
                resultingOwnership = _out4266;
                readIdents = _8077_recIdents;
              }
            } else if (_source298.is_Multiset) {
              DAST._IType _8078___mcc_h1054 = _source298.dtor_element;
              {
                RAST._IExpr _8079_recursiveGen;
                DCOMPUTF16._IOwnership _8080_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8081_recIdents;
                RAST._IExpr _out4267;
                DCOMPUTF16._IOwnership _out4268;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4269;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4267, out _out4268, out _out4269);
                _8079_recursiveGen = _out4267;
                _8080_recOwned = _out4268;
                _8081_recIdents = _out4269;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8079_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4270;
                DCOMPUTF16._IOwnership _out4271;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4270, out _out4271);
                r = _out4270;
                resultingOwnership = _out4271;
                readIdents = _8081_recIdents;
              }
            } else if (_source298.is_Map) {
              DAST._IType _8082___mcc_h1056 = _source298.dtor_key;
              DAST._IType _8083___mcc_h1057 = _source298.dtor_value;
              {
                RAST._IExpr _8084_recursiveGen;
                DCOMPUTF16._IOwnership _8085_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8086_recIdents;
                RAST._IExpr _out4272;
                DCOMPUTF16._IOwnership _out4273;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4274;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4272, out _out4273, out _out4274);
                _8084_recursiveGen = _out4272;
                _8085_recOwned = _out4273;
                _8086_recIdents = _out4274;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8084_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4275;
                DCOMPUTF16._IOwnership _out4276;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4275, out _out4276);
                r = _out4275;
                resultingOwnership = _out4276;
                readIdents = _8086_recIdents;
              }
            } else if (_source298.is_SetBuilder) {
              DAST._IType _8087___mcc_h1060 = _source298.dtor_element;
              {
                RAST._IExpr _8088_recursiveGen;
                DCOMPUTF16._IOwnership _8089_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8090_recIdents;
                RAST._IExpr _out4277;
                DCOMPUTF16._IOwnership _out4278;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4279;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4277, out _out4278, out _out4279);
                _8088_recursiveGen = _out4277;
                _8089_recOwned = _out4278;
                _8090_recIdents = _out4279;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8088_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4280;
                DCOMPUTF16._IOwnership _out4281;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4280, out _out4281);
                r = _out4280;
                resultingOwnership = _out4281;
                readIdents = _8090_recIdents;
              }
            } else if (_source298.is_MapBuilder) {
              DAST._IType _8091___mcc_h1062 = _source298.dtor_key;
              DAST._IType _8092___mcc_h1063 = _source298.dtor_value;
              {
                RAST._IExpr _8093_recursiveGen;
                DCOMPUTF16._IOwnership _8094_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8095_recIdents;
                RAST._IExpr _out4282;
                DCOMPUTF16._IOwnership _out4283;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4284;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4282, out _out4283, out _out4284);
                _8093_recursiveGen = _out4282;
                _8094_recOwned = _out4283;
                _8095_recIdents = _out4284;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8093_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4285;
                DCOMPUTF16._IOwnership _out4286;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4285, out _out4286);
                r = _out4285;
                resultingOwnership = _out4286;
                readIdents = _8095_recIdents;
              }
            } else if (_source298.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8096___mcc_h1066 = _source298.dtor_args;
              DAST._IType _8097___mcc_h1067 = _source298.dtor_result;
              {
                RAST._IExpr _8098_recursiveGen;
                DCOMPUTF16._IOwnership _8099_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8100_recIdents;
                RAST._IExpr _out4287;
                DCOMPUTF16._IOwnership _out4288;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4289;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4287, out _out4288, out _out4289);
                _8098_recursiveGen = _out4287;
                _8099_recOwned = _out4288;
                _8100_recIdents = _out4289;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8098_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4290;
                DCOMPUTF16._IOwnership _out4291;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4290, out _out4291);
                r = _out4290;
                resultingOwnership = _out4291;
                readIdents = _8100_recIdents;
              }
            } else if (_source298.is_Primitive) {
              DAST._IPrimitive _8101___mcc_h1070 = _source298.dtor_Primitive_a0;
              {
                RAST._IExpr _8102_recursiveGen;
                DCOMPUTF16._IOwnership _8103_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8104_recIdents;
                RAST._IExpr _out4292;
                DCOMPUTF16._IOwnership _out4293;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4294;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4292, out _out4293, out _out4294);
                _8102_recursiveGen = _out4292;
                _8103_recOwned = _out4293;
                _8104_recIdents = _out4294;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8102_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4295;
                DCOMPUTF16._IOwnership _out4296;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4295, out _out4296);
                r = _out4295;
                resultingOwnership = _out4296;
                readIdents = _8104_recIdents;
              }
            } else if (_source298.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8105___mcc_h1072 = _source298.dtor_Passthrough_a0;
              {
                RAST._IExpr _8106_recursiveGen;
                DCOMPUTF16._IOwnership _8107_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8108_recIdents;
                RAST._IExpr _out4297;
                DCOMPUTF16._IOwnership _out4298;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4299;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4297, out _out4298, out _out4299);
                _8106_recursiveGen = _out4297;
                _8107_recOwned = _out4298;
                _8108_recIdents = _out4299;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8106_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4300;
                DCOMPUTF16._IOwnership _out4301;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4300, out _out4301);
                r = _out4300;
                resultingOwnership = _out4301;
                readIdents = _8108_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8109___mcc_h1074 = _source298.dtor_TypeArg_a0;
              {
                RAST._IExpr _8110_recursiveGen;
                DCOMPUTF16._IOwnership _8111_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8112_recIdents;
                RAST._IExpr _out4302;
                DCOMPUTF16._IOwnership _out4303;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4304;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4302, out _out4303, out _out4304);
                _8110_recursiveGen = _out4302;
                _8111_recOwned = _out4303;
                _8112_recIdents = _out4304;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8110_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4305;
                DCOMPUTF16._IOwnership _out4306;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4305, out _out4306);
                r = _out4305;
                resultingOwnership = _out4306;
                readIdents = _8112_recIdents;
              }
            }
          } else {
            DAST._IType _source301 = _6570___mcc_h1;
            if (_source301.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8113___mcc_h1076 = _source301.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _8114___mcc_h1077 = _source301.dtor_typeArgs;
              DAST._IResolvedType _8115___mcc_h1078 = _source301.dtor_resolved;
              DAST._IResolvedType _source302 = _8115___mcc_h1078;
              if (_source302.is_Datatype) {
                DAST._IDatatypeType _8116___mcc_h1082 = _source302.dtor_datatypeType;
                {
                  RAST._IExpr _8117_recursiveGen;
                  DCOMPUTF16._IOwnership _8118_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8119_recIdents;
                  RAST._IExpr _out4307;
                  DCOMPUTF16._IOwnership _out4308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4309;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4307, out _out4308, out _out4309);
                  _8117_recursiveGen = _out4307;
                  _8118_recOwned = _out4308;
                  _8119_recIdents = _out4309;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8117_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4310;
                  DCOMPUTF16._IOwnership _out4311;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4310, out _out4311);
                  r = _out4310;
                  resultingOwnership = _out4311;
                  readIdents = _8119_recIdents;
                }
              } else if (_source302.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8120___mcc_h1084 = _source302.dtor_path;
                Dafny.ISequence<DAST._IAttribute> _8121___mcc_h1085 = _source302.dtor_attributes;
                {
                  RAST._IExpr _8122_recursiveGen;
                  DCOMPUTF16._IOwnership _8123_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8124_recIdents;
                  RAST._IExpr _out4312;
                  DCOMPUTF16._IOwnership _out4313;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4314;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4312, out _out4313, out _out4314);
                  _8122_recursiveGen = _out4312;
                  _8123_recOwned = _out4313;
                  _8124_recIdents = _out4314;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8122_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4315;
                  DCOMPUTF16._IOwnership _out4316;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4315, out _out4316);
                  r = _out4315;
                  resultingOwnership = _out4316;
                  readIdents = _8124_recIdents;
                }
              } else {
                DAST._IType _8125___mcc_h1088 = _source302.dtor_baseType;
                DAST._INewtypeRange _8126___mcc_h1089 = _source302.dtor_range;
                bool _8127___mcc_h1090 = _source302.dtor_erase;
                Dafny.ISequence<DAST._IAttribute> _8128___mcc_h1091 = _source302.dtor_attributes;
                Dafny.ISequence<DAST._IAttribute> _8129_attributes = _8128___mcc_h1091;
                bool _8130_erase = _8127___mcc_h1090;
                DAST._INewtypeRange _8131_range = _8126___mcc_h1089;
                DAST._IType _8132_b = _8125___mcc_h1088;
                {
                  if (object.Equals(_6564_fromTpe, _8132_b)) {
                    RAST._IExpr _8133_recursiveGen;
                    DCOMPUTF16._IOwnership _8134_recOwned;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8135_recIdents;
                    RAST._IExpr _out4317;
                    DCOMPUTF16._IOwnership _out4318;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4319;
                    DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4317, out _out4318, out _out4319);
                    _8133_recursiveGen = _out4317;
                    _8134_recOwned = _out4318;
                    _8135_recIdents = _out4319;
                    Std.Wrappers._IOption<RAST._IType> _8136_potentialRhsType;
                    _8136_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8132_b, _8131_range);
                    Std.Wrappers._IOption<RAST._IType> _source303 = _8136_potentialRhsType;
                    if (_source303.is_None) {
                      if (_8130_erase) {
                        r = _8133_recursiveGen;
                      } else {
                        RAST._IType _8137_rhsType;
                        RAST._IType _out4320;
                        _out4320 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                        _8137_rhsType = _out4320;
                        r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8137_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8133_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                      }
                      RAST._IExpr _out4321;
                      DCOMPUTF16._IOwnership _out4322;
                      DCOMPUTF16.COMP.FromOwnership(r, _8134_recOwned, expectedOwnership, out _out4321, out _out4322);
                      r = _out4321;
                      resultingOwnership = _out4322;
                    } else {
                      RAST._IType _8138___mcc_h1262 = _source303.dtor_value;
                      RAST._IType _8139_v = _8138___mcc_h1262;
                      r = RAST.Expr.create_ConversionNum(_8139_v, _8133_recursiveGen);
                      RAST._IExpr _out4323;
                      DCOMPUTF16._IOwnership _out4324;
                      DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4323, out _out4324);
                      r = _out4323;
                      resultingOwnership = _out4324;
                    }
                    readIdents = _8135_recIdents;
                  } else {
                    RAST._IExpr _out4325;
                    DCOMPUTF16._IOwnership _out4326;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4327;
                    DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _8132_b), _8132_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out4325, out _out4326, out _out4327);
                    r = _out4325;
                    resultingOwnership = _out4326;
                    readIdents = _out4327;
                  }
                }
              }
            } else if (_source301.is_Nullable) {
              DAST._IType _8140___mcc_h1096 = _source301.dtor_Nullable_a0;
              {
                RAST._IExpr _8141_recursiveGen;
                DCOMPUTF16._IOwnership _8142_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8143_recIdents;
                RAST._IExpr _out4328;
                DCOMPUTF16._IOwnership _out4329;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4330;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4328, out _out4329, out _out4330);
                _8141_recursiveGen = _out4328;
                _8142_recOwned = _out4329;
                _8143_recIdents = _out4330;
                Dafny.ISequence<Dafny.Rune> _8144_s;
                _8144_s = (_8141_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
                if (object.Equals(_8142_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                  _8144_s = Dafny.Sequence<Dafny.Rune>.Concat(_8144_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                }
                _8144_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _8144_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                r = RAST.Expr.create_RawExpr(_8144_s);
                RAST._IExpr _out4331;
                DCOMPUTF16._IOwnership _out4332;
                DCOMPUTF16.COMP.FromOwnership(r, _8142_recOwned, expectedOwnership, out _out4331, out _out4332);
                r = _out4331;
                resultingOwnership = _out4332;
                readIdents = _8143_recIdents;
              }
            } else if (_source301.is_Tuple) {
              Dafny.ISequence<DAST._IType> _8145___mcc_h1098 = _source301.dtor_Tuple_a0;
              {
                RAST._IExpr _8146_recursiveGen;
                DCOMPUTF16._IOwnership _8147_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8148_recIdents;
                RAST._IExpr _out4333;
                DCOMPUTF16._IOwnership _out4334;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4335;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4333, out _out4334, out _out4335);
                _8146_recursiveGen = _out4333;
                _8147_recOwned = _out4334;
                _8148_recIdents = _out4335;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8146_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4336;
                DCOMPUTF16._IOwnership _out4337;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4336, out _out4337);
                r = _out4336;
                resultingOwnership = _out4337;
                readIdents = _8148_recIdents;
              }
            } else if (_source301.is_Array) {
              DAST._IType _8149___mcc_h1100 = _source301.dtor_element;
              BigInteger _8150___mcc_h1101 = _source301.dtor_dims;
              {
                RAST._IExpr _8151_recursiveGen;
                DCOMPUTF16._IOwnership _8152_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8153_recIdents;
                RAST._IExpr _out4338;
                DCOMPUTF16._IOwnership _out4339;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4340;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4338, out _out4339, out _out4340);
                _8151_recursiveGen = _out4338;
                _8152_recOwned = _out4339;
                _8153_recIdents = _out4340;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8151_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4341;
                DCOMPUTF16._IOwnership _out4342;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4341, out _out4342);
                r = _out4341;
                resultingOwnership = _out4342;
                readIdents = _8153_recIdents;
              }
            } else if (_source301.is_Seq) {
              DAST._IType _8154___mcc_h1104 = _source301.dtor_element;
              {
                RAST._IExpr _8155_recursiveGen;
                DCOMPUTF16._IOwnership _8156_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8157_recIdents;
                RAST._IExpr _out4343;
                DCOMPUTF16._IOwnership _out4344;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4345;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4343, out _out4344, out _out4345);
                _8155_recursiveGen = _out4343;
                _8156_recOwned = _out4344;
                _8157_recIdents = _out4345;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8155_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4346;
                DCOMPUTF16._IOwnership _out4347;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4346, out _out4347);
                r = _out4346;
                resultingOwnership = _out4347;
                readIdents = _8157_recIdents;
              }
            } else if (_source301.is_Set) {
              DAST._IType _8158___mcc_h1106 = _source301.dtor_element;
              {
                RAST._IExpr _8159_recursiveGen;
                DCOMPUTF16._IOwnership _8160_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8161_recIdents;
                RAST._IExpr _out4348;
                DCOMPUTF16._IOwnership _out4349;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4350;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4348, out _out4349, out _out4350);
                _8159_recursiveGen = _out4348;
                _8160_recOwned = _out4349;
                _8161_recIdents = _out4350;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8159_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4351;
                DCOMPUTF16._IOwnership _out4352;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4351, out _out4352);
                r = _out4351;
                resultingOwnership = _out4352;
                readIdents = _8161_recIdents;
              }
            } else if (_source301.is_Multiset) {
              DAST._IType _8162___mcc_h1108 = _source301.dtor_element;
              {
                RAST._IExpr _8163_recursiveGen;
                DCOMPUTF16._IOwnership _8164_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8165_recIdents;
                RAST._IExpr _out4353;
                DCOMPUTF16._IOwnership _out4354;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4355;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4353, out _out4354, out _out4355);
                _8163_recursiveGen = _out4353;
                _8164_recOwned = _out4354;
                _8165_recIdents = _out4355;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8163_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4356;
                DCOMPUTF16._IOwnership _out4357;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4356, out _out4357);
                r = _out4356;
                resultingOwnership = _out4357;
                readIdents = _8165_recIdents;
              }
            } else if (_source301.is_Map) {
              DAST._IType _8166___mcc_h1110 = _source301.dtor_key;
              DAST._IType _8167___mcc_h1111 = _source301.dtor_value;
              {
                RAST._IExpr _8168_recursiveGen;
                DCOMPUTF16._IOwnership _8169_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8170_recIdents;
                RAST._IExpr _out4358;
                DCOMPUTF16._IOwnership _out4359;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4360;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4358, out _out4359, out _out4360);
                _8168_recursiveGen = _out4358;
                _8169_recOwned = _out4359;
                _8170_recIdents = _out4360;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8168_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4361;
                DCOMPUTF16._IOwnership _out4362;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4361, out _out4362);
                r = _out4361;
                resultingOwnership = _out4362;
                readIdents = _8170_recIdents;
              }
            } else if (_source301.is_SetBuilder) {
              DAST._IType _8171___mcc_h1114 = _source301.dtor_element;
              {
                RAST._IExpr _8172_recursiveGen;
                DCOMPUTF16._IOwnership _8173_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8174_recIdents;
                RAST._IExpr _out4363;
                DCOMPUTF16._IOwnership _out4364;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4365;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4363, out _out4364, out _out4365);
                _8172_recursiveGen = _out4363;
                _8173_recOwned = _out4364;
                _8174_recIdents = _out4365;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8172_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4366;
                DCOMPUTF16._IOwnership _out4367;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4366, out _out4367);
                r = _out4366;
                resultingOwnership = _out4367;
                readIdents = _8174_recIdents;
              }
            } else if (_source301.is_MapBuilder) {
              DAST._IType _8175___mcc_h1116 = _source301.dtor_key;
              DAST._IType _8176___mcc_h1117 = _source301.dtor_value;
              {
                RAST._IExpr _8177_recursiveGen;
                DCOMPUTF16._IOwnership _8178_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8179_recIdents;
                RAST._IExpr _out4368;
                DCOMPUTF16._IOwnership _out4369;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4370;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4368, out _out4369, out _out4370);
                _8177_recursiveGen = _out4368;
                _8178_recOwned = _out4369;
                _8179_recIdents = _out4370;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8177_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4371;
                DCOMPUTF16._IOwnership _out4372;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4371, out _out4372);
                r = _out4371;
                resultingOwnership = _out4372;
                readIdents = _8179_recIdents;
              }
            } else if (_source301.is_Arrow) {
              Dafny.ISequence<DAST._IType> _8180___mcc_h1120 = _source301.dtor_args;
              DAST._IType _8181___mcc_h1121 = _source301.dtor_result;
              {
                RAST._IExpr _8182_recursiveGen;
                DCOMPUTF16._IOwnership _8183_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8184_recIdents;
                RAST._IExpr _out4373;
                DCOMPUTF16._IOwnership _out4374;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4375;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4373, out _out4374, out _out4375);
                _8182_recursiveGen = _out4373;
                _8183_recOwned = _out4374;
                _8184_recIdents = _out4375;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8182_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4376;
                DCOMPUTF16._IOwnership _out4377;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4376, out _out4377);
                r = _out4376;
                resultingOwnership = _out4377;
                readIdents = _8184_recIdents;
              }
            } else if (_source301.is_Primitive) {
              DAST._IPrimitive _8185___mcc_h1124 = _source301.dtor_Primitive_a0;
              DAST._IPrimitive _source304 = _8185___mcc_h1124;
              if (_source304.is_Int) {
                {
                  RAST._IType _8186_rhsType;
                  RAST._IType _out4378;
                  _out4378 = DCOMPUTF16.COMP.GenType(_6564_fromTpe, true, false);
                  _8186_rhsType = _out4378;
                  RAST._IExpr _8187_recursiveGen;
                  DCOMPUTF16._IOwnership _8188___v85;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8189_recIdents;
                  RAST._IExpr _out4379;
                  DCOMPUTF16._IOwnership _out4380;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4381;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4379, out _out4380, out _out4381);
                  _8187_recursiveGen = _out4379;
                  _8188___v85 = _out4380;
                  _8189_recIdents = _out4381;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::BigInt::from("), (_8187_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)}")));
                  RAST._IExpr _out4382;
                  DCOMPUTF16._IOwnership _out4383;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4382, out _out4383);
                  r = _out4382;
                  resultingOwnership = _out4383;
                  readIdents = _8189_recIdents;
                }
              } else if (_source304.is_Real) {
                {
                  RAST._IExpr _8190_recursiveGen;
                  DCOMPUTF16._IOwnership _8191_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8192_recIdents;
                  RAST._IExpr _out4384;
                  DCOMPUTF16._IOwnership _out4385;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4386;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4384, out _out4385, out _out4386);
                  _8190_recursiveGen = _out4384;
                  _8191_recOwned = _out4385;
                  _8192_recIdents = _out4386;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8190_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4387;
                  DCOMPUTF16._IOwnership _out4388;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4387, out _out4388);
                  r = _out4387;
                  resultingOwnership = _out4388;
                  readIdents = _8192_recIdents;
                }
              } else if (_source304.is_String) {
                {
                  RAST._IExpr _8193_recursiveGen;
                  DCOMPUTF16._IOwnership _8194_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8195_recIdents;
                  RAST._IExpr _out4389;
                  DCOMPUTF16._IOwnership _out4390;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4391;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4389, out _out4390, out _out4391);
                  _8193_recursiveGen = _out4389;
                  _8194_recOwned = _out4390;
                  _8195_recIdents = _out4391;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8193_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4392;
                  DCOMPUTF16._IOwnership _out4393;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4392, out _out4393);
                  r = _out4392;
                  resultingOwnership = _out4393;
                  readIdents = _8195_recIdents;
                }
              } else if (_source304.is_Bool) {
                {
                  RAST._IExpr _8196_recursiveGen;
                  DCOMPUTF16._IOwnership _8197_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8198_recIdents;
                  RAST._IExpr _out4394;
                  DCOMPUTF16._IOwnership _out4395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4396;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4394, out _out4395, out _out4396);
                  _8196_recursiveGen = _out4394;
                  _8197_recOwned = _out4395;
                  _8198_recIdents = _out4396;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8196_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4397;
                  DCOMPUTF16._IOwnership _out4398;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4397, out _out4398);
                  r = _out4397;
                  resultingOwnership = _out4398;
                  readIdents = _8198_recIdents;
                }
              } else {
                {
                  RAST._IExpr _8199_recursiveGen;
                  DCOMPUTF16._IOwnership _8200_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8201_recIdents;
                  RAST._IExpr _out4399;
                  DCOMPUTF16._IOwnership _out4400;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4401;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4399, out _out4400, out _out4401);
                  _8199_recursiveGen = _out4399;
                  _8200_recOwned = _out4400;
                  _8201_recIdents = _out4401;
                  r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8199_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                  RAST._IExpr _out4402;
                  DCOMPUTF16._IOwnership _out4403;
                  DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4402, out _out4403);
                  r = _out4402;
                  resultingOwnership = _out4403;
                  readIdents = _8201_recIdents;
                }
              }
            } else if (_source301.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _8202___mcc_h1126 = _source301.dtor_Passthrough_a0;
              {
                RAST._IExpr _8203_recursiveGen;
                DCOMPUTF16._IOwnership _8204_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8205_recIdents;
                RAST._IExpr _out4404;
                DCOMPUTF16._IOwnership _out4405;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4406;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4404, out _out4405, out _out4406);
                _8203_recursiveGen = _out4404;
                _8204_recOwned = _out4405;
                _8205_recIdents = _out4406;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8203_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4407;
                DCOMPUTF16._IOwnership _out4408;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4407, out _out4408);
                r = _out4407;
                resultingOwnership = _out4408;
                readIdents = _8205_recIdents;
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _8206___mcc_h1128 = _source301.dtor_TypeArg_a0;
              {
                RAST._IExpr _8207_recursiveGen;
                DCOMPUTF16._IOwnership _8208_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8209_recIdents;
                RAST._IExpr _out4409;
                DCOMPUTF16._IOwnership _out4410;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4411;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4409, out _out4410, out _out4411);
                _8207_recursiveGen = _out4409;
                _8208_recOwned = _out4410;
                _8209_recIdents = _out4411;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8207_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4412;
                DCOMPUTF16._IOwnership _out4413;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4412, out _out4413);
                r = _out4412;
                resultingOwnership = _out4413;
                readIdents = _8209_recIdents;
              }
            }
          }
        } else if (_source246.is_Passthrough) {
          Dafny.ISequence<Dafny.Rune> _8210___mcc_h1130 = _source246.dtor_Passthrough_a0;
          DAST._IType _source305 = _6570___mcc_h1;
          if (_source305.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8211___mcc_h1134 = _source305.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8212___mcc_h1135 = _source305.dtor_typeArgs;
            DAST._IResolvedType _8213___mcc_h1136 = _source305.dtor_resolved;
            DAST._IResolvedType _source306 = _8213___mcc_h1136;
            if (_source306.is_Datatype) {
              DAST._IDatatypeType _8214___mcc_h1140 = _source306.dtor_datatypeType;
              {
                RAST._IExpr _8215_recursiveGen;
                DCOMPUTF16._IOwnership _8216_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8217_recIdents;
                RAST._IExpr _out4414;
                DCOMPUTF16._IOwnership _out4415;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4416;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4414, out _out4415, out _out4416);
                _8215_recursiveGen = _out4414;
                _8216_recOwned = _out4415;
                _8217_recIdents = _out4416;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8215_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4417;
                DCOMPUTF16._IOwnership _out4418;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4417, out _out4418);
                r = _out4417;
                resultingOwnership = _out4418;
                readIdents = _8217_recIdents;
              }
            } else if (_source306.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8218___mcc_h1142 = _source306.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8219___mcc_h1143 = _source306.dtor_attributes;
              {
                RAST._IExpr _8220_recursiveGen;
                DCOMPUTF16._IOwnership _8221_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8222_recIdents;
                RAST._IExpr _out4419;
                DCOMPUTF16._IOwnership _out4420;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4421;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4419, out _out4420, out _out4421);
                _8220_recursiveGen = _out4419;
                _8221_recOwned = _out4420;
                _8222_recIdents = _out4421;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8220_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4422;
                DCOMPUTF16._IOwnership _out4423;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4422, out _out4423);
                r = _out4422;
                resultingOwnership = _out4423;
                readIdents = _8222_recIdents;
              }
            } else {
              DAST._IType _8223___mcc_h1146 = _source306.dtor_baseType;
              DAST._INewtypeRange _8224___mcc_h1147 = _source306.dtor_range;
              bool _8225___mcc_h1148 = _source306.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8226___mcc_h1149 = _source306.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8227_attributes = _8226___mcc_h1149;
              bool _8228_erase = _8225___mcc_h1148;
              DAST._INewtypeRange _8229_range = _8224___mcc_h1147;
              DAST._IType _8230_b = _8223___mcc_h1146;
              {
                if (object.Equals(_6564_fromTpe, _8230_b)) {
                  RAST._IExpr _8231_recursiveGen;
                  DCOMPUTF16._IOwnership _8232_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8233_recIdents;
                  RAST._IExpr _out4424;
                  DCOMPUTF16._IOwnership _out4425;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4426;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4424, out _out4425, out _out4426);
                  _8231_recursiveGen = _out4424;
                  _8232_recOwned = _out4425;
                  _8233_recIdents = _out4426;
                  Std.Wrappers._IOption<RAST._IType> _8234_potentialRhsType;
                  _8234_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8230_b, _8229_range);
                  Std.Wrappers._IOption<RAST._IType> _source307 = _8234_potentialRhsType;
                  if (_source307.is_None) {
                    if (_8228_erase) {
                      r = _8231_recursiveGen;
                    } else {
                      RAST._IType _8235_rhsType;
                      RAST._IType _out4427;
                      _out4427 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _8235_rhsType = _out4427;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8235_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8231_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4428;
                    DCOMPUTF16._IOwnership _out4429;
                    DCOMPUTF16.COMP.FromOwnership(r, _8232_recOwned, expectedOwnership, out _out4428, out _out4429);
                    r = _out4428;
                    resultingOwnership = _out4429;
                  } else {
                    RAST._IType _8236___mcc_h1263 = _source307.dtor_value;
                    RAST._IType _8237_v = _8236___mcc_h1263;
                    r = RAST.Expr.create_ConversionNum(_8237_v, _8231_recursiveGen);
                    RAST._IExpr _out4430;
                    DCOMPUTF16._IOwnership _out4431;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4430, out _out4431);
                    r = _out4430;
                    resultingOwnership = _out4431;
                  }
                  readIdents = _8233_recIdents;
                } else {
                  RAST._IExpr _out4432;
                  DCOMPUTF16._IOwnership _out4433;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4434;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _8230_b), _8230_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out4432, out _out4433, out _out4434);
                  r = _out4432;
                  resultingOwnership = _out4433;
                  readIdents = _out4434;
                }
              }
            }
          } else if (_source305.is_Nullable) {
            DAST._IType _8238___mcc_h1154 = _source305.dtor_Nullable_a0;
            {
              RAST._IExpr _8239_recursiveGen;
              DCOMPUTF16._IOwnership _8240_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8241_recIdents;
              RAST._IExpr _out4435;
              DCOMPUTF16._IOwnership _out4436;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4437;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4435, out _out4436, out _out4437);
              _8239_recursiveGen = _out4435;
              _8240_recOwned = _out4436;
              _8241_recIdents = _out4437;
              Dafny.ISequence<Dafny.Rune> _8242_s;
              _8242_s = (_8239_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_8240_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _8242_s = Dafny.Sequence<Dafny.Rune>.Concat(_8242_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _8242_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _8242_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_8242_s);
              RAST._IExpr _out4438;
              DCOMPUTF16._IOwnership _out4439;
              DCOMPUTF16.COMP.FromOwnership(r, _8240_recOwned, expectedOwnership, out _out4438, out _out4439);
              r = _out4438;
              resultingOwnership = _out4439;
              readIdents = _8241_recIdents;
            }
          } else if (_source305.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8243___mcc_h1156 = _source305.dtor_Tuple_a0;
            {
              RAST._IExpr _8244_recursiveGen;
              DCOMPUTF16._IOwnership _8245_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8246_recIdents;
              RAST._IExpr _out4440;
              DCOMPUTF16._IOwnership _out4441;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4442;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4440, out _out4441, out _out4442);
              _8244_recursiveGen = _out4440;
              _8245_recOwned = _out4441;
              _8246_recIdents = _out4442;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8244_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4443;
              DCOMPUTF16._IOwnership _out4444;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4443, out _out4444);
              r = _out4443;
              resultingOwnership = _out4444;
              readIdents = _8246_recIdents;
            }
          } else if (_source305.is_Array) {
            DAST._IType _8247___mcc_h1158 = _source305.dtor_element;
            BigInteger _8248___mcc_h1159 = _source305.dtor_dims;
            {
              RAST._IExpr _8249_recursiveGen;
              DCOMPUTF16._IOwnership _8250_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8251_recIdents;
              RAST._IExpr _out4445;
              DCOMPUTF16._IOwnership _out4446;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4447;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4445, out _out4446, out _out4447);
              _8249_recursiveGen = _out4445;
              _8250_recOwned = _out4446;
              _8251_recIdents = _out4447;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8249_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4448;
              DCOMPUTF16._IOwnership _out4449;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4448, out _out4449);
              r = _out4448;
              resultingOwnership = _out4449;
              readIdents = _8251_recIdents;
            }
          } else if (_source305.is_Seq) {
            DAST._IType _8252___mcc_h1162 = _source305.dtor_element;
            {
              RAST._IExpr _8253_recursiveGen;
              DCOMPUTF16._IOwnership _8254_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8255_recIdents;
              RAST._IExpr _out4450;
              DCOMPUTF16._IOwnership _out4451;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4452;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4450, out _out4451, out _out4452);
              _8253_recursiveGen = _out4450;
              _8254_recOwned = _out4451;
              _8255_recIdents = _out4452;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8253_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4453;
              DCOMPUTF16._IOwnership _out4454;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4453, out _out4454);
              r = _out4453;
              resultingOwnership = _out4454;
              readIdents = _8255_recIdents;
            }
          } else if (_source305.is_Set) {
            DAST._IType _8256___mcc_h1164 = _source305.dtor_element;
            {
              RAST._IExpr _8257_recursiveGen;
              DCOMPUTF16._IOwnership _8258_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8259_recIdents;
              RAST._IExpr _out4455;
              DCOMPUTF16._IOwnership _out4456;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4457;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4455, out _out4456, out _out4457);
              _8257_recursiveGen = _out4455;
              _8258_recOwned = _out4456;
              _8259_recIdents = _out4457;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8257_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4458;
              DCOMPUTF16._IOwnership _out4459;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4458, out _out4459);
              r = _out4458;
              resultingOwnership = _out4459;
              readIdents = _8259_recIdents;
            }
          } else if (_source305.is_Multiset) {
            DAST._IType _8260___mcc_h1166 = _source305.dtor_element;
            {
              RAST._IExpr _8261_recursiveGen;
              DCOMPUTF16._IOwnership _8262_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8263_recIdents;
              RAST._IExpr _out4460;
              DCOMPUTF16._IOwnership _out4461;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4462;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4460, out _out4461, out _out4462);
              _8261_recursiveGen = _out4460;
              _8262_recOwned = _out4461;
              _8263_recIdents = _out4462;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8261_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4463;
              DCOMPUTF16._IOwnership _out4464;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4463, out _out4464);
              r = _out4463;
              resultingOwnership = _out4464;
              readIdents = _8263_recIdents;
            }
          } else if (_source305.is_Map) {
            DAST._IType _8264___mcc_h1168 = _source305.dtor_key;
            DAST._IType _8265___mcc_h1169 = _source305.dtor_value;
            {
              RAST._IExpr _8266_recursiveGen;
              DCOMPUTF16._IOwnership _8267_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8268_recIdents;
              RAST._IExpr _out4465;
              DCOMPUTF16._IOwnership _out4466;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4467;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4465, out _out4466, out _out4467);
              _8266_recursiveGen = _out4465;
              _8267_recOwned = _out4466;
              _8268_recIdents = _out4467;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8266_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4468;
              DCOMPUTF16._IOwnership _out4469;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4468, out _out4469);
              r = _out4468;
              resultingOwnership = _out4469;
              readIdents = _8268_recIdents;
            }
          } else if (_source305.is_SetBuilder) {
            DAST._IType _8269___mcc_h1172 = _source305.dtor_element;
            {
              RAST._IExpr _8270_recursiveGen;
              DCOMPUTF16._IOwnership _8271_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8272_recIdents;
              RAST._IExpr _out4470;
              DCOMPUTF16._IOwnership _out4471;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4472;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4470, out _out4471, out _out4472);
              _8270_recursiveGen = _out4470;
              _8271_recOwned = _out4471;
              _8272_recIdents = _out4472;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8270_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4473;
              DCOMPUTF16._IOwnership _out4474;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4473, out _out4474);
              r = _out4473;
              resultingOwnership = _out4474;
              readIdents = _8272_recIdents;
            }
          } else if (_source305.is_MapBuilder) {
            DAST._IType _8273___mcc_h1174 = _source305.dtor_key;
            DAST._IType _8274___mcc_h1175 = _source305.dtor_value;
            {
              RAST._IExpr _8275_recursiveGen;
              DCOMPUTF16._IOwnership _8276_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8277_recIdents;
              RAST._IExpr _out4475;
              DCOMPUTF16._IOwnership _out4476;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4477;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4475, out _out4476, out _out4477);
              _8275_recursiveGen = _out4475;
              _8276_recOwned = _out4476;
              _8277_recIdents = _out4477;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8275_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4478;
              DCOMPUTF16._IOwnership _out4479;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4478, out _out4479);
              r = _out4478;
              resultingOwnership = _out4479;
              readIdents = _8277_recIdents;
            }
          } else if (_source305.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8278___mcc_h1178 = _source305.dtor_args;
            DAST._IType _8279___mcc_h1179 = _source305.dtor_result;
            {
              RAST._IExpr _8280_recursiveGen;
              DCOMPUTF16._IOwnership _8281_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8282_recIdents;
              RAST._IExpr _out4480;
              DCOMPUTF16._IOwnership _out4481;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4482;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4480, out _out4481, out _out4482);
              _8280_recursiveGen = _out4480;
              _8281_recOwned = _out4481;
              _8282_recIdents = _out4482;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8280_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4483;
              DCOMPUTF16._IOwnership _out4484;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4483, out _out4484);
              r = _out4483;
              resultingOwnership = _out4484;
              readIdents = _8282_recIdents;
            }
          } else if (_source305.is_Primitive) {
            DAST._IPrimitive _8283___mcc_h1182 = _source305.dtor_Primitive_a0;
            DAST._IPrimitive _source308 = _8283___mcc_h1182;
            if (_source308.is_Int) {
              {
                RAST._IType _8284_rhsType;
                RAST._IType _out4485;
                _out4485 = DCOMPUTF16.COMP.GenType(_6564_fromTpe, true, false);
                _8284_rhsType = _out4485;
                RAST._IExpr _8285_recursiveGen;
                DCOMPUTF16._IOwnership _8286___v83;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8287_recIdents;
                RAST._IExpr _out4486;
                DCOMPUTF16._IOwnership _out4487;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4488;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4486, out _out4487, out _out4488);
                _8285_recursiveGen = _out4486;
                _8286___v83 = _out4487;
                _8287_recIdents = _out4488;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyInt{data: ::dafny_runtime::BigInt::from("), (_8285_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")}")));
                RAST._IExpr _out4489;
                DCOMPUTF16._IOwnership _out4490;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4489, out _out4490);
                r = _out4489;
                resultingOwnership = _out4490;
                readIdents = _8287_recIdents;
              }
            } else if (_source308.is_Real) {
              {
                RAST._IExpr _8288_recursiveGen;
                DCOMPUTF16._IOwnership _8289_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8290_recIdents;
                RAST._IExpr _out4491;
                DCOMPUTF16._IOwnership _out4492;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4493;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4491, out _out4492, out _out4493);
                _8288_recursiveGen = _out4491;
                _8289_recOwned = _out4492;
                _8290_recIdents = _out4493;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8288_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4494;
                DCOMPUTF16._IOwnership _out4495;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4494, out _out4495);
                r = _out4494;
                resultingOwnership = _out4495;
                readIdents = _8290_recIdents;
              }
            } else if (_source308.is_String) {
              {
                RAST._IExpr _8291_recursiveGen;
                DCOMPUTF16._IOwnership _8292_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8293_recIdents;
                RAST._IExpr _out4496;
                DCOMPUTF16._IOwnership _out4497;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4498;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4496, out _out4497, out _out4498);
                _8291_recursiveGen = _out4496;
                _8292_recOwned = _out4497;
                _8293_recIdents = _out4498;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8291_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4499;
                DCOMPUTF16._IOwnership _out4500;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4499, out _out4500);
                r = _out4499;
                resultingOwnership = _out4500;
                readIdents = _8293_recIdents;
              }
            } else if (_source308.is_Bool) {
              {
                RAST._IExpr _8294_recursiveGen;
                DCOMPUTF16._IOwnership _8295_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8296_recIdents;
                RAST._IExpr _out4501;
                DCOMPUTF16._IOwnership _out4502;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4503;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4501, out _out4502, out _out4503);
                _8294_recursiveGen = _out4501;
                _8295_recOwned = _out4502;
                _8296_recIdents = _out4503;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8294_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4504;
                DCOMPUTF16._IOwnership _out4505;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4504, out _out4505);
                r = _out4504;
                resultingOwnership = _out4505;
                readIdents = _8296_recIdents;
              }
            } else {
              {
                RAST._IExpr _8297_recursiveGen;
                DCOMPUTF16._IOwnership _8298_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8299_recIdents;
                RAST._IExpr _out4506;
                DCOMPUTF16._IOwnership _out4507;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4508;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4506, out _out4507, out _out4508);
                _8297_recursiveGen = _out4506;
                _8298_recOwned = _out4507;
                _8299_recIdents = _out4508;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8297_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4509;
                DCOMPUTF16._IOwnership _out4510;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4509, out _out4510);
                r = _out4509;
                resultingOwnership = _out4510;
                readIdents = _8299_recIdents;
              }
            }
          } else if (_source305.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8300___mcc_h1184 = _source305.dtor_Passthrough_a0;
            {
              RAST._IExpr _8301_recursiveGen;
              DCOMPUTF16._IOwnership _8302___v88;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8303_recIdents;
              RAST._IExpr _out4511;
              DCOMPUTF16._IOwnership _out4512;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4513;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4511, out _out4512, out _out4513);
              _8301_recursiveGen = _out4511;
              _8302___v88 = _out4512;
              _8303_recIdents = _out4513;
              RAST._IType _8304_toTpeGen;
              RAST._IType _out4514;
              _out4514 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
              _8304_toTpeGen = _out4514;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_8301_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), (_8304_toTpeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
              RAST._IExpr _out4515;
              DCOMPUTF16._IOwnership _out4516;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4515, out _out4516);
              r = _out4515;
              resultingOwnership = _out4516;
              readIdents = _8303_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8305___mcc_h1186 = _source305.dtor_TypeArg_a0;
            {
              RAST._IExpr _8306_recursiveGen;
              DCOMPUTF16._IOwnership _8307_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8308_recIdents;
              RAST._IExpr _out4517;
              DCOMPUTF16._IOwnership _out4518;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4519;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4517, out _out4518, out _out4519);
              _8306_recursiveGen = _out4517;
              _8307_recOwned = _out4518;
              _8308_recIdents = _out4519;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8306_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4520;
              DCOMPUTF16._IOwnership _out4521;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4520, out _out4521);
              r = _out4520;
              resultingOwnership = _out4521;
              readIdents = _8308_recIdents;
            }
          }
        } else {
          Dafny.ISequence<Dafny.Rune> _8309___mcc_h1188 = _source246.dtor_TypeArg_a0;
          DAST._IType _source309 = _6570___mcc_h1;
          if (_source309.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8310___mcc_h1192 = _source309.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _8311___mcc_h1193 = _source309.dtor_typeArgs;
            DAST._IResolvedType _8312___mcc_h1194 = _source309.dtor_resolved;
            DAST._IResolvedType _source310 = _8312___mcc_h1194;
            if (_source310.is_Datatype) {
              DAST._IDatatypeType _8313___mcc_h1198 = _source310.dtor_datatypeType;
              {
                RAST._IExpr _8314_recursiveGen;
                DCOMPUTF16._IOwnership _8315_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8316_recIdents;
                RAST._IExpr _out4522;
                DCOMPUTF16._IOwnership _out4523;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4524;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4522, out _out4523, out _out4524);
                _8314_recursiveGen = _out4522;
                _8315_recOwned = _out4523;
                _8316_recIdents = _out4524;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8314_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4525;
                DCOMPUTF16._IOwnership _out4526;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4525, out _out4526);
                r = _out4525;
                resultingOwnership = _out4526;
                readIdents = _8316_recIdents;
              }
            } else if (_source310.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8317___mcc_h1200 = _source310.dtor_path;
              Dafny.ISequence<DAST._IAttribute> _8318___mcc_h1201 = _source310.dtor_attributes;
              {
                RAST._IExpr _8319_recursiveGen;
                DCOMPUTF16._IOwnership _8320_recOwned;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8321_recIdents;
                RAST._IExpr _out4527;
                DCOMPUTF16._IOwnership _out4528;
                Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4529;
                DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4527, out _out4528, out _out4529);
                _8319_recursiveGen = _out4527;
                _8320_recOwned = _out4528;
                _8321_recIdents = _out4529;
                r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8319_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
                RAST._IExpr _out4530;
                DCOMPUTF16._IOwnership _out4531;
                DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4530, out _out4531);
                r = _out4530;
                resultingOwnership = _out4531;
                readIdents = _8321_recIdents;
              }
            } else {
              DAST._IType _8322___mcc_h1204 = _source310.dtor_baseType;
              DAST._INewtypeRange _8323___mcc_h1205 = _source310.dtor_range;
              bool _8324___mcc_h1206 = _source310.dtor_erase;
              Dafny.ISequence<DAST._IAttribute> _8325___mcc_h1207 = _source310.dtor_attributes;
              Dafny.ISequence<DAST._IAttribute> _8326_attributes = _8325___mcc_h1207;
              bool _8327_erase = _8324___mcc_h1206;
              DAST._INewtypeRange _8328_range = _8323___mcc_h1205;
              DAST._IType _8329_b = _8322___mcc_h1204;
              {
                if (object.Equals(_6564_fromTpe, _8329_b)) {
                  RAST._IExpr _8330_recursiveGen;
                  DCOMPUTF16._IOwnership _8331_recOwned;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8332_recIdents;
                  RAST._IExpr _out4532;
                  DCOMPUTF16._IOwnership _out4533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4534;
                  DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4532, out _out4533, out _out4534);
                  _8330_recursiveGen = _out4532;
                  _8331_recOwned = _out4533;
                  _8332_recIdents = _out4534;
                  Std.Wrappers._IOption<RAST._IType> _8333_potentialRhsType;
                  _8333_potentialRhsType = DCOMPUTF16.COMP.NewtypeToRustType(_8329_b, _8328_range);
                  Std.Wrappers._IOption<RAST._IType> _source311 = _8333_potentialRhsType;
                  if (_source311.is_None) {
                    if (_8327_erase) {
                      r = _8330_recursiveGen;
                    } else {
                      RAST._IType _8334_rhsType;
                      RAST._IType _out4535;
                      _out4535 = DCOMPUTF16.COMP.GenType(_6565_toTpe, true, false);
                      _8334_rhsType = _out4535;
                      r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8334_rhsType)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), (_8330_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
                    }
                    RAST._IExpr _out4536;
                    DCOMPUTF16._IOwnership _out4537;
                    DCOMPUTF16.COMP.FromOwnership(r, _8331_recOwned, expectedOwnership, out _out4536, out _out4537);
                    r = _out4536;
                    resultingOwnership = _out4537;
                  } else {
                    RAST._IType _8335___mcc_h1264 = _source311.dtor_value;
                    RAST._IType _8336_v = _8335___mcc_h1264;
                    r = RAST.Expr.create_ConversionNum(_8336_v, _8330_recursiveGen);
                    RAST._IExpr _out4538;
                    DCOMPUTF16._IOwnership _out4539;
                    DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4538, out _out4539);
                    r = _out4538;
                    resultingOwnership = _out4539;
                  }
                  readIdents = _8332_recIdents;
                } else {
                  RAST._IExpr _out4540;
                  DCOMPUTF16._IOwnership _out4541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4542;
                  DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_6563_expr, _6564_fromTpe, _8329_b), _8329_b, _6565_toTpe), selfIdent, env, expectedOwnership, out _out4540, out _out4541, out _out4542);
                  r = _out4540;
                  resultingOwnership = _out4541;
                  readIdents = _out4542;
                }
              }
            }
          } else if (_source309.is_Nullable) {
            DAST._IType _8337___mcc_h1212 = _source309.dtor_Nullable_a0;
            {
              RAST._IExpr _8338_recursiveGen;
              DCOMPUTF16._IOwnership _8339_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8340_recIdents;
              RAST._IExpr _out4543;
              DCOMPUTF16._IOwnership _out4544;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4545;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4543, out _out4544, out _out4545);
              _8338_recursiveGen = _out4543;
              _8339_recOwned = _out4544;
              _8340_recIdents = _out4545;
              Dafny.ISequence<Dafny.Rune> _8341_s;
              _8341_s = (_8338_recursiveGen)._ToString(DCOMPUTF16.__default.IND);
              if (object.Equals(_8339_recOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                _8341_s = Dafny.Sequence<Dafny.Rune>.Concat(_8341_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
              }
              _8341_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _8341_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              r = RAST.Expr.create_RawExpr(_8341_s);
              RAST._IExpr _out4546;
              DCOMPUTF16._IOwnership _out4547;
              DCOMPUTF16.COMP.FromOwnership(r, _8339_recOwned, expectedOwnership, out _out4546, out _out4547);
              r = _out4546;
              resultingOwnership = _out4547;
              readIdents = _8340_recIdents;
            }
          } else if (_source309.is_Tuple) {
            Dafny.ISequence<DAST._IType> _8342___mcc_h1214 = _source309.dtor_Tuple_a0;
            {
              RAST._IExpr _8343_recursiveGen;
              DCOMPUTF16._IOwnership _8344_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8345_recIdents;
              RAST._IExpr _out4548;
              DCOMPUTF16._IOwnership _out4549;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4550;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4548, out _out4549, out _out4550);
              _8343_recursiveGen = _out4548;
              _8344_recOwned = _out4549;
              _8345_recIdents = _out4550;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8343_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4551;
              DCOMPUTF16._IOwnership _out4552;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4551, out _out4552);
              r = _out4551;
              resultingOwnership = _out4552;
              readIdents = _8345_recIdents;
            }
          } else if (_source309.is_Array) {
            DAST._IType _8346___mcc_h1216 = _source309.dtor_element;
            BigInteger _8347___mcc_h1217 = _source309.dtor_dims;
            {
              RAST._IExpr _8348_recursiveGen;
              DCOMPUTF16._IOwnership _8349_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8350_recIdents;
              RAST._IExpr _out4553;
              DCOMPUTF16._IOwnership _out4554;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4555;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4553, out _out4554, out _out4555);
              _8348_recursiveGen = _out4553;
              _8349_recOwned = _out4554;
              _8350_recIdents = _out4555;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8348_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4556;
              DCOMPUTF16._IOwnership _out4557;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4556, out _out4557);
              r = _out4556;
              resultingOwnership = _out4557;
              readIdents = _8350_recIdents;
            }
          } else if (_source309.is_Seq) {
            DAST._IType _8351___mcc_h1220 = _source309.dtor_element;
            {
              RAST._IExpr _8352_recursiveGen;
              DCOMPUTF16._IOwnership _8353_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8354_recIdents;
              RAST._IExpr _out4558;
              DCOMPUTF16._IOwnership _out4559;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4560;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4558, out _out4559, out _out4560);
              _8352_recursiveGen = _out4558;
              _8353_recOwned = _out4559;
              _8354_recIdents = _out4560;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8352_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4561;
              DCOMPUTF16._IOwnership _out4562;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4561, out _out4562);
              r = _out4561;
              resultingOwnership = _out4562;
              readIdents = _8354_recIdents;
            }
          } else if (_source309.is_Set) {
            DAST._IType _8355___mcc_h1222 = _source309.dtor_element;
            {
              RAST._IExpr _8356_recursiveGen;
              DCOMPUTF16._IOwnership _8357_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8358_recIdents;
              RAST._IExpr _out4563;
              DCOMPUTF16._IOwnership _out4564;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4565;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4563, out _out4564, out _out4565);
              _8356_recursiveGen = _out4563;
              _8357_recOwned = _out4564;
              _8358_recIdents = _out4565;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8356_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4566;
              DCOMPUTF16._IOwnership _out4567;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4566, out _out4567);
              r = _out4566;
              resultingOwnership = _out4567;
              readIdents = _8358_recIdents;
            }
          } else if (_source309.is_Multiset) {
            DAST._IType _8359___mcc_h1224 = _source309.dtor_element;
            {
              RAST._IExpr _8360_recursiveGen;
              DCOMPUTF16._IOwnership _8361_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8362_recIdents;
              RAST._IExpr _out4568;
              DCOMPUTF16._IOwnership _out4569;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4570;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4568, out _out4569, out _out4570);
              _8360_recursiveGen = _out4568;
              _8361_recOwned = _out4569;
              _8362_recIdents = _out4570;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8360_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4571;
              DCOMPUTF16._IOwnership _out4572;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4571, out _out4572);
              r = _out4571;
              resultingOwnership = _out4572;
              readIdents = _8362_recIdents;
            }
          } else if (_source309.is_Map) {
            DAST._IType _8363___mcc_h1226 = _source309.dtor_key;
            DAST._IType _8364___mcc_h1227 = _source309.dtor_value;
            {
              RAST._IExpr _8365_recursiveGen;
              DCOMPUTF16._IOwnership _8366_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8367_recIdents;
              RAST._IExpr _out4573;
              DCOMPUTF16._IOwnership _out4574;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4575;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4573, out _out4574, out _out4575);
              _8365_recursiveGen = _out4573;
              _8366_recOwned = _out4574;
              _8367_recIdents = _out4575;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8365_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4576;
              DCOMPUTF16._IOwnership _out4577;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4576, out _out4577);
              r = _out4576;
              resultingOwnership = _out4577;
              readIdents = _8367_recIdents;
            }
          } else if (_source309.is_SetBuilder) {
            DAST._IType _8368___mcc_h1230 = _source309.dtor_element;
            {
              RAST._IExpr _8369_recursiveGen;
              DCOMPUTF16._IOwnership _8370_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8371_recIdents;
              RAST._IExpr _out4578;
              DCOMPUTF16._IOwnership _out4579;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4580;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4578, out _out4579, out _out4580);
              _8369_recursiveGen = _out4578;
              _8370_recOwned = _out4579;
              _8371_recIdents = _out4580;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8369_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4581;
              DCOMPUTF16._IOwnership _out4582;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4581, out _out4582);
              r = _out4581;
              resultingOwnership = _out4582;
              readIdents = _8371_recIdents;
            }
          } else if (_source309.is_MapBuilder) {
            DAST._IType _8372___mcc_h1232 = _source309.dtor_key;
            DAST._IType _8373___mcc_h1233 = _source309.dtor_value;
            {
              RAST._IExpr _8374_recursiveGen;
              DCOMPUTF16._IOwnership _8375_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8376_recIdents;
              RAST._IExpr _out4583;
              DCOMPUTF16._IOwnership _out4584;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4585;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4583, out _out4584, out _out4585);
              _8374_recursiveGen = _out4583;
              _8375_recOwned = _out4584;
              _8376_recIdents = _out4585;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8374_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4586;
              DCOMPUTF16._IOwnership _out4587;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4586, out _out4587);
              r = _out4586;
              resultingOwnership = _out4587;
              readIdents = _8376_recIdents;
            }
          } else if (_source309.is_Arrow) {
            Dafny.ISequence<DAST._IType> _8377___mcc_h1236 = _source309.dtor_args;
            DAST._IType _8378___mcc_h1237 = _source309.dtor_result;
            {
              RAST._IExpr _8379_recursiveGen;
              DCOMPUTF16._IOwnership _8380_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8381_recIdents;
              RAST._IExpr _out4588;
              DCOMPUTF16._IOwnership _out4589;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4590;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4588, out _out4589, out _out4590);
              _8379_recursiveGen = _out4588;
              _8380_recOwned = _out4589;
              _8381_recIdents = _out4590;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8379_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4591;
              DCOMPUTF16._IOwnership _out4592;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4591, out _out4592);
              r = _out4591;
              resultingOwnership = _out4592;
              readIdents = _8381_recIdents;
            }
          } else if (_source309.is_Primitive) {
            DAST._IPrimitive _8382___mcc_h1240 = _source309.dtor_Primitive_a0;
            {
              RAST._IExpr _8383_recursiveGen;
              DCOMPUTF16._IOwnership _8384_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8385_recIdents;
              RAST._IExpr _out4593;
              DCOMPUTF16._IOwnership _out4594;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4595;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4593, out _out4594, out _out4595);
              _8383_recursiveGen = _out4593;
              _8384_recOwned = _out4594;
              _8385_recIdents = _out4595;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8383_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4596;
              DCOMPUTF16._IOwnership _out4597;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4596, out _out4597);
              r = _out4596;
              resultingOwnership = _out4597;
              readIdents = _8385_recIdents;
            }
          } else if (_source309.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _8386___mcc_h1242 = _source309.dtor_Passthrough_a0;
            {
              RAST._IExpr _8387_recursiveGen;
              DCOMPUTF16._IOwnership _8388_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8389_recIdents;
              RAST._IExpr _out4598;
              DCOMPUTF16._IOwnership _out4599;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4600;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4598, out _out4599, out _out4600);
              _8387_recursiveGen = _out4598;
              _8388_recOwned = _out4599;
              _8389_recIdents = _out4600;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8387_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4601;
              DCOMPUTF16._IOwnership _out4602;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4601, out _out4602);
              r = _out4601;
              resultingOwnership = _out4602;
              readIdents = _8389_recIdents;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8390___mcc_h1244 = _source309.dtor_TypeArg_a0;
            {
              RAST._IExpr _8391_recursiveGen;
              DCOMPUTF16._IOwnership _8392_recOwned;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8393_recIdents;
              RAST._IExpr _out4603;
              DCOMPUTF16._IOwnership _out4604;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4605;
              DCOMPUTF16.COMP.GenExpr(_6563_expr, selfIdent, env, expectedOwnership, out _out4603, out _out4604, out _out4605);
              _8391_recursiveGen = _out4603;
              _8392_recOwned = _out4604;
              _8393_recIdents = _out4605;
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8391_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)")));
              RAST._IExpr _out4606;
              DCOMPUTF16._IOwnership _out4607;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4606, out _out4607);
              r = _out4606;
              resultingOwnership = _out4607;
              readIdents = _8393_recIdents;
            }
          }
        }
      }
      return ;
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, DCOMPUTF16._IEnvironment env, DCOMPUTF16._IOwnership expectedOwnership, out RAST._IExpr r, out DCOMPUTF16._IOwnership resultingOwnership, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents)
    {
      r = RAST.Expr.Default();
      resultingOwnership = DCOMPUTF16.Ownership.Default();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source312 = e;
      if (_source312.is_Literal) {
        DAST._ILiteral _8394___mcc_h0 = _source312.dtor_Literal_a0;
        RAST._IExpr _out4608;
        DCOMPUTF16._IOwnership _out4609;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4610;
        DCOMPUTF16.COMP.GenExprLiteral(e, selfIdent, env, expectedOwnership, out _out4608, out _out4609, out _out4610);
        r = _out4608;
        resultingOwnership = _out4609;
        readIdents = _out4610;
      } else if (_source312.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _8395___mcc_h1 = _source312.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _8396_name = _8395___mcc_h1;
        {
          r = RAST.Expr.create_Identifier(DCOMPUTF16.__default.escapeIdent(_8396_name));
          bool _8397_currentlyBorrowed;
          _8397_currentlyBorrowed = (env).IsBorrowed(_8396_name);
          if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed())) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowedMut())) {
            r = RAST.__default.BorrowMut(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
          } else if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
            r = RAST.__default.Clone(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
          } else if (_8397_currentlyBorrowed) {
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          } else {
            r = RAST.__default.Borrow(r);
            resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8396_name);
          return ;
        }
      } else if (_source312.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8398___mcc_h2 = _source312.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8399_path = _8398___mcc_h2;
        {
          RAST._IExpr _out4611;
          _out4611 = DCOMPUTF16.COMP.GenPathExpr(_8399_path);
          r = _out4611;
          RAST._IExpr _out4612;
          DCOMPUTF16._IOwnership _out4613;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4612, out _out4613);
          r = _out4612;
          resultingOwnership = _out4613;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source312.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _8400___mcc_h3 = _source312.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _8401_values = _8400___mcc_h3;
        {
          Dafny.ISequence<Dafny.Rune> _8402_s;
          _8402_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8403_i;
          _8403_i = BigInteger.Zero;
          while ((_8403_i) < (new BigInteger((_8401_values).Count))) {
            if ((_8403_i).Sign == 1) {
              _8402_s = Dafny.Sequence<Dafny.Rune>.Concat(_8402_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            RAST._IExpr _8404_recursiveGen;
            DCOMPUTF16._IOwnership _8405___v91;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8406_recIdents;
            RAST._IExpr _out4614;
            DCOMPUTF16._IOwnership _out4615;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4616;
            DCOMPUTF16.COMP.GenExpr((_8401_values).Select(_8403_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4614, out _out4615, out _out4616);
            _8404_recursiveGen = _out4614;
            _8405___v91 = _out4615;
            _8406_recIdents = _out4616;
            _8402_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8402_s, (_8404_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8406_recIdents);
            _8403_i = (_8403_i) + (BigInteger.One);
          }
          _8402_s = Dafny.Sequence<Dafny.Rune>.Concat(_8402_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          r = RAST.Expr.create_RawExpr(_8402_s);
          RAST._IExpr _out4617;
          DCOMPUTF16._IOwnership _out4618;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4617, out _out4618);
          r = _out4617;
          resultingOwnership = _out4618;
          return ;
        }
      } else if (_source312.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8407___mcc_h4 = _source312.dtor_path;
        Dafny.ISequence<DAST._IType> _8408___mcc_h5 = _source312.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _8409___mcc_h6 = _source312.dtor_args;
        Dafny.ISequence<DAST._IExpression> _8410_args = _8409___mcc_h6;
        Dafny.ISequence<DAST._IType> _8411_typeArgs = _8408___mcc_h5;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8412_path = _8407___mcc_h4;
        {
          RAST._IExpr _out4619;
          _out4619 = DCOMPUTF16.COMP.GenPathExpr(_8412_path);
          r = _out4619;
          if ((new BigInteger((_8411_typeArgs).Count)).Sign == 1) {
            Dafny.ISequence<RAST._IType> _8413_typeExprs;
            _8413_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
            BigInteger _hi12 = new BigInteger((_8411_typeArgs).Count);
            for (BigInteger _8414_i = BigInteger.Zero; _8414_i < _hi12; _8414_i++) {
              RAST._IType _8415_typeExpr;
              RAST._IType _out4620;
              _out4620 = DCOMPUTF16.COMP.GenType((_8411_typeArgs).Select(_8414_i), false, false);
              _8415_typeExpr = _out4620;
              _8413_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_8413_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_8415_typeExpr));
            }
            r = (r).ApplyType(_8413_typeExprs);
          }
          r = (r).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IExpr> _8416_arguments;
          _8416_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _hi13 = new BigInteger((_8410_args).Count);
          for (BigInteger _8417_i = BigInteger.Zero; _8417_i < _hi13; _8417_i++) {
            RAST._IExpr _8418_recursiveGen;
            DCOMPUTF16._IOwnership _8419___v92;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8420_recIdents;
            RAST._IExpr _out4621;
            DCOMPUTF16._IOwnership _out4622;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4623;
            DCOMPUTF16.COMP.GenExpr((_8410_args).Select(_8417_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4621, out _out4622, out _out4623);
            _8418_recursiveGen = _out4621;
            _8419___v92 = _out4622;
            _8420_recIdents = _out4623;
            _8416_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_8416_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_8418_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8420_recIdents);
          }
          r = (r).Apply(_8416_arguments);
          r = RAST.__default.RcNew(r);
          RAST._IExpr _out4624;
          DCOMPUTF16._IOwnership _out4625;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4624, out _out4625);
          r = _out4624;
          resultingOwnership = _out4625;
          return ;
        }
      } else if (_source312.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _8421___mcc_h7 = _source312.dtor_dims;
        DAST._IType _8422___mcc_h8 = _source312.dtor_typ;
        DAST._IType _8423_typ = _8422___mcc_h8;
        Dafny.ISequence<DAST._IExpression> _8424_dims = _8421___mcc_h7;
        {
          BigInteger _8425_i;
          _8425_i = (new BigInteger((_8424_dims).Count)) - (BigInteger.One);
          RAST._IType _8426_genTyp;
          RAST._IType _out4626;
          _out4626 = DCOMPUTF16.COMP.GenType(_8423_typ, false, false);
          _8426_genTyp = _out4626;
          Dafny.ISequence<Dafny.Rune> _8427_s;
          _8427_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_8426_genTyp)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_8425_i).Sign != -1) {
            RAST._IExpr _8428_recursiveGen;
            DCOMPUTF16._IOwnership _8429___v93;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8430_recIdents;
            RAST._IExpr _out4627;
            DCOMPUTF16._IOwnership _out4628;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4629;
            DCOMPUTF16.COMP.GenExpr((_8424_dims).Select(_8425_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4627, out _out4628, out _out4629);
            _8428_recursiveGen = _out4627;
            _8429___v93 = _out4628;
            _8430_recIdents = _out4629;
            _8427_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), _8427_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), (_8428_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8430_recIdents);
            _8425_i = (_8425_i) - (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(_8427_s);
          RAST._IExpr _out4630;
          DCOMPUTF16._IOwnership _out4631;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4630, out _out4631);
          r = _out4630;
          resultingOwnership = _out4631;
          return ;
        }
      } else if (_source312.is_DatatypeValue) {
        DAST._IDatatypeType _8431___mcc_h9 = _source312.dtor_datatypeType;
        Dafny.ISequence<DAST._IType> _8432___mcc_h10 = _source312.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _8433___mcc_h11 = _source312.dtor_variant;
        bool _8434___mcc_h12 = _source312.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8435___mcc_h13 = _source312.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8436_values = _8435___mcc_h13;
        bool _8437_isCo = _8434___mcc_h12;
        Dafny.ISequence<Dafny.Rune> _8438_variant = _8433___mcc_h11;
        Dafny.ISequence<DAST._IType> _8439_typeArgs = _8432___mcc_h10;
        DAST._IDatatypeType _8440_datatypeType = _8431___mcc_h9;
        {
          RAST._IExpr _out4632;
          _out4632 = DCOMPUTF16.COMP.GenPathExpr((_8440_datatypeType).dtor_path);
          r = _out4632;
          Dafny.ISequence<RAST._IType> _8441_genTypeArgs;
          _8441_genTypeArgs = Dafny.Sequence<RAST._IType>.FromElements();
          BigInteger _hi14 = new BigInteger((_8439_typeArgs).Count);
          for (BigInteger _8442_i = BigInteger.Zero; _8442_i < _hi14; _8442_i++) {
            RAST._IType _8443_typeExpr;
            RAST._IType _out4633;
            _out4633 = DCOMPUTF16.COMP.GenType((_8439_typeArgs).Select(_8442_i), false, false);
            _8443_typeExpr = _out4633;
            _8441_genTypeArgs = Dafny.Sequence<RAST._IType>.Concat(_8441_genTypeArgs, Dafny.Sequence<RAST._IType>.FromElements(_8443_typeExpr));
          }
          if ((new BigInteger((_8439_typeArgs).Count)).Sign == 1) {
            r = (r).ApplyType(_8441_genTypeArgs);
          }
          r = (r).MSel(DCOMPUTF16.__default.escapeIdent(_8438_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IAssignIdentifier> _8444_assignments;
          _8444_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
          BigInteger _hi15 = new BigInteger((_8436_values).Count);
          for (BigInteger _8445_i = BigInteger.Zero; _8445_i < _hi15; _8445_i++) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs55 = (_8436_values).Select(_8445_i);
            Dafny.ISequence<Dafny.Rune> _8446_name = _let_tmp_rhs55.dtor__0;
            DAST._IExpression _8447_value = _let_tmp_rhs55.dtor__1;
            if (_8437_isCo) {
              RAST._IExpr _8448_recursiveGen;
              DCOMPUTF16._IOwnership _8449___v94;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8450_recIdents;
              RAST._IExpr _out4634;
              DCOMPUTF16._IOwnership _out4635;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4636;
              DCOMPUTF16.COMP.GenExpr(_8447_value, selfIdent, DCOMPUTF16.Environment.Empty(), DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4634, out _out4635, out _out4636);
              _8448_recursiveGen = _out4634;
              _8449___v94 = _out4635;
              _8450_recIdents = _out4636;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8450_recIdents);
              Dafny.ISequence<Dafny.Rune> _8451_allReadCloned;
              _8451_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_8450_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _8452_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_4 in (_8450_recIdents).Elements) {
                  _8452_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_4;
                  if ((_8450_recIdents).Contains(_8452_next)) {
                    goto after__ASSIGN_SUCH_THAT_4;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 2796)");
              after__ASSIGN_SUCH_THAT_4: ;
                _8451_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_8451_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_8452_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_8452_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _8450_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_8450_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8452_next));
              }
              Dafny.ISequence<Dafny.Rune> _8453_assigned;
              _8453_assigned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n"), _8451_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), (_8448_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
              _8444_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_8444_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(_8446_name), RAST.Expr.create_RawExpr(_8453_assigned))));
            } else {
              RAST._IExpr _8454_recursiveGen;
              DCOMPUTF16._IOwnership _8455___v95;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8456_recIdents;
              RAST._IExpr _out4637;
              DCOMPUTF16._IOwnership _out4638;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4639;
              DCOMPUTF16.COMP.GenExpr(_8447_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4637, out _out4638, out _out4639);
              _8454_recursiveGen = _out4637;
              _8455___v95 = _out4638;
              _8456_recIdents = _out4639;
              _8444_assignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_8444_assignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMPUTF16.__default.escapeIdent(_8446_name), _8454_recursiveGen)));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8456_recIdents);
            }
          }
          r = RAST.Expr.create_StructBuild(r, _8444_assignments);
          if (DCOMPUTF16.COMP.IsRcWrapped((_8440_datatypeType).dtor_attributes)) {
            r = RAST.__default.RcNew(r);
          }
          RAST._IExpr _out4640;
          DCOMPUTF16._IOwnership _out4641;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4640, out _out4641);
          r = _out4640;
          resultingOwnership = _out4641;
          return ;
        }
      } else if (_source312.is_Convert) {
        DAST._IExpression _8457___mcc_h14 = _source312.dtor_value;
        DAST._IType _8458___mcc_h15 = _source312.dtor_from;
        DAST._IType _8459___mcc_h16 = _source312.dtor_typ;
        {
          RAST._IExpr _out4642;
          DCOMPUTF16._IOwnership _out4643;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4644;
          DCOMPUTF16.COMP.GenExprConvert(e, selfIdent, env, expectedOwnership, out _out4642, out _out4643, out _out4644);
          r = _out4642;
          resultingOwnership = _out4643;
          readIdents = _out4644;
        }
      } else if (_source312.is_SeqConstruct) {
        DAST._IExpression _8460___mcc_h17 = _source312.dtor_length;
        DAST._IExpression _8461___mcc_h18 = _source312.dtor_elem;
        DAST._IExpression _8462_expr = _8461___mcc_h18;
        DAST._IExpression _8463_length = _8460___mcc_h17;
        {
          RAST._IExpr _8464_recursiveGen;
          DCOMPUTF16._IOwnership _8465___v99;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8466_recIdents;
          RAST._IExpr _out4645;
          DCOMPUTF16._IOwnership _out4646;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4647;
          DCOMPUTF16.COMP.GenExpr(_8462_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4645, out _out4646, out _out4647);
          _8464_recursiveGen = _out4645;
          _8465___v99 = _out4646;
          _8466_recIdents = _out4647;
          RAST._IExpr _8467_lengthGen;
          DCOMPUTF16._IOwnership _8468___v100;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8469_lengthIdents;
          RAST._IExpr _out4648;
          DCOMPUTF16._IOwnership _out4649;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4650;
          DCOMPUTF16.COMP.GenExpr(_8463_length, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4648, out _out4649, out _out4650);
          _8467_lengthGen = _out4648;
          _8468___v100 = _out4649;
          _8469_lengthIdents = _out4650;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), (_8464_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), (_8467_lengthGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<::dafny_runtime::Sequence<_>>()\n}")));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8466_recIdents, _8469_lengthIdents);
          RAST._IExpr _out4651;
          DCOMPUTF16._IOwnership _out4652;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4651, out _out4652);
          r = _out4651;
          resultingOwnership = _out4652;
          return ;
        }
      } else if (_source312.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _8470___mcc_h19 = _source312.dtor_elements;
        DAST._IType _8471___mcc_h20 = _source312.dtor_typ;
        DAST._IType _8472_typ = _8471___mcc_h20;
        Dafny.ISequence<DAST._IExpression> _8473_exprs = _8470___mcc_h19;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          RAST._IType _8474_genTpe;
          RAST._IType _out4653;
          _out4653 = DCOMPUTF16.COMP.GenType(_8472_typ, false, false);
          _8474_genTpe = _out4653;
          BigInteger _8475_i;
          _8475_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _8476_args;
          _8476_args = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_8475_i) < (new BigInteger((_8473_exprs).Count))) {
            RAST._IExpr _8477_recursiveGen;
            DCOMPUTF16._IOwnership _8478___v101;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8479_recIdents;
            RAST._IExpr _out4654;
            DCOMPUTF16._IOwnership _out4655;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4656;
            DCOMPUTF16.COMP.GenExpr((_8473_exprs).Select(_8475_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4654, out _out4655, out _out4656);
            _8477_recursiveGen = _out4654;
            _8478___v101 = _out4655;
            _8479_recIdents = _out4656;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8479_recIdents);
            _8476_args = Dafny.Sequence<RAST._IExpr>.Concat(_8476_args, Dafny.Sequence<RAST._IExpr>.FromElements(_8477_recursiveGen));
            _8475_i = (_8475_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("seq!"))).Apply(_8476_args);
          if ((new BigInteger((_8476_args).Count)).Sign == 0) {
            r = RAST.Expr.create_TypeAscription(r, ((RAST.__default.dafny__runtime__type).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Sequence"))).Apply1(_8474_genTpe));
          }
          RAST._IExpr _out4657;
          DCOMPUTF16._IOwnership _out4658;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4657, out _out4658);
          r = _out4657;
          resultingOwnership = _out4658;
          return ;
        }
      } else if (_source312.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _8480___mcc_h21 = _source312.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _8481_exprs = _8480___mcc_h21;
        {
          Dafny.ISequence<RAST._IExpr> _8482_generatedValues;
          _8482_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8483_i;
          _8483_i = BigInteger.Zero;
          while ((_8483_i) < (new BigInteger((_8481_exprs).Count))) {
            RAST._IExpr _8484_recursiveGen;
            DCOMPUTF16._IOwnership _8485___v102;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8486_recIdents;
            RAST._IExpr _out4659;
            DCOMPUTF16._IOwnership _out4660;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4661;
            DCOMPUTF16.COMP.GenExpr((_8481_exprs).Select(_8483_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4659, out _out4660, out _out4661);
            _8484_recursiveGen = _out4659;
            _8485___v102 = _out4660;
            _8486_recIdents = _out4661;
            _8482_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_8482_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_8484_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8486_recIdents);
            _8483_i = (_8483_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("set!"))).Apply(_8482_generatedValues);
          RAST._IExpr _out4662;
          DCOMPUTF16._IOwnership _out4663;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4662, out _out4663);
          r = _out4662;
          resultingOwnership = _out4663;
          return ;
        }
      } else if (_source312.is_MultisetValue) {
        Dafny.ISequence<DAST._IExpression> _8487___mcc_h22 = _source312.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _8488_exprs = _8487___mcc_h22;
        {
          Dafny.ISequence<RAST._IExpr> _8489_generatedValues;
          _8489_generatedValues = Dafny.Sequence<RAST._IExpr>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8490_i;
          _8490_i = BigInteger.Zero;
          while ((_8490_i) < (new BigInteger((_8488_exprs).Count))) {
            RAST._IExpr _8491_recursiveGen;
            DCOMPUTF16._IOwnership _8492___v103;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8493_recIdents;
            RAST._IExpr _out4664;
            DCOMPUTF16._IOwnership _out4665;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4666;
            DCOMPUTF16.COMP.GenExpr((_8488_exprs).Select(_8490_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4664, out _out4665, out _out4666);
            _8491_recursiveGen = _out4664;
            _8492___v103 = _out4665;
            _8493_recIdents = _out4666;
            _8489_generatedValues = Dafny.Sequence<RAST._IExpr>.Concat(_8489_generatedValues, Dafny.Sequence<RAST._IExpr>.FromElements(_8491_recursiveGen));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8493_recIdents);
            _8490_i = (_8490_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("multiset!"))).Apply(_8489_generatedValues);
          RAST._IExpr _out4667;
          DCOMPUTF16._IOwnership _out4668;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4667, out _out4668);
          r = _out4667;
          resultingOwnership = _out4668;
          return ;
        }
      } else if (_source312.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8494___mcc_h23 = _source312.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8495_mapElems = _8494___mcc_h23;
        {
          Dafny.ISequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>> _8496_generatedValues;
          _8496_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _8497_i;
          _8497_i = BigInteger.Zero;
          while ((_8497_i) < (new BigInteger((_8495_mapElems).Count))) {
            RAST._IExpr _8498_recursiveGenKey;
            DCOMPUTF16._IOwnership _8499___v105;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8500_recIdentsKey;
            RAST._IExpr _out4669;
            DCOMPUTF16._IOwnership _out4670;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4671;
            DCOMPUTF16.COMP.GenExpr(((_8495_mapElems).Select(_8497_i)).dtor__0, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4669, out _out4670, out _out4671);
            _8498_recursiveGenKey = _out4669;
            _8499___v105 = _out4670;
            _8500_recIdentsKey = _out4671;
            RAST._IExpr _8501_recursiveGenValue;
            DCOMPUTF16._IOwnership _8502___v106;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8503_recIdentsValue;
            RAST._IExpr _out4672;
            DCOMPUTF16._IOwnership _out4673;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4674;
            DCOMPUTF16.COMP.GenExpr(((_8495_mapElems).Select(_8497_i)).dtor__1, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4672, out _out4673, out _out4674);
            _8501_recursiveGenValue = _out4672;
            _8502___v106 = _out4673;
            _8503_recIdentsValue = _out4674;
            _8496_generatedValues = Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.Concat(_8496_generatedValues, Dafny.Sequence<_System._ITuple2<RAST._IExpr, RAST._IExpr>>.FromElements(_System.Tuple2<RAST._IExpr, RAST._IExpr>.create(_8498_recursiveGenKey, _8501_recursiveGenValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _8500_recIdentsKey), _8503_recIdentsValue);
            _8497_i = (_8497_i) + (BigInteger.One);
          }
          _8497_i = BigInteger.Zero;
          Dafny.ISequence<RAST._IExpr> _8504_arguments;
          _8504_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          while ((_8497_i) < (new BigInteger((_8496_generatedValues).Count))) {
            RAST._IExpr _8505_genKey;
            _8505_genKey = ((_8496_generatedValues).Select(_8497_i)).dtor__0;
            RAST._IExpr _8506_genValue;
            _8506_genValue = ((_8496_generatedValues).Select(_8497_i)).dtor__1;
            _8504_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_8504_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(RAST.Expr.create_BinaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("=>"), _8505_genKey, _8506_genValue, DAST.Format.BinOpFormat.create_NoFormat())));
            _8497_i = (_8497_i) + (BigInteger.One);
          }
          r = ((RAST.__default.dafny__runtime).MSel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("map!"))).Apply(_8504_arguments);
          RAST._IExpr _out4675;
          DCOMPUTF16._IOwnership _out4676;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4675, out _out4676);
          r = _out4675;
          resultingOwnership = _out4676;
          return ;
        }
      } else if (_source312.is_MapBuilder) {
        DAST._IType _8507___mcc_h24 = _source312.dtor_keyType;
        DAST._IType _8508___mcc_h25 = _source312.dtor_valueType;
        DAST._IType _8509_valueType = _8508___mcc_h25;
        DAST._IType _8510_keyType = _8507___mcc_h24;
        {
          RAST._IType _8511_kType;
          RAST._IType _out4677;
          _out4677 = DCOMPUTF16.COMP.GenType(_8510_keyType, false, false);
          _8511_kType = _out4677;
          RAST._IType _8512_vType;
          RAST._IType _out4678;
          _out4678 = DCOMPUTF16.COMP.GenType(_8509_valueType, false, false);
          _8512_vType = _out4678;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::MapBuilder::<"), (_8511_kType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_8512_vType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out4679;
          DCOMPUTF16._IOwnership _out4680;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4679, out _out4680);
          r = _out4679;
          resultingOwnership = _out4680;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source312.is_SeqUpdate) {
        DAST._IExpression _8513___mcc_h26 = _source312.dtor_expr;
        DAST._IExpression _8514___mcc_h27 = _source312.dtor_indexExpr;
        DAST._IExpression _8515___mcc_h28 = _source312.dtor_value;
        DAST._IExpression _8516_value = _8515___mcc_h28;
        DAST._IExpression _8517_index = _8514___mcc_h27;
        DAST._IExpression _8518_expr = _8513___mcc_h26;
        {
          RAST._IExpr _8519_exprR;
          DCOMPUTF16._IOwnership _8520___v107;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8521_exprIdents;
          RAST._IExpr _out4681;
          DCOMPUTF16._IOwnership _out4682;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4683;
          DCOMPUTF16.COMP.GenExpr(_8518_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4681, out _out4682, out _out4683);
          _8519_exprR = _out4681;
          _8520___v107 = _out4682;
          _8521_exprIdents = _out4683;
          RAST._IExpr _8522_indexR;
          DCOMPUTF16._IOwnership _8523_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8524_indexIdents;
          RAST._IExpr _out4684;
          DCOMPUTF16._IOwnership _out4685;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4686;
          DCOMPUTF16.COMP.GenExpr(_8517_index, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4684, out _out4685, out _out4686);
          _8522_indexR = _out4684;
          _8523_indexOwnership = _out4685;
          _8524_indexIdents = _out4686;
          RAST._IExpr _8525_valueR;
          DCOMPUTF16._IOwnership _8526_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8527_valueIdents;
          RAST._IExpr _out4687;
          DCOMPUTF16._IOwnership _out4688;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4689;
          DCOMPUTF16.COMP.GenExpr(_8516_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4687, out _out4688, out _out4689);
          _8525_valueR = _out4687;
          _8526_valueOwnership = _out4688;
          _8527_valueIdents = _out4689;
          r = ((_8519_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8522_indexR, _8525_valueR));
          RAST._IExpr _out4690;
          DCOMPUTF16._IOwnership _out4691;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4690, out _out4691);
          r = _out4690;
          resultingOwnership = _out4691;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8521_exprIdents, _8524_indexIdents), _8527_valueIdents);
          return ;
        }
      } else if (_source312.is_MapUpdate) {
        DAST._IExpression _8528___mcc_h29 = _source312.dtor_expr;
        DAST._IExpression _8529___mcc_h30 = _source312.dtor_indexExpr;
        DAST._IExpression _8530___mcc_h31 = _source312.dtor_value;
        DAST._IExpression _8531_value = _8530___mcc_h31;
        DAST._IExpression _8532_index = _8529___mcc_h30;
        DAST._IExpression _8533_expr = _8528___mcc_h29;
        {
          RAST._IExpr _8534_exprR;
          DCOMPUTF16._IOwnership _8535___v108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8536_exprIdents;
          RAST._IExpr _out4692;
          DCOMPUTF16._IOwnership _out4693;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4694;
          DCOMPUTF16.COMP.GenExpr(_8533_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4692, out _out4693, out _out4694);
          _8534_exprR = _out4692;
          _8535___v108 = _out4693;
          _8536_exprIdents = _out4694;
          RAST._IExpr _8537_indexR;
          DCOMPUTF16._IOwnership _8538_indexOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8539_indexIdents;
          RAST._IExpr _out4695;
          DCOMPUTF16._IOwnership _out4696;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4697;
          DCOMPUTF16.COMP.GenExpr(_8532_index, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4695, out _out4696, out _out4697);
          _8537_indexR = _out4695;
          _8538_indexOwnership = _out4696;
          _8539_indexIdents = _out4697;
          RAST._IExpr _8540_valueR;
          DCOMPUTF16._IOwnership _8541_valueOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8542_valueIdents;
          RAST._IExpr _out4698;
          DCOMPUTF16._IOwnership _out4699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4700;
          DCOMPUTF16.COMP.GenExpr(_8531_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4698, out _out4699, out _out4700);
          _8540_valueR = _out4698;
          _8541_valueOwnership = _out4699;
          _8542_valueIdents = _out4700;
          r = ((_8534_exprR).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("update_index"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements(_8537_indexR, _8540_valueR));
          RAST._IExpr _out4701;
          DCOMPUTF16._IOwnership _out4702;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4701, out _out4702);
          r = _out4701;
          resultingOwnership = _out4702;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8536_exprIdents, _8539_indexIdents), _8542_valueIdents);
          return ;
        }
      } else if (_source312.is_SetBuilder) {
        DAST._IType _8543___mcc_h32 = _source312.dtor_elemType;
        DAST._IType _8544_elemType = _8543___mcc_h32;
        {
          RAST._IType _8545_eType;
          RAST._IType _out4703;
          _out4703 = DCOMPUTF16.COMP.GenType(_8544_elemType, false, false);
          _8545_eType = _out4703;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::SetBuilder::<"), (_8545_eType)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::new()")));
          RAST._IExpr _out4704;
          DCOMPUTF16._IOwnership _out4705;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4704, out _out4705);
          r = _out4704;
          resultingOwnership = _out4705;
          return ;
        }
      } else if (_source312.is_ToMultiset) {
        DAST._IExpression _8546___mcc_h33 = _source312.dtor_ToMultiset_a0;
        DAST._IExpression _8547_expr = _8546___mcc_h33;
        {
          RAST._IExpr _8548_recursiveGen;
          DCOMPUTF16._IOwnership _8549___v104;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8550_recIdents;
          RAST._IExpr _out4706;
          DCOMPUTF16._IOwnership _out4707;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4708;
          DCOMPUTF16.COMP.GenExpr(_8547_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4706, out _out4707, out _out4708);
          _8548_recursiveGen = _out4706;
          _8549___v104 = _out4707;
          _8550_recIdents = _out4708;
          r = ((_8548_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as_dafny_multiset"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          readIdents = _8550_recIdents;
          RAST._IExpr _out4709;
          DCOMPUTF16._IOwnership _out4710;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4709, out _out4710);
          r = _out4709;
          resultingOwnership = _out4710;
          return ;
        }
      } else if (_source312.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source313 = selfIdent;
          if (_source313.is_None) {
            {
              r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")"));
              RAST._IExpr _out4711;
              DCOMPUTF16._IOwnership _out4712;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4711, out _out4712);
              r = _out4711;
              resultingOwnership = _out4712;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _8551___mcc_h273 = _source313.dtor_value;
            Dafny.ISequence<Dafny.Rune> _8552_id = _8551___mcc_h273;
            {
              r = RAST.Expr.create_RawExpr(_8552_id);
              if (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
                r = RAST.__default.Clone(r);
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipOwned();
              } else if ((object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipBorrowed())) || (object.Equals(expectedOwnership, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed()))) {
                if (!(_8552_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.Borrow(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowed();
              } else {
                if (!(_8552_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  r = RAST.__default.BorrowMut(r);
                }
                resultingOwnership = DCOMPUTF16.Ownership.create_OwnershipBorrowedMut();
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_8552_id);
            }
          }
          return ;
        }
      } else if (_source312.is_Ite) {
        DAST._IExpression _8553___mcc_h34 = _source312.dtor_cond;
        DAST._IExpression _8554___mcc_h35 = _source312.dtor_thn;
        DAST._IExpression _8555___mcc_h36 = _source312.dtor_els;
        DAST._IExpression _8556_f = _8555___mcc_h36;
        DAST._IExpression _8557_t = _8554___mcc_h35;
        DAST._IExpression _8558_cond = _8553___mcc_h34;
        {
          RAST._IExpr _8559_cond;
          DCOMPUTF16._IOwnership _8560___v109;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8561_recIdentsCond;
          RAST._IExpr _out4713;
          DCOMPUTF16._IOwnership _out4714;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4715;
          DCOMPUTF16.COMP.GenExpr(_8558_cond, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4713, out _out4714, out _out4715);
          _8559_cond = _out4713;
          _8560___v109 = _out4714;
          _8561_recIdentsCond = _out4715;
          Dafny.ISequence<Dafny.Rune> _8562_condString;
          _8562_condString = (_8559_cond)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _8563___v110;
          DCOMPUTF16._IOwnership _8564_tHasToBeOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8565___v111;
          RAST._IExpr _out4716;
          DCOMPUTF16._IOwnership _out4717;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4718;
          DCOMPUTF16.COMP.GenExpr(_8557_t, selfIdent, env, expectedOwnership, out _out4716, out _out4717, out _out4718);
          _8563___v110 = _out4716;
          _8564_tHasToBeOwned = _out4717;
          _8565___v111 = _out4718;
          RAST._IExpr _8566_fExpr;
          DCOMPUTF16._IOwnership _8567_fOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8568_recIdentsF;
          RAST._IExpr _out4719;
          DCOMPUTF16._IOwnership _out4720;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4721;
          DCOMPUTF16.COMP.GenExpr(_8556_f, selfIdent, env, _8564_tHasToBeOwned, out _out4719, out _out4720, out _out4721);
          _8566_fExpr = _out4719;
          _8567_fOwned = _out4720;
          _8568_recIdentsF = _out4721;
          Dafny.ISequence<Dafny.Rune> _8569_fString;
          _8569_fString = (_8566_fExpr)._ToString(DCOMPUTF16.__default.IND);
          RAST._IExpr _8570_tExpr;
          DCOMPUTF16._IOwnership _8571___v112;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8572_recIdentsT;
          RAST._IExpr _out4722;
          DCOMPUTF16._IOwnership _out4723;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4724;
          DCOMPUTF16.COMP.GenExpr(_8557_t, selfIdent, env, _8567_fOwned, out _out4722, out _out4723, out _out4724);
          _8570_tExpr = _out4722;
          _8571___v112 = _out4723;
          _8572_recIdentsT = _out4724;
          Dafny.ISequence<Dafny.Rune> _8573_tString;
          _8573_tString = (_8570_tExpr)._ToString(DCOMPUTF16.__default.IND);
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _8562_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _8573_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _8569_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})")));
          RAST._IExpr _out4725;
          DCOMPUTF16._IOwnership _out4726;
          DCOMPUTF16.COMP.FromOwnership(r, _8567_fOwned, expectedOwnership, out _out4725, out _out4726);
          r = _out4725;
          resultingOwnership = _out4726;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_8561_recIdentsCond, _8572_recIdentsT), _8568_recIdentsF);
          return ;
        }
      } else if (_source312.is_UnOp) {
        DAST._IUnaryOp _8574___mcc_h37 = _source312.dtor_unOp;
        DAST._IExpression _8575___mcc_h38 = _source312.dtor_expr;
        DAST.Format._IUnOpFormat _8576___mcc_h39 = _source312.dtor_format1;
        DAST._IUnaryOp _source314 = _8574___mcc_h37;
        if (_source314.is_Not) {
          DAST.Format._IUnOpFormat _8577_format = _8576___mcc_h39;
          DAST._IExpression _8578_e = _8575___mcc_h38;
          {
            RAST._IExpr _8579_recursiveGen;
            DCOMPUTF16._IOwnership _8580___v113;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8581_recIdents;
            RAST._IExpr _out4727;
            DCOMPUTF16._IOwnership _out4728;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4729;
            DCOMPUTF16.COMP.GenExpr(_8578_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4727, out _out4728, out _out4729);
            _8579_recursiveGen = _out4727;
            _8580___v113 = _out4728;
            _8581_recIdents = _out4729;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!"), _8579_recursiveGen, _8577_format);
            RAST._IExpr _out4730;
            DCOMPUTF16._IOwnership _out4731;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4730, out _out4731);
            r = _out4730;
            resultingOwnership = _out4731;
            readIdents = _8581_recIdents;
            return ;
          }
        } else if (_source314.is_BitwiseNot) {
          DAST.Format._IUnOpFormat _8582_format = _8576___mcc_h39;
          DAST._IExpression _8583_e = _8575___mcc_h38;
          {
            RAST._IExpr _8584_recursiveGen;
            DCOMPUTF16._IOwnership _8585___v114;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8586_recIdents;
            RAST._IExpr _out4732;
            DCOMPUTF16._IOwnership _out4733;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4734;
            DCOMPUTF16.COMP.GenExpr(_8583_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4732, out _out4733, out _out4734);
            _8584_recursiveGen = _out4732;
            _8585___v114 = _out4733;
            _8586_recIdents = _out4734;
            r = RAST.Expr.create_UnaryOp(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~"), _8584_recursiveGen, _8582_format);
            RAST._IExpr _out4735;
            DCOMPUTF16._IOwnership _out4736;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4735, out _out4736);
            r = _out4735;
            resultingOwnership = _out4736;
            readIdents = _8586_recIdents;
            return ;
          }
        } else {
          DAST.Format._IUnOpFormat _8587_format = _8576___mcc_h39;
          DAST._IExpression _8588_e = _8575___mcc_h38;
          {
            RAST._IExpr _8589_recursiveGen;
            DCOMPUTF16._IOwnership _8590_recOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8591_recIdents;
            RAST._IExpr _out4737;
            DCOMPUTF16._IOwnership _out4738;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4739;
            DCOMPUTF16.COMP.GenExpr(_8588_e, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out4737, out _out4738, out _out4739);
            _8589_recursiveGen = _out4737;
            _8590_recOwned = _out4738;
            _8591_recIdents = _out4739;
            r = ((_8589_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("cardinality"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            RAST._IExpr _out4740;
            DCOMPUTF16._IOwnership _out4741;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4740, out _out4741);
            r = _out4740;
            resultingOwnership = _out4741;
            readIdents = _8591_recIdents;
            return ;
          }
        }
      } else if (_source312.is_BinOp) {
        DAST._IBinOp _8592___mcc_h40 = _source312.dtor_op;
        DAST._IExpression _8593___mcc_h41 = _source312.dtor_left;
        DAST._IExpression _8594___mcc_h42 = _source312.dtor_right;
        DAST.Format._IBinOpFormat _8595___mcc_h43 = _source312.dtor_format2;
        RAST._IExpr _out4742;
        DCOMPUTF16._IOwnership _out4743;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4744;
        DCOMPUTF16.COMP.GenExprBinary(e, selfIdent, env, expectedOwnership, out _out4742, out _out4743, out _out4744);
        r = _out4742;
        resultingOwnership = _out4743;
        readIdents = _out4744;
      } else if (_source312.is_ArrayLen) {
        DAST._IExpression _8596___mcc_h44 = _source312.dtor_expr;
        BigInteger _8597___mcc_h45 = _source312.dtor_dim;
        BigInteger _8598_dim = _8597___mcc_h45;
        DAST._IExpression _8599_expr = _8596___mcc_h44;
        {
          RAST._IExpr _8600_recursiveGen;
          DCOMPUTF16._IOwnership _8601___v119;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8602_recIdents;
          RAST._IExpr _out4745;
          DCOMPUTF16._IOwnership _out4746;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4747;
          DCOMPUTF16.COMP.GenExpr(_8599_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4745, out _out4746, out _out4747);
          _8600_recursiveGen = _out4745;
          _8601___v119 = _out4746;
          _8602_recIdents = _out4747;
          if ((_8598_dim).Sign == 0) {
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), (_8600_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())")));
          } else {
            Dafny.ISequence<Dafny.Rune> _8603_s;
            _8603_s = (RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())")))._ToString(DCOMPUTF16.__default.IND);
            BigInteger _8604_i;
            _8604_i = BigInteger.One;
            while ((_8604_i) < (_8598_dim)) {
              _8603_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), _8603_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _8604_i = (_8604_i) + (BigInteger.One);
            }
            r = RAST.__default.RcNew(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_8600_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), _8603_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"))));
          }
          RAST._IExpr _out4748;
          DCOMPUTF16._IOwnership _out4749;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4748, out _out4749);
          r = _out4748;
          resultingOwnership = _out4749;
          readIdents = _8602_recIdents;
          return ;
        }
      } else if (_source312.is_MapKeys) {
        DAST._IExpression _8605___mcc_h46 = _source312.dtor_expr;
        DAST._IExpression _8606_expr = _8605___mcc_h46;
        {
          RAST._IExpr _8607_recursiveGen;
          DCOMPUTF16._IOwnership _8608___v120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8609_recIdents;
          RAST._IExpr _out4750;
          DCOMPUTF16._IOwnership _out4751;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4752;
          DCOMPUTF16.COMP.GenExpr(_8606_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4750, out _out4751, out _out4752);
          _8607_recursiveGen = _out4750;
          _8608___v120 = _out4751;
          _8609_recIdents = _out4752;
          readIdents = _8609_recIdents;
          r = ((_8607_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("keys"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out4753;
          DCOMPUTF16._IOwnership _out4754;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4753, out _out4754);
          r = _out4753;
          resultingOwnership = _out4754;
          return ;
        }
      } else if (_source312.is_MapValues) {
        DAST._IExpression _8610___mcc_h47 = _source312.dtor_expr;
        DAST._IExpression _8611_expr = _8610___mcc_h47;
        {
          RAST._IExpr _8612_recursiveGen;
          DCOMPUTF16._IOwnership _8613___v121;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8614_recIdents;
          RAST._IExpr _out4755;
          DCOMPUTF16._IOwnership _out4756;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4757;
          DCOMPUTF16.COMP.GenExpr(_8611_expr, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out4755, out _out4756, out _out4757);
          _8612_recursiveGen = _out4755;
          _8613___v121 = _out4756;
          _8614_recIdents = _out4757;
          readIdents = _8614_recIdents;
          r = ((_8612_recursiveGen).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("values"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
          RAST._IExpr _out4758;
          DCOMPUTF16._IOwnership _out4759;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4758, out _out4759);
          r = _out4758;
          resultingOwnership = _out4759;
          return ;
        }
      } else if (_source312.is_Select) {
        DAST._IExpression _8615___mcc_h48 = _source312.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _8616___mcc_h49 = _source312.dtor_field;
        bool _8617___mcc_h50 = _source312.dtor_isConstant;
        bool _8618___mcc_h51 = _source312.dtor_onDatatype;
        DAST._IExpression _source315 = _8615___mcc_h48;
        if (_source315.is_Literal) {
          DAST._ILiteral _8619___mcc_h52 = _source315.dtor_Literal_a0;
          bool _8620_isDatatype = _8618___mcc_h51;
          bool _8621_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8622_field = _8616___mcc_h49;
          DAST._IExpression _8623_on = _8615___mcc_h48;
          {
            RAST._IExpr _8624_onExpr;
            DCOMPUTF16._IOwnership _8625_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8626_recIdents;
            RAST._IExpr _out4760;
            DCOMPUTF16._IOwnership _out4761;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4762;
            DCOMPUTF16.COMP.GenExpr(_8623_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4760, out _out4761, out _out4762);
            _8624_onExpr = _out4760;
            _8625_onOwned = _out4761;
            _8626_recIdents = _out4762;
            if ((_8620_isDatatype) || (_8621_isConstant)) {
              r = ((_8624_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8622_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4763;
              DCOMPUTF16._IOwnership _out4764;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4763, out _out4764);
              r = _out4763;
              resultingOwnership = _out4764;
            } else {
              Dafny.ISequence<Dafny.Rune> _8627_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8627_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8624_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8622_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4765;
              DCOMPUTF16._IOwnership _out4766;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8627_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4765, out _out4766);
              r = _out4765;
              resultingOwnership = _out4766;
            }
            readIdents = _8626_recIdents;
            return ;
          }
        } else if (_source315.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _8628___mcc_h54 = _source315.dtor_Ident_a0;
          bool _8629_isDatatype = _8618___mcc_h51;
          bool _8630_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8631_field = _8616___mcc_h49;
          DAST._IExpression _8632_on = _8615___mcc_h48;
          {
            RAST._IExpr _8633_onExpr;
            DCOMPUTF16._IOwnership _8634_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8635_recIdents;
            RAST._IExpr _out4767;
            DCOMPUTF16._IOwnership _out4768;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4769;
            DCOMPUTF16.COMP.GenExpr(_8632_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4767, out _out4768, out _out4769);
            _8633_onExpr = _out4767;
            _8634_onOwned = _out4768;
            _8635_recIdents = _out4769;
            if ((_8629_isDatatype) || (_8630_isConstant)) {
              r = ((_8633_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8631_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4770;
              DCOMPUTF16._IOwnership _out4771;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4770, out _out4771);
              r = _out4770;
              resultingOwnership = _out4771;
            } else {
              Dafny.ISequence<Dafny.Rune> _8636_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8636_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8633_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8631_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4772;
              DCOMPUTF16._IOwnership _out4773;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8636_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4772, out _out4773);
              r = _out4772;
              resultingOwnership = _out4773;
            }
            readIdents = _8635_recIdents;
            return ;
          }
        } else if (_source315.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8637___mcc_h56 = _source315.dtor_Companion_a0;
          bool _8638_isDatatype = _8618___mcc_h51;
          bool _8639_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8640_field = _8616___mcc_h49;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8641_c = _8637___mcc_h56;
          {
            RAST._IExpr _8642_onExpr;
            DCOMPUTF16._IOwnership _8643_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8644_recIdents;
            RAST._IExpr _out4774;
            DCOMPUTF16._IOwnership _out4775;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4776;
            DCOMPUTF16.COMP.GenExpr(DAST.Expression.create_Companion(_8641_c), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4774, out _out4775, out _out4776);
            _8642_onExpr = _out4774;
            _8643_onOwned = _out4775;
            _8644_recIdents = _out4776;
            r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_8642_onExpr)._ToString(DCOMPUTF16.__default.IND), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_8640_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()")));
            RAST._IExpr _out4777;
            DCOMPUTF16._IOwnership _out4778;
            DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4777, out _out4778);
            r = _out4777;
            resultingOwnership = _out4778;
            readIdents = _8644_recIdents;
            return ;
          }
        } else if (_source315.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _8645___mcc_h58 = _source315.dtor_Tuple_a0;
          bool _8646_isDatatype = _8618___mcc_h51;
          bool _8647_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8648_field = _8616___mcc_h49;
          DAST._IExpression _8649_on = _8615___mcc_h48;
          {
            RAST._IExpr _8650_onExpr;
            DCOMPUTF16._IOwnership _8651_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8652_recIdents;
            RAST._IExpr _out4779;
            DCOMPUTF16._IOwnership _out4780;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4781;
            DCOMPUTF16.COMP.GenExpr(_8649_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4779, out _out4780, out _out4781);
            _8650_onExpr = _out4779;
            _8651_onOwned = _out4780;
            _8652_recIdents = _out4781;
            if ((_8646_isDatatype) || (_8647_isConstant)) {
              r = ((_8650_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8648_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4782;
              DCOMPUTF16._IOwnership _out4783;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4782, out _out4783);
              r = _out4782;
              resultingOwnership = _out4783;
            } else {
              Dafny.ISequence<Dafny.Rune> _8653_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8653_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8650_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8648_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4784;
              DCOMPUTF16._IOwnership _out4785;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8653_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4784, out _out4785);
              r = _out4784;
              resultingOwnership = _out4785;
            }
            readIdents = _8652_recIdents;
            return ;
          }
        } else if (_source315.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8654___mcc_h60 = _source315.dtor_path;
          Dafny.ISequence<DAST._IType> _8655___mcc_h61 = _source315.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _8656___mcc_h62 = _source315.dtor_args;
          bool _8657_isDatatype = _8618___mcc_h51;
          bool _8658_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8659_field = _8616___mcc_h49;
          DAST._IExpression _8660_on = _8615___mcc_h48;
          {
            RAST._IExpr _8661_onExpr;
            DCOMPUTF16._IOwnership _8662_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8663_recIdents;
            RAST._IExpr _out4786;
            DCOMPUTF16._IOwnership _out4787;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4788;
            DCOMPUTF16.COMP.GenExpr(_8660_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4786, out _out4787, out _out4788);
            _8661_onExpr = _out4786;
            _8662_onOwned = _out4787;
            _8663_recIdents = _out4788;
            if ((_8657_isDatatype) || (_8658_isConstant)) {
              r = ((_8661_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8659_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4789;
              DCOMPUTF16._IOwnership _out4790;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4789, out _out4790);
              r = _out4789;
              resultingOwnership = _out4790;
            } else {
              Dafny.ISequence<Dafny.Rune> _8664_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8664_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8661_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8659_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4791;
              DCOMPUTF16._IOwnership _out4792;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8664_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4791, out _out4792);
              r = _out4791;
              resultingOwnership = _out4792;
            }
            readIdents = _8663_recIdents;
            return ;
          }
        } else if (_source315.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _8665___mcc_h66 = _source315.dtor_dims;
          DAST._IType _8666___mcc_h67 = _source315.dtor_typ;
          bool _8667_isDatatype = _8618___mcc_h51;
          bool _8668_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8669_field = _8616___mcc_h49;
          DAST._IExpression _8670_on = _8615___mcc_h48;
          {
            RAST._IExpr _8671_onExpr;
            DCOMPUTF16._IOwnership _8672_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8673_recIdents;
            RAST._IExpr _out4793;
            DCOMPUTF16._IOwnership _out4794;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4795;
            DCOMPUTF16.COMP.GenExpr(_8670_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4793, out _out4794, out _out4795);
            _8671_onExpr = _out4793;
            _8672_onOwned = _out4794;
            _8673_recIdents = _out4795;
            if ((_8667_isDatatype) || (_8668_isConstant)) {
              r = ((_8671_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8669_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4796;
              DCOMPUTF16._IOwnership _out4797;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4796, out _out4797);
              r = _out4796;
              resultingOwnership = _out4797;
            } else {
              Dafny.ISequence<Dafny.Rune> _8674_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8674_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8671_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8669_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4798;
              DCOMPUTF16._IOwnership _out4799;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8674_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4798, out _out4799);
              r = _out4798;
              resultingOwnership = _out4799;
            }
            readIdents = _8673_recIdents;
            return ;
          }
        } else if (_source315.is_DatatypeValue) {
          DAST._IDatatypeType _8675___mcc_h70 = _source315.dtor_datatypeType;
          Dafny.ISequence<DAST._IType> _8676___mcc_h71 = _source315.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _8677___mcc_h72 = _source315.dtor_variant;
          bool _8678___mcc_h73 = _source315.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _8679___mcc_h74 = _source315.dtor_contents;
          bool _8680_isDatatype = _8618___mcc_h51;
          bool _8681_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8682_field = _8616___mcc_h49;
          DAST._IExpression _8683_on = _8615___mcc_h48;
          {
            RAST._IExpr _8684_onExpr;
            DCOMPUTF16._IOwnership _8685_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8686_recIdents;
            RAST._IExpr _out4800;
            DCOMPUTF16._IOwnership _out4801;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4802;
            DCOMPUTF16.COMP.GenExpr(_8683_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4800, out _out4801, out _out4802);
            _8684_onExpr = _out4800;
            _8685_onOwned = _out4801;
            _8686_recIdents = _out4802;
            if ((_8680_isDatatype) || (_8681_isConstant)) {
              r = ((_8684_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8682_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4803;
              DCOMPUTF16._IOwnership _out4804;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4803, out _out4804);
              r = _out4803;
              resultingOwnership = _out4804;
            } else {
              Dafny.ISequence<Dafny.Rune> _8687_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8687_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8684_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8682_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4805;
              DCOMPUTF16._IOwnership _out4806;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8687_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4805, out _out4806);
              r = _out4805;
              resultingOwnership = _out4806;
            }
            readIdents = _8686_recIdents;
            return ;
          }
        } else if (_source315.is_Convert) {
          DAST._IExpression _8688___mcc_h80 = _source315.dtor_value;
          DAST._IType _8689___mcc_h81 = _source315.dtor_from;
          DAST._IType _8690___mcc_h82 = _source315.dtor_typ;
          bool _8691_isDatatype = _8618___mcc_h51;
          bool _8692_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8693_field = _8616___mcc_h49;
          DAST._IExpression _8694_on = _8615___mcc_h48;
          {
            RAST._IExpr _8695_onExpr;
            DCOMPUTF16._IOwnership _8696_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8697_recIdents;
            RAST._IExpr _out4807;
            DCOMPUTF16._IOwnership _out4808;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4809;
            DCOMPUTF16.COMP.GenExpr(_8694_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4807, out _out4808, out _out4809);
            _8695_onExpr = _out4807;
            _8696_onOwned = _out4808;
            _8697_recIdents = _out4809;
            if ((_8691_isDatatype) || (_8692_isConstant)) {
              r = ((_8695_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8693_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4810;
              DCOMPUTF16._IOwnership _out4811;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4810, out _out4811);
              r = _out4810;
              resultingOwnership = _out4811;
            } else {
              Dafny.ISequence<Dafny.Rune> _8698_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8698_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8695_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8693_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4812;
              DCOMPUTF16._IOwnership _out4813;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8698_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4812, out _out4813);
              r = _out4812;
              resultingOwnership = _out4813;
            }
            readIdents = _8697_recIdents;
            return ;
          }
        } else if (_source315.is_SeqConstruct) {
          DAST._IExpression _8699___mcc_h86 = _source315.dtor_length;
          DAST._IExpression _8700___mcc_h87 = _source315.dtor_elem;
          bool _8701_isDatatype = _8618___mcc_h51;
          bool _8702_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8703_field = _8616___mcc_h49;
          DAST._IExpression _8704_on = _8615___mcc_h48;
          {
            RAST._IExpr _8705_onExpr;
            DCOMPUTF16._IOwnership _8706_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8707_recIdents;
            RAST._IExpr _out4814;
            DCOMPUTF16._IOwnership _out4815;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4816;
            DCOMPUTF16.COMP.GenExpr(_8704_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4814, out _out4815, out _out4816);
            _8705_onExpr = _out4814;
            _8706_onOwned = _out4815;
            _8707_recIdents = _out4816;
            if ((_8701_isDatatype) || (_8702_isConstant)) {
              r = ((_8705_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8703_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4817;
              DCOMPUTF16._IOwnership _out4818;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4817, out _out4818);
              r = _out4817;
              resultingOwnership = _out4818;
            } else {
              Dafny.ISequence<Dafny.Rune> _8708_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8708_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8705_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8703_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4819;
              DCOMPUTF16._IOwnership _out4820;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8708_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4819, out _out4820);
              r = _out4819;
              resultingOwnership = _out4820;
            }
            readIdents = _8707_recIdents;
            return ;
          }
        } else if (_source315.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _8709___mcc_h90 = _source315.dtor_elements;
          DAST._IType _8710___mcc_h91 = _source315.dtor_typ;
          bool _8711_isDatatype = _8618___mcc_h51;
          bool _8712_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8713_field = _8616___mcc_h49;
          DAST._IExpression _8714_on = _8615___mcc_h48;
          {
            RAST._IExpr _8715_onExpr;
            DCOMPUTF16._IOwnership _8716_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8717_recIdents;
            RAST._IExpr _out4821;
            DCOMPUTF16._IOwnership _out4822;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4823;
            DCOMPUTF16.COMP.GenExpr(_8714_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4821, out _out4822, out _out4823);
            _8715_onExpr = _out4821;
            _8716_onOwned = _out4822;
            _8717_recIdents = _out4823;
            if ((_8711_isDatatype) || (_8712_isConstant)) {
              r = ((_8715_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8713_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4824;
              DCOMPUTF16._IOwnership _out4825;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4824, out _out4825);
              r = _out4824;
              resultingOwnership = _out4825;
            } else {
              Dafny.ISequence<Dafny.Rune> _8718_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8718_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8715_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8713_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4826;
              DCOMPUTF16._IOwnership _out4827;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8718_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4826, out _out4827);
              r = _out4826;
              resultingOwnership = _out4827;
            }
            readIdents = _8717_recIdents;
            return ;
          }
        } else if (_source315.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _8719___mcc_h94 = _source315.dtor_elements;
          bool _8720_isDatatype = _8618___mcc_h51;
          bool _8721_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8722_field = _8616___mcc_h49;
          DAST._IExpression _8723_on = _8615___mcc_h48;
          {
            RAST._IExpr _8724_onExpr;
            DCOMPUTF16._IOwnership _8725_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8726_recIdents;
            RAST._IExpr _out4828;
            DCOMPUTF16._IOwnership _out4829;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4830;
            DCOMPUTF16.COMP.GenExpr(_8723_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4828, out _out4829, out _out4830);
            _8724_onExpr = _out4828;
            _8725_onOwned = _out4829;
            _8726_recIdents = _out4830;
            if ((_8720_isDatatype) || (_8721_isConstant)) {
              r = ((_8724_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8722_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4831;
              DCOMPUTF16._IOwnership _out4832;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4831, out _out4832);
              r = _out4831;
              resultingOwnership = _out4832;
            } else {
              Dafny.ISequence<Dafny.Rune> _8727_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8727_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8724_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8722_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4833;
              DCOMPUTF16._IOwnership _out4834;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8727_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4833, out _out4834);
              r = _out4833;
              resultingOwnership = _out4834;
            }
            readIdents = _8726_recIdents;
            return ;
          }
        } else if (_source315.is_MultisetValue) {
          Dafny.ISequence<DAST._IExpression> _8728___mcc_h96 = _source315.dtor_elements;
          bool _8729_isDatatype = _8618___mcc_h51;
          bool _8730_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8731_field = _8616___mcc_h49;
          DAST._IExpression _8732_on = _8615___mcc_h48;
          {
            RAST._IExpr _8733_onExpr;
            DCOMPUTF16._IOwnership _8734_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8735_recIdents;
            RAST._IExpr _out4835;
            DCOMPUTF16._IOwnership _out4836;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4837;
            DCOMPUTF16.COMP.GenExpr(_8732_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4835, out _out4836, out _out4837);
            _8733_onExpr = _out4835;
            _8734_onOwned = _out4836;
            _8735_recIdents = _out4837;
            if ((_8729_isDatatype) || (_8730_isConstant)) {
              r = ((_8733_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8731_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4838;
              DCOMPUTF16._IOwnership _out4839;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4838, out _out4839);
              r = _out4838;
              resultingOwnership = _out4839;
            } else {
              Dafny.ISequence<Dafny.Rune> _8736_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8736_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8733_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8731_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4840;
              DCOMPUTF16._IOwnership _out4841;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8736_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4840, out _out4841);
              r = _out4840;
              resultingOwnership = _out4841;
            }
            readIdents = _8735_recIdents;
            return ;
          }
        } else if (_source315.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _8737___mcc_h98 = _source315.dtor_mapElems;
          bool _8738_isDatatype = _8618___mcc_h51;
          bool _8739_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8740_field = _8616___mcc_h49;
          DAST._IExpression _8741_on = _8615___mcc_h48;
          {
            RAST._IExpr _8742_onExpr;
            DCOMPUTF16._IOwnership _8743_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8744_recIdents;
            RAST._IExpr _out4842;
            DCOMPUTF16._IOwnership _out4843;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4844;
            DCOMPUTF16.COMP.GenExpr(_8741_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4842, out _out4843, out _out4844);
            _8742_onExpr = _out4842;
            _8743_onOwned = _out4843;
            _8744_recIdents = _out4844;
            if ((_8738_isDatatype) || (_8739_isConstant)) {
              r = ((_8742_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8740_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4845;
              DCOMPUTF16._IOwnership _out4846;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4845, out _out4846);
              r = _out4845;
              resultingOwnership = _out4846;
            } else {
              Dafny.ISequence<Dafny.Rune> _8745_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8745_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8742_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8740_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4847;
              DCOMPUTF16._IOwnership _out4848;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8745_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4847, out _out4848);
              r = _out4847;
              resultingOwnership = _out4848;
            }
            readIdents = _8744_recIdents;
            return ;
          }
        } else if (_source315.is_MapBuilder) {
          DAST._IType _8746___mcc_h100 = _source315.dtor_keyType;
          DAST._IType _8747___mcc_h101 = _source315.dtor_valueType;
          bool _8748_isDatatype = _8618___mcc_h51;
          bool _8749_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8750_field = _8616___mcc_h49;
          DAST._IExpression _8751_on = _8615___mcc_h48;
          {
            RAST._IExpr _8752_onExpr;
            DCOMPUTF16._IOwnership _8753_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8754_recIdents;
            RAST._IExpr _out4849;
            DCOMPUTF16._IOwnership _out4850;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4851;
            DCOMPUTF16.COMP.GenExpr(_8751_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4849, out _out4850, out _out4851);
            _8752_onExpr = _out4849;
            _8753_onOwned = _out4850;
            _8754_recIdents = _out4851;
            if ((_8748_isDatatype) || (_8749_isConstant)) {
              r = ((_8752_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8750_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4852;
              DCOMPUTF16._IOwnership _out4853;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4852, out _out4853);
              r = _out4852;
              resultingOwnership = _out4853;
            } else {
              Dafny.ISequence<Dafny.Rune> _8755_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8755_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8752_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8750_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4854;
              DCOMPUTF16._IOwnership _out4855;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8755_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4854, out _out4855);
              r = _out4854;
              resultingOwnership = _out4855;
            }
            readIdents = _8754_recIdents;
            return ;
          }
        } else if (_source315.is_SeqUpdate) {
          DAST._IExpression _8756___mcc_h104 = _source315.dtor_expr;
          DAST._IExpression _8757___mcc_h105 = _source315.dtor_indexExpr;
          DAST._IExpression _8758___mcc_h106 = _source315.dtor_value;
          bool _8759_isDatatype = _8618___mcc_h51;
          bool _8760_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8761_field = _8616___mcc_h49;
          DAST._IExpression _8762_on = _8615___mcc_h48;
          {
            RAST._IExpr _8763_onExpr;
            DCOMPUTF16._IOwnership _8764_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8765_recIdents;
            RAST._IExpr _out4856;
            DCOMPUTF16._IOwnership _out4857;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4858;
            DCOMPUTF16.COMP.GenExpr(_8762_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4856, out _out4857, out _out4858);
            _8763_onExpr = _out4856;
            _8764_onOwned = _out4857;
            _8765_recIdents = _out4858;
            if ((_8759_isDatatype) || (_8760_isConstant)) {
              r = ((_8763_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8761_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4859;
              DCOMPUTF16._IOwnership _out4860;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4859, out _out4860);
              r = _out4859;
              resultingOwnership = _out4860;
            } else {
              Dafny.ISequence<Dafny.Rune> _8766_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8766_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8763_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8761_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4861;
              DCOMPUTF16._IOwnership _out4862;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8766_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4861, out _out4862);
              r = _out4861;
              resultingOwnership = _out4862;
            }
            readIdents = _8765_recIdents;
            return ;
          }
        } else if (_source315.is_MapUpdate) {
          DAST._IExpression _8767___mcc_h110 = _source315.dtor_expr;
          DAST._IExpression _8768___mcc_h111 = _source315.dtor_indexExpr;
          DAST._IExpression _8769___mcc_h112 = _source315.dtor_value;
          bool _8770_isDatatype = _8618___mcc_h51;
          bool _8771_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8772_field = _8616___mcc_h49;
          DAST._IExpression _8773_on = _8615___mcc_h48;
          {
            RAST._IExpr _8774_onExpr;
            DCOMPUTF16._IOwnership _8775_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8776_recIdents;
            RAST._IExpr _out4863;
            DCOMPUTF16._IOwnership _out4864;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4865;
            DCOMPUTF16.COMP.GenExpr(_8773_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4863, out _out4864, out _out4865);
            _8774_onExpr = _out4863;
            _8775_onOwned = _out4864;
            _8776_recIdents = _out4865;
            if ((_8770_isDatatype) || (_8771_isConstant)) {
              r = ((_8774_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8772_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4866;
              DCOMPUTF16._IOwnership _out4867;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4866, out _out4867);
              r = _out4866;
              resultingOwnership = _out4867;
            } else {
              Dafny.ISequence<Dafny.Rune> _8777_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8777_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8774_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8772_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4868;
              DCOMPUTF16._IOwnership _out4869;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8777_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4868, out _out4869);
              r = _out4868;
              resultingOwnership = _out4869;
            }
            readIdents = _8776_recIdents;
            return ;
          }
        } else if (_source315.is_SetBuilder) {
          DAST._IType _8778___mcc_h116 = _source315.dtor_elemType;
          bool _8779_isDatatype = _8618___mcc_h51;
          bool _8780_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8781_field = _8616___mcc_h49;
          DAST._IExpression _8782_on = _8615___mcc_h48;
          {
            RAST._IExpr _8783_onExpr;
            DCOMPUTF16._IOwnership _8784_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8785_recIdents;
            RAST._IExpr _out4870;
            DCOMPUTF16._IOwnership _out4871;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4872;
            DCOMPUTF16.COMP.GenExpr(_8782_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4870, out _out4871, out _out4872);
            _8783_onExpr = _out4870;
            _8784_onOwned = _out4871;
            _8785_recIdents = _out4872;
            if ((_8779_isDatatype) || (_8780_isConstant)) {
              r = ((_8783_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8781_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4873;
              DCOMPUTF16._IOwnership _out4874;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4873, out _out4874);
              r = _out4873;
              resultingOwnership = _out4874;
            } else {
              Dafny.ISequence<Dafny.Rune> _8786_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8786_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8783_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8781_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4875;
              DCOMPUTF16._IOwnership _out4876;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8786_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4875, out _out4876);
              r = _out4875;
              resultingOwnership = _out4876;
            }
            readIdents = _8785_recIdents;
            return ;
          }
        } else if (_source315.is_ToMultiset) {
          DAST._IExpression _8787___mcc_h118 = _source315.dtor_ToMultiset_a0;
          bool _8788_isDatatype = _8618___mcc_h51;
          bool _8789_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8790_field = _8616___mcc_h49;
          DAST._IExpression _8791_on = _8615___mcc_h48;
          {
            RAST._IExpr _8792_onExpr;
            DCOMPUTF16._IOwnership _8793_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8794_recIdents;
            RAST._IExpr _out4877;
            DCOMPUTF16._IOwnership _out4878;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4879;
            DCOMPUTF16.COMP.GenExpr(_8791_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4877, out _out4878, out _out4879);
            _8792_onExpr = _out4877;
            _8793_onOwned = _out4878;
            _8794_recIdents = _out4879;
            if ((_8788_isDatatype) || (_8789_isConstant)) {
              r = ((_8792_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8790_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4880;
              DCOMPUTF16._IOwnership _out4881;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4880, out _out4881);
              r = _out4880;
              resultingOwnership = _out4881;
            } else {
              Dafny.ISequence<Dafny.Rune> _8795_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8795_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8792_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8790_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4882;
              DCOMPUTF16._IOwnership _out4883;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8795_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4882, out _out4883);
              r = _out4882;
              resultingOwnership = _out4883;
            }
            readIdents = _8794_recIdents;
            return ;
          }
        } else if (_source315.is_This) {
          bool _8796_isDatatype = _8618___mcc_h51;
          bool _8797_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8798_field = _8616___mcc_h49;
          DAST._IExpression _8799_on = _8615___mcc_h48;
          {
            RAST._IExpr _8800_onExpr;
            DCOMPUTF16._IOwnership _8801_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8802_recIdents;
            RAST._IExpr _out4884;
            DCOMPUTF16._IOwnership _out4885;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4886;
            DCOMPUTF16.COMP.GenExpr(_8799_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4884, out _out4885, out _out4886);
            _8800_onExpr = _out4884;
            _8801_onOwned = _out4885;
            _8802_recIdents = _out4886;
            if ((_8796_isDatatype) || (_8797_isConstant)) {
              r = ((_8800_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8798_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4887;
              DCOMPUTF16._IOwnership _out4888;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4887, out _out4888);
              r = _out4887;
              resultingOwnership = _out4888;
            } else {
              Dafny.ISequence<Dafny.Rune> _8803_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8803_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8800_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8798_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4889;
              DCOMPUTF16._IOwnership _out4890;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8803_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4889, out _out4890);
              r = _out4889;
              resultingOwnership = _out4890;
            }
            readIdents = _8802_recIdents;
            return ;
          }
        } else if (_source315.is_Ite) {
          DAST._IExpression _8804___mcc_h120 = _source315.dtor_cond;
          DAST._IExpression _8805___mcc_h121 = _source315.dtor_thn;
          DAST._IExpression _8806___mcc_h122 = _source315.dtor_els;
          bool _8807_isDatatype = _8618___mcc_h51;
          bool _8808_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8809_field = _8616___mcc_h49;
          DAST._IExpression _8810_on = _8615___mcc_h48;
          {
            RAST._IExpr _8811_onExpr;
            DCOMPUTF16._IOwnership _8812_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8813_recIdents;
            RAST._IExpr _out4891;
            DCOMPUTF16._IOwnership _out4892;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4893;
            DCOMPUTF16.COMP.GenExpr(_8810_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4891, out _out4892, out _out4893);
            _8811_onExpr = _out4891;
            _8812_onOwned = _out4892;
            _8813_recIdents = _out4893;
            if ((_8807_isDatatype) || (_8808_isConstant)) {
              r = ((_8811_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8809_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4894;
              DCOMPUTF16._IOwnership _out4895;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4894, out _out4895);
              r = _out4894;
              resultingOwnership = _out4895;
            } else {
              Dafny.ISequence<Dafny.Rune> _8814_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8814_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8811_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8809_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4896;
              DCOMPUTF16._IOwnership _out4897;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8814_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4896, out _out4897);
              r = _out4896;
              resultingOwnership = _out4897;
            }
            readIdents = _8813_recIdents;
            return ;
          }
        } else if (_source315.is_UnOp) {
          DAST._IUnaryOp _8815___mcc_h126 = _source315.dtor_unOp;
          DAST._IExpression _8816___mcc_h127 = _source315.dtor_expr;
          DAST.Format._IUnOpFormat _8817___mcc_h128 = _source315.dtor_format1;
          bool _8818_isDatatype = _8618___mcc_h51;
          bool _8819_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8820_field = _8616___mcc_h49;
          DAST._IExpression _8821_on = _8615___mcc_h48;
          {
            RAST._IExpr _8822_onExpr;
            DCOMPUTF16._IOwnership _8823_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8824_recIdents;
            RAST._IExpr _out4898;
            DCOMPUTF16._IOwnership _out4899;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4900;
            DCOMPUTF16.COMP.GenExpr(_8821_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4898, out _out4899, out _out4900);
            _8822_onExpr = _out4898;
            _8823_onOwned = _out4899;
            _8824_recIdents = _out4900;
            if ((_8818_isDatatype) || (_8819_isConstant)) {
              r = ((_8822_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8820_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4901;
              DCOMPUTF16._IOwnership _out4902;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4901, out _out4902);
              r = _out4901;
              resultingOwnership = _out4902;
            } else {
              Dafny.ISequence<Dafny.Rune> _8825_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8825_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8822_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8820_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4903;
              DCOMPUTF16._IOwnership _out4904;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8825_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4903, out _out4904);
              r = _out4903;
              resultingOwnership = _out4904;
            }
            readIdents = _8824_recIdents;
            return ;
          }
        } else if (_source315.is_BinOp) {
          DAST._IBinOp _8826___mcc_h132 = _source315.dtor_op;
          DAST._IExpression _8827___mcc_h133 = _source315.dtor_left;
          DAST._IExpression _8828___mcc_h134 = _source315.dtor_right;
          DAST.Format._IBinOpFormat _8829___mcc_h135 = _source315.dtor_format2;
          bool _8830_isDatatype = _8618___mcc_h51;
          bool _8831_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8832_field = _8616___mcc_h49;
          DAST._IExpression _8833_on = _8615___mcc_h48;
          {
            RAST._IExpr _8834_onExpr;
            DCOMPUTF16._IOwnership _8835_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8836_recIdents;
            RAST._IExpr _out4905;
            DCOMPUTF16._IOwnership _out4906;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4907;
            DCOMPUTF16.COMP.GenExpr(_8833_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4905, out _out4906, out _out4907);
            _8834_onExpr = _out4905;
            _8835_onOwned = _out4906;
            _8836_recIdents = _out4907;
            if ((_8830_isDatatype) || (_8831_isConstant)) {
              r = ((_8834_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8832_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4908;
              DCOMPUTF16._IOwnership _out4909;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4908, out _out4909);
              r = _out4908;
              resultingOwnership = _out4909;
            } else {
              Dafny.ISequence<Dafny.Rune> _8837_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8837_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8834_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8832_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4910;
              DCOMPUTF16._IOwnership _out4911;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8837_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4910, out _out4911);
              r = _out4910;
              resultingOwnership = _out4911;
            }
            readIdents = _8836_recIdents;
            return ;
          }
        } else if (_source315.is_ArrayLen) {
          DAST._IExpression _8838___mcc_h140 = _source315.dtor_expr;
          BigInteger _8839___mcc_h141 = _source315.dtor_dim;
          bool _8840_isDatatype = _8618___mcc_h51;
          bool _8841_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8842_field = _8616___mcc_h49;
          DAST._IExpression _8843_on = _8615___mcc_h48;
          {
            RAST._IExpr _8844_onExpr;
            DCOMPUTF16._IOwnership _8845_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8846_recIdents;
            RAST._IExpr _out4912;
            DCOMPUTF16._IOwnership _out4913;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4914;
            DCOMPUTF16.COMP.GenExpr(_8843_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4912, out _out4913, out _out4914);
            _8844_onExpr = _out4912;
            _8845_onOwned = _out4913;
            _8846_recIdents = _out4914;
            if ((_8840_isDatatype) || (_8841_isConstant)) {
              r = ((_8844_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8842_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4915;
              DCOMPUTF16._IOwnership _out4916;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4915, out _out4916);
              r = _out4915;
              resultingOwnership = _out4916;
            } else {
              Dafny.ISequence<Dafny.Rune> _8847_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8847_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8844_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8842_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4917;
              DCOMPUTF16._IOwnership _out4918;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8847_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4917, out _out4918);
              r = _out4917;
              resultingOwnership = _out4918;
            }
            readIdents = _8846_recIdents;
            return ;
          }
        } else if (_source315.is_MapKeys) {
          DAST._IExpression _8848___mcc_h144 = _source315.dtor_expr;
          bool _8849_isDatatype = _8618___mcc_h51;
          bool _8850_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8851_field = _8616___mcc_h49;
          DAST._IExpression _8852_on = _8615___mcc_h48;
          {
            RAST._IExpr _8853_onExpr;
            DCOMPUTF16._IOwnership _8854_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8855_recIdents;
            RAST._IExpr _out4919;
            DCOMPUTF16._IOwnership _out4920;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4921;
            DCOMPUTF16.COMP.GenExpr(_8852_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4919, out _out4920, out _out4921);
            _8853_onExpr = _out4919;
            _8854_onOwned = _out4920;
            _8855_recIdents = _out4921;
            if ((_8849_isDatatype) || (_8850_isConstant)) {
              r = ((_8853_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8851_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4922;
              DCOMPUTF16._IOwnership _out4923;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4922, out _out4923);
              r = _out4922;
              resultingOwnership = _out4923;
            } else {
              Dafny.ISequence<Dafny.Rune> _8856_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8856_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8853_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8851_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4924;
              DCOMPUTF16._IOwnership _out4925;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8856_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4924, out _out4925);
              r = _out4924;
              resultingOwnership = _out4925;
            }
            readIdents = _8855_recIdents;
            return ;
          }
        } else if (_source315.is_MapValues) {
          DAST._IExpression _8857___mcc_h146 = _source315.dtor_expr;
          bool _8858_isDatatype = _8618___mcc_h51;
          bool _8859_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8860_field = _8616___mcc_h49;
          DAST._IExpression _8861_on = _8615___mcc_h48;
          {
            RAST._IExpr _8862_onExpr;
            DCOMPUTF16._IOwnership _8863_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8864_recIdents;
            RAST._IExpr _out4926;
            DCOMPUTF16._IOwnership _out4927;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4928;
            DCOMPUTF16.COMP.GenExpr(_8861_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4926, out _out4927, out _out4928);
            _8862_onExpr = _out4926;
            _8863_onOwned = _out4927;
            _8864_recIdents = _out4928;
            if ((_8858_isDatatype) || (_8859_isConstant)) {
              r = ((_8862_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8860_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4929;
              DCOMPUTF16._IOwnership _out4930;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4929, out _out4930);
              r = _out4929;
              resultingOwnership = _out4930;
            } else {
              Dafny.ISequence<Dafny.Rune> _8865_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8865_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8862_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8860_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4931;
              DCOMPUTF16._IOwnership _out4932;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8865_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4931, out _out4932);
              r = _out4931;
              resultingOwnership = _out4932;
            }
            readIdents = _8864_recIdents;
            return ;
          }
        } else if (_source315.is_Select) {
          DAST._IExpression _8866___mcc_h148 = _source315.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _8867___mcc_h149 = _source315.dtor_field;
          bool _8868___mcc_h150 = _source315.dtor_isConstant;
          bool _8869___mcc_h151 = _source315.dtor_onDatatype;
          bool _8870_isDatatype = _8618___mcc_h51;
          bool _8871_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8872_field = _8616___mcc_h49;
          DAST._IExpression _8873_on = _8615___mcc_h48;
          {
            RAST._IExpr _8874_onExpr;
            DCOMPUTF16._IOwnership _8875_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8876_recIdents;
            RAST._IExpr _out4933;
            DCOMPUTF16._IOwnership _out4934;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4935;
            DCOMPUTF16.COMP.GenExpr(_8873_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4933, out _out4934, out _out4935);
            _8874_onExpr = _out4933;
            _8875_onOwned = _out4934;
            _8876_recIdents = _out4935;
            if ((_8870_isDatatype) || (_8871_isConstant)) {
              r = ((_8874_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8872_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4936;
              DCOMPUTF16._IOwnership _out4937;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4936, out _out4937);
              r = _out4936;
              resultingOwnership = _out4937;
            } else {
              Dafny.ISequence<Dafny.Rune> _8877_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8877_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8874_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8872_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4938;
              DCOMPUTF16._IOwnership _out4939;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8877_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4938, out _out4939);
              r = _out4938;
              resultingOwnership = _out4939;
            }
            readIdents = _8876_recIdents;
            return ;
          }
        } else if (_source315.is_SelectFn) {
          DAST._IExpression _8878___mcc_h156 = _source315.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _8879___mcc_h157 = _source315.dtor_field;
          bool _8880___mcc_h158 = _source315.dtor_onDatatype;
          bool _8881___mcc_h159 = _source315.dtor_isStatic;
          BigInteger _8882___mcc_h160 = _source315.dtor_arity;
          bool _8883_isDatatype = _8618___mcc_h51;
          bool _8884_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8885_field = _8616___mcc_h49;
          DAST._IExpression _8886_on = _8615___mcc_h48;
          {
            RAST._IExpr _8887_onExpr;
            DCOMPUTF16._IOwnership _8888_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8889_recIdents;
            RAST._IExpr _out4940;
            DCOMPUTF16._IOwnership _out4941;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4942;
            DCOMPUTF16.COMP.GenExpr(_8886_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4940, out _out4941, out _out4942);
            _8887_onExpr = _out4940;
            _8888_onOwned = _out4941;
            _8889_recIdents = _out4942;
            if ((_8883_isDatatype) || (_8884_isConstant)) {
              r = ((_8887_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8885_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4943;
              DCOMPUTF16._IOwnership _out4944;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4943, out _out4944);
              r = _out4943;
              resultingOwnership = _out4944;
            } else {
              Dafny.ISequence<Dafny.Rune> _8890_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8890_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8887_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8885_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4945;
              DCOMPUTF16._IOwnership _out4946;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8890_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4945, out _out4946);
              r = _out4945;
              resultingOwnership = _out4946;
            }
            readIdents = _8889_recIdents;
            return ;
          }
        } else if (_source315.is_Index) {
          DAST._IExpression _8891___mcc_h166 = _source315.dtor_expr;
          DAST._ICollKind _8892___mcc_h167 = _source315.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _8893___mcc_h168 = _source315.dtor_indices;
          bool _8894_isDatatype = _8618___mcc_h51;
          bool _8895_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8896_field = _8616___mcc_h49;
          DAST._IExpression _8897_on = _8615___mcc_h48;
          {
            RAST._IExpr _8898_onExpr;
            DCOMPUTF16._IOwnership _8899_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8900_recIdents;
            RAST._IExpr _out4947;
            DCOMPUTF16._IOwnership _out4948;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4949;
            DCOMPUTF16.COMP.GenExpr(_8897_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4947, out _out4948, out _out4949);
            _8898_onExpr = _out4947;
            _8899_onOwned = _out4948;
            _8900_recIdents = _out4949;
            if ((_8894_isDatatype) || (_8895_isConstant)) {
              r = ((_8898_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8896_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4950;
              DCOMPUTF16._IOwnership _out4951;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4950, out _out4951);
              r = _out4950;
              resultingOwnership = _out4951;
            } else {
              Dafny.ISequence<Dafny.Rune> _8901_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8901_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8898_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8896_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4952;
              DCOMPUTF16._IOwnership _out4953;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8901_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4952, out _out4953);
              r = _out4952;
              resultingOwnership = _out4953;
            }
            readIdents = _8900_recIdents;
            return ;
          }
        } else if (_source315.is_IndexRange) {
          DAST._IExpression _8902___mcc_h172 = _source315.dtor_expr;
          bool _8903___mcc_h173 = _source315.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _8904___mcc_h174 = _source315.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _8905___mcc_h175 = _source315.dtor_high;
          bool _8906_isDatatype = _8618___mcc_h51;
          bool _8907_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8908_field = _8616___mcc_h49;
          DAST._IExpression _8909_on = _8615___mcc_h48;
          {
            RAST._IExpr _8910_onExpr;
            DCOMPUTF16._IOwnership _8911_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8912_recIdents;
            RAST._IExpr _out4954;
            DCOMPUTF16._IOwnership _out4955;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4956;
            DCOMPUTF16.COMP.GenExpr(_8909_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4954, out _out4955, out _out4956);
            _8910_onExpr = _out4954;
            _8911_onOwned = _out4955;
            _8912_recIdents = _out4956;
            if ((_8906_isDatatype) || (_8907_isConstant)) {
              r = ((_8910_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8908_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4957;
              DCOMPUTF16._IOwnership _out4958;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4957, out _out4958);
              r = _out4957;
              resultingOwnership = _out4958;
            } else {
              Dafny.ISequence<Dafny.Rune> _8913_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8913_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8910_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8908_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4959;
              DCOMPUTF16._IOwnership _out4960;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8913_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4959, out _out4960);
              r = _out4959;
              resultingOwnership = _out4960;
            }
            readIdents = _8912_recIdents;
            return ;
          }
        } else if (_source315.is_TupleSelect) {
          DAST._IExpression _8914___mcc_h180 = _source315.dtor_expr;
          BigInteger _8915___mcc_h181 = _source315.dtor_index;
          bool _8916_isDatatype = _8618___mcc_h51;
          bool _8917_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8918_field = _8616___mcc_h49;
          DAST._IExpression _8919_on = _8615___mcc_h48;
          {
            RAST._IExpr _8920_onExpr;
            DCOMPUTF16._IOwnership _8921_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8922_recIdents;
            RAST._IExpr _out4961;
            DCOMPUTF16._IOwnership _out4962;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4963;
            DCOMPUTF16.COMP.GenExpr(_8919_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4961, out _out4962, out _out4963);
            _8920_onExpr = _out4961;
            _8921_onOwned = _out4962;
            _8922_recIdents = _out4963;
            if ((_8916_isDatatype) || (_8917_isConstant)) {
              r = ((_8920_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8918_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4964;
              DCOMPUTF16._IOwnership _out4965;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4964, out _out4965);
              r = _out4964;
              resultingOwnership = _out4965;
            } else {
              Dafny.ISequence<Dafny.Rune> _8923_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8923_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8920_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8918_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4966;
              DCOMPUTF16._IOwnership _out4967;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8923_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4966, out _out4967);
              r = _out4966;
              resultingOwnership = _out4967;
            }
            readIdents = _8922_recIdents;
            return ;
          }
        } else if (_source315.is_Call) {
          DAST._IExpression _8924___mcc_h184 = _source315.dtor_on;
          DAST._ICallName _8925___mcc_h185 = _source315.dtor_callName;
          Dafny.ISequence<DAST._IType> _8926___mcc_h186 = _source315.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _8927___mcc_h187 = _source315.dtor_args;
          bool _8928_isDatatype = _8618___mcc_h51;
          bool _8929_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8930_field = _8616___mcc_h49;
          DAST._IExpression _8931_on = _8615___mcc_h48;
          {
            RAST._IExpr _8932_onExpr;
            DCOMPUTF16._IOwnership _8933_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8934_recIdents;
            RAST._IExpr _out4968;
            DCOMPUTF16._IOwnership _out4969;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4970;
            DCOMPUTF16.COMP.GenExpr(_8931_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4968, out _out4969, out _out4970);
            _8932_onExpr = _out4968;
            _8933_onOwned = _out4969;
            _8934_recIdents = _out4970;
            if ((_8928_isDatatype) || (_8929_isConstant)) {
              r = ((_8932_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8930_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4971;
              DCOMPUTF16._IOwnership _out4972;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4971, out _out4972);
              r = _out4971;
              resultingOwnership = _out4972;
            } else {
              Dafny.ISequence<Dafny.Rune> _8935_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8935_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8932_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8930_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4973;
              DCOMPUTF16._IOwnership _out4974;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8935_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4973, out _out4974);
              r = _out4973;
              resultingOwnership = _out4974;
            }
            readIdents = _8934_recIdents;
            return ;
          }
        } else if (_source315.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _8936___mcc_h192 = _source315.dtor_params;
          DAST._IType _8937___mcc_h193 = _source315.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _8938___mcc_h194 = _source315.dtor_body;
          bool _8939_isDatatype = _8618___mcc_h51;
          bool _8940_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8941_field = _8616___mcc_h49;
          DAST._IExpression _8942_on = _8615___mcc_h48;
          {
            RAST._IExpr _8943_onExpr;
            DCOMPUTF16._IOwnership _8944_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8945_recIdents;
            RAST._IExpr _out4975;
            DCOMPUTF16._IOwnership _out4976;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4977;
            DCOMPUTF16.COMP.GenExpr(_8942_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4975, out _out4976, out _out4977);
            _8943_onExpr = _out4975;
            _8944_onOwned = _out4976;
            _8945_recIdents = _out4977;
            if ((_8939_isDatatype) || (_8940_isConstant)) {
              r = ((_8943_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8941_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4978;
              DCOMPUTF16._IOwnership _out4979;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4978, out _out4979);
              r = _out4978;
              resultingOwnership = _out4979;
            } else {
              Dafny.ISequence<Dafny.Rune> _8946_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8946_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8943_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8941_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4980;
              DCOMPUTF16._IOwnership _out4981;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8946_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4980, out _out4981);
              r = _out4980;
              resultingOwnership = _out4981;
            }
            readIdents = _8945_recIdents;
            return ;
          }
        } else if (_source315.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _8947___mcc_h198 = _source315.dtor_values;
          DAST._IType _8948___mcc_h199 = _source315.dtor_retType;
          DAST._IExpression _8949___mcc_h200 = _source315.dtor_expr;
          bool _8950_isDatatype = _8618___mcc_h51;
          bool _8951_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8952_field = _8616___mcc_h49;
          DAST._IExpression _8953_on = _8615___mcc_h48;
          {
            RAST._IExpr _8954_onExpr;
            DCOMPUTF16._IOwnership _8955_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8956_recIdents;
            RAST._IExpr _out4982;
            DCOMPUTF16._IOwnership _out4983;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4984;
            DCOMPUTF16.COMP.GenExpr(_8953_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4982, out _out4983, out _out4984);
            _8954_onExpr = _out4982;
            _8955_onOwned = _out4983;
            _8956_recIdents = _out4984;
            if ((_8950_isDatatype) || (_8951_isConstant)) {
              r = ((_8954_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8952_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4985;
              DCOMPUTF16._IOwnership _out4986;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4985, out _out4986);
              r = _out4985;
              resultingOwnership = _out4986;
            } else {
              Dafny.ISequence<Dafny.Rune> _8957_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8957_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8954_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8952_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4987;
              DCOMPUTF16._IOwnership _out4988;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8957_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4987, out _out4988);
              r = _out4987;
              resultingOwnership = _out4988;
            }
            readIdents = _8956_recIdents;
            return ;
          }
        } else if (_source315.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _8958___mcc_h204 = _source315.dtor_name;
          DAST._IType _8959___mcc_h205 = _source315.dtor_typ;
          DAST._IExpression _8960___mcc_h206 = _source315.dtor_value;
          DAST._IExpression _8961___mcc_h207 = _source315.dtor_iifeBody;
          bool _8962_isDatatype = _8618___mcc_h51;
          bool _8963_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8964_field = _8616___mcc_h49;
          DAST._IExpression _8965_on = _8615___mcc_h48;
          {
            RAST._IExpr _8966_onExpr;
            DCOMPUTF16._IOwnership _8967_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8968_recIdents;
            RAST._IExpr _out4989;
            DCOMPUTF16._IOwnership _out4990;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4991;
            DCOMPUTF16.COMP.GenExpr(_8965_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4989, out _out4990, out _out4991);
            _8966_onExpr = _out4989;
            _8967_onOwned = _out4990;
            _8968_recIdents = _out4991;
            if ((_8962_isDatatype) || (_8963_isConstant)) {
              r = ((_8966_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8964_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4992;
              DCOMPUTF16._IOwnership _out4993;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4992, out _out4993);
              r = _out4992;
              resultingOwnership = _out4993;
            } else {
              Dafny.ISequence<Dafny.Rune> _8969_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8969_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8966_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8964_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out4994;
              DCOMPUTF16._IOwnership _out4995;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8969_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out4994, out _out4995);
              r = _out4994;
              resultingOwnership = _out4995;
            }
            readIdents = _8968_recIdents;
            return ;
          }
        } else if (_source315.is_Apply) {
          DAST._IExpression _8970___mcc_h212 = _source315.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _8971___mcc_h213 = _source315.dtor_args;
          bool _8972_isDatatype = _8618___mcc_h51;
          bool _8973_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8974_field = _8616___mcc_h49;
          DAST._IExpression _8975_on = _8615___mcc_h48;
          {
            RAST._IExpr _8976_onExpr;
            DCOMPUTF16._IOwnership _8977_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8978_recIdents;
            RAST._IExpr _out4996;
            DCOMPUTF16._IOwnership _out4997;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out4998;
            DCOMPUTF16.COMP.GenExpr(_8975_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out4996, out _out4997, out _out4998);
            _8976_onExpr = _out4996;
            _8977_onOwned = _out4997;
            _8978_recIdents = _out4998;
            if ((_8972_isDatatype) || (_8973_isConstant)) {
              r = ((_8976_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8974_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out4999;
              DCOMPUTF16._IOwnership _out5000;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out4999, out _out5000);
              r = _out4999;
              resultingOwnership = _out5000;
            } else {
              Dafny.ISequence<Dafny.Rune> _8979_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8979_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8976_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8974_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5001;
              DCOMPUTF16._IOwnership _out5002;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8979_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5001, out _out5002);
              r = _out5001;
              resultingOwnership = _out5002;
            }
            readIdents = _8978_recIdents;
            return ;
          }
        } else if (_source315.is_TypeTest) {
          DAST._IExpression _8980___mcc_h216 = _source315.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _8981___mcc_h217 = _source315.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _8982___mcc_h218 = _source315.dtor_variant;
          bool _8983_isDatatype = _8618___mcc_h51;
          bool _8984_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8985_field = _8616___mcc_h49;
          DAST._IExpression _8986_on = _8615___mcc_h48;
          {
            RAST._IExpr _8987_onExpr;
            DCOMPUTF16._IOwnership _8988_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8989_recIdents;
            RAST._IExpr _out5003;
            DCOMPUTF16._IOwnership _out5004;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5005;
            DCOMPUTF16.COMP.GenExpr(_8986_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5003, out _out5004, out _out5005);
            _8987_onExpr = _out5003;
            _8988_onOwned = _out5004;
            _8989_recIdents = _out5005;
            if ((_8983_isDatatype) || (_8984_isConstant)) {
              r = ((_8987_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8985_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5006;
              DCOMPUTF16._IOwnership _out5007;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5006, out _out5007);
              r = _out5006;
              resultingOwnership = _out5007;
            } else {
              Dafny.ISequence<Dafny.Rune> _8990_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8990_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8987_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8985_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5008;
              DCOMPUTF16._IOwnership _out5009;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8990_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5008, out _out5009);
              r = _out5008;
              resultingOwnership = _out5009;
            }
            readIdents = _8989_recIdents;
            return ;
          }
        } else if (_source315.is_InitializationValue) {
          DAST._IType _8991___mcc_h222 = _source315.dtor_typ;
          bool _8992_isDatatype = _8618___mcc_h51;
          bool _8993_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _8994_field = _8616___mcc_h49;
          DAST._IExpression _8995_on = _8615___mcc_h48;
          {
            RAST._IExpr _8996_onExpr;
            DCOMPUTF16._IOwnership _8997_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _8998_recIdents;
            RAST._IExpr _out5010;
            DCOMPUTF16._IOwnership _out5011;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5012;
            DCOMPUTF16.COMP.GenExpr(_8995_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5010, out _out5011, out _out5012);
            _8996_onExpr = _out5010;
            _8997_onOwned = _out5011;
            _8998_recIdents = _out5012;
            if ((_8992_isDatatype) || (_8993_isConstant)) {
              r = ((_8996_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_8994_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5013;
              DCOMPUTF16._IOwnership _out5014;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5013, out _out5014);
              r = _out5013;
              resultingOwnership = _out5014;
            } else {
              Dafny.ISequence<Dafny.Rune> _8999_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _8999_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_8996_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_8994_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5015;
              DCOMPUTF16._IOwnership _out5016;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_8999_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5015, out _out5016);
              r = _out5015;
              resultingOwnership = _out5016;
            }
            readIdents = _8998_recIdents;
            return ;
          }
        } else if (_source315.is_BoolBoundedPool) {
          bool _9000_isDatatype = _8618___mcc_h51;
          bool _9001_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9002_field = _8616___mcc_h49;
          DAST._IExpression _9003_on = _8615___mcc_h48;
          {
            RAST._IExpr _9004_onExpr;
            DCOMPUTF16._IOwnership _9005_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9006_recIdents;
            RAST._IExpr _out5017;
            DCOMPUTF16._IOwnership _out5018;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5019;
            DCOMPUTF16.COMP.GenExpr(_9003_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5017, out _out5018, out _out5019);
            _9004_onExpr = _out5017;
            _9005_onOwned = _out5018;
            _9006_recIdents = _out5019;
            if ((_9000_isDatatype) || (_9001_isConstant)) {
              r = ((_9004_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9002_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5020;
              DCOMPUTF16._IOwnership _out5021;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5020, out _out5021);
              r = _out5020;
              resultingOwnership = _out5021;
            } else {
              Dafny.ISequence<Dafny.Rune> _9007_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9007_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9004_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9002_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5022;
              DCOMPUTF16._IOwnership _out5023;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9007_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5022, out _out5023);
              r = _out5022;
              resultingOwnership = _out5023;
            }
            readIdents = _9006_recIdents;
            return ;
          }
        } else if (_source315.is_SetBoundedPool) {
          DAST._IExpression _9008___mcc_h224 = _source315.dtor_of;
          bool _9009_isDatatype = _8618___mcc_h51;
          bool _9010_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9011_field = _8616___mcc_h49;
          DAST._IExpression _9012_on = _8615___mcc_h48;
          {
            RAST._IExpr _9013_onExpr;
            DCOMPUTF16._IOwnership _9014_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9015_recIdents;
            RAST._IExpr _out5024;
            DCOMPUTF16._IOwnership _out5025;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5026;
            DCOMPUTF16.COMP.GenExpr(_9012_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5024, out _out5025, out _out5026);
            _9013_onExpr = _out5024;
            _9014_onOwned = _out5025;
            _9015_recIdents = _out5026;
            if ((_9009_isDatatype) || (_9010_isConstant)) {
              r = ((_9013_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9011_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5027;
              DCOMPUTF16._IOwnership _out5028;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5027, out _out5028);
              r = _out5027;
              resultingOwnership = _out5028;
            } else {
              Dafny.ISequence<Dafny.Rune> _9016_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9016_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9013_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9011_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5029;
              DCOMPUTF16._IOwnership _out5030;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9016_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5029, out _out5030);
              r = _out5029;
              resultingOwnership = _out5030;
            }
            readIdents = _9015_recIdents;
            return ;
          }
        } else if (_source315.is_SeqBoundedPool) {
          DAST._IExpression _9017___mcc_h226 = _source315.dtor_of;
          bool _9018___mcc_h227 = _source315.dtor_includeDuplicates;
          bool _9019_isDatatype = _8618___mcc_h51;
          bool _9020_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9021_field = _8616___mcc_h49;
          DAST._IExpression _9022_on = _8615___mcc_h48;
          {
            RAST._IExpr _9023_onExpr;
            DCOMPUTF16._IOwnership _9024_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9025_recIdents;
            RAST._IExpr _out5031;
            DCOMPUTF16._IOwnership _out5032;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5033;
            DCOMPUTF16.COMP.GenExpr(_9022_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5031, out _out5032, out _out5033);
            _9023_onExpr = _out5031;
            _9024_onOwned = _out5032;
            _9025_recIdents = _out5033;
            if ((_9019_isDatatype) || (_9020_isConstant)) {
              r = ((_9023_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9021_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5034;
              DCOMPUTF16._IOwnership _out5035;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5034, out _out5035);
              r = _out5034;
              resultingOwnership = _out5035;
            } else {
              Dafny.ISequence<Dafny.Rune> _9026_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9026_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9023_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9021_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5036;
              DCOMPUTF16._IOwnership _out5037;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9026_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5036, out _out5037);
              r = _out5036;
              resultingOwnership = _out5037;
            }
            readIdents = _9025_recIdents;
            return ;
          }
        } else {
          DAST._IExpression _9027___mcc_h230 = _source315.dtor_lo;
          DAST._IExpression _9028___mcc_h231 = _source315.dtor_hi;
          bool _9029_isDatatype = _8618___mcc_h51;
          bool _9030_isConstant = _8617___mcc_h50;
          Dafny.ISequence<Dafny.Rune> _9031_field = _8616___mcc_h49;
          DAST._IExpression _9032_on = _8615___mcc_h48;
          {
            RAST._IExpr _9033_onExpr;
            DCOMPUTF16._IOwnership _9034_onOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9035_recIdents;
            RAST._IExpr _out5038;
            DCOMPUTF16._IOwnership _out5039;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5040;
            DCOMPUTF16.COMP.GenExpr(_9032_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5038, out _out5039, out _out5040);
            _9033_onExpr = _out5038;
            _9034_onOwned = _out5039;
            _9035_recIdents = _out5040;
            if ((_9029_isDatatype) || (_9030_isConstant)) {
              r = ((_9033_onExpr).Sel(DCOMPUTF16.__default.escapeIdent(_9031_field))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
              RAST._IExpr _out5041;
              DCOMPUTF16._IOwnership _out5042;
              DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5041, out _out5042);
              r = _out5041;
              resultingOwnership = _out5042;
            } else {
              Dafny.ISequence<Dafny.Rune> _9036_s = Dafny.Sequence<Dafny.Rune>.Empty;
              _9036_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), (_9033_onExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMPUTF16.__default.escapeIdent(_9031_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              RAST._IExpr _out5043;
              DCOMPUTF16._IOwnership _out5044;
              DCOMPUTF16.COMP.FromOwnership(RAST.Expr.create_RawExpr(_9036_s), DCOMPUTF16.Ownership.create_OwnershipBorrowed(), expectedOwnership, out _out5043, out _out5044);
              r = _out5043;
              resultingOwnership = _out5044;
            }
            readIdents = _9035_recIdents;
            return ;
          }
        }
      } else if (_source312.is_SelectFn) {
        DAST._IExpression _9037___mcc_h234 = _source312.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _9038___mcc_h235 = _source312.dtor_field;
        bool _9039___mcc_h236 = _source312.dtor_onDatatype;
        bool _9040___mcc_h237 = _source312.dtor_isStatic;
        BigInteger _9041___mcc_h238 = _source312.dtor_arity;
        BigInteger _9042_arity = _9041___mcc_h238;
        bool _9043_isStatic = _9040___mcc_h237;
        bool _9044_isDatatype = _9039___mcc_h236;
        Dafny.ISequence<Dafny.Rune> _9045_field = _9038___mcc_h235;
        DAST._IExpression _9046_on = _9037___mcc_h234;
        {
          RAST._IExpr _9047_onExpr;
          DCOMPUTF16._IOwnership _9048_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9049_recIdents;
          RAST._IExpr _out5045;
          DCOMPUTF16._IOwnership _out5046;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5047;
          DCOMPUTF16.COMP.GenExpr(_9046_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5045, out _out5046, out _out5047);
          _9047_onExpr = _out5045;
          _9048_onOwned = _out5046;
          _9049_recIdents = _out5047;
          Dafny.ISequence<Dafny.Rune> _9050_s = Dafny.Sequence<Dafny.Rune>.Empty;
          Dafny.ISequence<Dafny.Rune> _9051_onString;
          _9051_onString = (_9047_onExpr)._ToString(DCOMPUTF16.__default.IND);
          if (_9043_isStatic) {
            _9050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9051_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMPUTF16.__default.escapeIdent(_9045_field));
          } else {
            _9050_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            _9050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9050_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _9051_onString), ((object.Equals(_9048_onOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _9052_args;
            _9052_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _9053_i;
            _9053_i = BigInteger.Zero;
            while ((_9053_i) < (_9042_arity)) {
              if ((_9053_i).Sign == 1) {
                _9052_args = Dafny.Sequence<Dafny.Rune>.Concat(_9052_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _9052_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9052_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_9053_i));
              _9053_i = (_9053_i) + (BigInteger.One);
            }
            _9050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9050_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _9052_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            _9050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9050_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _9045_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _9052_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            _9050_s = Dafny.Sequence<Dafny.Rune>.Concat(_9050_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            _9050_s = Dafny.Sequence<Dafny.Rune>.Concat(_9050_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _9054_typeShape;
          _9054_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _9055_i;
          _9055_i = BigInteger.Zero;
          while ((_9055_i) < (_9042_arity)) {
            if ((_9055_i).Sign == 1) {
              _9054_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_9054_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _9054_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_9054_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _9055_i = (_9055_i) + (BigInteger.One);
          }
          _9054_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_9054_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          _9050_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), _9050_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _9054_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          r = RAST.Expr.create_RawExpr(_9050_s);
          RAST._IExpr _out5048;
          DCOMPUTF16._IOwnership _out5049;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5048, out _out5049);
          r = _out5048;
          resultingOwnership = _out5049;
          readIdents = _9049_recIdents;
          return ;
        }
      } else if (_source312.is_Index) {
        DAST._IExpression _9056___mcc_h239 = _source312.dtor_expr;
        DAST._ICollKind _9057___mcc_h240 = _source312.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _9058___mcc_h241 = _source312.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _9059_indices = _9058___mcc_h241;
        DAST._ICollKind _9060_collKind = _9057___mcc_h240;
        DAST._IExpression _9061_on = _9056___mcc_h239;
        {
          RAST._IExpr _9062_onExpr;
          DCOMPUTF16._IOwnership _9063_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9064_recIdents;
          RAST._IExpr _out5050;
          DCOMPUTF16._IOwnership _out5051;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5052;
          DCOMPUTF16.COMP.GenExpr(_9061_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5050, out _out5051, out _out5052);
          _9062_onExpr = _out5050;
          _9063_onOwned = _out5051;
          _9064_recIdents = _out5052;
          readIdents = _9064_recIdents;
          r = _9062_onExpr;
          BigInteger _9065_i;
          _9065_i = BigInteger.Zero;
          while ((_9065_i) < (new BigInteger((_9059_indices).Count))) {
            if (object.Equals(_9060_collKind, DAST.CollKind.create_Array())) {
              r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("borrow"))).Apply(Dafny.Sequence<RAST._IExpr>.FromElements());
            }
            RAST._IExpr _9066_idx;
            DCOMPUTF16._IOwnership _9067_idxOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9068_recIdentsIdx;
            RAST._IExpr _out5053;
            DCOMPUTF16._IOwnership _out5054;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5055;
            DCOMPUTF16.COMP.GenExpr((_9059_indices).Select(_9065_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5053, out _out5054, out _out5055);
            _9066_idx = _out5053;
            _9067_idxOwned = _out5054;
            _9068_recIdentsIdx = _out5055;
            r = ((r).Sel(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("get"))).Apply1(_9066_idx);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9068_recIdentsIdx);
            _9065_i = (_9065_i) + (BigInteger.One);
          }
          RAST._IExpr _out5056;
          DCOMPUTF16._IOwnership _out5057;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5056, out _out5057);
          r = _out5056;
          resultingOwnership = _out5057;
          return ;
        }
      } else if (_source312.is_IndexRange) {
        DAST._IExpression _9069___mcc_h242 = _source312.dtor_expr;
        bool _9070___mcc_h243 = _source312.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _9071___mcc_h244 = _source312.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _9072___mcc_h245 = _source312.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _9073_high = _9072___mcc_h245;
        Std.Wrappers._IOption<DAST._IExpression> _9074_low = _9071___mcc_h244;
        bool _9075_isArray = _9070___mcc_h243;
        DAST._IExpression _9076_on = _9069___mcc_h242;
        {
          RAST._IExpr _9077_onExpr;
          DCOMPUTF16._IOwnership _9078_onOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9079_recIdents;
          RAST._IExpr _out5058;
          DCOMPUTF16._IOwnership _out5059;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5060;
          DCOMPUTF16.COMP.GenExpr(_9076_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5058, out _out5059, out _out5060);
          _9077_onExpr = _out5058;
          _9078_onOwned = _out5059;
          _9079_recIdents = _out5060;
          readIdents = _9079_recIdents;
          Dafny.ISequence<Dafny.Rune> _9080_methodName;
          _9080_methodName = (((_9074_low).is_Some) ? ((((_9073_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("slice")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("drop")))) : ((((_9073_high).is_Some) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("take")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))));
          Dafny.ISequence<RAST._IExpr> _9081_arguments;
          _9081_arguments = Dafny.Sequence<RAST._IExpr>.FromElements();
          Std.Wrappers._IOption<DAST._IExpression> _source316 = _9074_low;
          if (_source316.is_None) {
          } else {
            DAST._IExpression _9082___mcc_h274 = _source316.dtor_value;
            DAST._IExpression _9083_l = _9082___mcc_h274;
            {
              RAST._IExpr _9084_lExpr;
              DCOMPUTF16._IOwnership _9085___v122;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9086_recIdentsL;
              RAST._IExpr _out5061;
              DCOMPUTF16._IOwnership _out5062;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5063;
              DCOMPUTF16.COMP.GenExpr(_9083_l, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5061, out _out5062, out _out5063);
              _9084_lExpr = _out5061;
              _9085___v122 = _out5062;
              _9086_recIdentsL = _out5063;
              _9081_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_9081_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_9084_lExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9086_recIdentsL);
            }
          }
          Std.Wrappers._IOption<DAST._IExpression> _source317 = _9073_high;
          if (_source317.is_None) {
          } else {
            DAST._IExpression _9087___mcc_h275 = _source317.dtor_value;
            DAST._IExpression _9088_h = _9087___mcc_h275;
            {
              RAST._IExpr _9089_hExpr;
              DCOMPUTF16._IOwnership _9090___v123;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9091_recIdentsH;
              RAST._IExpr _out5064;
              DCOMPUTF16._IOwnership _out5065;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5066;
              DCOMPUTF16.COMP.GenExpr(_9088_h, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5064, out _out5065, out _out5066);
              _9089_hExpr = _out5064;
              _9090___v123 = _out5065;
              _9091_recIdentsH = _out5066;
              _9081_arguments = Dafny.Sequence<RAST._IExpr>.Concat(_9081_arguments, Dafny.Sequence<RAST._IExpr>.FromElements(_9089_hExpr));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9091_recIdentsH);
            }
          }
          r = _9077_onExpr;
          if (_9075_isArray) {
            if (!(_9080_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              _9080_methodName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"), _9080_methodName);
            }
            r = ((RAST.__default.dafny__runtime__Sequence).MSel(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("from_array"), _9080_methodName))).Apply(_9081_arguments);
          } else {
            if (!(_9080_methodName).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) {
              r = ((r).Sel(_9080_methodName)).Apply(_9081_arguments);
            }
          }
          RAST._IExpr _out5067;
          DCOMPUTF16._IOwnership _out5068;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5067, out _out5068);
          r = _out5067;
          resultingOwnership = _out5068;
          return ;
        }
      } else if (_source312.is_TupleSelect) {
        DAST._IExpression _9092___mcc_h246 = _source312.dtor_expr;
        BigInteger _9093___mcc_h247 = _source312.dtor_index;
        BigInteger _9094_idx = _9093___mcc_h247;
        DAST._IExpression _9095_on = _9092___mcc_h246;
        {
          RAST._IExpr _9096_onExpr;
          DCOMPUTF16._IOwnership _9097_onOwnership;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9098_recIdents;
          RAST._IExpr _out5069;
          DCOMPUTF16._IOwnership _out5070;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5071;
          DCOMPUTF16.COMP.GenExpr(_9095_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5069, out _out5070, out _out5071);
          _9096_onExpr = _out5069;
          _9097_onOwnership = _out5070;
          _9098_recIdents = _out5071;
          r = (_9096_onExpr).Sel(Std.Strings.__default.OfNat(_9094_idx));
          RAST._IExpr _out5072;
          DCOMPUTF16._IOwnership _out5073;
          DCOMPUTF16.COMP.FromOwnership(r, _9097_onOwnership, expectedOwnership, out _out5072, out _out5073);
          r = _out5072;
          resultingOwnership = _out5073;
          readIdents = _9098_recIdents;
          return ;
        }
      } else if (_source312.is_Call) {
        DAST._IExpression _9099___mcc_h248 = _source312.dtor_on;
        DAST._ICallName _9100___mcc_h249 = _source312.dtor_callName;
        Dafny.ISequence<DAST._IType> _9101___mcc_h250 = _source312.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _9102___mcc_h251 = _source312.dtor_args;
        Dafny.ISequence<DAST._IExpression> _9103_args = _9102___mcc_h251;
        Dafny.ISequence<DAST._IType> _9104_typeArgs = _9101___mcc_h250;
        DAST._ICallName _9105_name = _9100___mcc_h249;
        DAST._IExpression _9106_on = _9099___mcc_h248;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<RAST._IType> _9107_typeExprs;
          _9107_typeExprs = Dafny.Sequence<RAST._IType>.FromElements();
          if ((new BigInteger((_9104_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _9108_typeI;
            _9108_typeI = BigInteger.Zero;
            while ((_9108_typeI) < (new BigInteger((_9104_typeArgs).Count))) {
              RAST._IType _9109_typeExpr;
              RAST._IType _out5074;
              _out5074 = DCOMPUTF16.COMP.GenType((_9104_typeArgs).Select(_9108_typeI), false, false);
              _9109_typeExpr = _out5074;
              _9107_typeExprs = Dafny.Sequence<RAST._IType>.Concat(_9107_typeExprs, Dafny.Sequence<RAST._IType>.FromElements(_9109_typeExpr));
              _9108_typeI = (_9108_typeI) + (BigInteger.One);
            }
          }
          Dafny.ISequence<RAST._IExpr> _9110_argExprs;
          _9110_argExprs = Dafny.Sequence<RAST._IExpr>.FromElements();
          BigInteger _9111_i;
          _9111_i = BigInteger.Zero;
          while ((_9111_i) < (new BigInteger((_9103_args).Count))) {
            RAST._IExpr _9112_argExpr;
            DCOMPUTF16._IOwnership _9113_argOwnership;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9114_argIdents;
            RAST._IExpr _out5075;
            DCOMPUTF16._IOwnership _out5076;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5077;
            DCOMPUTF16.COMP.GenExpr((_9103_args).Select(_9111_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5075, out _out5076, out _out5077);
            _9112_argExpr = _out5075;
            _9113_argOwnership = _out5076;
            _9114_argIdents = _out5077;
            _9110_argExprs = Dafny.Sequence<RAST._IExpr>.Concat(_9110_argExprs, Dafny.Sequence<RAST._IExpr>.FromElements(_9112_argExpr));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9114_argIdents);
            _9111_i = (_9111_i) + (BigInteger.One);
          }
          RAST._IExpr _9115_onExpr;
          DCOMPUTF16._IOwnership _9116___v124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9117_recIdents;
          RAST._IExpr _out5078;
          DCOMPUTF16._IOwnership _out5079;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5080;
          DCOMPUTF16.COMP.GenExpr(_9106_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipAutoBorrowed(), out _out5078, out _out5079, out _out5080);
          _9115_onExpr = _out5078;
          _9116___v124 = _out5079;
          _9117_recIdents = _out5080;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9117_recIdents);
          Dafny.ISequence<Dafny.Rune> _9118_renderedName;
          _9118_renderedName = ((System.Func<DAST._ICallName, Dafny.ISequence<Dafny.Rune>>)((_source318) => {
            if (_source318.is_Name) {
              Dafny.ISequence<Dafny.Rune> _9119___mcc_h276 = _source318.dtor_name;
              Dafny.ISequence<Dafny.Rune> _9120_ident = _9119___mcc_h276;
              return DCOMPUTF16.__default.escapeIdent(_9120_ident);
            } else if (_source318.is_MapBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else if (_source318.is_MapBuilderBuild) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            } else if (_source318.is_SetBuilderAdd) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("add");
            } else {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("build");
            }
          }))(_9105_name);
          DAST._IExpression _source319 = _9106_on;
          if (_source319.is_Literal) {
            DAST._ILiteral _9121___mcc_h277 = _source319.dtor_Literal_a0;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _9122___mcc_h279 = _source319.dtor_Ident_a0;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9123___mcc_h281 = _source319.dtor_Companion_a0;
            {
              _9115_onExpr = (_9115_onExpr).MSel(_9118_renderedName);
            }
          } else if (_source319.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _9124___mcc_h283 = _source319.dtor_Tuple_a0;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9125___mcc_h285 = _source319.dtor_path;
            Dafny.ISequence<DAST._IType> _9126___mcc_h286 = _source319.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _9127___mcc_h287 = _source319.dtor_args;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _9128___mcc_h291 = _source319.dtor_dims;
            DAST._IType _9129___mcc_h292 = _source319.dtor_typ;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_DatatypeValue) {
            DAST._IDatatypeType _9130___mcc_h295 = _source319.dtor_datatypeType;
            Dafny.ISequence<DAST._IType> _9131___mcc_h296 = _source319.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _9132___mcc_h297 = _source319.dtor_variant;
            bool _9133___mcc_h298 = _source319.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _9134___mcc_h299 = _source319.dtor_contents;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Convert) {
            DAST._IExpression _9135___mcc_h305 = _source319.dtor_value;
            DAST._IType _9136___mcc_h306 = _source319.dtor_from;
            DAST._IType _9137___mcc_h307 = _source319.dtor_typ;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_SeqConstruct) {
            DAST._IExpression _9138___mcc_h311 = _source319.dtor_length;
            DAST._IExpression _9139___mcc_h312 = _source319.dtor_elem;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _9140___mcc_h315 = _source319.dtor_elements;
            DAST._IType _9141___mcc_h316 = _source319.dtor_typ;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _9142___mcc_h319 = _source319.dtor_elements;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_MultisetValue) {
            Dafny.ISequence<DAST._IExpression> _9143___mcc_h321 = _source319.dtor_elements;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _9144___mcc_h323 = _source319.dtor_mapElems;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_MapBuilder) {
            DAST._IType _9145___mcc_h325 = _source319.dtor_keyType;
            DAST._IType _9146___mcc_h326 = _source319.dtor_valueType;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_SeqUpdate) {
            DAST._IExpression _9147___mcc_h329 = _source319.dtor_expr;
            DAST._IExpression _9148___mcc_h330 = _source319.dtor_indexExpr;
            DAST._IExpression _9149___mcc_h331 = _source319.dtor_value;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_MapUpdate) {
            DAST._IExpression _9150___mcc_h335 = _source319.dtor_expr;
            DAST._IExpression _9151___mcc_h336 = _source319.dtor_indexExpr;
            DAST._IExpression _9152___mcc_h337 = _source319.dtor_value;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_SetBuilder) {
            DAST._IType _9153___mcc_h341 = _source319.dtor_elemType;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_ToMultiset) {
            DAST._IExpression _9154___mcc_h343 = _source319.dtor_ToMultiset_a0;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_This) {
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Ite) {
            DAST._IExpression _9155___mcc_h345 = _source319.dtor_cond;
            DAST._IExpression _9156___mcc_h346 = _source319.dtor_thn;
            DAST._IExpression _9157___mcc_h347 = _source319.dtor_els;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_UnOp) {
            DAST._IUnaryOp _9158___mcc_h351 = _source319.dtor_unOp;
            DAST._IExpression _9159___mcc_h352 = _source319.dtor_expr;
            DAST.Format._IUnOpFormat _9160___mcc_h353 = _source319.dtor_format1;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_BinOp) {
            DAST._IBinOp _9161___mcc_h357 = _source319.dtor_op;
            DAST._IExpression _9162___mcc_h358 = _source319.dtor_left;
            DAST._IExpression _9163___mcc_h359 = _source319.dtor_right;
            DAST.Format._IBinOpFormat _9164___mcc_h360 = _source319.dtor_format2;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_ArrayLen) {
            DAST._IExpression _9165___mcc_h365 = _source319.dtor_expr;
            BigInteger _9166___mcc_h366 = _source319.dtor_dim;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_MapKeys) {
            DAST._IExpression _9167___mcc_h369 = _source319.dtor_expr;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_MapValues) {
            DAST._IExpression _9168___mcc_h371 = _source319.dtor_expr;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Select) {
            DAST._IExpression _9169___mcc_h373 = _source319.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _9170___mcc_h374 = _source319.dtor_field;
            bool _9171___mcc_h375 = _source319.dtor_isConstant;
            bool _9172___mcc_h376 = _source319.dtor_onDatatype;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_SelectFn) {
            DAST._IExpression _9173___mcc_h381 = _source319.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _9174___mcc_h382 = _source319.dtor_field;
            bool _9175___mcc_h383 = _source319.dtor_onDatatype;
            bool _9176___mcc_h384 = _source319.dtor_isStatic;
            BigInteger _9177___mcc_h385 = _source319.dtor_arity;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Index) {
            DAST._IExpression _9178___mcc_h391 = _source319.dtor_expr;
            DAST._ICollKind _9179___mcc_h392 = _source319.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _9180___mcc_h393 = _source319.dtor_indices;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_IndexRange) {
            DAST._IExpression _9181___mcc_h397 = _source319.dtor_expr;
            bool _9182___mcc_h398 = _source319.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _9183___mcc_h399 = _source319.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _9184___mcc_h400 = _source319.dtor_high;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_TupleSelect) {
            DAST._IExpression _9185___mcc_h405 = _source319.dtor_expr;
            BigInteger _9186___mcc_h406 = _source319.dtor_index;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Call) {
            DAST._IExpression _9187___mcc_h409 = _source319.dtor_on;
            DAST._ICallName _9188___mcc_h410 = _source319.dtor_callName;
            Dafny.ISequence<DAST._IType> _9189___mcc_h411 = _source319.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _9190___mcc_h412 = _source319.dtor_args;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _9191___mcc_h417 = _source319.dtor_params;
            DAST._IType _9192___mcc_h418 = _source319.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _9193___mcc_h419 = _source319.dtor_body;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9194___mcc_h423 = _source319.dtor_values;
            DAST._IType _9195___mcc_h424 = _source319.dtor_retType;
            DAST._IExpression _9196___mcc_h425 = _source319.dtor_expr;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _9197___mcc_h429 = _source319.dtor_name;
            DAST._IType _9198___mcc_h430 = _source319.dtor_typ;
            DAST._IExpression _9199___mcc_h431 = _source319.dtor_value;
            DAST._IExpression _9200___mcc_h432 = _source319.dtor_iifeBody;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_Apply) {
            DAST._IExpression _9201___mcc_h437 = _source319.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _9202___mcc_h438 = _source319.dtor_args;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_TypeTest) {
            DAST._IExpression _9203___mcc_h441 = _source319.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9204___mcc_h442 = _source319.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _9205___mcc_h443 = _source319.dtor_variant;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_InitializationValue) {
            DAST._IType _9206___mcc_h447 = _source319.dtor_typ;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_BoolBoundedPool) {
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_SetBoundedPool) {
            DAST._IExpression _9207___mcc_h449 = _source319.dtor_of;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else if (_source319.is_SeqBoundedPool) {
            DAST._IExpression _9208___mcc_h451 = _source319.dtor_of;
            bool _9209___mcc_h452 = _source319.dtor_includeDuplicates;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          } else {
            DAST._IExpression _9210___mcc_h455 = _source319.dtor_lo;
            DAST._IExpression _9211___mcc_h456 = _source319.dtor_hi;
            {
              _9115_onExpr = (_9115_onExpr).Sel(_9118_renderedName);
            }
          }
          r = _9115_onExpr;
          if ((new BigInteger((_9107_typeExprs).Count)).Sign == 1) {
            r = (r).ApplyType(_9107_typeExprs);
          }
          r = (r).Apply(_9110_argExprs);
          RAST._IExpr _out5081;
          DCOMPUTF16._IOwnership _out5082;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5081, out _out5082);
          r = _out5081;
          resultingOwnership = _out5082;
          return ;
        }
      } else if (_source312.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _9212___mcc_h252 = _source312.dtor_params;
        DAST._IType _9213___mcc_h253 = _source312.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _9214___mcc_h254 = _source312.dtor_body;
        Dafny.ISequence<DAST._IStatement> _9215_body = _9214___mcc_h254;
        DAST._IType _9216_retType = _9213___mcc_h253;
        Dafny.ISequence<DAST._IFormal> _9217_params = _9212___mcc_h252;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9218_paramNames;
          _9218_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _9219_paramOwnerships;
          _9219_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
          BigInteger _9220_i;
          _9220_i = BigInteger.Zero;
          while ((_9220_i) < (new BigInteger((_9217_params).Count))) {
            Dafny.ISequence<Dafny.Rune> _9221_name;
            _9221_name = ((_9217_params).Select(_9220_i)).dtor_name;
            _9218_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_9218_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_9221_name));
            _9219_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_9219_paramOwnerships, _9221_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
            _9220_i = (_9220_i) + (BigInteger.One);
          }
          DCOMPUTF16._IEnvironment _9222_env;
          _9222_env = DCOMPUTF16.Environment.create(_9218_paramNames, _9219_paramOwnerships);
          RAST._IExpr _9223_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9224_recIdents;
          RAST._IExpr _out5083;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5084;
          DCOMPUTF16.COMP.GenStmts(_9215_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _9222_env, true, RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")), out _out5083, out _out5084);
          _9223_recursiveGen = _out5083;
          _9224_recIdents = _out5084;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _9225_allReadCloned;
          _9225_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_9224_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _9226_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_5 in (_9224_recIdents).Elements) {
              _9226_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_5;
              if ((_9224_recIdents).Contains(_9226_next)) {
                goto after__ASSIGN_SUCH_THAT_5;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 3236)");
          after__ASSIGN_SUCH_THAT_5: ;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_9226_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _9225_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_9225_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_9218_paramNames).Contains(_9226_next))) {
              _9225_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9225_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent(_9226_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMPUTF16.__default.escapeIdent(_9226_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_9226_next));
            }
            _9224_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9224_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_9226_next));
          }
          Dafny.ISequence<Dafny.Rune> _9227_paramsString;
          _9227_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _9228_paramTypes;
          _9228_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _9220_i = BigInteger.Zero;
          while ((_9220_i) < (new BigInteger((_9217_params).Count))) {
            if ((_9220_i).Sign == 1) {
              _9227_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_9227_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _9228_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_9228_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _9229_typStr;
            RAST._IType _out5085;
            _out5085 = DCOMPUTF16.COMP.GenType(((_9217_params).Select(_9220_i)).dtor_typ, false, true);
            _9229_typStr = _out5085;
            _9227_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9227_paramsString, DCOMPUTF16.__default.escapeIdent(((_9217_params).Select(_9220_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (RAST.Type.create_Borrowed(_9229_typStr))._ToString(DCOMPUTF16.__default.IND));
            _9228_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_9228_paramTypes, (RAST.Type.create_Borrowed(_9229_typStr))._ToString(DCOMPUTF16.__default.IND));
            _9220_i = (_9220_i) + (BigInteger.One);
          }
          RAST._IType _9230_retTypeGen;
          RAST._IType _out5086;
          _out5086 = DCOMPUTF16.COMP.GenType(_9216_retType, false, true);
          _9230_retTypeGen = _out5086;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _9228_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), (_9230_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _9225_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _9227_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), (_9230_retTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), (_9223_recursiveGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})")));
          RAST._IExpr _out5087;
          DCOMPUTF16._IOwnership _out5088;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5087, out _out5088);
          r = _out5087;
          resultingOwnership = _out5088;
          return ;
        }
      } else if (_source312.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9231___mcc_h255 = _source312.dtor_values;
        DAST._IType _9232___mcc_h256 = _source312.dtor_retType;
        DAST._IExpression _9233___mcc_h257 = _source312.dtor_expr;
        DAST._IExpression _9234_expr = _9233___mcc_h257;
        DAST._IType _9235_retType = _9232___mcc_h256;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _9236_values = _9231___mcc_h255;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9237_paramNames;
          _9237_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.IMap<Dafny.ISequence<Dafny.Rune>,DCOMPUTF16._IOwnership> _9238_paramOwnerships;
          _9238_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9239_paramNamesSet;
          _9239_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _9240_i;
          _9240_i = BigInteger.Zero;
          while ((_9240_i) < (new BigInteger((_9236_values).Count))) {
            Dafny.ISequence<Dafny.Rune> _9241_name;
            _9241_name = (((_9236_values).Select(_9240_i)).dtor__0).dtor_name;
            _9237_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_9237_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_9241_name));
            _9238_paramOwnerships = Dafny.Map<Dafny.ISequence<Dafny.Rune>, DCOMPUTF16._IOwnership>.Update(_9238_paramOwnerships, _9241_name, DCOMPUTF16.Ownership.create_OwnershipBorrowed());
            _9239_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_9239_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_9241_name));
            _9240_i = (_9240_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _9242_s;
          _9242_s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _9243_paramsString;
          _9243_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _9240_i = BigInteger.Zero;
          while ((_9240_i) < (new BigInteger((_9236_values).Count))) {
            if ((_9240_i).Sign == 1) {
              _9243_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_9243_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IType _9244_typStr;
            RAST._IType _out5089;
            _out5089 = DCOMPUTF16.COMP.GenType((((_9236_values).Select(_9240_i)).dtor__0).dtor_typ, false, true);
            _9244_typStr = _out5089;
            RAST._IExpr _9245_valueGen;
            DCOMPUTF16._IOwnership _9246___v127;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9247_recIdents;
            RAST._IExpr _out5090;
            DCOMPUTF16._IOwnership _out5091;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5092;
            DCOMPUTF16.COMP.GenExpr(((_9236_values).Select(_9240_i)).dtor__1, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5090, out _out5091, out _out5092);
            _9245_valueGen = _out5090;
            _9246___v127 = _out5091;
            _9247_recIdents = _out5092;
            _9242_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9242_s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMPUTF16.__default.escapeIdent((((_9236_values).Select(_9240_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_9244_typStr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9247_recIdents);
            _9242_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9242_s, (_9245_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _9240_i = (_9240_i) + (BigInteger.One);
          }
          DCOMPUTF16._IEnvironment _9248_newEnv;
          _9248_newEnv = DCOMPUTF16.Environment.create(_9237_paramNames, _9238_paramOwnerships);
          RAST._IExpr _9249_recGen;
          DCOMPUTF16._IOwnership _9250_recOwned;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9251_recIdents;
          RAST._IExpr _out5093;
          DCOMPUTF16._IOwnership _out5094;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5095;
          DCOMPUTF16.COMP.GenExpr(_9234_expr, selfIdent, _9248_newEnv, expectedOwnership, out _out5093, out _out5094, out _out5095);
          _9249_recGen = _out5093;
          _9250_recOwned = _out5094;
          _9251_recIdents = _out5095;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9251_recIdents, _9239_paramNamesSet);
          _9242_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_9242_s, (_9249_recGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          r = RAST.Expr.create_RawExpr(_9242_s);
          RAST._IExpr _out5096;
          DCOMPUTF16._IOwnership _out5097;
          DCOMPUTF16.COMP.FromOwnership(r, _9250_recOwned, expectedOwnership, out _out5096, out _out5097);
          r = _out5096;
          resultingOwnership = _out5097;
          return ;
        }
      } else if (_source312.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _9252___mcc_h258 = _source312.dtor_name;
        DAST._IType _9253___mcc_h259 = _source312.dtor_typ;
        DAST._IExpression _9254___mcc_h260 = _source312.dtor_value;
        DAST._IExpression _9255___mcc_h261 = _source312.dtor_iifeBody;
        DAST._IExpression _9256_iifeBody = _9255___mcc_h261;
        DAST._IExpression _9257_value = _9254___mcc_h260;
        DAST._IType _9258_tpe = _9253___mcc_h259;
        Dafny.ISequence<Dafny.Rune> _9259_name = _9252___mcc_h258;
        {
          RAST._IExpr _9260_valueGen;
          DCOMPUTF16._IOwnership _9261___v128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9262_recIdents;
          RAST._IExpr _out5098;
          DCOMPUTF16._IOwnership _out5099;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5100;
          DCOMPUTF16.COMP.GenExpr(_9257_value, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5098, out _out5099, out _out5100);
          _9260_valueGen = _out5098;
          _9261___v128 = _out5099;
          _9262_recIdents = _out5100;
          readIdents = _9262_recIdents;
          RAST._IType _9263_valueTypeGen;
          RAST._IType _out5101;
          _out5101 = DCOMPUTF16.COMP.GenType(_9258_tpe, false, true);
          _9263_valueTypeGen = _out5101;
          RAST._IExpr _9264_bodyGen;
          DCOMPUTF16._IOwnership _9265___v129;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9266_bodyIdents;
          RAST._IExpr _out5102;
          DCOMPUTF16._IOwnership _out5103;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5104;
          DCOMPUTF16.COMP.GenExpr(_9256_iifeBody, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5102, out _out5103, out _out5104);
          _9264_bodyGen = _out5102;
          _9265___v129 = _out5103;
          _9266_bodyIdents = _out5104;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_9266_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_9259_name))));
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMPUTF16.__default.escapeIdent((_9259_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), (_9263_valueTypeGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), (_9260_valueGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), (_9264_bodyGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}")));
          RAST._IExpr _out5105;
          DCOMPUTF16._IOwnership _out5106;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5105, out _out5106);
          r = _out5105;
          resultingOwnership = _out5106;
          return ;
        }
      } else if (_source312.is_Apply) {
        DAST._IExpression _9267___mcc_h262 = _source312.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _9268___mcc_h263 = _source312.dtor_args;
        Dafny.ISequence<DAST._IExpression> _9269_args = _9268___mcc_h263;
        DAST._IExpression _9270_func = _9267___mcc_h262;
        {
          RAST._IExpr _9271_funcExpr;
          DCOMPUTF16._IOwnership _9272___v130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9273_recIdents;
          RAST._IExpr _out5107;
          DCOMPUTF16._IOwnership _out5108;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5109;
          DCOMPUTF16.COMP.GenExpr(_9270_func, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5107, out _out5108, out _out5109);
          _9271_funcExpr = _out5107;
          _9272___v130 = _out5108;
          _9273_recIdents = _out5109;
          readIdents = _9273_recIdents;
          Dafny.ISequence<Dafny.Rune> _9274_argString;
          _9274_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _9275_i;
          _9275_i = BigInteger.Zero;
          while ((_9275_i) < (new BigInteger((_9269_args).Count))) {
            if ((_9275_i).Sign == 1) {
              _9274_argString = Dafny.Sequence<Dafny.Rune>.Concat(_9274_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            RAST._IExpr _9276_argExpr;
            DCOMPUTF16._IOwnership _9277_argOwned;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9278_argIdents;
            RAST._IExpr _out5110;
            DCOMPUTF16._IOwnership _out5111;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5112;
            DCOMPUTF16.COMP.GenExpr((_9269_args).Select(_9275_i), selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5110, out _out5111, out _out5112);
            _9276_argExpr = _out5110;
            _9277_argOwned = _out5111;
            _9278_argIdents = _out5112;
            Dafny.ISequence<Dafny.Rune> _9279_argExprString;
            _9279_argExprString = (_9276_argExpr)._ToString(DCOMPUTF16.__default.IND);
            if (object.Equals(_9277_argOwned, DCOMPUTF16.Ownership.create_OwnershipOwned())) {
              _9279_argExprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _9279_argExprString);
            }
            _9274_argString = Dafny.Sequence<Dafny.Rune>.Concat(_9274_argString, _9279_argExprString);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _9278_argIdents);
            _9275_i = (_9275_i) + (BigInteger.One);
          }
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), (_9271_funcExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _9274_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))")));
          RAST._IExpr _out5113;
          DCOMPUTF16._IOwnership _out5114;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5113, out _out5114);
          r = _out5113;
          resultingOwnership = _out5114;
          return ;
        }
      } else if (_source312.is_TypeTest) {
        DAST._IExpression _9280___mcc_h264 = _source312.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9281___mcc_h265 = _source312.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _9282___mcc_h266 = _source312.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _9283_variant = _9282___mcc_h266;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _9284_dType = _9281___mcc_h265;
        DAST._IExpression _9285_on = _9280___mcc_h264;
        {
          RAST._IExpr _9286_exprGen;
          DCOMPUTF16._IOwnership _9287___v131;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9288_recIdents;
          RAST._IExpr _out5115;
          DCOMPUTF16._IOwnership _out5116;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5117;
          DCOMPUTF16.COMP.GenExpr(_9285_on, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5115, out _out5116, out _out5117);
          _9286_exprGen = _out5115;
          _9287___v131 = _out5116;
          _9288_recIdents = _out5117;
          RAST._IType _9289_dTypePath;
          RAST._IType _out5118;
          _out5118 = DCOMPUTF16.COMP.GenPath(_9284_dType);
          _9289_dTypePath = _out5118;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), (_9286_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), ((_9289_dTypePath).MSel(DCOMPUTF16.__default.escapeIdent(_9283_variant)))._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })")));
          RAST._IExpr _out5119;
          DCOMPUTF16._IOwnership _out5120;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5119, out _out5120);
          r = _out5119;
          resultingOwnership = _out5120;
          readIdents = _9288_recIdents;
          return ;
        }
      } else if (_source312.is_InitializationValue) {
        DAST._IType _9290___mcc_h267 = _source312.dtor_typ;
        DAST._IType _9291_typ = _9290___mcc_h267;
        {
          RAST._IType _9292_typExpr;
          RAST._IType _out5121;
          _out5121 = DCOMPUTF16.COMP.GenType(_9291_typ, false, false);
          _9292_typExpr = _out5121;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), (_9292_typExpr)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()")));
          RAST._IExpr _out5122;
          DCOMPUTF16._IOwnership _out5123;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5122, out _out5123);
          r = _out5122;
          resultingOwnership = _out5123;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source312.is_BoolBoundedPool) {
        {
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]"));
          RAST._IExpr _out5124;
          DCOMPUTF16._IOwnership _out5125;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5124, out _out5125);
          r = _out5124;
          resultingOwnership = _out5125;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          return ;
        }
      } else if (_source312.is_SetBoundedPool) {
        DAST._IExpression _9293___mcc_h268 = _source312.dtor_of;
        DAST._IExpression _9294_of = _9293___mcc_h268;
        {
          RAST._IExpr _9295_exprGen;
          DCOMPUTF16._IOwnership _9296___v132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9297_recIdents;
          RAST._IExpr _out5126;
          DCOMPUTF16._IOwnership _out5127;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5128;
          DCOMPUTF16.COMP.GenExpr(_9294_of, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5126, out _out5127, out _out5128);
          _9295_exprGen = _out5126;
          _9296___v132 = _out5127;
          _9297_recIdents = _out5128;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9295_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()")));
          RAST._IExpr _out5129;
          DCOMPUTF16._IOwnership _out5130;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5129, out _out5130);
          r = _out5129;
          resultingOwnership = _out5130;
          readIdents = _9297_recIdents;
          return ;
        }
      } else if (_source312.is_SeqBoundedPool) {
        DAST._IExpression _9298___mcc_h269 = _source312.dtor_of;
        bool _9299___mcc_h270 = _source312.dtor_includeDuplicates;
        bool _9300_includeDuplicates = _9299___mcc_h270;
        DAST._IExpression _9301_of = _9298___mcc_h269;
        {
          RAST._IExpr _9302_exprGen;
          DCOMPUTF16._IOwnership _9303___v133;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9304_recIdents;
          RAST._IExpr _out5131;
          DCOMPUTF16._IOwnership _out5132;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5133;
          DCOMPUTF16.COMP.GenExpr(_9301_of, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipBorrowed(), out _out5131, out _out5132, out _out5133);
          _9302_exprGen = _out5131;
          _9303___v133 = _out5132;
          _9304_recIdents = _out5133;
          Dafny.ISequence<Dafny.Rune> _9305_s;
          _9305_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), (_9302_exprGen)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_9300_includeDuplicates)) {
            _9305_s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), _9305_s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          r = RAST.Expr.create_RawExpr(_9305_s);
          RAST._IExpr _out5134;
          DCOMPUTF16._IOwnership _out5135;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5134, out _out5135);
          r = _out5134;
          resultingOwnership = _out5135;
          readIdents = _9304_recIdents;
          return ;
        }
      } else {
        DAST._IExpression _9306___mcc_h271 = _source312.dtor_lo;
        DAST._IExpression _9307___mcc_h272 = _source312.dtor_hi;
        DAST._IExpression _9308_hi = _9307___mcc_h272;
        DAST._IExpression _9309_lo = _9306___mcc_h271;
        {
          RAST._IExpr _9310_lo;
          DCOMPUTF16._IOwnership _9311___v134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9312_recIdentsLo;
          RAST._IExpr _out5136;
          DCOMPUTF16._IOwnership _out5137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5138;
          DCOMPUTF16.COMP.GenExpr(_9309_lo, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5136, out _out5137, out _out5138);
          _9310_lo = _out5136;
          _9311___v134 = _out5137;
          _9312_recIdentsLo = _out5138;
          RAST._IExpr _9313_hi;
          DCOMPUTF16._IOwnership _9314___v135;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _9315_recIdentsHi;
          RAST._IExpr _out5139;
          DCOMPUTF16._IOwnership _out5140;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out5141;
          DCOMPUTF16.COMP.GenExpr(_9308_hi, selfIdent, env, DCOMPUTF16.Ownership.create_OwnershipOwned(), out _out5139, out _out5140, out _out5141);
          _9313_hi = _out5139;
          _9314___v135 = _out5140;
          _9315_recIdentsHi = _out5141;
          r = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), (_9310_lo)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), (_9313_hi)._ToString(DCOMPUTF16.__default.IND)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")));
          RAST._IExpr _out5142;
          DCOMPUTF16._IOwnership _out5143;
          DCOMPUTF16.COMP.FromOwned(r, expectedOwnership, out _out5142, out _out5143);
          r = _out5142;
          resultingOwnership = _out5143;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_9312_recIdentsLo, _9315_recIdentsHi);
          return ;
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _9316_i;
      _9316_i = BigInteger.Zero;
      while ((_9316_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _9317_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _9318_m;
        RAST._IMod _out5144;
        _out5144 = DCOMPUTF16.COMP.GenModule((p).Select(_9316_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _9318_m = _out5144;
        _9317_generated = (_9318_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_9316_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _9317_generated);
        _9316_i = (_9316_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName)
    {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _9319_i;
      _9319_i = BigInteger.Zero;
      while ((_9319_i) < (new BigInteger((fullName).Count))) {
        if ((_9319_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMPUTF16.__default.escapeIdent((fullName).Select(_9319_i)));
        _9319_i = (_9319_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
    public static Dafny.IMap<DAST._IBinOp,Dafny.ISequence<Dafny.Rune>> OpTable { get {
      return Dafny.Map<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>.FromElements(new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Mod(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("%")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_And(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Or(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("||")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Div(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Lt(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_LtChar(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Plus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("+")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Minus(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("-")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_Times(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseAnd(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseOr(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("|")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseXor(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("^")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftRight(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>")), new Dafny.Pair<DAST._IBinOp, Dafny.ISequence<Dafny.Rune>>(DAST.BinOp.create_BitwiseShiftLeft(), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<<")));
    } }
  }
} // end of namespace DCOMPUTF16

